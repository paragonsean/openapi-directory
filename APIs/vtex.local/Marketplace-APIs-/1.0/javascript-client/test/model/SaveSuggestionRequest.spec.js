/**
 * Suggestions
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Suggestions);
  }
}(this, function(expect, Suggestions) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Suggestions.SaveSuggestionRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SaveSuggestionRequest', function() {
    it('should create an instance of SaveSuggestionRequest', function() {
      // uncomment below and update the code to test SaveSuggestionRequest
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be.a(Suggestions.SaveSuggestionRequest);
    });

    it('should have the property availableQuantity (base name: "AvailableQuantity")', function() {
      // uncomment below and update the code to test the property availableQuantity
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property brandName (base name: "BrandName")', function() {
      // uncomment below and update the code to test the property brandName
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property categoryFullPath (base name: "CategoryFullPath")', function() {
      // uncomment below and update the code to test the property categoryFullPath
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property EAN (base name: "EAN")', function() {
      // uncomment below and update the code to test the property EAN
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property height (base name: "Height")', function() {
      // uncomment below and update the code to test the property height
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property images (base name: "Images")', function() {
      // uncomment below and update the code to test the property images
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property length (base name: "Length")', function() {
      // uncomment below and update the code to test the property length
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property measurementUnit (base name: "MeasurementUnit")', function() {
      // uncomment below and update the code to test the property measurementUnit
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property pricing (base name: "Pricing")', function() {
      // uncomment below and update the code to test the property pricing
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property productDescription (base name: "ProductDescription")', function() {
      // uncomment below and update the code to test the property productDescription
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property productId (base name: "ProductId")', function() {
      // uncomment below and update the code to test the property productId
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property productName (base name: "ProductName")', function() {
      // uncomment below and update the code to test the property productName
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property productSpecifications (base name: "ProductSpecifications")', function() {
      // uncomment below and update the code to test the property productSpecifications
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property refId (base name: "RefId")', function() {
      // uncomment below and update the code to test the property refId
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property sellerId (base name: "SellerId")', function() {
      // uncomment below and update the code to test the property sellerId
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property sellerStockKeepingUnitId (base name: "SellerStockKeepingUnitId")', function() {
      // uncomment below and update the code to test the property sellerStockKeepingUnitId
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property skuName (base name: "SkuName")', function() {
      // uncomment below and update the code to test the property skuName
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property skuSpecifications (base name: "SkuSpecifications")', function() {
      // uncomment below and update the code to test the property skuSpecifications
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property unitMultiplier (base name: "UnitMultiplier")', function() {
      // uncomment below and update the code to test the property unitMultiplier
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property weight (base name: "Weight")', function() {
      // uncomment below and update the code to test the property weight
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

    it('should have the property width (base name: "Width")', function() {
      // uncomment below and update the code to test the property width
      //var instance = new Suggestions.SaveSuggestionRequest();
      //expect(instance).to.be();
    });

  });

}));
