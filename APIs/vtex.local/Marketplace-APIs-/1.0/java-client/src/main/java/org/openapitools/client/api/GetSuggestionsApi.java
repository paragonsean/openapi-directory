/*
 * Suggestions
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GetSuggestionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GetSuggestionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GetSuggestionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSuggestion
     * @param accountName Name of the VTEX account. Used as part of the URL (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace and informed to the seller before the integration is built. (required)
     * @param sellerSkuId A string that identifies the SKU in the marketplace. This is the ID that the marketplace will use for future references to this SKU, such as price and inventory notifications. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuggestionCall(String accountName, String accept, String contentType, String sellerId, String sellerSkuId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/suggestions/{sellerId}/{sellerSkuId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()))
            .replace("{" + "sellerSkuId" + "}", localVarApiClient.escapeString(sellerSkuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuggestionValidateBeforeCall(String accountName, String accept, String contentType, String sellerId, String sellerSkuId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getSuggestion(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getSuggestion(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getSuggestion(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getSuggestion(Async)");
        }

        // verify the required parameter 'sellerSkuId' is set
        if (sellerSkuId == null) {
            throw new ApiException("Missing the required parameter 'sellerSkuId' when calling getSuggestion(Async)");
        }

        return getSuggestionCall(accountName, accept, contentType, sellerId, sellerSkuId, _callback);

    }

    /**
     * Get SKU Suggestion by ID
     * This endpoint retrieves the data of a specific SKU sent by the seller, to the marketplace. Marketplaces or external matchers can call this endpoint when they want to check the information about a single SKU.   Note that all the information sent by the seller will be in the [content] object. All remaining information in this endpoint&#39;s response is given by the Matcher.   Matcher rates received SKUs by correlating the data sent by sellers, to existing fields in the marketplace. The calculation of these scores determines whether the product has been:   &#x60;Approved&#x60;: score equal to or greater than 80 points.   &#x60;Pending&#x60;: from 31 to 79 points.  &#x60;Denied&#x60;: from 0 to 30 points.   Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
     * @param accountName Name of the VTEX account. Used as part of the URL (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace and informed to the seller before the integration is built. (required)
     * @param sellerSkuId A string that identifies the SKU in the marketplace. This is the ID that the marketplace will use for future references to this SKU, such as price and inventory notifications. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getSuggestion(String accountName, String accept, String contentType, String sellerId, String sellerSkuId) throws ApiException {
        getSuggestionWithHttpInfo(accountName, accept, contentType, sellerId, sellerSkuId);
    }

    /**
     * Get SKU Suggestion by ID
     * This endpoint retrieves the data of a specific SKU sent by the seller, to the marketplace. Marketplaces or external matchers can call this endpoint when they want to check the information about a single SKU.   Note that all the information sent by the seller will be in the [content] object. All remaining information in this endpoint&#39;s response is given by the Matcher.   Matcher rates received SKUs by correlating the data sent by sellers, to existing fields in the marketplace. The calculation of these scores determines whether the product has been:   &#x60;Approved&#x60;: score equal to or greater than 80 points.   &#x60;Pending&#x60;: from 31 to 79 points.  &#x60;Denied&#x60;: from 0 to 30 points.   Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
     * @param accountName Name of the VTEX account. Used as part of the URL (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace and informed to the seller before the integration is built. (required)
     * @param sellerSkuId A string that identifies the SKU in the marketplace. This is the ID that the marketplace will use for future references to this SKU, such as price and inventory notifications. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSuggestionWithHttpInfo(String accountName, String accept, String contentType, String sellerId, String sellerSkuId) throws ApiException {
        okhttp3.Call localVarCall = getSuggestionValidateBeforeCall(accountName, accept, contentType, sellerId, sellerSkuId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get SKU Suggestion by ID (asynchronously)
     * This endpoint retrieves the data of a specific SKU sent by the seller, to the marketplace. Marketplaces or external matchers can call this endpoint when they want to check the information about a single SKU.   Note that all the information sent by the seller will be in the [content] object. All remaining information in this endpoint&#39;s response is given by the Matcher.   Matcher rates received SKUs by correlating the data sent by sellers, to existing fields in the marketplace. The calculation of these scores determines whether the product has been:   &#x60;Approved&#x60;: score equal to or greater than 80 points.   &#x60;Pending&#x60;: from 31 to 79 points.  &#x60;Denied&#x60;: from 0 to 30 points.   Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
     * @param accountName Name of the VTEX account. Used as part of the URL (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace and informed to the seller before the integration is built. (required)
     * @param sellerSkuId A string that identifies the SKU in the marketplace. This is the ID that the marketplace will use for future references to this SKU, such as price and inventory notifications. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuggestionAsync(String accountName, String accept, String contentType, String sellerId, String sellerSkuId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuggestionValidateBeforeCall(accountName, accept, contentType, sellerId, sellerSkuId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getsuggestions
     * @param accountName Name of the VTEX account. Used as part of the URL (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param q This field allows you to customize your search. You can fill in this query param if you want to narrow down your search using the available filters on Received SKU modules. (optional)
     * @param type This field allows users to filter SKU suggestions, by searching only the new suggestions that were just sent, and suggestions that have already been sent, but were updated. Possible values for this field include &#x60;new&#x60; and &#x60;update&#x60;. (optional)
     * @param seller A string that identifies the seller in the marketplace. This ID must be created by the marketplace and informed to the seller so it can call this endpoint. (optional)
     * @param status Narrow down you search, filtering by status. Values allowed on this field include: &#x60;accepted&#x60;, &#x60;pending&#x60; and &#x60;denied.&#x60; (optional)
     * @param hasmapping This field allows you to filter SKUs that have mapping or not. Insert &#x60;true&#x60; to filter SKUs that have mapping, or &#x60;false&#x60; to retrieve SKUs that aren&#39;t mapped. (optional)
     * @param matcherid Identifies the matching entity. It can be either VTEX&#39;s matcher, or an external matcher developed by partners, for example. The &#x60;matcherId&#x60;&#39;s value can be obtained through the [Get SKU Suggestion by ID](https://developers.vtex.com/vtex-rest-api/reference/getsuggestion) endpoint. (optional, default to vtex-matcher)
     * @param from Define your pagination range, by adding the pagination starting value. Values should be bigger than 0, with a maximum of 50 records per page. (optional, default to 1)
     * @param to Define your pagination range, by adding the pagination ending value. Values should be bigger than 0, with a maximum of 50 records per page. (optional, default to 50)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getsuggestionsCall(String accountName, String accept, String contentType, String q, String type, String seller, String status, String hasmapping, String matcherid, Integer from, Integer to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/suggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (seller != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller", seller));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (hasmapping != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hasmapping", hasmapping));
        }

        if (matcherid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("matcherid", matcherid));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("_to", to));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getsuggestionsValidateBeforeCall(String accountName, String accept, String contentType, String q, String type, String seller, String status, String hasmapping, String matcherid, Integer from, Integer to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getsuggestions(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getsuggestions(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getsuggestions(Async)");
        }

        return getsuggestionsCall(accountName, accept, contentType, q, type, seller, status, hasmapping, matcherid, from, to, _callback);

    }

    /**
     * Get all SKU suggestions
     * This endpoint retrieves a list of all SKUs sent by the seller for the Marketplace&#39;s approval. Marketplace operators should use this endpoint whenever they want to check the full list of received SKUs and their  information.   Note that all the information sent by the seller will be in the [content] object. All remaining information in this endpoint&#39;s response is given by the Matcher.   Matcher rates received SKUs by correlating the data sent by sellers, to existing fields in the marketplace. The calculation of these scores determines whether the product has been:   &#x60;Approved&#x60;: score equal to or greater than 80 points.   &#x60;Pending&#x60;: from 31 to 79 points.  &#x60;Denied&#x60;: from 0 to 30 points.   Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
     * @param accountName Name of the VTEX account. Used as part of the URL (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param q This field allows you to customize your search. You can fill in this query param if you want to narrow down your search using the available filters on Received SKU modules. (optional)
     * @param type This field allows users to filter SKU suggestions, by searching only the new suggestions that were just sent, and suggestions that have already been sent, but were updated. Possible values for this field include &#x60;new&#x60; and &#x60;update&#x60;. (optional)
     * @param seller A string that identifies the seller in the marketplace. This ID must be created by the marketplace and informed to the seller so it can call this endpoint. (optional)
     * @param status Narrow down you search, filtering by status. Values allowed on this field include: &#x60;accepted&#x60;, &#x60;pending&#x60; and &#x60;denied.&#x60; (optional)
     * @param hasmapping This field allows you to filter SKUs that have mapping or not. Insert &#x60;true&#x60; to filter SKUs that have mapping, or &#x60;false&#x60; to retrieve SKUs that aren&#39;t mapped. (optional)
     * @param matcherid Identifies the matching entity. It can be either VTEX&#39;s matcher, or an external matcher developed by partners, for example. The &#x60;matcherId&#x60;&#39;s value can be obtained through the [Get SKU Suggestion by ID](https://developers.vtex.com/vtex-rest-api/reference/getsuggestion) endpoint. (optional, default to vtex-matcher)
     * @param from Define your pagination range, by adding the pagination starting value. Values should be bigger than 0, with a maximum of 50 records per page. (optional, default to 1)
     * @param to Define your pagination range, by adding the pagination ending value. Values should be bigger than 0, with a maximum of 50 records per page. (optional, default to 50)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getsuggestions(String accountName, String accept, String contentType, String q, String type, String seller, String status, String hasmapping, String matcherid, Integer from, Integer to) throws ApiException {
        getsuggestionsWithHttpInfo(accountName, accept, contentType, q, type, seller, status, hasmapping, matcherid, from, to);
    }

    /**
     * Get all SKU suggestions
     * This endpoint retrieves a list of all SKUs sent by the seller for the Marketplace&#39;s approval. Marketplace operators should use this endpoint whenever they want to check the full list of received SKUs and their  information.   Note that all the information sent by the seller will be in the [content] object. All remaining information in this endpoint&#39;s response is given by the Matcher.   Matcher rates received SKUs by correlating the data sent by sellers, to existing fields in the marketplace. The calculation of these scores determines whether the product has been:   &#x60;Approved&#x60;: score equal to or greater than 80 points.   &#x60;Pending&#x60;: from 31 to 79 points.  &#x60;Denied&#x60;: from 0 to 30 points.   Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
     * @param accountName Name of the VTEX account. Used as part of the URL (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param q This field allows you to customize your search. You can fill in this query param if you want to narrow down your search using the available filters on Received SKU modules. (optional)
     * @param type This field allows users to filter SKU suggestions, by searching only the new suggestions that were just sent, and suggestions that have already been sent, but were updated. Possible values for this field include &#x60;new&#x60; and &#x60;update&#x60;. (optional)
     * @param seller A string that identifies the seller in the marketplace. This ID must be created by the marketplace and informed to the seller so it can call this endpoint. (optional)
     * @param status Narrow down you search, filtering by status. Values allowed on this field include: &#x60;accepted&#x60;, &#x60;pending&#x60; and &#x60;denied.&#x60; (optional)
     * @param hasmapping This field allows you to filter SKUs that have mapping or not. Insert &#x60;true&#x60; to filter SKUs that have mapping, or &#x60;false&#x60; to retrieve SKUs that aren&#39;t mapped. (optional)
     * @param matcherid Identifies the matching entity. It can be either VTEX&#39;s matcher, or an external matcher developed by partners, for example. The &#x60;matcherId&#x60;&#39;s value can be obtained through the [Get SKU Suggestion by ID](https://developers.vtex.com/vtex-rest-api/reference/getsuggestion) endpoint. (optional, default to vtex-matcher)
     * @param from Define your pagination range, by adding the pagination starting value. Values should be bigger than 0, with a maximum of 50 records per page. (optional, default to 1)
     * @param to Define your pagination range, by adding the pagination ending value. Values should be bigger than 0, with a maximum of 50 records per page. (optional, default to 50)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getsuggestionsWithHttpInfo(String accountName, String accept, String contentType, String q, String type, String seller, String status, String hasmapping, String matcherid, Integer from, Integer to) throws ApiException {
        okhttp3.Call localVarCall = getsuggestionsValidateBeforeCall(accountName, accept, contentType, q, type, seller, status, hasmapping, matcherid, from, to, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get all SKU suggestions (asynchronously)
     * This endpoint retrieves a list of all SKUs sent by the seller for the Marketplace&#39;s approval. Marketplace operators should use this endpoint whenever they want to check the full list of received SKUs and their  information.   Note that all the information sent by the seller will be in the [content] object. All remaining information in this endpoint&#39;s response is given by the Matcher.   Matcher rates received SKUs by correlating the data sent by sellers, to existing fields in the marketplace. The calculation of these scores determines whether the product has been:   &#x60;Approved&#x60;: score equal to or greater than 80 points.   &#x60;Pending&#x60;: from 31 to 79 points.  &#x60;Denied&#x60;: from 0 to 30 points.   Note that  if the autoApprove setting is enabled, the SKUs will be approved, regardless of the Score.
     * @param accountName Name of the VTEX account. Used as part of the URL (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param q This field allows you to customize your search. You can fill in this query param if you want to narrow down your search using the available filters on Received SKU modules. (optional)
     * @param type This field allows users to filter SKU suggestions, by searching only the new suggestions that were just sent, and suggestions that have already been sent, but were updated. Possible values for this field include &#x60;new&#x60; and &#x60;update&#x60;. (optional)
     * @param seller A string that identifies the seller in the marketplace. This ID must be created by the marketplace and informed to the seller so it can call this endpoint. (optional)
     * @param status Narrow down you search, filtering by status. Values allowed on this field include: &#x60;accepted&#x60;, &#x60;pending&#x60; and &#x60;denied.&#x60; (optional)
     * @param hasmapping This field allows you to filter SKUs that have mapping or not. Insert &#x60;true&#x60; to filter SKUs that have mapping, or &#x60;false&#x60; to retrieve SKUs that aren&#39;t mapped. (optional)
     * @param matcherid Identifies the matching entity. It can be either VTEX&#39;s matcher, or an external matcher developed by partners, for example. The &#x60;matcherId&#x60;&#39;s value can be obtained through the [Get SKU Suggestion by ID](https://developers.vtex.com/vtex-rest-api/reference/getsuggestion) endpoint. (optional, default to vtex-matcher)
     * @param from Define your pagination range, by adding the pagination starting value. Values should be bigger than 0, with a maximum of 50 records per page. (optional, default to 1)
     * @param to Define your pagination range, by adding the pagination ending value. Values should be bigger than 0, with a maximum of 50 records per page. (optional, default to 50)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getsuggestionsAsync(String accountName, String accept, String contentType, String q, String type, String seller, String status, String hasmapping, String matcherid, Integer from, Integer to, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getsuggestionsValidateBeforeCall(accountName, accept, contentType, q, type, seller, status, hasmapping, matcherid, from, to, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
