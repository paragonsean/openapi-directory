/*
 * Suggestions
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Matcher
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:27.999155-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Matcher {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "IsActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive = true;

  public static final String SERIALIZED_NAME_MATCHER_ID = "MatcherId";
  @SerializedName(SERIALIZED_NAME_MATCHER_ID)
  private String matcherId = "vtex-matcher";

  public static final String SERIALIZED_NAME_UPDATES_NOTIFICATION_ENDPOINT = "UpdatesNotificationEndpoint";
  @SerializedName(SERIALIZED_NAME_UPDATES_NOTIFICATION_ENDPOINT)
  private String updatesNotificationEndpoint;

  public static final String SERIALIZED_NAME_HOOK_BASE_ADDRESS = "hook-base-address";
  @SerializedName(SERIALIZED_NAME_HOOK_BASE_ADDRESS)
  private String hookBaseAddress = "http://simple-suggestion-matcher.vtex.com.br";

  public Matcher() {
  }

  public Matcher description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Insert in this field any notes about the approval. This field is optional.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Matcher isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Whether the matcher is active in the account (&#x60;true&#x60;), or not (&#x60;false&#x60;).
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public Matcher matcherId(String matcherId) {
    this.matcherId = matcherId;
    return this;
  }

  /**
   * Identifies the matching entity. It can be either VTEX&#39;s matcher, or an external matcher developed by partners, for example. The &#x60;matcherId&#x60;&#39;s value can be obtained through the [Get SKU Suggestion by ID](https://developers.vtex.com/vtex-rest-api/reference/getsuggestion) endpoint.
   * @return matcherId
   */
  @javax.annotation.Nonnull
  public String getMatcherId() {
    return matcherId;
  }

  public void setMatcherId(String matcherId) {
    this.matcherId = matcherId;
  }


  public Matcher updatesNotificationEndpoint(String updatesNotificationEndpoint) {
    this.updatesNotificationEndpoint = updatesNotificationEndpoint;
    return this;
  }

  /**
   * The Received SKUs module uses this endpoint to send updates about a suggestion, to the chosen Matcher.
   * @return updatesNotificationEndpoint
   */
  @javax.annotation.Nullable
  public String getUpdatesNotificationEndpoint() {
    return updatesNotificationEndpoint;
  }

  public void setUpdatesNotificationEndpoint(String updatesNotificationEndpoint) {
    this.updatesNotificationEndpoint = updatesNotificationEndpoint;
  }


  public Matcher hookBaseAddress(String hookBaseAddress) {
    this.hookBaseAddress = hookBaseAddress;
    return this;
  }

  /**
   * The chosen Matcher&#39;s url. It is the endpoint that the Received SKUs module calls, to send new suggestions for the Matcher&#39;s review.
   * @return hookBaseAddress
   */
  @javax.annotation.Nonnull
  public String getHookBaseAddress() {
    return hookBaseAddress;
  }

  public void setHookBaseAddress(String hookBaseAddress) {
    this.hookBaseAddress = hookBaseAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Matcher matcher = (Matcher) o;
    return Objects.equals(this.description, matcher.description) &&
        Objects.equals(this.isActive, matcher.isActive) &&
        Objects.equals(this.matcherId, matcher.matcherId) &&
        Objects.equals(this.updatesNotificationEndpoint, matcher.updatesNotificationEndpoint) &&
        Objects.equals(this.hookBaseAddress, matcher.hookBaseAddress);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, isActive, matcherId, updatesNotificationEndpoint, hookBaseAddress);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Matcher {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    matcherId: ").append(toIndentedString(matcherId)).append("\n");
    sb.append("    updatesNotificationEndpoint: ").append(toIndentedString(updatesNotificationEndpoint)).append("\n");
    sb.append("    hookBaseAddress: ").append(toIndentedString(hookBaseAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("IsActive");
    openapiFields.add("MatcherId");
    openapiFields.add("UpdatesNotificationEndpoint");
    openapiFields.add("hook-base-address");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("IsActive");
    openapiRequiredFields.add("MatcherId");
    openapiRequiredFields.add("UpdatesNotificationEndpoint");
    openapiRequiredFields.add("hook-base-address");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Matcher
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Matcher.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Matcher is not found in the empty JSON string", Matcher.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Matcher.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Matcher` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Matcher.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (!jsonObj.get("MatcherId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MatcherId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MatcherId").toString()));
      }
      if ((jsonObj.get("UpdatesNotificationEndpoint") != null && !jsonObj.get("UpdatesNotificationEndpoint").isJsonNull()) && !jsonObj.get("UpdatesNotificationEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdatesNotificationEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdatesNotificationEndpoint").toString()));
      }
      if (!jsonObj.get("hook-base-address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hook-base-address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hook-base-address").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Matcher.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Matcher' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Matcher> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Matcher.class));

       return (TypeAdapter<T>) new TypeAdapter<Matcher>() {
           @Override
           public void write(JsonWriter out, Matcher value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Matcher read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Matcher given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Matcher
   * @throws IOException if the JSON string is invalid with respect to Matcher
   */
  public static Matcher fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Matcher.class);
  }

  /**
   * Convert an instance of Matcher to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

