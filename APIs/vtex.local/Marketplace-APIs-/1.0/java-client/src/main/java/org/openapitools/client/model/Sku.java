/*
 * Suggestions
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Specifications;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sku
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:27.999155-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sku {
  public static final String SERIALIZED_NAME_EANS = "eans";
  @SerializedName(SERIALIZED_NAME_EANS)
  private List<String> eans = new ArrayList<>(Arrays.asList("12345678901213"));

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height = 10;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<Object> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Integer length = 10;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private String measurementUnit = "un";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "";

  public static final String SERIALIZED_NAME_REF_ID = "refId";
  @SerializedName(SERIALIZED_NAME_REF_ID)
  private String refId = "1234";

  public static final String SERIALIZED_NAME_SPECIFICATIONS = "specifications";
  @SerializedName(SERIALIZED_NAME_SPECIFICATIONS)
  private Specifications specifications;

  public static final String SERIALIZED_NAME_UNIT_MULTIPLIER = "unitMultiplier";
  @SerializedName(SERIALIZED_NAME_UNIT_MULTIPLIER)
  private Integer unitMultiplier = 1;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight = 100;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width = 20;

  public Sku() {
  }

  public Sku eans(List<String> eans) {
    this.eans = eans;
    return this;
  }

  public Sku addEansItem(String eansItem) {
    if (this.eans == null) {
      this.eans = new ArrayList<>(Arrays.asList("12345678901213"));
    }
    this.eans.add(eansItem);
    return this;
  }

  /**
   * SKU reference code.
   * @return eans
   */
  @javax.annotation.Nullable
  public List<String> getEans() {
    return eans;
  }

  public void setEans(List<String> eans) {
    this.eans = eans;
  }


  public Sku height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Height of the SKU.
   * @return height
   */
  @javax.annotation.Nonnull
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public Sku images(List<Object> images) {
    this.images = images;
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nonnull
  public List<Object> getImages() {
    return images;
  }

  public void setImages(List<Object> images) {
    this.images = images;
  }


  public Sku length(Integer length) {
    this.length = length;
    return this;
  }

  /**
   * Length of the SKU.
   * @return length
   */
  @javax.annotation.Nonnull
  public Integer getLength() {
    return length;
  }

  public void setLength(Integer length) {
    this.length = length;
  }


  public Sku measurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Measurement unit that should be used for this SKU. If this information doesn&#39;t apply, you should use the default value un.
   * @return measurementUnit
   */
  @javax.annotation.Nullable
  public String getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  public Sku name(String name) {
    this.name = name;
    return this;
  }

  /**
   * 
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Sku refId(String refId) {
    this.refId = refId;
    return this;
  }

  /**
   * SKU reference code.
   * @return refId
   */
  @javax.annotation.Nullable
  public String getRefId() {
    return refId;
  }

  public void setRefId(String refId) {
    this.refId = refId;
  }


  public Sku specifications(Specifications specifications) {
    this.specifications = specifications;
    return this;
  }

  /**
   * Get specifications
   * @return specifications
   */
  @javax.annotation.Nonnull
  public Specifications getSpecifications() {
    return specifications;
  }

  public void setSpecifications(Specifications specifications) {
    this.specifications = specifications;
  }


  public Sku unitMultiplier(Integer unitMultiplier) {
    this.unitMultiplier = unitMultiplier;
    return this;
  }

  /**
   * Unit multiplier for this SKU. If this information doesn&#39;t apply, you should use the default value 1.
   * @return unitMultiplier
   */
  @javax.annotation.Nonnull
  public Integer getUnitMultiplier() {
    return unitMultiplier;
  }

  public void setUnitMultiplier(Integer unitMultiplier) {
    this.unitMultiplier = unitMultiplier;
  }


  public Sku weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Weight of the SKU.
   * @return weight
   */
  @javax.annotation.Nonnull
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public Sku width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Width of the SKU.
   * @return width
   */
  @javax.annotation.Nonnull
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sku sku = (Sku) o;
    return Objects.equals(this.eans, sku.eans) &&
        Objects.equals(this.height, sku.height) &&
        Objects.equals(this.images, sku.images) &&
        Objects.equals(this.length, sku.length) &&
        Objects.equals(this.measurementUnit, sku.measurementUnit) &&
        Objects.equals(this.name, sku.name) &&
        Objects.equals(this.refId, sku.refId) &&
        Objects.equals(this.specifications, sku.specifications) &&
        Objects.equals(this.unitMultiplier, sku.unitMultiplier) &&
        Objects.equals(this.weight, sku.weight) &&
        Objects.equals(this.width, sku.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eans, height, images, length, measurementUnit, name, refId, specifications, unitMultiplier, weight, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sku {\n");
    sb.append("    eans: ").append(toIndentedString(eans)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    refId: ").append(toIndentedString(refId)).append("\n");
    sb.append("    specifications: ").append(toIndentedString(specifications)).append("\n");
    sb.append("    unitMultiplier: ").append(toIndentedString(unitMultiplier)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eans");
    openapiFields.add("height");
    openapiFields.add("images");
    openapiFields.add("length");
    openapiFields.add("measurementUnit");
    openapiFields.add("name");
    openapiFields.add("refId");
    openapiFields.add("specifications");
    openapiFields.add("unitMultiplier");
    openapiFields.add("weight");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eans");
    openapiRequiredFields.add("height");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("length");
    openapiRequiredFields.add("measurementUnit");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("refId");
    openapiRequiredFields.add("specifications");
    openapiRequiredFields.add("unitMultiplier");
    openapiRequiredFields.add("weight");
    openapiRequiredFields.add("width");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sku
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sku.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sku is not found in the empty JSON string", Sku.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sku.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sku` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Sku.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("eans") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("eans").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `eans` to be an array in the JSON string but got `%s`", jsonObj.get("eans").toString()));
      }
      if ((jsonObj.get("measurementUnit") != null && !jsonObj.get("measurementUnit").isJsonNull()) && !jsonObj.get("measurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementUnit").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("refId") != null && !jsonObj.get("refId").isJsonNull()) && !jsonObj.get("refId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refId").toString()));
      }
      // validate the required field `specifications`
      Specifications.validateJsonElement(jsonObj.get("specifications"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sku.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sku' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sku> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sku.class));

       return (TypeAdapter<T>) new TypeAdapter<Sku>() {
           @Override
           public void write(JsonWriter out, Sku value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sku read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sku given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sku
   * @throws IOException if the JSON string is invalid with respect to Sku
   */
  public static Sku fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sku.class);
  }

  /**
   * Convert an instance of Sku to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

