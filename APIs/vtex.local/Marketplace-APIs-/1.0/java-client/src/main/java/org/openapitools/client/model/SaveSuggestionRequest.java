/*
 * Suggestions
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ProductSpecification;
import org.openapitools.client.model.SaveSuggestionRequestPricing;
import org.openapitools.client.model.SkuSpecification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SaveSuggestionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:27.999155-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SaveSuggestionRequest {
  public static final String SERIALIZED_NAME_AVAILABLE_QUANTITY = "AvailableQuantity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_QUANTITY)
  private Integer availableQuantity;

  public static final String SERIALIZED_NAME_BRAND_NAME = "BrandName";
  @SerializedName(SERIALIZED_NAME_BRAND_NAME)
  private String brandName;

  public static final String SERIALIZED_NAME_CATEGORY_FULL_PATH = "CategoryFullPath";
  @SerializedName(SERIALIZED_NAME_CATEGORY_FULL_PATH)
  private String categoryFullPath;

  public static final String SERIALIZED_NAME_E_A_N = "EAN";
  @SerializedName(SERIALIZED_NAME_E_A_N)
  private String EAN = "EAN10";

  public static final String SERIALIZED_NAME_HEIGHT = "Height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height = 10;

  public static final String SERIALIZED_NAME_IMAGES = "Images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<Image> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_LENGTH = "Length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Integer length = 10;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "MeasurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private String measurementUnit;

  public static final String SERIALIZED_NAME_PRICING = "Pricing";
  @SerializedName(SERIALIZED_NAME_PRICING)
  private SaveSuggestionRequestPricing pricing;

  public static final String SERIALIZED_NAME_PRODUCT_DESCRIPTION = "ProductDescription";
  @SerializedName(SERIALIZED_NAME_PRODUCT_DESCRIPTION)
  private String productDescription;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "ProductId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId = "1234";

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "ProductName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName = "";

  public static final String SERIALIZED_NAME_PRODUCT_SPECIFICATIONS = "ProductSpecifications";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SPECIFICATIONS)
  private List<ProductSpecification> productSpecifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_REF_ID = "RefId";
  @SerializedName(SERIALIZED_NAME_REF_ID)
  private String refId = "REF10";

  public static final String SERIALIZED_NAME_SELLER_ID = "SellerId";
  @SerializedName(SERIALIZED_NAME_SELLER_ID)
  private String sellerId = "1";

  public static final String SERIALIZED_NAME_SELLER_STOCK_KEEPING_UNIT_ID = "SellerStockKeepingUnitId";
  @SerializedName(SERIALIZED_NAME_SELLER_STOCK_KEEPING_UNIT_ID)
  private Integer sellerStockKeepingUnitId;

  public static final String SERIALIZED_NAME_SKU_NAME = "SkuName";
  @SerializedName(SERIALIZED_NAME_SKU_NAME)
  private String skuName;

  public static final String SERIALIZED_NAME_SKU_SPECIFICATIONS = "SkuSpecifications";
  @SerializedName(SERIALIZED_NAME_SKU_SPECIFICATIONS)
  private List<SkuSpecification> skuSpecifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNIT_MULTIPLIER = "UnitMultiplier";
  @SerializedName(SERIALIZED_NAME_UNIT_MULTIPLIER)
  private Integer unitMultiplier;

  public static final String SERIALIZED_NAME_WEIGHT = "Weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight = 100;

  public static final String SERIALIZED_NAME_WIDTH = "Width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width = 10;

  public SaveSuggestionRequest() {
  }

  public SaveSuggestionRequest availableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
    return this;
  }

  /**
   * 
   * @return availableQuantity
   */
  @javax.annotation.Nonnull
  public Integer getAvailableQuantity() {
    return availableQuantity;
  }

  public void setAvailableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
  }


  public SaveSuggestionRequest brandName(String brandName) {
    this.brandName = brandName;
    return this;
  }

  /**
   * Name of the brand to which this SKU belongs. It must match the brand created in the marketplace.
   * @return brandName
   */
  @javax.annotation.Nonnull
  public String getBrandName() {
    return brandName;
  }

  public void setBrandName(String brandName) {
    this.brandName = brandName;
  }


  public SaveSuggestionRequest categoryFullPath(String categoryFullPath) {
    this.categoryFullPath = categoryFullPath;
    return this;
  }

  /**
   * Full path to the SKU&#39;s category. It should be written as {department}/{category}. For example: if the department is **Appliances** and the category is **Oven**, the full path should be &#39;Appliances/Oven&#39;.
   * @return categoryFullPath
   */
  @javax.annotation.Nonnull
  public String getCategoryFullPath() {
    return categoryFullPath;
  }

  public void setCategoryFullPath(String categoryFullPath) {
    this.categoryFullPath = categoryFullPath;
  }


  public SaveSuggestionRequest EAN(String EAN) {
    this.EAN = EAN;
    return this;
  }

  /**
   * SKU reference code. Mandatory if the RefId is not informed.
   * @return EAN
   */
  @javax.annotation.Nonnull
  public String getEAN() {
    return EAN;
  }

  public void setEAN(String EAN) {
    this.EAN = EAN;
  }


  public SaveSuggestionRequest height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Height of the SKU.
   * @return height
   */
  @javax.annotation.Nonnull
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public SaveSuggestionRequest images(List<Image> images) {
    this.images = images;
    return this;
  }

  public SaveSuggestionRequest addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Array containing the URLs and names the SKU images.
   * @return images
   */
  @javax.annotation.Nonnull
  public List<Image> getImages() {
    return images;
  }

  public void setImages(List<Image> images) {
    this.images = images;
  }


  public SaveSuggestionRequest length(Integer length) {
    this.length = length;
    return this;
  }

  /**
   * Length of the SKU.
   * @return length
   */
  @javax.annotation.Nonnull
  public Integer getLength() {
    return length;
  }

  public void setLength(Integer length) {
    this.length = length;
  }


  public SaveSuggestionRequest measurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Measurement unit that should be used for this SKU. If this information doesn&#39;t apply, you should use the default value &#x60;un&#x60;.
   * @return measurementUnit
   */
  @javax.annotation.Nullable
  public String getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  public SaveSuggestionRequest pricing(SaveSuggestionRequestPricing pricing) {
    this.pricing = pricing;
    return this;
  }

  /**
   * Get pricing
   * @return pricing
   */
  @javax.annotation.Nonnull
  public SaveSuggestionRequestPricing getPricing() {
    return pricing;
  }

  public void setPricing(SaveSuggestionRequestPricing pricing) {
    this.pricing = pricing;
  }


  public SaveSuggestionRequest productDescription(String productDescription) {
    this.productDescription = productDescription;
    return this;
  }

  /**
   * Product Description containing the main information about the product (not the SKU).
   * @return productDescription
   */
  @javax.annotation.Nonnull
  public String getProductDescription() {
    return productDescription;
  }

  public void setProductDescription(String productDescription) {
    this.productDescription = productDescription;
  }


  public SaveSuggestionRequest productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Product ID in seller&#39;s account.
   * @return productId
   */
  @javax.annotation.Nonnull
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public SaveSuggestionRequest productName(String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * Name of the suggested product. This field has a limit of 150 characters.
   * @return productName
   */
  @javax.annotation.Nonnull
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }


  public SaveSuggestionRequest productSpecifications(List<ProductSpecification> productSpecifications) {
    this.productSpecifications = productSpecifications;
    return this;
  }

  public SaveSuggestionRequest addProductSpecificationsItem(ProductSpecification productSpecificationsItem) {
    if (this.productSpecifications == null) {
      this.productSpecifications = new ArrayList<>();
    }
    this.productSpecifications.add(productSpecificationsItem);
    return this;
  }

  /**
   * Array containing the names and values of the product specifications.
   * @return productSpecifications
   */
  @javax.annotation.Nullable
  public List<ProductSpecification> getProductSpecifications() {
    return productSpecifications;
  }

  public void setProductSpecifications(List<ProductSpecification> productSpecifications) {
    this.productSpecifications = productSpecifications;
  }


  public SaveSuggestionRequest refId(String refId) {
    this.refId = refId;
    return this;
  }

  /**
   * SKU reference code. Mandotory if the EAN is not informed.
   * @return refId
   */
  @javax.annotation.Nonnull
  public String getRefId() {
    return refId;
  }

  public void setRefId(String refId) {
    this.refId = refId;
  }


  public SaveSuggestionRequest sellerId(String sellerId) {
    this.sellerId = sellerId;
    return this;
  }

  /**
   * ID of the seller in the marketplace. This ID must be created by the marketplace and informed to the seller before the integration is built.
   * @return sellerId
   */
  @javax.annotation.Nonnull
  public String getSellerId() {
    return sellerId;
  }

  public void setSellerId(String sellerId) {
    this.sellerId = sellerId;
  }


  public SaveSuggestionRequest sellerStockKeepingUnitId(Integer sellerStockKeepingUnitId) {
    this.sellerStockKeepingUnitId = sellerStockKeepingUnitId;
    return this;
  }

  /**
   * ID of the SKU registered in the seller.
   * @return sellerStockKeepingUnitId
   */
  @javax.annotation.Nullable
  public Integer getSellerStockKeepingUnitId() {
    return sellerStockKeepingUnitId;
  }

  public void setSellerStockKeepingUnitId(Integer sellerStockKeepingUnitId) {
    this.sellerStockKeepingUnitId = sellerStockKeepingUnitId;
  }


  public SaveSuggestionRequest skuName(String skuName) {
    this.skuName = skuName;
    return this;
  }

  /**
   * Name of the suggested SKU.
   * @return skuName
   */
  @javax.annotation.Nonnull
  public String getSkuName() {
    return skuName;
  }

  public void setSkuName(String skuName) {
    this.skuName = skuName;
  }


  public SaveSuggestionRequest skuSpecifications(List<SkuSpecification> skuSpecifications) {
    this.skuSpecifications = skuSpecifications;
    return this;
  }

  public SaveSuggestionRequest addSkuSpecificationsItem(SkuSpecification skuSpecificationsItem) {
    if (this.skuSpecifications == null) {
      this.skuSpecifications = new ArrayList<>();
    }
    this.skuSpecifications.add(skuSpecificationsItem);
    return this;
  }

  /**
   * Array containing the names and values of the SKU specifications.
   * @return skuSpecifications
   */
  @javax.annotation.Nullable
  public List<SkuSpecification> getSkuSpecifications() {
    return skuSpecifications;
  }

  public void setSkuSpecifications(List<SkuSpecification> skuSpecifications) {
    this.skuSpecifications = skuSpecifications;
  }


  public SaveSuggestionRequest unitMultiplier(Integer unitMultiplier) {
    this.unitMultiplier = unitMultiplier;
    return this;
  }

  /**
   * Unit multiplier for this SKU. If this information doesn&#39;t apply, you should use the default value &#x60;1&#x60;.
   * @return unitMultiplier
   */
  @javax.annotation.Nullable
  public Integer getUnitMultiplier() {
    return unitMultiplier;
  }

  public void setUnitMultiplier(Integer unitMultiplier) {
    this.unitMultiplier = unitMultiplier;
  }


  public SaveSuggestionRequest weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Weight of the SKU in grams.
   * @return weight
   */
  @javax.annotation.Nonnull
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public SaveSuggestionRequest width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Width of the SKU.
   * @return width
   */
  @javax.annotation.Nonnull
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaveSuggestionRequest saveSuggestionRequest = (SaveSuggestionRequest) o;
    return Objects.equals(this.availableQuantity, saveSuggestionRequest.availableQuantity) &&
        Objects.equals(this.brandName, saveSuggestionRequest.brandName) &&
        Objects.equals(this.categoryFullPath, saveSuggestionRequest.categoryFullPath) &&
        Objects.equals(this.EAN, saveSuggestionRequest.EAN) &&
        Objects.equals(this.height, saveSuggestionRequest.height) &&
        Objects.equals(this.images, saveSuggestionRequest.images) &&
        Objects.equals(this.length, saveSuggestionRequest.length) &&
        Objects.equals(this.measurementUnit, saveSuggestionRequest.measurementUnit) &&
        Objects.equals(this.pricing, saveSuggestionRequest.pricing) &&
        Objects.equals(this.productDescription, saveSuggestionRequest.productDescription) &&
        Objects.equals(this.productId, saveSuggestionRequest.productId) &&
        Objects.equals(this.productName, saveSuggestionRequest.productName) &&
        Objects.equals(this.productSpecifications, saveSuggestionRequest.productSpecifications) &&
        Objects.equals(this.refId, saveSuggestionRequest.refId) &&
        Objects.equals(this.sellerId, saveSuggestionRequest.sellerId) &&
        Objects.equals(this.sellerStockKeepingUnitId, saveSuggestionRequest.sellerStockKeepingUnitId) &&
        Objects.equals(this.skuName, saveSuggestionRequest.skuName) &&
        Objects.equals(this.skuSpecifications, saveSuggestionRequest.skuSpecifications) &&
        Objects.equals(this.unitMultiplier, saveSuggestionRequest.unitMultiplier) &&
        Objects.equals(this.weight, saveSuggestionRequest.weight) &&
        Objects.equals(this.width, saveSuggestionRequest.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableQuantity, brandName, categoryFullPath, EAN, height, images, length, measurementUnit, pricing, productDescription, productId, productName, productSpecifications, refId, sellerId, sellerStockKeepingUnitId, skuName, skuSpecifications, unitMultiplier, weight, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaveSuggestionRequest {\n");
    sb.append("    availableQuantity: ").append(toIndentedString(availableQuantity)).append("\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("    categoryFullPath: ").append(toIndentedString(categoryFullPath)).append("\n");
    sb.append("    EAN: ").append(toIndentedString(EAN)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    pricing: ").append(toIndentedString(pricing)).append("\n");
    sb.append("    productDescription: ").append(toIndentedString(productDescription)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productSpecifications: ").append(toIndentedString(productSpecifications)).append("\n");
    sb.append("    refId: ").append(toIndentedString(refId)).append("\n");
    sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
    sb.append("    sellerStockKeepingUnitId: ").append(toIndentedString(sellerStockKeepingUnitId)).append("\n");
    sb.append("    skuName: ").append(toIndentedString(skuName)).append("\n");
    sb.append("    skuSpecifications: ").append(toIndentedString(skuSpecifications)).append("\n");
    sb.append("    unitMultiplier: ").append(toIndentedString(unitMultiplier)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvailableQuantity");
    openapiFields.add("BrandName");
    openapiFields.add("CategoryFullPath");
    openapiFields.add("EAN");
    openapiFields.add("Height");
    openapiFields.add("Images");
    openapiFields.add("Length");
    openapiFields.add("MeasurementUnit");
    openapiFields.add("Pricing");
    openapiFields.add("ProductDescription");
    openapiFields.add("ProductId");
    openapiFields.add("ProductName");
    openapiFields.add("ProductSpecifications");
    openapiFields.add("RefId");
    openapiFields.add("SellerId");
    openapiFields.add("SellerStockKeepingUnitId");
    openapiFields.add("SkuName");
    openapiFields.add("SkuSpecifications");
    openapiFields.add("UnitMultiplier");
    openapiFields.add("Weight");
    openapiFields.add("Width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AvailableQuantity");
    openapiRequiredFields.add("BrandName");
    openapiRequiredFields.add("CategoryFullPath");
    openapiRequiredFields.add("EAN");
    openapiRequiredFields.add("Height");
    openapiRequiredFields.add("Images");
    openapiRequiredFields.add("Length");
    openapiRequiredFields.add("Pricing");
    openapiRequiredFields.add("ProductDescription");
    openapiRequiredFields.add("ProductId");
    openapiRequiredFields.add("ProductName");
    openapiRequiredFields.add("RefId");
    openapiRequiredFields.add("SellerId");
    openapiRequiredFields.add("SkuName");
    openapiRequiredFields.add("Weight");
    openapiRequiredFields.add("Width");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SaveSuggestionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SaveSuggestionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaveSuggestionRequest is not found in the empty JSON string", SaveSuggestionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SaveSuggestionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SaveSuggestionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SaveSuggestionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("BrandName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BrandName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BrandName").toString()));
      }
      if (!jsonObj.get("CategoryFullPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CategoryFullPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CategoryFullPath").toString()));
      }
      if (!jsonObj.get("EAN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EAN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EAN").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Images` to be an array in the JSON string but got `%s`", jsonObj.get("Images").toString()));
      }

      JsonArray jsonArrayimages = jsonObj.getAsJsonArray("Images");
      // validate the required field `Images` (array)
      for (int i = 0; i < jsonArrayimages.size(); i++) {
        Image.validateJsonElement(jsonArrayimages.get(i));
      };
      if ((jsonObj.get("MeasurementUnit") != null && !jsonObj.get("MeasurementUnit").isJsonNull()) && !jsonObj.get("MeasurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MeasurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MeasurementUnit").toString()));
      }
      // validate the required field `Pricing`
      SaveSuggestionRequestPricing.validateJsonElement(jsonObj.get("Pricing"));
      if (!jsonObj.get("ProductDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProductDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProductDescription").toString()));
      }
      if (!jsonObj.get("ProductId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProductId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProductId").toString()));
      }
      if (!jsonObj.get("ProductName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProductName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProductName").toString()));
      }
      if (jsonObj.get("ProductSpecifications") != null && !jsonObj.get("ProductSpecifications").isJsonNull()) {
        JsonArray jsonArrayproductSpecifications = jsonObj.getAsJsonArray("ProductSpecifications");
        if (jsonArrayproductSpecifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ProductSpecifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ProductSpecifications` to be an array in the JSON string but got `%s`", jsonObj.get("ProductSpecifications").toString()));
          }

          // validate the optional field `ProductSpecifications` (array)
          for (int i = 0; i < jsonArrayproductSpecifications.size(); i++) {
            ProductSpecification.validateJsonElement(jsonArrayproductSpecifications.get(i));
          };
        }
      }
      if (!jsonObj.get("RefId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RefId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RefId").toString()));
      }
      if (!jsonObj.get("SellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SellerId").toString()));
      }
      if (!jsonObj.get("SkuName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SkuName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SkuName").toString()));
      }
      if (jsonObj.get("SkuSpecifications") != null && !jsonObj.get("SkuSpecifications").isJsonNull()) {
        JsonArray jsonArrayskuSpecifications = jsonObj.getAsJsonArray("SkuSpecifications");
        if (jsonArrayskuSpecifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SkuSpecifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SkuSpecifications` to be an array in the JSON string but got `%s`", jsonObj.get("SkuSpecifications").toString()));
          }

          // validate the optional field `SkuSpecifications` (array)
          for (int i = 0; i < jsonArrayskuSpecifications.size(); i++) {
            SkuSpecification.validateJsonElement(jsonArrayskuSpecifications.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaveSuggestionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaveSuggestionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaveSuggestionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaveSuggestionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SaveSuggestionRequest>() {
           @Override
           public void write(JsonWriter out, SaveSuggestionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SaveSuggestionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SaveSuggestionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SaveSuggestionRequest
   * @throws IOException if the JSON string is invalid with respect to SaveSuggestionRequest
   */
  public static SaveSuggestionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaveSuggestionRequest.class);
  }

  /**
   * Convert an instance of SaveSuggestionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

