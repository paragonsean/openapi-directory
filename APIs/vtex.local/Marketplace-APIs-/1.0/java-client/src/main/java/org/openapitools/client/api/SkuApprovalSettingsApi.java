/*
 * Suggestions
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Getaccountconfig200Response;
import org.openapitools.client.model.GetautoApprovevaluefromconfig200Response;
import org.openapitools.client.model.PutselleraccountconfigRequest;
import org.openapitools.client.model.Saveaccountconfig200Response;
import org.openapitools.client.model.SaveaccountconfigRequest;
import org.openapitools.client.model.Saveautoapproveforaccount200Response;
import org.openapitools.client.model.SaveautoapproveforaccountRequest;
import org.openapitools.client.model.SaveautoapproveforaccountsellerRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SkuApprovalSettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SkuApprovalSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SkuApprovalSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getaccountconfig
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getaccountconfigCall(String accountName, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/suggestions/configuration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getaccountconfigValidateBeforeCall(String accountName, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getaccountconfig(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getaccountconfig(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getaccountconfig(Async)");
        }

        return getaccountconfigCall(accountName, accept, contentType, _callback);

    }

    /**
     * Get Account&#39;s Approval Settings
     * This endpoint retrieves the current approval settings of a marketplace&#39;s Received SKUs module. Its response includes:   - &#x60;Score&#x60;: Matcher scores for approving and rejecting SKUs received from sellers.   - &#x60;Matchers&#x60;: All Matchers configured on the marketplace, and their respective details.   - &#x60;SpecificationsMapping&#x60;: Mapping of product and SKU specifications, per seller.   - &#x60;MatchFlux&#x60;: This field determines the type of approval configuration applied to SKUs received from a seller.   The possible values include:   -&#x60;default&#x60;, where the Matcher reviews the SKU, and approves it based on its score.   -&#x60;manual&#x60;, for manual approvals through the Received SKU UI, or Match API.   -&#x60;autoApprove&#x60;, for every SKU received from a given seller to be approved automatically, regardless of their Matcher Score.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @return Getaccountconfig200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Getaccountconfig200Response getaccountconfig(String accountName, String accept, String contentType) throws ApiException {
        ApiResponse<Getaccountconfig200Response> localVarResp = getaccountconfigWithHttpInfo(accountName, accept, contentType);
        return localVarResp.getData();
    }

    /**
     * Get Account&#39;s Approval Settings
     * This endpoint retrieves the current approval settings of a marketplace&#39;s Received SKUs module. Its response includes:   - &#x60;Score&#x60;: Matcher scores for approving and rejecting SKUs received from sellers.   - &#x60;Matchers&#x60;: All Matchers configured on the marketplace, and their respective details.   - &#x60;SpecificationsMapping&#x60;: Mapping of product and SKU specifications, per seller.   - &#x60;MatchFlux&#x60;: This field determines the type of approval configuration applied to SKUs received from a seller.   The possible values include:   -&#x60;default&#x60;, where the Matcher reviews the SKU, and approves it based on its score.   -&#x60;manual&#x60;, for manual approvals through the Received SKU UI, or Match API.   -&#x60;autoApprove&#x60;, for every SKU received from a given seller to be approved automatically, regardless of their Matcher Score.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @return ApiResponse&lt;Getaccountconfig200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Getaccountconfig200Response> getaccountconfigWithHttpInfo(String accountName, String accept, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getaccountconfigValidateBeforeCall(accountName, accept, contentType, null);
        Type localVarReturnType = new TypeToken<Getaccountconfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account&#39;s Approval Settings (asynchronously)
     * This endpoint retrieves the current approval settings of a marketplace&#39;s Received SKUs module. Its response includes:   - &#x60;Score&#x60;: Matcher scores for approving and rejecting SKUs received from sellers.   - &#x60;Matchers&#x60;: All Matchers configured on the marketplace, and their respective details.   - &#x60;SpecificationsMapping&#x60;: Mapping of product and SKU specifications, per seller.   - &#x60;MatchFlux&#x60;: This field determines the type of approval configuration applied to SKUs received from a seller.   The possible values include:   -&#x60;default&#x60;, where the Matcher reviews the SKU, and approves it based on its score.   -&#x60;manual&#x60;, for manual approvals through the Received SKU UI, or Match API.   -&#x60;autoApprove&#x60;, for every SKU received from a given seller to be approved automatically, regardless of their Matcher Score.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getaccountconfigAsync(String accountName, String accept, String contentType, final ApiCallback<Getaccountconfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getaccountconfigValidateBeforeCall(accountName, accept, contentType, _callback);
        Type localVarReturnType = new TypeToken<Getaccountconfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getautoApprovevaluefromconfig
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getautoApprovevaluefromconfigCall(String sellerId, String accountName, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/suggestions/configuration/autoapproval/toggle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerId", sellerId));
        }

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getautoApprovevaluefromconfigValidateBeforeCall(String sellerId, String accountName, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getautoApprovevaluefromconfig(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getautoApprovevaluefromconfig(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getautoApprovevaluefromconfig(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getautoApprovevaluefromconfig(Async)");
        }

        return getautoApprovevaluefromconfigCall(sellerId, accountName, accept, contentType, _callback);

    }

    /**
     * Get autoApprove Status in Account Settings
     * This endpoint can be used to check whether the autoapprove setting is active or not, for a specific seller.   If the response is &#x60;true&#x60;, the autoapprove setting is active. If the response is &#x60;false&#x60;, it is inactive.
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @return GetautoApprovevaluefromconfig200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetautoApprovevaluefromconfig200Response getautoApprovevaluefromconfig(String sellerId, String accountName, String accept, String contentType) throws ApiException {
        ApiResponse<GetautoApprovevaluefromconfig200Response> localVarResp = getautoApprovevaluefromconfigWithHttpInfo(sellerId, accountName, accept, contentType);
        return localVarResp.getData();
    }

    /**
     * Get autoApprove Status in Account Settings
     * This endpoint can be used to check whether the autoapprove setting is active or not, for a specific seller.   If the response is &#x60;true&#x60;, the autoapprove setting is active. If the response is &#x60;false&#x60;, it is inactive.
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @return ApiResponse&lt;GetautoApprovevaluefromconfig200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetautoApprovevaluefromconfig200Response> getautoApprovevaluefromconfigWithHttpInfo(String sellerId, String accountName, String accept, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getautoApprovevaluefromconfigValidateBeforeCall(sellerId, accountName, accept, contentType, null);
        Type localVarReturnType = new TypeToken<GetautoApprovevaluefromconfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get autoApprove Status in Account Settings (asynchronously)
     * This endpoint can be used to check whether the autoapprove setting is active or not, for a specific seller.   If the response is &#x60;true&#x60;, the autoapprove setting is active. If the response is &#x60;false&#x60;, it is inactive.
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getautoApprovevaluefromconfigAsync(String sellerId, String accountName, String accept, String contentType, final ApiCallback<GetautoApprovevaluefromconfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getautoApprovevaluefromconfigValidateBeforeCall(sellerId, accountName, accept, contentType, _callback);
        Type localVarReturnType = new TypeToken<GetautoApprovevaluefromconfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getselleraccountconfig
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getselleraccountconfigCall(String accountName, String sellerId, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/suggestions/configuration/seller/{sellerId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getselleraccountconfigValidateBeforeCall(String accountName, String sellerId, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getselleraccountconfig(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getselleraccountconfig(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getselleraccountconfig(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getselleraccountconfig(Async)");
        }

        return getselleraccountconfigCall(accountName, sellerId, accept, contentType, _callback);

    }

    /**
     * Get Seller&#39;s Approval Settings
     * This endpoint retrieves the current Received SKUs approval settings applied to a specific seller. Its response includes:   - &#x60;sellerId&#x60;: A string that identifies the seller in the marketplace.   - &#x60;accountId&#x60;: Marketplace’s account ID.   - &#x60;accountName&#x60;: Marketplace’s account name.   - &#x60;mapping&#x60;: Mapping of SKU and product Specifications.   - &#x60;matchFlux&#x60;: This field determines the type of approval configuration applied to SKUs received  from a seller.   The possible values include:    -&#x60;default&#x60;, where the Matcher reviews the SKU, and approves it based on its score.   -&#x60;manual&#x60;, for manual approvals through the Received SKU UI and Match API.   -&#x60;autoApprove&#x60;, for every SKU received from a given seller to be approved automatically, regardless of the Matcher Score.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getselleraccountconfig(String accountName, String sellerId, String accept, String contentType) throws ApiException {
        getselleraccountconfigWithHttpInfo(accountName, sellerId, accept, contentType);
    }

    /**
     * Get Seller&#39;s Approval Settings
     * This endpoint retrieves the current Received SKUs approval settings applied to a specific seller. Its response includes:   - &#x60;sellerId&#x60;: A string that identifies the seller in the marketplace.   - &#x60;accountId&#x60;: Marketplace’s account ID.   - &#x60;accountName&#x60;: Marketplace’s account name.   - &#x60;mapping&#x60;: Mapping of SKU and product Specifications.   - &#x60;matchFlux&#x60;: This field determines the type of approval configuration applied to SKUs received  from a seller.   The possible values include:    -&#x60;default&#x60;, where the Matcher reviews the SKU, and approves it based on its score.   -&#x60;manual&#x60;, for manual approvals through the Received SKU UI and Match API.   -&#x60;autoApprove&#x60;, for every SKU received from a given seller to be approved automatically, regardless of the Matcher Score.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getselleraccountconfigWithHttpInfo(String accountName, String sellerId, String accept, String contentType) throws ApiException {
        okhttp3.Call localVarCall = getselleraccountconfigValidateBeforeCall(accountName, sellerId, accept, contentType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Seller&#39;s Approval Settings (asynchronously)
     * This endpoint retrieves the current Received SKUs approval settings applied to a specific seller. Its response includes:   - &#x60;sellerId&#x60;: A string that identifies the seller in the marketplace.   - &#x60;accountId&#x60;: Marketplace’s account ID.   - &#x60;accountName&#x60;: Marketplace’s account name.   - &#x60;mapping&#x60;: Mapping of SKU and product Specifications.   - &#x60;matchFlux&#x60;: This field determines the type of approval configuration applied to SKUs received  from a seller.   The possible values include:    -&#x60;default&#x60;, where the Matcher reviews the SKU, and approves it based on its score.   -&#x60;manual&#x60;, for manual approvals through the Received SKU UI and Match API.   -&#x60;autoApprove&#x60;, for every SKU received from a given seller to be approved automatically, regardless of the Matcher Score.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getselleraccountconfigAsync(String accountName, String sellerId, String accept, String contentType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getselleraccountconfigValidateBeforeCall(accountName, sellerId, accept, contentType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putselleraccountconfig
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param putselleraccountconfigRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putselleraccountconfigCall(String accountName, String sellerId, String accept, String contentType, PutselleraccountconfigRequest putselleraccountconfigRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putselleraccountconfigRequest;

        // create path and map variables
        String localVarPath = "/suggestions/configuration/seller/{sellerId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putselleraccountconfigValidateBeforeCall(String accountName, String sellerId, String accept, String contentType, PutselleraccountconfigRequest putselleraccountconfigRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling putselleraccountconfig(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling putselleraccountconfig(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling putselleraccountconfig(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling putselleraccountconfig(Async)");
        }

        // verify the required parameter 'putselleraccountconfigRequest' is set
        if (putselleraccountconfigRequest == null) {
            throw new ApiException("Missing the required parameter 'putselleraccountconfigRequest' when calling putselleraccountconfig(Async)");
        }

        return putselleraccountconfigCall(accountName, sellerId, accept, contentType, putselleraccountconfigRequest, _callback);

    }

    /**
     * Save Seller&#39;s Approval Settings
     * Marketplaces use this endpoint to create or update approval settings to a specific seller, on the Received SKUs module.   The request includes all the details necessary to implement the chosen approval settings.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param putselleraccountconfigRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void putselleraccountconfig(String accountName, String sellerId, String accept, String contentType, PutselleraccountconfigRequest putselleraccountconfigRequest) throws ApiException {
        putselleraccountconfigWithHttpInfo(accountName, sellerId, accept, contentType, putselleraccountconfigRequest);
    }

    /**
     * Save Seller&#39;s Approval Settings
     * Marketplaces use this endpoint to create or update approval settings to a specific seller, on the Received SKUs module.   The request includes all the details necessary to implement the chosen approval settings.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param putselleraccountconfigRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putselleraccountconfigWithHttpInfo(String accountName, String sellerId, String accept, String contentType, PutselleraccountconfigRequest putselleraccountconfigRequest) throws ApiException {
        okhttp3.Call localVarCall = putselleraccountconfigValidateBeforeCall(accountName, sellerId, accept, contentType, putselleraccountconfigRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save Seller&#39;s Approval Settings (asynchronously)
     * Marketplaces use this endpoint to create or update approval settings to a specific seller, on the Received SKUs module.   The request includes all the details necessary to implement the chosen approval settings.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param putselleraccountconfigRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putselleraccountconfigAsync(String accountName, String sellerId, String accept, String contentType, PutselleraccountconfigRequest putselleraccountconfigRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putselleraccountconfigValidateBeforeCall(accountName, sellerId, accept, contentType, putselleraccountconfigRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveaccountconfig
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param saveaccountconfigRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveaccountconfigCall(String accountName, String accept, String contentType, SaveaccountconfigRequest saveaccountconfigRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saveaccountconfigRequest;

        // create path and map variables
        String localVarPath = "/suggestions/configuration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveaccountconfigValidateBeforeCall(String accountName, String accept, String contentType, SaveaccountconfigRequest saveaccountconfigRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling saveaccountconfig(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling saveaccountconfig(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling saveaccountconfig(Async)");
        }

        // verify the required parameter 'saveaccountconfigRequest' is set
        if (saveaccountconfigRequest == null) {
            throw new ApiException("Missing the required parameter 'saveaccountconfigRequest' when calling saveaccountconfig(Async)");
        }

        return saveaccountconfigCall(accountName, accept, contentType, saveaccountconfigRequest, _callback);

    }

    /**
     * Save Account&#39;s Approval Settings
     * Marketplaces use this endpoint to create or update approval settings on their Received SKUs module.   The request includes all the details necessary to implement the chosen approval settings.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param saveaccountconfigRequest  (required)
     * @return Saveaccountconfig200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Saveaccountconfig200Response saveaccountconfig(String accountName, String accept, String contentType, SaveaccountconfigRequest saveaccountconfigRequest) throws ApiException {
        ApiResponse<Saveaccountconfig200Response> localVarResp = saveaccountconfigWithHttpInfo(accountName, accept, contentType, saveaccountconfigRequest);
        return localVarResp.getData();
    }

    /**
     * Save Account&#39;s Approval Settings
     * Marketplaces use this endpoint to create or update approval settings on their Received SKUs module.   The request includes all the details necessary to implement the chosen approval settings.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param saveaccountconfigRequest  (required)
     * @return ApiResponse&lt;Saveaccountconfig200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Saveaccountconfig200Response> saveaccountconfigWithHttpInfo(String accountName, String accept, String contentType, SaveaccountconfigRequest saveaccountconfigRequest) throws ApiException {
        okhttp3.Call localVarCall = saveaccountconfigValidateBeforeCall(accountName, accept, contentType, saveaccountconfigRequest, null);
        Type localVarReturnType = new TypeToken<Saveaccountconfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save Account&#39;s Approval Settings (asynchronously)
     * Marketplaces use this endpoint to create or update approval settings on their Received SKUs module.   The request includes all the details necessary to implement the chosen approval settings.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param saveaccountconfigRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveaccountconfigAsync(String accountName, String accept, String contentType, SaveaccountconfigRequest saveaccountconfigRequest, final ApiCallback<Saveaccountconfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveaccountconfigValidateBeforeCall(accountName, accept, contentType, saveaccountconfigRequest, _callback);
        Type localVarReturnType = new TypeToken<Saveaccountconfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveautoapproveforaccount
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param saveautoapproveforaccountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveautoapproveforaccountCall(String accountName, String accept, String contentType, SaveautoapproveforaccountRequest saveautoapproveforaccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saveautoapproveforaccountRequest;

        // create path and map variables
        String localVarPath = "/suggestions/configuration/autoapproval/toggle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveautoapproveforaccountValidateBeforeCall(String accountName, String accept, String contentType, SaveautoapproveforaccountRequest saveautoapproveforaccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling saveautoapproveforaccount(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling saveautoapproveforaccount(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling saveautoapproveforaccount(Async)");
        }

        // verify the required parameter 'saveautoapproveforaccountRequest' is set
        if (saveautoapproveforaccountRequest == null) {
            throw new ApiException("Missing the required parameter 'saveautoapproveforaccountRequest' when calling saveautoapproveforaccount(Async)");
        }

        return saveautoapproveforaccountCall(accountName, accept, contentType, saveautoapproveforaccountRequest, _callback);

    }

    /**
     * Activate autoApprove in Marketplace&#39;s Account
     * This endpoint enables the autoapprove rule to a marketplace&#39;s whole Received SKUs module. Once enabling the rule, received SKUs will be automatically approved on your store, regardless of the seller.    For the autoapprove rule to work as expected, the approval [Matcher score](https://help.vtex.com/en/tutorial/entendendo-a-pontuacao-do-vtex-matcher--tutorials_424) should be set up as 80 (default value), but you can configure a different number through the field &#x60;Score&#x60; in [Save Account&#39;s Approval Settings](https://developers.vtex.com/vtex-rest-api/reference/saveaccountconfig).
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param saveautoapproveforaccountRequest  (required)
     * @return Saveautoapproveforaccount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Saveautoapproveforaccount200Response saveautoapproveforaccount(String accountName, String accept, String contentType, SaveautoapproveforaccountRequest saveautoapproveforaccountRequest) throws ApiException {
        ApiResponse<Saveautoapproveforaccount200Response> localVarResp = saveautoapproveforaccountWithHttpInfo(accountName, accept, contentType, saveautoapproveforaccountRequest);
        return localVarResp.getData();
    }

    /**
     * Activate autoApprove in Marketplace&#39;s Account
     * This endpoint enables the autoapprove rule to a marketplace&#39;s whole Received SKUs module. Once enabling the rule, received SKUs will be automatically approved on your store, regardless of the seller.    For the autoapprove rule to work as expected, the approval [Matcher score](https://help.vtex.com/en/tutorial/entendendo-a-pontuacao-do-vtex-matcher--tutorials_424) should be set up as 80 (default value), but you can configure a different number through the field &#x60;Score&#x60; in [Save Account&#39;s Approval Settings](https://developers.vtex.com/vtex-rest-api/reference/saveaccountconfig).
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param saveautoapproveforaccountRequest  (required)
     * @return ApiResponse&lt;Saveautoapproveforaccount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Saveautoapproveforaccount200Response> saveautoapproveforaccountWithHttpInfo(String accountName, String accept, String contentType, SaveautoapproveforaccountRequest saveautoapproveforaccountRequest) throws ApiException {
        okhttp3.Call localVarCall = saveautoapproveforaccountValidateBeforeCall(accountName, accept, contentType, saveautoapproveforaccountRequest, null);
        Type localVarReturnType = new TypeToken<Saveautoapproveforaccount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Activate autoApprove in Marketplace&#39;s Account (asynchronously)
     * This endpoint enables the autoapprove rule to a marketplace&#39;s whole Received SKUs module. Once enabling the rule, received SKUs will be automatically approved on your store, regardless of the seller.    For the autoapprove rule to work as expected, the approval [Matcher score](https://help.vtex.com/en/tutorial/entendendo-a-pontuacao-do-vtex-matcher--tutorials_424) should be set up as 80 (default value), but you can configure a different number through the field &#x60;Score&#x60; in [Save Account&#39;s Approval Settings](https://developers.vtex.com/vtex-rest-api/reference/saveaccountconfig).
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param saveautoapproveforaccountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveautoapproveforaccountAsync(String accountName, String accept, String contentType, SaveautoapproveforaccountRequest saveautoapproveforaccountRequest, final ApiCallback<Saveautoapproveforaccount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveautoapproveforaccountValidateBeforeCall(accountName, accept, contentType, saveautoapproveforaccountRequest, _callback);
        Type localVarReturnType = new TypeToken<Saveautoapproveforaccount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveautoapproveforaccountseller
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param saveautoapproveforaccountsellerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveautoapproveforaccountsellerCall(String accountName, String sellerId, String accept, String contentType, SaveautoapproveforaccountsellerRequest saveautoapproveforaccountsellerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saveautoapproveforaccountsellerRequest;

        // create path and map variables
        String localVarPath = "/suggestions/configuration/autoapproval/toggle/seller/{sellerId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveautoapproveforaccountsellerValidateBeforeCall(String accountName, String sellerId, String accept, String contentType, SaveautoapproveforaccountsellerRequest saveautoapproveforaccountsellerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling saveautoapproveforaccountseller(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling saveautoapproveforaccountseller(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling saveautoapproveforaccountseller(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling saveautoapproveforaccountseller(Async)");
        }

        // verify the required parameter 'saveautoapproveforaccountsellerRequest' is set
        if (saveautoapproveforaccountsellerRequest == null) {
            throw new ApiException("Missing the required parameter 'saveautoapproveforaccountsellerRequest' when calling saveautoapproveforaccountseller(Async)");
        }

        return saveautoapproveforaccountsellerCall(accountName, sellerId, accept, contentType, saveautoapproveforaccountsellerRequest, _callback);

    }

    /**
     * Activate autoApprove Setting for a Seller
     * This endpoint enables the auto approve setting to received SKUs from a specific seller. Be aware that once enabling the rule through this request, all received SKUs from that seller will be automatically approved on your store, regardless of the Matcher Score.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param saveautoapproveforaccountsellerRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void saveautoapproveforaccountseller(String accountName, String sellerId, String accept, String contentType, SaveautoapproveforaccountsellerRequest saveautoapproveforaccountsellerRequest) throws ApiException {
        saveautoapproveforaccountsellerWithHttpInfo(accountName, sellerId, accept, contentType, saveautoapproveforaccountsellerRequest);
    }

    /**
     * Activate autoApprove Setting for a Seller
     * This endpoint enables the auto approve setting to received SKUs from a specific seller. Be aware that once enabling the rule through this request, all received SKUs from that seller will be automatically approved on your store, regardless of the Matcher Score.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param saveautoapproveforaccountsellerRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveautoapproveforaccountsellerWithHttpInfo(String accountName, String sellerId, String accept, String contentType, SaveautoapproveforaccountsellerRequest saveautoapproveforaccountsellerRequest) throws ApiException {
        okhttp3.Call localVarCall = saveautoapproveforaccountsellerValidateBeforeCall(accountName, sellerId, accept, contentType, saveautoapproveforaccountsellerRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activate autoApprove Setting for a Seller (asynchronously)
     * This endpoint enables the auto approve setting to received SKUs from a specific seller. Be aware that once enabling the rule through this request, all received SKUs from that seller will be automatically approved on your store, regardless of the Matcher Score.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param saveautoapproveforaccountsellerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveautoapproveforaccountsellerAsync(String accountName, String sellerId, String accept, String contentType, SaveautoapproveforaccountsellerRequest saveautoapproveforaccountsellerRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveautoapproveforaccountsellerValidateBeforeCall(accountName, sellerId, accept, contentType, saveautoapproveforaccountsellerRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
