/**
 * Suggestions
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISKUApprovalSettingsApi_H
#define OAI_OAISKUApprovalSettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetaccountconfig_200_response.h"
#include "OAIGetautoApprovevaluefromconfig_200_response.h"
#include "OAIPutselleraccountconfigRequest.h"
#include "OAISaveaccountconfigRequest.h"
#include "OAISaveaccountconfig_200_response.h"
#include "OAISaveautoapproveforaccountRequest.h"
#include "OAISaveautoapproveforaccount_200_response.h"
#include "OAISaveautoapproveforaccountsellerRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISKUApprovalSettingsApi : public QObject {
    Q_OBJECT

public:
    OAISKUApprovalSettingsApi(const int timeOut = 0);
    ~OAISKUApprovalSettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getaccountconfig(const QString &account_name, const QString &accept, const QString &content_type);

    /**
    * @param[in]  seller_id QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getautoApprovevaluefromconfig(const QString &seller_id, const QString &account_name, const QString &accept, const QString &content_type);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  seller_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getselleraccountconfig(const QString &account_name, const QString &seller_id, const QString &accept, const QString &content_type);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  seller_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_putselleraccountconfig_request OAIPutselleraccountconfigRequest [required]
    */
    virtual void putselleraccountconfig(const QString &account_name, const QString &seller_id, const QString &accept, const QString &content_type, const OAIPutselleraccountconfigRequest &oai_putselleraccountconfig_request);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_saveaccountconfig_request OAISaveaccountconfigRequest [required]
    */
    virtual void saveaccountconfig(const QString &account_name, const QString &accept, const QString &content_type, const OAISaveaccountconfigRequest &oai_saveaccountconfig_request);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_saveautoapproveforaccount_request OAISaveautoapproveforaccountRequest [required]
    */
    virtual void saveautoapproveforaccount(const QString &account_name, const QString &accept, const QString &content_type, const OAISaveautoapproveforaccountRequest &oai_saveautoapproveforaccount_request);

    /**
    * @param[in]  account_name QString [required]
    * @param[in]  seller_id QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_saveautoapproveforaccountseller_request OAISaveautoapproveforaccountsellerRequest [required]
    */
    virtual void saveautoapproveforaccountseller(const QString &account_name, const QString &seller_id, const QString &accept, const QString &content_type, const OAISaveautoapproveforaccountsellerRequest &oai_saveautoapproveforaccountseller_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getaccountconfigCallback(OAIHttpRequestWorker *worker);
    void getautoApprovevaluefromconfigCallback(OAIHttpRequestWorker *worker);
    void getselleraccountconfigCallback(OAIHttpRequestWorker *worker);
    void putselleraccountconfigCallback(OAIHttpRequestWorker *worker);
    void saveaccountconfigCallback(OAIHttpRequestWorker *worker);
    void saveautoapproveforaccountCallback(OAIHttpRequestWorker *worker);
    void saveautoapproveforaccountsellerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getaccountconfigSignal(OAIGetaccountconfig_200_response summary);
    void getautoApprovevaluefromconfigSignal(OAIGetautoApprovevaluefromconfig_200_response summary);
    void getselleraccountconfigSignal();
    void putselleraccountconfigSignal();
    void saveaccountconfigSignal(OAISaveaccountconfig_200_response summary);
    void saveautoapproveforaccountSignal(OAISaveautoapproveforaccount_200_response summary);
    void saveautoapproveforaccountsellerSignal();


    void getaccountconfigSignalFull(OAIHttpRequestWorker *worker, OAIGetaccountconfig_200_response summary);
    void getautoApprovevaluefromconfigSignalFull(OAIHttpRequestWorker *worker, OAIGetautoApprovevaluefromconfig_200_response summary);
    void getselleraccountconfigSignalFull(OAIHttpRequestWorker *worker);
    void putselleraccountconfigSignalFull(OAIHttpRequestWorker *worker);
    void saveaccountconfigSignalFull(OAIHttpRequestWorker *worker, OAISaveaccountconfig_200_response summary);
    void saveautoapproveforaccountSignalFull(OAIHttpRequestWorker *worker, OAISaveautoapproveforaccount_200_response summary);
    void saveautoapproveforaccountsellerSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getaccountconfigSignalError() instead")
    void getaccountconfigSignalE(OAIGetaccountconfig_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getaccountconfigSignalError(OAIGetaccountconfig_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getautoApprovevaluefromconfigSignalError() instead")
    void getautoApprovevaluefromconfigSignalE(OAIGetautoApprovevaluefromconfig_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getautoApprovevaluefromconfigSignalError(OAIGetautoApprovevaluefromconfig_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getselleraccountconfigSignalError() instead")
    void getselleraccountconfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getselleraccountconfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putselleraccountconfigSignalError() instead")
    void putselleraccountconfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putselleraccountconfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveaccountconfigSignalError() instead")
    void saveaccountconfigSignalE(OAISaveaccountconfig_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void saveaccountconfigSignalError(OAISaveaccountconfig_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveautoapproveforaccountSignalError() instead")
    void saveautoapproveforaccountSignalE(OAISaveautoapproveforaccount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void saveautoapproveforaccountSignalError(OAISaveautoapproveforaccount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveautoapproveforaccountsellerSignalError() instead")
    void saveautoapproveforaccountsellerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveautoapproveforaccountsellerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getaccountconfigSignalErrorFull() instead")
    void getaccountconfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getaccountconfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getautoApprovevaluefromconfigSignalErrorFull() instead")
    void getautoApprovevaluefromconfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getautoApprovevaluefromconfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getselleraccountconfigSignalErrorFull() instead")
    void getselleraccountconfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getselleraccountconfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putselleraccountconfigSignalErrorFull() instead")
    void putselleraccountconfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putselleraccountconfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveaccountconfigSignalErrorFull() instead")
    void saveaccountconfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveaccountconfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveautoapproveforaccountSignalErrorFull() instead")
    void saveautoapproveforaccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveautoapproveforaccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveautoapproveforaccountsellerSignalErrorFull() instead")
    void saveautoapproveforaccountsellerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveautoapproveforaccountsellerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
