/**
 * Suggestions
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISku.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISku::OAISku(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISku::OAISku() {
    this->initializeModel();
}

OAISku::~OAISku() {}

void OAISku::initializeModel() {

    m_eans_isSet = false;
    m_eans_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ref_id_isSet = false;
    m_ref_id_isValid = false;

    m_specifications_isSet = false;
    m_specifications_isValid = false;

    m_unit_multiplier_isSet = false;
    m_unit_multiplier_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAISku::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISku::fromJsonObject(QJsonObject json) {

    m_eans_isValid = ::OpenAPI::fromJsonValue(m_eans, json[QString("eans")]);
    m_eans_isSet = !json[QString("eans")].isNull() && m_eans_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurementUnit")]);
    m_measurement_unit_isSet = !json[QString("measurementUnit")].isNull() && m_measurement_unit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ref_id_isValid = ::OpenAPI::fromJsonValue(m_ref_id, json[QString("refId")]);
    m_ref_id_isSet = !json[QString("refId")].isNull() && m_ref_id_isValid;

    m_specifications_isValid = ::OpenAPI::fromJsonValue(m_specifications, json[QString("specifications")]);
    m_specifications_isSet = !json[QString("specifications")].isNull() && m_specifications_isValid;

    m_unit_multiplier_isValid = ::OpenAPI::fromJsonValue(m_unit_multiplier, json[QString("unitMultiplier")]);
    m_unit_multiplier_isSet = !json[QString("unitMultiplier")].isNull() && m_unit_multiplier_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAISku::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISku::asJsonObject() const {
    QJsonObject obj;
    if (m_eans.size() > 0) {
        obj.insert(QString("eans"), ::OpenAPI::toJsonValue(m_eans));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ref_id_isSet) {
        obj.insert(QString("refId"), ::OpenAPI::toJsonValue(m_ref_id));
    }
    if (m_specifications.isSet()) {
        obj.insert(QString("specifications"), ::OpenAPI::toJsonValue(m_specifications));
    }
    if (m_unit_multiplier_isSet) {
        obj.insert(QString("unitMultiplier"), ::OpenAPI::toJsonValue(m_unit_multiplier));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QList<QString> OAISku::getEans() const {
    return m_eans;
}
void OAISku::setEans(const QList<QString> &eans) {
    m_eans = eans;
    m_eans_isSet = true;
}

bool OAISku::is_eans_Set() const{
    return m_eans_isSet;
}

bool OAISku::is_eans_Valid() const{
    return m_eans_isValid;
}

qint32 OAISku::getHeight() const {
    return m_height;
}
void OAISku::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAISku::is_height_Set() const{
    return m_height_isSet;
}

bool OAISku::is_height_Valid() const{
    return m_height_isValid;
}

QList<QJsonValue> OAISku::getImages() const {
    return m_images;
}
void OAISku::setImages(const QList<QJsonValue> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAISku::is_images_Set() const{
    return m_images_isSet;
}

bool OAISku::is_images_Valid() const{
    return m_images_isValid;
}

qint32 OAISku::getLength() const {
    return m_length;
}
void OAISku::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAISku::is_length_Set() const{
    return m_length_isSet;
}

bool OAISku::is_length_Valid() const{
    return m_length_isValid;
}

QString OAISku::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAISku::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAISku::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAISku::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

QString OAISku::getName() const {
    return m_name;
}
void OAISku::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISku::is_name_Set() const{
    return m_name_isSet;
}

bool OAISku::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISku::getRefId() const {
    return m_ref_id;
}
void OAISku::setRefId(const QString &ref_id) {
    m_ref_id = ref_id;
    m_ref_id_isSet = true;
}

bool OAISku::is_ref_id_Set() const{
    return m_ref_id_isSet;
}

bool OAISku::is_ref_id_Valid() const{
    return m_ref_id_isValid;
}

OAISpecifications OAISku::getSpecifications() const {
    return m_specifications;
}
void OAISku::setSpecifications(const OAISpecifications &specifications) {
    m_specifications = specifications;
    m_specifications_isSet = true;
}

bool OAISku::is_specifications_Set() const{
    return m_specifications_isSet;
}

bool OAISku::is_specifications_Valid() const{
    return m_specifications_isValid;
}

qint32 OAISku::getUnitMultiplier() const {
    return m_unit_multiplier;
}
void OAISku::setUnitMultiplier(const qint32 &unit_multiplier) {
    m_unit_multiplier = unit_multiplier;
    m_unit_multiplier_isSet = true;
}

bool OAISku::is_unit_multiplier_Set() const{
    return m_unit_multiplier_isSet;
}

bool OAISku::is_unit_multiplier_Valid() const{
    return m_unit_multiplier_isValid;
}

qint32 OAISku::getWeight() const {
    return m_weight;
}
void OAISku::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAISku::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAISku::is_weight_Valid() const{
    return m_weight_isValid;
}

qint32 OAISku::getWidth() const {
    return m_width;
}
void OAISku::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAISku::is_width_Set() const{
    return m_width_isSet;
}

bool OAISku::is_width_Valid() const{
    return m_width_isValid;
}

bool OAISku::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specifications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISku::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_eans_isValid && m_height_isValid && m_images_isValid && m_length_isValid && m_measurement_unit_isValid && m_name_isValid && m_ref_id_isValid && m_specifications_isValid && m_unit_multiplier_isValid && m_weight_isValid && m_width_isValid && true;
}

} // namespace OpenAPI
