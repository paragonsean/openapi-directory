/**
 * Suggestions
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISaveSuggestionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISaveSuggestionRequest::OAISaveSuggestionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISaveSuggestionRequest::OAISaveSuggestionRequest() {
    this->initializeModel();
}

OAISaveSuggestionRequest::~OAISaveSuggestionRequest() {}

void OAISaveSuggestionRequest::initializeModel() {

    m_available_quantity_isSet = false;
    m_available_quantity_isValid = false;

    m_brand_name_isSet = false;
    m_brand_name_isValid = false;

    m_category_full_path_isSet = false;
    m_category_full_path_isValid = false;

    m_ean_isSet = false;
    m_ean_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_pricing_isSet = false;
    m_pricing_isValid = false;

    m_product_description_isSet = false;
    m_product_description_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;

    m_product_specifications_isSet = false;
    m_product_specifications_isValid = false;

    m_ref_id_isSet = false;
    m_ref_id_isValid = false;

    m_seller_id_isSet = false;
    m_seller_id_isValid = false;

    m_seller_stock_keeping_unit_id_isSet = false;
    m_seller_stock_keeping_unit_id_isValid = false;

    m_sku_name_isSet = false;
    m_sku_name_isValid = false;

    m_sku_specifications_isSet = false;
    m_sku_specifications_isValid = false;

    m_unit_multiplier_isSet = false;
    m_unit_multiplier_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAISaveSuggestionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISaveSuggestionRequest::fromJsonObject(QJsonObject json) {

    m_available_quantity_isValid = ::OpenAPI::fromJsonValue(m_available_quantity, json[QString("AvailableQuantity")]);
    m_available_quantity_isSet = !json[QString("AvailableQuantity")].isNull() && m_available_quantity_isValid;

    m_brand_name_isValid = ::OpenAPI::fromJsonValue(m_brand_name, json[QString("BrandName")]);
    m_brand_name_isSet = !json[QString("BrandName")].isNull() && m_brand_name_isValid;

    m_category_full_path_isValid = ::OpenAPI::fromJsonValue(m_category_full_path, json[QString("CategoryFullPath")]);
    m_category_full_path_isSet = !json[QString("CategoryFullPath")].isNull() && m_category_full_path_isValid;

    m_ean_isValid = ::OpenAPI::fromJsonValue(m_ean, json[QString("EAN")]);
    m_ean_isSet = !json[QString("EAN")].isNull() && m_ean_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("Images")]);
    m_images_isSet = !json[QString("Images")].isNull() && m_images_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("Length")]);
    m_length_isSet = !json[QString("Length")].isNull() && m_length_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("MeasurementUnit")]);
    m_measurement_unit_isSet = !json[QString("MeasurementUnit")].isNull() && m_measurement_unit_isValid;

    m_pricing_isValid = ::OpenAPI::fromJsonValue(m_pricing, json[QString("Pricing")]);
    m_pricing_isSet = !json[QString("Pricing")].isNull() && m_pricing_isValid;

    m_product_description_isValid = ::OpenAPI::fromJsonValue(m_product_description, json[QString("ProductDescription")]);
    m_product_description_isSet = !json[QString("ProductDescription")].isNull() && m_product_description_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("ProductName")]);
    m_product_name_isSet = !json[QString("ProductName")].isNull() && m_product_name_isValid;

    m_product_specifications_isValid = ::OpenAPI::fromJsonValue(m_product_specifications, json[QString("ProductSpecifications")]);
    m_product_specifications_isSet = !json[QString("ProductSpecifications")].isNull() && m_product_specifications_isValid;

    m_ref_id_isValid = ::OpenAPI::fromJsonValue(m_ref_id, json[QString("RefId")]);
    m_ref_id_isSet = !json[QString("RefId")].isNull() && m_ref_id_isValid;

    m_seller_id_isValid = ::OpenAPI::fromJsonValue(m_seller_id, json[QString("SellerId")]);
    m_seller_id_isSet = !json[QString("SellerId")].isNull() && m_seller_id_isValid;

    m_seller_stock_keeping_unit_id_isValid = ::OpenAPI::fromJsonValue(m_seller_stock_keeping_unit_id, json[QString("SellerStockKeepingUnitId")]);
    m_seller_stock_keeping_unit_id_isSet = !json[QString("SellerStockKeepingUnitId")].isNull() && m_seller_stock_keeping_unit_id_isValid;

    m_sku_name_isValid = ::OpenAPI::fromJsonValue(m_sku_name, json[QString("SkuName")]);
    m_sku_name_isSet = !json[QString("SkuName")].isNull() && m_sku_name_isValid;

    m_sku_specifications_isValid = ::OpenAPI::fromJsonValue(m_sku_specifications, json[QString("SkuSpecifications")]);
    m_sku_specifications_isSet = !json[QString("SkuSpecifications")].isNull() && m_sku_specifications_isValid;

    m_unit_multiplier_isValid = ::OpenAPI::fromJsonValue(m_unit_multiplier, json[QString("UnitMultiplier")]);
    m_unit_multiplier_isSet = !json[QString("UnitMultiplier")].isNull() && m_unit_multiplier_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("Width")]);
    m_width_isSet = !json[QString("Width")].isNull() && m_width_isValid;
}

QString OAISaveSuggestionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISaveSuggestionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_available_quantity_isSet) {
        obj.insert(QString("AvailableQuantity"), ::OpenAPI::toJsonValue(m_available_quantity));
    }
    if (m_brand_name_isSet) {
        obj.insert(QString("BrandName"), ::OpenAPI::toJsonValue(m_brand_name));
    }
    if (m_category_full_path_isSet) {
        obj.insert(QString("CategoryFullPath"), ::OpenAPI::toJsonValue(m_category_full_path));
    }
    if (m_ean_isSet) {
        obj.insert(QString("EAN"), ::OpenAPI::toJsonValue(m_ean));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("Images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_length_isSet) {
        obj.insert(QString("Length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("MeasurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_pricing.isSet()) {
        obj.insert(QString("Pricing"), ::OpenAPI::toJsonValue(m_pricing));
    }
    if (m_product_description_isSet) {
        obj.insert(QString("ProductDescription"), ::OpenAPI::toJsonValue(m_product_description));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("ProductName"), ::OpenAPI::toJsonValue(m_product_name));
    }
    if (m_product_specifications.size() > 0) {
        obj.insert(QString("ProductSpecifications"), ::OpenAPI::toJsonValue(m_product_specifications));
    }
    if (m_ref_id_isSet) {
        obj.insert(QString("RefId"), ::OpenAPI::toJsonValue(m_ref_id));
    }
    if (m_seller_id_isSet) {
        obj.insert(QString("SellerId"), ::OpenAPI::toJsonValue(m_seller_id));
    }
    if (m_seller_stock_keeping_unit_id_isSet) {
        obj.insert(QString("SellerStockKeepingUnitId"), ::OpenAPI::toJsonValue(m_seller_stock_keeping_unit_id));
    }
    if (m_sku_name_isSet) {
        obj.insert(QString("SkuName"), ::OpenAPI::toJsonValue(m_sku_name));
    }
    if (m_sku_specifications.size() > 0) {
        obj.insert(QString("SkuSpecifications"), ::OpenAPI::toJsonValue(m_sku_specifications));
    }
    if (m_unit_multiplier_isSet) {
        obj.insert(QString("UnitMultiplier"), ::OpenAPI::toJsonValue(m_unit_multiplier));
    }
    if (m_weight_isSet) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_width_isSet) {
        obj.insert(QString("Width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAISaveSuggestionRequest::getAvailableQuantity() const {
    return m_available_quantity;
}
void OAISaveSuggestionRequest::setAvailableQuantity(const qint32 &available_quantity) {
    m_available_quantity = available_quantity;
    m_available_quantity_isSet = true;
}

bool OAISaveSuggestionRequest::is_available_quantity_Set() const{
    return m_available_quantity_isSet;
}

bool OAISaveSuggestionRequest::is_available_quantity_Valid() const{
    return m_available_quantity_isValid;
}

QString OAISaveSuggestionRequest::getBrandName() const {
    return m_brand_name;
}
void OAISaveSuggestionRequest::setBrandName(const QString &brand_name) {
    m_brand_name = brand_name;
    m_brand_name_isSet = true;
}

bool OAISaveSuggestionRequest::is_brand_name_Set() const{
    return m_brand_name_isSet;
}

bool OAISaveSuggestionRequest::is_brand_name_Valid() const{
    return m_brand_name_isValid;
}

QString OAISaveSuggestionRequest::getCategoryFullPath() const {
    return m_category_full_path;
}
void OAISaveSuggestionRequest::setCategoryFullPath(const QString &category_full_path) {
    m_category_full_path = category_full_path;
    m_category_full_path_isSet = true;
}

bool OAISaveSuggestionRequest::is_category_full_path_Set() const{
    return m_category_full_path_isSet;
}

bool OAISaveSuggestionRequest::is_category_full_path_Valid() const{
    return m_category_full_path_isValid;
}

QString OAISaveSuggestionRequest::getEan() const {
    return m_ean;
}
void OAISaveSuggestionRequest::setEan(const QString &ean) {
    m_ean = ean;
    m_ean_isSet = true;
}

bool OAISaveSuggestionRequest::is_ean_Set() const{
    return m_ean_isSet;
}

bool OAISaveSuggestionRequest::is_ean_Valid() const{
    return m_ean_isValid;
}

qint32 OAISaveSuggestionRequest::getHeight() const {
    return m_height;
}
void OAISaveSuggestionRequest::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAISaveSuggestionRequest::is_height_Set() const{
    return m_height_isSet;
}

bool OAISaveSuggestionRequest::is_height_Valid() const{
    return m_height_isValid;
}

QList<OAIImage> OAISaveSuggestionRequest::getImages() const {
    return m_images;
}
void OAISaveSuggestionRequest::setImages(const QList<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAISaveSuggestionRequest::is_images_Set() const{
    return m_images_isSet;
}

bool OAISaveSuggestionRequest::is_images_Valid() const{
    return m_images_isValid;
}

qint32 OAISaveSuggestionRequest::getLength() const {
    return m_length;
}
void OAISaveSuggestionRequest::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAISaveSuggestionRequest::is_length_Set() const{
    return m_length_isSet;
}

bool OAISaveSuggestionRequest::is_length_Valid() const{
    return m_length_isValid;
}

QString OAISaveSuggestionRequest::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAISaveSuggestionRequest::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAISaveSuggestionRequest::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAISaveSuggestionRequest::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

OAISaveSuggestionRequest_Pricing OAISaveSuggestionRequest::getPricing() const {
    return m_pricing;
}
void OAISaveSuggestionRequest::setPricing(const OAISaveSuggestionRequest_Pricing &pricing) {
    m_pricing = pricing;
    m_pricing_isSet = true;
}

bool OAISaveSuggestionRequest::is_pricing_Set() const{
    return m_pricing_isSet;
}

bool OAISaveSuggestionRequest::is_pricing_Valid() const{
    return m_pricing_isValid;
}

QString OAISaveSuggestionRequest::getProductDescription() const {
    return m_product_description;
}
void OAISaveSuggestionRequest::setProductDescription(const QString &product_description) {
    m_product_description = product_description;
    m_product_description_isSet = true;
}

bool OAISaveSuggestionRequest::is_product_description_Set() const{
    return m_product_description_isSet;
}

bool OAISaveSuggestionRequest::is_product_description_Valid() const{
    return m_product_description_isValid;
}

QString OAISaveSuggestionRequest::getProductId() const {
    return m_product_id;
}
void OAISaveSuggestionRequest::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAISaveSuggestionRequest::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAISaveSuggestionRequest::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAISaveSuggestionRequest::getProductName() const {
    return m_product_name;
}
void OAISaveSuggestionRequest::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAISaveSuggestionRequest::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAISaveSuggestionRequest::is_product_name_Valid() const{
    return m_product_name_isValid;
}

QList<OAIProductSpecification> OAISaveSuggestionRequest::getProductSpecifications() const {
    return m_product_specifications;
}
void OAISaveSuggestionRequest::setProductSpecifications(const QList<OAIProductSpecification> &product_specifications) {
    m_product_specifications = product_specifications;
    m_product_specifications_isSet = true;
}

bool OAISaveSuggestionRequest::is_product_specifications_Set() const{
    return m_product_specifications_isSet;
}

bool OAISaveSuggestionRequest::is_product_specifications_Valid() const{
    return m_product_specifications_isValid;
}

QString OAISaveSuggestionRequest::getRefId() const {
    return m_ref_id;
}
void OAISaveSuggestionRequest::setRefId(const QString &ref_id) {
    m_ref_id = ref_id;
    m_ref_id_isSet = true;
}

bool OAISaveSuggestionRequest::is_ref_id_Set() const{
    return m_ref_id_isSet;
}

bool OAISaveSuggestionRequest::is_ref_id_Valid() const{
    return m_ref_id_isValid;
}

QString OAISaveSuggestionRequest::getSellerId() const {
    return m_seller_id;
}
void OAISaveSuggestionRequest::setSellerId(const QString &seller_id) {
    m_seller_id = seller_id;
    m_seller_id_isSet = true;
}

bool OAISaveSuggestionRequest::is_seller_id_Set() const{
    return m_seller_id_isSet;
}

bool OAISaveSuggestionRequest::is_seller_id_Valid() const{
    return m_seller_id_isValid;
}

qint32 OAISaveSuggestionRequest::getSellerStockKeepingUnitId() const {
    return m_seller_stock_keeping_unit_id;
}
void OAISaveSuggestionRequest::setSellerStockKeepingUnitId(const qint32 &seller_stock_keeping_unit_id) {
    m_seller_stock_keeping_unit_id = seller_stock_keeping_unit_id;
    m_seller_stock_keeping_unit_id_isSet = true;
}

bool OAISaveSuggestionRequest::is_seller_stock_keeping_unit_id_Set() const{
    return m_seller_stock_keeping_unit_id_isSet;
}

bool OAISaveSuggestionRequest::is_seller_stock_keeping_unit_id_Valid() const{
    return m_seller_stock_keeping_unit_id_isValid;
}

QString OAISaveSuggestionRequest::getSkuName() const {
    return m_sku_name;
}
void OAISaveSuggestionRequest::setSkuName(const QString &sku_name) {
    m_sku_name = sku_name;
    m_sku_name_isSet = true;
}

bool OAISaveSuggestionRequest::is_sku_name_Set() const{
    return m_sku_name_isSet;
}

bool OAISaveSuggestionRequest::is_sku_name_Valid() const{
    return m_sku_name_isValid;
}

QList<OAISkuSpecification> OAISaveSuggestionRequest::getSkuSpecifications() const {
    return m_sku_specifications;
}
void OAISaveSuggestionRequest::setSkuSpecifications(const QList<OAISkuSpecification> &sku_specifications) {
    m_sku_specifications = sku_specifications;
    m_sku_specifications_isSet = true;
}

bool OAISaveSuggestionRequest::is_sku_specifications_Set() const{
    return m_sku_specifications_isSet;
}

bool OAISaveSuggestionRequest::is_sku_specifications_Valid() const{
    return m_sku_specifications_isValid;
}

qint32 OAISaveSuggestionRequest::getUnitMultiplier() const {
    return m_unit_multiplier;
}
void OAISaveSuggestionRequest::setUnitMultiplier(const qint32 &unit_multiplier) {
    m_unit_multiplier = unit_multiplier;
    m_unit_multiplier_isSet = true;
}

bool OAISaveSuggestionRequest::is_unit_multiplier_Set() const{
    return m_unit_multiplier_isSet;
}

bool OAISaveSuggestionRequest::is_unit_multiplier_Valid() const{
    return m_unit_multiplier_isValid;
}

qint32 OAISaveSuggestionRequest::getWeight() const {
    return m_weight;
}
void OAISaveSuggestionRequest::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAISaveSuggestionRequest::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAISaveSuggestionRequest::is_weight_Valid() const{
    return m_weight_isValid;
}

qint32 OAISaveSuggestionRequest::getWidth() const {
    return m_width;
}
void OAISaveSuggestionRequest::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAISaveSuggestionRequest::is_width_Set() const{
    return m_width_isSet;
}

bool OAISaveSuggestionRequest::is_width_Valid() const{
    return m_width_isValid;
}

bool OAISaveSuggestionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_full_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_specifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_stock_keeping_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_specifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISaveSuggestionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_quantity_isValid && m_brand_name_isValid && m_category_full_path_isValid && m_ean_isValid && m_height_isValid && m_images_isValid && m_length_isValid && m_pricing_isValid && m_product_description_isValid && m_product_id_isValid && m_product_name_isValid && m_ref_id_isValid && m_seller_id_isValid && m_sku_name_isValid && m_weight_isValid && m_width_isValid && true;
}

} // namespace OpenAPI
