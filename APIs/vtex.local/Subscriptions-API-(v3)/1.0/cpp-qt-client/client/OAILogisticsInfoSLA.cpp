/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogisticsInfoSLA.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogisticsInfoSLA::OAILogisticsInfoSLA(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogisticsInfoSLA::OAILogisticsInfoSLA() {
    this->initializeModel();
}

OAILogisticsInfoSLA::~OAILogisticsInfoSLA() {}

void OAILogisticsInfoSLA::initializeModel() {

    m_available_delivery_windows_isSet = false;
    m_available_delivery_windows_isValid = false;

    m_delivery_channel_isSet = false;
    m_delivery_channel_isValid = false;

    m_delivery_windows_isSet = false;
    m_delivery_windows_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lock_ttl_isSet = false;
    m_lock_ttl_isValid = false;

    m_pickup_point_id_isSet = false;
    m_pickup_point_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_shipping_estimate_isSet = false;
    m_shipping_estimate_isValid = false;
}

void OAILogisticsInfoSLA::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogisticsInfoSLA::fromJsonObject(QJsonObject json) {

    m_available_delivery_windows_isValid = ::OpenAPI::fromJsonValue(m_available_delivery_windows, json[QString("availableDeliveryWindows")]);
    m_available_delivery_windows_isSet = !json[QString("availableDeliveryWindows")].isNull() && m_available_delivery_windows_isValid;

    m_delivery_channel_isValid = ::OpenAPI::fromJsonValue(m_delivery_channel, json[QString("deliveryChannel")]);
    m_delivery_channel_isSet = !json[QString("deliveryChannel")].isNull() && m_delivery_channel_isValid;

    m_delivery_windows_isValid = ::OpenAPI::fromJsonValue(m_delivery_windows, json[QString("deliveryWindows")]);
    m_delivery_windows_isSet = !json[QString("deliveryWindows")].isNull() && m_delivery_windows_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lock_ttl_isValid = ::OpenAPI::fromJsonValue(m_lock_ttl, json[QString("lockTtl")]);
    m_lock_ttl_isSet = !json[QString("lockTtl")].isNull() && m_lock_ttl_isValid;

    m_pickup_point_id_isValid = ::OpenAPI::fromJsonValue(m_pickup_point_id, json[QString("pickupPointId")]);
    m_pickup_point_id_isSet = !json[QString("pickupPointId")].isNull() && m_pickup_point_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_shipping_estimate_isValid = ::OpenAPI::fromJsonValue(m_shipping_estimate, json[QString("shippingEstimate")]);
    m_shipping_estimate_isSet = !json[QString("shippingEstimate")].isNull() && m_shipping_estimate_isValid;
}

QString OAILogisticsInfoSLA::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogisticsInfoSLA::asJsonObject() const {
    QJsonObject obj;
    if (m_available_delivery_windows.size() > 0) {
        obj.insert(QString("availableDeliveryWindows"), ::OpenAPI::toJsonValue(m_available_delivery_windows));
    }
    if (m_delivery_channel_isSet) {
        obj.insert(QString("deliveryChannel"), ::OpenAPI::toJsonValue(m_delivery_channel));
    }
    if (m_delivery_windows.size() > 0) {
        obj.insert(QString("deliveryWindows"), ::OpenAPI::toJsonValue(m_delivery_windows));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lock_ttl_isSet) {
        obj.insert(QString("lockTtl"), ::OpenAPI::toJsonValue(m_lock_ttl));
    }
    if (m_pickup_point_id_isSet) {
        obj.insert(QString("pickupPointId"), ::OpenAPI::toJsonValue(m_pickup_point_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_shipping_estimate_isSet) {
        obj.insert(QString("shippingEstimate"), ::OpenAPI::toJsonValue(m_shipping_estimate));
    }
    return obj;
}

QList<OAILogisticsInfoDeliveryWindow> OAILogisticsInfoSLA::getAvailableDeliveryWindows() const {
    return m_available_delivery_windows;
}
void OAILogisticsInfoSLA::setAvailableDeliveryWindows(const QList<OAILogisticsInfoDeliveryWindow> &available_delivery_windows) {
    m_available_delivery_windows = available_delivery_windows;
    m_available_delivery_windows_isSet = true;
}

bool OAILogisticsInfoSLA::is_available_delivery_windows_Set() const{
    return m_available_delivery_windows_isSet;
}

bool OAILogisticsInfoSLA::is_available_delivery_windows_Valid() const{
    return m_available_delivery_windows_isValid;
}

QString OAILogisticsInfoSLA::getDeliveryChannel() const {
    return m_delivery_channel;
}
void OAILogisticsInfoSLA::setDeliveryChannel(const QString &delivery_channel) {
    m_delivery_channel = delivery_channel;
    m_delivery_channel_isSet = true;
}

bool OAILogisticsInfoSLA::is_delivery_channel_Set() const{
    return m_delivery_channel_isSet;
}

bool OAILogisticsInfoSLA::is_delivery_channel_Valid() const{
    return m_delivery_channel_isValid;
}

QList<OAILogisticsInfoDeliveryWindow> OAILogisticsInfoSLA::getDeliveryWindows() const {
    return m_delivery_windows;
}
void OAILogisticsInfoSLA::setDeliveryWindows(const QList<OAILogisticsInfoDeliveryWindow> &delivery_windows) {
    m_delivery_windows = delivery_windows;
    m_delivery_windows_isSet = true;
}

bool OAILogisticsInfoSLA::is_delivery_windows_Set() const{
    return m_delivery_windows_isSet;
}

bool OAILogisticsInfoSLA::is_delivery_windows_Valid() const{
    return m_delivery_windows_isValid;
}

QString OAILogisticsInfoSLA::getId() const {
    return m_id;
}
void OAILogisticsInfoSLA::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILogisticsInfoSLA::is_id_Set() const{
    return m_id_isSet;
}

bool OAILogisticsInfoSLA::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILogisticsInfoSLA::getLockTtl() const {
    return m_lock_ttl;
}
void OAILogisticsInfoSLA::setLockTtl(const QString &lock_ttl) {
    m_lock_ttl = lock_ttl;
    m_lock_ttl_isSet = true;
}

bool OAILogisticsInfoSLA::is_lock_ttl_Set() const{
    return m_lock_ttl_isSet;
}

bool OAILogisticsInfoSLA::is_lock_ttl_Valid() const{
    return m_lock_ttl_isValid;
}

QString OAILogisticsInfoSLA::getPickupPointId() const {
    return m_pickup_point_id;
}
void OAILogisticsInfoSLA::setPickupPointId(const QString &pickup_point_id) {
    m_pickup_point_id = pickup_point_id;
    m_pickup_point_id_isSet = true;
}

bool OAILogisticsInfoSLA::is_pickup_point_id_Set() const{
    return m_pickup_point_id_isSet;
}

bool OAILogisticsInfoSLA::is_pickup_point_id_Valid() const{
    return m_pickup_point_id_isValid;
}

qint32 OAILogisticsInfoSLA::getPrice() const {
    return m_price;
}
void OAILogisticsInfoSLA::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAILogisticsInfoSLA::is_price_Set() const{
    return m_price_isSet;
}

bool OAILogisticsInfoSLA::is_price_Valid() const{
    return m_price_isValid;
}

QString OAILogisticsInfoSLA::getShippingEstimate() const {
    return m_shipping_estimate;
}
void OAILogisticsInfoSLA::setShippingEstimate(const QString &shipping_estimate) {
    m_shipping_estimate = shipping_estimate;
    m_shipping_estimate_isSet = true;
}

bool OAILogisticsInfoSLA::is_shipping_estimate_Set() const{
    return m_shipping_estimate_isSet;
}

bool OAILogisticsInfoSLA::is_shipping_estimate_Valid() const{
    return m_shipping_estimate_isValid;
}

bool OAILogisticsInfoSLA::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_delivery_windows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_windows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogisticsInfoSLA::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
