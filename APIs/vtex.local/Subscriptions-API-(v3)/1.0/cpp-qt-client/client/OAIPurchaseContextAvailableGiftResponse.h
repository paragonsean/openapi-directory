/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPurchaseContextAvailableGiftResponse.h
 *
 * 
 */

#ifndef OAIPurchaseContextAvailableGiftResponse_H
#define OAIPurchaseContextAvailableGiftResponse_H

#include <QJsonObject>

#include "OAIItemAttachment.h"
#include "OAIPriceTag.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIItemAttachment;
class OAIPriceTag;

class OAIPurchaseContextAvailableGiftResponse : public OAIObject {
public:
    OAIPurchaseContextAvailableGiftResponse();
    OAIPurchaseContextAvailableGiftResponse(QString json);
    ~OAIPurchaseContextAvailableGiftResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIItemAttachment> getAttachments() const;
    void setAttachments(const QList<OAIItemAttachment> &attachments);
    bool is_attachments_Set() const;
    bool is_attachments_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsGift() const;
    void setIsGift(const bool &is_gift);
    bool is_is_gift_Set() const;
    bool is_is_gift_Valid() const;

    bool isIsSelected() const;
    void setIsSelected(const bool &is_selected);
    bool is_is_selected_Set() const;
    bool is_is_selected_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint64 getPrice() const;
    void setPrice(const qint64 &price);
    bool is_price_Set() const;
    bool is_price_Valid() const;

    QList<OAIPriceTag> getPriceTags() const;
    void setPriceTags(const QList<OAIPriceTag> &price_tags);
    bool is_price_tags_Set() const;
    bool is_price_tags_Valid() const;

    qint32 getQuantity() const;
    void setQuantity(const qint32 &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    QString getSeller() const;
    void setSeller(const QString &seller);
    bool is_seller_Set() const;
    bool is_seller_Valid() const;

    qint64 getSellingPrice() const;
    void setSellingPrice(const qint64 &selling_price);
    bool is_selling_price_Set() const;
    bool is_selling_price_Valid() const;

    double getUnitMultiplier() const;
    void setUnitMultiplier(const double &unit_multiplier);
    bool is_unit_multiplier_Set() const;
    bool is_unit_multiplier_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIItemAttachment> m_attachments;
    bool m_attachments_isSet;
    bool m_attachments_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_gift;
    bool m_is_gift_isSet;
    bool m_is_gift_isValid;

    bool m_is_selected;
    bool m_is_selected_isSet;
    bool m_is_selected_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint64 m_price;
    bool m_price_isSet;
    bool m_price_isValid;

    QList<OAIPriceTag> m_price_tags;
    bool m_price_tags_isSet;
    bool m_price_tags_isValid;

    qint32 m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    QString m_seller;
    bool m_seller_isSet;
    bool m_seller_isValid;

    qint64 m_selling_price;
    bool m_selling_price_isSet;
    bool m_selling_price_isValid;

    double m_unit_multiplier;
    bool m_unit_multiplier_isSet;
    bool m_unit_multiplier_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPurchaseContextAvailableGiftResponse)

#endif // OAIPurchaseContextAvailableGiftResponse_H
