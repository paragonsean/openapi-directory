/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionCycleOrderInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionCycleOrderInfo::OAISubscriptionCycleOrderInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionCycleOrderInfo::OAISubscriptionCycleOrderInfo() {
    this->initializeModel();
}

OAISubscriptionCycleOrderInfo::~OAISubscriptionCycleOrderInfo() {}

void OAISubscriptionCycleOrderInfo::initializeModel() {

    m_order_group_isSet = false;
    m_order_group_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_payment_url_isSet = false;
    m_payment_url_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAISubscriptionCycleOrderInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionCycleOrderInfo::fromJsonObject(QJsonObject json) {

    m_order_group_isValid = ::OpenAPI::fromJsonValue(m_order_group, json[QString("orderGroup")]);
    m_order_group_isSet = !json[QString("orderGroup")].isNull() && m_order_group_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_payment_url_isValid = ::OpenAPI::fromJsonValue(m_payment_url, json[QString("paymentURL")]);
    m_payment_url_isSet = !json[QString("paymentURL")].isNull() && m_payment_url_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAISubscriptionCycleOrderInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionCycleOrderInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_order_group_isSet) {
        obj.insert(QString("orderGroup"), ::OpenAPI::toJsonValue(m_order_group));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_payment_url_isSet) {
        obj.insert(QString("paymentURL"), ::OpenAPI::toJsonValue(m_payment_url));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAISubscriptionCycleOrderInfo::getOrderGroup() const {
    return m_order_group;
}
void OAISubscriptionCycleOrderInfo::setOrderGroup(const QString &order_group) {
    m_order_group = order_group;
    m_order_group_isSet = true;
}

bool OAISubscriptionCycleOrderInfo::is_order_group_Set() const{
    return m_order_group_isSet;
}

bool OAISubscriptionCycleOrderInfo::is_order_group_Valid() const{
    return m_order_group_isValid;
}

QString OAISubscriptionCycleOrderInfo::getOrderId() const {
    return m_order_id;
}
void OAISubscriptionCycleOrderInfo::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAISubscriptionCycleOrderInfo::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAISubscriptionCycleOrderInfo::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAISubscriptionCycleOrderInfo::getPaymentUrl() const {
    return m_payment_url;
}
void OAISubscriptionCycleOrderInfo::setPaymentUrl(const QString &payment_url) {
    m_payment_url = payment_url;
    m_payment_url_isSet = true;
}

bool OAISubscriptionCycleOrderInfo::is_payment_url_Set() const{
    return m_payment_url_isSet;
}

bool OAISubscriptionCycleOrderInfo::is_payment_url_Valid() const{
    return m_payment_url_isValid;
}

qint64 OAISubscriptionCycleOrderInfo::getValue() const {
    return m_value;
}
void OAISubscriptionCycleOrderInfo::setValue(const qint64 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISubscriptionCycleOrderInfo::is_value_Set() const{
    return m_value_isSet;
}

bool OAISubscriptionCycleOrderInfo::is_value_Valid() const{
    return m_value_isValid;
}

bool OAISubscriptionCycleOrderInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_order_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionCycleOrderInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
