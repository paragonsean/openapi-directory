/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimulateMessageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimulateMessageResponse::OAISimulateMessageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimulateMessageResponse::OAISimulateMessageResponse() {
    this->initializeModel();
}

OAISimulateMessageResponse::~OAISimulateMessageResponse() {}

void OAISimulateMessageResponse::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAISimulateMessageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimulateMessageResponse::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAISimulateMessageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimulateMessageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAISimulateMessageResponse::getCode() const {
    return m_code;
}
void OAISimulateMessageResponse::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAISimulateMessageResponse::is_code_Set() const{
    return m_code_isSet;
}

bool OAISimulateMessageResponse::is_code_Valid() const{
    return m_code_isValid;
}

QString OAISimulateMessageResponse::getStatus() const {
    return m_status;
}
void OAISimulateMessageResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISimulateMessageResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAISimulateMessageResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISimulateMessageResponse::getText() const {
    return m_text;
}
void OAISimulateMessageResponse::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISimulateMessageResponse::is_text_Set() const{
    return m_text_isSet;
}

bool OAISimulateMessageResponse::is_text_Valid() const{
    return m_text_isValid;
}

bool OAISimulateMessageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimulateMessageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
