/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner() {
    this->initializeModel();
}

OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::~OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner() {}

void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::initializeModel() {

    m_alias_mask_type_isSet = false;
    m_alias_mask_type_isValid = false;

    m_conversation_related_to_isSet = false;
    m_conversation_related_to_isValid = false;

    m_conversation_subject_isSet = false;
    m_conversation_subject_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_alias_isSet = false;
    m_email_alias_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::fromJsonObject(QJsonObject json) {

    m_alias_mask_type_isValid = ::OpenAPI::fromJsonValue(m_alias_mask_type, json[QString("aliasMaskType")]);
    m_alias_mask_type_isSet = !json[QString("aliasMaskType")].isNull() && m_alias_mask_type_isValid;

    m_conversation_related_to_isValid = ::OpenAPI::fromJsonValue(m_conversation_related_to, json[QString("conversationRelatedTo")]);
    m_conversation_related_to_isSet = !json[QString("conversationRelatedTo")].isNull() && m_conversation_related_to_isValid;

    m_conversation_subject_isValid = ::OpenAPI::fromJsonValue(m_conversation_subject, json[QString("conversationSubject")]);
    m_conversation_subject_isSet = !json[QString("conversationSubject")].isNull() && m_conversation_subject_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_alias_isValid = ::OpenAPI::fromJsonValue(m_email_alias, json[QString("emailAlias")]);
    m_email_alias_isSet = !json[QString("emailAlias")].isNull() && m_email_alias_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_mask_type_isSet) {
        obj.insert(QString("aliasMaskType"), ::OpenAPI::toJsonValue(m_alias_mask_type));
    }
    if (m_conversation_related_to_isSet) {
        obj.insert(QString("conversationRelatedTo"), ::OpenAPI::toJsonValue(m_conversation_related_to));
    }
    if (m_conversation_subject_isSet) {
        obj.insert(QString("conversationSubject"), ::OpenAPI::toJsonValue(m_conversation_subject));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_email_alias_isSet) {
        obj.insert(QString("emailAlias"), ::OpenAPI::toJsonValue(m_email_alias));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::getAliasMaskType() const {
    return m_alias_mask_type;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::setAliasMaskType(const QString &alias_mask_type) {
    m_alias_mask_type = alias_mask_type;
    m_alias_mask_type_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::is_alias_mask_type_Set() const{
    return m_alias_mask_type_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::is_alias_mask_type_Valid() const{
    return m_alias_mask_type_isValid;
}

QString OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::getConversationRelatedTo() const {
    return m_conversation_related_to;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::setConversationRelatedTo(const QString &conversation_related_to) {
    m_conversation_related_to = conversation_related_to;
    m_conversation_related_to_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::is_conversation_related_to_Set() const{
    return m_conversation_related_to_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::is_conversation_related_to_Valid() const{
    return m_conversation_related_to_isValid;
}

QString OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::getConversationSubject() const {
    return m_conversation_subject;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::setConversationSubject(const QString &conversation_subject) {
    m_conversation_subject = conversation_subject;
    m_conversation_subject_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::is_conversation_subject_Set() const{
    return m_conversation_subject_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::is_conversation_subject_Valid() const{
    return m_conversation_subject_isValid;
}

QString OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::getEmail() const {
    return m_email;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::is_email_Set() const{
    return m_email_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::is_email_Valid() const{
    return m_email_isValid;
}

QString OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::getEmailAlias() const {
    return m_email_alias;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::setEmailAlias(const QString &email_alias) {
    m_email_alias = email_alias;
    m_email_alias_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::is_email_alias_Set() const{
    return m_email_alias_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::is_email_alias_Valid() const{
    return m_email_alias_isValid;
}

QString OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::getName() const {
    return m_name;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::getRole() const {
    return m_role;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::is_role_Set() const{
    return m_role_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::is_role_Valid() const{
    return m_role_isValid;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_mask_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_related_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
