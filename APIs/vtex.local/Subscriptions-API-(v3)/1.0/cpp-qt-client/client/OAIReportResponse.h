/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReportResponse.h
 *
 * 
 */

#ifndef OAIReportResponse_H
#define OAIReportResponse_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReportResponse : public OAIObject {
public:
    OAIReportResponse();
    OAIReportResponse(QString json);
    ~OAIReportResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCanceled() const;
    void setCanceled(const bool &canceled);
    bool is_canceled_Set() const;
    bool is_canceled_Valid() const;

    QDateTime getCompletedDate() const;
    void setCompletedDate(const QDateTime &completed_date);
    bool is_completed_date_Set() const;
    bool is_completed_date_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QDateTime getEnqueueDate() const;
    void setEnqueueDate(const QDateTime &enqueue_date);
    bool is_enqueue_date_Set() const;
    bool is_enqueue_date_Valid() const;

    qint64 getErrorCount() const;
    void setErrorCount(const qint64 &error_count);
    bool is_error_count_Set() const;
    bool is_error_count_Valid() const;

    bool isFinished() const;
    void setFinished(const bool &finished);
    bool is_finished_Set() const;
    bool is_finished_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLastErrorMessage() const;
    void setLastErrorMessage(const QString &last_error_message);
    bool is_last_error_message_Set() const;
    bool is_last_error_message_Valid() const;

    QDateTime getLastUpdateTime() const;
    void setLastUpdateTime(const QDateTime &last_update_time);
    bool is_last_update_time_Set() const;
    bool is_last_update_time_Valid() const;

    QString getLinkToDownload() const;
    void setLinkToDownload(const QString &link_to_download);
    bool is_link_to_download_Set() const;
    bool is_link_to_download_Valid() const;

    QString getOutputType() const;
    void setOutputType(const QString &output_type);
    bool is_output_type_Set() const;
    bool is_output_type_Valid() const;

    qint64 getPercentageProcessed() const;
    void setPercentageProcessed(const qint64 &percentage_processed);
    bool is_percentage_processed_Set() const;
    bool is_percentage_processed_Valid() const;

    qint64 getRecordsProcessed() const;
    void setRecordsProcessed(const qint64 &records_processed);
    bool is_records_processed_Set() const;
    bool is_records_processed_Valid() const;

    qint64 getRecordsSum() const;
    void setRecordsSum(const qint64 &records_sum);
    bool is_records_sum_Set() const;
    bool is_records_sum_Valid() const;

    QDateTime getStartDate() const;
    void setStartDate(const QDateTime &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    QString getStatusMessage() const;
    void setStatusMessage(const QString &status_message);
    bool is_status_message_Set() const;
    bool is_status_message_Valid() const;

    bool isZipped() const;
    void setZipped(const bool &zipped);
    bool is_zipped_Set() const;
    bool is_zipped_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_canceled;
    bool m_canceled_isSet;
    bool m_canceled_isValid;

    QDateTime m_completed_date;
    bool m_completed_date_isSet;
    bool m_completed_date_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QDateTime m_enqueue_date;
    bool m_enqueue_date_isSet;
    bool m_enqueue_date_isValid;

    qint64 m_error_count;
    bool m_error_count_isSet;
    bool m_error_count_isValid;

    bool m_finished;
    bool m_finished_isSet;
    bool m_finished_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_last_error_message;
    bool m_last_error_message_isSet;
    bool m_last_error_message_isValid;

    QDateTime m_last_update_time;
    bool m_last_update_time_isSet;
    bool m_last_update_time_isValid;

    QString m_link_to_download;
    bool m_link_to_download_isSet;
    bool m_link_to_download_isValid;

    QString m_output_type;
    bool m_output_type_isSet;
    bool m_output_type_isValid;

    qint64 m_percentage_processed;
    bool m_percentage_processed_isSet;
    bool m_percentage_processed_isValid;

    qint64 m_records_processed;
    bool m_records_processed_isSet;
    bool m_records_processed_isValid;

    qint64 m_records_sum;
    bool m_records_sum_isSet;
    bool m_records_sum_isValid;

    QDateTime m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    bool m_zipped;
    bool m_zipped_isSet;
    bool m_zipped_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReportResponse)

#endif // OAIReportResponse_H
