/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettings::OAISettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettings::OAISettings() {
    this->initializeModel();
}

OAISettings::~OAISettings() {}

void OAISettings::initializeModel() {

    m_default_sla_isSet = false;
    m_default_sla_isValid = false;

    m_delivery_channels_isSet = false;
    m_delivery_channels_isValid = false;

    m_execution_hour_in_utc_isSet = false;
    m_execution_hour_in_utc_isValid = false;

    m_is_multiple_installments_enabled_on_creation_isSet = false;
    m_is_multiple_installments_enabled_on_creation_isValid = false;

    m_is_multiple_installments_enabled_on_update_isSet = false;
    m_is_multiple_installments_enabled_on_update_isValid = false;

    m_is_using_v3_isSet = false;
    m_is_using_v3_isValid = false;

    m_manual_price_allowed_isSet = false;
    m_manual_price_allowed_isValid = false;

    m_on_migration_process_isSet = false;
    m_on_migration_process_isValid = false;

    m_order_custom_data_app_id_isSet = false;
    m_order_custom_data_app_id_isValid = false;

    m_postpone_expiration_isSet = false;
    m_postpone_expiration_isValid = false;

    m_random_id_generation_isSet = false;
    m_random_id_generation_isValid = false;

    m_sla_option_isSet = false;
    m_sla_option_isValid = false;

    m_use_item_price_from_original_order_isSet = false;
    m_use_item_price_from_original_order_isValid = false;

    m_workflow_version_isSet = false;
    m_workflow_version_isValid = false;
}

void OAISettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettings::fromJsonObject(QJsonObject json) {

    m_default_sla_isValid = ::OpenAPI::fromJsonValue(m_default_sla, json[QString("defaultSla")]);
    m_default_sla_isSet = !json[QString("defaultSla")].isNull() && m_default_sla_isValid;

    m_delivery_channels_isValid = ::OpenAPI::fromJsonValue(m_delivery_channels, json[QString("deliveryChannels")]);
    m_delivery_channels_isSet = !json[QString("deliveryChannels")].isNull() && m_delivery_channels_isValid;

    m_execution_hour_in_utc_isValid = ::OpenAPI::fromJsonValue(m_execution_hour_in_utc, json[QString("executionHourInUtc")]);
    m_execution_hour_in_utc_isSet = !json[QString("executionHourInUtc")].isNull() && m_execution_hour_in_utc_isValid;

    m_is_multiple_installments_enabled_on_creation_isValid = ::OpenAPI::fromJsonValue(m_is_multiple_installments_enabled_on_creation, json[QString("isMultipleInstallmentsEnabledOnCreation")]);
    m_is_multiple_installments_enabled_on_creation_isSet = !json[QString("isMultipleInstallmentsEnabledOnCreation")].isNull() && m_is_multiple_installments_enabled_on_creation_isValid;

    m_is_multiple_installments_enabled_on_update_isValid = ::OpenAPI::fromJsonValue(m_is_multiple_installments_enabled_on_update, json[QString("isMultipleInstallmentsEnabledOnUpdate")]);
    m_is_multiple_installments_enabled_on_update_isSet = !json[QString("isMultipleInstallmentsEnabledOnUpdate")].isNull() && m_is_multiple_installments_enabled_on_update_isValid;

    m_is_using_v3_isValid = ::OpenAPI::fromJsonValue(m_is_using_v3, json[QString("isUsingV3")]);
    m_is_using_v3_isSet = !json[QString("isUsingV3")].isNull() && m_is_using_v3_isValid;

    m_manual_price_allowed_isValid = ::OpenAPI::fromJsonValue(m_manual_price_allowed, json[QString("manualPriceAllowed")]);
    m_manual_price_allowed_isSet = !json[QString("manualPriceAllowed")].isNull() && m_manual_price_allowed_isValid;

    m_on_migration_process_isValid = ::OpenAPI::fromJsonValue(m_on_migration_process, json[QString("onMigrationProcess")]);
    m_on_migration_process_isSet = !json[QString("onMigrationProcess")].isNull() && m_on_migration_process_isValid;

    m_order_custom_data_app_id_isValid = ::OpenAPI::fromJsonValue(m_order_custom_data_app_id, json[QString("orderCustomDataAppId")]);
    m_order_custom_data_app_id_isSet = !json[QString("orderCustomDataAppId")].isNull() && m_order_custom_data_app_id_isValid;

    m_postpone_expiration_isValid = ::OpenAPI::fromJsonValue(m_postpone_expiration, json[QString("postponeExpiration")]);
    m_postpone_expiration_isSet = !json[QString("postponeExpiration")].isNull() && m_postpone_expiration_isValid;

    m_random_id_generation_isValid = ::OpenAPI::fromJsonValue(m_random_id_generation, json[QString("randomIdGeneration")]);
    m_random_id_generation_isSet = !json[QString("randomIdGeneration")].isNull() && m_random_id_generation_isValid;

    m_sla_option_isValid = ::OpenAPI::fromJsonValue(m_sla_option, json[QString("slaOption")]);
    m_sla_option_isSet = !json[QString("slaOption")].isNull() && m_sla_option_isValid;

    m_use_item_price_from_original_order_isValid = ::OpenAPI::fromJsonValue(m_use_item_price_from_original_order, json[QString("useItemPriceFromOriginalOrder")]);
    m_use_item_price_from_original_order_isSet = !json[QString("useItemPriceFromOriginalOrder")].isNull() && m_use_item_price_from_original_order_isValid;

    m_workflow_version_isValid = ::OpenAPI::fromJsonValue(m_workflow_version, json[QString("workflowVersion")]);
    m_workflow_version_isSet = !json[QString("workflowVersion")].isNull() && m_workflow_version_isValid;
}

QString OAISettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettings::asJsonObject() const {
    QJsonObject obj;
    if (m_default_sla_isSet) {
        obj.insert(QString("defaultSla"), ::OpenAPI::toJsonValue(m_default_sla));
    }
    if (m_delivery_channels.size() > 0) {
        obj.insert(QString("deliveryChannels"), ::OpenAPI::toJsonValue(m_delivery_channels));
    }
    if (m_execution_hour_in_utc_isSet) {
        obj.insert(QString("executionHourInUtc"), ::OpenAPI::toJsonValue(m_execution_hour_in_utc));
    }
    if (m_is_multiple_installments_enabled_on_creation_isSet) {
        obj.insert(QString("isMultipleInstallmentsEnabledOnCreation"), ::OpenAPI::toJsonValue(m_is_multiple_installments_enabled_on_creation));
    }
    if (m_is_multiple_installments_enabled_on_update_isSet) {
        obj.insert(QString("isMultipleInstallmentsEnabledOnUpdate"), ::OpenAPI::toJsonValue(m_is_multiple_installments_enabled_on_update));
    }
    if (m_is_using_v3_isSet) {
        obj.insert(QString("isUsingV3"), ::OpenAPI::toJsonValue(m_is_using_v3));
    }
    if (m_manual_price_allowed_isSet) {
        obj.insert(QString("manualPriceAllowed"), ::OpenAPI::toJsonValue(m_manual_price_allowed));
    }
    if (m_on_migration_process_isSet) {
        obj.insert(QString("onMigrationProcess"), ::OpenAPI::toJsonValue(m_on_migration_process));
    }
    if (m_order_custom_data_app_id_isSet) {
        obj.insert(QString("orderCustomDataAppId"), ::OpenAPI::toJsonValue(m_order_custom_data_app_id));
    }
    if (m_postpone_expiration_isSet) {
        obj.insert(QString("postponeExpiration"), ::OpenAPI::toJsonValue(m_postpone_expiration));
    }
    if (m_random_id_generation_isSet) {
        obj.insert(QString("randomIdGeneration"), ::OpenAPI::toJsonValue(m_random_id_generation));
    }
    if (m_sla_option_isSet) {
        obj.insert(QString("slaOption"), ::OpenAPI::toJsonValue(m_sla_option));
    }
    if (m_use_item_price_from_original_order_isSet) {
        obj.insert(QString("useItemPriceFromOriginalOrder"), ::OpenAPI::toJsonValue(m_use_item_price_from_original_order));
    }
    if (m_workflow_version_isSet) {
        obj.insert(QString("workflowVersion"), ::OpenAPI::toJsonValue(m_workflow_version));
    }
    return obj;
}

QString OAISettings::getDefaultSla() const {
    return m_default_sla;
}
void OAISettings::setDefaultSla(const QString &default_sla) {
    m_default_sla = default_sla;
    m_default_sla_isSet = true;
}

bool OAISettings::is_default_sla_Set() const{
    return m_default_sla_isSet;
}

bool OAISettings::is_default_sla_Valid() const{
    return m_default_sla_isValid;
}

QList<QString> OAISettings::getDeliveryChannels() const {
    return m_delivery_channels;
}
void OAISettings::setDeliveryChannels(const QList<QString> &delivery_channels) {
    m_delivery_channels = delivery_channels;
    m_delivery_channels_isSet = true;
}

bool OAISettings::is_delivery_channels_Set() const{
    return m_delivery_channels_isSet;
}

bool OAISettings::is_delivery_channels_Valid() const{
    return m_delivery_channels_isValid;
}

qint32 OAISettings::getExecutionHourInUtc() const {
    return m_execution_hour_in_utc;
}
void OAISettings::setExecutionHourInUtc(const qint32 &execution_hour_in_utc) {
    m_execution_hour_in_utc = execution_hour_in_utc;
    m_execution_hour_in_utc_isSet = true;
}

bool OAISettings::is_execution_hour_in_utc_Set() const{
    return m_execution_hour_in_utc_isSet;
}

bool OAISettings::is_execution_hour_in_utc_Valid() const{
    return m_execution_hour_in_utc_isValid;
}

bool OAISettings::isIsMultipleInstallmentsEnabledOnCreation() const {
    return m_is_multiple_installments_enabled_on_creation;
}
void OAISettings::setIsMultipleInstallmentsEnabledOnCreation(const bool &is_multiple_installments_enabled_on_creation) {
    m_is_multiple_installments_enabled_on_creation = is_multiple_installments_enabled_on_creation;
    m_is_multiple_installments_enabled_on_creation_isSet = true;
}

bool OAISettings::is_is_multiple_installments_enabled_on_creation_Set() const{
    return m_is_multiple_installments_enabled_on_creation_isSet;
}

bool OAISettings::is_is_multiple_installments_enabled_on_creation_Valid() const{
    return m_is_multiple_installments_enabled_on_creation_isValid;
}

bool OAISettings::isIsMultipleInstallmentsEnabledOnUpdate() const {
    return m_is_multiple_installments_enabled_on_update;
}
void OAISettings::setIsMultipleInstallmentsEnabledOnUpdate(const bool &is_multiple_installments_enabled_on_update) {
    m_is_multiple_installments_enabled_on_update = is_multiple_installments_enabled_on_update;
    m_is_multiple_installments_enabled_on_update_isSet = true;
}

bool OAISettings::is_is_multiple_installments_enabled_on_update_Set() const{
    return m_is_multiple_installments_enabled_on_update_isSet;
}

bool OAISettings::is_is_multiple_installments_enabled_on_update_Valid() const{
    return m_is_multiple_installments_enabled_on_update_isValid;
}

bool OAISettings::isIsUsingV3() const {
    return m_is_using_v3;
}
void OAISettings::setIsUsingV3(const bool &is_using_v3) {
    m_is_using_v3 = is_using_v3;
    m_is_using_v3_isSet = true;
}

bool OAISettings::is_is_using_v3_Set() const{
    return m_is_using_v3_isSet;
}

bool OAISettings::is_is_using_v3_Valid() const{
    return m_is_using_v3_isValid;
}

bool OAISettings::isManualPriceAllowed() const {
    return m_manual_price_allowed;
}
void OAISettings::setManualPriceAllowed(const bool &manual_price_allowed) {
    m_manual_price_allowed = manual_price_allowed;
    m_manual_price_allowed_isSet = true;
}

bool OAISettings::is_manual_price_allowed_Set() const{
    return m_manual_price_allowed_isSet;
}

bool OAISettings::is_manual_price_allowed_Valid() const{
    return m_manual_price_allowed_isValid;
}

bool OAISettings::isOnMigrationProcess() const {
    return m_on_migration_process;
}
void OAISettings::setOnMigrationProcess(const bool &on_migration_process) {
    m_on_migration_process = on_migration_process;
    m_on_migration_process_isSet = true;
}

bool OAISettings::is_on_migration_process_Set() const{
    return m_on_migration_process_isSet;
}

bool OAISettings::is_on_migration_process_Valid() const{
    return m_on_migration_process_isValid;
}

QString OAISettings::getOrderCustomDataAppId() const {
    return m_order_custom_data_app_id;
}
void OAISettings::setOrderCustomDataAppId(const QString &order_custom_data_app_id) {
    m_order_custom_data_app_id = order_custom_data_app_id;
    m_order_custom_data_app_id_isSet = true;
}

bool OAISettings::is_order_custom_data_app_id_Set() const{
    return m_order_custom_data_app_id_isSet;
}

bool OAISettings::is_order_custom_data_app_id_Valid() const{
    return m_order_custom_data_app_id_isValid;
}

bool OAISettings::isPostponeExpiration() const {
    return m_postpone_expiration;
}
void OAISettings::setPostponeExpiration(const bool &postpone_expiration) {
    m_postpone_expiration = postpone_expiration;
    m_postpone_expiration_isSet = true;
}

bool OAISettings::is_postpone_expiration_Set() const{
    return m_postpone_expiration_isSet;
}

bool OAISettings::is_postpone_expiration_Valid() const{
    return m_postpone_expiration_isValid;
}

bool OAISettings::isRandomIdGeneration() const {
    return m_random_id_generation;
}
void OAISettings::setRandomIdGeneration(const bool &random_id_generation) {
    m_random_id_generation = random_id_generation;
    m_random_id_generation_isSet = true;
}

bool OAISettings::is_random_id_generation_Set() const{
    return m_random_id_generation_isSet;
}

bool OAISettings::is_random_id_generation_Valid() const{
    return m_random_id_generation_isValid;
}

QString OAISettings::getSlaOption() const {
    return m_sla_option;
}
void OAISettings::setSlaOption(const QString &sla_option) {
    m_sla_option = sla_option;
    m_sla_option_isSet = true;
}

bool OAISettings::is_sla_option_Set() const{
    return m_sla_option_isSet;
}

bool OAISettings::is_sla_option_Valid() const{
    return m_sla_option_isValid;
}

bool OAISettings::isUseItemPriceFromOriginalOrder() const {
    return m_use_item_price_from_original_order;
}
void OAISettings::setUseItemPriceFromOriginalOrder(const bool &use_item_price_from_original_order) {
    m_use_item_price_from_original_order = use_item_price_from_original_order;
    m_use_item_price_from_original_order_isSet = true;
}

bool OAISettings::is_use_item_price_from_original_order_Set() const{
    return m_use_item_price_from_original_order_isSet;
}

bool OAISettings::is_use_item_price_from_original_order_Valid() const{
    return m_use_item_price_from_original_order_isValid;
}

QString OAISettings::getWorkflowVersion() const {
    return m_workflow_version;
}
void OAISettings::setWorkflowVersion(const QString &workflow_version) {
    m_workflow_version = workflow_version;
    m_workflow_version_isSet = true;
}

bool OAISettings::is_workflow_version_Set() const{
    return m_workflow_version_isSet;
}

bool OAISettings::is_workflow_version_Valid() const{
    return m_workflow_version_isValid;
}

bool OAISettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_sla_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_hour_in_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_multiple_installments_enabled_on_creation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_multiple_installments_enabled_on_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_using_v3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_price_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_migration_process_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_custom_data_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postpone_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_random_id_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sla_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_item_price_from_original_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_sla_isValid && m_delivery_channels_isValid && m_execution_hour_in_utc_isValid && m_is_multiple_installments_enabled_on_creation_isValid && m_is_multiple_installments_enabled_on_update_isValid && m_is_using_v3_isValid && m_manual_price_allowed_isValid && m_on_migration_process_isValid && m_order_custom_data_app_id_isValid && m_postpone_expiration_isValid && m_random_id_generation_isValid && m_sla_option_isValid && m_use_item_price_from_original_order_isValid && m_workflow_version_isValid && true;
}

} // namespace OpenAPI
