/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISettings.h
 *
 * Subscriptions settings
 */

#ifndef OAISettings_H
#define OAISettings_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISettings : public OAIObject {
public:
    OAISettings();
    OAISettings(QString json);
    ~OAISettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDefaultSla() const;
    void setDefaultSla(const QString &default_sla);
    bool is_default_sla_Set() const;
    bool is_default_sla_Valid() const;

    QList<QString> getDeliveryChannels() const;
    void setDeliveryChannels(const QList<QString> &delivery_channels);
    bool is_delivery_channels_Set() const;
    bool is_delivery_channels_Valid() const;

    qint32 getExecutionHourInUtc() const;
    void setExecutionHourInUtc(const qint32 &execution_hour_in_utc);
    bool is_execution_hour_in_utc_Set() const;
    bool is_execution_hour_in_utc_Valid() const;

    bool isIsMultipleInstallmentsEnabledOnCreation() const;
    void setIsMultipleInstallmentsEnabledOnCreation(const bool &is_multiple_installments_enabled_on_creation);
    bool is_is_multiple_installments_enabled_on_creation_Set() const;
    bool is_is_multiple_installments_enabled_on_creation_Valid() const;

    bool isIsMultipleInstallmentsEnabledOnUpdate() const;
    void setIsMultipleInstallmentsEnabledOnUpdate(const bool &is_multiple_installments_enabled_on_update);
    bool is_is_multiple_installments_enabled_on_update_Set() const;
    bool is_is_multiple_installments_enabled_on_update_Valid() const;

    bool isIsUsingV3() const;
    void setIsUsingV3(const bool &is_using_v3);
    bool is_is_using_v3_Set() const;
    bool is_is_using_v3_Valid() const;

    bool isManualPriceAllowed() const;
    void setManualPriceAllowed(const bool &manual_price_allowed);
    bool is_manual_price_allowed_Set() const;
    bool is_manual_price_allowed_Valid() const;

    bool isOnMigrationProcess() const;
    void setOnMigrationProcess(const bool &on_migration_process);
    bool is_on_migration_process_Set() const;
    bool is_on_migration_process_Valid() const;

    QString getOrderCustomDataAppId() const;
    void setOrderCustomDataAppId(const QString &order_custom_data_app_id);
    bool is_order_custom_data_app_id_Set() const;
    bool is_order_custom_data_app_id_Valid() const;

    bool isPostponeExpiration() const;
    void setPostponeExpiration(const bool &postpone_expiration);
    bool is_postpone_expiration_Set() const;
    bool is_postpone_expiration_Valid() const;

    bool isRandomIdGeneration() const;
    void setRandomIdGeneration(const bool &random_id_generation);
    bool is_random_id_generation_Set() const;
    bool is_random_id_generation_Valid() const;

    QString getSlaOption() const;
    void setSlaOption(const QString &sla_option);
    bool is_sla_option_Set() const;
    bool is_sla_option_Valid() const;

    bool isUseItemPriceFromOriginalOrder() const;
    void setUseItemPriceFromOriginalOrder(const bool &use_item_price_from_original_order);
    bool is_use_item_price_from_original_order_Set() const;
    bool is_use_item_price_from_original_order_Valid() const;

    QString getWorkflowVersion() const;
    void setWorkflowVersion(const QString &workflow_version);
    bool is_workflow_version_Set() const;
    bool is_workflow_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_default_sla;
    bool m_default_sla_isSet;
    bool m_default_sla_isValid;

    QList<QString> m_delivery_channels;
    bool m_delivery_channels_isSet;
    bool m_delivery_channels_isValid;

    qint32 m_execution_hour_in_utc;
    bool m_execution_hour_in_utc_isSet;
    bool m_execution_hour_in_utc_isValid;

    bool m_is_multiple_installments_enabled_on_creation;
    bool m_is_multiple_installments_enabled_on_creation_isSet;
    bool m_is_multiple_installments_enabled_on_creation_isValid;

    bool m_is_multiple_installments_enabled_on_update;
    bool m_is_multiple_installments_enabled_on_update_isSet;
    bool m_is_multiple_installments_enabled_on_update_isValid;

    bool m_is_using_v3;
    bool m_is_using_v3_isSet;
    bool m_is_using_v3_isValid;

    bool m_manual_price_allowed;
    bool m_manual_price_allowed_isSet;
    bool m_manual_price_allowed_isValid;

    bool m_on_migration_process;
    bool m_on_migration_process_isSet;
    bool m_on_migration_process_isValid;

    QString m_order_custom_data_app_id;
    bool m_order_custom_data_app_id_isSet;
    bool m_order_custom_data_app_id_isValid;

    bool m_postpone_expiration;
    bool m_postpone_expiration_isSet;
    bool m_postpone_expiration_isValid;

    bool m_random_id_generation;
    bool m_random_id_generation_isSet;
    bool m_random_id_generation_isValid;

    QString m_sla_option;
    bool m_sla_option_isSet;
    bool m_sla_option_isValid;

    bool m_use_item_price_from_original_order;
    bool m_use_item_price_from_original_order_isSet;
    bool m_use_item_price_from_original_order_isValid;

    QString m_workflow_version;
    bool m_workflow_version_isSet;
    bool m_workflow_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISettings)

#endif // OAISettings_H
