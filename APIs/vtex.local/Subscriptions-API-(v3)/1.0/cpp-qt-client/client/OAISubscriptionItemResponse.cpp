/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionItemResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionItemResponse::OAISubscriptionItemResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionItemResponse::OAISubscriptionItemResponse() {
    this->initializeModel();
}

OAISubscriptionItemResponse::~OAISubscriptionItemResponse() {}

void OAISubscriptionItemResponse::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_skipped_isSet = false;
    m_is_skipped_isValid = false;

    m_manual_price_isSet = false;
    m_manual_price_isValid = false;

    m_original_order_id_isSet = false;
    m_original_order_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_sku_id_isSet = false;
    m_sku_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAISubscriptionItemResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionItemResponse::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_skipped_isValid = ::OpenAPI::fromJsonValue(m_is_skipped, json[QString("isSkipped")]);
    m_is_skipped_isSet = !json[QString("isSkipped")].isNull() && m_is_skipped_isValid;

    m_manual_price_isValid = ::OpenAPI::fromJsonValue(m_manual_price, json[QString("manualPrice")]);
    m_manual_price_isSet = !json[QString("manualPrice")].isNull() && m_manual_price_isValid;

    m_original_order_id_isValid = ::OpenAPI::fromJsonValue(m_original_order_id, json[QString("originalOrderId")]);
    m_original_order_id_isSet = !json[QString("originalOrderId")].isNull() && m_original_order_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_sku_id_isValid = ::OpenAPI::fromJsonValue(m_sku_id, json[QString("skuId")]);
    m_sku_id_isSet = !json[QString("skuId")].isNull() && m_sku_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAISubscriptionItemResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionItemResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_skipped_isSet) {
        obj.insert(QString("isSkipped"), ::OpenAPI::toJsonValue(m_is_skipped));
    }
    if (m_manual_price_isSet) {
        obj.insert(QString("manualPrice"), ::OpenAPI::toJsonValue(m_manual_price));
    }
    if (m_original_order_id_isSet) {
        obj.insert(QString("originalOrderId"), ::OpenAPI::toJsonValue(m_original_order_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_sku_id_isSet) {
        obj.insert(QString("skuId"), ::OpenAPI::toJsonValue(m_sku_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAISubscriptionItemResponse::getId() const {
    return m_id;
}
void OAISubscriptionItemResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscriptionItemResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscriptionItemResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISubscriptionItemResponse::isIsSkipped() const {
    return m_is_skipped;
}
void OAISubscriptionItemResponse::setIsSkipped(const bool &is_skipped) {
    m_is_skipped = is_skipped;
    m_is_skipped_isSet = true;
}

bool OAISubscriptionItemResponse::is_is_skipped_Set() const{
    return m_is_skipped_isSet;
}

bool OAISubscriptionItemResponse::is_is_skipped_Valid() const{
    return m_is_skipped_isValid;
}

qint32 OAISubscriptionItemResponse::getManualPrice() const {
    return m_manual_price;
}
void OAISubscriptionItemResponse::setManualPrice(const qint32 &manual_price) {
    m_manual_price = manual_price;
    m_manual_price_isSet = true;
}

bool OAISubscriptionItemResponse::is_manual_price_Set() const{
    return m_manual_price_isSet;
}

bool OAISubscriptionItemResponse::is_manual_price_Valid() const{
    return m_manual_price_isValid;
}

QString OAISubscriptionItemResponse::getOriginalOrderId() const {
    return m_original_order_id;
}
void OAISubscriptionItemResponse::setOriginalOrderId(const QString &original_order_id) {
    m_original_order_id = original_order_id;
    m_original_order_id_isSet = true;
}

bool OAISubscriptionItemResponse::is_original_order_id_Set() const{
    return m_original_order_id_isSet;
}

bool OAISubscriptionItemResponse::is_original_order_id_Valid() const{
    return m_original_order_id_isValid;
}

qint32 OAISubscriptionItemResponse::getQuantity() const {
    return m_quantity;
}
void OAISubscriptionItemResponse::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAISubscriptionItemResponse::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAISubscriptionItemResponse::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAISubscriptionItemResponse::getSkuId() const {
    return m_sku_id;
}
void OAISubscriptionItemResponse::setSkuId(const QString &sku_id) {
    m_sku_id = sku_id;
    m_sku_id_isSet = true;
}

bool OAISubscriptionItemResponse::is_sku_id_Set() const{
    return m_sku_id_isSet;
}

bool OAISubscriptionItemResponse::is_sku_id_Valid() const{
    return m_sku_id_isValid;
}

QString OAISubscriptionItemResponse::getStatus() const {
    return m_status;
}
void OAISubscriptionItemResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscriptionItemResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscriptionItemResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAISubscriptionItemResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_skipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionItemResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_is_skipped_isValid && m_quantity_isValid && m_sku_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
