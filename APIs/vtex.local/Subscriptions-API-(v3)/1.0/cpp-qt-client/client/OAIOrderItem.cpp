/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderItem::OAIOrderItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderItem::OAIOrderItem() {
    this->initializeModel();
}

OAIOrderItem::~OAIOrderItem() {}

void OAIOrderItem::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_gift_isSet = false;
    m_is_gift_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_tags_isSet = false;
    m_price_tags_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_seller_isSet = false;
    m_seller_isValid = false;

    m_selling_price_isSet = false;
    m_selling_price_isValid = false;

    m_unit_multiplier_isSet = false;
    m_unit_multiplier_isValid = false;
}

void OAIOrderItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderItem::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_gift_isValid = ::OpenAPI::fromJsonValue(m_is_gift, json[QString("isGift")]);
    m_is_gift_isSet = !json[QString("isGift")].isNull() && m_is_gift_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_tags_isValid = ::OpenAPI::fromJsonValue(m_price_tags, json[QString("priceTags")]);
    m_price_tags_isSet = !json[QString("priceTags")].isNull() && m_price_tags_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_seller_isValid = ::OpenAPI::fromJsonValue(m_seller, json[QString("seller")]);
    m_seller_isSet = !json[QString("seller")].isNull() && m_seller_isValid;

    m_selling_price_isValid = ::OpenAPI::fromJsonValue(m_selling_price, json[QString("sellingPrice")]);
    m_selling_price_isSet = !json[QString("sellingPrice")].isNull() && m_selling_price_isValid;

    m_unit_multiplier_isValid = ::OpenAPI::fromJsonValue(m_unit_multiplier, json[QString("unitMultiplier")]);
    m_unit_multiplier_isSet = !json[QString("unitMultiplier")].isNull() && m_unit_multiplier_isValid;
}

QString OAIOrderItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderItem::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_gift_isSet) {
        obj.insert(QString("isGift"), ::OpenAPI::toJsonValue(m_is_gift));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_tags.size() > 0) {
        obj.insert(QString("priceTags"), ::OpenAPI::toJsonValue(m_price_tags));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_seller_isSet) {
        obj.insert(QString("seller"), ::OpenAPI::toJsonValue(m_seller));
    }
    if (m_selling_price_isSet) {
        obj.insert(QString("sellingPrice"), ::OpenAPI::toJsonValue(m_selling_price));
    }
    if (m_unit_multiplier_isSet) {
        obj.insert(QString("unitMultiplier"), ::OpenAPI::toJsonValue(m_unit_multiplier));
    }
    return obj;
}

QList<OAIItemAttachment> OAIOrderItem::getAttachments() const {
    return m_attachments;
}
void OAIOrderItem::setAttachments(const QList<OAIItemAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIOrderItem::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIOrderItem::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIOrderItem::getId() const {
    return m_id;
}
void OAIOrderItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrderItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderItem::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIOrderItem::isIsGift() const {
    return m_is_gift;
}
void OAIOrderItem::setIsGift(const bool &is_gift) {
    m_is_gift = is_gift;
    m_is_gift_isSet = true;
}

bool OAIOrderItem::is_is_gift_Set() const{
    return m_is_gift_isSet;
}

bool OAIOrderItem::is_is_gift_Valid() const{
    return m_is_gift_isValid;
}

QString OAIOrderItem::getName() const {
    return m_name;
}
void OAIOrderItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrderItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrderItem::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIOrderItem::getPrice() const {
    return m_price;
}
void OAIOrderItem::setPrice(const qint64 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIOrderItem::is_price_Set() const{
    return m_price_isSet;
}

bool OAIOrderItem::is_price_Valid() const{
    return m_price_isValid;
}

QList<OAIPriceTag> OAIOrderItem::getPriceTags() const {
    return m_price_tags;
}
void OAIOrderItem::setPriceTags(const QList<OAIPriceTag> &price_tags) {
    m_price_tags = price_tags;
    m_price_tags_isSet = true;
}

bool OAIOrderItem::is_price_tags_Set() const{
    return m_price_tags_isSet;
}

bool OAIOrderItem::is_price_tags_Valid() const{
    return m_price_tags_isValid;
}

qint32 OAIOrderItem::getQuantity() const {
    return m_quantity;
}
void OAIOrderItem::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIOrderItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIOrderItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIOrderItem::getSeller() const {
    return m_seller;
}
void OAIOrderItem::setSeller(const QString &seller) {
    m_seller = seller;
    m_seller_isSet = true;
}

bool OAIOrderItem::is_seller_Set() const{
    return m_seller_isSet;
}

bool OAIOrderItem::is_seller_Valid() const{
    return m_seller_isValid;
}

qint64 OAIOrderItem::getSellingPrice() const {
    return m_selling_price;
}
void OAIOrderItem::setSellingPrice(const qint64 &selling_price) {
    m_selling_price = selling_price;
    m_selling_price_isSet = true;
}

bool OAIOrderItem::is_selling_price_Set() const{
    return m_selling_price_isSet;
}

bool OAIOrderItem::is_selling_price_Valid() const{
    return m_selling_price_isValid;
}

double OAIOrderItem::getUnitMultiplier() const {
    return m_unit_multiplier;
}
void OAIOrderItem::setUnitMultiplier(const double &unit_multiplier) {
    m_unit_multiplier = unit_multiplier;
    m_unit_multiplier_isSet = true;
}

bool OAIOrderItem::is_unit_multiplier_Set() const{
    return m_unit_multiplier_isSet;
}

bool OAIOrderItem::is_unit_multiplier_Valid() const{
    return m_unit_multiplier_isValid;
}

bool OAIOrderItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_gift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selling_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
