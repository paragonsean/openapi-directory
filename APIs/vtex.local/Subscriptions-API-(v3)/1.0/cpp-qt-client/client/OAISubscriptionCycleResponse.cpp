/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionCycleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionCycleResponse::OAISubscriptionCycleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionCycleResponse::OAISubscriptionCycleResponse() {
    this->initializeModel();
}

OAISubscriptionCycleResponse::~OAISubscriptionCycleResponse() {}

void OAISubscriptionCycleResponse::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_customer_email_isSet = false;
    m_customer_email_isValid = false;

    m_cycle_count_isSet = false;
    m_cycle_count_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_in_retry_isSet = false;
    m_is_in_retry_isValid = false;

    m_last_update_isSet = false;
    m_last_update_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_order_info_isSet = false;
    m_order_info_isValid = false;

    m_simulation_items_isSet = false;
    m_simulation_items_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;
}

void OAISubscriptionCycleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionCycleResponse::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_customer_email_isValid = ::OpenAPI::fromJsonValue(m_customer_email, json[QString("customerEmail")]);
    m_customer_email_isSet = !json[QString("customerEmail")].isNull() && m_customer_email_isValid;

    m_cycle_count_isValid = ::OpenAPI::fromJsonValue(m_cycle_count, json[QString("cycleCount")]);
    m_cycle_count_isSet = !json[QString("cycleCount")].isNull() && m_cycle_count_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_in_retry_isValid = ::OpenAPI::fromJsonValue(m_is_in_retry, json[QString("isInRetry")]);
    m_is_in_retry_isSet = !json[QString("isInRetry")].isNull() && m_is_in_retry_isValid;

    m_last_update_isValid = ::OpenAPI::fromJsonValue(m_last_update, json[QString("lastUpdate")]);
    m_last_update_isSet = !json[QString("lastUpdate")].isNull() && m_last_update_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_order_info_isValid = ::OpenAPI::fromJsonValue(m_order_info, json[QString("orderInfo")]);
    m_order_info_isSet = !json[QString("orderInfo")].isNull() && m_order_info_isValid;

    m_simulation_items_isValid = ::OpenAPI::fromJsonValue(m_simulation_items, json[QString("simulationItems")]);
    m_simulation_items_isSet = !json[QString("simulationItems")].isNull() && m_simulation_items_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;
}

QString OAISubscriptionCycleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionCycleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_customer_email_isSet) {
        obj.insert(QString("customerEmail"), ::OpenAPI::toJsonValue(m_customer_email));
    }
    if (m_cycle_count_isSet) {
        obj.insert(QString("cycleCount"), ::OpenAPI::toJsonValue(m_cycle_count));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_in_retry_isSet) {
        obj.insert(QString("isInRetry"), ::OpenAPI::toJsonValue(m_is_in_retry));
    }
    if (m_last_update_isSet) {
        obj.insert(QString("lastUpdate"), ::OpenAPI::toJsonValue(m_last_update));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_order_info.isSet()) {
        obj.insert(QString("orderInfo"), ::OpenAPI::toJsonValue(m_order_info));
    }
    if (m_simulation_items.size() > 0) {
        obj.insert(QString("simulationItems"), ::OpenAPI::toJsonValue(m_simulation_items));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    return obj;
}

OAISubscriptionCycleContext OAISubscriptionCycleResponse::getContext() const {
    return m_context;
}
void OAISubscriptionCycleResponse::setContext(const OAISubscriptionCycleContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAISubscriptionCycleResponse::is_context_Set() const{
    return m_context_isSet;
}

bool OAISubscriptionCycleResponse::is_context_Valid() const{
    return m_context_isValid;
}

QString OAISubscriptionCycleResponse::getCustomerEmail() const {
    return m_customer_email;
}
void OAISubscriptionCycleResponse::setCustomerEmail(const QString &customer_email) {
    m_customer_email = customer_email;
    m_customer_email_isSet = true;
}

bool OAISubscriptionCycleResponse::is_customer_email_Set() const{
    return m_customer_email_isSet;
}

bool OAISubscriptionCycleResponse::is_customer_email_Valid() const{
    return m_customer_email_isValid;
}

qint32 OAISubscriptionCycleResponse::getCycleCount() const {
    return m_cycle_count;
}
void OAISubscriptionCycleResponse::setCycleCount(const qint32 &cycle_count) {
    m_cycle_count = cycle_count;
    m_cycle_count_isSet = true;
}

bool OAISubscriptionCycleResponse::is_cycle_count_Set() const{
    return m_cycle_count_isSet;
}

bool OAISubscriptionCycleResponse::is_cycle_count_Valid() const{
    return m_cycle_count_isValid;
}

QDateTime OAISubscriptionCycleResponse::getDate() const {
    return m_date;
}
void OAISubscriptionCycleResponse::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISubscriptionCycleResponse::is_date_Set() const{
    return m_date_isSet;
}

bool OAISubscriptionCycleResponse::is_date_Valid() const{
    return m_date_isValid;
}

QString OAISubscriptionCycleResponse::getId() const {
    return m_id;
}
void OAISubscriptionCycleResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscriptionCycleResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscriptionCycleResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISubscriptionCycleResponse::isIsInRetry() const {
    return m_is_in_retry;
}
void OAISubscriptionCycleResponse::setIsInRetry(const bool &is_in_retry) {
    m_is_in_retry = is_in_retry;
    m_is_in_retry_isSet = true;
}

bool OAISubscriptionCycleResponse::is_is_in_retry_Set() const{
    return m_is_in_retry_isSet;
}

bool OAISubscriptionCycleResponse::is_is_in_retry_Valid() const{
    return m_is_in_retry_isValid;
}

QDateTime OAISubscriptionCycleResponse::getLastUpdate() const {
    return m_last_update;
}
void OAISubscriptionCycleResponse::setLastUpdate(const QDateTime &last_update) {
    m_last_update = last_update;
    m_last_update_isSet = true;
}

bool OAISubscriptionCycleResponse::is_last_update_Set() const{
    return m_last_update_isSet;
}

bool OAISubscriptionCycleResponse::is_last_update_Valid() const{
    return m_last_update_isValid;
}

QString OAISubscriptionCycleResponse::getMessage() const {
    return m_message;
}
void OAISubscriptionCycleResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAISubscriptionCycleResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAISubscriptionCycleResponse::is_message_Valid() const{
    return m_message_isValid;
}

OAISubscriptionCycleOrderInfo OAISubscriptionCycleResponse::getOrderInfo() const {
    return m_order_info;
}
void OAISubscriptionCycleResponse::setOrderInfo(const OAISubscriptionCycleOrderInfo &order_info) {
    m_order_info = order_info;
    m_order_info_isSet = true;
}

bool OAISubscriptionCycleResponse::is_order_info_Set() const{
    return m_order_info_isSet;
}

bool OAISubscriptionCycleResponse::is_order_info_Valid() const{
    return m_order_info_isValid;
}

QList<OAISimulationItemResult> OAISubscriptionCycleResponse::getSimulationItems() const {
    return m_simulation_items;
}
void OAISubscriptionCycleResponse::setSimulationItems(const QList<OAISimulationItemResult> &simulation_items) {
    m_simulation_items = simulation_items;
    m_simulation_items_isSet = true;
}

bool OAISubscriptionCycleResponse::is_simulation_items_Set() const{
    return m_simulation_items_isSet;
}

bool OAISubscriptionCycleResponse::is_simulation_items_Valid() const{
    return m_simulation_items_isValid;
}

QString OAISubscriptionCycleResponse::getStatus() const {
    return m_status;
}
void OAISubscriptionCycleResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscriptionCycleResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscriptionCycleResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISubscriptionCycleResponse::getSubscriptionId() const {
    return m_subscription_id;
}
void OAISubscriptionCycleResponse::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAISubscriptionCycleResponse::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAISubscriptionCycleResponse::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAISubscriptionCycleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cycle_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_retry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulation_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionCycleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
