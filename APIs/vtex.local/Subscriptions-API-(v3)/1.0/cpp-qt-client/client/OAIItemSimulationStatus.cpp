/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemSimulationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemSimulationStatus::OAIItemSimulationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemSimulationStatus::OAIItemSimulationStatus() {
    this->initializeModel();
}

OAIItemSimulationStatus::~OAIItemSimulationStatus() {}

void OAIItemSimulationStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIItemSimulationStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIItemSimulationStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare(QString::number(0), Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemSimulationStatus::_0;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(1), Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemSimulationStatus::_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(2), Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemSimulationStatus::_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(3), Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemSimulationStatus::_3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(4), Qt::CaseInsensitive) == 0) {
        m_value = eOAIItemSimulationStatus::_4;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIItemSimulationStatus::fromJsonValue(QJsonValue json) {
m_value = static_cast<eOAIItemSimulationStatus>(json.toInt());
}

QString OAIItemSimulationStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIItemSimulationStatus::_0:
            val = QString::number(0);
            break;
        case eOAIItemSimulationStatus::_1:
            val = QString::number(1);
            break;
        case eOAIItemSimulationStatus::_2:
            val = QString::number(2);
            break;
        case eOAIItemSimulationStatus::_3:
            val = QString::number(3);
            break;
        case eOAIItemSimulationStatus::_4:
            val = QString::number(4);
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIItemSimulationStatus::asJsonValue() const {
    
    return QJsonValue(static_cast<int>(m_value));
}


OAIItemSimulationStatus::eOAIItemSimulationStatus OAIItemSimulationStatus::getValue() const {
    return m_value;
}

void OAIItemSimulationStatus::setValue(const OAIItemSimulationStatus::eOAIItemSimulationStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIItemSimulationStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIItemSimulationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
