/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlanThinRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlanThinRequest::OAIPlanThinRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlanThinRequest::OAIPlanThinRequest() {
    this->initializeModel();
}

OAIPlanThinRequest::~OAIPlanThinRequest() {}

void OAIPlanThinRequest::initializeModel() {

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_purchase_day_isSet = false;
    m_purchase_day_isValid = false;

    m_validity_isSet = false;
    m_validity_isValid = false;
}

void OAIPlanThinRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlanThinRequest::fromJsonObject(QJsonObject json) {

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_purchase_day_isValid = ::OpenAPI::fromJsonValue(m_purchase_day, json[QString("purchaseDay")]);
    m_purchase_day_isSet = !json[QString("purchaseDay")].isNull() && m_purchase_day_isValid;

    m_validity_isValid = ::OpenAPI::fromJsonValue(m_validity, json[QString("validity")]);
    m_validity_isSet = !json[QString("validity")].isNull() && m_validity_isValid;
}

QString OAIPlanThinRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlanThinRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_frequency.isSet()) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_purchase_day_isSet) {
        obj.insert(QString("purchaseDay"), ::OpenAPI::toJsonValue(m_purchase_day));
    }
    if (m_validity.isSet()) {
        obj.insert(QString("validity"), ::OpenAPI::toJsonValue(m_validity));
    }
    return obj;
}

OAIFrequencyRequest OAIPlanThinRequest::getFrequency() const {
    return m_frequency;
}
void OAIPlanThinRequest::setFrequency(const OAIFrequencyRequest &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIPlanThinRequest::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIPlanThinRequest::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIPlanThinRequest::getId() const {
    return m_id;
}
void OAIPlanThinRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPlanThinRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPlanThinRequest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPlanThinRequest::getPurchaseDay() const {
    return m_purchase_day;
}
void OAIPlanThinRequest::setPurchaseDay(const QString &purchase_day) {
    m_purchase_day = purchase_day;
    m_purchase_day_isSet = true;
}

bool OAIPlanThinRequest::is_purchase_day_Set() const{
    return m_purchase_day_isSet;
}

bool OAIPlanThinRequest::is_purchase_day_Valid() const{
    return m_purchase_day_isValid;
}

OAIValidityRequest OAIPlanThinRequest::getValidity() const {
    return m_validity;
}
void OAIPlanThinRequest::setValidity(const OAIValidityRequest &validity) {
    m_validity = validity;
    m_validity_isSet = true;
}

bool OAIPlanThinRequest::is_validity_Set() const{
    return m_validity_isSet;
}

bool OAIPlanThinRequest::is_validity_Valid() const{
    return m_validity_isValid;
}

bool OAIPlanThinRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlanThinRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_frequency_isValid && m_id_isValid && m_purchase_day_isValid && true;
}

} // namespace OpenAPI
