/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReportsApi_H
#define OAI_OAIReportsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIReportResponse.h"
#include "OAISubscriptionReport.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReportsApi : public QObject {
    Q_OBJECT

public:
    OAIReportsApi(const int timeOut = 0);
    ~OAIReportsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void apiRnsPvtReportsGet(const QString &content_type, const QString &accept);

    /**
    * @param[in]  report_name QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void apiRnsPvtReportsReportNameDocumentsDocumentIdGet(const QString &report_name, const QString &document_id, const QString &content_type, const QString &accept);

    /**
    * @param[in]  report_name QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  email QString [optional]
    * @param[in]  begin_date QString [optional]
    * @param[in]  end_date QString [optional]
    */
    virtual void apiRnsPvtReportsReportNameDocumentsPost(const QString &report_name, const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &begin_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiRnsPvtReportsGetCallback(OAIHttpRequestWorker *worker);
    void apiRnsPvtReportsReportNameDocumentsDocumentIdGetCallback(OAIHttpRequestWorker *worker);
    void apiRnsPvtReportsReportNameDocumentsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiRnsPvtReportsGetSignal(QList<OAISubscriptionReport> summary);
    void apiRnsPvtReportsReportNameDocumentsDocumentIdGetSignal(OAIReportResponse summary);
    void apiRnsPvtReportsReportNameDocumentsPostSignal(OAIReportResponse summary);


    void apiRnsPvtReportsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscriptionReport> summary);
    void apiRnsPvtReportsReportNameDocumentsDocumentIdGetSignalFull(OAIHttpRequestWorker *worker, OAIReportResponse summary);
    void apiRnsPvtReportsReportNameDocumentsPostSignalFull(OAIHttpRequestWorker *worker, OAIReportResponse summary);

    Q_DECL_DEPRECATED_X("Use apiRnsPvtReportsGetSignalError() instead")
    void apiRnsPvtReportsGetSignalE(QList<OAISubscriptionReport> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPvtReportsGetSignalError(QList<OAISubscriptionReport> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPvtReportsReportNameDocumentsDocumentIdGetSignalError() instead")
    void apiRnsPvtReportsReportNameDocumentsDocumentIdGetSignalE(OAIReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPvtReportsReportNameDocumentsDocumentIdGetSignalError(OAIReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPvtReportsReportNameDocumentsPostSignalError() instead")
    void apiRnsPvtReportsReportNameDocumentsPostSignalE(OAIReportResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPvtReportsReportNameDocumentsPostSignalError(OAIReportResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiRnsPvtReportsGetSignalErrorFull() instead")
    void apiRnsPvtReportsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPvtReportsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPvtReportsReportNameDocumentsDocumentIdGetSignalErrorFull() instead")
    void apiRnsPvtReportsReportNameDocumentsDocumentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPvtReportsReportNameDocumentsDocumentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPvtReportsReportNameDocumentsPostSignalErrorFull() instead")
    void apiRnsPvtReportsReportNameDocumentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPvtReportsReportNameDocumentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
