/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimulateResponseVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimulateResponseVO::OAISimulateResponseVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimulateResponseVO::OAISimulateResponseVO() {
    this->initializeModel();
}

OAISimulateResponseVO::~OAISimulateResponseVO() {}

void OAISimulateResponseVO::initializeModel() {

    m_shipping_estimate_isSet = false;
    m_shipping_estimate_isValid = false;

    m_simulate_response_isSet = false;
    m_simulate_response_isValid = false;

    m_simulation_items_isSet = false;
    m_simulation_items_isValid = false;

    m_totals_isSet = false;
    m_totals_isValid = false;
}

void OAISimulateResponseVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimulateResponseVO::fromJsonObject(QJsonObject json) {

    m_shipping_estimate_isValid = ::OpenAPI::fromJsonValue(m_shipping_estimate, json[QString("shippingEstimate")]);
    m_shipping_estimate_isSet = !json[QString("shippingEstimate")].isNull() && m_shipping_estimate_isValid;

    m_simulate_response_isValid = ::OpenAPI::fromJsonValue(m_simulate_response, json[QString("simulateResponse")]);
    m_simulate_response_isSet = !json[QString("simulateResponse")].isNull() && m_simulate_response_isValid;

    m_simulation_items_isValid = ::OpenAPI::fromJsonValue(m_simulation_items, json[QString("simulationItems")]);
    m_simulation_items_isSet = !json[QString("simulationItems")].isNull() && m_simulation_items_isValid;

    m_totals_isValid = ::OpenAPI::fromJsonValue(m_totals, json[QString("totals")]);
    m_totals_isSet = !json[QString("totals")].isNull() && m_totals_isValid;
}

QString OAISimulateResponseVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimulateResponseVO::asJsonObject() const {
    QJsonObject obj;
    if (m_shipping_estimate.isSet()) {
        obj.insert(QString("shippingEstimate"), ::OpenAPI::toJsonValue(m_shipping_estimate));
    }
    if (m_simulate_response.isSet()) {
        obj.insert(QString("simulateResponse"), ::OpenAPI::toJsonValue(m_simulate_response));
    }
    if (m_simulation_items.size() > 0) {
        obj.insert(QString("simulationItems"), ::OpenAPI::toJsonValue(m_simulation_items));
    }
    if (m_totals.size() > 0) {
        obj.insert(QString("totals"), ::OpenAPI::toJsonValue(m_totals));
    }
    return obj;
}

OAIShippingEstimate OAISimulateResponseVO::getShippingEstimate() const {
    return m_shipping_estimate;
}
void OAISimulateResponseVO::setShippingEstimate(const OAIShippingEstimate &shipping_estimate) {
    m_shipping_estimate = shipping_estimate;
    m_shipping_estimate_isSet = true;
}

bool OAISimulateResponseVO::is_shipping_estimate_Set() const{
    return m_shipping_estimate_isSet;
}

bool OAISimulateResponseVO::is_shipping_estimate_Valid() const{
    return m_shipping_estimate_isValid;
}

OAISimulateResponse OAISimulateResponseVO::getSimulateResponse() const {
    return m_simulate_response;
}
void OAISimulateResponseVO::setSimulateResponse(const OAISimulateResponse &simulate_response) {
    m_simulate_response = simulate_response;
    m_simulate_response_isSet = true;
}

bool OAISimulateResponseVO::is_simulate_response_Set() const{
    return m_simulate_response_isSet;
}

bool OAISimulateResponseVO::is_simulate_response_Valid() const{
    return m_simulate_response_isValid;
}

QList<OAISimulationItemResult> OAISimulateResponseVO::getSimulationItems() const {
    return m_simulation_items;
}
void OAISimulateResponseVO::setSimulationItems(const QList<OAISimulationItemResult> &simulation_items) {
    m_simulation_items = simulation_items;
    m_simulation_items_isSet = true;
}

bool OAISimulateResponseVO::is_simulation_items_Set() const{
    return m_simulation_items_isSet;
}

bool OAISimulateResponseVO::is_simulation_items_Valid() const{
    return m_simulation_items_isValid;
}

QList<OAITotalization> OAISimulateResponseVO::getTotals() const {
    return m_totals;
}
void OAISimulateResponseVO::setTotals(const QList<OAITotalization> &totals) {
    m_totals = totals;
    m_totals_isSet = true;
}

bool OAISimulateResponseVO::is_totals_Set() const{
    return m_totals_isSet;
}

bool OAISimulateResponseVO::is_totals_Valid() const{
    return m_totals_isValid;
}

bool OAISimulateResponseVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shipping_estimate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulate_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulation_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimulateResponseVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
