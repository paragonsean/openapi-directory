/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogisticsInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogisticsInfo::OAILogisticsInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogisticsInfo::OAILogisticsInfo() {
    this->initializeModel();
}

OAILogisticsInfo::~OAILogisticsInfo() {}

void OAILogisticsInfo::initializeModel() {

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_delivery_window_isSet = false;
    m_delivery_window_isValid = false;

    m_item_index_isSet = false;
    m_item_index_isValid = false;

    m_lock_ttl_isSet = false;
    m_lock_ttl_isValid = false;

    m_pickup_id_isSet = false;
    m_pickup_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_selected_delivery_channel_isSet = false;
    m_selected_delivery_channel_isValid = false;

    m_selected_sla_isSet = false;
    m_selected_sla_isValid = false;

    m_shipping_estimate_isSet = false;
    m_shipping_estimate_isValid = false;

    m_sl_as_isSet = false;
    m_sl_as_isValid = false;
}

void OAILogisticsInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogisticsInfo::fromJsonObject(QJsonObject json) {

    m_address_id_isValid = ::OpenAPI::fromJsonValue(m_address_id, json[QString("addressId")]);
    m_address_id_isSet = !json[QString("addressId")].isNull() && m_address_id_isValid;

    m_delivery_window_isValid = ::OpenAPI::fromJsonValue(m_delivery_window, json[QString("deliveryWindow")]);
    m_delivery_window_isSet = !json[QString("deliveryWindow")].isNull() && m_delivery_window_isValid;

    m_item_index_isValid = ::OpenAPI::fromJsonValue(m_item_index, json[QString("itemIndex")]);
    m_item_index_isSet = !json[QString("itemIndex")].isNull() && m_item_index_isValid;

    m_lock_ttl_isValid = ::OpenAPI::fromJsonValue(m_lock_ttl, json[QString("lockTtl")]);
    m_lock_ttl_isSet = !json[QString("lockTtl")].isNull() && m_lock_ttl_isValid;

    m_pickup_id_isValid = ::OpenAPI::fromJsonValue(m_pickup_id, json[QString("pickupId")]);
    m_pickup_id_isSet = !json[QString("pickupId")].isNull() && m_pickup_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_selected_delivery_channel_isValid = ::OpenAPI::fromJsonValue(m_selected_delivery_channel, json[QString("selectedDeliveryChannel")]);
    m_selected_delivery_channel_isSet = !json[QString("selectedDeliveryChannel")].isNull() && m_selected_delivery_channel_isValid;

    m_selected_sla_isValid = ::OpenAPI::fromJsonValue(m_selected_sla, json[QString("selectedSla")]);
    m_selected_sla_isSet = !json[QString("selectedSla")].isNull() && m_selected_sla_isValid;

    m_shipping_estimate_isValid = ::OpenAPI::fromJsonValue(m_shipping_estimate, json[QString("shippingEstimate")]);
    m_shipping_estimate_isSet = !json[QString("shippingEstimate")].isNull() && m_shipping_estimate_isValid;

    m_sl_as_isValid = ::OpenAPI::fromJsonValue(m_sl_as, json[QString("slAs")]);
    m_sl_as_isSet = !json[QString("slAs")].isNull() && m_sl_as_isValid;
}

QString OAILogisticsInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogisticsInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_address_id_isSet) {
        obj.insert(QString("addressId"), ::OpenAPI::toJsonValue(m_address_id));
    }
    if (m_delivery_window.isSet()) {
        obj.insert(QString("deliveryWindow"), ::OpenAPI::toJsonValue(m_delivery_window));
    }
    if (m_item_index_isSet) {
        obj.insert(QString("itemIndex"), ::OpenAPI::toJsonValue(m_item_index));
    }
    if (m_lock_ttl_isSet) {
        obj.insert(QString("lockTtl"), ::OpenAPI::toJsonValue(m_lock_ttl));
    }
    if (m_pickup_id_isSet) {
        obj.insert(QString("pickupId"), ::OpenAPI::toJsonValue(m_pickup_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_selected_delivery_channel_isSet) {
        obj.insert(QString("selectedDeliveryChannel"), ::OpenAPI::toJsonValue(m_selected_delivery_channel));
    }
    if (m_selected_sla_isSet) {
        obj.insert(QString("selectedSla"), ::OpenAPI::toJsonValue(m_selected_sla));
    }
    if (m_shipping_estimate_isSet) {
        obj.insert(QString("shippingEstimate"), ::OpenAPI::toJsonValue(m_shipping_estimate));
    }
    if (m_sl_as.size() > 0) {
        obj.insert(QString("slAs"), ::OpenAPI::toJsonValue(m_sl_as));
    }
    return obj;
}

QString OAILogisticsInfo::getAddressId() const {
    return m_address_id;
}
void OAILogisticsInfo::setAddressId(const QString &address_id) {
    m_address_id = address_id;
    m_address_id_isSet = true;
}

bool OAILogisticsInfo::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAILogisticsInfo::is_address_id_Valid() const{
    return m_address_id_isValid;
}

OAILogisticsInfoDeliveryWindow OAILogisticsInfo::getDeliveryWindow() const {
    return m_delivery_window;
}
void OAILogisticsInfo::setDeliveryWindow(const OAILogisticsInfoDeliveryWindow &delivery_window) {
    m_delivery_window = delivery_window;
    m_delivery_window_isSet = true;
}

bool OAILogisticsInfo::is_delivery_window_Set() const{
    return m_delivery_window_isSet;
}

bool OAILogisticsInfo::is_delivery_window_Valid() const{
    return m_delivery_window_isValid;
}

qint32 OAILogisticsInfo::getItemIndex() const {
    return m_item_index;
}
void OAILogisticsInfo::setItemIndex(const qint32 &item_index) {
    m_item_index = item_index;
    m_item_index_isSet = true;
}

bool OAILogisticsInfo::is_item_index_Set() const{
    return m_item_index_isSet;
}

bool OAILogisticsInfo::is_item_index_Valid() const{
    return m_item_index_isValid;
}

QString OAILogisticsInfo::getLockTtl() const {
    return m_lock_ttl;
}
void OAILogisticsInfo::setLockTtl(const QString &lock_ttl) {
    m_lock_ttl = lock_ttl;
    m_lock_ttl_isSet = true;
}

bool OAILogisticsInfo::is_lock_ttl_Set() const{
    return m_lock_ttl_isSet;
}

bool OAILogisticsInfo::is_lock_ttl_Valid() const{
    return m_lock_ttl_isValid;
}

QString OAILogisticsInfo::getPickupId() const {
    return m_pickup_id;
}
void OAILogisticsInfo::setPickupId(const QString &pickup_id) {
    m_pickup_id = pickup_id;
    m_pickup_id_isSet = true;
}

bool OAILogisticsInfo::is_pickup_id_Set() const{
    return m_pickup_id_isSet;
}

bool OAILogisticsInfo::is_pickup_id_Valid() const{
    return m_pickup_id_isValid;
}

qint32 OAILogisticsInfo::getPrice() const {
    return m_price;
}
void OAILogisticsInfo::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAILogisticsInfo::is_price_Set() const{
    return m_price_isSet;
}

bool OAILogisticsInfo::is_price_Valid() const{
    return m_price_isValid;
}

qint32 OAILogisticsInfo::getQuantity() const {
    return m_quantity;
}
void OAILogisticsInfo::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAILogisticsInfo::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAILogisticsInfo::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAILogisticsInfo::getSelectedDeliveryChannel() const {
    return m_selected_delivery_channel;
}
void OAILogisticsInfo::setSelectedDeliveryChannel(const QString &selected_delivery_channel) {
    m_selected_delivery_channel = selected_delivery_channel;
    m_selected_delivery_channel_isSet = true;
}

bool OAILogisticsInfo::is_selected_delivery_channel_Set() const{
    return m_selected_delivery_channel_isSet;
}

bool OAILogisticsInfo::is_selected_delivery_channel_Valid() const{
    return m_selected_delivery_channel_isValid;
}

QString OAILogisticsInfo::getSelectedSla() const {
    return m_selected_sla;
}
void OAILogisticsInfo::setSelectedSla(const QString &selected_sla) {
    m_selected_sla = selected_sla;
    m_selected_sla_isSet = true;
}

bool OAILogisticsInfo::is_selected_sla_Set() const{
    return m_selected_sla_isSet;
}

bool OAILogisticsInfo::is_selected_sla_Valid() const{
    return m_selected_sla_isValid;
}

QString OAILogisticsInfo::getShippingEstimate() const {
    return m_shipping_estimate;
}
void OAILogisticsInfo::setShippingEstimate(const QString &shipping_estimate) {
    m_shipping_estimate = shipping_estimate;
    m_shipping_estimate_isSet = true;
}

bool OAILogisticsInfo::is_shipping_estimate_Set() const{
    return m_shipping_estimate_isSet;
}

bool OAILogisticsInfo::is_shipping_estimate_Valid() const{
    return m_shipping_estimate_isValid;
}

QList<OAILogisticsInfoSLA> OAILogisticsInfo::getSlAs() const {
    return m_sl_as;
}
void OAILogisticsInfo::setSlAs(const QList<OAILogisticsInfoSLA> &sl_as) {
    m_sl_as = sl_as;
    m_sl_as_isSet = true;
}

bool OAILogisticsInfo::is_sl_as_Set() const{
    return m_sl_as_isSet;
}

bool OAILogisticsInfo::is_sl_as_Valid() const{
    return m_sl_as_isValid;
}

bool OAILogisticsInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_delivery_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_sla_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sl_as.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogisticsInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
