/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionGroupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionGroupRequest::OAISubscriptionGroupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionGroupRequest::OAISubscriptionGroupRequest() {
    this->initializeModel();
}

OAISubscriptionGroupRequest::~OAISubscriptionGroupRequest() {}

void OAISubscriptionGroupRequest::initializeModel() {

    m_catalog_attachment_isSet = false;
    m_catalog_attachment_isValid = false;

    m_customer_email_isSet = false;
    m_customer_email_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_next_purchase_date_isSet = false;
    m_next_purchase_date_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_purchase_settings_isSet = false;
    m_purchase_settings_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISubscriptionGroupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionGroupRequest::fromJsonObject(QJsonObject json) {

    m_catalog_attachment_isValid = ::OpenAPI::fromJsonValue(m_catalog_attachment, json[QString("catalogAttachment")]);
    m_catalog_attachment_isSet = !json[QString("catalogAttachment")].isNull() && m_catalog_attachment_isValid;

    m_customer_email_isValid = ::OpenAPI::fromJsonValue(m_customer_email, json[QString("customerEmail")]);
    m_customer_email_isSet = !json[QString("customerEmail")].isNull() && m_customer_email_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_next_purchase_date_isValid = ::OpenAPI::fromJsonValue(m_next_purchase_date, json[QString("nextPurchaseDate")]);
    m_next_purchase_date_isSet = !json[QString("nextPurchaseDate")].isNull() && m_next_purchase_date_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_purchase_settings_isValid = ::OpenAPI::fromJsonValue(m_purchase_settings, json[QString("purchaseSettings")]);
    m_purchase_settings_isSet = !json[QString("purchaseSettings")].isNull() && m_purchase_settings_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shippingAddress")]);
    m_shipping_address_isSet = !json[QString("shippingAddress")].isNull() && m_shipping_address_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISubscriptionGroupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionGroupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_attachment_isSet) {
        obj.insert(QString("catalogAttachment"), ::OpenAPI::toJsonValue(m_catalog_attachment));
    }
    if (m_customer_email_isSet) {
        obj.insert(QString("customerEmail"), ::OpenAPI::toJsonValue(m_customer_email));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_next_purchase_date_isSet) {
        obj.insert(QString("nextPurchaseDate"), ::OpenAPI::toJsonValue(m_next_purchase_date));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_purchase_settings.isSet()) {
        obj.insert(QString("purchaseSettings"), ::OpenAPI::toJsonValue(m_purchase_settings));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shippingAddress"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAISubscriptionGroupRequest::getCatalogAttachment() const {
    return m_catalog_attachment;
}
void OAISubscriptionGroupRequest::setCatalogAttachment(const QString &catalog_attachment) {
    m_catalog_attachment = catalog_attachment;
    m_catalog_attachment_isSet = true;
}

bool OAISubscriptionGroupRequest::is_catalog_attachment_Set() const{
    return m_catalog_attachment_isSet;
}

bool OAISubscriptionGroupRequest::is_catalog_attachment_Valid() const{
    return m_catalog_attachment_isValid;
}

QString OAISubscriptionGroupRequest::getCustomerEmail() const {
    return m_customer_email;
}
void OAISubscriptionGroupRequest::setCustomerEmail(const QString &customer_email) {
    m_customer_email = customer_email;
    m_customer_email_isSet = true;
}

bool OAISubscriptionGroupRequest::is_customer_email_Set() const{
    return m_customer_email_isSet;
}

bool OAISubscriptionGroupRequest::is_customer_email_Valid() const{
    return m_customer_email_isValid;
}

QList<OAISubscriptionThinItemRequest> OAISubscriptionGroupRequest::getItems() const {
    return m_items;
}
void OAISubscriptionGroupRequest::setItems(const QList<OAISubscriptionThinItemRequest> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISubscriptionGroupRequest::is_items_Set() const{
    return m_items_isSet;
}

bool OAISubscriptionGroupRequest::is_items_Valid() const{
    return m_items_isValid;
}

QDateTime OAISubscriptionGroupRequest::getNextPurchaseDate() const {
    return m_next_purchase_date;
}
void OAISubscriptionGroupRequest::setNextPurchaseDate(const QDateTime &next_purchase_date) {
    m_next_purchase_date = next_purchase_date;
    m_next_purchase_date_isSet = true;
}

bool OAISubscriptionGroupRequest::is_next_purchase_date_Set() const{
    return m_next_purchase_date_isSet;
}

bool OAISubscriptionGroupRequest::is_next_purchase_date_Valid() const{
    return m_next_purchase_date_isValid;
}

OAIPlanThinRequest OAISubscriptionGroupRequest::getPlan() const {
    return m_plan;
}
void OAISubscriptionGroupRequest::setPlan(const OAIPlanThinRequest &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAISubscriptionGroupRequest::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAISubscriptionGroupRequest::is_plan_Valid() const{
    return m_plan_isValid;
}

OAIPurchaseSettingsThinRequest OAISubscriptionGroupRequest::getPurchaseSettings() const {
    return m_purchase_settings;
}
void OAISubscriptionGroupRequest::setPurchaseSettings(const OAIPurchaseSettingsThinRequest &purchase_settings) {
    m_purchase_settings = purchase_settings;
    m_purchase_settings_isSet = true;
}

bool OAISubscriptionGroupRequest::is_purchase_settings_Set() const{
    return m_purchase_settings_isSet;
}

bool OAISubscriptionGroupRequest::is_purchase_settings_Valid() const{
    return m_purchase_settings_isValid;
}

OAIShippingAddress OAISubscriptionGroupRequest::getShippingAddress() const {
    return m_shipping_address;
}
void OAISubscriptionGroupRequest::setShippingAddress(const OAIShippingAddress &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAISubscriptionGroupRequest::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAISubscriptionGroupRequest::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

QString OAISubscriptionGroupRequest::getStatus() const {
    return m_status;
}
void OAISubscriptionGroupRequest::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscriptionGroupRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscriptionGroupRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISubscriptionGroupRequest::getTitle() const {
    return m_title;
}
void OAISubscriptionGroupRequest::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISubscriptionGroupRequest::is_title_Set() const{
    return m_title_isSet;
}

bool OAISubscriptionGroupRequest::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISubscriptionGroupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_purchase_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionGroupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_customer_email_isValid && m_items_isValid && m_plan_isValid && m_purchase_settings_isValid && m_shipping_address_isValid && true;
}

} // namespace OpenAPI
