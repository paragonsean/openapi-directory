/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionReport::OAISubscriptionReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionReport::OAISubscriptionReport() {
    this->initializeModel();
}

OAISubscriptionReport::~OAISubscriptionReport() {}

void OAISubscriptionReport::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_requester_email_isSet = false;
    m_requester_email_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;
}

void OAISubscriptionReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionReport::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_requester_email_isValid = ::OpenAPI::fromJsonValue(m_requester_email, json[QString("requesterEmail")]);
    m_requester_email_isSet = !json[QString("requesterEmail")].isNull() && m_requester_email_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;
}

QString OAISubscriptionReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionReport::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_requester_email_isSet) {
        obj.insert(QString("requesterEmail"), ::OpenAPI::toJsonValue(m_requester_email));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    return obj;
}

QString OAISubscriptionReport::getAccount() const {
    return m_account;
}
void OAISubscriptionReport::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAISubscriptionReport::is_account_Set() const{
    return m_account_isSet;
}

bool OAISubscriptionReport::is_account_Valid() const{
    return m_account_isValid;
}

QString OAISubscriptionReport::getDescription() const {
    return m_description;
}
void OAISubscriptionReport::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISubscriptionReport::is_description_Set() const{
    return m_description_isSet;
}

bool OAISubscriptionReport::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISubscriptionReport::getEntity() const {
    return m_entity;
}
void OAISubscriptionReport::setEntity(const QString &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAISubscriptionReport::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAISubscriptionReport::is_entity_Valid() const{
    return m_entity_isValid;
}

QString OAISubscriptionReport::getKey() const {
    return m_key;
}
void OAISubscriptionReport::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISubscriptionReport::is_key_Set() const{
    return m_key_isSet;
}

bool OAISubscriptionReport::is_key_Valid() const{
    return m_key_isValid;
}

QString OAISubscriptionReport::getName() const {
    return m_name;
}
void OAISubscriptionReport::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubscriptionReport::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubscriptionReport::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAISubscriptionReportParam> OAISubscriptionReport::getParams() const {
    return m_params;
}
void OAISubscriptionReport::setParams(const QList<OAISubscriptionReportParam> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAISubscriptionReport::is_params_Set() const{
    return m_params_isSet;
}

bool OAISubscriptionReport::is_params_Valid() const{
    return m_params_isValid;
}

QString OAISubscriptionReport::getQuery() const {
    return m_query;
}
void OAISubscriptionReport::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISubscriptionReport::is_query_Set() const{
    return m_query_isSet;
}

bool OAISubscriptionReport::is_query_Valid() const{
    return m_query_isValid;
}

QString OAISubscriptionReport::getRequesterEmail() const {
    return m_requester_email;
}
void OAISubscriptionReport::setRequesterEmail(const QString &requester_email) {
    m_requester_email = requester_email;
    m_requester_email_isSet = true;
}

bool OAISubscriptionReport::is_requester_email_Set() const{
    return m_requester_email_isSet;
}

bool OAISubscriptionReport::is_requester_email_Valid() const{
    return m_requester_email_isValid;
}

QString OAISubscriptionReport::getSchema() const {
    return m_schema;
}
void OAISubscriptionReport::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAISubscriptionReport::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAISubscriptionReport::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAISubscriptionReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
