/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionUpdateRequestV3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionUpdateRequestV3::OAISubscriptionUpdateRequestV3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionUpdateRequestV3::OAISubscriptionUpdateRequestV3() {
    this->initializeModel();
}

OAISubscriptionUpdateRequestV3::~OAISubscriptionUpdateRequestV3() {}

void OAISubscriptionUpdateRequestV3::initializeModel() {

    m_is_skipped_isSet = false;
    m_is_skipped_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_purchase_settings_isSet = false;
    m_purchase_settings_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISubscriptionUpdateRequestV3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionUpdateRequestV3::fromJsonObject(QJsonObject json) {

    m_is_skipped_isValid = ::OpenAPI::fromJsonValue(m_is_skipped, json[QString("isSkipped")]);
    m_is_skipped_isSet = !json[QString("isSkipped")].isNull() && m_is_skipped_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_purchase_settings_isValid = ::OpenAPI::fromJsonValue(m_purchase_settings, json[QString("purchaseSettings")]);
    m_purchase_settings_isSet = !json[QString("purchaseSettings")].isNull() && m_purchase_settings_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shippingAddress")]);
    m_shipping_address_isSet = !json[QString("shippingAddress")].isNull() && m_shipping_address_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISubscriptionUpdateRequestV3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionUpdateRequestV3::asJsonObject() const {
    QJsonObject obj;
    if (m_is_skipped_isSet) {
        obj.insert(QString("isSkipped"), ::OpenAPI::toJsonValue(m_is_skipped));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_purchase_settings.isSet()) {
        obj.insert(QString("purchaseSettings"), ::OpenAPI::toJsonValue(m_purchase_settings));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shippingAddress"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

bool OAISubscriptionUpdateRequestV3::isIsSkipped() const {
    return m_is_skipped;
}
void OAISubscriptionUpdateRequestV3::setIsSkipped(const bool &is_skipped) {
    m_is_skipped = is_skipped;
    m_is_skipped_isSet = true;
}

bool OAISubscriptionUpdateRequestV3::is_is_skipped_Set() const{
    return m_is_skipped_isSet;
}

bool OAISubscriptionUpdateRequestV3::is_is_skipped_Valid() const{
    return m_is_skipped_isValid;
}

OAIPlanThinRequest OAISubscriptionUpdateRequestV3::getPlan() const {
    return m_plan;
}
void OAISubscriptionUpdateRequestV3::setPlan(const OAIPlanThinRequest &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAISubscriptionUpdateRequestV3::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAISubscriptionUpdateRequestV3::is_plan_Valid() const{
    return m_plan_isValid;
}

OAIPurchaseSettingsThinRequest OAISubscriptionUpdateRequestV3::getPurchaseSettings() const {
    return m_purchase_settings;
}
void OAISubscriptionUpdateRequestV3::setPurchaseSettings(const OAIPurchaseSettingsThinRequest &purchase_settings) {
    m_purchase_settings = purchase_settings;
    m_purchase_settings_isSet = true;
}

bool OAISubscriptionUpdateRequestV3::is_purchase_settings_Set() const{
    return m_purchase_settings_isSet;
}

bool OAISubscriptionUpdateRequestV3::is_purchase_settings_Valid() const{
    return m_purchase_settings_isValid;
}

OAIShippingAddress OAISubscriptionUpdateRequestV3::getShippingAddress() const {
    return m_shipping_address;
}
void OAISubscriptionUpdateRequestV3::setShippingAddress(const OAIShippingAddress &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAISubscriptionUpdateRequestV3::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAISubscriptionUpdateRequestV3::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

QString OAISubscriptionUpdateRequestV3::getStatus() const {
    return m_status;
}
void OAISubscriptionUpdateRequestV3::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscriptionUpdateRequestV3::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscriptionUpdateRequestV3::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISubscriptionUpdateRequestV3::getTitle() const {
    return m_title;
}
void OAISubscriptionUpdateRequestV3::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISubscriptionUpdateRequestV3::is_title_Set() const{
    return m_title_isSet;
}

bool OAISubscriptionUpdateRequestV3::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISubscriptionUpdateRequestV3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_skipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionUpdateRequestV3::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
