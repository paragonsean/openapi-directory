/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingEstimate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingEstimate::OAIShippingEstimate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingEstimate::OAIShippingEstimate() {
    this->initializeModel();
}

OAIShippingEstimate::~OAIShippingEstimate() {}

void OAIShippingEstimate::initializeModel() {

    m_all_items_matched_isSet = false;
    m_all_items_matched_isValid = false;

    m_estimate_isSet = false;
    m_estimate_isValid = false;

    m_estimate_delivery_date_isSet = false;
    m_estimate_delivery_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_purchase_date_isSet = false;
    m_next_purchase_date_isValid = false;
}

void OAIShippingEstimate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingEstimate::fromJsonObject(QJsonObject json) {

    m_all_items_matched_isValid = ::OpenAPI::fromJsonValue(m_all_items_matched, json[QString("allItemsMatched")]);
    m_all_items_matched_isSet = !json[QString("allItemsMatched")].isNull() && m_all_items_matched_isValid;

    m_estimate_isValid = ::OpenAPI::fromJsonValue(m_estimate, json[QString("estimate")]);
    m_estimate_isSet = !json[QString("estimate")].isNull() && m_estimate_isValid;

    m_estimate_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_estimate_delivery_date, json[QString("estimateDeliveryDate")]);
    m_estimate_delivery_date_isSet = !json[QString("estimateDeliveryDate")].isNull() && m_estimate_delivery_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_purchase_date_isValid = ::OpenAPI::fromJsonValue(m_next_purchase_date, json[QString("nextPurchaseDate")]);
    m_next_purchase_date_isSet = !json[QString("nextPurchaseDate")].isNull() && m_next_purchase_date_isValid;
}

QString OAIShippingEstimate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingEstimate::asJsonObject() const {
    QJsonObject obj;
    if (m_all_items_matched_isSet) {
        obj.insert(QString("allItemsMatched"), ::OpenAPI::toJsonValue(m_all_items_matched));
    }
    if (m_estimate_isSet) {
        obj.insert(QString("estimate"), ::OpenAPI::toJsonValue(m_estimate));
    }
    if (m_estimate_delivery_date_isSet) {
        obj.insert(QString("estimateDeliveryDate"), ::OpenAPI::toJsonValue(m_estimate_delivery_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_purchase_date_isSet) {
        obj.insert(QString("nextPurchaseDate"), ::OpenAPI::toJsonValue(m_next_purchase_date));
    }
    return obj;
}

bool OAIShippingEstimate::isAllItemsMatched() const {
    return m_all_items_matched;
}
void OAIShippingEstimate::setAllItemsMatched(const bool &all_items_matched) {
    m_all_items_matched = all_items_matched;
    m_all_items_matched_isSet = true;
}

bool OAIShippingEstimate::is_all_items_matched_Set() const{
    return m_all_items_matched_isSet;
}

bool OAIShippingEstimate::is_all_items_matched_Valid() const{
    return m_all_items_matched_isValid;
}

QString OAIShippingEstimate::getEstimate() const {
    return m_estimate;
}
void OAIShippingEstimate::setEstimate(const QString &estimate) {
    m_estimate = estimate;
    m_estimate_isSet = true;
}

bool OAIShippingEstimate::is_estimate_Set() const{
    return m_estimate_isSet;
}

bool OAIShippingEstimate::is_estimate_Valid() const{
    return m_estimate_isValid;
}

QDateTime OAIShippingEstimate::getEstimateDeliveryDate() const {
    return m_estimate_delivery_date;
}
void OAIShippingEstimate::setEstimateDeliveryDate(const QDateTime &estimate_delivery_date) {
    m_estimate_delivery_date = estimate_delivery_date;
    m_estimate_delivery_date_isSet = true;
}

bool OAIShippingEstimate::is_estimate_delivery_date_Set() const{
    return m_estimate_delivery_date_isSet;
}

bool OAIShippingEstimate::is_estimate_delivery_date_Valid() const{
    return m_estimate_delivery_date_isValid;
}

QString OAIShippingEstimate::getName() const {
    return m_name;
}
void OAIShippingEstimate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIShippingEstimate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIShippingEstimate::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIShippingEstimate::getNextPurchaseDate() const {
    return m_next_purchase_date;
}
void OAIShippingEstimate::setNextPurchaseDate(const QDateTime &next_purchase_date) {
    m_next_purchase_date = next_purchase_date;
    m_next_purchase_date_isSet = true;
}

bool OAIShippingEstimate::is_next_purchase_date_Set() const{
    return m_next_purchase_date_isSet;
}

bool OAIShippingEstimate::is_next_purchase_date_Valid() const{
    return m_next_purchase_date_isValid;
}

bool OAIShippingEstimate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_items_matched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimate_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_purchase_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingEstimate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
