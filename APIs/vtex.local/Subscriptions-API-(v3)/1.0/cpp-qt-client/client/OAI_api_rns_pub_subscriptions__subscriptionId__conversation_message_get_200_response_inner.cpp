/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner() {
    this->initializeModel();
}

OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::~OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner() {}

void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::initializeModel() {

    m_attachment_names_isSet = false;
    m_attachment_names_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_first_words_isSet = false;
    m_first_words_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_has_attachment_isSet = false;
    m_has_attachment_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::fromJsonObject(QJsonObject json) {

    m_attachment_names_isValid = ::OpenAPI::fromJsonValue(m_attachment_names, json[QString("attachmentNames")]);
    m_attachment_names_isSet = !json[QString("attachmentNames")].isNull() && m_attachment_names_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_first_words_isValid = ::OpenAPI::fromJsonValue(m_first_words, json[QString("firstWords")]);
    m_first_words_isSet = !json[QString("firstWords")].isNull() && m_first_words_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_has_attachment_isValid = ::OpenAPI::fromJsonValue(m_has_attachment, json[QString("hasAttachment")]);
    m_has_attachment_isSet = !json[QString("hasAttachment")].isNull() && m_has_attachment_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment_names.size() > 0) {
        obj.insert(QString("attachmentNames"), ::OpenAPI::toJsonValue(m_attachment_names));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_first_words_isSet) {
        obj.insert(QString("firstWords"), ::OpenAPI::toJsonValue(m_first_words));
    }
    if (m_from.isSet()) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_has_attachment_isSet) {
        obj.insert(QString("hasAttachment"), ::OpenAPI::toJsonValue(m_has_attachment));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_to.size() > 0) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QList<QString> OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::getAttachmentNames() const {
    return m_attachment_names;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::setAttachmentNames(const QList<QString> &attachment_names) {
    m_attachment_names = attachment_names;
    m_attachment_names_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_attachment_names_Set() const{
    return m_attachment_names_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_attachment_names_Valid() const{
    return m_attachment_names_isValid;
}

QString OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::getBody() const {
    return m_body;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_body_Set() const{
    return m_body_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_body_Valid() const{
    return m_body_isValid;
}

QString OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::getDate() const {
    return m_date;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_date_Set() const{
    return m_date_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_date_Valid() const{
    return m_date_isValid;
}

QString OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::getFirstWords() const {
    return m_first_words;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::setFirstWords(const QString &first_words) {
    m_first_words = first_words;
    m_first_words_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_first_words_Set() const{
    return m_first_words_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_first_words_Valid() const{
    return m_first_words_isValid;
}

OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_from OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::getFrom() const {
    return m_from;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::setFrom(const OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_from &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_from_Set() const{
    return m_from_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_from_Valid() const{
    return m_from_isValid;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::isHasAttachment() const {
    return m_has_attachment;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::setHasAttachment(const bool &has_attachment) {
    m_has_attachment = has_attachment;
    m_has_attachment_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_has_attachment_Set() const{
    return m_has_attachment_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_has_attachment_Valid() const{
    return m_has_attachment_isValid;
}

QString OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::getId() const {
    return m_id;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::getSubject() const {
    return m_subject;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_subject_Valid() const{
    return m_subject_isValid;
}

QList<OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner> OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::getTo() const {
    return m_to;
}
void OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::setTo(const QList<OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner_to_inner> &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_to_Set() const{
    return m_to_isSet;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::is_to_Valid() const{
    return m_to_isValid;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_words_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
