/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportResponse::OAIReportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportResponse::OAIReportResponse() {
    this->initializeModel();
}

OAIReportResponse::~OAIReportResponse() {}

void OAIReportResponse::initializeModel() {

    m_canceled_isSet = false;
    m_canceled_isValid = false;

    m_completed_date_isSet = false;
    m_completed_date_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_enqueue_date_isSet = false;
    m_enqueue_date_isValid = false;

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_error_message_isSet = false;
    m_last_error_message_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_link_to_download_isSet = false;
    m_link_to_download_isValid = false;

    m_output_type_isSet = false;
    m_output_type_isValid = false;

    m_percentage_processed_isSet = false;
    m_percentage_processed_isValid = false;

    m_records_processed_isSet = false;
    m_records_processed_isValid = false;

    m_records_sum_isSet = false;
    m_records_sum_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_zipped_isSet = false;
    m_zipped_isValid = false;
}

void OAIReportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportResponse::fromJsonObject(QJsonObject json) {

    m_canceled_isValid = ::OpenAPI::fromJsonValue(m_canceled, json[QString("canceled")]);
    m_canceled_isSet = !json[QString("canceled")].isNull() && m_canceled_isValid;

    m_completed_date_isValid = ::OpenAPI::fromJsonValue(m_completed_date, json[QString("completedDate")]);
    m_completed_date_isSet = !json[QString("completedDate")].isNull() && m_completed_date_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_enqueue_date_isValid = ::OpenAPI::fromJsonValue(m_enqueue_date, json[QString("enqueueDate")]);
    m_enqueue_date_isSet = !json[QString("enqueueDate")].isNull() && m_enqueue_date_isValid;

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("errorCount")]);
    m_error_count_isSet = !json[QString("errorCount")].isNull() && m_error_count_isValid;

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_error_message_isValid = ::OpenAPI::fromJsonValue(m_last_error_message, json[QString("lastErrorMessage")]);
    m_last_error_message_isSet = !json[QString("lastErrorMessage")].isNull() && m_last_error_message_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_link_to_download_isValid = ::OpenAPI::fromJsonValue(m_link_to_download, json[QString("linkToDownload")]);
    m_link_to_download_isSet = !json[QString("linkToDownload")].isNull() && m_link_to_download_isValid;

    m_output_type_isValid = ::OpenAPI::fromJsonValue(m_output_type, json[QString("outputType")]);
    m_output_type_isSet = !json[QString("outputType")].isNull() && m_output_type_isValid;

    m_percentage_processed_isValid = ::OpenAPI::fromJsonValue(m_percentage_processed, json[QString("percentageProcessed")]);
    m_percentage_processed_isSet = !json[QString("percentageProcessed")].isNull() && m_percentage_processed_isValid;

    m_records_processed_isValid = ::OpenAPI::fromJsonValue(m_records_processed, json[QString("recordsProcessed")]);
    m_records_processed_isSet = !json[QString("recordsProcessed")].isNull() && m_records_processed_isValid;

    m_records_sum_isValid = ::OpenAPI::fromJsonValue(m_records_sum, json[QString("recordsSum")]);
    m_records_sum_isSet = !json[QString("recordsSum")].isNull() && m_records_sum_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_zipped_isValid = ::OpenAPI::fromJsonValue(m_zipped, json[QString("zipped")]);
    m_zipped_isSet = !json[QString("zipped")].isNull() && m_zipped_isValid;
}

QString OAIReportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_canceled_isSet) {
        obj.insert(QString("canceled"), ::OpenAPI::toJsonValue(m_canceled));
    }
    if (m_completed_date_isSet) {
        obj.insert(QString("completedDate"), ::OpenAPI::toJsonValue(m_completed_date));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_enqueue_date_isSet) {
        obj.insert(QString("enqueueDate"), ::OpenAPI::toJsonValue(m_enqueue_date));
    }
    if (m_error_count_isSet) {
        obj.insert(QString("errorCount"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_error_message_isSet) {
        obj.insert(QString("lastErrorMessage"), ::OpenAPI::toJsonValue(m_last_error_message));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_link_to_download_isSet) {
        obj.insert(QString("linkToDownload"), ::OpenAPI::toJsonValue(m_link_to_download));
    }
    if (m_output_type_isSet) {
        obj.insert(QString("outputType"), ::OpenAPI::toJsonValue(m_output_type));
    }
    if (m_percentage_processed_isSet) {
        obj.insert(QString("percentageProcessed"), ::OpenAPI::toJsonValue(m_percentage_processed));
    }
    if (m_records_processed_isSet) {
        obj.insert(QString("recordsProcessed"), ::OpenAPI::toJsonValue(m_records_processed));
    }
    if (m_records_sum_isSet) {
        obj.insert(QString("recordsSum"), ::OpenAPI::toJsonValue(m_records_sum));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_zipped_isSet) {
        obj.insert(QString("zipped"), ::OpenAPI::toJsonValue(m_zipped));
    }
    return obj;
}

bool OAIReportResponse::isCanceled() const {
    return m_canceled;
}
void OAIReportResponse::setCanceled(const bool &canceled) {
    m_canceled = canceled;
    m_canceled_isSet = true;
}

bool OAIReportResponse::is_canceled_Set() const{
    return m_canceled_isSet;
}

bool OAIReportResponse::is_canceled_Valid() const{
    return m_canceled_isValid;
}

QDateTime OAIReportResponse::getCompletedDate() const {
    return m_completed_date;
}
void OAIReportResponse::setCompletedDate(const QDateTime &completed_date) {
    m_completed_date = completed_date;
    m_completed_date_isSet = true;
}

bool OAIReportResponse::is_completed_date_Set() const{
    return m_completed_date_isSet;
}

bool OAIReportResponse::is_completed_date_Valid() const{
    return m_completed_date_isValid;
}

QString OAIReportResponse::getEmail() const {
    return m_email;
}
void OAIReportResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIReportResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIReportResponse::is_email_Valid() const{
    return m_email_isValid;
}

QDateTime OAIReportResponse::getEnqueueDate() const {
    return m_enqueue_date;
}
void OAIReportResponse::setEnqueueDate(const QDateTime &enqueue_date) {
    m_enqueue_date = enqueue_date;
    m_enqueue_date_isSet = true;
}

bool OAIReportResponse::is_enqueue_date_Set() const{
    return m_enqueue_date_isSet;
}

bool OAIReportResponse::is_enqueue_date_Valid() const{
    return m_enqueue_date_isValid;
}

qint64 OAIReportResponse::getErrorCount() const {
    return m_error_count;
}
void OAIReportResponse::setErrorCount(const qint64 &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAIReportResponse::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAIReportResponse::is_error_count_Valid() const{
    return m_error_count_isValid;
}

bool OAIReportResponse::isFinished() const {
    return m_finished;
}
void OAIReportResponse::setFinished(const bool &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIReportResponse::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIReportResponse::is_finished_Valid() const{
    return m_finished_isValid;
}

QString OAIReportResponse::getId() const {
    return m_id;
}
void OAIReportResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReportResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReportResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIReportResponse::getLastErrorMessage() const {
    return m_last_error_message;
}
void OAIReportResponse::setLastErrorMessage(const QString &last_error_message) {
    m_last_error_message = last_error_message;
    m_last_error_message_isSet = true;
}

bool OAIReportResponse::is_last_error_message_Set() const{
    return m_last_error_message_isSet;
}

bool OAIReportResponse::is_last_error_message_Valid() const{
    return m_last_error_message_isValid;
}

QDateTime OAIReportResponse::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAIReportResponse::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAIReportResponse::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAIReportResponse::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

QString OAIReportResponse::getLinkToDownload() const {
    return m_link_to_download;
}
void OAIReportResponse::setLinkToDownload(const QString &link_to_download) {
    m_link_to_download = link_to_download;
    m_link_to_download_isSet = true;
}

bool OAIReportResponse::is_link_to_download_Set() const{
    return m_link_to_download_isSet;
}

bool OAIReportResponse::is_link_to_download_Valid() const{
    return m_link_to_download_isValid;
}

QString OAIReportResponse::getOutputType() const {
    return m_output_type;
}
void OAIReportResponse::setOutputType(const QString &output_type) {
    m_output_type = output_type;
    m_output_type_isSet = true;
}

bool OAIReportResponse::is_output_type_Set() const{
    return m_output_type_isSet;
}

bool OAIReportResponse::is_output_type_Valid() const{
    return m_output_type_isValid;
}

qint64 OAIReportResponse::getPercentageProcessed() const {
    return m_percentage_processed;
}
void OAIReportResponse::setPercentageProcessed(const qint64 &percentage_processed) {
    m_percentage_processed = percentage_processed;
    m_percentage_processed_isSet = true;
}

bool OAIReportResponse::is_percentage_processed_Set() const{
    return m_percentage_processed_isSet;
}

bool OAIReportResponse::is_percentage_processed_Valid() const{
    return m_percentage_processed_isValid;
}

qint64 OAIReportResponse::getRecordsProcessed() const {
    return m_records_processed;
}
void OAIReportResponse::setRecordsProcessed(const qint64 &records_processed) {
    m_records_processed = records_processed;
    m_records_processed_isSet = true;
}

bool OAIReportResponse::is_records_processed_Set() const{
    return m_records_processed_isSet;
}

bool OAIReportResponse::is_records_processed_Valid() const{
    return m_records_processed_isValid;
}

qint64 OAIReportResponse::getRecordsSum() const {
    return m_records_sum;
}
void OAIReportResponse::setRecordsSum(const qint64 &records_sum) {
    m_records_sum = records_sum;
    m_records_sum_isSet = true;
}

bool OAIReportResponse::is_records_sum_Set() const{
    return m_records_sum_isSet;
}

bool OAIReportResponse::is_records_sum_Valid() const{
    return m_records_sum_isValid;
}

QDateTime OAIReportResponse::getStartDate() const {
    return m_start_date;
}
void OAIReportResponse::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIReportResponse::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIReportResponse::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIReportResponse::getStatusMessage() const {
    return m_status_message;
}
void OAIReportResponse::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIReportResponse::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIReportResponse::is_status_message_Valid() const{
    return m_status_message_isValid;
}

bool OAIReportResponse::isZipped() const {
    return m_zipped;
}
void OAIReportResponse::setZipped(const bool &zipped) {
    m_zipped = zipped;
    m_zipped_isSet = true;
}

bool OAIReportResponse::is_zipped_Set() const{
    return m_zipped_isSet;
}

bool OAIReportResponse::is_zipped_Valid() const{
    return m_zipped_isValid;
}

bool OAIReportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enqueue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_to_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zipped_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
