/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubscriptionsApi_H
#define OAI_OAISubscriptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISimulateResponseVO.h"
#include "OAISubscriptionGroupRequest.h"
#include "OAISubscriptionGroupResponse.h"
#include "OAISubscriptionThinItemRequest.h"
#include "OAISubscriptionUpdateRequestV3.h"
#include "OAIUpdateItemInput.h"
#include "OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubscriptionsApi : public QObject {
    Q_OBJECT

public:
    OAISubscriptionsApi(const int timeOut = 0);
    ~OAISubscriptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  customer_email QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  address_id QString [optional]
    * @param[in]  payment_id QString [optional]
    * @param[in]  plan_id QString [optional]
    * @param[in]  next_purchase_date QString [optional]
    * @param[in]  original_order_id QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  size qint32 [optional]
    */
    virtual void apiRnsPubSubscriptionsGet(const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<QString> &customer_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &address_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &payment_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &plan_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_purchase_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &original_order_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void apiRnsPubSubscriptionsIdGet(const QString &id, const QString &content_type, const QString &accept);

    /**
    * @param[in]  id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void apiRnsPubSubscriptionsIdItemsItemIdDelete(const QString &id, const QString &item_id, const QString &content_type, const QString &accept);

    /**
    * @param[in]  id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_update_item_input OAIUpdateItemInput [optional]
    */
    virtual void apiRnsPubSubscriptionsIdItemsItemIdPatch(const QString &id, const QString &item_id, const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<OAIUpdateItemInput> &oai_update_item_input = ::OpenAPI::OptionalParam<OAIUpdateItemInput>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_subscription_thin_item_request OAISubscriptionThinItemRequest [optional]
    */
    virtual void apiRnsPubSubscriptionsIdItemsPost(const QString &id, const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<OAISubscriptionThinItemRequest> &oai_subscription_thin_item_request = ::OpenAPI::OptionalParam<OAISubscriptionThinItemRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_subscription_update_request_v3 OAISubscriptionUpdateRequestV3 [optional]
    */
    virtual void apiRnsPubSubscriptionsIdPatch(const QString &id, const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<OAISubscriptionUpdateRequestV3> &oai_subscription_update_request_v3 = ::OpenAPI::OptionalParam<OAISubscriptionUpdateRequestV3>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void apiRnsPubSubscriptionsIdSimulatePost(const QString &id, const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_subscription_group_request OAISubscriptionGroupRequest [optional]
    */
    virtual void apiRnsPubSubscriptionsPost(const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<OAISubscriptionGroupRequest> &oai_subscription_group_request = ::OpenAPI::OptionalParam<OAISubscriptionGroupRequest>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_subscription_group_request OAISubscriptionGroupRequest [optional]
    */
    virtual void apiRnsPubSubscriptionsSimulatePost(const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<OAISubscriptionGroupRequest> &oai_subscription_group_request = ::OpenAPI::OptionalParam<OAISubscriptionGroupRequest>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet(const QString &subscription_id, const QString &content_type, const QString &accept);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiRnsPubSubscriptionsGetCallback(OAIHttpRequestWorker *worker);
    void apiRnsPubSubscriptionsIdGetCallback(OAIHttpRequestWorker *worker);
    void apiRnsPubSubscriptionsIdItemsItemIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiRnsPubSubscriptionsIdItemsItemIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiRnsPubSubscriptionsIdItemsPostCallback(OAIHttpRequestWorker *worker);
    void apiRnsPubSubscriptionsIdPatchCallback(OAIHttpRequestWorker *worker);
    void apiRnsPubSubscriptionsIdSimulatePostCallback(OAIHttpRequestWorker *worker);
    void apiRnsPubSubscriptionsPostCallback(OAIHttpRequestWorker *worker);
    void apiRnsPubSubscriptionsSimulatePostCallback(OAIHttpRequestWorker *worker);
    void apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiRnsPubSubscriptionsGetSignal(QList<OAISubscriptionGroupResponse> summary);
    void apiRnsPubSubscriptionsIdGetSignal(OAISubscriptionGroupResponse summary);
    void apiRnsPubSubscriptionsIdItemsItemIdDeleteSignal();
    void apiRnsPubSubscriptionsIdItemsItemIdPatchSignal(OAISubscriptionGroupResponse summary);
    void apiRnsPubSubscriptionsIdItemsPostSignal(OAISubscriptionGroupResponse summary);
    void apiRnsPubSubscriptionsIdPatchSignal(OAISubscriptionGroupResponse summary);
    void apiRnsPubSubscriptionsIdSimulatePostSignal(OAISimulateResponseVO summary);
    void apiRnsPubSubscriptionsPostSignal(OAISubscriptionGroupResponse summary);
    void apiRnsPubSubscriptionsSimulatePostSignal(OAISimulateResponseVO summary);
    void apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetSignal(QList<OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner> summary);


    void apiRnsPubSubscriptionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscriptionGroupResponse> summary);
    void apiRnsPubSubscriptionsIdGetSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionGroupResponse summary);
    void apiRnsPubSubscriptionsIdItemsItemIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiRnsPubSubscriptionsIdItemsItemIdPatchSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionGroupResponse summary);
    void apiRnsPubSubscriptionsIdItemsPostSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionGroupResponse summary);
    void apiRnsPubSubscriptionsIdPatchSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionGroupResponse summary);
    void apiRnsPubSubscriptionsIdSimulatePostSignalFull(OAIHttpRequestWorker *worker, OAISimulateResponseVO summary);
    void apiRnsPubSubscriptionsPostSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionGroupResponse summary);
    void apiRnsPubSubscriptionsSimulatePostSignalFull(OAIHttpRequestWorker *worker, OAISimulateResponseVO summary);
    void apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetSignalFull(OAIHttpRequestWorker *worker, QList<OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner> summary);

    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsGetSignalError() instead")
    void apiRnsPubSubscriptionsGetSignalE(QList<OAISubscriptionGroupResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsGetSignalError(QList<OAISubscriptionGroupResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsIdGetSignalError() instead")
    void apiRnsPubSubscriptionsIdGetSignalE(OAISubscriptionGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsIdGetSignalError(OAISubscriptionGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsIdItemsItemIdDeleteSignalError() instead")
    void apiRnsPubSubscriptionsIdItemsItemIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsIdItemsItemIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsIdItemsItemIdPatchSignalError() instead")
    void apiRnsPubSubscriptionsIdItemsItemIdPatchSignalE(OAISubscriptionGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsIdItemsItemIdPatchSignalError(OAISubscriptionGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsIdItemsPostSignalError() instead")
    void apiRnsPubSubscriptionsIdItemsPostSignalE(OAISubscriptionGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsIdItemsPostSignalError(OAISubscriptionGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsIdPatchSignalError() instead")
    void apiRnsPubSubscriptionsIdPatchSignalE(OAISubscriptionGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsIdPatchSignalError(OAISubscriptionGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsIdSimulatePostSignalError() instead")
    void apiRnsPubSubscriptionsIdSimulatePostSignalE(OAISimulateResponseVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsIdSimulatePostSignalError(OAISimulateResponseVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsPostSignalError() instead")
    void apiRnsPubSubscriptionsPostSignalE(OAISubscriptionGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsPostSignalError(OAISubscriptionGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsSimulatePostSignalError() instead")
    void apiRnsPubSubscriptionsSimulatePostSignalE(OAISimulateResponseVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsSimulatePostSignalError(OAISimulateResponseVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetSignalError() instead")
    void apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetSignalE(QList<OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetSignalError(QList<OAI_api_rns_pub_subscriptions__subscriptionId__conversation_message_get_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsGetSignalErrorFull() instead")
    void apiRnsPubSubscriptionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsIdGetSignalErrorFull() instead")
    void apiRnsPubSubscriptionsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsIdItemsItemIdDeleteSignalErrorFull() instead")
    void apiRnsPubSubscriptionsIdItemsItemIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsIdItemsItemIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsIdItemsItemIdPatchSignalErrorFull() instead")
    void apiRnsPubSubscriptionsIdItemsItemIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsIdItemsItemIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsIdItemsPostSignalErrorFull() instead")
    void apiRnsPubSubscriptionsIdItemsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsIdItemsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsIdPatchSignalErrorFull() instead")
    void apiRnsPubSubscriptionsIdPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsIdPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsIdSimulatePostSignalErrorFull() instead")
    void apiRnsPubSubscriptionsIdSimulatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsIdSimulatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsPostSignalErrorFull() instead")
    void apiRnsPubSubscriptionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsSimulatePostSignalErrorFull() instead")
    void apiRnsPubSubscriptionsSimulatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsSimulatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetSignalErrorFull() instead")
    void apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
