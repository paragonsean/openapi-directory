/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseSettingsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseSettingsResponse::OAIPurchaseSettingsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseSettingsResponse::OAIPurchaseSettingsResponse() {
    this->initializeModel();
}

OAIPurchaseSettingsResponse::~OAIPurchaseSettingsResponse() {}

void OAIPurchaseSettingsResponse::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;
}

void OAIPurchaseSettingsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseSettingsResponse::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;
}

QString OAIPurchaseSettingsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseSettingsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    return obj;
}

QString OAIPurchaseSettingsResponse::getCurrencyCode() const {
    return m_currency_code;
}
void OAIPurchaseSettingsResponse::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIPurchaseSettingsResponse::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIPurchaseSettingsResponse::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

OAIPaymentMethodResponse OAIPurchaseSettingsResponse::getPaymentMethod() const {
    return m_payment_method;
}
void OAIPurchaseSettingsResponse::setPaymentMethod(const OAIPaymentMethodResponse &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIPurchaseSettingsResponse::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIPurchaseSettingsResponse::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

bool OAIPurchaseSettingsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseSettingsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_code_isValid && m_payment_method_isValid && true;
}

} // namespace OpenAPI
