/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimulateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimulateResponse::OAISimulateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimulateResponse::OAISimulateResponse() {
    this->initializeModel();
}

OAISimulateResponse::~OAISimulateResponse() {}

void OAISimulateResponse::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_logistics_info_isSet = false;
    m_logistics_info_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_payment_data_isSet = false;
    m_payment_data_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_selectable_gifts_response_isSet = false;
    m_selectable_gifts_response_isValid = false;

    m_simulation_items_isSet = false;
    m_simulation_items_isValid = false;

    m_totals_isSet = false;
    m_totals_isValid = false;
}

void OAISimulateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimulateResponse::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_logistics_info_isValid = ::OpenAPI::fromJsonValue(m_logistics_info, json[QString("logisticsInfo")]);
    m_logistics_info_isSet = !json[QString("logisticsInfo")].isNull() && m_logistics_info_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_payment_data_isValid = ::OpenAPI::fromJsonValue(m_payment_data, json[QString("paymentData")]);
    m_payment_data_isSet = !json[QString("paymentData")].isNull() && m_payment_data_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_selectable_gifts_response_isValid = ::OpenAPI::fromJsonValue(m_selectable_gifts_response, json[QString("selectableGiftsResponse")]);
    m_selectable_gifts_response_isSet = !json[QString("selectableGiftsResponse")].isNull() && m_selectable_gifts_response_isValid;

    m_simulation_items_isValid = ::OpenAPI::fromJsonValue(m_simulation_items, json[QString("simulationItems")]);
    m_simulation_items_isSet = !json[QString("simulationItems")].isNull() && m_simulation_items_isValid;

    m_totals_isValid = ::OpenAPI::fromJsonValue(m_totals, json[QString("totals")]);
    m_totals_isSet = !json[QString("totals")].isNull() && m_totals_isValid;
}

QString OAISimulateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimulateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_logistics_info.size() > 0) {
        obj.insert(QString("logisticsInfo"), ::OpenAPI::toJsonValue(m_logistics_info));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_payment_data.isSet()) {
        obj.insert(QString("paymentData"), ::OpenAPI::toJsonValue(m_payment_data));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_selectable_gifts_response.size() > 0) {
        obj.insert(QString("selectableGiftsResponse"), ::OpenAPI::toJsonValue(m_selectable_gifts_response));
    }
    if (m_simulation_items.size() > 0) {
        obj.insert(QString("simulationItems"), ::OpenAPI::toJsonValue(m_simulation_items));
    }
    if (m_totals.size() > 0) {
        obj.insert(QString("totals"), ::OpenAPI::toJsonValue(m_totals));
    }
    return obj;
}

QString OAISimulateResponse::getCountry() const {
    return m_country;
}
void OAISimulateResponse::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAISimulateResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAISimulateResponse::is_country_Valid() const{
    return m_country_isValid;
}

QList<OAIOrderItem> OAISimulateResponse::getItems() const {
    return m_items;
}
void OAISimulateResponse::setItems(const QList<OAIOrderItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISimulateResponse::is_items_Set() const{
    return m_items_isSet;
}

bool OAISimulateResponse::is_items_Valid() const{
    return m_items_isValid;
}

QList<OAILogisticsInfo> OAISimulateResponse::getLogisticsInfo() const {
    return m_logistics_info;
}
void OAISimulateResponse::setLogisticsInfo(const QList<OAILogisticsInfo> &logistics_info) {
    m_logistics_info = logistics_info;
    m_logistics_info_isSet = true;
}

bool OAISimulateResponse::is_logistics_info_Set() const{
    return m_logistics_info_isSet;
}

bool OAISimulateResponse::is_logistics_info_Valid() const{
    return m_logistics_info_isValid;
}

QList<OAISimulateMessageResponse> OAISimulateResponse::getMessages() const {
    return m_messages;
}
void OAISimulateResponse::setMessages(const QList<OAISimulateMessageResponse> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAISimulateResponse::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAISimulateResponse::is_messages_Valid() const{
    return m_messages_isValid;
}

OAIPaymentData OAISimulateResponse::getPaymentData() const {
    return m_payment_data;
}
void OAISimulateResponse::setPaymentData(const OAIPaymentData &payment_data) {
    m_payment_data = payment_data;
    m_payment_data_isSet = true;
}

bool OAISimulateResponse::is_payment_data_Set() const{
    return m_payment_data_isSet;
}

bool OAISimulateResponse::is_payment_data_Valid() const{
    return m_payment_data_isValid;
}

QString OAISimulateResponse::getPostalCode() const {
    return m_postal_code;
}
void OAISimulateResponse::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAISimulateResponse::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAISimulateResponse::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QList<OAIPurchaseContextSelectableGiftsResponse> OAISimulateResponse::getSelectableGiftsResponse() const {
    return m_selectable_gifts_response;
}
void OAISimulateResponse::setSelectableGiftsResponse(const QList<OAIPurchaseContextSelectableGiftsResponse> &selectable_gifts_response) {
    m_selectable_gifts_response = selectable_gifts_response;
    m_selectable_gifts_response_isSet = true;
}

bool OAISimulateResponse::is_selectable_gifts_response_Set() const{
    return m_selectable_gifts_response_isSet;
}

bool OAISimulateResponse::is_selectable_gifts_response_Valid() const{
    return m_selectable_gifts_response_isValid;
}

QList<OAISimulationItemResult> OAISimulateResponse::getSimulationItems() const {
    return m_simulation_items;
}
void OAISimulateResponse::setSimulationItems(const QList<OAISimulationItemResult> &simulation_items) {
    m_simulation_items = simulation_items;
    m_simulation_items_isSet = true;
}

bool OAISimulateResponse::is_simulation_items_Set() const{
    return m_simulation_items_isSet;
}

bool OAISimulateResponse::is_simulation_items_Valid() const{
    return m_simulation_items_isValid;
}

QList<OAITotalizationResponse> OAISimulateResponse::getTotals() const {
    return m_totals;
}
void OAISimulateResponse::setTotals(const QList<OAITotalizationResponse> &totals) {
    m_totals = totals;
    m_totals_isSet = true;
}

bool OAISimulateResponse::is_totals_Set() const{
    return m_totals_isSet;
}

bool OAISimulateResponse::is_totals_Valid() const{
    return m_totals_isValid;
}

bool OAISimulateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logistics_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selectable_gifts_response.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulation_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimulateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
