/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentMethodResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentMethodResponse::OAIPaymentMethodResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentMethodResponse::OAIPaymentMethodResponse() {
    this->initializeModel();
}

OAIPaymentMethodResponse::~OAIPaymentMethodResponse() {}

void OAIPaymentMethodResponse::initializeModel() {

    m_installments_isSet = false;
    m_installments_isValid = false;

    m_payment_account_id_isSet = false;
    m_payment_account_id_isValid = false;

    m_payment_system_isSet = false;
    m_payment_system_isValid = false;
}

void OAIPaymentMethodResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentMethodResponse::fromJsonObject(QJsonObject json) {

    m_installments_isValid = ::OpenAPI::fromJsonValue(m_installments, json[QString("installments")]);
    m_installments_isSet = !json[QString("installments")].isNull() && m_installments_isValid;

    m_payment_account_id_isValid = ::OpenAPI::fromJsonValue(m_payment_account_id, json[QString("paymentAccountId")]);
    m_payment_account_id_isSet = !json[QString("paymentAccountId")].isNull() && m_payment_account_id_isValid;

    m_payment_system_isValid = ::OpenAPI::fromJsonValue(m_payment_system, json[QString("paymentSystem")]);
    m_payment_system_isSet = !json[QString("paymentSystem")].isNull() && m_payment_system_isValid;
}

QString OAIPaymentMethodResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentMethodResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_installments_isSet) {
        obj.insert(QString("installments"), ::OpenAPI::toJsonValue(m_installments));
    }
    if (m_payment_account_id_isSet) {
        obj.insert(QString("paymentAccountId"), ::OpenAPI::toJsonValue(m_payment_account_id));
    }
    if (m_payment_system_isSet) {
        obj.insert(QString("paymentSystem"), ::OpenAPI::toJsonValue(m_payment_system));
    }
    return obj;
}

qint32 OAIPaymentMethodResponse::getInstallments() const {
    return m_installments;
}
void OAIPaymentMethodResponse::setInstallments(const qint32 &installments) {
    m_installments = installments;
    m_installments_isSet = true;
}

bool OAIPaymentMethodResponse::is_installments_Set() const{
    return m_installments_isSet;
}

bool OAIPaymentMethodResponse::is_installments_Valid() const{
    return m_installments_isValid;
}

QString OAIPaymentMethodResponse::getPaymentAccountId() const {
    return m_payment_account_id;
}
void OAIPaymentMethodResponse::setPaymentAccountId(const QString &payment_account_id) {
    m_payment_account_id = payment_account_id;
    m_payment_account_id_isSet = true;
}

bool OAIPaymentMethodResponse::is_payment_account_id_Set() const{
    return m_payment_account_id_isSet;
}

bool OAIPaymentMethodResponse::is_payment_account_id_Valid() const{
    return m_payment_account_id_isValid;
}

QString OAIPaymentMethodResponse::getPaymentSystem() const {
    return m_payment_system;
}
void OAIPaymentMethodResponse::setPaymentSystem(const QString &payment_system) {
    m_payment_system = payment_system;
    m_payment_system_isSet = true;
}

bool OAIPaymentMethodResponse::is_payment_system_Set() const{
    return m_payment_system_isSet;
}

bool OAIPaymentMethodResponse::is_payment_system_Valid() const{
    return m_payment_system_isValid;
}

bool OAIPaymentMethodResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_installments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_system_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentMethodResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_payment_system_isValid && true;
}

} // namespace OpenAPI
