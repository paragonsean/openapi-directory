/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITotalizationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITotalizationResponse::OAITotalizationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITotalizationResponse::OAITotalizationResponse() {
    this->initializeModel();
}

OAITotalizationResponse::~OAITotalizationResponse() {}

void OAITotalizationResponse::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_as_int_isSet = false;
    m_value_as_int_isValid = false;
}

void OAITotalizationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITotalizationResponse::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_value_as_int_isValid = ::OpenAPI::fromJsonValue(m_value_as_int, json[QString("valueAsInt")]);
    m_value_as_int_isSet = !json[QString("valueAsInt")].isNull() && m_value_as_int_isValid;
}

QString OAITotalizationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITotalizationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_as_int_isSet) {
        obj.insert(QString("valueAsInt"), ::OpenAPI::toJsonValue(m_value_as_int));
    }
    return obj;
}

QString OAITotalizationResponse::getId() const {
    return m_id;
}
void OAITotalizationResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITotalizationResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAITotalizationResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITotalizationResponse::getName() const {
    return m_name;
}
void OAITotalizationResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITotalizationResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAITotalizationResponse::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAITotalizationResponse::getValueAsInt() const {
    return m_value_as_int;
}
void OAITotalizationResponse::setValueAsInt(const qint64 &value_as_int) {
    m_value_as_int = value_as_int;
    m_value_as_int_isSet = true;
}

bool OAITotalizationResponse::is_value_as_int_Set() const{
    return m_value_as_int_isSet;
}

bool OAITotalizationResponse::is_value_as_int_Valid() const{
    return m_value_as_int_isValid;
}

bool OAITotalizationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_as_int_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITotalizationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
