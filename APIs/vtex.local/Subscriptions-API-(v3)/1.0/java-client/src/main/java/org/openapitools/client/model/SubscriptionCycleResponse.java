/*
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SimulationItemResult;
import org.openapitools.client.model.SubscriptionCycleContext;
import org.openapitools.client.model.SubscriptionCycleOrderInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubscriptionCycleResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:48.114297-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionCycleResponse {
  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private SubscriptionCycleContext context;

  public static final String SERIALIZED_NAME_CUSTOMER_EMAIL = "customerEmail";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_EMAIL)
  private String customerEmail;

  public static final String SERIALIZED_NAME_CYCLE_COUNT = "cycleCount";
  @SerializedName(SERIALIZED_NAME_CYCLE_COUNT)
  private Integer cycleCount;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_IN_RETRY = "isInRetry";
  @SerializedName(SERIALIZED_NAME_IS_IN_RETRY)
  private Boolean isInRetry;

  public static final String SERIALIZED_NAME_LAST_UPDATE = "lastUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
  private OffsetDateTime lastUpdate;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_ORDER_INFO = "orderInfo";
  @SerializedName(SERIALIZED_NAME_ORDER_INFO)
  private SubscriptionCycleOrderInfo orderInfo;

  public static final String SERIALIZED_NAME_SIMULATION_ITEMS = "simulationItems";
  @SerializedName(SERIALIZED_NAME_SIMULATION_ITEMS)
  private List<SimulationItemResult> simulationItems;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public SubscriptionCycleResponse() {
  }

  public SubscriptionCycleResponse context(SubscriptionCycleContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public SubscriptionCycleContext getContext() {
    return context;
  }

  public void setContext(SubscriptionCycleContext context) {
    this.context = context;
  }


  public SubscriptionCycleResponse customerEmail(String customerEmail) {
    this.customerEmail = customerEmail;
    return this;
  }

  /**
   * Get customerEmail
   * @return customerEmail
   */
  @javax.annotation.Nullable
  public String getCustomerEmail() {
    return customerEmail;
  }

  public void setCustomerEmail(String customerEmail) {
    this.customerEmail = customerEmail;
  }


  public SubscriptionCycleResponse cycleCount(Integer cycleCount) {
    this.cycleCount = cycleCount;
    return this;
  }

  /**
   * Get cycleCount
   * @return cycleCount
   */
  @javax.annotation.Nullable
  public Integer getCycleCount() {
    return cycleCount;
  }

  public void setCycleCount(Integer cycleCount) {
    this.cycleCount = cycleCount;
  }


  public SubscriptionCycleResponse date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public SubscriptionCycleResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SubscriptionCycleResponse isInRetry(Boolean isInRetry) {
    this.isInRetry = isInRetry;
    return this;
  }

  /**
   * Get isInRetry
   * @return isInRetry
   */
  @javax.annotation.Nullable
  public Boolean getIsInRetry() {
    return isInRetry;
  }

  public void setIsInRetry(Boolean isInRetry) {
    this.isInRetry = isInRetry;
  }


  public SubscriptionCycleResponse lastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * Get lastUpdate
   * @return lastUpdate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public SubscriptionCycleResponse message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public SubscriptionCycleResponse orderInfo(SubscriptionCycleOrderInfo orderInfo) {
    this.orderInfo = orderInfo;
    return this;
  }

  /**
   * Get orderInfo
   * @return orderInfo
   */
  @javax.annotation.Nullable
  public SubscriptionCycleOrderInfo getOrderInfo() {
    return orderInfo;
  }

  public void setOrderInfo(SubscriptionCycleOrderInfo orderInfo) {
    this.orderInfo = orderInfo;
  }


  public SubscriptionCycleResponse simulationItems(List<SimulationItemResult> simulationItems) {
    this.simulationItems = simulationItems;
    return this;
  }

  public SubscriptionCycleResponse addSimulationItemsItem(SimulationItemResult simulationItemsItem) {
    if (this.simulationItems == null) {
      this.simulationItems = new ArrayList<>();
    }
    this.simulationItems.add(simulationItemsItem);
    return this;
  }

  /**
   * Get simulationItems
   * @return simulationItems
   */
  @javax.annotation.Nullable
  public List<SimulationItemResult> getSimulationItems() {
    return simulationItems;
  }

  public void setSimulationItems(List<SimulationItemResult> simulationItems) {
    this.simulationItems = simulationItems;
  }


  public SubscriptionCycleResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public SubscriptionCycleResponse subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Get subscriptionId
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionCycleResponse subscriptionCycleResponse = (SubscriptionCycleResponse) o;
    return Objects.equals(this.context, subscriptionCycleResponse.context) &&
        Objects.equals(this.customerEmail, subscriptionCycleResponse.customerEmail) &&
        Objects.equals(this.cycleCount, subscriptionCycleResponse.cycleCount) &&
        Objects.equals(this.date, subscriptionCycleResponse.date) &&
        Objects.equals(this.id, subscriptionCycleResponse.id) &&
        Objects.equals(this.isInRetry, subscriptionCycleResponse.isInRetry) &&
        Objects.equals(this.lastUpdate, subscriptionCycleResponse.lastUpdate) &&
        Objects.equals(this.message, subscriptionCycleResponse.message) &&
        Objects.equals(this.orderInfo, subscriptionCycleResponse.orderInfo) &&
        Objects.equals(this.simulationItems, subscriptionCycleResponse.simulationItems) &&
        Objects.equals(this.status, subscriptionCycleResponse.status) &&
        Objects.equals(this.subscriptionId, subscriptionCycleResponse.subscriptionId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, customerEmail, cycleCount, date, id, isInRetry, lastUpdate, message, orderInfo, simulationItems, status, subscriptionId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionCycleResponse {\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    customerEmail: ").append(toIndentedString(customerEmail)).append("\n");
    sb.append("    cycleCount: ").append(toIndentedString(cycleCount)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isInRetry: ").append(toIndentedString(isInRetry)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    orderInfo: ").append(toIndentedString(orderInfo)).append("\n");
    sb.append("    simulationItems: ").append(toIndentedString(simulationItems)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("context");
    openapiFields.add("customerEmail");
    openapiFields.add("cycleCount");
    openapiFields.add("date");
    openapiFields.add("id");
    openapiFields.add("isInRetry");
    openapiFields.add("lastUpdate");
    openapiFields.add("message");
    openapiFields.add("orderInfo");
    openapiFields.add("simulationItems");
    openapiFields.add("status");
    openapiFields.add("subscriptionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionCycleResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionCycleResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionCycleResponse is not found in the empty JSON string", SubscriptionCycleResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionCycleResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionCycleResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        SubscriptionCycleContext.validateJsonElement(jsonObj.get("context"));
      }
      if ((jsonObj.get("customerEmail") != null && !jsonObj.get("customerEmail").isJsonNull()) && !jsonObj.get("customerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerEmail").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `orderInfo`
      if (jsonObj.get("orderInfo") != null && !jsonObj.get("orderInfo").isJsonNull()) {
        SubscriptionCycleOrderInfo.validateJsonElement(jsonObj.get("orderInfo"));
      }
      if (jsonObj.get("simulationItems") != null && !jsonObj.get("simulationItems").isJsonNull()) {
        JsonArray jsonArraysimulationItems = jsonObj.getAsJsonArray("simulationItems");
        if (jsonArraysimulationItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("simulationItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `simulationItems` to be an array in the JSON string but got `%s`", jsonObj.get("simulationItems").toString()));
          }

          // validate the optional field `simulationItems` (array)
          for (int i = 0; i < jsonArraysimulationItems.size(); i++) {
            SimulationItemResult.validateJsonElement(jsonArraysimulationItems.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionCycleResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionCycleResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionCycleResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionCycleResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionCycleResponse>() {
           @Override
           public void write(JsonWriter out, SubscriptionCycleResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionCycleResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionCycleResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionCycleResponse
   * @throws IOException if the JSON string is invalid with respect to SubscriptionCycleResponse
   */
  public static SubscriptionCycleResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionCycleResponse.class);
  }

  /**
   * Convert an instance of SubscriptionCycleResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

