/*
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner;
import org.openapitools.client.model.SimulateResponseVO;
import org.openapitools.client.model.SubscriptionGroupRequest;
import org.openapitools.client.model.SubscriptionGroupResponse;
import org.openapitools.client.model.SubscriptionThinItemRequest;
import org.openapitools.client.model.SubscriptionUpdateRequestV3;
import org.openapitools.client.model.UpdateItemInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiRnsPubSubscriptionsGet
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param customerEmail Customer that owns the subscription. Defaults to the current logged user. (optional)
     * @param status Current subscription status (optional)
     * @param addressId Id from the address used as shipping address (optional)
     * @param paymentId Id from the payment used as payment method (optional)
     * @param planId Id from the plan that the subscription belongs to (optional)
     * @param nextPurchaseDate Date for the next cycle (optional)
     * @param originalOrderId Id from the order that generated the subscription (optional)
     * @param page Page used for pagination (optional, default to 1)
     * @param size Page size used for pagination (optional, default to 15)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested subscriptions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsGetCall(String contentType, String accept, String customerEmail, String status, String addressId, String paymentId, String planId, String nextPurchaseDate, String originalOrderId, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rns/pub/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerEmail", customerEmail));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (addressId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addressId", addressId));
        }

        if (paymentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentId", paymentId));
        }

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        if (nextPurchaseDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextPurchaseDate", nextPurchaseDate));
        }

        if (originalOrderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originalOrderId", originalOrderId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRnsPubSubscriptionsGetValidateBeforeCall(String contentType, String accept, String customerEmail, String status, String addressId, String paymentId, String planId, String nextPurchaseDate, String originalOrderId, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsGet(Async)");
        }

        return apiRnsPubSubscriptionsGetCall(contentType, accept, customerEmail, status, addressId, paymentId, planId, nextPurchaseDate, originalOrderId, page, size, _callback);

    }

    /**
     * List subscriptions
     * List subscriptions filtering by some arguments.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param customerEmail Customer that owns the subscription. Defaults to the current logged user. (optional)
     * @param status Current subscription status (optional)
     * @param addressId Id from the address used as shipping address (optional)
     * @param paymentId Id from the payment used as payment method (optional)
     * @param planId Id from the plan that the subscription belongs to (optional)
     * @param nextPurchaseDate Date for the next cycle (optional)
     * @param originalOrderId Id from the order that generated the subscription (optional)
     * @param page Page used for pagination (optional, default to 1)
     * @param size Page size used for pagination (optional, default to 15)
     * @return List&lt;SubscriptionGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested subscriptions </td><td>  -  </td></tr>
     </table>
     */
    public List<SubscriptionGroupResponse> apiRnsPubSubscriptionsGet(String contentType, String accept, String customerEmail, String status, String addressId, String paymentId, String planId, String nextPurchaseDate, String originalOrderId, Integer page, Integer size) throws ApiException {
        ApiResponse<List<SubscriptionGroupResponse>> localVarResp = apiRnsPubSubscriptionsGetWithHttpInfo(contentType, accept, customerEmail, status, addressId, paymentId, planId, nextPurchaseDate, originalOrderId, page, size);
        return localVarResp.getData();
    }

    /**
     * List subscriptions
     * List subscriptions filtering by some arguments.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param customerEmail Customer that owns the subscription. Defaults to the current logged user. (optional)
     * @param status Current subscription status (optional)
     * @param addressId Id from the address used as shipping address (optional)
     * @param paymentId Id from the payment used as payment method (optional)
     * @param planId Id from the plan that the subscription belongs to (optional)
     * @param nextPurchaseDate Date for the next cycle (optional)
     * @param originalOrderId Id from the order that generated the subscription (optional)
     * @param page Page used for pagination (optional, default to 1)
     * @param size Page size used for pagination (optional, default to 15)
     * @return ApiResponse&lt;List&lt;SubscriptionGroupResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested subscriptions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SubscriptionGroupResponse>> apiRnsPubSubscriptionsGetWithHttpInfo(String contentType, String accept, String customerEmail, String status, String addressId, String paymentId, String planId, String nextPurchaseDate, String originalOrderId, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = apiRnsPubSubscriptionsGetValidateBeforeCall(contentType, accept, customerEmail, status, addressId, paymentId, planId, nextPurchaseDate, originalOrderId, page, size, null);
        Type localVarReturnType = new TypeToken<List<SubscriptionGroupResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List subscriptions (asynchronously)
     * List subscriptions filtering by some arguments.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param customerEmail Customer that owns the subscription. Defaults to the current logged user. (optional)
     * @param status Current subscription status (optional)
     * @param addressId Id from the address used as shipping address (optional)
     * @param paymentId Id from the payment used as payment method (optional)
     * @param planId Id from the plan that the subscription belongs to (optional)
     * @param nextPurchaseDate Date for the next cycle (optional)
     * @param originalOrderId Id from the order that generated the subscription (optional)
     * @param page Page used for pagination (optional, default to 1)
     * @param size Page size used for pagination (optional, default to 15)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested subscriptions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsGetAsync(String contentType, String accept, String customerEmail, String status, String addressId, String paymentId, String planId, String nextPurchaseDate, String originalOrderId, Integer page, Integer size, final ApiCallback<List<SubscriptionGroupResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRnsPubSubscriptionsGetValidateBeforeCall(contentType, accept, customerEmail, status, addressId, paymentId, planId, nextPurchaseDate, originalOrderId, page, size, _callback);
        Type localVarReturnType = new TypeToken<List<SubscriptionGroupResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRnsPubSubscriptionsIdGet
     * @param id ID from the target subscription. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsIdGetCall(String id, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rns/pub/subscriptions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRnsPubSubscriptionsIdGetValidateBeforeCall(String id, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiRnsPubSubscriptionsIdGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsIdGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsIdGet(Async)");
        }

        return apiRnsPubSubscriptionsIdGetCall(id, contentType, accept, _callback);

    }

    /**
     * Get subscription details
     * Retrieve a specific subscription by its ID.
     * @param id ID from the target subscription. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return SubscriptionGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested subscription </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionGroupResponse apiRnsPubSubscriptionsIdGet(String id, String contentType, String accept) throws ApiException {
        ApiResponse<SubscriptionGroupResponse> localVarResp = apiRnsPubSubscriptionsIdGetWithHttpInfo(id, contentType, accept);
        return localVarResp.getData();
    }

    /**
     * Get subscription details
     * Retrieve a specific subscription by its ID.
     * @param id ID from the target subscription. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;SubscriptionGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested subscription </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionGroupResponse> apiRnsPubSubscriptionsIdGetWithHttpInfo(String id, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = apiRnsPubSubscriptionsIdGetValidateBeforeCall(id, contentType, accept, null);
        Type localVarReturnType = new TypeToken<SubscriptionGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get subscription details (asynchronously)
     * Retrieve a specific subscription by its ID.
     * @param id ID from the target subscription. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsIdGetAsync(String id, String contentType, String accept, final ApiCallback<SubscriptionGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRnsPubSubscriptionsIdGetValidateBeforeCall(id, contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRnsPubSubscriptionsIdItemsItemIdDelete
     * @param id Id from the target subscription (required)
     * @param itemId Id from the subscription item that will be removed (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsIdItemsItemIdDeleteCall(String id, String itemId, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rns/pub/subscriptions/{id}/items/{itemId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRnsPubSubscriptionsIdItemsItemIdDeleteValidateBeforeCall(String id, String itemId, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiRnsPubSubscriptionsIdItemsItemIdDelete(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling apiRnsPubSubscriptionsIdItemsItemIdDelete(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsIdItemsItemIdDelete(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsIdItemsItemIdDelete(Async)");
        }

        return apiRnsPubSubscriptionsIdItemsItemIdDeleteCall(id, itemId, contentType, accept, _callback);

    }

    /**
     * Remove items from a subscription.
     * Removes a specific item from a given subscription
     * @param id Id from the target subscription (required)
     * @param itemId Id from the subscription item that will be removed (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void apiRnsPubSubscriptionsIdItemsItemIdDelete(String id, String itemId, String contentType, String accept) throws ApiException {
        apiRnsPubSubscriptionsIdItemsItemIdDeleteWithHttpInfo(id, itemId, contentType, accept);
    }

    /**
     * Remove items from a subscription.
     * Removes a specific item from a given subscription
     * @param id Id from the target subscription (required)
     * @param itemId Id from the subscription item that will be removed (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiRnsPubSubscriptionsIdItemsItemIdDeleteWithHttpInfo(String id, String itemId, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = apiRnsPubSubscriptionsIdItemsItemIdDeleteValidateBeforeCall(id, itemId, contentType, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove items from a subscription. (asynchronously)
     * Removes a specific item from a given subscription
     * @param id Id from the target subscription (required)
     * @param itemId Id from the subscription item that will be removed (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsIdItemsItemIdDeleteAsync(String id, String itemId, String contentType, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRnsPubSubscriptionsIdItemsItemIdDeleteValidateBeforeCall(id, itemId, contentType, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRnsPubSubscriptionsIdItemsItemIdPatch
     * @param id Id from the target subscription (required)
     * @param itemId Id from the target item (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param updateItemInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsIdItemsItemIdPatchCall(String id, String itemId, String contentType, String accept, UpdateItemInput updateItemInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateItemInput;

        // create path and map variables
        String localVarPath = "/api/rns/pub/subscriptions/{id}/items/{itemId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRnsPubSubscriptionsIdItemsItemIdPatchValidateBeforeCall(String id, String itemId, String contentType, String accept, UpdateItemInput updateItemInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiRnsPubSubscriptionsIdItemsItemIdPatch(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling apiRnsPubSubscriptionsIdItemsItemIdPatch(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsIdItemsItemIdPatch(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsIdItemsItemIdPatch(Async)");
        }

        return apiRnsPubSubscriptionsIdItemsItemIdPatchCall(id, itemId, contentType, accept, updateItemInput, _callback);

    }

    /**
     * Edit items on a subscription.
     * Edit a given item on a specific subscription
     * @param id Id from the target subscription (required)
     * @param itemId Id from the target item (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param updateItemInput  (optional)
     * @return SubscriptionGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription updated </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionGroupResponse apiRnsPubSubscriptionsIdItemsItemIdPatch(String id, String itemId, String contentType, String accept, UpdateItemInput updateItemInput) throws ApiException {
        ApiResponse<SubscriptionGroupResponse> localVarResp = apiRnsPubSubscriptionsIdItemsItemIdPatchWithHttpInfo(id, itemId, contentType, accept, updateItemInput);
        return localVarResp.getData();
    }

    /**
     * Edit items on a subscription.
     * Edit a given item on a specific subscription
     * @param id Id from the target subscription (required)
     * @param itemId Id from the target item (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param updateItemInput  (optional)
     * @return ApiResponse&lt;SubscriptionGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionGroupResponse> apiRnsPubSubscriptionsIdItemsItemIdPatchWithHttpInfo(String id, String itemId, String contentType, String accept, UpdateItemInput updateItemInput) throws ApiException {
        okhttp3.Call localVarCall = apiRnsPubSubscriptionsIdItemsItemIdPatchValidateBeforeCall(id, itemId, contentType, accept, updateItemInput, null);
        Type localVarReturnType = new TypeToken<SubscriptionGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit items on a subscription. (asynchronously)
     * Edit a given item on a specific subscription
     * @param id Id from the target subscription (required)
     * @param itemId Id from the target item (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param updateItemInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsIdItemsItemIdPatchAsync(String id, String itemId, String contentType, String accept, UpdateItemInput updateItemInput, final ApiCallback<SubscriptionGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRnsPubSubscriptionsIdItemsItemIdPatchValidateBeforeCall(id, itemId, contentType, accept, updateItemInput, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRnsPubSubscriptionsIdItemsPost
     * @param id ID from the target subscription (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionThinItemRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsIdItemsPostCall(String id, String contentType, String accept, SubscriptionThinItemRequest subscriptionThinItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionThinItemRequest;

        // create path and map variables
        String localVarPath = "/api/rns/pub/subscriptions/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRnsPubSubscriptionsIdItemsPostValidateBeforeCall(String id, String contentType, String accept, SubscriptionThinItemRequest subscriptionThinItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiRnsPubSubscriptionsIdItemsPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsIdItemsPost(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsIdItemsPost(Async)");
        }

        return apiRnsPubSubscriptionsIdItemsPostCall(id, contentType, accept, subscriptionThinItemRequest, _callback);

    }

    /**
     * Add item to subscription
     * Add a new item to a given subscription.
     * @param id ID from the target subscription (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionThinItemRequest  (optional)
     * @return SubscriptionGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionGroupResponse apiRnsPubSubscriptionsIdItemsPost(String id, String contentType, String accept, SubscriptionThinItemRequest subscriptionThinItemRequest) throws ApiException {
        ApiResponse<SubscriptionGroupResponse> localVarResp = apiRnsPubSubscriptionsIdItemsPostWithHttpInfo(id, contentType, accept, subscriptionThinItemRequest);
        return localVarResp.getData();
    }

    /**
     * Add item to subscription
     * Add a new item to a given subscription.
     * @param id ID from the target subscription (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionThinItemRequest  (optional)
     * @return ApiResponse&lt;SubscriptionGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionGroupResponse> apiRnsPubSubscriptionsIdItemsPostWithHttpInfo(String id, String contentType, String accept, SubscriptionThinItemRequest subscriptionThinItemRequest) throws ApiException {
        okhttp3.Call localVarCall = apiRnsPubSubscriptionsIdItemsPostValidateBeforeCall(id, contentType, accept, subscriptionThinItemRequest, null);
        Type localVarReturnType = new TypeToken<SubscriptionGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add item to subscription (asynchronously)
     * Add a new item to a given subscription.
     * @param id ID from the target subscription (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionThinItemRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsIdItemsPostAsync(String id, String contentType, String accept, SubscriptionThinItemRequest subscriptionThinItemRequest, final ApiCallback<SubscriptionGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRnsPubSubscriptionsIdItemsPostValidateBeforeCall(id, contentType, accept, subscriptionThinItemRequest, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRnsPubSubscriptionsIdPatch
     * @param id ID from the given subscription. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionUpdateRequestV3  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsIdPatchCall(String id, String contentType, String accept, SubscriptionUpdateRequestV3 subscriptionUpdateRequestV3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionUpdateRequestV3;

        // create path and map variables
        String localVarPath = "/api/rns/pub/subscriptions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRnsPubSubscriptionsIdPatchValidateBeforeCall(String id, String contentType, String accept, SubscriptionUpdateRequestV3 subscriptionUpdateRequestV3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiRnsPubSubscriptionsIdPatch(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsIdPatch(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsIdPatch(Async)");
        }

        return apiRnsPubSubscriptionsIdPatchCall(id, contentType, accept, subscriptionUpdateRequestV3, _callback);

    }

    /**
     * Update subscription
     * Update a specific subscription.
     * @param id ID from the given subscription. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionUpdateRequestV3  (optional)
     * @return SubscriptionGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionGroupResponse apiRnsPubSubscriptionsIdPatch(String id, String contentType, String accept, SubscriptionUpdateRequestV3 subscriptionUpdateRequestV3) throws ApiException {
        ApiResponse<SubscriptionGroupResponse> localVarResp = apiRnsPubSubscriptionsIdPatchWithHttpInfo(id, contentType, accept, subscriptionUpdateRequestV3);
        return localVarResp.getData();
    }

    /**
     * Update subscription
     * Update a specific subscription.
     * @param id ID from the given subscription. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionUpdateRequestV3  (optional)
     * @return ApiResponse&lt;SubscriptionGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionGroupResponse> apiRnsPubSubscriptionsIdPatchWithHttpInfo(String id, String contentType, String accept, SubscriptionUpdateRequestV3 subscriptionUpdateRequestV3) throws ApiException {
        okhttp3.Call localVarCall = apiRnsPubSubscriptionsIdPatchValidateBeforeCall(id, contentType, accept, subscriptionUpdateRequestV3, null);
        Type localVarReturnType = new TypeToken<SubscriptionGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update subscription (asynchronously)
     * Update a specific subscription.
     * @param id ID from the given subscription. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionUpdateRequestV3  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsIdPatchAsync(String id, String contentType, String accept, SubscriptionUpdateRequestV3 subscriptionUpdateRequestV3, final ApiCallback<SubscriptionGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRnsPubSubscriptionsIdPatchValidateBeforeCall(id, contentType, accept, subscriptionUpdateRequestV3, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRnsPubSubscriptionsIdSimulatePost
     * @param id Id from the target subscription (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simulation result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsIdSimulatePostCall(String id, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rns/pub/subscriptions/{id}/simulate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRnsPubSubscriptionsIdSimulatePostValidateBeforeCall(String id, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiRnsPubSubscriptionsIdSimulatePost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsIdSimulatePost(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsIdSimulatePost(Async)");
        }

        return apiRnsPubSubscriptionsIdSimulatePostCall(id, contentType, accept, _callback);

    }

    /**
     * Calculate the current prices for a specific subscription
     * Simulates an order made by the specific subscription on checkout and retrieves the current price for items and shipping.
     * @param id Id from the target subscription (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return SimulateResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simulation result </td><td>  -  </td></tr>
     </table>
     */
    public SimulateResponseVO apiRnsPubSubscriptionsIdSimulatePost(String id, String contentType, String accept) throws ApiException {
        ApiResponse<SimulateResponseVO> localVarResp = apiRnsPubSubscriptionsIdSimulatePostWithHttpInfo(id, contentType, accept);
        return localVarResp.getData();
    }

    /**
     * Calculate the current prices for a specific subscription
     * Simulates an order made by the specific subscription on checkout and retrieves the current price for items and shipping.
     * @param id Id from the target subscription (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;SimulateResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simulation result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimulateResponseVO> apiRnsPubSubscriptionsIdSimulatePostWithHttpInfo(String id, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = apiRnsPubSubscriptionsIdSimulatePostValidateBeforeCall(id, contentType, accept, null);
        Type localVarReturnType = new TypeToken<SimulateResponseVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate the current prices for a specific subscription (asynchronously)
     * Simulates an order made by the specific subscription on checkout and retrieves the current price for items and shipping.
     * @param id Id from the target subscription (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simulation result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsIdSimulatePostAsync(String id, String contentType, String accept, final ApiCallback<SimulateResponseVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRnsPubSubscriptionsIdSimulatePostValidateBeforeCall(id, contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<SimulateResponseVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRnsPubSubscriptionsPost
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionGroupRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscription created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsPostCall(String contentType, String accept, SubscriptionGroupRequest subscriptionGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionGroupRequest;

        // create path and map variables
        String localVarPath = "/api/rns/pub/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRnsPubSubscriptionsPostValidateBeforeCall(String contentType, String accept, SubscriptionGroupRequest subscriptionGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsPost(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsPost(Async)");
        }

        return apiRnsPubSubscriptionsPostCall(contentType, accept, subscriptionGroupRequest, _callback);

    }

    /**
     * Create subscription
     * Create a new subscription.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionGroupRequest  (optional)
     * @return SubscriptionGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscription created </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionGroupResponse apiRnsPubSubscriptionsPost(String contentType, String accept, SubscriptionGroupRequest subscriptionGroupRequest) throws ApiException {
        ApiResponse<SubscriptionGroupResponse> localVarResp = apiRnsPubSubscriptionsPostWithHttpInfo(contentType, accept, subscriptionGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Create subscription
     * Create a new subscription.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionGroupRequest  (optional)
     * @return ApiResponse&lt;SubscriptionGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscription created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionGroupResponse> apiRnsPubSubscriptionsPostWithHttpInfo(String contentType, String accept, SubscriptionGroupRequest subscriptionGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = apiRnsPubSubscriptionsPostValidateBeforeCall(contentType, accept, subscriptionGroupRequest, null);
        Type localVarReturnType = new TypeToken<SubscriptionGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create subscription (asynchronously)
     * Create a new subscription.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionGroupRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Subscription created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsPostAsync(String contentType, String accept, SubscriptionGroupRequest subscriptionGroupRequest, final ApiCallback<SubscriptionGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRnsPubSubscriptionsPostValidateBeforeCall(contentType, accept, subscriptionGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRnsPubSubscriptionsSimulatePost
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionGroupRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simulation result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsSimulatePostCall(String contentType, String accept, SubscriptionGroupRequest subscriptionGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionGroupRequest;

        // create path and map variables
        String localVarPath = "/api/rns/pub/subscriptions/simulate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/*+json",
            "application/json",
            "application/json-patch+json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRnsPubSubscriptionsSimulatePostValidateBeforeCall(String contentType, String accept, SubscriptionGroupRequest subscriptionGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsSimulatePost(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsSimulatePost(Async)");
        }

        return apiRnsPubSubscriptionsSimulatePostCall(contentType, accept, subscriptionGroupRequest, _callback);

    }

    /**
     * Calculate the current prices for the provided subscription template
     * Simulates an order made by subscriptions on checkout and retrieves the current price for items and shipping.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionGroupRequest  (optional)
     * @return SimulateResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simulation result </td><td>  -  </td></tr>
     </table>
     */
    public SimulateResponseVO apiRnsPubSubscriptionsSimulatePost(String contentType, String accept, SubscriptionGroupRequest subscriptionGroupRequest) throws ApiException {
        ApiResponse<SimulateResponseVO> localVarResp = apiRnsPubSubscriptionsSimulatePostWithHttpInfo(contentType, accept, subscriptionGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Calculate the current prices for the provided subscription template
     * Simulates an order made by subscriptions on checkout and retrieves the current price for items and shipping.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionGroupRequest  (optional)
     * @return ApiResponse&lt;SimulateResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simulation result </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimulateResponseVO> apiRnsPubSubscriptionsSimulatePostWithHttpInfo(String contentType, String accept, SubscriptionGroupRequest subscriptionGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = apiRnsPubSubscriptionsSimulatePostValidateBeforeCall(contentType, accept, subscriptionGroupRequest, null);
        Type localVarReturnType = new TypeToken<SimulateResponseVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate the current prices for the provided subscription template (asynchronously)
     * Simulates an order made by subscriptions on checkout and retrieves the current price for items and shipping.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param subscriptionGroupRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Simulation result </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsSimulatePostAsync(String contentType, String accept, SubscriptionGroupRequest subscriptionGroupRequest, final ApiCallback<SimulateResponseVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRnsPubSubscriptionsSimulatePostValidateBeforeCall(contentType, accept, subscriptionGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<SimulateResponseVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet
     * @param subscriptionId ID of the subscription. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetCall(String subscriptionId, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rns/pub/subscriptions/{subscriptionId}/conversation-message"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetValidateBeforeCall(String subscriptionId, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet(Async)");
        }

        return apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetCall(subscriptionId, contentType, accept, _callback);

    }

    /**
     * Get conversation messages
     * Retrieve all conversation messages sent to a customer regarding a given subscription.
     * @param subscriptionId ID of the subscription. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return List&lt;ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner> apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet(String subscriptionId, String contentType, String accept) throws ApiException {
        ApiResponse<List<ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner>> localVarResp = apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetWithHttpInfo(subscriptionId, contentType, accept);
        return localVarResp.getData();
    }

    /**
     * Get conversation messages
     * Retrieve all conversation messages sent to a customer regarding a given subscription.
     * @param subscriptionId ID of the subscription. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;List&lt;ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner>> apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetWithHttpInfo(String subscriptionId, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetValidateBeforeCall(subscriptionId, contentType, accept, null);
        Type localVarReturnType = new TypeToken<List<ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get conversation messages (asynchronously)
     * Retrieve all conversation messages sent to a customer regarding a given subscription.
     * @param subscriptionId ID of the subscription. (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetAsync(String subscriptionId, String contentType, String accept, final ApiCallback<List<ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetValidateBeforeCall(subscriptionId, contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<List<ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
