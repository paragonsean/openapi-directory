/*
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PlanThinRequest;
import org.openapitools.client.model.PurchaseSettingsThinRequest;
import org.openapitools.client.model.ShippingAddress;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubscriptionUpdateRequestV3
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:48.114297-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionUpdateRequestV3 {
  public static final String SERIALIZED_NAME_IS_SKIPPED = "isSkipped";
  @SerializedName(SERIALIZED_NAME_IS_SKIPPED)
  private Boolean isSkipped;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private PlanThinRequest plan;

  public static final String SERIALIZED_NAME_PURCHASE_SETTINGS = "purchaseSettings";
  @SerializedName(SERIALIZED_NAME_PURCHASE_SETTINGS)
  private PurchaseSettingsThinRequest purchaseSettings;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shippingAddress";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private ShippingAddress shippingAddress;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public SubscriptionUpdateRequestV3() {
  }

  public SubscriptionUpdateRequestV3 isSkipped(Boolean isSkipped) {
    this.isSkipped = isSkipped;
    return this;
  }

  /**
   * When set as &#x60;true&#x60;, it means the shopper asked to skip the next subscription order, and when set as &#x60;false&#x60;, no subscription order is going to be skipped.
   * @return isSkipped
   */
  @javax.annotation.Nullable
  public Boolean getIsSkipped() {
    return isSkipped;
  }

  public void setIsSkipped(Boolean isSkipped) {
    this.isSkipped = isSkipped;
  }


  public SubscriptionUpdateRequestV3 plan(PlanThinRequest plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Get plan
   * @return plan
   */
  @javax.annotation.Nullable
  public PlanThinRequest getPlan() {
    return plan;
  }

  public void setPlan(PlanThinRequest plan) {
    this.plan = plan;
  }


  public SubscriptionUpdateRequestV3 purchaseSettings(PurchaseSettingsThinRequest purchaseSettings) {
    this.purchaseSettings = purchaseSettings;
    return this;
  }

  /**
   * Get purchaseSettings
   * @return purchaseSettings
   */
  @javax.annotation.Nullable
  public PurchaseSettingsThinRequest getPurchaseSettings() {
    return purchaseSettings;
  }

  public void setPurchaseSettings(PurchaseSettingsThinRequest purchaseSettings) {
    this.purchaseSettings = purchaseSettings;
  }


  public SubscriptionUpdateRequestV3 shippingAddress(ShippingAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nullable
  public ShippingAddress getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(ShippingAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public SubscriptionUpdateRequestV3 status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status to which you wish to update the subscription. The accepted values are:   - &#x60;ACTIVE&#x60;   - &#x60;PAUSED&#x60;   - &#x60;CANCELLED&#x60;   - &#x60;EXPIRED&#x60;   - &#x60;MISSING&#x60;
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public SubscriptionUpdateRequestV3 title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Name of the subscription.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionUpdateRequestV3 subscriptionUpdateRequestV3 = (SubscriptionUpdateRequestV3) o;
    return Objects.equals(this.isSkipped, subscriptionUpdateRequestV3.isSkipped) &&
        Objects.equals(this.plan, subscriptionUpdateRequestV3.plan) &&
        Objects.equals(this.purchaseSettings, subscriptionUpdateRequestV3.purchaseSettings) &&
        Objects.equals(this.shippingAddress, subscriptionUpdateRequestV3.shippingAddress) &&
        Objects.equals(this.status, subscriptionUpdateRequestV3.status) &&
        Objects.equals(this.title, subscriptionUpdateRequestV3.title);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isSkipped, plan, purchaseSettings, shippingAddress, status, title);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionUpdateRequestV3 {\n");
    sb.append("    isSkipped: ").append(toIndentedString(isSkipped)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    purchaseSettings: ").append(toIndentedString(purchaseSettings)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isSkipped");
    openapiFields.add("plan");
    openapiFields.add("purchaseSettings");
    openapiFields.add("shippingAddress");
    openapiFields.add("status");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionUpdateRequestV3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionUpdateRequestV3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionUpdateRequestV3 is not found in the empty JSON string", SubscriptionUpdateRequestV3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionUpdateRequestV3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionUpdateRequestV3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `plan`
      if (jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) {
        PlanThinRequest.validateJsonElement(jsonObj.get("plan"));
      }
      // validate the optional field `purchaseSettings`
      if (jsonObj.get("purchaseSettings") != null && !jsonObj.get("purchaseSettings").isJsonNull()) {
        PurchaseSettingsThinRequest.validateJsonElement(jsonObj.get("purchaseSettings"));
      }
      // validate the optional field `shippingAddress`
      if (jsonObj.get("shippingAddress") != null && !jsonObj.get("shippingAddress").isJsonNull()) {
        ShippingAddress.validateJsonElement(jsonObj.get("shippingAddress"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionUpdateRequestV3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionUpdateRequestV3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionUpdateRequestV3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionUpdateRequestV3.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionUpdateRequestV3>() {
           @Override
           public void write(JsonWriter out, SubscriptionUpdateRequestV3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionUpdateRequestV3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionUpdateRequestV3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionUpdateRequestV3
   * @throws IOException if the JSON string is invalid with respect to SubscriptionUpdateRequestV3
   */
  public static SubscriptionUpdateRequestV3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionUpdateRequestV3.class);
  }

  /**
   * Convert an instance of SubscriptionUpdateRequestV3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

