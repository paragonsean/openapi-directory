/*
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlanResponse;
import org.openapitools.client.model.PurchaseSettingsResponse;
import org.openapitools.client.model.ShippingAddressResponse;
import org.openapitools.client.model.SubscriptionItemResponse;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubscriptionGroupResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:48.114297-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionGroupResponse {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CUSTOMER_EMAIL = "customerEmail";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_EMAIL)
  private String customerEmail;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_CYCLE_COUNT = "cycleCount";
  @SerializedName(SERIALIZED_NAME_CYCLE_COUNT)
  private Integer cycleCount;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_SKIPPED = "isSkipped";
  @SerializedName(SERIALIZED_NAME_IS_SKIPPED)
  private Boolean isSkipped;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<SubscriptionItemResponse> items;

  public static final String SERIALIZED_NAME_LAST_PURCHASE_DATE = "lastPurchaseDate";
  @SerializedName(SERIALIZED_NAME_LAST_PURCHASE_DATE)
  private OffsetDateTime lastPurchaseDate;

  public static final String SERIALIZED_NAME_LAST_UPDATE = "lastUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE)
  private OffsetDateTime lastUpdate;

  public static final String SERIALIZED_NAME_NEXT_PURCHASE_DATE = "nextPurchaseDate";
  @SerializedName(SERIALIZED_NAME_NEXT_PURCHASE_DATE)
  private OffsetDateTime nextPurchaseDate;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private PlanResponse plan;

  public static final String SERIALIZED_NAME_PURCHASE_SETTINGS = "purchaseSettings";
  @SerializedName(SERIALIZED_NAME_PURCHASE_SETTINGS)
  private PurchaseSettingsResponse purchaseSettings;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shippingAddress";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private ShippingAddressResponse shippingAddress;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public SubscriptionGroupResponse() {
  }

  public SubscriptionGroupResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public SubscriptionGroupResponse customerEmail(String customerEmail) {
    this.customerEmail = customerEmail;
    return this;
  }

  /**
   * Get customerEmail
   * @return customerEmail
   */
  @javax.annotation.Nullable
  public String getCustomerEmail() {
    return customerEmail;
  }

  public void setCustomerEmail(String customerEmail) {
    this.customerEmail = customerEmail;
  }


  public SubscriptionGroupResponse customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Get customerId
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public SubscriptionGroupResponse cycleCount(Integer cycleCount) {
    this.cycleCount = cycleCount;
    return this;
  }

  /**
   * Get cycleCount
   * @return cycleCount
   */
  @javax.annotation.Nonnull
  public Integer getCycleCount() {
    return cycleCount;
  }

  public void setCycleCount(Integer cycleCount) {
    this.cycleCount = cycleCount;
  }


  public SubscriptionGroupResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SubscriptionGroupResponse isSkipped(Boolean isSkipped) {
    this.isSkipped = isSkipped;
    return this;
  }

  /**
   * Get isSkipped
   * @return isSkipped
   */
  @javax.annotation.Nonnull
  public Boolean getIsSkipped() {
    return isSkipped;
  }

  public void setIsSkipped(Boolean isSkipped) {
    this.isSkipped = isSkipped;
  }


  public SubscriptionGroupResponse items(List<SubscriptionItemResponse> items) {
    this.items = items;
    return this;
  }

  public SubscriptionGroupResponse addItemsItem(SubscriptionItemResponse itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List<SubscriptionItemResponse> getItems() {
    return items;
  }

  public void setItems(List<SubscriptionItemResponse> items) {
    this.items = items;
  }


  public SubscriptionGroupResponse lastPurchaseDate(OffsetDateTime lastPurchaseDate) {
    this.lastPurchaseDate = lastPurchaseDate;
    return this;
  }

  /**
   * Get lastPurchaseDate
   * @return lastPurchaseDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastPurchaseDate() {
    return lastPurchaseDate;
  }

  public void setLastPurchaseDate(OffsetDateTime lastPurchaseDate) {
    this.lastPurchaseDate = lastPurchaseDate;
  }


  public SubscriptionGroupResponse lastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
    return this;
  }

  /**
   * Get lastUpdate
   * @return lastUpdate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

  public void setLastUpdate(OffsetDateTime lastUpdate) {
    this.lastUpdate = lastUpdate;
  }


  public SubscriptionGroupResponse nextPurchaseDate(OffsetDateTime nextPurchaseDate) {
    this.nextPurchaseDate = nextPurchaseDate;
    return this;
  }

  /**
   * Get nextPurchaseDate
   * @return nextPurchaseDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getNextPurchaseDate() {
    return nextPurchaseDate;
  }

  public void setNextPurchaseDate(OffsetDateTime nextPurchaseDate) {
    this.nextPurchaseDate = nextPurchaseDate;
  }


  public SubscriptionGroupResponse plan(PlanResponse plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Get plan
   * @return plan
   */
  @javax.annotation.Nonnull
  public PlanResponse getPlan() {
    return plan;
  }

  public void setPlan(PlanResponse plan) {
    this.plan = plan;
  }


  public SubscriptionGroupResponse purchaseSettings(PurchaseSettingsResponse purchaseSettings) {
    this.purchaseSettings = purchaseSettings;
    return this;
  }

  /**
   * Get purchaseSettings
   * @return purchaseSettings
   */
  @javax.annotation.Nonnull
  public PurchaseSettingsResponse getPurchaseSettings() {
    return purchaseSettings;
  }

  public void setPurchaseSettings(PurchaseSettingsResponse purchaseSettings) {
    this.purchaseSettings = purchaseSettings;
  }


  public SubscriptionGroupResponse shippingAddress(ShippingAddressResponse shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nonnull
  public ShippingAddressResponse getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(ShippingAddressResponse shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public SubscriptionGroupResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public SubscriptionGroupResponse title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionGroupResponse subscriptionGroupResponse = (SubscriptionGroupResponse) o;
    return Objects.equals(this.createdAt, subscriptionGroupResponse.createdAt) &&
        Objects.equals(this.customerEmail, subscriptionGroupResponse.customerEmail) &&
        Objects.equals(this.customerId, subscriptionGroupResponse.customerId) &&
        Objects.equals(this.cycleCount, subscriptionGroupResponse.cycleCount) &&
        Objects.equals(this.id, subscriptionGroupResponse.id) &&
        Objects.equals(this.isSkipped, subscriptionGroupResponse.isSkipped) &&
        Objects.equals(this.items, subscriptionGroupResponse.items) &&
        Objects.equals(this.lastPurchaseDate, subscriptionGroupResponse.lastPurchaseDate) &&
        Objects.equals(this.lastUpdate, subscriptionGroupResponse.lastUpdate) &&
        Objects.equals(this.nextPurchaseDate, subscriptionGroupResponse.nextPurchaseDate) &&
        Objects.equals(this.plan, subscriptionGroupResponse.plan) &&
        Objects.equals(this.purchaseSettings, subscriptionGroupResponse.purchaseSettings) &&
        Objects.equals(this.shippingAddress, subscriptionGroupResponse.shippingAddress) &&
        Objects.equals(this.status, subscriptionGroupResponse.status) &&
        Objects.equals(this.title, subscriptionGroupResponse.title);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, customerEmail, customerId, cycleCount, id, isSkipped, items, lastPurchaseDate, lastUpdate, nextPurchaseDate, plan, purchaseSettings, shippingAddress, status, title);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionGroupResponse {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customerEmail: ").append(toIndentedString(customerEmail)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    cycleCount: ").append(toIndentedString(cycleCount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isSkipped: ").append(toIndentedString(isSkipped)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    lastPurchaseDate: ").append(toIndentedString(lastPurchaseDate)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    nextPurchaseDate: ").append(toIndentedString(nextPurchaseDate)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    purchaseSettings: ").append(toIndentedString(purchaseSettings)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("customerEmail");
    openapiFields.add("customerId");
    openapiFields.add("cycleCount");
    openapiFields.add("id");
    openapiFields.add("isSkipped");
    openapiFields.add("items");
    openapiFields.add("lastPurchaseDate");
    openapiFields.add("lastUpdate");
    openapiFields.add("nextPurchaseDate");
    openapiFields.add("plan");
    openapiFields.add("purchaseSettings");
    openapiFields.add("shippingAddress");
    openapiFields.add("status");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("customerEmail");
    openapiRequiredFields.add("customerId");
    openapiRequiredFields.add("cycleCount");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isSkipped");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("lastUpdate");
    openapiRequiredFields.add("nextPurchaseDate");
    openapiRequiredFields.add("plan");
    openapiRequiredFields.add("purchaseSettings");
    openapiRequiredFields.add("shippingAddress");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionGroupResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionGroupResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionGroupResponse is not found in the empty JSON string", SubscriptionGroupResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionGroupResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionGroupResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubscriptionGroupResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customerEmail") != null && !jsonObj.get("customerEmail").isJsonNull()) && !jsonObj.get("customerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerEmail").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        SubscriptionItemResponse.validateJsonElement(jsonArrayitems.get(i));
      };
      // validate the required field `plan`
      PlanResponse.validateJsonElement(jsonObj.get("plan"));
      // validate the required field `purchaseSettings`
      PurchaseSettingsResponse.validateJsonElement(jsonObj.get("purchaseSettings"));
      // validate the required field `shippingAddress`
      ShippingAddressResponse.validateJsonElement(jsonObj.get("shippingAddress"));
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionGroupResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionGroupResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionGroupResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionGroupResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionGroupResponse>() {
           @Override
           public void write(JsonWriter out, SubscriptionGroupResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionGroupResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionGroupResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionGroupResponse
   * @throws IOException if the JSON string is invalid with respect to SubscriptionGroupResponse
   */
  public static SubscriptionGroupResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionGroupResponse.class);
  }

  /**
   * Convert an instance of SubscriptionGroupResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

