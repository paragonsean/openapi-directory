/*
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LogisticsInfoDeliveryWindow;
import org.openapitools.client.model.LogisticsInfoSLA;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LogisticsInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:48.114297-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogisticsInfo {
  public static final String SERIALIZED_NAME_ADDRESS_ID = "addressId";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ID)
  private String addressId;

  public static final String SERIALIZED_NAME_DELIVERY_WINDOW = "deliveryWindow";
  @SerializedName(SERIALIZED_NAME_DELIVERY_WINDOW)
  private LogisticsInfoDeliveryWindow deliveryWindow;

  public static final String SERIALIZED_NAME_ITEM_INDEX = "itemIndex";
  @SerializedName(SERIALIZED_NAME_ITEM_INDEX)
  private Integer itemIndex;

  public static final String SERIALIZED_NAME_LOCK_TTL = "lockTtl";
  @SerializedName(SERIALIZED_NAME_LOCK_TTL)
  private String lockTtl;

  public static final String SERIALIZED_NAME_PICKUP_ID = "pickupId";
  @SerializedName(SERIALIZED_NAME_PICKUP_ID)
  private String pickupId;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_SELECTED_DELIVERY_CHANNEL = "selectedDeliveryChannel";
  @SerializedName(SERIALIZED_NAME_SELECTED_DELIVERY_CHANNEL)
  private String selectedDeliveryChannel;

  public static final String SERIALIZED_NAME_SELECTED_SLA = "selectedSla";
  @SerializedName(SERIALIZED_NAME_SELECTED_SLA)
  private String selectedSla;

  public static final String SERIALIZED_NAME_SHIPPING_ESTIMATE = "shippingEstimate";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ESTIMATE)
  private String shippingEstimate;

  public static final String SERIALIZED_NAME_SL_AS = "slAs";
  @SerializedName(SERIALIZED_NAME_SL_AS)
  private List<LogisticsInfoSLA> slAs;

  public LogisticsInfo() {
  }

  public LogisticsInfo addressId(String addressId) {
    this.addressId = addressId;
    return this;
  }

  /**
   * Get addressId
   * @return addressId
   */
  @javax.annotation.Nullable
  public String getAddressId() {
    return addressId;
  }

  public void setAddressId(String addressId) {
    this.addressId = addressId;
  }


  public LogisticsInfo deliveryWindow(LogisticsInfoDeliveryWindow deliveryWindow) {
    this.deliveryWindow = deliveryWindow;
    return this;
  }

  /**
   * Get deliveryWindow
   * @return deliveryWindow
   */
  @javax.annotation.Nullable
  public LogisticsInfoDeliveryWindow getDeliveryWindow() {
    return deliveryWindow;
  }

  public void setDeliveryWindow(LogisticsInfoDeliveryWindow deliveryWindow) {
    this.deliveryWindow = deliveryWindow;
  }


  public LogisticsInfo itemIndex(Integer itemIndex) {
    this.itemIndex = itemIndex;
    return this;
  }

  /**
   * Get itemIndex
   * @return itemIndex
   */
  @javax.annotation.Nullable
  public Integer getItemIndex() {
    return itemIndex;
  }

  public void setItemIndex(Integer itemIndex) {
    this.itemIndex = itemIndex;
  }


  public LogisticsInfo lockTtl(String lockTtl) {
    this.lockTtl = lockTtl;
    return this;
  }

  /**
   * Get lockTtl
   * @return lockTtl
   */
  @javax.annotation.Nullable
  public String getLockTtl() {
    return lockTtl;
  }

  public void setLockTtl(String lockTtl) {
    this.lockTtl = lockTtl;
  }


  public LogisticsInfo pickupId(String pickupId) {
    this.pickupId = pickupId;
    return this;
  }

  /**
   * Get pickupId
   * @return pickupId
   */
  @javax.annotation.Nullable
  public String getPickupId() {
    return pickupId;
  }

  public void setPickupId(String pickupId) {
    this.pickupId = pickupId;
  }


  public LogisticsInfo price(Integer price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Integer getPrice() {
    return price;
  }

  public void setPrice(Integer price) {
    this.price = price;
  }


  public LogisticsInfo quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Amount of units in the cart.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public LogisticsInfo selectedDeliveryChannel(String selectedDeliveryChannel) {
    this.selectedDeliveryChannel = selectedDeliveryChannel;
    return this;
  }

  /**
   * Get selectedDeliveryChannel
   * @return selectedDeliveryChannel
   */
  @javax.annotation.Nullable
  public String getSelectedDeliveryChannel() {
    return selectedDeliveryChannel;
  }

  public void setSelectedDeliveryChannel(String selectedDeliveryChannel) {
    this.selectedDeliveryChannel = selectedDeliveryChannel;
  }


  public LogisticsInfo selectedSla(String selectedSla) {
    this.selectedSla = selectedSla;
    return this;
  }

  /**
   * Get selectedSla
   * @return selectedSla
   */
  @javax.annotation.Nullable
  public String getSelectedSla() {
    return selectedSla;
  }

  public void setSelectedSla(String selectedSla) {
    this.selectedSla = selectedSla;
  }


  public LogisticsInfo shippingEstimate(String shippingEstimate) {
    this.shippingEstimate = shippingEstimate;
    return this;
  }

  /**
   * Get shippingEstimate
   * @return shippingEstimate
   */
  @javax.annotation.Nullable
  public String getShippingEstimate() {
    return shippingEstimate;
  }

  public void setShippingEstimate(String shippingEstimate) {
    this.shippingEstimate = shippingEstimate;
  }


  public LogisticsInfo slAs(List<LogisticsInfoSLA> slAs) {
    this.slAs = slAs;
    return this;
  }

  public LogisticsInfo addSlAsItem(LogisticsInfoSLA slAsItem) {
    if (this.slAs == null) {
      this.slAs = new ArrayList<>();
    }
    this.slAs.add(slAsItem);
    return this;
  }

  /**
   * Get slAs
   * @return slAs
   */
  @javax.annotation.Nullable
  public List<LogisticsInfoSLA> getSlAs() {
    return slAs;
  }

  public void setSlAs(List<LogisticsInfoSLA> slAs) {
    this.slAs = slAs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogisticsInfo logisticsInfo = (LogisticsInfo) o;
    return Objects.equals(this.addressId, logisticsInfo.addressId) &&
        Objects.equals(this.deliveryWindow, logisticsInfo.deliveryWindow) &&
        Objects.equals(this.itemIndex, logisticsInfo.itemIndex) &&
        Objects.equals(this.lockTtl, logisticsInfo.lockTtl) &&
        Objects.equals(this.pickupId, logisticsInfo.pickupId) &&
        Objects.equals(this.price, logisticsInfo.price) &&
        Objects.equals(this.quantity, logisticsInfo.quantity) &&
        Objects.equals(this.selectedDeliveryChannel, logisticsInfo.selectedDeliveryChannel) &&
        Objects.equals(this.selectedSla, logisticsInfo.selectedSla) &&
        Objects.equals(this.shippingEstimate, logisticsInfo.shippingEstimate) &&
        Objects.equals(this.slAs, logisticsInfo.slAs);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressId, deliveryWindow, itemIndex, lockTtl, pickupId, price, quantity, selectedDeliveryChannel, selectedSla, shippingEstimate, slAs);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogisticsInfo {\n");
    sb.append("    addressId: ").append(toIndentedString(addressId)).append("\n");
    sb.append("    deliveryWindow: ").append(toIndentedString(deliveryWindow)).append("\n");
    sb.append("    itemIndex: ").append(toIndentedString(itemIndex)).append("\n");
    sb.append("    lockTtl: ").append(toIndentedString(lockTtl)).append("\n");
    sb.append("    pickupId: ").append(toIndentedString(pickupId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    selectedDeliveryChannel: ").append(toIndentedString(selectedDeliveryChannel)).append("\n");
    sb.append("    selectedSla: ").append(toIndentedString(selectedSla)).append("\n");
    sb.append("    shippingEstimate: ").append(toIndentedString(shippingEstimate)).append("\n");
    sb.append("    slAs: ").append(toIndentedString(slAs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressId");
    openapiFields.add("deliveryWindow");
    openapiFields.add("itemIndex");
    openapiFields.add("lockTtl");
    openapiFields.add("pickupId");
    openapiFields.add("price");
    openapiFields.add("quantity");
    openapiFields.add("selectedDeliveryChannel");
    openapiFields.add("selectedSla");
    openapiFields.add("shippingEstimate");
    openapiFields.add("slAs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogisticsInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogisticsInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogisticsInfo is not found in the empty JSON string", LogisticsInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogisticsInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogisticsInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressId") != null && !jsonObj.get("addressId").isJsonNull()) && !jsonObj.get("addressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressId").toString()));
      }
      // validate the optional field `deliveryWindow`
      if (jsonObj.get("deliveryWindow") != null && !jsonObj.get("deliveryWindow").isJsonNull()) {
        LogisticsInfoDeliveryWindow.validateJsonElement(jsonObj.get("deliveryWindow"));
      }
      if ((jsonObj.get("lockTtl") != null && !jsonObj.get("lockTtl").isJsonNull()) && !jsonObj.get("lockTtl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockTtl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockTtl").toString()));
      }
      if ((jsonObj.get("pickupId") != null && !jsonObj.get("pickupId").isJsonNull()) && !jsonObj.get("pickupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickupId").toString()));
      }
      if ((jsonObj.get("selectedDeliveryChannel") != null && !jsonObj.get("selectedDeliveryChannel").isJsonNull()) && !jsonObj.get("selectedDeliveryChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectedDeliveryChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectedDeliveryChannel").toString()));
      }
      if ((jsonObj.get("selectedSla") != null && !jsonObj.get("selectedSla").isJsonNull()) && !jsonObj.get("selectedSla").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectedSla` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectedSla").toString()));
      }
      if ((jsonObj.get("shippingEstimate") != null && !jsonObj.get("shippingEstimate").isJsonNull()) && !jsonObj.get("shippingEstimate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingEstimate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingEstimate").toString()));
      }
      if (jsonObj.get("slAs") != null && !jsonObj.get("slAs").isJsonNull()) {
        JsonArray jsonArrayslAs = jsonObj.getAsJsonArray("slAs");
        if (jsonArrayslAs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("slAs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `slAs` to be an array in the JSON string but got `%s`", jsonObj.get("slAs").toString()));
          }

          // validate the optional field `slAs` (array)
          for (int i = 0; i < jsonArrayslAs.size(); i++) {
            LogisticsInfoSLA.validateJsonElement(jsonArrayslAs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogisticsInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogisticsInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogisticsInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogisticsInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<LogisticsInfo>() {
           @Override
           public void write(JsonWriter out, LogisticsInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogisticsInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogisticsInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogisticsInfo
   * @throws IOException if the JSON string is invalid with respect to LogisticsInfo
   */
  public static LogisticsInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogisticsInfo.class);
  }

  /**
   * Convert an instance of LogisticsInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

