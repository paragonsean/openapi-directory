/*
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubscriptionCycleItemContext;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubscriptionCycleContext
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:48.114297-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionCycleContext {
  public static final String SERIALIZED_NAME_ADDRESS_ID = "addressId";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ID)
  private String addressId;

  public static final String SERIALIZED_NAME_ADDRESS_TYPE = "addressType";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TYPE)
  private String addressType;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<SubscriptionCycleItemContext> items;

  public static final String SERIALIZED_NAME_PAYMENT_ACCOUNT_ID = "paymentAccountId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ACCOUNT_ID)
  private String paymentAccountId;

  public static final String SERIALIZED_NAME_PAYMENT_SYSTEM = "paymentSystem";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SYSTEM)
  private String paymentSystem;

  public static final String SERIALIZED_NAME_PAYMENT_SYSTEM_GROUP = "paymentSystemGroup";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SYSTEM_GROUP)
  private String paymentSystemGroup;

  public static final String SERIALIZED_NAME_PAYMENT_SYSTEM_NAME = "paymentSystemName";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SYSTEM_NAME)
  private String paymentSystemName;

  public SubscriptionCycleContext() {
  }

  public SubscriptionCycleContext addressId(String addressId) {
    this.addressId = addressId;
    return this;
  }

  /**
   * Get addressId
   * @return addressId
   */
  @javax.annotation.Nullable
  public String getAddressId() {
    return addressId;
  }

  public void setAddressId(String addressId) {
    this.addressId = addressId;
  }


  public SubscriptionCycleContext addressType(String addressType) {
    this.addressType = addressType;
    return this;
  }

  /**
   * Get addressType
   * @return addressType
   */
  @javax.annotation.Nullable
  public String getAddressType() {
    return addressType;
  }

  public void setAddressType(String addressType) {
    this.addressType = addressType;
  }


  public SubscriptionCycleContext items(List<SubscriptionCycleItemContext> items) {
    this.items = items;
    return this;
  }

  public SubscriptionCycleContext addItemsItem(SubscriptionCycleItemContext itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List<SubscriptionCycleItemContext> getItems() {
    return items;
  }

  public void setItems(List<SubscriptionCycleItemContext> items) {
    this.items = items;
  }


  public SubscriptionCycleContext paymentAccountId(String paymentAccountId) {
    this.paymentAccountId = paymentAccountId;
    return this;
  }

  /**
   * Get paymentAccountId
   * @return paymentAccountId
   */
  @javax.annotation.Nullable
  public String getPaymentAccountId() {
    return paymentAccountId;
  }

  public void setPaymentAccountId(String paymentAccountId) {
    this.paymentAccountId = paymentAccountId;
  }


  public SubscriptionCycleContext paymentSystem(String paymentSystem) {
    this.paymentSystem = paymentSystem;
    return this;
  }

  /**
   * Get paymentSystem
   * @return paymentSystem
   */
  @javax.annotation.Nullable
  public String getPaymentSystem() {
    return paymentSystem;
  }

  public void setPaymentSystem(String paymentSystem) {
    this.paymentSystem = paymentSystem;
  }


  public SubscriptionCycleContext paymentSystemGroup(String paymentSystemGroup) {
    this.paymentSystemGroup = paymentSystemGroup;
    return this;
  }

  /**
   * Get paymentSystemGroup
   * @return paymentSystemGroup
   */
  @javax.annotation.Nullable
  public String getPaymentSystemGroup() {
    return paymentSystemGroup;
  }

  public void setPaymentSystemGroup(String paymentSystemGroup) {
    this.paymentSystemGroup = paymentSystemGroup;
  }


  public SubscriptionCycleContext paymentSystemName(String paymentSystemName) {
    this.paymentSystemName = paymentSystemName;
    return this;
  }

  /**
   * Get paymentSystemName
   * @return paymentSystemName
   */
  @javax.annotation.Nullable
  public String getPaymentSystemName() {
    return paymentSystemName;
  }

  public void setPaymentSystemName(String paymentSystemName) {
    this.paymentSystemName = paymentSystemName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionCycleContext subscriptionCycleContext = (SubscriptionCycleContext) o;
    return Objects.equals(this.addressId, subscriptionCycleContext.addressId) &&
        Objects.equals(this.addressType, subscriptionCycleContext.addressType) &&
        Objects.equals(this.items, subscriptionCycleContext.items) &&
        Objects.equals(this.paymentAccountId, subscriptionCycleContext.paymentAccountId) &&
        Objects.equals(this.paymentSystem, subscriptionCycleContext.paymentSystem) &&
        Objects.equals(this.paymentSystemGroup, subscriptionCycleContext.paymentSystemGroup) &&
        Objects.equals(this.paymentSystemName, subscriptionCycleContext.paymentSystemName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressId, addressType, items, paymentAccountId, paymentSystem, paymentSystemGroup, paymentSystemName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionCycleContext {\n");
    sb.append("    addressId: ").append(toIndentedString(addressId)).append("\n");
    sb.append("    addressType: ").append(toIndentedString(addressType)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    paymentAccountId: ").append(toIndentedString(paymentAccountId)).append("\n");
    sb.append("    paymentSystem: ").append(toIndentedString(paymentSystem)).append("\n");
    sb.append("    paymentSystemGroup: ").append(toIndentedString(paymentSystemGroup)).append("\n");
    sb.append("    paymentSystemName: ").append(toIndentedString(paymentSystemName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressId");
    openapiFields.add("addressType");
    openapiFields.add("items");
    openapiFields.add("paymentAccountId");
    openapiFields.add("paymentSystem");
    openapiFields.add("paymentSystemGroup");
    openapiFields.add("paymentSystemName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionCycleContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionCycleContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionCycleContext is not found in the empty JSON string", SubscriptionCycleContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionCycleContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionCycleContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressId") != null && !jsonObj.get("addressId").isJsonNull()) && !jsonObj.get("addressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressId").toString()));
      }
      if ((jsonObj.get("addressType") != null && !jsonObj.get("addressType").isJsonNull()) && !jsonObj.get("addressType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressType").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            SubscriptionCycleItemContext.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("paymentAccountId") != null && !jsonObj.get("paymentAccountId").isJsonNull()) && !jsonObj.get("paymentAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentAccountId").toString()));
      }
      if ((jsonObj.get("paymentSystem") != null && !jsonObj.get("paymentSystem").isJsonNull()) && !jsonObj.get("paymentSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentSystem").toString()));
      }
      if ((jsonObj.get("paymentSystemGroup") != null && !jsonObj.get("paymentSystemGroup").isJsonNull()) && !jsonObj.get("paymentSystemGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentSystemGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentSystemGroup").toString()));
      }
      if ((jsonObj.get("paymentSystemName") != null && !jsonObj.get("paymentSystemName").isJsonNull()) && !jsonObj.get("paymentSystemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentSystemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentSystemName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionCycleContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionCycleContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionCycleContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionCycleContext.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionCycleContext>() {
           @Override
           public void write(JsonWriter out, SubscriptionCycleContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionCycleContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionCycleContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionCycleContext
   * @throws IOException if the JSON string is invalid with respect to SubscriptionCycleContext
   */
  public static SubscriptionCycleContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionCycleContext.class);
  }

  /**
   * Convert an instance of SubscriptionCycleContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

