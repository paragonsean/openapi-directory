/*
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReportResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:48.114297-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportResponse {
  public static final String SERIALIZED_NAME_CANCELED = "canceled";
  @SerializedName(SERIALIZED_NAME_CANCELED)
  private Boolean canceled;

  public static final String SERIALIZED_NAME_COMPLETED_DATE = "completedDate";
  @SerializedName(SERIALIZED_NAME_COMPLETED_DATE)
  private OffsetDateTime completedDate;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ENQUEUE_DATE = "enqueueDate";
  @SerializedName(SERIALIZED_NAME_ENQUEUE_DATE)
  private OffsetDateTime enqueueDate;

  public static final String SERIALIZED_NAME_ERROR_COUNT = "errorCount";
  @SerializedName(SERIALIZED_NAME_ERROR_COUNT)
  private Long errorCount;

  public static final String SERIALIZED_NAME_FINISHED = "finished";
  @SerializedName(SERIALIZED_NAME_FINISHED)
  private Boolean finished;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_ERROR_MESSAGE = "lastErrorMessage";
  @SerializedName(SERIALIZED_NAME_LAST_ERROR_MESSAGE)
  private String lastErrorMessage;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "lastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  private OffsetDateTime lastUpdateTime;

  public static final String SERIALIZED_NAME_LINK_TO_DOWNLOAD = "linkToDownload";
  @SerializedName(SERIALIZED_NAME_LINK_TO_DOWNLOAD)
  private String linkToDownload;

  public static final String SERIALIZED_NAME_OUTPUT_TYPE = "outputType";
  @SerializedName(SERIALIZED_NAME_OUTPUT_TYPE)
  private String outputType;

  public static final String SERIALIZED_NAME_PERCENTAGE_PROCESSED = "percentageProcessed";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_PROCESSED)
  private Long percentageProcessed;

  public static final String SERIALIZED_NAME_RECORDS_PROCESSED = "recordsProcessed";
  @SerializedName(SERIALIZED_NAME_RECORDS_PROCESSED)
  private Long recordsProcessed;

  public static final String SERIALIZED_NAME_RECORDS_SUM = "recordsSum";
  @SerializedName(SERIALIZED_NAME_RECORDS_SUM)
  private Long recordsSum;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_ZIPPED = "zipped";
  @SerializedName(SERIALIZED_NAME_ZIPPED)
  private Boolean zipped;

  public ReportResponse() {
  }

  public ReportResponse(
     Long recordsProcessed, 
     String statusMessage
  ) {
    this();
    this.recordsProcessed = recordsProcessed;
    this.statusMessage = statusMessage;
  }

  public ReportResponse canceled(Boolean canceled) {
    this.canceled = canceled;
    return this;
  }

  /**
   * Get canceled
   * @return canceled
   */
  @javax.annotation.Nullable
  public Boolean getCanceled() {
    return canceled;
  }

  public void setCanceled(Boolean canceled) {
    this.canceled = canceled;
  }


  public ReportResponse completedDate(OffsetDateTime completedDate) {
    this.completedDate = completedDate;
    return this;
  }

  /**
   * Get completedDate
   * @return completedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedDate() {
    return completedDate;
  }

  public void setCompletedDate(OffsetDateTime completedDate) {
    this.completedDate = completedDate;
  }


  public ReportResponse email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ReportResponse enqueueDate(OffsetDateTime enqueueDate) {
    this.enqueueDate = enqueueDate;
    return this;
  }

  /**
   * Get enqueueDate
   * @return enqueueDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEnqueueDate() {
    return enqueueDate;
  }

  public void setEnqueueDate(OffsetDateTime enqueueDate) {
    this.enqueueDate = enqueueDate;
  }


  public ReportResponse errorCount(Long errorCount) {
    this.errorCount = errorCount;
    return this;
  }

  /**
   * Get errorCount
   * @return errorCount
   */
  @javax.annotation.Nullable
  public Long getErrorCount() {
    return errorCount;
  }

  public void setErrorCount(Long errorCount) {
    this.errorCount = errorCount;
  }


  public ReportResponse finished(Boolean finished) {
    this.finished = finished;
    return this;
  }

  /**
   * Get finished
   * @return finished
   */
  @javax.annotation.Nullable
  public Boolean getFinished() {
    return finished;
  }

  public void setFinished(Boolean finished) {
    this.finished = finished;
  }


  public ReportResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ReportResponse lastErrorMessage(String lastErrorMessage) {
    this.lastErrorMessage = lastErrorMessage;
    return this;
  }

  /**
   * Get lastErrorMessage
   * @return lastErrorMessage
   */
  @javax.annotation.Nullable
  public String getLastErrorMessage() {
    return lastErrorMessage;
  }

  public void setLastErrorMessage(String lastErrorMessage) {
    this.lastErrorMessage = lastErrorMessage;
  }


  public ReportResponse lastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  /**
   * Get lastUpdateTime
   * @return lastUpdateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }


  public ReportResponse linkToDownload(String linkToDownload) {
    this.linkToDownload = linkToDownload;
    return this;
  }

  /**
   * Get linkToDownload
   * @return linkToDownload
   */
  @javax.annotation.Nullable
  public String getLinkToDownload() {
    return linkToDownload;
  }

  public void setLinkToDownload(String linkToDownload) {
    this.linkToDownload = linkToDownload;
  }


  public ReportResponse outputType(String outputType) {
    this.outputType = outputType;
    return this;
  }

  /**
   * Get outputType
   * @return outputType
   */
  @javax.annotation.Nullable
  public String getOutputType() {
    return outputType;
  }

  public void setOutputType(String outputType) {
    this.outputType = outputType;
  }


  public ReportResponse percentageProcessed(Long percentageProcessed) {
    this.percentageProcessed = percentageProcessed;
    return this;
  }

  /**
   * Get percentageProcessed
   * @return percentageProcessed
   */
  @javax.annotation.Nullable
  public Long getPercentageProcessed() {
    return percentageProcessed;
  }

  public void setPercentageProcessed(Long percentageProcessed) {
    this.percentageProcessed = percentageProcessed;
  }


  /**
   * Get recordsProcessed
   * @return recordsProcessed
   */
  @javax.annotation.Nullable
  public Long getRecordsProcessed() {
    return recordsProcessed;
  }



  public ReportResponse recordsSum(Long recordsSum) {
    this.recordsSum = recordsSum;
    return this;
  }

  /**
   * Get recordsSum
   * @return recordsSum
   */
  @javax.annotation.Nullable
  public Long getRecordsSum() {
    return recordsSum;
  }

  public void setRecordsSum(Long recordsSum) {
    this.recordsSum = recordsSum;
  }


  public ReportResponse startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }



  public ReportResponse zipped(Boolean zipped) {
    this.zipped = zipped;
    return this;
  }

  /**
   * Get zipped
   * @return zipped
   */
  @javax.annotation.Nullable
  public Boolean getZipped() {
    return zipped;
  }

  public void setZipped(Boolean zipped) {
    this.zipped = zipped;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportResponse reportResponse = (ReportResponse) o;
    return Objects.equals(this.canceled, reportResponse.canceled) &&
        Objects.equals(this.completedDate, reportResponse.completedDate) &&
        Objects.equals(this.email, reportResponse.email) &&
        Objects.equals(this.enqueueDate, reportResponse.enqueueDate) &&
        Objects.equals(this.errorCount, reportResponse.errorCount) &&
        Objects.equals(this.finished, reportResponse.finished) &&
        Objects.equals(this.id, reportResponse.id) &&
        Objects.equals(this.lastErrorMessage, reportResponse.lastErrorMessage) &&
        Objects.equals(this.lastUpdateTime, reportResponse.lastUpdateTime) &&
        Objects.equals(this.linkToDownload, reportResponse.linkToDownload) &&
        Objects.equals(this.outputType, reportResponse.outputType) &&
        Objects.equals(this.percentageProcessed, reportResponse.percentageProcessed) &&
        Objects.equals(this.recordsProcessed, reportResponse.recordsProcessed) &&
        Objects.equals(this.recordsSum, reportResponse.recordsSum) &&
        Objects.equals(this.startDate, reportResponse.startDate) &&
        Objects.equals(this.statusMessage, reportResponse.statusMessage) &&
        Objects.equals(this.zipped, reportResponse.zipped);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(canceled, completedDate, email, enqueueDate, errorCount, finished, id, lastErrorMessage, lastUpdateTime, linkToDownload, outputType, percentageProcessed, recordsProcessed, recordsSum, startDate, statusMessage, zipped);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportResponse {\n");
    sb.append("    canceled: ").append(toIndentedString(canceled)).append("\n");
    sb.append("    completedDate: ").append(toIndentedString(completedDate)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    enqueueDate: ").append(toIndentedString(enqueueDate)).append("\n");
    sb.append("    errorCount: ").append(toIndentedString(errorCount)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastErrorMessage: ").append(toIndentedString(lastErrorMessage)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    linkToDownload: ").append(toIndentedString(linkToDownload)).append("\n");
    sb.append("    outputType: ").append(toIndentedString(outputType)).append("\n");
    sb.append("    percentageProcessed: ").append(toIndentedString(percentageProcessed)).append("\n");
    sb.append("    recordsProcessed: ").append(toIndentedString(recordsProcessed)).append("\n");
    sb.append("    recordsSum: ").append(toIndentedString(recordsSum)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    zipped: ").append(toIndentedString(zipped)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canceled");
    openapiFields.add("completedDate");
    openapiFields.add("email");
    openapiFields.add("enqueueDate");
    openapiFields.add("errorCount");
    openapiFields.add("finished");
    openapiFields.add("id");
    openapiFields.add("lastErrorMessage");
    openapiFields.add("lastUpdateTime");
    openapiFields.add("linkToDownload");
    openapiFields.add("outputType");
    openapiFields.add("percentageProcessed");
    openapiFields.add("recordsProcessed");
    openapiFields.add("recordsSum");
    openapiFields.add("startDate");
    openapiFields.add("statusMessage");
    openapiFields.add("zipped");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportResponse is not found in the empty JSON string", ReportResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lastErrorMessage") != null && !jsonObj.get("lastErrorMessage").isJsonNull()) && !jsonObj.get("lastErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastErrorMessage").toString()));
      }
      if ((jsonObj.get("linkToDownload") != null && !jsonObj.get("linkToDownload").isJsonNull()) && !jsonObj.get("linkToDownload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkToDownload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkToDownload").toString()));
      }
      if ((jsonObj.get("outputType") != null && !jsonObj.get("outputType").isJsonNull()) && !jsonObj.get("outputType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputType").toString()));
      }
      if ((jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) && !jsonObj.get("statusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportResponse>() {
           @Override
           public void write(JsonWriter out, ReportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportResponse
   * @throws IOException if the JSON string is invalid with respect to ReportResponse
   */
  public static ReportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportResponse.class);
  }

  /**
   * Convert an instance of ReportResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

