/*
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LogisticsInfo;
import org.openapitools.client.model.OrderItem;
import org.openapitools.client.model.PaymentData;
import org.openapitools.client.model.PurchaseContextSelectableGiftsResponse;
import org.openapitools.client.model.SimulateMessageResponse;
import org.openapitools.client.model.SimulationItemResult;
import org.openapitools.client.model.TotalizationResponse;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimulateResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:48.114297-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SimulateResponse {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<OrderItem> items;

  public static final String SERIALIZED_NAME_LOGISTICS_INFO = "logisticsInfo";
  @SerializedName(SERIALIZED_NAME_LOGISTICS_INFO)
  private List<LogisticsInfo> logisticsInfo;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<SimulateMessageResponse> messages;

  public static final String SERIALIZED_NAME_PAYMENT_DATA = "paymentData";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATA)
  private PaymentData paymentData;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_SELECTABLE_GIFTS_RESPONSE = "selectableGiftsResponse";
  @SerializedName(SERIALIZED_NAME_SELECTABLE_GIFTS_RESPONSE)
  private List<PurchaseContextSelectableGiftsResponse> selectableGiftsResponse;

  public static final String SERIALIZED_NAME_SIMULATION_ITEMS = "simulationItems";
  @SerializedName(SERIALIZED_NAME_SIMULATION_ITEMS)
  private List<SimulationItemResult> simulationItems;

  public static final String SERIALIZED_NAME_TOTALS = "totals";
  @SerializedName(SERIALIZED_NAME_TOTALS)
  private List<TotalizationResponse> totals;

  public SimulateResponse() {
  }

  public SimulateResponse country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public SimulateResponse items(List<OrderItem> items) {
    this.items = items;
    return this;
  }

  public SimulateResponse addItemsItem(OrderItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public List<OrderItem> getItems() {
    return items;
  }

  public void setItems(List<OrderItem> items) {
    this.items = items;
  }


  public SimulateResponse logisticsInfo(List<LogisticsInfo> logisticsInfo) {
    this.logisticsInfo = logisticsInfo;
    return this;
  }

  public SimulateResponse addLogisticsInfoItem(LogisticsInfo logisticsInfoItem) {
    if (this.logisticsInfo == null) {
      this.logisticsInfo = new ArrayList<>();
    }
    this.logisticsInfo.add(logisticsInfoItem);
    return this;
  }

  /**
   * Get logisticsInfo
   * @return logisticsInfo
   */
  @javax.annotation.Nullable
  public List<LogisticsInfo> getLogisticsInfo() {
    return logisticsInfo;
  }

  public void setLogisticsInfo(List<LogisticsInfo> logisticsInfo) {
    this.logisticsInfo = logisticsInfo;
  }


  public SimulateResponse messages(List<SimulateMessageResponse> messages) {
    this.messages = messages;
    return this;
  }

  public SimulateResponse addMessagesItem(SimulateMessageResponse messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * Get messages
   * @return messages
   */
  @javax.annotation.Nullable
  public List<SimulateMessageResponse> getMessages() {
    return messages;
  }

  public void setMessages(List<SimulateMessageResponse> messages) {
    this.messages = messages;
  }


  public SimulateResponse paymentData(PaymentData paymentData) {
    this.paymentData = paymentData;
    return this;
  }

  /**
   * Get paymentData
   * @return paymentData
   */
  @javax.annotation.Nullable
  public PaymentData getPaymentData() {
    return paymentData;
  }

  public void setPaymentData(PaymentData paymentData) {
    this.paymentData = paymentData;
  }


  public SimulateResponse postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public SimulateResponse selectableGiftsResponse(List<PurchaseContextSelectableGiftsResponse> selectableGiftsResponse) {
    this.selectableGiftsResponse = selectableGiftsResponse;
    return this;
  }

  public SimulateResponse addSelectableGiftsResponseItem(PurchaseContextSelectableGiftsResponse selectableGiftsResponseItem) {
    if (this.selectableGiftsResponse == null) {
      this.selectableGiftsResponse = new ArrayList<>();
    }
    this.selectableGiftsResponse.add(selectableGiftsResponseItem);
    return this;
  }

  /**
   * Get selectableGiftsResponse
   * @return selectableGiftsResponse
   */
  @javax.annotation.Nullable
  public List<PurchaseContextSelectableGiftsResponse> getSelectableGiftsResponse() {
    return selectableGiftsResponse;
  }

  public void setSelectableGiftsResponse(List<PurchaseContextSelectableGiftsResponse> selectableGiftsResponse) {
    this.selectableGiftsResponse = selectableGiftsResponse;
  }


  public SimulateResponse simulationItems(List<SimulationItemResult> simulationItems) {
    this.simulationItems = simulationItems;
    return this;
  }

  public SimulateResponse addSimulationItemsItem(SimulationItemResult simulationItemsItem) {
    if (this.simulationItems == null) {
      this.simulationItems = new ArrayList<>();
    }
    this.simulationItems.add(simulationItemsItem);
    return this;
  }

  /**
   * Get simulationItems
   * @return simulationItems
   */
  @javax.annotation.Nullable
  public List<SimulationItemResult> getSimulationItems() {
    return simulationItems;
  }

  public void setSimulationItems(List<SimulationItemResult> simulationItems) {
    this.simulationItems = simulationItems;
  }


  public SimulateResponse totals(List<TotalizationResponse> totals) {
    this.totals = totals;
    return this;
  }

  public SimulateResponse addTotalsItem(TotalizationResponse totalsItem) {
    if (this.totals == null) {
      this.totals = new ArrayList<>();
    }
    this.totals.add(totalsItem);
    return this;
  }

  /**
   * Get totals
   * @return totals
   */
  @javax.annotation.Nullable
  public List<TotalizationResponse> getTotals() {
    return totals;
  }

  public void setTotals(List<TotalizationResponse> totals) {
    this.totals = totals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimulateResponse simulateResponse = (SimulateResponse) o;
    return Objects.equals(this.country, simulateResponse.country) &&
        Objects.equals(this.items, simulateResponse.items) &&
        Objects.equals(this.logisticsInfo, simulateResponse.logisticsInfo) &&
        Objects.equals(this.messages, simulateResponse.messages) &&
        Objects.equals(this.paymentData, simulateResponse.paymentData) &&
        Objects.equals(this.postalCode, simulateResponse.postalCode) &&
        Objects.equals(this.selectableGiftsResponse, simulateResponse.selectableGiftsResponse) &&
        Objects.equals(this.simulationItems, simulateResponse.simulationItems) &&
        Objects.equals(this.totals, simulateResponse.totals);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, items, logisticsInfo, messages, paymentData, postalCode, selectableGiftsResponse, simulationItems, totals);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimulateResponse {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    logisticsInfo: ").append(toIndentedString(logisticsInfo)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    paymentData: ").append(toIndentedString(paymentData)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    selectableGiftsResponse: ").append(toIndentedString(selectableGiftsResponse)).append("\n");
    sb.append("    simulationItems: ").append(toIndentedString(simulationItems)).append("\n");
    sb.append("    totals: ").append(toIndentedString(totals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("items");
    openapiFields.add("logisticsInfo");
    openapiFields.add("messages");
    openapiFields.add("paymentData");
    openapiFields.add("postalCode");
    openapiFields.add("selectableGiftsResponse");
    openapiFields.add("simulationItems");
    openapiFields.add("totals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimulateResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimulateResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimulateResponse is not found in the empty JSON string", SimulateResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimulateResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimulateResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            OrderItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if (jsonObj.get("logisticsInfo") != null && !jsonObj.get("logisticsInfo").isJsonNull()) {
        JsonArray jsonArraylogisticsInfo = jsonObj.getAsJsonArray("logisticsInfo");
        if (jsonArraylogisticsInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("logisticsInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `logisticsInfo` to be an array in the JSON string but got `%s`", jsonObj.get("logisticsInfo").toString()));
          }

          // validate the optional field `logisticsInfo` (array)
          for (int i = 0; i < jsonArraylogisticsInfo.size(); i++) {
            LogisticsInfo.validateJsonElement(jsonArraylogisticsInfo.get(i));
          };
        }
      }
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        JsonArray jsonArraymessages = jsonObj.getAsJsonArray("messages");
        if (jsonArraymessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
          }

          // validate the optional field `messages` (array)
          for (int i = 0; i < jsonArraymessages.size(); i++) {
            SimulateMessageResponse.validateJsonElement(jsonArraymessages.get(i));
          };
        }
      }
      // validate the optional field `paymentData`
      if (jsonObj.get("paymentData") != null && !jsonObj.get("paymentData").isJsonNull()) {
        PaymentData.validateJsonElement(jsonObj.get("paymentData"));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if (jsonObj.get("selectableGiftsResponse") != null && !jsonObj.get("selectableGiftsResponse").isJsonNull()) {
        JsonArray jsonArrayselectableGiftsResponse = jsonObj.getAsJsonArray("selectableGiftsResponse");
        if (jsonArrayselectableGiftsResponse != null) {
          // ensure the json data is an array
          if (!jsonObj.get("selectableGiftsResponse").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `selectableGiftsResponse` to be an array in the JSON string but got `%s`", jsonObj.get("selectableGiftsResponse").toString()));
          }

          // validate the optional field `selectableGiftsResponse` (array)
          for (int i = 0; i < jsonArrayselectableGiftsResponse.size(); i++) {
            PurchaseContextSelectableGiftsResponse.validateJsonElement(jsonArrayselectableGiftsResponse.get(i));
          };
        }
      }
      if (jsonObj.get("simulationItems") != null && !jsonObj.get("simulationItems").isJsonNull()) {
        JsonArray jsonArraysimulationItems = jsonObj.getAsJsonArray("simulationItems");
        if (jsonArraysimulationItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("simulationItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `simulationItems` to be an array in the JSON string but got `%s`", jsonObj.get("simulationItems").toString()));
          }

          // validate the optional field `simulationItems` (array)
          for (int i = 0; i < jsonArraysimulationItems.size(); i++) {
            SimulationItemResult.validateJsonElement(jsonArraysimulationItems.get(i));
          };
        }
      }
      if (jsonObj.get("totals") != null && !jsonObj.get("totals").isJsonNull()) {
        JsonArray jsonArraytotals = jsonObj.getAsJsonArray("totals");
        if (jsonArraytotals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("totals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `totals` to be an array in the JSON string but got `%s`", jsonObj.get("totals").toString()));
          }

          // validate the optional field `totals` (array)
          for (int i = 0; i < jsonArraytotals.size(); i++) {
            TotalizationResponse.validateJsonElement(jsonArraytotals.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimulateResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimulateResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimulateResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimulateResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SimulateResponse>() {
           @Override
           public void write(JsonWriter out, SimulateResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimulateResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimulateResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimulateResponse
   * @throws IOException if the JSON string is invalid with respect to SimulateResponse
   */
  public static SimulateResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimulateResponse.class);
  }

  /**
   * Convert an instance of SimulateResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

