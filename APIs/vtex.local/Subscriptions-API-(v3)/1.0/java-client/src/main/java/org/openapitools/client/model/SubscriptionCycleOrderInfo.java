/*
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubscriptionCycleOrderInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:48.114297-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionCycleOrderInfo {
  public static final String SERIALIZED_NAME_ORDER_GROUP = "orderGroup";
  @SerializedName(SERIALIZED_NAME_ORDER_GROUP)
  private String orderGroup;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_PAYMENT_U_R_L = "paymentURL";
  @SerializedName(SERIALIZED_NAME_PAYMENT_U_R_L)
  private String paymentURL;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Long value;

  public SubscriptionCycleOrderInfo() {
  }

  public SubscriptionCycleOrderInfo orderGroup(String orderGroup) {
    this.orderGroup = orderGroup;
    return this;
  }

  /**
   * Get orderGroup
   * @return orderGroup
   */
  @javax.annotation.Nullable
  public String getOrderGroup() {
    return orderGroup;
  }

  public void setOrderGroup(String orderGroup) {
    this.orderGroup = orderGroup;
  }


  public SubscriptionCycleOrderInfo orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Get orderId
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public SubscriptionCycleOrderInfo paymentURL(String paymentURL) {
    this.paymentURL = paymentURL;
    return this;
  }

  /**
   * Get paymentURL
   * @return paymentURL
   */
  @javax.annotation.Nullable
  public String getPaymentURL() {
    return paymentURL;
  }

  public void setPaymentURL(String paymentURL) {
    this.paymentURL = paymentURL;
  }


  public SubscriptionCycleOrderInfo value(Long value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Long getValue() {
    return value;
  }

  public void setValue(Long value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionCycleOrderInfo subscriptionCycleOrderInfo = (SubscriptionCycleOrderInfo) o;
    return Objects.equals(this.orderGroup, subscriptionCycleOrderInfo.orderGroup) &&
        Objects.equals(this.orderId, subscriptionCycleOrderInfo.orderId) &&
        Objects.equals(this.paymentURL, subscriptionCycleOrderInfo.paymentURL) &&
        Objects.equals(this.value, subscriptionCycleOrderInfo.value);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderGroup, orderId, paymentURL, value);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionCycleOrderInfo {\n");
    sb.append("    orderGroup: ").append(toIndentedString(orderGroup)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    paymentURL: ").append(toIndentedString(paymentURL)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orderGroup");
    openapiFields.add("orderId");
    openapiFields.add("paymentURL");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionCycleOrderInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionCycleOrderInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionCycleOrderInfo is not found in the empty JSON string", SubscriptionCycleOrderInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionCycleOrderInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionCycleOrderInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("orderGroup") != null && !jsonObj.get("orderGroup").isJsonNull()) && !jsonObj.get("orderGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderGroup").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("paymentURL") != null && !jsonObj.get("paymentURL").isJsonNull()) && !jsonObj.get("paymentURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionCycleOrderInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionCycleOrderInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionCycleOrderInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionCycleOrderInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionCycleOrderInfo>() {
           @Override
           public void write(JsonWriter out, SubscriptionCycleOrderInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionCycleOrderInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionCycleOrderInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionCycleOrderInfo
   * @throws IOException if the JSON string is invalid with respect to SubscriptionCycleOrderInfo
   */
  public static SubscriptionCycleOrderInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionCycleOrderInfo.class);
  }

  /**
   * Convert an instance of SubscriptionCycleOrderInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

