/*
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.StorePlan;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlansApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlansApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiRnsPvtPlansGet
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param periodicity Filter plans by available periodicity (optional)
     * @param interval Filter plans by available interval (optional)
     * @param page Page used for pagination (optional, default to 1)
     * @param size Page size used for pagination (optional, default to 15)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested plans </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPvtPlansGetCall(String contentType, String accept, String periodicity, String interval, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rns/pvt/plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (periodicity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodicity", periodicity));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRnsPvtPlansGetValidateBeforeCall(String contentType, String accept, String periodicity, String interval, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiRnsPvtPlansGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiRnsPvtPlansGet(Async)");
        }

        return apiRnsPvtPlansGetCall(contentType, accept, periodicity, interval, page, size, _callback);

    }

    /**
     * List plans
     * List plans filtering by some arguments.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param periodicity Filter plans by available periodicity (optional)
     * @param interval Filter plans by available interval (optional)
     * @param page Page used for pagination (optional, default to 1)
     * @param size Page size used for pagination (optional, default to 15)
     * @return List&lt;StorePlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested plans </td><td>  -  </td></tr>
     </table>
     */
    public List<StorePlan> apiRnsPvtPlansGet(String contentType, String accept, String periodicity, String interval, Integer page, Integer size) throws ApiException {
        ApiResponse<List<StorePlan>> localVarResp = apiRnsPvtPlansGetWithHttpInfo(contentType, accept, periodicity, interval, page, size);
        return localVarResp.getData();
    }

    /**
     * List plans
     * List plans filtering by some arguments.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param periodicity Filter plans by available periodicity (optional)
     * @param interval Filter plans by available interval (optional)
     * @param page Page used for pagination (optional, default to 1)
     * @param size Page size used for pagination (optional, default to 15)
     * @return ApiResponse&lt;List&lt;StorePlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested plans </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StorePlan>> apiRnsPvtPlansGetWithHttpInfo(String contentType, String accept, String periodicity, String interval, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = apiRnsPvtPlansGetValidateBeforeCall(contentType, accept, periodicity, interval, page, size, null);
        Type localVarReturnType = new TypeToken<List<StorePlan>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List plans (asynchronously)
     * List plans filtering by some arguments.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param periodicity Filter plans by available periodicity (optional)
     * @param interval Filter plans by available interval (optional)
     * @param page Page used for pagination (optional, default to 1)
     * @param size Page size used for pagination (optional, default to 15)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested plans </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPvtPlansGetAsync(String contentType, String accept, String periodicity, String interval, Integer page, Integer size, final ApiCallback<List<StorePlan>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRnsPvtPlansGetValidateBeforeCall(contentType, accept, periodicity, interval, page, size, _callback);
        Type localVarReturnType = new TypeToken<List<StorePlan>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRnsPvtPlansIdGet
     * @param id Id from the desired plan (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPvtPlansIdGetCall(String id, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rns/pvt/plans/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRnsPvtPlansIdGetValidateBeforeCall(String id, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiRnsPvtPlansIdGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiRnsPvtPlansIdGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiRnsPvtPlansIdGet(Async)");
        }

        return apiRnsPvtPlansIdGetCall(id, contentType, accept, _callback);

    }

    /**
     * Get plan details
     * This endpoint retrieves a specific plan by its ID.
     * @param id Id from the desired plan (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return StorePlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested plan </td><td>  -  </td></tr>
     </table>
     */
    public StorePlan apiRnsPvtPlansIdGet(String id, String contentType, String accept) throws ApiException {
        ApiResponse<StorePlan> localVarResp = apiRnsPvtPlansIdGetWithHttpInfo(id, contentType, accept);
        return localVarResp.getData();
    }

    /**
     * Get plan details
     * This endpoint retrieves a specific plan by its ID.
     * @param id Id from the desired plan (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;StorePlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested plan </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorePlan> apiRnsPvtPlansIdGetWithHttpInfo(String id, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = apiRnsPvtPlansIdGetValidateBeforeCall(id, contentType, accept, null);
        Type localVarReturnType = new TypeToken<StorePlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get plan details (asynchronously)
     * This endpoint retrieves a specific plan by its ID.
     * @param id Id from the desired plan (required)
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested plan </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnsPvtPlansIdGetAsync(String id, String contentType, String accept, final ApiCallback<StorePlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRnsPvtPlansIdGetValidateBeforeCall(id, contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<StorePlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
