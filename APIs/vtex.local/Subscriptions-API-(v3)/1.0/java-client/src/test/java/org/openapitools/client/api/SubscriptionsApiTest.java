/*
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner;
import org.openapitools.client.model.SimulateResponseVO;
import org.openapitools.client.model.SubscriptionGroupRequest;
import org.openapitools.client.model.SubscriptionGroupResponse;
import org.openapitools.client.model.SubscriptionThinItemRequest;
import org.openapitools.client.model.SubscriptionUpdateRequestV3;
import org.openapitools.client.model.UpdateItemInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscriptionsApi
 */
@Disabled
public class SubscriptionsApiTest {

    private final SubscriptionsApi api = new SubscriptionsApi();

    /**
     * List subscriptions
     *
     * List subscriptions filtering by some arguments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRnsPubSubscriptionsGetTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String customerEmail = null;
        String status = null;
        String addressId = null;
        String paymentId = null;
        String planId = null;
        String nextPurchaseDate = null;
        String originalOrderId = null;
        Integer page = null;
        Integer size = null;
        List<SubscriptionGroupResponse> response = api.apiRnsPubSubscriptionsGet(contentType, accept, customerEmail, status, addressId, paymentId, planId, nextPurchaseDate, originalOrderId, page, size);
        // TODO: test validations
    }

    /**
     * Get subscription details
     *
     * Retrieve a specific subscription by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRnsPubSubscriptionsIdGetTest() throws ApiException {
        String id = null;
        String contentType = null;
        String accept = null;
        SubscriptionGroupResponse response = api.apiRnsPubSubscriptionsIdGet(id, contentType, accept);
        // TODO: test validations
    }

    /**
     * Remove items from a subscription.
     *
     * Removes a specific item from a given subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRnsPubSubscriptionsIdItemsItemIdDeleteTest() throws ApiException {
        String id = null;
        String itemId = null;
        String contentType = null;
        String accept = null;
        api.apiRnsPubSubscriptionsIdItemsItemIdDelete(id, itemId, contentType, accept);
        // TODO: test validations
    }

    /**
     * Edit items on a subscription.
     *
     * Edit a given item on a specific subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRnsPubSubscriptionsIdItemsItemIdPatchTest() throws ApiException {
        String id = null;
        String itemId = null;
        String contentType = null;
        String accept = null;
        UpdateItemInput updateItemInput = null;
        SubscriptionGroupResponse response = api.apiRnsPubSubscriptionsIdItemsItemIdPatch(id, itemId, contentType, accept, updateItemInput);
        // TODO: test validations
    }

    /**
     * Add item to subscription
     *
     * Add a new item to a given subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRnsPubSubscriptionsIdItemsPostTest() throws ApiException {
        String id = null;
        String contentType = null;
        String accept = null;
        SubscriptionThinItemRequest subscriptionThinItemRequest = null;
        SubscriptionGroupResponse response = api.apiRnsPubSubscriptionsIdItemsPost(id, contentType, accept, subscriptionThinItemRequest);
        // TODO: test validations
    }

    /**
     * Update subscription
     *
     * Update a specific subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRnsPubSubscriptionsIdPatchTest() throws ApiException {
        String id = null;
        String contentType = null;
        String accept = null;
        SubscriptionUpdateRequestV3 subscriptionUpdateRequestV3 = null;
        SubscriptionGroupResponse response = api.apiRnsPubSubscriptionsIdPatch(id, contentType, accept, subscriptionUpdateRequestV3);
        // TODO: test validations
    }

    /**
     * Calculate the current prices for a specific subscription
     *
     * Simulates an order made by the specific subscription on checkout and retrieves the current price for items and shipping.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRnsPubSubscriptionsIdSimulatePostTest() throws ApiException {
        String id = null;
        String contentType = null;
        String accept = null;
        SimulateResponseVO response = api.apiRnsPubSubscriptionsIdSimulatePost(id, contentType, accept);
        // TODO: test validations
    }

    /**
     * Create subscription
     *
     * Create a new subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRnsPubSubscriptionsPostTest() throws ApiException {
        String contentType = null;
        String accept = null;
        SubscriptionGroupRequest subscriptionGroupRequest = null;
        SubscriptionGroupResponse response = api.apiRnsPubSubscriptionsPost(contentType, accept, subscriptionGroupRequest);
        // TODO: test validations
    }

    /**
     * Calculate the current prices for the provided subscription template
     *
     * Simulates an order made by subscriptions on checkout and retrieves the current price for items and shipping.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRnsPubSubscriptionsSimulatePostTest() throws ApiException {
        String contentType = null;
        String accept = null;
        SubscriptionGroupRequest subscriptionGroupRequest = null;
        SimulateResponseVO response = api.apiRnsPubSubscriptionsSimulatePost(contentType, accept, subscriptionGroupRequest);
        // TODO: test validations
    }

    /**
     * Get conversation messages
     *
     * Retrieve all conversation messages sent to a customer regarding a given subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetTest() throws ApiException {
        String subscriptionId = null;
        String contentType = null;
        String accept = null;
        List<ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner> response = api.apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet(subscriptionId, contentType, accept);
        // TODO: test validations
    }

}
