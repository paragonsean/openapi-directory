# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.frequency_response import FrequencyResponse
from openapi_server.models.purchase_day import PurchaseDay
from openapi_server.models.validity_response import ValidityResponse
from openapi_server import util


class PlanResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency: FrequencyResponse=None, id: str=None, purchase_day: PurchaseDay=None, validity: ValidityResponse=None):
        """PlanResponse - a model defined in OpenAPI

        :param frequency: The frequency of this PlanResponse.
        :param id: The id of this PlanResponse.
        :param purchase_day: The purchase_day of this PlanResponse.
        :param validity: The validity of this PlanResponse.
        """
        self.openapi_types = {
            'frequency': FrequencyResponse,
            'id': str,
            'purchase_day': PurchaseDay,
            'validity': ValidityResponse
        }

        self.attribute_map = {
            'frequency': 'frequency',
            'id': 'id',
            'purchase_day': 'purchaseDay',
            'validity': 'validity'
        }

        self._frequency = frequency
        self._id = id
        self._purchase_day = purchase_day
        self._validity = validity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlanResponse of this PlanResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency(self):
        """Gets the frequency of this PlanResponse.


        :return: The frequency of this PlanResponse.
        :rtype: FrequencyResponse
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this PlanResponse.


        :param frequency: The frequency of this PlanResponse.
        :type frequency: FrequencyResponse
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency

    @property
    def id(self):
        """Gets the id of this PlanResponse.


        :return: The id of this PlanResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanResponse.


        :param id: The id of this PlanResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def purchase_day(self):
        """Gets the purchase_day of this PlanResponse.


        :return: The purchase_day of this PlanResponse.
        :rtype: PurchaseDay
        """
        return self._purchase_day

    @purchase_day.setter
    def purchase_day(self, purchase_day):
        """Sets the purchase_day of this PlanResponse.


        :param purchase_day: The purchase_day of this PlanResponse.
        :type purchase_day: PurchaseDay
        """
        if purchase_day is None:
            raise ValueError("Invalid value for `purchase_day`, must not be `None`")

        self._purchase_day = purchase_day

    @property
    def validity(self):
        """Gets the validity of this PlanResponse.


        :return: The validity of this PlanResponse.
        :rtype: ValidityResponse
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this PlanResponse.


        :param validity: The validity of this PlanResponse.
        :type validity: ValidityResponse
        """
        if validity is None:
            raise ValueError("Invalid value for `validity`, must not be `None`")

        self._validity = validity
