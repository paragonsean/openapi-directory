# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item_attachment import ItemAttachment
from openapi_server.models.price_tag import PriceTag
from openapi_server import util


class PurchaseContextAvailableGiftResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[ItemAttachment]=None, id: str=None, is_gift: bool=None, is_selected: bool=None, name: str=None, price: int=None, price_tags: List[PriceTag]=None, quantity: int=None, seller: str=None, selling_price: int=None, unit_multiplier: float=None):
        """PurchaseContextAvailableGiftResponse - a model defined in OpenAPI

        :param attachments: The attachments of this PurchaseContextAvailableGiftResponse.
        :param id: The id of this PurchaseContextAvailableGiftResponse.
        :param is_gift: The is_gift of this PurchaseContextAvailableGiftResponse.
        :param is_selected: The is_selected of this PurchaseContextAvailableGiftResponse.
        :param name: The name of this PurchaseContextAvailableGiftResponse.
        :param price: The price of this PurchaseContextAvailableGiftResponse.
        :param price_tags: The price_tags of this PurchaseContextAvailableGiftResponse.
        :param quantity: The quantity of this PurchaseContextAvailableGiftResponse.
        :param seller: The seller of this PurchaseContextAvailableGiftResponse.
        :param selling_price: The selling_price of this PurchaseContextAvailableGiftResponse.
        :param unit_multiplier: The unit_multiplier of this PurchaseContextAvailableGiftResponse.
        """
        self.openapi_types = {
            'attachments': List[ItemAttachment],
            'id': str,
            'is_gift': bool,
            'is_selected': bool,
            'name': str,
            'price': int,
            'price_tags': List[PriceTag],
            'quantity': int,
            'seller': str,
            'selling_price': int,
            'unit_multiplier': float
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'id': 'id',
            'is_gift': 'isGift',
            'is_selected': 'isSelected',
            'name': 'name',
            'price': 'price',
            'price_tags': 'priceTags',
            'quantity': 'quantity',
            'seller': 'seller',
            'selling_price': 'sellingPrice',
            'unit_multiplier': 'unitMultiplier'
        }

        self._attachments = attachments
        self._id = id
        self._is_gift = is_gift
        self._is_selected = is_selected
        self._name = name
        self._price = price
        self._price_tags = price_tags
        self._quantity = quantity
        self._seller = seller
        self._selling_price = selling_price
        self._unit_multiplier = unit_multiplier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseContextAvailableGiftResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseContextAvailableGiftResponse of this PurchaseContextAvailableGiftResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this PurchaseContextAvailableGiftResponse.


        :return: The attachments of this PurchaseContextAvailableGiftResponse.
        :rtype: List[ItemAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this PurchaseContextAvailableGiftResponse.


        :param attachments: The attachments of this PurchaseContextAvailableGiftResponse.
        :type attachments: List[ItemAttachment]
        """

        self._attachments = attachments

    @property
    def id(self):
        """Gets the id of this PurchaseContextAvailableGiftResponse.


        :return: The id of this PurchaseContextAvailableGiftResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PurchaseContextAvailableGiftResponse.


        :param id: The id of this PurchaseContextAvailableGiftResponse.
        :type id: str
        """

        self._id = id

    @property
    def is_gift(self):
        """Gets the is_gift of this PurchaseContextAvailableGiftResponse.


        :return: The is_gift of this PurchaseContextAvailableGiftResponse.
        :rtype: bool
        """
        return self._is_gift

    @is_gift.setter
    def is_gift(self, is_gift):
        """Sets the is_gift of this PurchaseContextAvailableGiftResponse.


        :param is_gift: The is_gift of this PurchaseContextAvailableGiftResponse.
        :type is_gift: bool
        """

        self._is_gift = is_gift

    @property
    def is_selected(self):
        """Gets the is_selected of this PurchaseContextAvailableGiftResponse.


        :return: The is_selected of this PurchaseContextAvailableGiftResponse.
        :rtype: bool
        """
        return self._is_selected

    @is_selected.setter
    def is_selected(self, is_selected):
        """Sets the is_selected of this PurchaseContextAvailableGiftResponse.


        :param is_selected: The is_selected of this PurchaseContextAvailableGiftResponse.
        :type is_selected: bool
        """

        self._is_selected = is_selected

    @property
    def name(self):
        """Gets the name of this PurchaseContextAvailableGiftResponse.


        :return: The name of this PurchaseContextAvailableGiftResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PurchaseContextAvailableGiftResponse.


        :param name: The name of this PurchaseContextAvailableGiftResponse.
        :type name: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this PurchaseContextAvailableGiftResponse.


        :return: The price of this PurchaseContextAvailableGiftResponse.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PurchaseContextAvailableGiftResponse.


        :param price: The price of this PurchaseContextAvailableGiftResponse.
        :type price: int
        """

        self._price = price

    @property
    def price_tags(self):
        """Gets the price_tags of this PurchaseContextAvailableGiftResponse.


        :return: The price_tags of this PurchaseContextAvailableGiftResponse.
        :rtype: List[PriceTag]
        """
        return self._price_tags

    @price_tags.setter
    def price_tags(self, price_tags):
        """Sets the price_tags of this PurchaseContextAvailableGiftResponse.


        :param price_tags: The price_tags of this PurchaseContextAvailableGiftResponse.
        :type price_tags: List[PriceTag]
        """

        self._price_tags = price_tags

    @property
    def quantity(self):
        """Gets the quantity of this PurchaseContextAvailableGiftResponse.

        Amount of units in the cart.

        :return: The quantity of this PurchaseContextAvailableGiftResponse.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PurchaseContextAvailableGiftResponse.

        Amount of units in the cart.

        :param quantity: The quantity of this PurchaseContextAvailableGiftResponse.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def seller(self):
        """Gets the seller of this PurchaseContextAvailableGiftResponse.


        :return: The seller of this PurchaseContextAvailableGiftResponse.
        :rtype: str
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this PurchaseContextAvailableGiftResponse.


        :param seller: The seller of this PurchaseContextAvailableGiftResponse.
        :type seller: str
        """

        self._seller = seller

    @property
    def selling_price(self):
        """Gets the selling_price of this PurchaseContextAvailableGiftResponse.


        :return: The selling_price of this PurchaseContextAvailableGiftResponse.
        :rtype: int
        """
        return self._selling_price

    @selling_price.setter
    def selling_price(self, selling_price):
        """Sets the selling_price of this PurchaseContextAvailableGiftResponse.


        :param selling_price: The selling_price of this PurchaseContextAvailableGiftResponse.
        :type selling_price: int
        """

        self._selling_price = selling_price

    @property
    def unit_multiplier(self):
        """Gets the unit_multiplier of this PurchaseContextAvailableGiftResponse.


        :return: The unit_multiplier of this PurchaseContextAvailableGiftResponse.
        :rtype: float
        """
        return self._unit_multiplier

    @unit_multiplier.setter
    def unit_multiplier(self, unit_multiplier):
        """Sets the unit_multiplier of this PurchaseContextAvailableGiftResponse.


        :param unit_multiplier: The unit_multiplier of this PurchaseContextAvailableGiftResponse.
        :type unit_multiplier: float
        """

        self._unit_multiplier = unit_multiplier
