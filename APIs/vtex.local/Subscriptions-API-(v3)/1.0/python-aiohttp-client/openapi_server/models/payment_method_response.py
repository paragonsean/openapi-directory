# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentMethodResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, installments: int=None, payment_account_id: str=None, payment_system: str=None):
        """PaymentMethodResponse - a model defined in OpenAPI

        :param installments: The installments of this PaymentMethodResponse.
        :param payment_account_id: The payment_account_id of this PaymentMethodResponse.
        :param payment_system: The payment_system of this PaymentMethodResponse.
        """
        self.openapi_types = {
            'installments': int,
            'payment_account_id': str,
            'payment_system': str
        }

        self.attribute_map = {
            'installments': 'installments',
            'payment_account_id': 'paymentAccountId',
            'payment_system': 'paymentSystem'
        }

        self._installments = installments
        self._payment_account_id = payment_account_id
        self._payment_system = payment_system

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentMethodResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentMethodResponse of this PaymentMethodResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def installments(self):
        """Gets the installments of this PaymentMethodResponse.


        :return: The installments of this PaymentMethodResponse.
        :rtype: int
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this PaymentMethodResponse.


        :param installments: The installments of this PaymentMethodResponse.
        :type installments: int
        """

        self._installments = installments

    @property
    def payment_account_id(self):
        """Gets the payment_account_id of this PaymentMethodResponse.


        :return: The payment_account_id of this PaymentMethodResponse.
        :rtype: str
        """
        return self._payment_account_id

    @payment_account_id.setter
    def payment_account_id(self, payment_account_id):
        """Sets the payment_account_id of this PaymentMethodResponse.


        :param payment_account_id: The payment_account_id of this PaymentMethodResponse.
        :type payment_account_id: str
        """

        self._payment_account_id = payment_account_id

    @property
    def payment_system(self):
        """Gets the payment_system of this PaymentMethodResponse.


        :return: The payment_system of this PaymentMethodResponse.
        :rtype: str
        """
        return self._payment_system

    @payment_system.setter
    def payment_system(self, payment_system):
        """Sets the payment_system of this PaymentMethodResponse.


        :param payment_system: The payment_system of this PaymentMethodResponse.
        :type payment_system: str
        """
        if payment_system is None:
            raise ValueError("Invalid value for `payment_system`, must not be `None`")

        self._payment_system = payment_system
