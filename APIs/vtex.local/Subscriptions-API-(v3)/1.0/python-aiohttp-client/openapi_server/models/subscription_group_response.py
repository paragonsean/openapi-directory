# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plan_response import PlanResponse
from openapi_server.models.purchase_settings_response import PurchaseSettingsResponse
from openapi_server.models.shipping_address_response import ShippingAddressResponse
from openapi_server.models.subscription_item_response import SubscriptionItemResponse
from openapi_server import util


class SubscriptionGroupResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, customer_email: str=None, customer_id: str=None, cycle_count: int=None, id: str=None, is_skipped: bool=None, items: List[SubscriptionItemResponse]=None, last_purchase_date: datetime=None, last_update: datetime=None, next_purchase_date: datetime=None, plan: PlanResponse=None, purchase_settings: PurchaseSettingsResponse=None, shipping_address: ShippingAddressResponse=None, status: str=None, title: str=None):
        """SubscriptionGroupResponse - a model defined in OpenAPI

        :param created_at: The created_at of this SubscriptionGroupResponse.
        :param customer_email: The customer_email of this SubscriptionGroupResponse.
        :param customer_id: The customer_id of this SubscriptionGroupResponse.
        :param cycle_count: The cycle_count of this SubscriptionGroupResponse.
        :param id: The id of this SubscriptionGroupResponse.
        :param is_skipped: The is_skipped of this SubscriptionGroupResponse.
        :param items: The items of this SubscriptionGroupResponse.
        :param last_purchase_date: The last_purchase_date of this SubscriptionGroupResponse.
        :param last_update: The last_update of this SubscriptionGroupResponse.
        :param next_purchase_date: The next_purchase_date of this SubscriptionGroupResponse.
        :param plan: The plan of this SubscriptionGroupResponse.
        :param purchase_settings: The purchase_settings of this SubscriptionGroupResponse.
        :param shipping_address: The shipping_address of this SubscriptionGroupResponse.
        :param status: The status of this SubscriptionGroupResponse.
        :param title: The title of this SubscriptionGroupResponse.
        """
        self.openapi_types = {
            'created_at': datetime,
            'customer_email': str,
            'customer_id': str,
            'cycle_count': int,
            'id': str,
            'is_skipped': bool,
            'items': List[SubscriptionItemResponse],
            'last_purchase_date': datetime,
            'last_update': datetime,
            'next_purchase_date': datetime,
            'plan': PlanResponse,
            'purchase_settings': PurchaseSettingsResponse,
            'shipping_address': ShippingAddressResponse,
            'status': str,
            'title': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'customer_email': 'customerEmail',
            'customer_id': 'customerId',
            'cycle_count': 'cycleCount',
            'id': 'id',
            'is_skipped': 'isSkipped',
            'items': 'items',
            'last_purchase_date': 'lastPurchaseDate',
            'last_update': 'lastUpdate',
            'next_purchase_date': 'nextPurchaseDate',
            'plan': 'plan',
            'purchase_settings': 'purchaseSettings',
            'shipping_address': 'shippingAddress',
            'status': 'status',
            'title': 'title'
        }

        self._created_at = created_at
        self._customer_email = customer_email
        self._customer_id = customer_id
        self._cycle_count = cycle_count
        self._id = id
        self._is_skipped = is_skipped
        self._items = items
        self._last_purchase_date = last_purchase_date
        self._last_update = last_update
        self._next_purchase_date = next_purchase_date
        self._plan = plan
        self._purchase_settings = purchase_settings
        self._shipping_address = shipping_address
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionGroupResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionGroupResponse of this SubscriptionGroupResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this SubscriptionGroupResponse.


        :return: The created_at of this SubscriptionGroupResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SubscriptionGroupResponse.


        :param created_at: The created_at of this SubscriptionGroupResponse.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def customer_email(self):
        """Gets the customer_email of this SubscriptionGroupResponse.


        :return: The customer_email of this SubscriptionGroupResponse.
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this SubscriptionGroupResponse.


        :param customer_email: The customer_email of this SubscriptionGroupResponse.
        :type customer_email: str
        """
        if customer_email is None:
            raise ValueError("Invalid value for `customer_email`, must not be `None`")

        self._customer_email = customer_email

    @property
    def customer_id(self):
        """Gets the customer_id of this SubscriptionGroupResponse.


        :return: The customer_id of this SubscriptionGroupResponse.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SubscriptionGroupResponse.


        :param customer_id: The customer_id of this SubscriptionGroupResponse.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")

        self._customer_id = customer_id

    @property
    def cycle_count(self):
        """Gets the cycle_count of this SubscriptionGroupResponse.


        :return: The cycle_count of this SubscriptionGroupResponse.
        :rtype: int
        """
        return self._cycle_count

    @cycle_count.setter
    def cycle_count(self, cycle_count):
        """Sets the cycle_count of this SubscriptionGroupResponse.


        :param cycle_count: The cycle_count of this SubscriptionGroupResponse.
        :type cycle_count: int
        """
        if cycle_count is None:
            raise ValueError("Invalid value for `cycle_count`, must not be `None`")

        self._cycle_count = cycle_count

    @property
    def id(self):
        """Gets the id of this SubscriptionGroupResponse.


        :return: The id of this SubscriptionGroupResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionGroupResponse.


        :param id: The id of this SubscriptionGroupResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_skipped(self):
        """Gets the is_skipped of this SubscriptionGroupResponse.


        :return: The is_skipped of this SubscriptionGroupResponse.
        :rtype: bool
        """
        return self._is_skipped

    @is_skipped.setter
    def is_skipped(self, is_skipped):
        """Sets the is_skipped of this SubscriptionGroupResponse.


        :param is_skipped: The is_skipped of this SubscriptionGroupResponse.
        :type is_skipped: bool
        """
        if is_skipped is None:
            raise ValueError("Invalid value for `is_skipped`, must not be `None`")

        self._is_skipped = is_skipped

    @property
    def items(self):
        """Gets the items of this SubscriptionGroupResponse.


        :return: The items of this SubscriptionGroupResponse.
        :rtype: List[SubscriptionItemResponse]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SubscriptionGroupResponse.


        :param items: The items of this SubscriptionGroupResponse.
        :type items: List[SubscriptionItemResponse]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def last_purchase_date(self):
        """Gets the last_purchase_date of this SubscriptionGroupResponse.


        :return: The last_purchase_date of this SubscriptionGroupResponse.
        :rtype: datetime
        """
        return self._last_purchase_date

    @last_purchase_date.setter
    def last_purchase_date(self, last_purchase_date):
        """Sets the last_purchase_date of this SubscriptionGroupResponse.


        :param last_purchase_date: The last_purchase_date of this SubscriptionGroupResponse.
        :type last_purchase_date: datetime
        """

        self._last_purchase_date = last_purchase_date

    @property
    def last_update(self):
        """Gets the last_update of this SubscriptionGroupResponse.


        :return: The last_update of this SubscriptionGroupResponse.
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this SubscriptionGroupResponse.


        :param last_update: The last_update of this SubscriptionGroupResponse.
        :type last_update: datetime
        """
        if last_update is None:
            raise ValueError("Invalid value for `last_update`, must not be `None`")

        self._last_update = last_update

    @property
    def next_purchase_date(self):
        """Gets the next_purchase_date of this SubscriptionGroupResponse.


        :return: The next_purchase_date of this SubscriptionGroupResponse.
        :rtype: datetime
        """
        return self._next_purchase_date

    @next_purchase_date.setter
    def next_purchase_date(self, next_purchase_date):
        """Sets the next_purchase_date of this SubscriptionGroupResponse.


        :param next_purchase_date: The next_purchase_date of this SubscriptionGroupResponse.
        :type next_purchase_date: datetime
        """
        if next_purchase_date is None:
            raise ValueError("Invalid value for `next_purchase_date`, must not be `None`")

        self._next_purchase_date = next_purchase_date

    @property
    def plan(self):
        """Gets the plan of this SubscriptionGroupResponse.


        :return: The plan of this SubscriptionGroupResponse.
        :rtype: PlanResponse
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this SubscriptionGroupResponse.


        :param plan: The plan of this SubscriptionGroupResponse.
        :type plan: PlanResponse
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def purchase_settings(self):
        """Gets the purchase_settings of this SubscriptionGroupResponse.


        :return: The purchase_settings of this SubscriptionGroupResponse.
        :rtype: PurchaseSettingsResponse
        """
        return self._purchase_settings

    @purchase_settings.setter
    def purchase_settings(self, purchase_settings):
        """Sets the purchase_settings of this SubscriptionGroupResponse.


        :param purchase_settings: The purchase_settings of this SubscriptionGroupResponse.
        :type purchase_settings: PurchaseSettingsResponse
        """
        if purchase_settings is None:
            raise ValueError("Invalid value for `purchase_settings`, must not be `None`")

        self._purchase_settings = purchase_settings

    @property
    def shipping_address(self):
        """Gets the shipping_address of this SubscriptionGroupResponse.


        :return: The shipping_address of this SubscriptionGroupResponse.
        :rtype: ShippingAddressResponse
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this SubscriptionGroupResponse.


        :param shipping_address: The shipping_address of this SubscriptionGroupResponse.
        :type shipping_address: ShippingAddressResponse
        """
        if shipping_address is None:
            raise ValueError("Invalid value for `shipping_address`, must not be `None`")

        self._shipping_address = shipping_address

    @property
    def status(self):
        """Gets the status of this SubscriptionGroupResponse.


        :return: The status of this SubscriptionGroupResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionGroupResponse.


        :param status: The status of this SubscriptionGroupResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def title(self):
        """Gets the title of this SubscriptionGroupResponse.


        :return: The title of this SubscriptionGroupResponse.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SubscriptionGroupResponse.


        :param title: The title of this SubscriptionGroupResponse.
        :type title: str
        """

        self._title = title
