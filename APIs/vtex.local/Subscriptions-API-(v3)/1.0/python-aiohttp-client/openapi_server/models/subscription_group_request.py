# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plan_thin_request import PlanThinRequest
from openapi_server.models.purchase_settings_thin_request import PurchaseSettingsThinRequest
from openapi_server.models.shipping_address import ShippingAddress
from openapi_server.models.subscription_thin_item_request import SubscriptionThinItemRequest
from openapi_server import util


class SubscriptionGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_attachment: str=None, customer_email: str=None, items: List[SubscriptionThinItemRequest]=None, next_purchase_date: datetime=None, plan: PlanThinRequest=None, purchase_settings: PurchaseSettingsThinRequest=None, shipping_address: ShippingAddress=None, status: str=None, title: str=None):
        """SubscriptionGroupRequest - a model defined in OpenAPI

        :param catalog_attachment: The catalog_attachment of this SubscriptionGroupRequest.
        :param customer_email: The customer_email of this SubscriptionGroupRequest.
        :param items: The items of this SubscriptionGroupRequest.
        :param next_purchase_date: The next_purchase_date of this SubscriptionGroupRequest.
        :param plan: The plan of this SubscriptionGroupRequest.
        :param purchase_settings: The purchase_settings of this SubscriptionGroupRequest.
        :param shipping_address: The shipping_address of this SubscriptionGroupRequest.
        :param status: The status of this SubscriptionGroupRequest.
        :param title: The title of this SubscriptionGroupRequest.
        """
        self.openapi_types = {
            'catalog_attachment': str,
            'customer_email': str,
            'items': List[SubscriptionThinItemRequest],
            'next_purchase_date': datetime,
            'plan': PlanThinRequest,
            'purchase_settings': PurchaseSettingsThinRequest,
            'shipping_address': ShippingAddress,
            'status': str,
            'title': str
        }

        self.attribute_map = {
            'catalog_attachment': 'catalogAttachment',
            'customer_email': 'customerEmail',
            'items': 'items',
            'next_purchase_date': 'nextPurchaseDate',
            'plan': 'plan',
            'purchase_settings': 'purchaseSettings',
            'shipping_address': 'shippingAddress',
            'status': 'status',
            'title': 'title'
        }

        self._catalog_attachment = catalog_attachment
        self._customer_email = customer_email
        self._items = items
        self._next_purchase_date = next_purchase_date
        self._plan = plan
        self._purchase_settings = purchase_settings
        self._shipping_address = shipping_address
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionGroupRequest of this SubscriptionGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_attachment(self):
        """Gets the catalog_attachment of this SubscriptionGroupRequest.


        :return: The catalog_attachment of this SubscriptionGroupRequest.
        :rtype: str
        """
        return self._catalog_attachment

    @catalog_attachment.setter
    def catalog_attachment(self, catalog_attachment):
        """Sets the catalog_attachment of this SubscriptionGroupRequest.


        :param catalog_attachment: The catalog_attachment of this SubscriptionGroupRequest.
        :type catalog_attachment: str
        """

        self._catalog_attachment = catalog_attachment

    @property
    def customer_email(self):
        """Gets the customer_email of this SubscriptionGroupRequest.


        :return: The customer_email of this SubscriptionGroupRequest.
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this SubscriptionGroupRequest.


        :param customer_email: The customer_email of this SubscriptionGroupRequest.
        :type customer_email: str
        """
        if customer_email is None:
            raise ValueError("Invalid value for `customer_email`, must not be `None`")

        self._customer_email = customer_email

    @property
    def items(self):
        """Gets the items of this SubscriptionGroupRequest.


        :return: The items of this SubscriptionGroupRequest.
        :rtype: List[SubscriptionThinItemRequest]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SubscriptionGroupRequest.


        :param items: The items of this SubscriptionGroupRequest.
        :type items: List[SubscriptionThinItemRequest]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def next_purchase_date(self):
        """Gets the next_purchase_date of this SubscriptionGroupRequest.


        :return: The next_purchase_date of this SubscriptionGroupRequest.
        :rtype: datetime
        """
        return self._next_purchase_date

    @next_purchase_date.setter
    def next_purchase_date(self, next_purchase_date):
        """Sets the next_purchase_date of this SubscriptionGroupRequest.


        :param next_purchase_date: The next_purchase_date of this SubscriptionGroupRequest.
        :type next_purchase_date: datetime
        """

        self._next_purchase_date = next_purchase_date

    @property
    def plan(self):
        """Gets the plan of this SubscriptionGroupRequest.


        :return: The plan of this SubscriptionGroupRequest.
        :rtype: PlanThinRequest
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this SubscriptionGroupRequest.


        :param plan: The plan of this SubscriptionGroupRequest.
        :type plan: PlanThinRequest
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def purchase_settings(self):
        """Gets the purchase_settings of this SubscriptionGroupRequest.


        :return: The purchase_settings of this SubscriptionGroupRequest.
        :rtype: PurchaseSettingsThinRequest
        """
        return self._purchase_settings

    @purchase_settings.setter
    def purchase_settings(self, purchase_settings):
        """Sets the purchase_settings of this SubscriptionGroupRequest.


        :param purchase_settings: The purchase_settings of this SubscriptionGroupRequest.
        :type purchase_settings: PurchaseSettingsThinRequest
        """
        if purchase_settings is None:
            raise ValueError("Invalid value for `purchase_settings`, must not be `None`")

        self._purchase_settings = purchase_settings

    @property
    def shipping_address(self):
        """Gets the shipping_address of this SubscriptionGroupRequest.


        :return: The shipping_address of this SubscriptionGroupRequest.
        :rtype: ShippingAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this SubscriptionGroupRequest.


        :param shipping_address: The shipping_address of this SubscriptionGroupRequest.
        :type shipping_address: ShippingAddress
        """
        if shipping_address is None:
            raise ValueError("Invalid value for `shipping_address`, must not be `None`")

        self._shipping_address = shipping_address

    @property
    def status(self):
        """Gets the status of this SubscriptionGroupRequest.


        :return: The status of this SubscriptionGroupRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionGroupRequest.


        :param status: The status of this SubscriptionGroupRequest.
        :type status: str
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this SubscriptionGroupRequest.


        :return: The title of this SubscriptionGroupRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SubscriptionGroupRequest.


        :param title: The title of this SubscriptionGroupRequest.
        :type title: str
        """

        self._title = title
