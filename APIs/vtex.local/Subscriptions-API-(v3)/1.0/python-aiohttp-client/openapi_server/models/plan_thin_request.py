# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.frequency_request import FrequencyRequest
from openapi_server.models.validity_request import ValidityRequest
from openapi_server import util


class PlanThinRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency: FrequencyRequest=None, id: str=None, purchase_day: str=None, validity: ValidityRequest=None):
        """PlanThinRequest - a model defined in OpenAPI

        :param frequency: The frequency of this PlanThinRequest.
        :param id: The id of this PlanThinRequest.
        :param purchase_day: The purchase_day of this PlanThinRequest.
        :param validity: The validity of this PlanThinRequest.
        """
        self.openapi_types = {
            'frequency': FrequencyRequest,
            'id': str,
            'purchase_day': str,
            'validity': ValidityRequest
        }

        self.attribute_map = {
            'frequency': 'frequency',
            'id': 'id',
            'purchase_day': 'purchaseDay',
            'validity': 'validity'
        }

        self._frequency = frequency
        self._id = id
        self._purchase_day = purchase_day
        self._validity = validity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanThinRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlanThinRequest of this PlanThinRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency(self):
        """Gets the frequency of this PlanThinRequest.


        :return: The frequency of this PlanThinRequest.
        :rtype: FrequencyRequest
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this PlanThinRequest.


        :param frequency: The frequency of this PlanThinRequest.
        :type frequency: FrequencyRequest
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency

    @property
    def id(self):
        """Gets the id of this PlanThinRequest.

        ID of the plan.

        :return: The id of this PlanThinRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlanThinRequest.

        ID of the plan.

        :param id: The id of this PlanThinRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def purchase_day(self):
        """Gets the purchase_day of this PlanThinRequest.

        Day in which recurrent orders will be created.

        :return: The purchase_day of this PlanThinRequest.
        :rtype: str
        """
        return self._purchase_day

    @purchase_day.setter
    def purchase_day(self, purchase_day):
        """Sets the purchase_day of this PlanThinRequest.

        Day in which recurrent orders will be created.

        :param purchase_day: The purchase_day of this PlanThinRequest.
        :type purchase_day: str
        """
        if purchase_day is None:
            raise ValueError("Invalid value for `purchase_day`, must not be `None`")

        self._purchase_day = purchase_day

    @property
    def validity(self):
        """Gets the validity of this PlanThinRequest.


        :return: The validity of this PlanThinRequest.
        :rtype: ValidityRequest
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this PlanThinRequest.


        :param validity: The validity of this PlanThinRequest.
        :type validity: ValidityRequest
        """

        self._validity = validity
