# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_field import PaymentField
from openapi_server import util


class Payment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, bin: str=None, card_number: str=None, fields: List[PaymentField]=None, group: str=None, id: str=None, installments: int=None, parent_account_id: str=None, payment_system: str=None, reference_value: int=None, url: str=None, value: int=None):
        """Payment - a model defined in OpenAPI

        :param account_id: The account_id of this Payment.
        :param bin: The bin of this Payment.
        :param card_number: The card_number of this Payment.
        :param fields: The fields of this Payment.
        :param group: The group of this Payment.
        :param id: The id of this Payment.
        :param installments: The installments of this Payment.
        :param parent_account_id: The parent_account_id of this Payment.
        :param payment_system: The payment_system of this Payment.
        :param reference_value: The reference_value of this Payment.
        :param url: The url of this Payment.
        :param value: The value of this Payment.
        """
        self.openapi_types = {
            'account_id': str,
            'bin': str,
            'card_number': str,
            'fields': List[PaymentField],
            'group': str,
            'id': str,
            'installments': int,
            'parent_account_id': str,
            'payment_system': str,
            'reference_value': int,
            'url': str,
            'value': int
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'bin': 'bin',
            'card_number': 'cardNumber',
            'fields': 'fields',
            'group': 'group',
            'id': 'id',
            'installments': 'installments',
            'parent_account_id': 'parentAccountId',
            'payment_system': 'paymentSystem',
            'reference_value': 'referenceValue',
            'url': 'url',
            'value': 'value'
        }

        self._account_id = account_id
        self._bin = bin
        self._card_number = card_number
        self._fields = fields
        self._group = group
        self._id = id
        self._installments = installments
        self._parent_account_id = parent_account_id
        self._payment_system = payment_system
        self._reference_value = reference_value
        self._url = url
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payment of this Payment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Payment.


        :return: The account_id of this Payment.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Payment.


        :param account_id: The account_id of this Payment.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def bin(self):
        """Gets the bin of this Payment.


        :return: The bin of this Payment.
        :rtype: str
        """
        return self._bin

    @bin.setter
    def bin(self, bin):
        """Sets the bin of this Payment.


        :param bin: The bin of this Payment.
        :type bin: str
        """

        self._bin = bin

    @property
    def card_number(self):
        """Gets the card_number of this Payment.


        :return: The card_number of this Payment.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this Payment.


        :param card_number: The card_number of this Payment.
        :type card_number: str
        """

        self._card_number = card_number

    @property
    def fields(self):
        """Gets the fields of this Payment.


        :return: The fields of this Payment.
        :rtype: List[PaymentField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Payment.


        :param fields: The fields of this Payment.
        :type fields: List[PaymentField]
        """

        self._fields = fields

    @property
    def group(self):
        """Gets the group of this Payment.


        :return: The group of this Payment.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Payment.


        :param group: The group of this Payment.
        :type group: str
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this Payment.


        :return: The id of this Payment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payment.


        :param id: The id of this Payment.
        :type id: str
        """

        self._id = id

    @property
    def installments(self):
        """Gets the installments of this Payment.


        :return: The installments of this Payment.
        :rtype: int
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this Payment.


        :param installments: The installments of this Payment.
        :type installments: int
        """

        self._installments = installments

    @property
    def parent_account_id(self):
        """Gets the parent_account_id of this Payment.


        :return: The parent_account_id of this Payment.
        :rtype: str
        """
        return self._parent_account_id

    @parent_account_id.setter
    def parent_account_id(self, parent_account_id):
        """Sets the parent_account_id of this Payment.


        :param parent_account_id: The parent_account_id of this Payment.
        :type parent_account_id: str
        """

        self._parent_account_id = parent_account_id

    @property
    def payment_system(self):
        """Gets the payment_system of this Payment.


        :return: The payment_system of this Payment.
        :rtype: str
        """
        return self._payment_system

    @payment_system.setter
    def payment_system(self, payment_system):
        """Sets the payment_system of this Payment.


        :param payment_system: The payment_system of this Payment.
        :type payment_system: str
        """

        self._payment_system = payment_system

    @property
    def reference_value(self):
        """Gets the reference_value of this Payment.


        :return: The reference_value of this Payment.
        :rtype: int
        """
        return self._reference_value

    @reference_value.setter
    def reference_value(self, reference_value):
        """Sets the reference_value of this Payment.


        :param reference_value: The reference_value of this Payment.
        :type reference_value: int
        """

        self._reference_value = reference_value

    @property
    def url(self):
        """Gets the url of this Payment.


        :return: The url of this Payment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Payment.


        :param url: The url of this Payment.
        :type url: str
        """

        self._url = url

    @property
    def value(self):
        """Gets the value of this Payment.


        :return: The value of this Payment.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Payment.


        :param value: The value of this Payment.
        :type value: int
        """

        self._value = value
