# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.periodicity import Periodicity
from openapi_server import util


class Frequency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interval: int=None, periodicity: Periodicity=None, periodicity_as_string: str=None):
        """Frequency - a model defined in OpenAPI

        :param interval: The interval of this Frequency.
        :param periodicity: The periodicity of this Frequency.
        :param periodicity_as_string: The periodicity_as_string of this Frequency.
        """
        self.openapi_types = {
            'interval': int,
            'periodicity': Periodicity,
            'periodicity_as_string': str
        }

        self.attribute_map = {
            'interval': 'interval',
            'periodicity': 'periodicity',
            'periodicity_as_string': 'periodicityAsString'
        }

        self._interval = interval
        self._periodicity = periodicity
        self._periodicity_as_string = periodicity_as_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Frequency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Frequency of this Frequency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interval(self):
        """Gets the interval of this Frequency.


        :return: The interval of this Frequency.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Frequency.


        :param interval: The interval of this Frequency.
        :type interval: int
        """

        self._interval = interval

    @property
    def periodicity(self):
        """Gets the periodicity of this Frequency.


        :return: The periodicity of this Frequency.
        :rtype: Periodicity
        """
        return self._periodicity

    @periodicity.setter
    def periodicity(self, periodicity):
        """Sets the periodicity of this Frequency.


        :param periodicity: The periodicity of this Frequency.
        :type periodicity: Periodicity
        """

        self._periodicity = periodicity

    @property
    def periodicity_as_string(self):
        """Gets the periodicity_as_string of this Frequency.


        :return: The periodicity_as_string of this Frequency.
        :rtype: str
        """
        return self._periodicity_as_string

    @periodicity_as_string.setter
    def periodicity_as_string(self, periodicity_as_string):
        """Sets the periodicity_as_string of this Frequency.


        :param periodicity_as_string: The periodicity_as_string of this Frequency.
        :type periodicity_as_string: str
        """

        self._periodicity_as_string = periodicity_as_string
