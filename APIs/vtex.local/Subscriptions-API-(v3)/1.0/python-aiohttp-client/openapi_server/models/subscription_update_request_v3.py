# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plan_thin_request import PlanThinRequest
from openapi_server.models.purchase_settings_thin_request import PurchaseSettingsThinRequest
from openapi_server.models.shipping_address import ShippingAddress
from openapi_server import util


class SubscriptionUpdateRequestV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_skipped: bool=None, plan: PlanThinRequest=None, purchase_settings: PurchaseSettingsThinRequest=None, shipping_address: ShippingAddress=None, status: str=None, title: str=None):
        """SubscriptionUpdateRequestV3 - a model defined in OpenAPI

        :param is_skipped: The is_skipped of this SubscriptionUpdateRequestV3.
        :param plan: The plan of this SubscriptionUpdateRequestV3.
        :param purchase_settings: The purchase_settings of this SubscriptionUpdateRequestV3.
        :param shipping_address: The shipping_address of this SubscriptionUpdateRequestV3.
        :param status: The status of this SubscriptionUpdateRequestV3.
        :param title: The title of this SubscriptionUpdateRequestV3.
        """
        self.openapi_types = {
            'is_skipped': bool,
            'plan': PlanThinRequest,
            'purchase_settings': PurchaseSettingsThinRequest,
            'shipping_address': ShippingAddress,
            'status': str,
            'title': str
        }

        self.attribute_map = {
            'is_skipped': 'isSkipped',
            'plan': 'plan',
            'purchase_settings': 'purchaseSettings',
            'shipping_address': 'shippingAddress',
            'status': 'status',
            'title': 'title'
        }

        self._is_skipped = is_skipped
        self._plan = plan
        self._purchase_settings = purchase_settings
        self._shipping_address = shipping_address
        self._status = status
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionUpdateRequestV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionUpdateRequestV3 of this SubscriptionUpdateRequestV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_skipped(self):
        """Gets the is_skipped of this SubscriptionUpdateRequestV3.

        When set as `true`, it means the shopper asked to skip the next subscription order, and when set as `false`, no subscription order is going to be skipped.

        :return: The is_skipped of this SubscriptionUpdateRequestV3.
        :rtype: bool
        """
        return self._is_skipped

    @is_skipped.setter
    def is_skipped(self, is_skipped):
        """Sets the is_skipped of this SubscriptionUpdateRequestV3.

        When set as `true`, it means the shopper asked to skip the next subscription order, and when set as `false`, no subscription order is going to be skipped.

        :param is_skipped: The is_skipped of this SubscriptionUpdateRequestV3.
        :type is_skipped: bool
        """

        self._is_skipped = is_skipped

    @property
    def plan(self):
        """Gets the plan of this SubscriptionUpdateRequestV3.


        :return: The plan of this SubscriptionUpdateRequestV3.
        :rtype: PlanThinRequest
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this SubscriptionUpdateRequestV3.


        :param plan: The plan of this SubscriptionUpdateRequestV3.
        :type plan: PlanThinRequest
        """

        self._plan = plan

    @property
    def purchase_settings(self):
        """Gets the purchase_settings of this SubscriptionUpdateRequestV3.


        :return: The purchase_settings of this SubscriptionUpdateRequestV3.
        :rtype: PurchaseSettingsThinRequest
        """
        return self._purchase_settings

    @purchase_settings.setter
    def purchase_settings(self, purchase_settings):
        """Sets the purchase_settings of this SubscriptionUpdateRequestV3.


        :param purchase_settings: The purchase_settings of this SubscriptionUpdateRequestV3.
        :type purchase_settings: PurchaseSettingsThinRequest
        """

        self._purchase_settings = purchase_settings

    @property
    def shipping_address(self):
        """Gets the shipping_address of this SubscriptionUpdateRequestV3.


        :return: The shipping_address of this SubscriptionUpdateRequestV3.
        :rtype: ShippingAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this SubscriptionUpdateRequestV3.


        :param shipping_address: The shipping_address of this SubscriptionUpdateRequestV3.
        :type shipping_address: ShippingAddress
        """

        self._shipping_address = shipping_address

    @property
    def status(self):
        """Gets the status of this SubscriptionUpdateRequestV3.

        Status to which you wish to update the subscription. The accepted values are:   - `ACTIVE`   - `PAUSED`   - `CANCELLED`   - `EXPIRED`   - `MISSING`

        :return: The status of this SubscriptionUpdateRequestV3.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionUpdateRequestV3.

        Status to which you wish to update the subscription. The accepted values are:   - `ACTIVE`   - `PAUSED`   - `CANCELLED`   - `EXPIRED`   - `MISSING`

        :param status: The status of this SubscriptionUpdateRequestV3.
        :type status: str
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this SubscriptionUpdateRequestV3.

        Name of the subscription.

        :return: The title of this SubscriptionUpdateRequestV3.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SubscriptionUpdateRequestV3.

        Name of the subscription.

        :param title: The title of this SubscriptionUpdateRequestV3.
        :type title: str
        """

        self._title = title
