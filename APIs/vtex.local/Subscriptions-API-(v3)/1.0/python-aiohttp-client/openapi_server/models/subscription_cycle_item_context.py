# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class SubscriptionCycleItemContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cycle_count: int=None, is_skipped: bool=None, quantity: int=None, sku_id: str=None, status: Status=None, subscription_item_id: str=None):
        """SubscriptionCycleItemContext - a model defined in OpenAPI

        :param cycle_count: The cycle_count of this SubscriptionCycleItemContext.
        :param is_skipped: The is_skipped of this SubscriptionCycleItemContext.
        :param quantity: The quantity of this SubscriptionCycleItemContext.
        :param sku_id: The sku_id of this SubscriptionCycleItemContext.
        :param status: The status of this SubscriptionCycleItemContext.
        :param subscription_item_id: The subscription_item_id of this SubscriptionCycleItemContext.
        """
        self.openapi_types = {
            'cycle_count': int,
            'is_skipped': bool,
            'quantity': int,
            'sku_id': str,
            'status': Status,
            'subscription_item_id': str
        }

        self.attribute_map = {
            'cycle_count': 'cycleCount',
            'is_skipped': 'isSkipped',
            'quantity': 'quantity',
            'sku_id': 'skuId',
            'status': 'status',
            'subscription_item_id': 'subscriptionItemId'
        }

        self._cycle_count = cycle_count
        self._is_skipped = is_skipped
        self._quantity = quantity
        self._sku_id = sku_id
        self._status = status
        self._subscription_item_id = subscription_item_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionCycleItemContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionCycleItemContext of this SubscriptionCycleItemContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cycle_count(self):
        """Gets the cycle_count of this SubscriptionCycleItemContext.


        :return: The cycle_count of this SubscriptionCycleItemContext.
        :rtype: int
        """
        return self._cycle_count

    @cycle_count.setter
    def cycle_count(self, cycle_count):
        """Sets the cycle_count of this SubscriptionCycleItemContext.


        :param cycle_count: The cycle_count of this SubscriptionCycleItemContext.
        :type cycle_count: int
        """

        self._cycle_count = cycle_count

    @property
    def is_skipped(self):
        """Gets the is_skipped of this SubscriptionCycleItemContext.


        :return: The is_skipped of this SubscriptionCycleItemContext.
        :rtype: bool
        """
        return self._is_skipped

    @is_skipped.setter
    def is_skipped(self, is_skipped):
        """Sets the is_skipped of this SubscriptionCycleItemContext.


        :param is_skipped: The is_skipped of this SubscriptionCycleItemContext.
        :type is_skipped: bool
        """

        self._is_skipped = is_skipped

    @property
    def quantity(self):
        """Gets the quantity of this SubscriptionCycleItemContext.

        Amount of units in the cart.

        :return: The quantity of this SubscriptionCycleItemContext.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SubscriptionCycleItemContext.

        Amount of units in the cart.

        :param quantity: The quantity of this SubscriptionCycleItemContext.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def sku_id(self):
        """Gets the sku_id of this SubscriptionCycleItemContext.

        SKU ID.

        :return: The sku_id of this SubscriptionCycleItemContext.
        :rtype: str
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this SubscriptionCycleItemContext.

        SKU ID.

        :param sku_id: The sku_id of this SubscriptionCycleItemContext.
        :type sku_id: str
        """

        self._sku_id = sku_id

    @property
    def status(self):
        """Gets the status of this SubscriptionCycleItemContext.


        :return: The status of this SubscriptionCycleItemContext.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionCycleItemContext.


        :param status: The status of this SubscriptionCycleItemContext.
        :type status: Status
        """

        self._status = status

    @property
    def subscription_item_id(self):
        """Gets the subscription_item_id of this SubscriptionCycleItemContext.


        :return: The subscription_item_id of this SubscriptionCycleItemContext.
        :rtype: str
        """
        return self._subscription_item_id

    @subscription_item_id.setter
    def subscription_item_id(self, subscription_item_id):
        """Sets the subscription_item_id of this SubscriptionCycleItemContext.


        :param subscription_item_id: The subscription_item_id of this SubscriptionCycleItemContext.
        :type subscription_item_id: str
        """

        self._subscription_item_id = subscription_item_id
