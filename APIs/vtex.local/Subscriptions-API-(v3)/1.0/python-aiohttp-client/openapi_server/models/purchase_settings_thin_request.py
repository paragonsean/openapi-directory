# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_method_thin_request import PaymentMethodThinRequest
from openapi_server import util


class PurchaseSettingsThinRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payment_method: PaymentMethodThinRequest=None, sales_channel: str='1'):
        """PurchaseSettingsThinRequest - a model defined in OpenAPI

        :param payment_method: The payment_method of this PurchaseSettingsThinRequest.
        :param sales_channel: The sales_channel of this PurchaseSettingsThinRequest.
        """
        self.openapi_types = {
            'payment_method': PaymentMethodThinRequest,
            'sales_channel': str
        }

        self.attribute_map = {
            'payment_method': 'paymentMethod',
            'sales_channel': 'salesChannel'
        }

        self._payment_method = payment_method
        self._sales_channel = sales_channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseSettingsThinRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseSettingsThinRequest of this PurchaseSettingsThinRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payment_method(self):
        """Gets the payment_method of this PurchaseSettingsThinRequest.


        :return: The payment_method of this PurchaseSettingsThinRequest.
        :rtype: PaymentMethodThinRequest
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PurchaseSettingsThinRequest.


        :param payment_method: The payment_method of this PurchaseSettingsThinRequest.
        :type payment_method: PaymentMethodThinRequest
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")

        self._payment_method = payment_method

    @property
    def sales_channel(self):
        """Gets the sales_channel of this PurchaseSettingsThinRequest.

        Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) applied to the subscription being created. You can associate only one sales channel to each subscription. The default value is the main sales channel, which corresponds to `1`.

        :return: The sales_channel of this PurchaseSettingsThinRequest.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this PurchaseSettingsThinRequest.

        Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) applied to the subscription being created. You can associate only one sales channel to each subscription. The default value is the main sales channel, which corresponds to `1`.

        :param sales_channel: The sales_channel of this PurchaseSettingsThinRequest.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel
