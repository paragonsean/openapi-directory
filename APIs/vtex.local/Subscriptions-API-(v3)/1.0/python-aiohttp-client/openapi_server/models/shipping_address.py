# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShippingAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_id: str=None, address_type: str=None):
        """ShippingAddress - a model defined in OpenAPI

        :param address_id: The address_id of this ShippingAddress.
        :param address_type: The address_type of this ShippingAddress.
        """
        self.openapi_types = {
            'address_id': str,
            'address_type': str
        }

        self.attribute_map = {
            'address_id': 'addressId',
            'address_type': 'addressType'
        }

        self._address_id = address_id
        self._address_type = address_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The shippingAddress of this ShippingAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_id(self):
        """Gets the address_id of this ShippingAddress.

        Shipping address ID.

        :return: The address_id of this ShippingAddress.
        :rtype: str
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this ShippingAddress.

        Shipping address ID.

        :param address_id: The address_id of this ShippingAddress.
        :type address_id: str
        """
        if address_id is None:
            raise ValueError("Invalid value for `address_id`, must not be `None`")

        self._address_id = address_id

    @property
    def address_type(self):
        """Gets the address_type of this ShippingAddress.

        Type of the address. Possible values are `residential` or `pickup`.

        :return: The address_type of this ShippingAddress.
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this ShippingAddress.

        Type of the address. Possible values are `residential` or `pickup`.

        :param address_type: The address_type of this ShippingAddress.
        :type address_type: str
        """
        if address_type is None:
            raise ValueError("Invalid value for `address_type`, must not be `None`")

        self._address_type = address_type
