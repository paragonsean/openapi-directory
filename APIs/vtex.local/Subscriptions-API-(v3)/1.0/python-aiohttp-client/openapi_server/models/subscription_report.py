# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_report_param import SubscriptionReportParam
from openapi_server import util


class SubscriptionReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, description: str=None, entity: str=None, key: str=None, name: str=None, params: List[SubscriptionReportParam]=None, query: str=None, requester_email: str=None, _schema: str=None):
        """SubscriptionReport - a model defined in OpenAPI

        :param account: The account of this SubscriptionReport.
        :param description: The description of this SubscriptionReport.
        :param entity: The entity of this SubscriptionReport.
        :param key: The key of this SubscriptionReport.
        :param name: The name of this SubscriptionReport.
        :param params: The params of this SubscriptionReport.
        :param query: The query of this SubscriptionReport.
        :param requester_email: The requester_email of this SubscriptionReport.
        :param _schema: The _schema of this SubscriptionReport.
        """
        self.openapi_types = {
            'account': str,
            'description': str,
            'entity': str,
            'key': str,
            'name': str,
            'params': List[SubscriptionReportParam],
            'query': str,
            'requester_email': str,
            '_schema': str
        }

        self.attribute_map = {
            'account': 'account',
            'description': 'description',
            'entity': 'entity',
            'key': 'key',
            'name': 'name',
            'params': 'params',
            'query': 'query',
            'requester_email': 'requesterEmail',
            '_schema': 'schema'
        }

        self._account = account
        self._description = description
        self._entity = entity
        self._key = key
        self._name = name
        self._params = params
        self._query = query
        self._requester_email = requester_email
        self.__schema = _schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionReport of this SubscriptionReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this SubscriptionReport.


        :return: The account of this SubscriptionReport.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this SubscriptionReport.


        :param account: The account of this SubscriptionReport.
        :type account: str
        """

        self._account = account

    @property
    def description(self):
        """Gets the description of this SubscriptionReport.


        :return: The description of this SubscriptionReport.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SubscriptionReport.


        :param description: The description of this SubscriptionReport.
        :type description: str
        """

        self._description = description

    @property
    def entity(self):
        """Gets the entity of this SubscriptionReport.


        :return: The entity of this SubscriptionReport.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this SubscriptionReport.


        :param entity: The entity of this SubscriptionReport.
        :type entity: str
        """

        self._entity = entity

    @property
    def key(self):
        """Gets the key of this SubscriptionReport.


        :return: The key of this SubscriptionReport.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SubscriptionReport.


        :param key: The key of this SubscriptionReport.
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this SubscriptionReport.


        :return: The name of this SubscriptionReport.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriptionReport.


        :param name: The name of this SubscriptionReport.
        :type name: str
        """

        self._name = name

    @property
    def params(self):
        """Gets the params of this SubscriptionReport.


        :return: The params of this SubscriptionReport.
        :rtype: List[SubscriptionReportParam]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this SubscriptionReport.


        :param params: The params of this SubscriptionReport.
        :type params: List[SubscriptionReportParam]
        """

        self._params = params

    @property
    def query(self):
        """Gets the query of this SubscriptionReport.


        :return: The query of this SubscriptionReport.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SubscriptionReport.


        :param query: The query of this SubscriptionReport.
        :type query: str
        """

        self._query = query

    @property
    def requester_email(self):
        """Gets the requester_email of this SubscriptionReport.


        :return: The requester_email of this SubscriptionReport.
        :rtype: str
        """
        return self._requester_email

    @requester_email.setter
    def requester_email(self, requester_email):
        """Sets the requester_email of this SubscriptionReport.


        :param requester_email: The requester_email of this SubscriptionReport.
        :type requester_email: str
        """

        self._requester_email = requester_email

    @property
    def _schema(self):
        """Gets the _schema of this SubscriptionReport.


        :return: The _schema of this SubscriptionReport.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this SubscriptionReport.


        :param _schema: The _schema of this SubscriptionReport.
        :type _schema: str
        """

        self.__schema = _schema
