# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simulation_item_result import SimulationItemResult
from openapi_server.models.subscription_cycle_context import SubscriptionCycleContext
from openapi_server.models.subscription_cycle_order_info import SubscriptionCycleOrderInfo
from openapi_server import util


class SubscriptionCycleResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: SubscriptionCycleContext=None, customer_email: str=None, cycle_count: int=None, _date: datetime=None, id: str=None, is_in_retry: bool=None, last_update: datetime=None, message: str=None, order_info: SubscriptionCycleOrderInfo=None, simulation_items: List[SimulationItemResult]=None, status: str=None, subscription_id: str=None):
        """SubscriptionCycleResponse - a model defined in OpenAPI

        :param context: The context of this SubscriptionCycleResponse.
        :param customer_email: The customer_email of this SubscriptionCycleResponse.
        :param cycle_count: The cycle_count of this SubscriptionCycleResponse.
        :param _date: The _date of this SubscriptionCycleResponse.
        :param id: The id of this SubscriptionCycleResponse.
        :param is_in_retry: The is_in_retry of this SubscriptionCycleResponse.
        :param last_update: The last_update of this SubscriptionCycleResponse.
        :param message: The message of this SubscriptionCycleResponse.
        :param order_info: The order_info of this SubscriptionCycleResponse.
        :param simulation_items: The simulation_items of this SubscriptionCycleResponse.
        :param status: The status of this SubscriptionCycleResponse.
        :param subscription_id: The subscription_id of this SubscriptionCycleResponse.
        """
        self.openapi_types = {
            'context': SubscriptionCycleContext,
            'customer_email': str,
            'cycle_count': int,
            '_date': datetime,
            'id': str,
            'is_in_retry': bool,
            'last_update': datetime,
            'message': str,
            'order_info': SubscriptionCycleOrderInfo,
            'simulation_items': List[SimulationItemResult],
            'status': str,
            'subscription_id': str
        }

        self.attribute_map = {
            'context': 'context',
            'customer_email': 'customerEmail',
            'cycle_count': 'cycleCount',
            '_date': 'date',
            'id': 'id',
            'is_in_retry': 'isInRetry',
            'last_update': 'lastUpdate',
            'message': 'message',
            'order_info': 'orderInfo',
            'simulation_items': 'simulationItems',
            'status': 'status',
            'subscription_id': 'subscriptionId'
        }

        self._context = context
        self._customer_email = customer_email
        self._cycle_count = cycle_count
        self.__date = _date
        self._id = id
        self._is_in_retry = is_in_retry
        self._last_update = last_update
        self._message = message
        self._order_info = order_info
        self._simulation_items = simulation_items
        self._status = status
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionCycleResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionCycleResponse of this SubscriptionCycleResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this SubscriptionCycleResponse.


        :return: The context of this SubscriptionCycleResponse.
        :rtype: SubscriptionCycleContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this SubscriptionCycleResponse.


        :param context: The context of this SubscriptionCycleResponse.
        :type context: SubscriptionCycleContext
        """

        self._context = context

    @property
    def customer_email(self):
        """Gets the customer_email of this SubscriptionCycleResponse.


        :return: The customer_email of this SubscriptionCycleResponse.
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this SubscriptionCycleResponse.


        :param customer_email: The customer_email of this SubscriptionCycleResponse.
        :type customer_email: str
        """

        self._customer_email = customer_email

    @property
    def cycle_count(self):
        """Gets the cycle_count of this SubscriptionCycleResponse.


        :return: The cycle_count of this SubscriptionCycleResponse.
        :rtype: int
        """
        return self._cycle_count

    @cycle_count.setter
    def cycle_count(self, cycle_count):
        """Sets the cycle_count of this SubscriptionCycleResponse.


        :param cycle_count: The cycle_count of this SubscriptionCycleResponse.
        :type cycle_count: int
        """

        self._cycle_count = cycle_count

    @property
    def _date(self):
        """Gets the _date of this SubscriptionCycleResponse.


        :return: The _date of this SubscriptionCycleResponse.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this SubscriptionCycleResponse.


        :param _date: The _date of this SubscriptionCycleResponse.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def id(self):
        """Gets the id of this SubscriptionCycleResponse.


        :return: The id of this SubscriptionCycleResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionCycleResponse.


        :param id: The id of this SubscriptionCycleResponse.
        :type id: str
        """

        self._id = id

    @property
    def is_in_retry(self):
        """Gets the is_in_retry of this SubscriptionCycleResponse.


        :return: The is_in_retry of this SubscriptionCycleResponse.
        :rtype: bool
        """
        return self._is_in_retry

    @is_in_retry.setter
    def is_in_retry(self, is_in_retry):
        """Sets the is_in_retry of this SubscriptionCycleResponse.


        :param is_in_retry: The is_in_retry of this SubscriptionCycleResponse.
        :type is_in_retry: bool
        """

        self._is_in_retry = is_in_retry

    @property
    def last_update(self):
        """Gets the last_update of this SubscriptionCycleResponse.


        :return: The last_update of this SubscriptionCycleResponse.
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this SubscriptionCycleResponse.


        :param last_update: The last_update of this SubscriptionCycleResponse.
        :type last_update: datetime
        """

        self._last_update = last_update

    @property
    def message(self):
        """Gets the message of this SubscriptionCycleResponse.


        :return: The message of this SubscriptionCycleResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SubscriptionCycleResponse.


        :param message: The message of this SubscriptionCycleResponse.
        :type message: str
        """

        self._message = message

    @property
    def order_info(self):
        """Gets the order_info of this SubscriptionCycleResponse.


        :return: The order_info of this SubscriptionCycleResponse.
        :rtype: SubscriptionCycleOrderInfo
        """
        return self._order_info

    @order_info.setter
    def order_info(self, order_info):
        """Sets the order_info of this SubscriptionCycleResponse.


        :param order_info: The order_info of this SubscriptionCycleResponse.
        :type order_info: SubscriptionCycleOrderInfo
        """

        self._order_info = order_info

    @property
    def simulation_items(self):
        """Gets the simulation_items of this SubscriptionCycleResponse.


        :return: The simulation_items of this SubscriptionCycleResponse.
        :rtype: List[SimulationItemResult]
        """
        return self._simulation_items

    @simulation_items.setter
    def simulation_items(self, simulation_items):
        """Sets the simulation_items of this SubscriptionCycleResponse.


        :param simulation_items: The simulation_items of this SubscriptionCycleResponse.
        :type simulation_items: List[SimulationItemResult]
        """

        self._simulation_items = simulation_items

    @property
    def status(self):
        """Gets the status of this SubscriptionCycleResponse.


        :return: The status of this SubscriptionCycleResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionCycleResponse.


        :param status: The status of this SubscriptionCycleResponse.
        :type status: str
        """

        self._status = status

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscriptionCycleResponse.


        :return: The subscription_id of this SubscriptionCycleResponse.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscriptionCycleResponse.


        :param subscription_id: The subscription_id of this SubscriptionCycleResponse.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id
