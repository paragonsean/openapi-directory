# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canceled: bool=None, completed_date: datetime=None, email: str=None, enqueue_date: datetime=None, error_count: int=None, finished: bool=None, id: str=None, last_error_message: str=None, last_update_time: datetime=None, link_to_download: str=None, output_type: str=None, percentage_processed: int=None, records_processed: int=None, records_sum: int=None, start_date: datetime=None, status_message: str=None, zipped: bool=None):
        """ReportResponse - a model defined in OpenAPI

        :param canceled: The canceled of this ReportResponse.
        :param completed_date: The completed_date of this ReportResponse.
        :param email: The email of this ReportResponse.
        :param enqueue_date: The enqueue_date of this ReportResponse.
        :param error_count: The error_count of this ReportResponse.
        :param finished: The finished of this ReportResponse.
        :param id: The id of this ReportResponse.
        :param last_error_message: The last_error_message of this ReportResponse.
        :param last_update_time: The last_update_time of this ReportResponse.
        :param link_to_download: The link_to_download of this ReportResponse.
        :param output_type: The output_type of this ReportResponse.
        :param percentage_processed: The percentage_processed of this ReportResponse.
        :param records_processed: The records_processed of this ReportResponse.
        :param records_sum: The records_sum of this ReportResponse.
        :param start_date: The start_date of this ReportResponse.
        :param status_message: The status_message of this ReportResponse.
        :param zipped: The zipped of this ReportResponse.
        """
        self.openapi_types = {
            'canceled': bool,
            'completed_date': datetime,
            'email': str,
            'enqueue_date': datetime,
            'error_count': int,
            'finished': bool,
            'id': str,
            'last_error_message': str,
            'last_update_time': datetime,
            'link_to_download': str,
            'output_type': str,
            'percentage_processed': int,
            'records_processed': int,
            'records_sum': int,
            'start_date': datetime,
            'status_message': str,
            'zipped': bool
        }

        self.attribute_map = {
            'canceled': 'canceled',
            'completed_date': 'completedDate',
            'email': 'email',
            'enqueue_date': 'enqueueDate',
            'error_count': 'errorCount',
            'finished': 'finished',
            'id': 'id',
            'last_error_message': 'lastErrorMessage',
            'last_update_time': 'lastUpdateTime',
            'link_to_download': 'linkToDownload',
            'output_type': 'outputType',
            'percentage_processed': 'percentageProcessed',
            'records_processed': 'recordsProcessed',
            'records_sum': 'recordsSum',
            'start_date': 'startDate',
            'status_message': 'statusMessage',
            'zipped': 'zipped'
        }

        self._canceled = canceled
        self._completed_date = completed_date
        self._email = email
        self._enqueue_date = enqueue_date
        self._error_count = error_count
        self._finished = finished
        self._id = id
        self._last_error_message = last_error_message
        self._last_update_time = last_update_time
        self._link_to_download = link_to_download
        self._output_type = output_type
        self._percentage_processed = percentage_processed
        self._records_processed = records_processed
        self._records_sum = records_sum
        self._start_date = start_date
        self._status_message = status_message
        self._zipped = zipped

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportResponse of this ReportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canceled(self):
        """Gets the canceled of this ReportResponse.


        :return: The canceled of this ReportResponse.
        :rtype: bool
        """
        return self._canceled

    @canceled.setter
    def canceled(self, canceled):
        """Sets the canceled of this ReportResponse.


        :param canceled: The canceled of this ReportResponse.
        :type canceled: bool
        """

        self._canceled = canceled

    @property
    def completed_date(self):
        """Gets the completed_date of this ReportResponse.


        :return: The completed_date of this ReportResponse.
        :rtype: datetime
        """
        return self._completed_date

    @completed_date.setter
    def completed_date(self, completed_date):
        """Sets the completed_date of this ReportResponse.


        :param completed_date: The completed_date of this ReportResponse.
        :type completed_date: datetime
        """

        self._completed_date = completed_date

    @property
    def email(self):
        """Gets the email of this ReportResponse.


        :return: The email of this ReportResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ReportResponse.


        :param email: The email of this ReportResponse.
        :type email: str
        """

        self._email = email

    @property
    def enqueue_date(self):
        """Gets the enqueue_date of this ReportResponse.


        :return: The enqueue_date of this ReportResponse.
        :rtype: datetime
        """
        return self._enqueue_date

    @enqueue_date.setter
    def enqueue_date(self, enqueue_date):
        """Sets the enqueue_date of this ReportResponse.


        :param enqueue_date: The enqueue_date of this ReportResponse.
        :type enqueue_date: datetime
        """

        self._enqueue_date = enqueue_date

    @property
    def error_count(self):
        """Gets the error_count of this ReportResponse.


        :return: The error_count of this ReportResponse.
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this ReportResponse.


        :param error_count: The error_count of this ReportResponse.
        :type error_count: int
        """

        self._error_count = error_count

    @property
    def finished(self):
        """Gets the finished of this ReportResponse.


        :return: The finished of this ReportResponse.
        :rtype: bool
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this ReportResponse.


        :param finished: The finished of this ReportResponse.
        :type finished: bool
        """

        self._finished = finished

    @property
    def id(self):
        """Gets the id of this ReportResponse.


        :return: The id of this ReportResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportResponse.


        :param id: The id of this ReportResponse.
        :type id: str
        """

        self._id = id

    @property
    def last_error_message(self):
        """Gets the last_error_message of this ReportResponse.


        :return: The last_error_message of this ReportResponse.
        :rtype: str
        """
        return self._last_error_message

    @last_error_message.setter
    def last_error_message(self, last_error_message):
        """Sets the last_error_message of this ReportResponse.


        :param last_error_message: The last_error_message of this ReportResponse.
        :type last_error_message: str
        """

        self._last_error_message = last_error_message

    @property
    def last_update_time(self):
        """Gets the last_update_time of this ReportResponse.


        :return: The last_update_time of this ReportResponse.
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this ReportResponse.


        :param last_update_time: The last_update_time of this ReportResponse.
        :type last_update_time: datetime
        """

        self._last_update_time = last_update_time

    @property
    def link_to_download(self):
        """Gets the link_to_download of this ReportResponse.


        :return: The link_to_download of this ReportResponse.
        :rtype: str
        """
        return self._link_to_download

    @link_to_download.setter
    def link_to_download(self, link_to_download):
        """Sets the link_to_download of this ReportResponse.


        :param link_to_download: The link_to_download of this ReportResponse.
        :type link_to_download: str
        """

        self._link_to_download = link_to_download

    @property
    def output_type(self):
        """Gets the output_type of this ReportResponse.


        :return: The output_type of this ReportResponse.
        :rtype: str
        """
        return self._output_type

    @output_type.setter
    def output_type(self, output_type):
        """Sets the output_type of this ReportResponse.


        :param output_type: The output_type of this ReportResponse.
        :type output_type: str
        """

        self._output_type = output_type

    @property
    def percentage_processed(self):
        """Gets the percentage_processed of this ReportResponse.


        :return: The percentage_processed of this ReportResponse.
        :rtype: int
        """
        return self._percentage_processed

    @percentage_processed.setter
    def percentage_processed(self, percentage_processed):
        """Sets the percentage_processed of this ReportResponse.


        :param percentage_processed: The percentage_processed of this ReportResponse.
        :type percentage_processed: int
        """

        self._percentage_processed = percentage_processed

    @property
    def records_processed(self):
        """Gets the records_processed of this ReportResponse.


        :return: The records_processed of this ReportResponse.
        :rtype: int
        """
        return self._records_processed

    @records_processed.setter
    def records_processed(self, records_processed):
        """Sets the records_processed of this ReportResponse.


        :param records_processed: The records_processed of this ReportResponse.
        :type records_processed: int
        """

        self._records_processed = records_processed

    @property
    def records_sum(self):
        """Gets the records_sum of this ReportResponse.


        :return: The records_sum of this ReportResponse.
        :rtype: int
        """
        return self._records_sum

    @records_sum.setter
    def records_sum(self, records_sum):
        """Sets the records_sum of this ReportResponse.


        :param records_sum: The records_sum of this ReportResponse.
        :type records_sum: int
        """

        self._records_sum = records_sum

    @property
    def start_date(self):
        """Gets the start_date of this ReportResponse.


        :return: The start_date of this ReportResponse.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ReportResponse.


        :param start_date: The start_date of this ReportResponse.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def status_message(self):
        """Gets the status_message of this ReportResponse.


        :return: The status_message of this ReportResponse.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ReportResponse.


        :param status_message: The status_message of this ReportResponse.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def zipped(self):
        """Gets the zipped of this ReportResponse.


        :return: The zipped of this ReportResponse.
        :rtype: bool
        """
        return self._zipped

    @zipped.setter
    def zipped(self, zipped):
        """Sets the zipped of this ReportResponse.


        :param zipped: The zipped of this ReportResponse.
        :type zipped: bool
        """

        self._zipped = zipped
