# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionItemResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, is_skipped: bool=None, manual_price: int=None, original_order_id: str=None, quantity: int=None, sku_id: str=None, status: str=None):
        """SubscriptionItemResponse - a model defined in OpenAPI

        :param id: The id of this SubscriptionItemResponse.
        :param is_skipped: The is_skipped of this SubscriptionItemResponse.
        :param manual_price: The manual_price of this SubscriptionItemResponse.
        :param original_order_id: The original_order_id of this SubscriptionItemResponse.
        :param quantity: The quantity of this SubscriptionItemResponse.
        :param sku_id: The sku_id of this SubscriptionItemResponse.
        :param status: The status of this SubscriptionItemResponse.
        """
        self.openapi_types = {
            'id': str,
            'is_skipped': bool,
            'manual_price': int,
            'original_order_id': str,
            'quantity': int,
            'sku_id': str,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'is_skipped': 'isSkipped',
            'manual_price': 'manualPrice',
            'original_order_id': 'originalOrderId',
            'quantity': 'quantity',
            'sku_id': 'skuId',
            'status': 'status'
        }

        self._id = id
        self._is_skipped = is_skipped
        self._manual_price = manual_price
        self._original_order_id = original_order_id
        self._quantity = quantity
        self._sku_id = sku_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionItemResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionItemResponse of this SubscriptionItemResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SubscriptionItemResponse.


        :return: The id of this SubscriptionItemResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionItemResponse.


        :param id: The id of this SubscriptionItemResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_skipped(self):
        """Gets the is_skipped of this SubscriptionItemResponse.


        :return: The is_skipped of this SubscriptionItemResponse.
        :rtype: bool
        """
        return self._is_skipped

    @is_skipped.setter
    def is_skipped(self, is_skipped):
        """Sets the is_skipped of this SubscriptionItemResponse.


        :param is_skipped: The is_skipped of this SubscriptionItemResponse.
        :type is_skipped: bool
        """
        if is_skipped is None:
            raise ValueError("Invalid value for `is_skipped`, must not be `None`")

        self._is_skipped = is_skipped

    @property
    def manual_price(self):
        """Gets the manual_price of this SubscriptionItemResponse.

        Manual price.

        :return: The manual_price of this SubscriptionItemResponse.
        :rtype: int
        """
        return self._manual_price

    @manual_price.setter
    def manual_price(self, manual_price):
        """Sets the manual_price of this SubscriptionItemResponse.

        Manual price.

        :param manual_price: The manual_price of this SubscriptionItemResponse.
        :type manual_price: int
        """

        self._manual_price = manual_price

    @property
    def original_order_id(self):
        """Gets the original_order_id of this SubscriptionItemResponse.


        :return: The original_order_id of this SubscriptionItemResponse.
        :rtype: str
        """
        return self._original_order_id

    @original_order_id.setter
    def original_order_id(self, original_order_id):
        """Sets the original_order_id of this SubscriptionItemResponse.


        :param original_order_id: The original_order_id of this SubscriptionItemResponse.
        :type original_order_id: str
        """

        self._original_order_id = original_order_id

    @property
    def quantity(self):
        """Gets the quantity of this SubscriptionItemResponse.

        Amount of units in the cart.

        :return: The quantity of this SubscriptionItemResponse.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SubscriptionItemResponse.

        Amount of units in the cart.

        :param quantity: The quantity of this SubscriptionItemResponse.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def sku_id(self):
        """Gets the sku_id of this SubscriptionItemResponse.

        SKU ID.

        :return: The sku_id of this SubscriptionItemResponse.
        :rtype: str
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this SubscriptionItemResponse.

        SKU ID.

        :param sku_id: The sku_id of this SubscriptionItemResponse.
        :type sku_id: str
        """
        if sku_id is None:
            raise ValueError("Invalid value for `sku_id`, must not be `None`")

        self._sku_id = sku_id

    @property
    def status(self):
        """Gets the status of this SubscriptionItemResponse.


        :return: The status of this SubscriptionItemResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionItemResponse.


        :param status: The status of this SubscriptionItemResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
