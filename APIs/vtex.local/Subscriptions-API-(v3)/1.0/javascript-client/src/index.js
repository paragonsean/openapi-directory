/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner from './model/ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner';
import ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInnerFrom from './model/ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInnerFrom';
import ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInnerToInner from './model/ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInnerToInner';
import Frequency from './model/Frequency';
import FrequencyRequest from './model/FrequencyRequest';
import FrequencyResponse from './model/FrequencyResponse';
import ItemAttachment from './model/ItemAttachment';
import ItemSimulationStatus from './model/ItemSimulationStatus';
import LogisticsInfo from './model/LogisticsInfo';
import LogisticsInfoDeliveryWindow from './model/LogisticsInfoDeliveryWindow';
import LogisticsInfoSLA from './model/LogisticsInfoSLA';
import OrderItem from './model/OrderItem';
import Payment from './model/Payment';
import PaymentData from './model/PaymentData';
import PaymentField from './model/PaymentField';
import PaymentMethodResponse from './model/PaymentMethodResponse';
import PaymentMethodThinRequest from './model/PaymentMethodThinRequest';
import Periodicity from './model/Periodicity';
import PlanResponse from './model/PlanResponse';
import PlanThinRequest from './model/PlanThinRequest';
import PriceTag from './model/PriceTag';
import PurchaseContextAvailableGiftResponse from './model/PurchaseContextAvailableGiftResponse';
import PurchaseContextSelectableGiftsResponse from './model/PurchaseContextSelectableGiftsResponse';
import PurchaseDay from './model/PurchaseDay';
import PurchaseSettingsResponse from './model/PurchaseSettingsResponse';
import PurchaseSettingsThinRequest from './model/PurchaseSettingsThinRequest';
import ReportResponse from './model/ReportResponse';
import Settings from './model/Settings';
import ShippingAddress from './model/ShippingAddress';
import ShippingAddressResponse from './model/ShippingAddressResponse';
import ShippingEstimate from './model/ShippingEstimate';
import SimulateMessageResponse from './model/SimulateMessageResponse';
import SimulateResponse from './model/SimulateResponse';
import SimulateResponseVO from './model/SimulateResponseVO';
import SimulationItemResult from './model/SimulationItemResult';
import Status from './model/Status';
import StorePlan from './model/StorePlan';
import SubscriptionCycleContext from './model/SubscriptionCycleContext';
import SubscriptionCycleItemContext from './model/SubscriptionCycleItemContext';
import SubscriptionCycleOrderInfo from './model/SubscriptionCycleOrderInfo';
import SubscriptionCycleResponse from './model/SubscriptionCycleResponse';
import SubscriptionGroupRequest from './model/SubscriptionGroupRequest';
import SubscriptionGroupResponse from './model/SubscriptionGroupResponse';
import SubscriptionItemResponse from './model/SubscriptionItemResponse';
import SubscriptionReport from './model/SubscriptionReport';
import SubscriptionReportParam from './model/SubscriptionReportParam';
import SubscriptionThinItemRequest from './model/SubscriptionThinItemRequest';
import SubscriptionUpdateRequestV3 from './model/SubscriptionUpdateRequestV3';
import Totalization from './model/Totalization';
import TotalizationResponse from './model/TotalizationResponse';
import Transaction from './model/Transaction';
import UpdateItemInput from './model/UpdateItemInput';
import ValidityRequest from './model/ValidityRequest';
import ValidityResponse from './model/ValidityResponse';
import CyclesApi from './api/CyclesApi';
import PlansApi from './api/PlansApi';
import ReportsApi from './api/ReportsApi';
import SettingsApi from './api/SettingsApi';
import SubscriptionsApi from './api/SubscriptionsApi';


/**
*   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers&#39; subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453)..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SubscriptionsApiV3 = require('index'); // See note below*.
* var xxxSvc = new SubscriptionsApiV3.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SubscriptionsApiV3.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SubscriptionsApiV3.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SubscriptionsApiV3.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner model constructor.
     * @property {module:model/ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner}
     */
    ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner,

    /**
     * The ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInnerFrom model constructor.
     * @property {module:model/ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInnerFrom}
     */
    ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInnerFrom,

    /**
     * The ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInnerToInner model constructor.
     * @property {module:model/ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInnerToInner}
     */
    ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInnerToInner,

    /**
     * The Frequency model constructor.
     * @property {module:model/Frequency}
     */
    Frequency,

    /**
     * The FrequencyRequest model constructor.
     * @property {module:model/FrequencyRequest}
     */
    FrequencyRequest,

    /**
     * The FrequencyResponse model constructor.
     * @property {module:model/FrequencyResponse}
     */
    FrequencyResponse,

    /**
     * The ItemAttachment model constructor.
     * @property {module:model/ItemAttachment}
     */
    ItemAttachment,

    /**
     * The ItemSimulationStatus model constructor.
     * @property {module:model/ItemSimulationStatus}
     */
    ItemSimulationStatus,

    /**
     * The LogisticsInfo model constructor.
     * @property {module:model/LogisticsInfo}
     */
    LogisticsInfo,

    /**
     * The LogisticsInfoDeliveryWindow model constructor.
     * @property {module:model/LogisticsInfoDeliveryWindow}
     */
    LogisticsInfoDeliveryWindow,

    /**
     * The LogisticsInfoSLA model constructor.
     * @property {module:model/LogisticsInfoSLA}
     */
    LogisticsInfoSLA,

    /**
     * The OrderItem model constructor.
     * @property {module:model/OrderItem}
     */
    OrderItem,

    /**
     * The Payment model constructor.
     * @property {module:model/Payment}
     */
    Payment,

    /**
     * The PaymentData model constructor.
     * @property {module:model/PaymentData}
     */
    PaymentData,

    /**
     * The PaymentField model constructor.
     * @property {module:model/PaymentField}
     */
    PaymentField,

    /**
     * The PaymentMethodResponse model constructor.
     * @property {module:model/PaymentMethodResponse}
     */
    PaymentMethodResponse,

    /**
     * The PaymentMethodThinRequest model constructor.
     * @property {module:model/PaymentMethodThinRequest}
     */
    PaymentMethodThinRequest,

    /**
     * The Periodicity model constructor.
     * @property {module:model/Periodicity}
     */
    Periodicity,

    /**
     * The PlanResponse model constructor.
     * @property {module:model/PlanResponse}
     */
    PlanResponse,

    /**
     * The PlanThinRequest model constructor.
     * @property {module:model/PlanThinRequest}
     */
    PlanThinRequest,

    /**
     * The PriceTag model constructor.
     * @property {module:model/PriceTag}
     */
    PriceTag,

    /**
     * The PurchaseContextAvailableGiftResponse model constructor.
     * @property {module:model/PurchaseContextAvailableGiftResponse}
     */
    PurchaseContextAvailableGiftResponse,

    /**
     * The PurchaseContextSelectableGiftsResponse model constructor.
     * @property {module:model/PurchaseContextSelectableGiftsResponse}
     */
    PurchaseContextSelectableGiftsResponse,

    /**
     * The PurchaseDay model constructor.
     * @property {module:model/PurchaseDay}
     */
    PurchaseDay,

    /**
     * The PurchaseSettingsResponse model constructor.
     * @property {module:model/PurchaseSettingsResponse}
     */
    PurchaseSettingsResponse,

    /**
     * The PurchaseSettingsThinRequest model constructor.
     * @property {module:model/PurchaseSettingsThinRequest}
     */
    PurchaseSettingsThinRequest,

    /**
     * The ReportResponse model constructor.
     * @property {module:model/ReportResponse}
     */
    ReportResponse,

    /**
     * The Settings model constructor.
     * @property {module:model/Settings}
     */
    Settings,

    /**
     * The ShippingAddress model constructor.
     * @property {module:model/ShippingAddress}
     */
    ShippingAddress,

    /**
     * The ShippingAddressResponse model constructor.
     * @property {module:model/ShippingAddressResponse}
     */
    ShippingAddressResponse,

    /**
     * The ShippingEstimate model constructor.
     * @property {module:model/ShippingEstimate}
     */
    ShippingEstimate,

    /**
     * The SimulateMessageResponse model constructor.
     * @property {module:model/SimulateMessageResponse}
     */
    SimulateMessageResponse,

    /**
     * The SimulateResponse model constructor.
     * @property {module:model/SimulateResponse}
     */
    SimulateResponse,

    /**
     * The SimulateResponseVO model constructor.
     * @property {module:model/SimulateResponseVO}
     */
    SimulateResponseVO,

    /**
     * The SimulationItemResult model constructor.
     * @property {module:model/SimulationItemResult}
     */
    SimulationItemResult,

    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status,

    /**
     * The StorePlan model constructor.
     * @property {module:model/StorePlan}
     */
    StorePlan,

    /**
     * The SubscriptionCycleContext model constructor.
     * @property {module:model/SubscriptionCycleContext}
     */
    SubscriptionCycleContext,

    /**
     * The SubscriptionCycleItemContext model constructor.
     * @property {module:model/SubscriptionCycleItemContext}
     */
    SubscriptionCycleItemContext,

    /**
     * The SubscriptionCycleOrderInfo model constructor.
     * @property {module:model/SubscriptionCycleOrderInfo}
     */
    SubscriptionCycleOrderInfo,

    /**
     * The SubscriptionCycleResponse model constructor.
     * @property {module:model/SubscriptionCycleResponse}
     */
    SubscriptionCycleResponse,

    /**
     * The SubscriptionGroupRequest model constructor.
     * @property {module:model/SubscriptionGroupRequest}
     */
    SubscriptionGroupRequest,

    /**
     * The SubscriptionGroupResponse model constructor.
     * @property {module:model/SubscriptionGroupResponse}
     */
    SubscriptionGroupResponse,

    /**
     * The SubscriptionItemResponse model constructor.
     * @property {module:model/SubscriptionItemResponse}
     */
    SubscriptionItemResponse,

    /**
     * The SubscriptionReport model constructor.
     * @property {module:model/SubscriptionReport}
     */
    SubscriptionReport,

    /**
     * The SubscriptionReportParam model constructor.
     * @property {module:model/SubscriptionReportParam}
     */
    SubscriptionReportParam,

    /**
     * The SubscriptionThinItemRequest model constructor.
     * @property {module:model/SubscriptionThinItemRequest}
     */
    SubscriptionThinItemRequest,

    /**
     * The SubscriptionUpdateRequestV3 model constructor.
     * @property {module:model/SubscriptionUpdateRequestV3}
     */
    SubscriptionUpdateRequestV3,

    /**
     * The Totalization model constructor.
     * @property {module:model/Totalization}
     */
    Totalization,

    /**
     * The TotalizationResponse model constructor.
     * @property {module:model/TotalizationResponse}
     */
    TotalizationResponse,

    /**
     * The Transaction model constructor.
     * @property {module:model/Transaction}
     */
    Transaction,

    /**
     * The UpdateItemInput model constructor.
     * @property {module:model/UpdateItemInput}
     */
    UpdateItemInput,

    /**
     * The ValidityRequest model constructor.
     * @property {module:model/ValidityRequest}
     */
    ValidityRequest,

    /**
     * The ValidityResponse model constructor.
     * @property {module:model/ValidityResponse}
     */
    ValidityResponse,

    /**
    * The CyclesApi service constructor.
    * @property {module:api/CyclesApi}
    */
    CyclesApi,

    /**
    * The PlansApi service constructor.
    * @property {module:api/PlansApi}
    */
    PlansApi,

    /**
    * The ReportsApi service constructor.
    * @property {module:api/ReportsApi}
    */
    ReportsApi,

    /**
    * The SettingsApi service constructor.
    * @property {module:api/SettingsApi}
    */
    SettingsApi,

    /**
    * The SubscriptionsApi service constructor.
    * @property {module:api/SubscriptionsApi}
    */
    SubscriptionsApi
};
