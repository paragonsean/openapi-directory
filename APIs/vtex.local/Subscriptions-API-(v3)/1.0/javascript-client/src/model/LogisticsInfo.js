/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogisticsInfoDeliveryWindow from './LogisticsInfoDeliveryWindow';
import LogisticsInfoSLA from './LogisticsInfoSLA';

/**
 * The LogisticsInfo model module.
 * @module model/LogisticsInfo
 * @version 1.0
 */
class LogisticsInfo {
    /**
     * Constructs a new <code>LogisticsInfo</code>.
     * @alias module:model/LogisticsInfo
     */
    constructor() { 
        
        LogisticsInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogisticsInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogisticsInfo} obj Optional instance to populate.
     * @return {module:model/LogisticsInfo} The populated <code>LogisticsInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogisticsInfo();

            if (data.hasOwnProperty('addressId')) {
                obj['addressId'] = ApiClient.convertToType(data['addressId'], 'String');
            }
            if (data.hasOwnProperty('deliveryWindow')) {
                obj['deliveryWindow'] = LogisticsInfoDeliveryWindow.constructFromObject(data['deliveryWindow']);
            }
            if (data.hasOwnProperty('itemIndex')) {
                obj['itemIndex'] = ApiClient.convertToType(data['itemIndex'], 'Number');
            }
            if (data.hasOwnProperty('lockTtl')) {
                obj['lockTtl'] = ApiClient.convertToType(data['lockTtl'], 'String');
            }
            if (data.hasOwnProperty('pickupId')) {
                obj['pickupId'] = ApiClient.convertToType(data['pickupId'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('selectedDeliveryChannel')) {
                obj['selectedDeliveryChannel'] = ApiClient.convertToType(data['selectedDeliveryChannel'], 'String');
            }
            if (data.hasOwnProperty('selectedSla')) {
                obj['selectedSla'] = ApiClient.convertToType(data['selectedSla'], 'String');
            }
            if (data.hasOwnProperty('shippingEstimate')) {
                obj['shippingEstimate'] = ApiClient.convertToType(data['shippingEstimate'], 'String');
            }
            if (data.hasOwnProperty('slAs')) {
                obj['slAs'] = ApiClient.convertToType(data['slAs'], [LogisticsInfoSLA]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogisticsInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogisticsInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['addressId'] && !(typeof data['addressId'] === 'string' || data['addressId'] instanceof String)) {
            throw new Error("Expected the field `addressId` to be a primitive type in the JSON string but got " + data['addressId']);
        }
        // validate the optional field `deliveryWindow`
        if (data['deliveryWindow']) { // data not null
          LogisticsInfoDeliveryWindow.validateJSON(data['deliveryWindow']);
        }
        // ensure the json data is a string
        if (data['lockTtl'] && !(typeof data['lockTtl'] === 'string' || data['lockTtl'] instanceof String)) {
            throw new Error("Expected the field `lockTtl` to be a primitive type in the JSON string but got " + data['lockTtl']);
        }
        // ensure the json data is a string
        if (data['pickupId'] && !(typeof data['pickupId'] === 'string' || data['pickupId'] instanceof String)) {
            throw new Error("Expected the field `pickupId` to be a primitive type in the JSON string but got " + data['pickupId']);
        }
        // ensure the json data is a string
        if (data['selectedDeliveryChannel'] && !(typeof data['selectedDeliveryChannel'] === 'string' || data['selectedDeliveryChannel'] instanceof String)) {
            throw new Error("Expected the field `selectedDeliveryChannel` to be a primitive type in the JSON string but got " + data['selectedDeliveryChannel']);
        }
        // ensure the json data is a string
        if (data['selectedSla'] && !(typeof data['selectedSla'] === 'string' || data['selectedSla'] instanceof String)) {
            throw new Error("Expected the field `selectedSla` to be a primitive type in the JSON string but got " + data['selectedSla']);
        }
        // ensure the json data is a string
        if (data['shippingEstimate'] && !(typeof data['shippingEstimate'] === 'string' || data['shippingEstimate'] instanceof String)) {
            throw new Error("Expected the field `shippingEstimate` to be a primitive type in the JSON string but got " + data['shippingEstimate']);
        }
        if (data['slAs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['slAs'])) {
                throw new Error("Expected the field `slAs` to be an array in the JSON data but got " + data['slAs']);
            }
            // validate the optional field `slAs` (array)
            for (const item of data['slAs']) {
                LogisticsInfoSLA.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} addressId
 */
LogisticsInfo.prototype['addressId'] = undefined;

/**
 * @member {module:model/LogisticsInfoDeliveryWindow} deliveryWindow
 */
LogisticsInfo.prototype['deliveryWindow'] = undefined;

/**
 * @member {Number} itemIndex
 */
LogisticsInfo.prototype['itemIndex'] = undefined;

/**
 * @member {String} lockTtl
 */
LogisticsInfo.prototype['lockTtl'] = undefined;

/**
 * @member {String} pickupId
 */
LogisticsInfo.prototype['pickupId'] = undefined;

/**
 * @member {Number} price
 */
LogisticsInfo.prototype['price'] = undefined;

/**
 * Amount of units in the cart.
 * @member {Number} quantity
 */
LogisticsInfo.prototype['quantity'] = undefined;

/**
 * @member {String} selectedDeliveryChannel
 */
LogisticsInfo.prototype['selectedDeliveryChannel'] = undefined;

/**
 * @member {String} selectedSla
 */
LogisticsInfo.prototype['selectedSla'] = undefined;

/**
 * @member {String} shippingEstimate
 */
LogisticsInfo.prototype['shippingEstimate'] = undefined;

/**
 * @member {Array.<module:model/LogisticsInfoSLA>} slAs
 */
LogisticsInfo.prototype['slAs'] = undefined;






export default LogisticsInfo;

