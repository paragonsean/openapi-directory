/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SimulationItemResult from './SimulationItemResult';
import SubscriptionCycleContext from './SubscriptionCycleContext';
import SubscriptionCycleOrderInfo from './SubscriptionCycleOrderInfo';

/**
 * The SubscriptionCycleResponse model module.
 * @module model/SubscriptionCycleResponse
 * @version 1.0
 */
class SubscriptionCycleResponse {
    /**
     * Constructs a new <code>SubscriptionCycleResponse</code>.
     * @alias module:model/SubscriptionCycleResponse
     */
    constructor() { 
        
        SubscriptionCycleResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubscriptionCycleResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionCycleResponse} obj Optional instance to populate.
     * @return {module:model/SubscriptionCycleResponse} The populated <code>SubscriptionCycleResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionCycleResponse();

            if (data.hasOwnProperty('context')) {
                obj['context'] = SubscriptionCycleContext.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('customerEmail')) {
                obj['customerEmail'] = ApiClient.convertToType(data['customerEmail'], 'String');
            }
            if (data.hasOwnProperty('cycleCount')) {
                obj['cycleCount'] = ApiClient.convertToType(data['cycleCount'], 'Number');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isInRetry')) {
                obj['isInRetry'] = ApiClient.convertToType(data['isInRetry'], 'Boolean');
            }
            if (data.hasOwnProperty('lastUpdate')) {
                obj['lastUpdate'] = ApiClient.convertToType(data['lastUpdate'], 'Date');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('orderInfo')) {
                obj['orderInfo'] = SubscriptionCycleOrderInfo.constructFromObject(data['orderInfo']);
            }
            if (data.hasOwnProperty('simulationItems')) {
                obj['simulationItems'] = ApiClient.convertToType(data['simulationItems'], [SimulationItemResult]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionCycleResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionCycleResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `context`
        if (data['context']) { // data not null
          SubscriptionCycleContext.validateJSON(data['context']);
        }
        // ensure the json data is a string
        if (data['customerEmail'] && !(typeof data['customerEmail'] === 'string' || data['customerEmail'] instanceof String)) {
            throw new Error("Expected the field `customerEmail` to be a primitive type in the JSON string but got " + data['customerEmail']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // validate the optional field `orderInfo`
        if (data['orderInfo']) { // data not null
          SubscriptionCycleOrderInfo.validateJSON(data['orderInfo']);
        }
        if (data['simulationItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['simulationItems'])) {
                throw new Error("Expected the field `simulationItems` to be an array in the JSON data but got " + data['simulationItems']);
            }
            // validate the optional field `simulationItems` (array)
            for (const item of data['simulationItems']) {
                SimulationItemResult.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }

        return true;
    }


}



/**
 * @member {module:model/SubscriptionCycleContext} context
 */
SubscriptionCycleResponse.prototype['context'] = undefined;

/**
 * @member {String} customerEmail
 */
SubscriptionCycleResponse.prototype['customerEmail'] = undefined;

/**
 * @member {Number} cycleCount
 */
SubscriptionCycleResponse.prototype['cycleCount'] = undefined;

/**
 * @member {Date} date
 */
SubscriptionCycleResponse.prototype['date'] = undefined;

/**
 * @member {String} id
 */
SubscriptionCycleResponse.prototype['id'] = undefined;

/**
 * @member {Boolean} isInRetry
 */
SubscriptionCycleResponse.prototype['isInRetry'] = undefined;

/**
 * @member {Date} lastUpdate
 */
SubscriptionCycleResponse.prototype['lastUpdate'] = undefined;

/**
 * @member {String} message
 */
SubscriptionCycleResponse.prototype['message'] = undefined;

/**
 * @member {module:model/SubscriptionCycleOrderInfo} orderInfo
 */
SubscriptionCycleResponse.prototype['orderInfo'] = undefined;

/**
 * @member {Array.<module:model/SimulationItemResult>} simulationItems
 */
SubscriptionCycleResponse.prototype['simulationItems'] = undefined;

/**
 * @member {String} status
 */
SubscriptionCycleResponse.prototype['status'] = undefined;

/**
 * @member {String} subscriptionId
 */
SubscriptionCycleResponse.prototype['subscriptionId'] = undefined;






export default SubscriptionCycleResponse;

