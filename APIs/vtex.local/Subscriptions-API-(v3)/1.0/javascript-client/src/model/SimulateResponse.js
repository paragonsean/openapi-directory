/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogisticsInfo from './LogisticsInfo';
import OrderItem from './OrderItem';
import PaymentData from './PaymentData';
import PurchaseContextSelectableGiftsResponse from './PurchaseContextSelectableGiftsResponse';
import SimulateMessageResponse from './SimulateMessageResponse';
import SimulationItemResult from './SimulationItemResult';
import TotalizationResponse from './TotalizationResponse';

/**
 * The SimulateResponse model module.
 * @module model/SimulateResponse
 * @version 1.0
 */
class SimulateResponse {
    /**
     * Constructs a new <code>SimulateResponse</code>.
     * @alias module:model/SimulateResponse
     */
    constructor() { 
        
        SimulateResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SimulateResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimulateResponse} obj Optional instance to populate.
     * @return {module:model/SimulateResponse} The populated <code>SimulateResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimulateResponse();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [OrderItem]);
            }
            if (data.hasOwnProperty('logisticsInfo')) {
                obj['logisticsInfo'] = ApiClient.convertToType(data['logisticsInfo'], [LogisticsInfo]);
            }
            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], [SimulateMessageResponse]);
            }
            if (data.hasOwnProperty('paymentData')) {
                obj['paymentData'] = PaymentData.constructFromObject(data['paymentData']);
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('selectableGiftsResponse')) {
                obj['selectableGiftsResponse'] = ApiClient.convertToType(data['selectableGiftsResponse'], [PurchaseContextSelectableGiftsResponse]);
            }
            if (data.hasOwnProperty('simulationItems')) {
                obj['simulationItems'] = ApiClient.convertToType(data['simulationItems'], [SimulationItemResult]);
            }
            if (data.hasOwnProperty('totals')) {
                obj['totals'] = ApiClient.convertToType(data['totals'], [TotalizationResponse]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimulateResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimulateResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                OrderItem.validateJSON(item);
            };
        }
        if (data['logisticsInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['logisticsInfo'])) {
                throw new Error("Expected the field `logisticsInfo` to be an array in the JSON data but got " + data['logisticsInfo']);
            }
            // validate the optional field `logisticsInfo` (array)
            for (const item of data['logisticsInfo']) {
                LogisticsInfo.validateJSON(item);
            };
        }
        if (data['messages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messages'])) {
                throw new Error("Expected the field `messages` to be an array in the JSON data but got " + data['messages']);
            }
            // validate the optional field `messages` (array)
            for (const item of data['messages']) {
                SimulateMessageResponse.validateJSON(item);
            };
        }
        // validate the optional field `paymentData`
        if (data['paymentData']) { // data not null
          PaymentData.validateJSON(data['paymentData']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        if (data['selectableGiftsResponse']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['selectableGiftsResponse'])) {
                throw new Error("Expected the field `selectableGiftsResponse` to be an array in the JSON data but got " + data['selectableGiftsResponse']);
            }
            // validate the optional field `selectableGiftsResponse` (array)
            for (const item of data['selectableGiftsResponse']) {
                PurchaseContextSelectableGiftsResponse.validateJSON(item);
            };
        }
        if (data['simulationItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['simulationItems'])) {
                throw new Error("Expected the field `simulationItems` to be an array in the JSON data but got " + data['simulationItems']);
            }
            // validate the optional field `simulationItems` (array)
            for (const item of data['simulationItems']) {
                SimulationItemResult.validateJSON(item);
            };
        }
        if (data['totals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['totals'])) {
                throw new Error("Expected the field `totals` to be an array in the JSON data but got " + data['totals']);
            }
            // validate the optional field `totals` (array)
            for (const item of data['totals']) {
                TotalizationResponse.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} country
 */
SimulateResponse.prototype['country'] = undefined;

/**
 * @member {Array.<module:model/OrderItem>} items
 */
SimulateResponse.prototype['items'] = undefined;

/**
 * @member {Array.<module:model/LogisticsInfo>} logisticsInfo
 */
SimulateResponse.prototype['logisticsInfo'] = undefined;

/**
 * @member {Array.<module:model/SimulateMessageResponse>} messages
 */
SimulateResponse.prototype['messages'] = undefined;

/**
 * @member {module:model/PaymentData} paymentData
 */
SimulateResponse.prototype['paymentData'] = undefined;

/**
 * @member {String} postalCode
 */
SimulateResponse.prototype['postalCode'] = undefined;

/**
 * @member {Array.<module:model/PurchaseContextSelectableGiftsResponse>} selectableGiftsResponse
 */
SimulateResponse.prototype['selectableGiftsResponse'] = undefined;

/**
 * @member {Array.<module:model/SimulationItemResult>} simulationItems
 */
SimulateResponse.prototype['simulationItems'] = undefined;

/**
 * @member {Array.<module:model/TotalizationResponse>} totals
 */
SimulateResponse.prototype['totals'] = undefined;






export default SimulateResponse;

