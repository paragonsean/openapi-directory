/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FrequencyRequest model module.
 * @module model/FrequencyRequest
 * @version 1.0
 */
class FrequencyRequest {
    /**
     * Constructs a new <code>FrequencyRequest</code>.
     * Information about subscriptions&#39; recurrence.
     * @alias module:model/FrequencyRequest
     * @param interval {Number} Time interval configured between subscription orders, which depends on the periodicity. For a `DAILY` periodicity, the value will be days, for `MONTHLY` it will be months, and so on.
     * @param periodicity {String} Defines the subscriptions recurrence period. The possible values are:   - `DAILY`   - `WEEKLY`   - `MONTHLY`   - `YEARLY`
     */
    constructor(interval, periodicity) { 
        
        FrequencyRequest.initialize(this, interval, periodicity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, interval, periodicity) { 
        obj['interval'] = interval;
        obj['periodicity'] = periodicity;
    }

    /**
     * Constructs a <code>FrequencyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FrequencyRequest} obj Optional instance to populate.
     * @return {module:model/FrequencyRequest} The populated <code>FrequencyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FrequencyRequest();

            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'Number');
            }
            if (data.hasOwnProperty('periodicity')) {
                obj['periodicity'] = ApiClient.convertToType(data['periodicity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FrequencyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FrequencyRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FrequencyRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['periodicity'] && !(typeof data['periodicity'] === 'string' || data['periodicity'] instanceof String)) {
            throw new Error("Expected the field `periodicity` to be a primitive type in the JSON string but got " + data['periodicity']);
        }

        return true;
    }


}

FrequencyRequest.RequiredProperties = ["interval", "periodicity"];

/**
 * Time interval configured between subscription orders, which depends on the periodicity. For a `DAILY` periodicity, the value will be days, for `MONTHLY` it will be months, and so on.
 * @member {Number} interval
 */
FrequencyRequest.prototype['interval'] = undefined;

/**
 * Defines the subscriptions recurrence period. The possible values are:   - `DAILY`   - `WEEKLY`   - `MONTHLY`   - `YEARLY`
 * @member {String} periodicity
 */
FrequencyRequest.prototype['periodicity'] = undefined;






export default FrequencyRequest;

