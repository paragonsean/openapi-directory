/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogisticsInfoDeliveryWindow from './LogisticsInfoDeliveryWindow';

/**
 * The LogisticsInfoSLA model module.
 * @module model/LogisticsInfoSLA
 * @version 1.0
 */
class LogisticsInfoSLA {
    /**
     * Constructs a new <code>LogisticsInfoSLA</code>.
     * @alias module:model/LogisticsInfoSLA
     */
    constructor() { 
        
        LogisticsInfoSLA.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogisticsInfoSLA</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogisticsInfoSLA} obj Optional instance to populate.
     * @return {module:model/LogisticsInfoSLA} The populated <code>LogisticsInfoSLA</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogisticsInfoSLA();

            if (data.hasOwnProperty('availableDeliveryWindows')) {
                obj['availableDeliveryWindows'] = ApiClient.convertToType(data['availableDeliveryWindows'], [LogisticsInfoDeliveryWindow]);
            }
            if (data.hasOwnProperty('deliveryChannel')) {
                obj['deliveryChannel'] = ApiClient.convertToType(data['deliveryChannel'], 'String');
            }
            if (data.hasOwnProperty('deliveryWindows')) {
                obj['deliveryWindows'] = ApiClient.convertToType(data['deliveryWindows'], [LogisticsInfoDeliveryWindow]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lockTtl')) {
                obj['lockTtl'] = ApiClient.convertToType(data['lockTtl'], 'String');
            }
            if (data.hasOwnProperty('pickupPointId')) {
                obj['pickupPointId'] = ApiClient.convertToType(data['pickupPointId'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('shippingEstimate')) {
                obj['shippingEstimate'] = ApiClient.convertToType(data['shippingEstimate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogisticsInfoSLA</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogisticsInfoSLA</code>.
     */
    static validateJSON(data) {
        if (data['availableDeliveryWindows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availableDeliveryWindows'])) {
                throw new Error("Expected the field `availableDeliveryWindows` to be an array in the JSON data but got " + data['availableDeliveryWindows']);
            }
            // validate the optional field `availableDeliveryWindows` (array)
            for (const item of data['availableDeliveryWindows']) {
                LogisticsInfoDeliveryWindow.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['deliveryChannel'] && !(typeof data['deliveryChannel'] === 'string' || data['deliveryChannel'] instanceof String)) {
            throw new Error("Expected the field `deliveryChannel` to be a primitive type in the JSON string but got " + data['deliveryChannel']);
        }
        if (data['deliveryWindows']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deliveryWindows'])) {
                throw new Error("Expected the field `deliveryWindows` to be an array in the JSON data but got " + data['deliveryWindows']);
            }
            // validate the optional field `deliveryWindows` (array)
            for (const item of data['deliveryWindows']) {
                LogisticsInfoDeliveryWindow.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lockTtl'] && !(typeof data['lockTtl'] === 'string' || data['lockTtl'] instanceof String)) {
            throw new Error("Expected the field `lockTtl` to be a primitive type in the JSON string but got " + data['lockTtl']);
        }
        // ensure the json data is a string
        if (data['pickupPointId'] && !(typeof data['pickupPointId'] === 'string' || data['pickupPointId'] instanceof String)) {
            throw new Error("Expected the field `pickupPointId` to be a primitive type in the JSON string but got " + data['pickupPointId']);
        }
        // ensure the json data is a string
        if (data['shippingEstimate'] && !(typeof data['shippingEstimate'] === 'string' || data['shippingEstimate'] instanceof String)) {
            throw new Error("Expected the field `shippingEstimate` to be a primitive type in the JSON string but got " + data['shippingEstimate']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/LogisticsInfoDeliveryWindow>} availableDeliveryWindows
 */
LogisticsInfoSLA.prototype['availableDeliveryWindows'] = undefined;

/**
 * @member {String} deliveryChannel
 */
LogisticsInfoSLA.prototype['deliveryChannel'] = undefined;

/**
 * @member {Array.<module:model/LogisticsInfoDeliveryWindow>} deliveryWindows
 */
LogisticsInfoSLA.prototype['deliveryWindows'] = undefined;

/**
 * @member {String} id
 */
LogisticsInfoSLA.prototype['id'] = undefined;

/**
 * @member {String} lockTtl
 */
LogisticsInfoSLA.prototype['lockTtl'] = undefined;

/**
 * @member {String} pickupPointId
 */
LogisticsInfoSLA.prototype['pickupPointId'] = undefined;

/**
 * @member {Number} price
 */
LogisticsInfoSLA.prototype['price'] = undefined;

/**
 * @member {String} shippingEstimate
 */
LogisticsInfoSLA.prototype['shippingEstimate'] = undefined;






export default LogisticsInfoSLA;

