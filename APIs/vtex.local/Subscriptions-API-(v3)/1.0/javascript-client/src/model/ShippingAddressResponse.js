/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShippingAddressResponse model module.
 * @module model/ShippingAddressResponse
 * @version 1.0
 */
class ShippingAddressResponse {
    /**
     * Constructs a new <code>ShippingAddressResponse</code>.
     * @alias module:model/ShippingAddressResponse
     * @param addressId {String} 
     * @param addressType {String} 
     */
    constructor(addressId, addressType) { 
        
        ShippingAddressResponse.initialize(this, addressId, addressType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, addressId, addressType) { 
        obj['addressId'] = addressId;
        obj['addressType'] = addressType;
    }

    /**
     * Constructs a <code>ShippingAddressResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShippingAddressResponse} obj Optional instance to populate.
     * @return {module:model/ShippingAddressResponse} The populated <code>ShippingAddressResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShippingAddressResponse();

            if (data.hasOwnProperty('addressId')) {
                obj['addressId'] = ApiClient.convertToType(data['addressId'], 'String');
            }
            if (data.hasOwnProperty('addressType')) {
                obj['addressType'] = ApiClient.convertToType(data['addressType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShippingAddressResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShippingAddressResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ShippingAddressResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['addressId'] && !(typeof data['addressId'] === 'string' || data['addressId'] instanceof String)) {
            throw new Error("Expected the field `addressId` to be a primitive type in the JSON string but got " + data['addressId']);
        }
        // ensure the json data is a string
        if (data['addressType'] && !(typeof data['addressType'] === 'string' || data['addressType'] instanceof String)) {
            throw new Error("Expected the field `addressType` to be a primitive type in the JSON string but got " + data['addressType']);
        }

        return true;
    }


}

ShippingAddressResponse.RequiredProperties = ["addressId", "addressType"];

/**
 * @member {String} addressId
 */
ShippingAddressResponse.prototype['addressId'] = undefined;

/**
 * @member {String} addressType
 */
ShippingAddressResponse.prototype['addressType'] = undefined;






export default ShippingAddressResponse;

