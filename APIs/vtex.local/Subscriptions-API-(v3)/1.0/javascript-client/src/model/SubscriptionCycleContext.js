/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubscriptionCycleItemContext from './SubscriptionCycleItemContext';

/**
 * The SubscriptionCycleContext model module.
 * @module model/SubscriptionCycleContext
 * @version 1.0
 */
class SubscriptionCycleContext {
    /**
     * Constructs a new <code>SubscriptionCycleContext</code>.
     * @alias module:model/SubscriptionCycleContext
     */
    constructor() { 
        
        SubscriptionCycleContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubscriptionCycleContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionCycleContext} obj Optional instance to populate.
     * @return {module:model/SubscriptionCycleContext} The populated <code>SubscriptionCycleContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionCycleContext();

            if (data.hasOwnProperty('addressId')) {
                obj['addressId'] = ApiClient.convertToType(data['addressId'], 'String');
            }
            if (data.hasOwnProperty('addressType')) {
                obj['addressType'] = ApiClient.convertToType(data['addressType'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [SubscriptionCycleItemContext]);
            }
            if (data.hasOwnProperty('paymentAccountId')) {
                obj['paymentAccountId'] = ApiClient.convertToType(data['paymentAccountId'], 'String');
            }
            if (data.hasOwnProperty('paymentSystem')) {
                obj['paymentSystem'] = ApiClient.convertToType(data['paymentSystem'], 'String');
            }
            if (data.hasOwnProperty('paymentSystemGroup')) {
                obj['paymentSystemGroup'] = ApiClient.convertToType(data['paymentSystemGroup'], 'String');
            }
            if (data.hasOwnProperty('paymentSystemName')) {
                obj['paymentSystemName'] = ApiClient.convertToType(data['paymentSystemName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionCycleContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionCycleContext</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['addressId'] && !(typeof data['addressId'] === 'string' || data['addressId'] instanceof String)) {
            throw new Error("Expected the field `addressId` to be a primitive type in the JSON string but got " + data['addressId']);
        }
        // ensure the json data is a string
        if (data['addressType'] && !(typeof data['addressType'] === 'string' || data['addressType'] instanceof String)) {
            throw new Error("Expected the field `addressType` to be a primitive type in the JSON string but got " + data['addressType']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                SubscriptionCycleItemContext.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['paymentAccountId'] && !(typeof data['paymentAccountId'] === 'string' || data['paymentAccountId'] instanceof String)) {
            throw new Error("Expected the field `paymentAccountId` to be a primitive type in the JSON string but got " + data['paymentAccountId']);
        }
        // ensure the json data is a string
        if (data['paymentSystem'] && !(typeof data['paymentSystem'] === 'string' || data['paymentSystem'] instanceof String)) {
            throw new Error("Expected the field `paymentSystem` to be a primitive type in the JSON string but got " + data['paymentSystem']);
        }
        // ensure the json data is a string
        if (data['paymentSystemGroup'] && !(typeof data['paymentSystemGroup'] === 'string' || data['paymentSystemGroup'] instanceof String)) {
            throw new Error("Expected the field `paymentSystemGroup` to be a primitive type in the JSON string but got " + data['paymentSystemGroup']);
        }
        // ensure the json data is a string
        if (data['paymentSystemName'] && !(typeof data['paymentSystemName'] === 'string' || data['paymentSystemName'] instanceof String)) {
            throw new Error("Expected the field `paymentSystemName` to be a primitive type in the JSON string but got " + data['paymentSystemName']);
        }

        return true;
    }


}



/**
 * @member {String} addressId
 */
SubscriptionCycleContext.prototype['addressId'] = undefined;

/**
 * @member {String} addressType
 */
SubscriptionCycleContext.prototype['addressType'] = undefined;

/**
 * @member {Array.<module:model/SubscriptionCycleItemContext>} items
 */
SubscriptionCycleContext.prototype['items'] = undefined;

/**
 * @member {String} paymentAccountId
 */
SubscriptionCycleContext.prototype['paymentAccountId'] = undefined;

/**
 * @member {String} paymentSystem
 */
SubscriptionCycleContext.prototype['paymentSystem'] = undefined;

/**
 * @member {String} paymentSystemGroup
 */
SubscriptionCycleContext.prototype['paymentSystemGroup'] = undefined;

/**
 * @member {String} paymentSystemName
 */
SubscriptionCycleContext.prototype['paymentSystemName'] = undefined;






export default SubscriptionCycleContext;

