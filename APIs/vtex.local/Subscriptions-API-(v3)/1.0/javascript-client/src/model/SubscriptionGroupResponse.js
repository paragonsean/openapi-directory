/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlanResponse from './PlanResponse';
import PurchaseSettingsResponse from './PurchaseSettingsResponse';
import ShippingAddressResponse from './ShippingAddressResponse';
import SubscriptionItemResponse from './SubscriptionItemResponse';

/**
 * The SubscriptionGroupResponse model module.
 * @module model/SubscriptionGroupResponse
 * @version 1.0
 */
class SubscriptionGroupResponse {
    /**
     * Constructs a new <code>SubscriptionGroupResponse</code>.
     * @alias module:model/SubscriptionGroupResponse
     * @param createdAt {Date} 
     * @param customerEmail {String} 
     * @param customerId {String} 
     * @param cycleCount {Number} 
     * @param id {String} 
     * @param isSkipped {Boolean} 
     * @param items {Array.<module:model/SubscriptionItemResponse>} 
     * @param lastUpdate {Date} 
     * @param nextPurchaseDate {Date} 
     * @param plan {module:model/PlanResponse} 
     * @param purchaseSettings {module:model/PurchaseSettingsResponse} 
     * @param shippingAddress {module:model/ShippingAddressResponse} 
     * @param status {String} 
     */
    constructor(createdAt, customerEmail, customerId, cycleCount, id, isSkipped, items, lastUpdate, nextPurchaseDate, plan, purchaseSettings, shippingAddress, status) { 
        
        SubscriptionGroupResponse.initialize(this, createdAt, customerEmail, customerId, cycleCount, id, isSkipped, items, lastUpdate, nextPurchaseDate, plan, purchaseSettings, shippingAddress, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, customerEmail, customerId, cycleCount, id, isSkipped, items, lastUpdate, nextPurchaseDate, plan, purchaseSettings, shippingAddress, status) { 
        obj['createdAt'] = createdAt;
        obj['customerEmail'] = customerEmail;
        obj['customerId'] = customerId;
        obj['cycleCount'] = cycleCount;
        obj['id'] = id;
        obj['isSkipped'] = isSkipped;
        obj['items'] = items;
        obj['lastUpdate'] = lastUpdate;
        obj['nextPurchaseDate'] = nextPurchaseDate;
        obj['plan'] = plan;
        obj['purchaseSettings'] = purchaseSettings;
        obj['shippingAddress'] = shippingAddress;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>SubscriptionGroupResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionGroupResponse} obj Optional instance to populate.
     * @return {module:model/SubscriptionGroupResponse} The populated <code>SubscriptionGroupResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionGroupResponse();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('customerEmail')) {
                obj['customerEmail'] = ApiClient.convertToType(data['customerEmail'], 'String');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('cycleCount')) {
                obj['cycleCount'] = ApiClient.convertToType(data['cycleCount'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isSkipped')) {
                obj['isSkipped'] = ApiClient.convertToType(data['isSkipped'], 'Boolean');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [SubscriptionItemResponse]);
            }
            if (data.hasOwnProperty('lastPurchaseDate')) {
                obj['lastPurchaseDate'] = ApiClient.convertToType(data['lastPurchaseDate'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdate')) {
                obj['lastUpdate'] = ApiClient.convertToType(data['lastUpdate'], 'Date');
            }
            if (data.hasOwnProperty('nextPurchaseDate')) {
                obj['nextPurchaseDate'] = ApiClient.convertToType(data['nextPurchaseDate'], 'Date');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = PlanResponse.constructFromObject(data['plan']);
            }
            if (data.hasOwnProperty('purchaseSettings')) {
                obj['purchaseSettings'] = PurchaseSettingsResponse.constructFromObject(data['purchaseSettings']);
            }
            if (data.hasOwnProperty('shippingAddress')) {
                obj['shippingAddress'] = ShippingAddressResponse.constructFromObject(data['shippingAddress']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionGroupResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionGroupResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscriptionGroupResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['customerEmail'] && !(typeof data['customerEmail'] === 'string' || data['customerEmail'] instanceof String)) {
            throw new Error("Expected the field `customerEmail` to be a primitive type in the JSON string but got " + data['customerEmail']);
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                SubscriptionItemResponse.validateJSON(item);
            };
        }
        // validate the optional field `plan`
        if (data['plan']) { // data not null
          PlanResponse.validateJSON(data['plan']);
        }
        // validate the optional field `purchaseSettings`
        if (data['purchaseSettings']) { // data not null
          PurchaseSettingsResponse.validateJSON(data['purchaseSettings']);
        }
        // validate the optional field `shippingAddress`
        if (data['shippingAddress']) { // data not null
          ShippingAddressResponse.validateJSON(data['shippingAddress']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

SubscriptionGroupResponse.RequiredProperties = ["createdAt", "customerEmail", "customerId", "cycleCount", "id", "isSkipped", "items", "lastUpdate", "nextPurchaseDate", "plan", "purchaseSettings", "shippingAddress", "status"];

/**
 * @member {Date} createdAt
 */
SubscriptionGroupResponse.prototype['createdAt'] = undefined;

/**
 * @member {String} customerEmail
 */
SubscriptionGroupResponse.prototype['customerEmail'] = undefined;

/**
 * @member {String} customerId
 */
SubscriptionGroupResponse.prototype['customerId'] = undefined;

/**
 * @member {Number} cycleCount
 */
SubscriptionGroupResponse.prototype['cycleCount'] = undefined;

/**
 * @member {String} id
 */
SubscriptionGroupResponse.prototype['id'] = undefined;

/**
 * @member {Boolean} isSkipped
 */
SubscriptionGroupResponse.prototype['isSkipped'] = undefined;

/**
 * @member {Array.<module:model/SubscriptionItemResponse>} items
 */
SubscriptionGroupResponse.prototype['items'] = undefined;

/**
 * @member {Date} lastPurchaseDate
 */
SubscriptionGroupResponse.prototype['lastPurchaseDate'] = undefined;

/**
 * @member {Date} lastUpdate
 */
SubscriptionGroupResponse.prototype['lastUpdate'] = undefined;

/**
 * @member {Date} nextPurchaseDate
 */
SubscriptionGroupResponse.prototype['nextPurchaseDate'] = undefined;

/**
 * @member {module:model/PlanResponse} plan
 */
SubscriptionGroupResponse.prototype['plan'] = undefined;

/**
 * @member {module:model/PurchaseSettingsResponse} purchaseSettings
 */
SubscriptionGroupResponse.prototype['purchaseSettings'] = undefined;

/**
 * @member {module:model/ShippingAddressResponse} shippingAddress
 */
SubscriptionGroupResponse.prototype['shippingAddress'] = undefined;

/**
 * @member {String} status
 */
SubscriptionGroupResponse.prototype['status'] = undefined;

/**
 * @member {String} title
 */
SubscriptionGroupResponse.prototype['title'] = undefined;






export default SubscriptionGroupResponse;

