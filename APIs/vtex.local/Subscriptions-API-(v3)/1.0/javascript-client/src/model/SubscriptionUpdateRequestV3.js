/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlanThinRequest from './PlanThinRequest';
import PurchaseSettingsThinRequest from './PurchaseSettingsThinRequest';
import ShippingAddress from './ShippingAddress';

/**
 * The SubscriptionUpdateRequestV3 model module.
 * @module model/SubscriptionUpdateRequestV3
 * @version 1.0
 */
class SubscriptionUpdateRequestV3 {
    /**
     * Constructs a new <code>SubscriptionUpdateRequestV3</code>.
     * @alias module:model/SubscriptionUpdateRequestV3
     */
    constructor() { 
        
        SubscriptionUpdateRequestV3.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubscriptionUpdateRequestV3</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionUpdateRequestV3} obj Optional instance to populate.
     * @return {module:model/SubscriptionUpdateRequestV3} The populated <code>SubscriptionUpdateRequestV3</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionUpdateRequestV3();

            if (data.hasOwnProperty('isSkipped')) {
                obj['isSkipped'] = ApiClient.convertToType(data['isSkipped'], 'Boolean');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = PlanThinRequest.constructFromObject(data['plan']);
            }
            if (data.hasOwnProperty('purchaseSettings')) {
                obj['purchaseSettings'] = PurchaseSettingsThinRequest.constructFromObject(data['purchaseSettings']);
            }
            if (data.hasOwnProperty('shippingAddress')) {
                obj['shippingAddress'] = ShippingAddress.constructFromObject(data['shippingAddress']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionUpdateRequestV3</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionUpdateRequestV3</code>.
     */
    static validateJSON(data) {
        // validate the optional field `plan`
        if (data['plan']) { // data not null
          PlanThinRequest.validateJSON(data['plan']);
        }
        // validate the optional field `purchaseSettings`
        if (data['purchaseSettings']) { // data not null
          PurchaseSettingsThinRequest.validateJSON(data['purchaseSettings']);
        }
        // validate the optional field `shippingAddress`
        if (data['shippingAddress']) { // data not null
          ShippingAddress.validateJSON(data['shippingAddress']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * When set as `true`, it means the shopper asked to skip the next subscription order, and when set as `false`, no subscription order is going to be skipped.
 * @member {Boolean} isSkipped
 */
SubscriptionUpdateRequestV3.prototype['isSkipped'] = undefined;

/**
 * @member {module:model/PlanThinRequest} plan
 */
SubscriptionUpdateRequestV3.prototype['plan'] = undefined;

/**
 * @member {module:model/PurchaseSettingsThinRequest} purchaseSettings
 */
SubscriptionUpdateRequestV3.prototype['purchaseSettings'] = undefined;

/**
 * @member {module:model/ShippingAddress} shippingAddress
 */
SubscriptionUpdateRequestV3.prototype['shippingAddress'] = undefined;

/**
 * Status to which you wish to update the subscription. The accepted values are:   - `ACTIVE`   - `PAUSED`   - `CANCELLED`   - `EXPIRED`   - `MISSING`
 * @member {String} status
 */
SubscriptionUpdateRequestV3.prototype['status'] = undefined;

/**
 * Name of the subscription.
 * @member {String} title
 */
SubscriptionUpdateRequestV3.prototype['title'] = undefined;






export default SubscriptionUpdateRequestV3;

