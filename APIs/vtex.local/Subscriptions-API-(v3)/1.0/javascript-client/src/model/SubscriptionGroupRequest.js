/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PlanThinRequest from './PlanThinRequest';
import PurchaseSettingsThinRequest from './PurchaseSettingsThinRequest';
import ShippingAddress from './ShippingAddress';
import SubscriptionThinItemRequest from './SubscriptionThinItemRequest';

/**
 * The SubscriptionGroupRequest model module.
 * @module model/SubscriptionGroupRequest
 * @version 1.0
 */
class SubscriptionGroupRequest {
    /**
     * Constructs a new <code>SubscriptionGroupRequest</code>.
     * @alias module:model/SubscriptionGroupRequest
     * @param customerEmail {String} 
     * @param items {Array.<module:model/SubscriptionThinItemRequest>} 
     * @param plan {module:model/PlanThinRequest} 
     * @param purchaseSettings {module:model/PurchaseSettingsThinRequest} 
     * @param shippingAddress {module:model/ShippingAddress} 
     */
    constructor(customerEmail, items, plan, purchaseSettings, shippingAddress) { 
        
        SubscriptionGroupRequest.initialize(this, customerEmail, items, plan, purchaseSettings, shippingAddress);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customerEmail, items, plan, purchaseSettings, shippingAddress) { 
        obj['customerEmail'] = customerEmail;
        obj['items'] = items;
        obj['plan'] = plan;
        obj['purchaseSettings'] = purchaseSettings;
        obj['shippingAddress'] = shippingAddress;
    }

    /**
     * Constructs a <code>SubscriptionGroupRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionGroupRequest} obj Optional instance to populate.
     * @return {module:model/SubscriptionGroupRequest} The populated <code>SubscriptionGroupRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionGroupRequest();

            if (data.hasOwnProperty('catalogAttachment')) {
                obj['catalogAttachment'] = ApiClient.convertToType(data['catalogAttachment'], 'String');
            }
            if (data.hasOwnProperty('customerEmail')) {
                obj['customerEmail'] = ApiClient.convertToType(data['customerEmail'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [SubscriptionThinItemRequest]);
            }
            if (data.hasOwnProperty('nextPurchaseDate')) {
                obj['nextPurchaseDate'] = ApiClient.convertToType(data['nextPurchaseDate'], 'Date');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = PlanThinRequest.constructFromObject(data['plan']);
            }
            if (data.hasOwnProperty('purchaseSettings')) {
                obj['purchaseSettings'] = PurchaseSettingsThinRequest.constructFromObject(data['purchaseSettings']);
            }
            if (data.hasOwnProperty('shippingAddress')) {
                obj['shippingAddress'] = ShippingAddress.constructFromObject(data['shippingAddress']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionGroupRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionGroupRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscriptionGroupRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['catalogAttachment'] && !(typeof data['catalogAttachment'] === 'string' || data['catalogAttachment'] instanceof String)) {
            throw new Error("Expected the field `catalogAttachment` to be a primitive type in the JSON string but got " + data['catalogAttachment']);
        }
        // ensure the json data is a string
        if (data['customerEmail'] && !(typeof data['customerEmail'] === 'string' || data['customerEmail'] instanceof String)) {
            throw new Error("Expected the field `customerEmail` to be a primitive type in the JSON string but got " + data['customerEmail']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                SubscriptionThinItemRequest.validateJSON(item);
            };
        }
        // validate the optional field `plan`
        if (data['plan']) { // data not null
          PlanThinRequest.validateJSON(data['plan']);
        }
        // validate the optional field `purchaseSettings`
        if (data['purchaseSettings']) { // data not null
          PurchaseSettingsThinRequest.validateJSON(data['purchaseSettings']);
        }
        // validate the optional field `shippingAddress`
        if (data['shippingAddress']) { // data not null
          ShippingAddress.validateJSON(data['shippingAddress']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

SubscriptionGroupRequest.RequiredProperties = ["customerEmail", "items", "plan", "purchaseSettings", "shippingAddress"];

/**
 * @member {String} catalogAttachment
 */
SubscriptionGroupRequest.prototype['catalogAttachment'] = undefined;

/**
 * @member {String} customerEmail
 */
SubscriptionGroupRequest.prototype['customerEmail'] = undefined;

/**
 * @member {Array.<module:model/SubscriptionThinItemRequest>} items
 */
SubscriptionGroupRequest.prototype['items'] = undefined;

/**
 * @member {Date} nextPurchaseDate
 */
SubscriptionGroupRequest.prototype['nextPurchaseDate'] = undefined;

/**
 * @member {module:model/PlanThinRequest} plan
 */
SubscriptionGroupRequest.prototype['plan'] = undefined;

/**
 * @member {module:model/PurchaseSettingsThinRequest} purchaseSettings
 */
SubscriptionGroupRequest.prototype['purchaseSettings'] = undefined;

/**
 * @member {module:model/ShippingAddress} shippingAddress
 */
SubscriptionGroupRequest.prototype['shippingAddress'] = undefined;

/**
 * @member {String} status
 */
SubscriptionGroupRequest.prototype['status'] = undefined;

/**
 * @member {String} title
 */
SubscriptionGroupRequest.prototype['title'] = undefined;






export default SubscriptionGroupRequest;

