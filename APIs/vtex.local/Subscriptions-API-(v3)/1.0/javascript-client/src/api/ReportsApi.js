/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ReportResponse from '../model/ReportResponse';
import SubscriptionReport from '../model/SubscriptionReport';

/**
* Reports service.
* @module api/ReportsApi
* @version 1.0
*/
export default class ReportsApi {

    /**
    * Constructs a new ReportsApi. 
    * @alias module:api/ReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiRnsPvtReportsGet operation.
     * @callback module:api/ReportsApi~apiRnsPvtReportsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubscriptionReport>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List report templates
     * List all report templates available.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/ReportsApi~apiRnsPvtReportsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubscriptionReport>}
     */
    apiRnsPvtReportsGet(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPvtReportsGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPvtReportsGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [SubscriptionReport];
      return this.apiClient.callApi(
        '/api/rns/pvt/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnsPvtReportsReportNameDocumentsDocumentIdGet operation.
     * @callback module:api/ReportsApi~apiRnsPvtReportsReportNameDocumentsDocumentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get report document details
     * Retrieve a specific report document by its Id.
     * @param {String} reportName Name of the report
     * @param {String} documentId Id from the desired report document
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/ReportsApi~apiRnsPvtReportsReportNameDocumentsDocumentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportResponse}
     */
    apiRnsPvtReportsReportNameDocumentsDocumentIdGet(reportName, documentId, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'reportName' is set
      if (reportName === undefined || reportName === null) {
        throw new Error("Missing the required parameter 'reportName' when calling apiRnsPvtReportsReportNameDocumentsDocumentIdGet");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling apiRnsPvtReportsReportNameDocumentsDocumentIdGet");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPvtReportsReportNameDocumentsDocumentIdGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPvtReportsReportNameDocumentsDocumentIdGet");
      }

      let pathParams = {
        'reportName': reportName,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ReportResponse;
      return this.apiClient.callApi(
        '/api/rns/pvt/reports/{reportName}/documents/{documentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnsPvtReportsReportNameDocumentsPost operation.
     * @callback module:api/ReportsApi~apiRnsPvtReportsReportNameDocumentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate report
     * This endpoint creates a new report in the format of a CSV file and sends it via email. You can generate one of the following reports:    - subscriptionsWithStatus    - subscriptionsScheduledBetweenDate    - subscriptionsUpdatedBetweenDate    - subscriptionsCreatedBetweenDate    - executionsBetweenDate
     * @param {String} reportName Name of the type of report in wish to generate. The following values are accepted:    - `subscriptionsWithStatus`    - `subscriptionsScheduledBetweenDate`    - `subscriptionsUpdatedBetweenDate`    - `subscriptionsCreatedBetweenDate`    - `executionsBetweenDate`
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {String} [email = 'receiver@email.com')] The report is sent to the email in this field.
     * @param {String} [beginDate = '2022-09-01')] Start date of the report with the format `yyyy-mm-dd`. This field is required for any type of report.
     * @param {String} [endDate = '2022-10-01')] End date of the report with the format `yyyy-mm-dd`. This field is required for any type of report.
     * @param {module:api/ReportsApi~apiRnsPvtReportsReportNameDocumentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportResponse}
     */
    apiRnsPvtReportsReportNameDocumentsPost(reportName, contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reportName' is set
      if (reportName === undefined || reportName === null) {
        throw new Error("Missing the required parameter 'reportName' when calling apiRnsPvtReportsReportNameDocumentsPost");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPvtReportsReportNameDocumentsPost");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPvtReportsReportNameDocumentsPost");
      }

      let pathParams = {
        'reportName': reportName
      };
      let queryParams = {
        'email': opts['email'],
        'beginDate': opts['beginDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = ReportResponse;
      return this.apiClient.callApi(
        '/api/rns/pvt/reports/{reportName}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
