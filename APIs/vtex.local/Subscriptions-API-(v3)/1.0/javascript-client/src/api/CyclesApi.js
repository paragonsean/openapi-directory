/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SubscriptionCycleResponse from '../model/SubscriptionCycleResponse';

/**
* Cycles service.
* @module api/CyclesApi
* @version 1.0
*/
export default class CyclesApi {

    /**
    * Constructs a new CyclesApi. 
    * @alias module:api/CyclesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiRnsPubCyclesCycleIdGet operation.
     * @callback module:api/CyclesApi~apiRnsPubCyclesCycleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionCycleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cycle details
     * Retrieve a specific cycle by its ID.
     * @param {String} cycleId ID from the desired cycle.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/CyclesApi~apiRnsPubCyclesCycleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionCycleResponse}
     */
    apiRnsPubCyclesCycleIdGet(cycleId, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'cycleId' is set
      if (cycleId === undefined || cycleId === null) {
        throw new Error("Missing the required parameter 'cycleId' when calling apiRnsPubCyclesCycleIdGet");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPubCyclesCycleIdGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPubCyclesCycleIdGet");
      }

      let pathParams = {
        'cycleId': cycleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SubscriptionCycleResponse;
      return this.apiClient.callApi(
        '/api/rns/pub/cycles/{cycleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnsPubCyclesCycleIdRetryPost operation.
     * @callback module:api/CyclesApi~apiRnsPubCyclesCycleIdRetryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retry cycle
     * Every subscription order has an execution count called cycle, which determines the position of an order counting from when the shopper subscribed. This endpoint reruns a cycle that is currently in error state.
     * @param {String} cycleId Id from the cycle that will be retried
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/CyclesApi~apiRnsPubCyclesCycleIdRetryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRnsPubCyclesCycleIdRetryPost(cycleId, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'cycleId' is set
      if (cycleId === undefined || cycleId === null) {
        throw new Error("Missing the required parameter 'cycleId' when calling apiRnsPubCyclesCycleIdRetryPost");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPubCyclesCycleIdRetryPost");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPubCyclesCycleIdRetryPost");
      }

      let pathParams = {
        'cycleId': cycleId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rns/pub/cycles/{cycleId}/retry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnsPubCyclesGet operation.
     * @callback module:api/CyclesApi~apiRnsPubCyclesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubscriptionCycleResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List cycles
     * List cycles filtering by some arguments.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {String} [beginDate] Lower limit for the date of creation of the cycle
     * @param {String} [endDate] Upper limit for the date of creation of the cycle
     * @param {String} [subscriptionId] Id from the subscription that generated the cycle
     * @param {String} [customerEmail] Customer that owns the subscription. Defaults to the current logged user
     * @param {String} [status] Current cycle status
     * @param {Number} [page = 1)] Page used for pagination
     * @param {Number} [size = 15)] Page size used for pagination
     * @param {module:api/CyclesApi~apiRnsPubCyclesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubscriptionCycleResponse>}
     */
    apiRnsPubCyclesGet(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPubCyclesGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPubCyclesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'beginDate': opts['beginDate'],
        'endDate': opts['endDate'],
        'subscriptionId': opts['subscriptionId'],
        'customerEmail': opts['customerEmail'],
        'status': opts['status'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [SubscriptionCycleResponse];
      return this.apiClient.callApi(
        '/api/rns/pub/cycles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
