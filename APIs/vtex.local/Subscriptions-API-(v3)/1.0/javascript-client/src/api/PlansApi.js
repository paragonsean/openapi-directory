/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import StorePlan from '../model/StorePlan';

/**
* Plans service.
* @module api/PlansApi
* @version 1.0
*/
export default class PlansApi {

    /**
    * Constructs a new PlansApi. 
    * @alias module:api/PlansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiRnsPvtPlansGet operation.
     * @callback module:api/PlansApi~apiRnsPvtPlansGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StorePlan>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List plans
     * List plans filtering by some arguments.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {String} [periodicity] Filter plans by available periodicity
     * @param {String} [interval] Filter plans by available interval
     * @param {Number} [page = 1)] Page used for pagination
     * @param {Number} [size = 15)] Page size used for pagination
     * @param {module:api/PlansApi~apiRnsPvtPlansGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StorePlan>}
     */
    apiRnsPvtPlansGet(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPvtPlansGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPvtPlansGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'periodicity': opts['periodicity'],
        'interval': opts['interval'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [StorePlan];
      return this.apiClient.callApi(
        '/api/rns/pvt/plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnsPvtPlansIdGet operation.
     * @callback module:api/PlansApi~apiRnsPvtPlansIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorePlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get plan details
     * This endpoint retrieves a specific plan by its ID.
     * @param {String} id Id from the desired plan
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/PlansApi~apiRnsPvtPlansIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorePlan}
     */
    apiRnsPvtPlansIdGet(id, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiRnsPvtPlansIdGet");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPvtPlansIdGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPvtPlansIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = StorePlan;
      return this.apiClient.callApi(
        '/api/rns/pvt/plans/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
