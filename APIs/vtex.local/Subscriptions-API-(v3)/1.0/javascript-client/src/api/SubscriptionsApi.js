/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner from '../model/ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner';
import SimulateResponseVO from '../model/SimulateResponseVO';
import SubscriptionGroupRequest from '../model/SubscriptionGroupRequest';
import SubscriptionGroupResponse from '../model/SubscriptionGroupResponse';
import SubscriptionThinItemRequest from '../model/SubscriptionThinItemRequest';
import SubscriptionUpdateRequestV3 from '../model/SubscriptionUpdateRequestV3';
import UpdateItemInput from '../model/UpdateItemInput';

/**
* Subscriptions service.
* @module api/SubscriptionsApi
* @version 1.0
*/
export default class SubscriptionsApi {

    /**
    * Constructs a new SubscriptionsApi. 
    * @alias module:api/SubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiRnsPubSubscriptionsGet operation.
     * @callback module:api/SubscriptionsApi~apiRnsPubSubscriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubscriptionGroupResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List subscriptions
     * List subscriptions filtering by some arguments.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {String} [customerEmail] Customer that owns the subscription. Defaults to the current logged user.
     * @param {String} [status] Current subscription status
     * @param {String} [addressId] Id from the address used as shipping address
     * @param {String} [paymentId] Id from the payment used as payment method
     * @param {String} [planId] Id from the plan that the subscription belongs to
     * @param {String} [nextPurchaseDate] Date for the next cycle
     * @param {String} [originalOrderId] Id from the order that generated the subscription
     * @param {Number} [page = 1)] Page used for pagination
     * @param {Number} [size = 15)] Page size used for pagination
     * @param {module:api/SubscriptionsApi~apiRnsPubSubscriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubscriptionGroupResponse>}
     */
    apiRnsPubSubscriptionsGet(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'customerEmail': opts['customerEmail'],
        'status': opts['status'],
        'addressId': opts['addressId'],
        'paymentId': opts['paymentId'],
        'planId': opts['planId'],
        'nextPurchaseDate': opts['nextPurchaseDate'],
        'originalOrderId': opts['originalOrderId'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [SubscriptionGroupResponse];
      return this.apiClient.callApi(
        '/api/rns/pub/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnsPubSubscriptionsIdGet operation.
     * @callback module:api/SubscriptionsApi~apiRnsPubSubscriptionsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get subscription details
     * Retrieve a specific subscription by its ID.
     * @param {String} id ID from the target subscription.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/SubscriptionsApi~apiRnsPubSubscriptionsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionGroupResponse}
     */
    apiRnsPubSubscriptionsIdGet(id, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiRnsPubSubscriptionsIdGet");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsIdGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SubscriptionGroupResponse;
      return this.apiClient.callApi(
        '/api/rns/pub/subscriptions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnsPubSubscriptionsIdItemsItemIdDelete operation.
     * @callback module:api/SubscriptionsApi~apiRnsPubSubscriptionsIdItemsItemIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove items from a subscription.
     * Removes a specific item from a given subscription
     * @param {String} id Id from the target subscription
     * @param {String} itemId Id from the subscription item that will be removed
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/SubscriptionsApi~apiRnsPubSubscriptionsIdItemsItemIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRnsPubSubscriptionsIdItemsItemIdDelete(id, itemId, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiRnsPubSubscriptionsIdItemsItemIdDelete");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling apiRnsPubSubscriptionsIdItemsItemIdDelete");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsIdItemsItemIdDelete");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsIdItemsItemIdDelete");
      }

      let pathParams = {
        'id': id,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rns/pub/subscriptions/{id}/items/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnsPubSubscriptionsIdItemsItemIdPatch operation.
     * @callback module:api/SubscriptionsApi~apiRnsPubSubscriptionsIdItemsItemIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit items on a subscription.
     * Edit a given item on a specific subscription
     * @param {String} id Id from the target subscription
     * @param {String} itemId Id from the target item
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateItemInput} [updateItemInput] 
     * @param {module:api/SubscriptionsApi~apiRnsPubSubscriptionsIdItemsItemIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionGroupResponse}
     */
    apiRnsPubSubscriptionsIdItemsItemIdPatch(id, itemId, contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateItemInput'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiRnsPubSubscriptionsIdItemsItemIdPatch");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling apiRnsPubSubscriptionsIdItemsItemIdPatch");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsIdItemsItemIdPatch");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsIdItemsItemIdPatch");
      }

      let pathParams = {
        'id': id,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SubscriptionGroupResponse;
      return this.apiClient.callApi(
        '/api/rns/pub/subscriptions/{id}/items/{itemId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnsPubSubscriptionsIdItemsPost operation.
     * @callback module:api/SubscriptionsApi~apiRnsPubSubscriptionsIdItemsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add item to subscription
     * Add a new item to a given subscription.
     * @param {String} id ID from the target subscription
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {module:model/SubscriptionThinItemRequest} [subscriptionThinItemRequest] 
     * @param {module:api/SubscriptionsApi~apiRnsPubSubscriptionsIdItemsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionGroupResponse}
     */
    apiRnsPubSubscriptionsIdItemsPost(id, contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscriptionThinItemRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiRnsPubSubscriptionsIdItemsPost");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsIdItemsPost");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsIdItemsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SubscriptionGroupResponse;
      return this.apiClient.callApi(
        '/api/rns/pub/subscriptions/{id}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnsPubSubscriptionsIdPatch operation.
     * @callback module:api/SubscriptionsApi~apiRnsPubSubscriptionsIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update subscription
     * Update a specific subscription.
     * @param {String} id ID from the given subscription.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {module:model/SubscriptionUpdateRequestV3} [subscriptionUpdateRequestV3] 
     * @param {module:api/SubscriptionsApi~apiRnsPubSubscriptionsIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionGroupResponse}
     */
    apiRnsPubSubscriptionsIdPatch(id, contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscriptionUpdateRequestV3'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiRnsPubSubscriptionsIdPatch");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsIdPatch");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SubscriptionGroupResponse;
      return this.apiClient.callApi(
        '/api/rns/pub/subscriptions/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnsPubSubscriptionsIdSimulatePost operation.
     * @callback module:api/SubscriptionsApi~apiRnsPubSubscriptionsIdSimulatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimulateResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate the current prices for a specific subscription
     * Simulates an order made by the specific subscription on checkout and retrieves the current price for items and shipping.
     * @param {String} id Id from the target subscription
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/SubscriptionsApi~apiRnsPubSubscriptionsIdSimulatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimulateResponseVO}
     */
    apiRnsPubSubscriptionsIdSimulatePost(id, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiRnsPubSubscriptionsIdSimulatePost");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsIdSimulatePost");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsIdSimulatePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SimulateResponseVO;
      return this.apiClient.callApi(
        '/api/rns/pub/subscriptions/{id}/simulate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnsPubSubscriptionsPost operation.
     * @callback module:api/SubscriptionsApi~apiRnsPubSubscriptionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create subscription
     * Create a new subscription.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {module:model/SubscriptionGroupRequest} [subscriptionGroupRequest] 
     * @param {module:api/SubscriptionsApi~apiRnsPubSubscriptionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionGroupResponse}
     */
    apiRnsPubSubscriptionsPost(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscriptionGroupRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsPost");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SubscriptionGroupResponse;
      return this.apiClient.callApi(
        '/api/rns/pub/subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnsPubSubscriptionsSimulatePost operation.
     * @callback module:api/SubscriptionsApi~apiRnsPubSubscriptionsSimulatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimulateResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate the current prices for the provided subscription template
     * Simulates an order made by subscriptions on checkout and retrieves the current price for items and shipping.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {module:model/SubscriptionGroupRequest} [subscriptionGroupRequest] 
     * @param {module:api/SubscriptionsApi~apiRnsPubSubscriptionsSimulatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimulateResponseVO}
     */
    apiRnsPubSubscriptionsSimulatePost(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscriptionGroupRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsSimulatePost");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsSimulatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/*+json', 'application/json', 'application/json-patch+json', 'text/json'];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SimulateResponseVO;
      return this.apiClient.callApi(
        '/api/rns/pub/subscriptions/simulate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet operation.
     * @callback module:api/SubscriptionsApi~apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get conversation messages
     * Retrieve all conversation messages sent to a customer regarding a given subscription.
     * @param {String} subscriptionId ID of the subscription.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/SubscriptionsApi~apiRnsPubSubscriptionsSubscriptionIdConversationMessageGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner>}
     */
    apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet(subscriptionId, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiRnsPubSubscriptionsSubscriptionIdConversationMessageGet200ResponseInner];
      return this.apiClient.callApi(
        '/api/rns/pub/subscriptions/{subscriptionId}/conversation-message', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
