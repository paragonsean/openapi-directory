/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SubscriptionsApiV3);
  }
}(this, function(expect, SubscriptionsApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SubscriptionsApiV3.Settings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Settings', function() {
    it('should create an instance of Settings', function() {
      // uncomment below and update the code to test Settings
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be.a(SubscriptionsApiV3.Settings);
    });

    it('should have the property defaultSla (base name: "defaultSla")', function() {
      // uncomment below and update the code to test the property defaultSla
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be();
    });

    it('should have the property deliveryChannels (base name: "deliveryChannels")', function() {
      // uncomment below and update the code to test the property deliveryChannels
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be();
    });

    it('should have the property executionHourInUtc (base name: "executionHourInUtc")', function() {
      // uncomment below and update the code to test the property executionHourInUtc
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be();
    });

    it('should have the property isMultipleInstallmentsEnabledOnCreation (base name: "isMultipleInstallmentsEnabledOnCreation")', function() {
      // uncomment below and update the code to test the property isMultipleInstallmentsEnabledOnCreation
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be();
    });

    it('should have the property isMultipleInstallmentsEnabledOnUpdate (base name: "isMultipleInstallmentsEnabledOnUpdate")', function() {
      // uncomment below and update the code to test the property isMultipleInstallmentsEnabledOnUpdate
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be();
    });

    it('should have the property isUsingV3 (base name: "isUsingV3")', function() {
      // uncomment below and update the code to test the property isUsingV3
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be();
    });

    it('should have the property manualPriceAllowed (base name: "manualPriceAllowed")', function() {
      // uncomment below and update the code to test the property manualPriceAllowed
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be();
    });

    it('should have the property onMigrationProcess (base name: "onMigrationProcess")', function() {
      // uncomment below and update the code to test the property onMigrationProcess
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be();
    });

    it('should have the property orderCustomDataAppId (base name: "orderCustomDataAppId")', function() {
      // uncomment below and update the code to test the property orderCustomDataAppId
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be();
    });

    it('should have the property postponeExpiration (base name: "postponeExpiration")', function() {
      // uncomment below and update the code to test the property postponeExpiration
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be();
    });

    it('should have the property randomIdGeneration (base name: "randomIdGeneration")', function() {
      // uncomment below and update the code to test the property randomIdGeneration
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be();
    });

    it('should have the property slaOption (base name: "slaOption")', function() {
      // uncomment below and update the code to test the property slaOption
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be();
    });

    it('should have the property useItemPriceFromOriginalOrder (base name: "useItemPriceFromOriginalOrder")', function() {
      // uncomment below and update the code to test the property useItemPriceFromOriginalOrder
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be();
    });

    it('should have the property workflowVersion (base name: "workflowVersion")', function() {
      // uncomment below and update the code to test the property workflowVersion
      //var instance = new SubscriptionsApiV3.Settings();
      //expect(instance).to.be();
    });

  });

}));
