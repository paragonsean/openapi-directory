/**
 * Subscriptions API (v3)
 *   A **Subscription** is a list of items (SKUs) tied to certain recurring purchase settings:    - User profile  - Address  - Payment method  - Frequency  - Cycle    Once you have [configured subscriptions](https://help.vtex.com/tutorial/how-to-configure-subscriptions%20--1FA9dfE7vJqxBna9Nft5Sj) in your store, the Subscriptions API allows you to create, manage and monitor your customers' subscriptions.    ![image](https://user-images.githubusercontent.com/77292838/213024675-9407863b-0c55-4282-9442-306352716abe.png)    To read more about the Subscriptions feature, check our article [How Subscription works](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SubscriptionsApiV3);
  }
}(this, function(expect, SubscriptionsApiV3) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SubscriptionsApiV3.SubscriptionsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SubscriptionsApi', function() {
    describe('apiRnsPubSubscriptionsGet', function() {
      it('should call apiRnsPubSubscriptionsGet successfully', function(done) {
        //uncomment below and update the code to test apiRnsPubSubscriptionsGet
        //instance.apiRnsPubSubscriptionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiRnsPubSubscriptionsIdGet', function() {
      it('should call apiRnsPubSubscriptionsIdGet successfully', function(done) {
        //uncomment below and update the code to test apiRnsPubSubscriptionsIdGet
        //instance.apiRnsPubSubscriptionsIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiRnsPubSubscriptionsIdItemsItemIdDelete', function() {
      it('should call apiRnsPubSubscriptionsIdItemsItemIdDelete successfully', function(done) {
        //uncomment below and update the code to test apiRnsPubSubscriptionsIdItemsItemIdDelete
        //instance.apiRnsPubSubscriptionsIdItemsItemIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiRnsPubSubscriptionsIdItemsItemIdPatch', function() {
      it('should call apiRnsPubSubscriptionsIdItemsItemIdPatch successfully', function(done) {
        //uncomment below and update the code to test apiRnsPubSubscriptionsIdItemsItemIdPatch
        //instance.apiRnsPubSubscriptionsIdItemsItemIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiRnsPubSubscriptionsIdItemsPost', function() {
      it('should call apiRnsPubSubscriptionsIdItemsPost successfully', function(done) {
        //uncomment below and update the code to test apiRnsPubSubscriptionsIdItemsPost
        //instance.apiRnsPubSubscriptionsIdItemsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiRnsPubSubscriptionsIdPatch', function() {
      it('should call apiRnsPubSubscriptionsIdPatch successfully', function(done) {
        //uncomment below and update the code to test apiRnsPubSubscriptionsIdPatch
        //instance.apiRnsPubSubscriptionsIdPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiRnsPubSubscriptionsIdSimulatePost', function() {
      it('should call apiRnsPubSubscriptionsIdSimulatePost successfully', function(done) {
        //uncomment below and update the code to test apiRnsPubSubscriptionsIdSimulatePost
        //instance.apiRnsPubSubscriptionsIdSimulatePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiRnsPubSubscriptionsPost', function() {
      it('should call apiRnsPubSubscriptionsPost successfully', function(done) {
        //uncomment below and update the code to test apiRnsPubSubscriptionsPost
        //instance.apiRnsPubSubscriptionsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiRnsPubSubscriptionsSimulatePost', function() {
      it('should call apiRnsPubSubscriptionsSimulatePost successfully', function(done) {
        //uncomment below and update the code to test apiRnsPubSubscriptionsSimulatePost
        //instance.apiRnsPubSubscriptionsSimulatePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet', function() {
      it('should call apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet successfully', function(done) {
        //uncomment below and update the code to test apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet
        //instance.apiRnsPubSubscriptionsSubscriptionIdConversationMessageGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
