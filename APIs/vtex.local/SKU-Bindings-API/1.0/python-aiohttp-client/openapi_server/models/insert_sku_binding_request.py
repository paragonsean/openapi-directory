# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InsertSKUBindingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_active: bool=None, seller_id: str=None, seller_stock_keeping_unit_id: str=None, stock_keeping_unit_id: int=None):
        """InsertSKUBindingRequest - a model defined in OpenAPI

        :param is_active: The is_active of this InsertSKUBindingRequest.
        :param seller_id: The seller_id of this InsertSKUBindingRequest.
        :param seller_stock_keeping_unit_id: The seller_stock_keeping_unit_id of this InsertSKUBindingRequest.
        :param stock_keeping_unit_id: The stock_keeping_unit_id of this InsertSKUBindingRequest.
        """
        self.openapi_types = {
            'is_active': bool,
            'seller_id': str,
            'seller_stock_keeping_unit_id': str,
            'stock_keeping_unit_id': int
        }

        self.attribute_map = {
            'is_active': 'IsActive',
            'seller_id': 'SellerId',
            'seller_stock_keeping_unit_id': 'SellerStockKeepingUnitId',
            'stock_keeping_unit_id': 'StockKeepingUnitId'
        }

        self._is_active = is_active
        self._seller_id = seller_id
        self._seller_stock_keeping_unit_id = seller_stock_keeping_unit_id
        self._stock_keeping_unit_id = stock_keeping_unit_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InsertSKUBindingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InsertSKUBinding_request of this InsertSKUBindingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_active(self):
        """Gets the is_active of this InsertSKUBindingRequest.

        Defines if the SKU binding is active.

        :return: The is_active of this InsertSKUBindingRequest.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this InsertSKUBindingRequest.

        Defines if the SKU binding is active.

        :param is_active: The is_active of this InsertSKUBindingRequest.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def seller_id(self):
        """Gets the seller_id of this InsertSKUBindingRequest.

        ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.

        :return: The seller_id of this InsertSKUBindingRequest.
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this InsertSKUBindingRequest.

        ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.

        :param seller_id: The seller_id of this InsertSKUBindingRequest.
        :type seller_id: str
        """
        if seller_id is None:
            raise ValueError("Invalid value for `seller_id`, must not be `None`")

        self._seller_id = seller_id

    @property
    def seller_stock_keeping_unit_id(self):
        """Gets the seller_stock_keeping_unit_id of this InsertSKUBindingRequest.

        SKU seller ID.

        :return: The seller_stock_keeping_unit_id of this InsertSKUBindingRequest.
        :rtype: str
        """
        return self._seller_stock_keeping_unit_id

    @seller_stock_keeping_unit_id.setter
    def seller_stock_keeping_unit_id(self, seller_stock_keeping_unit_id):
        """Sets the seller_stock_keeping_unit_id of this InsertSKUBindingRequest.

        SKU seller ID.

        :param seller_stock_keeping_unit_id: The seller_stock_keeping_unit_id of this InsertSKUBindingRequest.
        :type seller_stock_keeping_unit_id: str
        """
        if seller_stock_keeping_unit_id is None:
            raise ValueError("Invalid value for `seller_stock_keeping_unit_id`, must not be `None`")

        self._seller_stock_keeping_unit_id = seller_stock_keeping_unit_id

    @property
    def stock_keeping_unit_id(self):
        """Gets the stock_keeping_unit_id of this InsertSKUBindingRequest.

        SKU ID in the marketplace.

        :return: The stock_keeping_unit_id of this InsertSKUBindingRequest.
        :rtype: int
        """
        return self._stock_keeping_unit_id

    @stock_keeping_unit_id.setter
    def stock_keeping_unit_id(self, stock_keeping_unit_id):
        """Sets the stock_keeping_unit_id of this InsertSKUBindingRequest.

        SKU ID in the marketplace.

        :param stock_keeping_unit_id: The stock_keeping_unit_id of this InsertSKUBindingRequest.
        :type stock_keeping_unit_id: int
        """
        if stock_keeping_unit_id is None:
            raise ValueError("Invalid value for `stock_keeping_unit_id`, must not be `None`")

        self._stock_keeping_unit_id = stock_keeping_unit_id
