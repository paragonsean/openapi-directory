/*
 * SKU Bindings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BindtoanotherskuRequest;
import org.openapitools.client.model.GetSKUseller200Response;
import org.openapitools.client.model.GetallbySellerId200ResponseInner;
import org.openapitools.client.model.GetbySkuId200ResponseInner;
import org.openapitools.client.model.Getpagedadmin200Response;
import org.openapitools.client.model.InsertSKUBindingRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SkuBindingsApi
 */
@Disabled
public class SkuBindingsApiTest {

    private final SkuBindingsApi api = new SkuBindingsApi();

    /**
     * Activate SKU Binding
     *
     * Changes the status of an SKU Binding to active, setting &#x60;isActive&#x60; to &#x60;true&#x60;.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/activate/{sellerId}/{skuSellerId}&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateSKUBindingTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String sellerId = null;
        String skuSellerId = null;
        api.activateSKUBinding(contentType, accept, sellerId, skuSellerId);
        // TODO: test validations
    }

    /**
     * Bind a seller&#39;s SKU to another SKU
     *
     * Associates a seller&#39;s SKU to another marketplace SKU.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}&#x60;.    ## Request body example    &#x60;&#x60;&#x60;json  {      \&quot;StockKeepingUnitId\&quot;: 1  }  &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bindtoanotherskuTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String sellerId = null;
        String sellerSkuId = null;
        BindtoanotherskuRequest bindtoanotherskuRequest = null;
        api.bindtoanothersku(contentType, accept, sellerId, sellerSkuId, bindtoanotherskuRequest);
        // TODO: test validations
    }

    /**
     * Change Notification with SKU ID
     *
     * The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.  With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.  The body of the request should be empty.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/changenotification/{skuId}&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeNotificationTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String skuId = null;
        api.changeNotification(contentType, accept, skuId);
        // TODO: test validations
    }

    /**
     * Deactivate SKU Binding
     *
     * Changes the status of an SKU Binding to inactive, setting &#x60;isActive&#x60; to &#x60;false&#x60;.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/inactivate/{sellerId}/{skuSellerId}&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateSKUBindingTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String sellerId = null;
        String skuSellerId = null;
        api.deactivateSKUBinding(contentType, accept, sellerId, skuSellerId);
        // TODO: test validations
    }

    /**
     * Remove a seller&#39;s SKU Binding
     *
     * Remove a seller&#39;s SKU binding, given the Seller ID and the SKU ID in the seller&#39;s store.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/remove/{sellerId}/{sellerSkuId}&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSKUsellerassociationTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String sellerId = null;
        String sellerSkuId = null;
        api.deleteSKUsellerassociation(contentType, accept, sellerId, sellerSkuId);
        // TODO: test validations
    }

    /**
     * Get details of a seller&#39;s SKU
     *
     * Retrieves the details of a seller&#39;s SKU given a seller ID and the SKU ID in the seller&#39;s store.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;IsPersisted\&quot;: true,      \&quot;IsRemoved\&quot;: false,      \&quot;SkuSellerId\&quot;: 102,      \&quot;UpdateDate\&quot;: \&quot;2021-04-12T20:06:59.413Z\&quot;,      \&quot;RequestedUpdateDate\&quot;: null,      \&quot;SellerStockKeepingUnitId\&quot;: \&quot;71\&quot;,      \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,      \&quot;StockKeepingUnitId\&quot;: 1,      \&quot;IsActive\&quot;: true  }  &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSKUsellerTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String sellerId = null;
        String sellerSkuId = null;
        GetSKUseller200Response response = api.getSKUseller(contentType, accept, sellerId, sellerSkuId);
        // TODO: test validations
    }

    /**
     * Get all SKU Bindings by Seller ID
     *
     * Retrieves a list of SKU Bindings given a specific Seller ID.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/list/bysellerId/{sellerId}&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;24\&quot;,          \&quot;FreightCommissionPercentage\&quot;: null,          \&quot;ProductCommissionPercentage\&quot;: null,          \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,          \&quot;StockKeepingUnitId\&quot;: 121,          \&quot;IsActive\&quot;: true      }  ]  &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getallbySellerIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String sellerId = null;
        List<GetallbySellerId200ResponseInner> response = api.getallbySellerId(contentType, accept, sellerId);
        // TODO: test validations
    }

    /**
     * Get SKU Bindings by SKU ID
     *
     * Retrieves SKU Bindings details by SKU ID.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;Id\&quot;: 48,          \&quot;SellerId\&quot;: \&quot;cosmetics1\&quot;,          \&quot;StockKeepingUnitId\&quot;: 1,          \&quot;SellerSkuId\&quot;: \&quot;42\&quot;,          \&quot;IsActive\&quot;: true,          \&quot;LastUpdateDate\&quot;: \&quot;2020-10-21T19:13:00.657\&quot;,          \&quot;SalesPolicy\&quot;: 0      }  ]  &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getbySkuIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String skuId = null;
        List<GetbySkuId200ResponseInner> response = api.getbySkuId(contentType, accept, skuId);
        // TODO: test validations
    }

    /**
     * Get SKU Bindings information
     *
     * Retrieves SKU Bindings administrative information using optional query params &#x60;sellerId&#x60;, &#x60;skuId&#x60;, &#x60;sellerSkuId&#x60; and &#x60;IsActive&#x60; to filter results and &#x60;size&#x60; to restrict the amount of results.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/admin&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;IsPersisted\&quot;: true,          \&quot;IsRemoved\&quot;: false,          \&quot;SkuSellerId\&quot;: 1,          \&quot;UpdateDate\&quot;: \&quot;2019-12-04T01:56:00.673Z\&quot;,          \&quot;RequestedUpdateDate\&quot;: null,          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;12\&quot;,          \&quot;SellerId\&quot;: \&quot;cosmetics1\&quot;,          \&quot;StockKeepingUnitId\&quot;: 25,          \&quot;IsActive\&quot;: true      }  ]  &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getpagedadminTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String sellerId = null;
        String skuId = null;
        String sellerSkuId = null;
        Boolean isActive = null;
        String size = null;
        Getpagedadmin200Response response = api.getpagedadmin(contentType, accept, sellerId, skuId, sellerSkuId, isActive, size);
        // TODO: test validations
    }

    /**
     * Get paged SKU Bindings by Seller ID
     *
     * Retrieves a paged list of SKU Bindings given a specific Seller ID.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/paged/sellerid/{sellerId}&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,          \&quot;StockKeepingUnitId\&quot;: 121,          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;24\&quot;,          \&quot;IsActive\&quot;: true,          \&quot;FreightCommissionPercentage\&quot;: null,          \&quot;ProductCommissionPercentage\&quot;: null      },      {          \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,          \&quot;StockKeepingUnitId\&quot;: 14,          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;60\&quot;,          \&quot;IsActive\&quot;: true,          \&quot;FreightCommissionPercentage\&quot;: null,          \&quot;ProductCommissionPercentage\&quot;: null      }  ]  &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getpagedbySellerIdTest() throws ApiException {
        String page = null;
        String size = null;
        String contentType = null;
        String accept = null;
        String sellerId = null;
        List<GetallbySellerId200ResponseInner> response = api.getpagedbySellerId(page, size, contentType, accept, sellerId);
        // TODO: test validations
    }

    /**
     * Insert SKU Binding
     *
     * Creates an SKU Binding, associating a seller&#39;s SKU with a marketplace&#39;s SKU.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/insertion&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void insertSKUBindingTest() throws ApiException {
        String contentType = null;
        String accept = null;
        InsertSKUBindingRequest insertSKUBindingRequest = null;
        api.insertSKUBinding(contentType, accept, insertSKUBindingRequest);
        // TODO: test validations
    }

    /**
     * Change Notification with Seller ID and Seller SKU ID
     *
     * The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.  With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.  There are two information expected by the marketplace in this request: the &#x60;sellerId&#x60;, which identifies the seller, and the &#x60;sellerSkuId&#x60;, which identifies the binding of the seller with the SKU.  Both information are passed through the request URL. The body of the request should be empty.   &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/changenotification/{sellerId}/{sellerSkuId}&#x60;.    ## Example    Let&#39;s say your seller has the ID &#x60;123&#x60; in the marketplace and you want to inform the marketplace that has been a change in the SKU with ID &#x60;700&#x60;.    In this case, you would have to replace the &#x60;sellerId&#x60; parameter with the value &#x60;123&#x60; and the &#x60;skuId&#x60; parameter with the value &#x60;700&#x60;. The URL of the request would be the following.    &#x60;&#x60;&#x60;  https://{{accountName}}.vtexcommercestable.com.br/api/sku-binding/pvt/skuseller/changenotification/123/700  &#x60;&#x60;&#x60;    ## Response codes    The following response codes are possible for this request.  * 200: the SKU whose ID was informed in the URL already exists in the marketplace and was found. The marketplace can now proceed with a fulfillment simulation in order to get updated information about this SKU&#39;s inventory and price.  * 403: Failure in the authentication.  * 404: the SKU was not found in the marketplace. The body of the response, in this case, should follow this format: \&quot;Seller StockKeepingUnit &#x60;{{skuId}}&#x60; not found for this seller id &#x60;{{sellerId}}&#x60;. This means that the seller can now proceed with sending an offer to the marketplace in order to suggest that this SKU is sold there.  * 429: Failure due to too many requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String sellerId = null;
        String sellerSkuId = null;
        api.skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPost(contentType, accept, sellerId, sellerSkuId);
        // TODO: test validations
    }

}
