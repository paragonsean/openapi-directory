/*
 * SKU Bindings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSKUseller200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:18.331288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSKUseller200Response {
  public static final String SERIALIZED_NAME_IS_ACTIVE = "IsActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_PERSISTED = "IsPersisted";
  @SerializedName(SERIALIZED_NAME_IS_PERSISTED)
  private Boolean isPersisted;

  public static final String SERIALIZED_NAME_IS_REMOVED = "IsRemoved";
  @SerializedName(SERIALIZED_NAME_IS_REMOVED)
  private Boolean isRemoved;

  public static final String SERIALIZED_NAME_REQUESTED_UPDATE_DATE = "RequestedUpdateDate";
  @SerializedName(SERIALIZED_NAME_REQUESTED_UPDATE_DATE)
  private String requestedUpdateDate;

  public static final String SERIALIZED_NAME_SELLER_ID = "SellerId";
  @SerializedName(SERIALIZED_NAME_SELLER_ID)
  private String sellerId;

  public static final String SERIALIZED_NAME_SELLER_STOCK_KEEPING_UNIT_ID = "SellerStockKeepingUnitId";
  @SerializedName(SERIALIZED_NAME_SELLER_STOCK_KEEPING_UNIT_ID)
  private String sellerStockKeepingUnitId;

  public static final String SERIALIZED_NAME_SKU_SELLER_ID = "SkuSellerId";
  @SerializedName(SERIALIZED_NAME_SKU_SELLER_ID)
  private Integer skuSellerId;

  public static final String SERIALIZED_NAME_STOCK_KEEPING_UNIT_ID = "StockKeepingUnitId";
  @SerializedName(SERIALIZED_NAME_STOCK_KEEPING_UNIT_ID)
  private Integer stockKeepingUnitId;

  public static final String SERIALIZED_NAME_UPDATE_DATE = "UpdateDate";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  private String updateDate;

  public GetSKUseller200Response() {
  }

  public GetSKUseller200Response isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Defines if the SKU binding is active.
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public GetSKUseller200Response isPersisted(Boolean isPersisted) {
    this.isPersisted = isPersisted;
    return this;
  }

  /**
   * Defines if the seller is persisted.
   * @return isPersisted
   */
  @javax.annotation.Nonnull
  public Boolean getIsPersisted() {
    return isPersisted;
  }

  public void setIsPersisted(Boolean isPersisted) {
    this.isPersisted = isPersisted;
  }


  public GetSKUseller200Response isRemoved(Boolean isRemoved) {
    this.isRemoved = isRemoved;
    return this;
  }

  /**
   * Defines if the seller is removed.
   * @return isRemoved
   */
  @javax.annotation.Nonnull
  public Boolean getIsRemoved() {
    return isRemoved;
  }

  public void setIsRemoved(Boolean isRemoved) {
    this.isRemoved = isRemoved;
  }


  public GetSKUseller200Response requestedUpdateDate(String requestedUpdateDate) {
    this.requestedUpdateDate = requestedUpdateDate;
    return this;
  }

  /**
   * Date when an SKU binding update was requested for the last time, in UTC format.
   * @return requestedUpdateDate
   */
  @javax.annotation.Nullable
  public String getRequestedUpdateDate() {
    return requestedUpdateDate;
  }

  public void setRequestedUpdateDate(String requestedUpdateDate) {
    this.requestedUpdateDate = requestedUpdateDate;
  }


  public GetSKUseller200Response sellerId(String sellerId) {
    this.sellerId = sellerId;
    return this;
  }

  /**
   * ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
   * @return sellerId
   */
  @javax.annotation.Nonnull
  public String getSellerId() {
    return sellerId;
  }

  public void setSellerId(String sellerId) {
    this.sellerId = sellerId;
  }


  public GetSKUseller200Response sellerStockKeepingUnitId(String sellerStockKeepingUnitId) {
    this.sellerStockKeepingUnitId = sellerStockKeepingUnitId;
    return this;
  }

  /**
   * SKU seller ID.
   * @return sellerStockKeepingUnitId
   */
  @javax.annotation.Nonnull
  public String getSellerStockKeepingUnitId() {
    return sellerStockKeepingUnitId;
  }

  public void setSellerStockKeepingUnitId(String sellerStockKeepingUnitId) {
    this.sellerStockKeepingUnitId = sellerStockKeepingUnitId;
  }


  public GetSKUseller200Response skuSellerId(Integer skuSellerId) {
    this.skuSellerId = skuSellerId;
    return this;
  }

  /**
   * SKU ID in the seller&#39;s store.
   * @return skuSellerId
   */
  @javax.annotation.Nonnull
  public Integer getSkuSellerId() {
    return skuSellerId;
  }

  public void setSkuSellerId(Integer skuSellerId) {
    this.skuSellerId = skuSellerId;
  }


  public GetSKUseller200Response stockKeepingUnitId(Integer stockKeepingUnitId) {
    this.stockKeepingUnitId = stockKeepingUnitId;
    return this;
  }

  /**
   * SKU ID in the VTEX marketplace.
   * @return stockKeepingUnitId
   */
  @javax.annotation.Nonnull
  public Integer getStockKeepingUnitId() {
    return stockKeepingUnitId;
  }

  public void setStockKeepingUnitId(Integer stockKeepingUnitId) {
    this.stockKeepingUnitId = stockKeepingUnitId;
  }


  public GetSKUseller200Response updateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  /**
   * Date when the SKU binding was updated for the last time, in UTC format.
   * @return updateDate
   */
  @javax.annotation.Nonnull
  public String getUpdateDate() {
    return updateDate;
  }

  public void setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSKUseller200Response getSKUseller200Response = (GetSKUseller200Response) o;
    return Objects.equals(this.isActive, getSKUseller200Response.isActive) &&
        Objects.equals(this.isPersisted, getSKUseller200Response.isPersisted) &&
        Objects.equals(this.isRemoved, getSKUseller200Response.isRemoved) &&
        Objects.equals(this.requestedUpdateDate, getSKUseller200Response.requestedUpdateDate) &&
        Objects.equals(this.sellerId, getSKUseller200Response.sellerId) &&
        Objects.equals(this.sellerStockKeepingUnitId, getSKUseller200Response.sellerStockKeepingUnitId) &&
        Objects.equals(this.skuSellerId, getSKUseller200Response.skuSellerId) &&
        Objects.equals(this.stockKeepingUnitId, getSKUseller200Response.stockKeepingUnitId) &&
        Objects.equals(this.updateDate, getSKUseller200Response.updateDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isActive, isPersisted, isRemoved, requestedUpdateDate, sellerId, sellerStockKeepingUnitId, skuSellerId, stockKeepingUnitId, updateDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSKUseller200Response {\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isPersisted: ").append(toIndentedString(isPersisted)).append("\n");
    sb.append("    isRemoved: ").append(toIndentedString(isRemoved)).append("\n");
    sb.append("    requestedUpdateDate: ").append(toIndentedString(requestedUpdateDate)).append("\n");
    sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
    sb.append("    sellerStockKeepingUnitId: ").append(toIndentedString(sellerStockKeepingUnitId)).append("\n");
    sb.append("    skuSellerId: ").append(toIndentedString(skuSellerId)).append("\n");
    sb.append("    stockKeepingUnitId: ").append(toIndentedString(stockKeepingUnitId)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IsActive");
    openapiFields.add("IsPersisted");
    openapiFields.add("IsRemoved");
    openapiFields.add("RequestedUpdateDate");
    openapiFields.add("SellerId");
    openapiFields.add("SellerStockKeepingUnitId");
    openapiFields.add("SkuSellerId");
    openapiFields.add("StockKeepingUnitId");
    openapiFields.add("UpdateDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("IsActive");
    openapiRequiredFields.add("IsPersisted");
    openapiRequiredFields.add("IsRemoved");
    openapiRequiredFields.add("RequestedUpdateDate");
    openapiRequiredFields.add("SellerId");
    openapiRequiredFields.add("SellerStockKeepingUnitId");
    openapiRequiredFields.add("SkuSellerId");
    openapiRequiredFields.add("StockKeepingUnitId");
    openapiRequiredFields.add("UpdateDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSKUseller200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSKUseller200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSKUseller200Response is not found in the empty JSON string", GetSKUseller200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSKUseller200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSKUseller200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSKUseller200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("RequestedUpdateDate") != null && !jsonObj.get("RequestedUpdateDate").isJsonNull()) && !jsonObj.get("RequestedUpdateDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RequestedUpdateDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RequestedUpdateDate").toString()));
      }
      if (!jsonObj.get("SellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SellerId").toString()));
      }
      if (!jsonObj.get("SellerStockKeepingUnitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SellerStockKeepingUnitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SellerStockKeepingUnitId").toString()));
      }
      if (!jsonObj.get("UpdateDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdateDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdateDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSKUseller200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSKUseller200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSKUseller200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSKUseller200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSKUseller200Response>() {
           @Override
           public void write(JsonWriter out, GetSKUseller200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSKUseller200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSKUseller200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSKUseller200Response
   * @throws IOException if the JSON string is invalid with respect to GetSKUseller200Response
   */
  public static GetSKUseller200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSKUseller200Response.class);
  }

  /**
   * Convert an instance of GetSKUseller200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

