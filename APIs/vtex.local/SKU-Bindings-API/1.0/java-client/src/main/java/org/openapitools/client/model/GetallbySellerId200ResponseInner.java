/*
 * SKU Bindings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetallbySellerId200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:18.331288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetallbySellerId200ResponseInner {
  public static final String SERIALIZED_NAME_FREIGHT_COMMISSION_PERCENTAGE = "FreightCommissionPercentage";
  @SerializedName(SERIALIZED_NAME_FREIGHT_COMMISSION_PERCENTAGE)
  private BigDecimal freightCommissionPercentage;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "IsActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_PRODUCT_COMMISSION_PERCENTAGE = "ProductCommissionPercentage";
  @SerializedName(SERIALIZED_NAME_PRODUCT_COMMISSION_PERCENTAGE)
  private BigDecimal productCommissionPercentage;

  public static final String SERIALIZED_NAME_SELLER_ID = "SellerId";
  @SerializedName(SERIALIZED_NAME_SELLER_ID)
  private String sellerId;

  public static final String SERIALIZED_NAME_SELLER_STOCK_KEEPING_UNIT_ID = "SellerStockKeepingUnitId";
  @SerializedName(SERIALIZED_NAME_SELLER_STOCK_KEEPING_UNIT_ID)
  private String sellerStockKeepingUnitId;

  public static final String SERIALIZED_NAME_STOCK_KEEPING_UNIT_ID = "StockKeepingUnitId";
  @SerializedName(SERIALIZED_NAME_STOCK_KEEPING_UNIT_ID)
  private Integer stockKeepingUnitId;

  public GetallbySellerId200ResponseInner() {
  }

  public GetallbySellerId200ResponseInner freightCommissionPercentage(BigDecimal freightCommissionPercentage) {
    this.freightCommissionPercentage = freightCommissionPercentage;
    return this;
  }

  /**
   * The percentage that must be filled in as agreed between the marketplace and the seller.
   * @return freightCommissionPercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getFreightCommissionPercentage() {
    return freightCommissionPercentage;
  }

  public void setFreightCommissionPercentage(BigDecimal freightCommissionPercentage) {
    this.freightCommissionPercentage = freightCommissionPercentage;
  }


  public GetallbySellerId200ResponseInner isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Defines if the SKU binding is active.
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public GetallbySellerId200ResponseInner productCommissionPercentage(BigDecimal productCommissionPercentage) {
    this.productCommissionPercentage = productCommissionPercentage;
    return this;
  }

  /**
   * The percentage that must be filled in as agreed between the marketplace and the seller. If there is no such commission, please fill in the field with the value: &#x60;0.00&#x60;.
   * @return productCommissionPercentage
   */
  @javax.annotation.Nullable
  public BigDecimal getProductCommissionPercentage() {
    return productCommissionPercentage;
  }

  public void setProductCommissionPercentage(BigDecimal productCommissionPercentage) {
    this.productCommissionPercentage = productCommissionPercentage;
  }


  public GetallbySellerId200ResponseInner sellerId(String sellerId) {
    this.sellerId = sellerId;
    return this;
  }

  /**
   * ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
   * @return sellerId
   */
  @javax.annotation.Nullable
  public String getSellerId() {
    return sellerId;
  }

  public void setSellerId(String sellerId) {
    this.sellerId = sellerId;
  }


  public GetallbySellerId200ResponseInner sellerStockKeepingUnitId(String sellerStockKeepingUnitId) {
    this.sellerStockKeepingUnitId = sellerStockKeepingUnitId;
    return this;
  }

  /**
   * SKU ID in the seller&#39;s store.
   * @return sellerStockKeepingUnitId
   */
  @javax.annotation.Nullable
  public String getSellerStockKeepingUnitId() {
    return sellerStockKeepingUnitId;
  }

  public void setSellerStockKeepingUnitId(String sellerStockKeepingUnitId) {
    this.sellerStockKeepingUnitId = sellerStockKeepingUnitId;
  }


  public GetallbySellerId200ResponseInner stockKeepingUnitId(Integer stockKeepingUnitId) {
    this.stockKeepingUnitId = stockKeepingUnitId;
    return this;
  }

  /**
   * SKU ID in the marketplace.
   * @return stockKeepingUnitId
   */
  @javax.annotation.Nullable
  public Integer getStockKeepingUnitId() {
    return stockKeepingUnitId;
  }

  public void setStockKeepingUnitId(Integer stockKeepingUnitId) {
    this.stockKeepingUnitId = stockKeepingUnitId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetallbySellerId200ResponseInner getallbySellerId200ResponseInner = (GetallbySellerId200ResponseInner) o;
    return Objects.equals(this.freightCommissionPercentage, getallbySellerId200ResponseInner.freightCommissionPercentage) &&
        Objects.equals(this.isActive, getallbySellerId200ResponseInner.isActive) &&
        Objects.equals(this.productCommissionPercentage, getallbySellerId200ResponseInner.productCommissionPercentage) &&
        Objects.equals(this.sellerId, getallbySellerId200ResponseInner.sellerId) &&
        Objects.equals(this.sellerStockKeepingUnitId, getallbySellerId200ResponseInner.sellerStockKeepingUnitId) &&
        Objects.equals(this.stockKeepingUnitId, getallbySellerId200ResponseInner.stockKeepingUnitId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(freightCommissionPercentage, isActive, productCommissionPercentage, sellerId, sellerStockKeepingUnitId, stockKeepingUnitId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetallbySellerId200ResponseInner {\n");
    sb.append("    freightCommissionPercentage: ").append(toIndentedString(freightCommissionPercentage)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    productCommissionPercentage: ").append(toIndentedString(productCommissionPercentage)).append("\n");
    sb.append("    sellerId: ").append(toIndentedString(sellerId)).append("\n");
    sb.append("    sellerStockKeepingUnitId: ").append(toIndentedString(sellerStockKeepingUnitId)).append("\n");
    sb.append("    stockKeepingUnitId: ").append(toIndentedString(stockKeepingUnitId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FreightCommissionPercentage");
    openapiFields.add("IsActive");
    openapiFields.add("ProductCommissionPercentage");
    openapiFields.add("SellerId");
    openapiFields.add("SellerStockKeepingUnitId");
    openapiFields.add("StockKeepingUnitId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetallbySellerId200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetallbySellerId200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetallbySellerId200ResponseInner is not found in the empty JSON string", GetallbySellerId200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetallbySellerId200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetallbySellerId200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("SellerId") != null && !jsonObj.get("SellerId").isJsonNull()) && !jsonObj.get("SellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SellerId").toString()));
      }
      if ((jsonObj.get("SellerStockKeepingUnitId") != null && !jsonObj.get("SellerStockKeepingUnitId").isJsonNull()) && !jsonObj.get("SellerStockKeepingUnitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SellerStockKeepingUnitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SellerStockKeepingUnitId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetallbySellerId200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetallbySellerId200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetallbySellerId200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetallbySellerId200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetallbySellerId200ResponseInner>() {
           @Override
           public void write(JsonWriter out, GetallbySellerId200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetallbySellerId200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetallbySellerId200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetallbySellerId200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to GetallbySellerId200ResponseInner
   */
  public static GetallbySellerId200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetallbySellerId200ResponseInner.class);
  }

  /**
   * Convert an instance of GetallbySellerId200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

