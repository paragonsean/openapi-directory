/*
 * SKU Bindings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BindtoanotherskuRequest;
import org.openapitools.client.model.GetSKUseller200Response;
import org.openapitools.client.model.GetallbySellerId200ResponseInner;
import org.openapitools.client.model.GetbySkuId200ResponseInner;
import org.openapitools.client.model.Getpagedadmin200Response;
import org.openapitools.client.model.InsertSKUBindingRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SkuBindingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SkuBindingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SkuBindingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateSKUBinding
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param skuSellerId SKU ID in the seller&#39;s store. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateSKUBindingCall(String contentType, String accept, String sellerId, String skuSellerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sku-binding/pvt/skuseller/activate/{sellerId}/{skuSellerId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()))
            .replace("{" + "skuSellerId" + "}", localVarApiClient.escapeString(skuSellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateSKUBindingValidateBeforeCall(String contentType, String accept, String sellerId, String skuSellerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling activateSKUBinding(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling activateSKUBinding(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling activateSKUBinding(Async)");
        }

        // verify the required parameter 'skuSellerId' is set
        if (skuSellerId == null) {
            throw new ApiException("Missing the required parameter 'skuSellerId' when calling activateSKUBinding(Async)");
        }

        return activateSKUBindingCall(contentType, accept, sellerId, skuSellerId, _callback);

    }

    /**
     * Activate SKU Binding
     * Changes the status of an SKU Binding to active, setting &#x60;isActive&#x60; to &#x60;true&#x60;.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/activate/{sellerId}/{skuSellerId}&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param skuSellerId SKU ID in the seller&#39;s store. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void activateSKUBinding(String contentType, String accept, String sellerId, String skuSellerId) throws ApiException {
        activateSKUBindingWithHttpInfo(contentType, accept, sellerId, skuSellerId);
    }

    /**
     * Activate SKU Binding
     * Changes the status of an SKU Binding to active, setting &#x60;isActive&#x60; to &#x60;true&#x60;.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/activate/{sellerId}/{skuSellerId}&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param skuSellerId SKU ID in the seller&#39;s store. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> activateSKUBindingWithHttpInfo(String contentType, String accept, String sellerId, String skuSellerId) throws ApiException {
        okhttp3.Call localVarCall = activateSKUBindingValidateBeforeCall(contentType, accept, sellerId, skuSellerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activate SKU Binding (asynchronously)
     * Changes the status of an SKU Binding to active, setting &#x60;isActive&#x60; to &#x60;true&#x60;.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/activate/{sellerId}/{skuSellerId}&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param skuSellerId SKU ID in the seller&#39;s store. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateSKUBindingAsync(String contentType, String accept, String sellerId, String skuSellerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateSKUBindingValidateBeforeCall(contentType, accept, sellerId, skuSellerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bindtoanothersku
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (required)
     * @param bindtoanotherskuRequest Request body (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bindtoanotherskuCall(String contentType, String accept, String sellerId, String sellerSkuId, BindtoanotherskuRequest bindtoanotherskuRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bindtoanotherskuRequest;

        // create path and map variables
        String localVarPath = "/sku-binding/pvt/skuseller/{sellerId}/{sellerSkuId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()))
            .replace("{" + "sellerSkuId" + "}", localVarApiClient.escapeString(sellerSkuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bindtoanotherskuValidateBeforeCall(String contentType, String accept, String sellerId, String sellerSkuId, BindtoanotherskuRequest bindtoanotherskuRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling bindtoanothersku(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling bindtoanothersku(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling bindtoanothersku(Async)");
        }

        // verify the required parameter 'sellerSkuId' is set
        if (sellerSkuId == null) {
            throw new ApiException("Missing the required parameter 'sellerSkuId' when calling bindtoanothersku(Async)");
        }

        return bindtoanotherskuCall(contentType, accept, sellerId, sellerSkuId, bindtoanotherskuRequest, _callback);

    }

    /**
     * Bind a seller&#39;s SKU to another SKU
     * Associates a seller&#39;s SKU to another marketplace SKU.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}&#x60;.    ## Request body example    &#x60;&#x60;&#x60;json  {      \&quot;StockKeepingUnitId\&quot;: 1  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (required)
     * @param bindtoanotherskuRequest Request body (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void bindtoanothersku(String contentType, String accept, String sellerId, String sellerSkuId, BindtoanotherskuRequest bindtoanotherskuRequest) throws ApiException {
        bindtoanotherskuWithHttpInfo(contentType, accept, sellerId, sellerSkuId, bindtoanotherskuRequest);
    }

    /**
     * Bind a seller&#39;s SKU to another SKU
     * Associates a seller&#39;s SKU to another marketplace SKU.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}&#x60;.    ## Request body example    &#x60;&#x60;&#x60;json  {      \&quot;StockKeepingUnitId\&quot;: 1  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (required)
     * @param bindtoanotherskuRequest Request body (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bindtoanotherskuWithHttpInfo(String contentType, String accept, String sellerId, String sellerSkuId, BindtoanotherskuRequest bindtoanotherskuRequest) throws ApiException {
        okhttp3.Call localVarCall = bindtoanotherskuValidateBeforeCall(contentType, accept, sellerId, sellerSkuId, bindtoanotherskuRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Bind a seller&#39;s SKU to another SKU (asynchronously)
     * Associates a seller&#39;s SKU to another marketplace SKU.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}&#x60;.    ## Request body example    &#x60;&#x60;&#x60;json  {      \&quot;StockKeepingUnitId\&quot;: 1  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (required)
     * @param bindtoanotherskuRequest Request body (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bindtoanotherskuAsync(String contentType, String accept, String sellerId, String sellerSkuId, BindtoanotherskuRequest bindtoanotherskuRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bindtoanotherskuValidateBeforeCall(contentType, accept, sellerId, sellerSkuId, bindtoanotherskuRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for changeNotification
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param skuId A string that identifies the SKU in the marketplace. This is the ID that the marketplace will use to look for the SKU whose change the seller wants to inform. If the marketplace finds this ID, it responds with status code &#x60;200&#x60;. Otherwise, it responds with status code &#x60;404&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeNotificationCall(String contentType, String accept, String skuId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sku-binding/pvt/skuseller/changenotification/{skuId}"
            .replace("{" + "skuId" + "}", localVarApiClient.escapeString(skuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeNotificationValidateBeforeCall(String contentType, String accept, String skuId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling changeNotification(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling changeNotification(Async)");
        }

        // verify the required parameter 'skuId' is set
        if (skuId == null) {
            throw new ApiException("Missing the required parameter 'skuId' when calling changeNotification(Async)");
        }

        return changeNotificationCall(contentType, accept, skuId, _callback);

    }

    /**
     * Change Notification with SKU ID
     * The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.  With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.  The body of the request should be empty.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/changenotification/{skuId}&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param skuId A string that identifies the SKU in the marketplace. This is the ID that the marketplace will use to look for the SKU whose change the seller wants to inform. If the marketplace finds this ID, it responds with status code &#x60;200&#x60;. Otherwise, it responds with status code &#x60;404&#x60;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public void changeNotification(String contentType, String accept, String skuId) throws ApiException {
        changeNotificationWithHttpInfo(contentType, accept, skuId);
    }

    /**
     * Change Notification with SKU ID
     * The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.  With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.  The body of the request should be empty.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/changenotification/{skuId}&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param skuId A string that identifies the SKU in the marketplace. This is the ID that the marketplace will use to look for the SKU whose change the seller wants to inform. If the marketplace finds this ID, it responds with status code &#x60;200&#x60;. Otherwise, it responds with status code &#x60;404&#x60;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> changeNotificationWithHttpInfo(String contentType, String accept, String skuId) throws ApiException {
        okhttp3.Call localVarCall = changeNotificationValidateBeforeCall(contentType, accept, skuId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change Notification with SKU ID (asynchronously)
     * The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.  With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.  The body of the request should be empty.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/changenotification/{skuId}&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param skuId A string that identifies the SKU in the marketplace. This is the ID that the marketplace will use to look for the SKU whose change the seller wants to inform. If the marketplace finds this ID, it responds with status code &#x60;200&#x60;. Otherwise, it responds with status code &#x60;404&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeNotificationAsync(String contentType, String accept, String skuId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeNotificationValidateBeforeCall(contentType, accept, skuId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deactivateSKUBinding
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param skuSellerId SKU ID in the seller&#39;s store. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deactivateSKUBindingCall(String contentType, String accept, String sellerId, String skuSellerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sku-binding/pvt/skuseller/inactivate/{sellerId}/{skuSellerId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()))
            .replace("{" + "skuSellerId" + "}", localVarApiClient.escapeString(skuSellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateSKUBindingValidateBeforeCall(String contentType, String accept, String sellerId, String skuSellerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deactivateSKUBinding(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deactivateSKUBinding(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling deactivateSKUBinding(Async)");
        }

        // verify the required parameter 'skuSellerId' is set
        if (skuSellerId == null) {
            throw new ApiException("Missing the required parameter 'skuSellerId' when calling deactivateSKUBinding(Async)");
        }

        return deactivateSKUBindingCall(contentType, accept, sellerId, skuSellerId, _callback);

    }

    /**
     * Deactivate SKU Binding
     * Changes the status of an SKU Binding to inactive, setting &#x60;isActive&#x60; to &#x60;false&#x60;.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/inactivate/{sellerId}/{skuSellerId}&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param skuSellerId SKU ID in the seller&#39;s store. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deactivateSKUBinding(String contentType, String accept, String sellerId, String skuSellerId) throws ApiException {
        deactivateSKUBindingWithHttpInfo(contentType, accept, sellerId, skuSellerId);
    }

    /**
     * Deactivate SKU Binding
     * Changes the status of an SKU Binding to inactive, setting &#x60;isActive&#x60; to &#x60;false&#x60;.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/inactivate/{sellerId}/{skuSellerId}&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param skuSellerId SKU ID in the seller&#39;s store. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deactivateSKUBindingWithHttpInfo(String contentType, String accept, String sellerId, String skuSellerId) throws ApiException {
        okhttp3.Call localVarCall = deactivateSKUBindingValidateBeforeCall(contentType, accept, sellerId, skuSellerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deactivate SKU Binding (asynchronously)
     * Changes the status of an SKU Binding to inactive, setting &#x60;isActive&#x60; to &#x60;false&#x60;.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/inactivate/{sellerId}/{skuSellerId}&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param skuSellerId SKU ID in the seller&#39;s store. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deactivateSKUBindingAsync(String contentType, String accept, String sellerId, String skuSellerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateSKUBindingValidateBeforeCall(contentType, accept, sellerId, skuSellerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSKUsellerassociation
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSKUsellerassociationCall(String contentType, String accept, String sellerId, String sellerSkuId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sku-binding/pvt/skuseller/remove/{sellerId}/{sellerSkuId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()))
            .replace("{" + "sellerSkuId" + "}", localVarApiClient.escapeString(sellerSkuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSKUsellerassociationValidateBeforeCall(String contentType, String accept, String sellerId, String sellerSkuId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteSKUsellerassociation(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deleteSKUsellerassociation(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling deleteSKUsellerassociation(Async)");
        }

        // verify the required parameter 'sellerSkuId' is set
        if (sellerSkuId == null) {
            throw new ApiException("Missing the required parameter 'sellerSkuId' when calling deleteSKUsellerassociation(Async)");
        }

        return deleteSKUsellerassociationCall(contentType, accept, sellerId, sellerSkuId, _callback);

    }

    /**
     * Remove a seller&#39;s SKU Binding
     * Remove a seller&#39;s SKU binding, given the Seller ID and the SKU ID in the seller&#39;s store.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/remove/{sellerId}/{sellerSkuId}&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSKUsellerassociation(String contentType, String accept, String sellerId, String sellerSkuId) throws ApiException {
        deleteSKUsellerassociationWithHttpInfo(contentType, accept, sellerId, sellerSkuId);
    }

    /**
     * Remove a seller&#39;s SKU Binding
     * Remove a seller&#39;s SKU binding, given the Seller ID and the SKU ID in the seller&#39;s store.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/remove/{sellerId}/{sellerSkuId}&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSKUsellerassociationWithHttpInfo(String contentType, String accept, String sellerId, String sellerSkuId) throws ApiException {
        okhttp3.Call localVarCall = deleteSKUsellerassociationValidateBeforeCall(contentType, accept, sellerId, sellerSkuId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a seller&#39;s SKU Binding (asynchronously)
     * Remove a seller&#39;s SKU binding, given the Seller ID and the SKU ID in the seller&#39;s store.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/remove/{sellerId}/{sellerSkuId}&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSKUsellerassociationAsync(String contentType, String accept, String sellerId, String sellerSkuId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSKUsellerassociationValidateBeforeCall(contentType, accept, sellerId, sellerSkuId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSKUseller
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSKUsellerCall(String contentType, String accept, String sellerId, String sellerSkuId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sku-binding/pvt/skuseller/{sellerId}/{sellerSkuId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()))
            .replace("{" + "sellerSkuId" + "}", localVarApiClient.escapeString(sellerSkuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSKUsellerValidateBeforeCall(String contentType, String accept, String sellerId, String sellerSkuId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getSKUseller(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getSKUseller(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getSKUseller(Async)");
        }

        // verify the required parameter 'sellerSkuId' is set
        if (sellerSkuId == null) {
            throw new ApiException("Missing the required parameter 'sellerSkuId' when calling getSKUseller(Async)");
        }

        return getSKUsellerCall(contentType, accept, sellerId, sellerSkuId, _callback);

    }

    /**
     * Get details of a seller&#39;s SKU
     * Retrieves the details of a seller&#39;s SKU given a seller ID and the SKU ID in the seller&#39;s store.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;IsPersisted\&quot;: true,      \&quot;IsRemoved\&quot;: false,      \&quot;SkuSellerId\&quot;: 102,      \&quot;UpdateDate\&quot;: \&quot;2021-04-12T20:06:59.413Z\&quot;,      \&quot;RequestedUpdateDate\&quot;: null,      \&quot;SellerStockKeepingUnitId\&quot;: \&quot;71\&quot;,      \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,      \&quot;StockKeepingUnitId\&quot;: 1,      \&quot;IsActive\&quot;: true  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (required)
     * @return GetSKUseller200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetSKUseller200Response getSKUseller(String contentType, String accept, String sellerId, String sellerSkuId) throws ApiException {
        ApiResponse<GetSKUseller200Response> localVarResp = getSKUsellerWithHttpInfo(contentType, accept, sellerId, sellerSkuId);
        return localVarResp.getData();
    }

    /**
     * Get details of a seller&#39;s SKU
     * Retrieves the details of a seller&#39;s SKU given a seller ID and the SKU ID in the seller&#39;s store.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;IsPersisted\&quot;: true,      \&quot;IsRemoved\&quot;: false,      \&quot;SkuSellerId\&quot;: 102,      \&quot;UpdateDate\&quot;: \&quot;2021-04-12T20:06:59.413Z\&quot;,      \&quot;RequestedUpdateDate\&quot;: null,      \&quot;SellerStockKeepingUnitId\&quot;: \&quot;71\&quot;,      \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,      \&quot;StockKeepingUnitId\&quot;: 1,      \&quot;IsActive\&quot;: true  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (required)
     * @return ApiResponse&lt;GetSKUseller200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSKUseller200Response> getSKUsellerWithHttpInfo(String contentType, String accept, String sellerId, String sellerSkuId) throws ApiException {
        okhttp3.Call localVarCall = getSKUsellerValidateBeforeCall(contentType, accept, sellerId, sellerSkuId, null);
        Type localVarReturnType = new TypeToken<GetSKUseller200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of a seller&#39;s SKU (asynchronously)
     * Retrieves the details of a seller&#39;s SKU given a seller ID and the SKU ID in the seller&#39;s store.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;IsPersisted\&quot;: true,      \&quot;IsRemoved\&quot;: false,      \&quot;SkuSellerId\&quot;: 102,      \&quot;UpdateDate\&quot;: \&quot;2021-04-12T20:06:59.413Z\&quot;,      \&quot;RequestedUpdateDate\&quot;: null,      \&quot;SellerStockKeepingUnitId\&quot;: \&quot;71\&quot;,      \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,      \&quot;StockKeepingUnitId\&quot;: 1,      \&quot;IsActive\&quot;: true  }  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSKUsellerAsync(String contentType, String accept, String sellerId, String sellerSkuId, final ApiCallback<GetSKUseller200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSKUsellerValidateBeforeCall(contentType, accept, sellerId, sellerSkuId, _callback);
        Type localVarReturnType = new TypeToken<GetSKUseller200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getallbySellerId
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getallbySellerIdCall(String contentType, String accept, String sellerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sku-binding/pvt/skuseller/list/bysellerId/{sellerId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getallbySellerIdValidateBeforeCall(String contentType, String accept, String sellerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getallbySellerId(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getallbySellerId(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getallbySellerId(Async)");
        }

        return getallbySellerIdCall(contentType, accept, sellerId, _callback);

    }

    /**
     * Get all SKU Bindings by Seller ID
     * Retrieves a list of SKU Bindings given a specific Seller ID.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/list/bysellerId/{sellerId}&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;24\&quot;,          \&quot;FreightCommissionPercentage\&quot;: null,          \&quot;ProductCommissionPercentage\&quot;: null,          \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,          \&quot;StockKeepingUnitId\&quot;: 121,          \&quot;IsActive\&quot;: true      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @return List&lt;GetallbySellerId200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<GetallbySellerId200ResponseInner> getallbySellerId(String contentType, String accept, String sellerId) throws ApiException {
        ApiResponse<List<GetallbySellerId200ResponseInner>> localVarResp = getallbySellerIdWithHttpInfo(contentType, accept, sellerId);
        return localVarResp.getData();
    }

    /**
     * Get all SKU Bindings by Seller ID
     * Retrieves a list of SKU Bindings given a specific Seller ID.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/list/bysellerId/{sellerId}&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;24\&quot;,          \&quot;FreightCommissionPercentage\&quot;: null,          \&quot;ProductCommissionPercentage\&quot;: null,          \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,          \&quot;StockKeepingUnitId\&quot;: 121,          \&quot;IsActive\&quot;: true      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @return ApiResponse&lt;List&lt;GetallbySellerId200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetallbySellerId200ResponseInner>> getallbySellerIdWithHttpInfo(String contentType, String accept, String sellerId) throws ApiException {
        okhttp3.Call localVarCall = getallbySellerIdValidateBeforeCall(contentType, accept, sellerId, null);
        Type localVarReturnType = new TypeToken<List<GetallbySellerId200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all SKU Bindings by Seller ID (asynchronously)
     * Retrieves a list of SKU Bindings given a specific Seller ID.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/list/bysellerId/{sellerId}&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;24\&quot;,          \&quot;FreightCommissionPercentage\&quot;: null,          \&quot;ProductCommissionPercentage\&quot;: null,          \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,          \&quot;StockKeepingUnitId\&quot;: 121,          \&quot;IsActive\&quot;: true      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getallbySellerIdAsync(String contentType, String accept, String sellerId, final ApiCallback<List<GetallbySellerId200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getallbySellerIdValidateBeforeCall(contentType, accept, sellerId, _callback);
        Type localVarReturnType = new TypeToken<List<GetallbySellerId200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getbySkuId
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param skuId SKU&#39;s unique identifier in the marketplace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getbySkuIdCall(String contentType, String accept, String skuId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/catalog/pvt/skusellers/{skuId}"
            .replace("{" + "skuId" + "}", localVarApiClient.escapeString(skuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getbySkuIdValidateBeforeCall(String contentType, String accept, String skuId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getbySkuId(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getbySkuId(Async)");
        }

        // verify the required parameter 'skuId' is set
        if (skuId == null) {
            throw new ApiException("Missing the required parameter 'skuId' when calling getbySkuId(Async)");
        }

        return getbySkuIdCall(contentType, accept, skuId, _callback);

    }

    /**
     * Get SKU Bindings by SKU ID
     * Retrieves SKU Bindings details by SKU ID.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;Id\&quot;: 48,          \&quot;SellerId\&quot;: \&quot;cosmetics1\&quot;,          \&quot;StockKeepingUnitId\&quot;: 1,          \&quot;SellerSkuId\&quot;: \&quot;42\&quot;,          \&quot;IsActive\&quot;: true,          \&quot;LastUpdateDate\&quot;: \&quot;2020-10-21T19:13:00.657\&quot;,          \&quot;SalesPolicy\&quot;: 0      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param skuId SKU&#39;s unique identifier in the marketplace. (required)
     * @return List&lt;GetbySkuId200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<GetbySkuId200ResponseInner> getbySkuId(String contentType, String accept, String skuId) throws ApiException {
        ApiResponse<List<GetbySkuId200ResponseInner>> localVarResp = getbySkuIdWithHttpInfo(contentType, accept, skuId);
        return localVarResp.getData();
    }

    /**
     * Get SKU Bindings by SKU ID
     * Retrieves SKU Bindings details by SKU ID.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;Id\&quot;: 48,          \&quot;SellerId\&quot;: \&quot;cosmetics1\&quot;,          \&quot;StockKeepingUnitId\&quot;: 1,          \&quot;SellerSkuId\&quot;: \&quot;42\&quot;,          \&quot;IsActive\&quot;: true,          \&quot;LastUpdateDate\&quot;: \&quot;2020-10-21T19:13:00.657\&quot;,          \&quot;SalesPolicy\&quot;: 0      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param skuId SKU&#39;s unique identifier in the marketplace. (required)
     * @return ApiResponse&lt;List&lt;GetbySkuId200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetbySkuId200ResponseInner>> getbySkuIdWithHttpInfo(String contentType, String accept, String skuId) throws ApiException {
        okhttp3.Call localVarCall = getbySkuIdValidateBeforeCall(contentType, accept, skuId, null);
        Type localVarReturnType = new TypeToken<List<GetbySkuId200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SKU Bindings by SKU ID (asynchronously)
     * Retrieves SKU Bindings details by SKU ID.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;Id\&quot;: 48,          \&quot;SellerId\&quot;: \&quot;cosmetics1\&quot;,          \&quot;StockKeepingUnitId\&quot;: 1,          \&quot;SellerSkuId\&quot;: \&quot;42\&quot;,          \&quot;IsActive\&quot;: true,          \&quot;LastUpdateDate\&quot;: \&quot;2020-10-21T19:13:00.657\&quot;,          \&quot;SalesPolicy\&quot;: 0      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param skuId SKU&#39;s unique identifier in the marketplace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getbySkuIdAsync(String contentType, String accept, String skuId, final ApiCallback<List<GetbySkuId200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getbySkuIdValidateBeforeCall(contentType, accept, skuId, _callback);
        Type localVarReturnType = new TypeToken<List<GetbySkuId200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getpagedadmin
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (optional)
     * @param skuId SKU&#39;s unique identifier in the marketplace. (optional)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (optional)
     * @param isActive Defines if the SKU binding is active. (optional)
     * @param size Amount of results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getpagedadminCall(String contentType, String accept, String sellerId, String skuId, String sellerSkuId, Boolean isActive, String size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sku-binding/pvt/skuseller/admin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerId", sellerId));
        }

        if (skuId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skuId", skuId));
        }

        if (sellerSkuId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerSkuId", sellerSkuId));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getpagedadminValidateBeforeCall(String contentType, String accept, String sellerId, String skuId, String sellerSkuId, Boolean isActive, String size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getpagedadmin(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getpagedadmin(Async)");
        }

        return getpagedadminCall(contentType, accept, sellerId, skuId, sellerSkuId, isActive, size, _callback);

    }

    /**
     * Get SKU Bindings information
     * Retrieves SKU Bindings administrative information using optional query params &#x60;sellerId&#x60;, &#x60;skuId&#x60;, &#x60;sellerSkuId&#x60; and &#x60;IsActive&#x60; to filter results and &#x60;size&#x60; to restrict the amount of results.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/admin&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;IsPersisted\&quot;: true,          \&quot;IsRemoved\&quot;: false,          \&quot;SkuSellerId\&quot;: 1,          \&quot;UpdateDate\&quot;: \&quot;2019-12-04T01:56:00.673Z\&quot;,          \&quot;RequestedUpdateDate\&quot;: null,          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;12\&quot;,          \&quot;SellerId\&quot;: \&quot;cosmetics1\&quot;,          \&quot;StockKeepingUnitId\&quot;: 25,          \&quot;IsActive\&quot;: true      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (optional)
     * @param skuId SKU&#39;s unique identifier in the marketplace. (optional)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (optional)
     * @param isActive Defines if the SKU binding is active. (optional)
     * @param size Amount of results. (optional)
     * @return Getpagedadmin200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Getpagedadmin200Response getpagedadmin(String contentType, String accept, String sellerId, String skuId, String sellerSkuId, Boolean isActive, String size) throws ApiException {
        ApiResponse<Getpagedadmin200Response> localVarResp = getpagedadminWithHttpInfo(contentType, accept, sellerId, skuId, sellerSkuId, isActive, size);
        return localVarResp.getData();
    }

    /**
     * Get SKU Bindings information
     * Retrieves SKU Bindings administrative information using optional query params &#x60;sellerId&#x60;, &#x60;skuId&#x60;, &#x60;sellerSkuId&#x60; and &#x60;IsActive&#x60; to filter results and &#x60;size&#x60; to restrict the amount of results.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/admin&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;IsPersisted\&quot;: true,          \&quot;IsRemoved\&quot;: false,          \&quot;SkuSellerId\&quot;: 1,          \&quot;UpdateDate\&quot;: \&quot;2019-12-04T01:56:00.673Z\&quot;,          \&quot;RequestedUpdateDate\&quot;: null,          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;12\&quot;,          \&quot;SellerId\&quot;: \&quot;cosmetics1\&quot;,          \&quot;StockKeepingUnitId\&quot;: 25,          \&quot;IsActive\&quot;: true      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (optional)
     * @param skuId SKU&#39;s unique identifier in the marketplace. (optional)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (optional)
     * @param isActive Defines if the SKU binding is active. (optional)
     * @param size Amount of results. (optional)
     * @return ApiResponse&lt;Getpagedadmin200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Getpagedadmin200Response> getpagedadminWithHttpInfo(String contentType, String accept, String sellerId, String skuId, String sellerSkuId, Boolean isActive, String size) throws ApiException {
        okhttp3.Call localVarCall = getpagedadminValidateBeforeCall(contentType, accept, sellerId, skuId, sellerSkuId, isActive, size, null);
        Type localVarReturnType = new TypeToken<Getpagedadmin200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get SKU Bindings information (asynchronously)
     * Retrieves SKU Bindings administrative information using optional query params &#x60;sellerId&#x60;, &#x60;skuId&#x60;, &#x60;sellerSkuId&#x60; and &#x60;IsActive&#x60; to filter results and &#x60;size&#x60; to restrict the amount of results.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/admin&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;IsPersisted\&quot;: true,          \&quot;IsRemoved\&quot;: false,          \&quot;SkuSellerId\&quot;: 1,          \&quot;UpdateDate\&quot;: \&quot;2019-12-04T01:56:00.673Z\&quot;,          \&quot;RequestedUpdateDate\&quot;: null,          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;12\&quot;,          \&quot;SellerId\&quot;: \&quot;cosmetics1\&quot;,          \&quot;StockKeepingUnitId\&quot;: 25,          \&quot;IsActive\&quot;: true      }  ]  &#x60;&#x60;&#x60;
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (optional)
     * @param skuId SKU&#39;s unique identifier in the marketplace. (optional)
     * @param sellerSkuId SKU ID in the seller&#39;s store. (optional)
     * @param isActive Defines if the SKU binding is active. (optional)
     * @param size Amount of results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getpagedadminAsync(String contentType, String accept, String sellerId, String skuId, String sellerSkuId, Boolean isActive, String size, final ApiCallback<Getpagedadmin200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getpagedadminValidateBeforeCall(contentType, accept, sellerId, skuId, sellerSkuId, isActive, size, _callback);
        Type localVarReturnType = new TypeToken<Getpagedadmin200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getpagedbySellerId
     * @param page Page number. (required)
     * @param size Amount of results per page. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getpagedbySellerIdCall(String page, String size, String contentType, String accept, String sellerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sku-binding/pvt/skuseller/paged/sellerid/{sellerId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getpagedbySellerIdValidateBeforeCall(String page, String size, String contentType, String accept, String sellerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getpagedbySellerId(Async)");
        }

        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling getpagedbySellerId(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getpagedbySellerId(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getpagedbySellerId(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getpagedbySellerId(Async)");
        }

        return getpagedbySellerIdCall(page, size, contentType, accept, sellerId, _callback);

    }

    /**
     * Get paged SKU Bindings by Seller ID
     * Retrieves a paged list of SKU Bindings given a specific Seller ID.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/paged/sellerid/{sellerId}&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,          \&quot;StockKeepingUnitId\&quot;: 121,          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;24\&quot;,          \&quot;IsActive\&quot;: true,          \&quot;FreightCommissionPercentage\&quot;: null,          \&quot;ProductCommissionPercentage\&quot;: null      },      {          \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,          \&quot;StockKeepingUnitId\&quot;: 14,          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;60\&quot;,          \&quot;IsActive\&quot;: true,          \&quot;FreightCommissionPercentage\&quot;: null,          \&quot;ProductCommissionPercentage\&quot;: null      }  ]  &#x60;&#x60;&#x60;
     * @param page Page number. (required)
     * @param size Amount of results per page. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @return List&lt;GetallbySellerId200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<GetallbySellerId200ResponseInner> getpagedbySellerId(String page, String size, String contentType, String accept, String sellerId) throws ApiException {
        ApiResponse<List<GetallbySellerId200ResponseInner>> localVarResp = getpagedbySellerIdWithHttpInfo(page, size, contentType, accept, sellerId);
        return localVarResp.getData();
    }

    /**
     * Get paged SKU Bindings by Seller ID
     * Retrieves a paged list of SKU Bindings given a specific Seller ID.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/paged/sellerid/{sellerId}&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,          \&quot;StockKeepingUnitId\&quot;: 121,          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;24\&quot;,          \&quot;IsActive\&quot;: true,          \&quot;FreightCommissionPercentage\&quot;: null,          \&quot;ProductCommissionPercentage\&quot;: null      },      {          \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,          \&quot;StockKeepingUnitId\&quot;: 14,          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;60\&quot;,          \&quot;IsActive\&quot;: true,          \&quot;FreightCommissionPercentage\&quot;: null,          \&quot;ProductCommissionPercentage\&quot;: null      }  ]  &#x60;&#x60;&#x60;
     * @param page Page number. (required)
     * @param size Amount of results per page. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @return ApiResponse&lt;List&lt;GetallbySellerId200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetallbySellerId200ResponseInner>> getpagedbySellerIdWithHttpInfo(String page, String size, String contentType, String accept, String sellerId) throws ApiException {
        okhttp3.Call localVarCall = getpagedbySellerIdValidateBeforeCall(page, size, contentType, accept, sellerId, null);
        Type localVarReturnType = new TypeToken<List<GetallbySellerId200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get paged SKU Bindings by Seller ID (asynchronously)
     * Retrieves a paged list of SKU Bindings given a specific Seller ID.      &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/paged/sellerid/{sellerId}&#x60;.    ## Response body example    &#x60;&#x60;&#x60;json  [      {          \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,          \&quot;StockKeepingUnitId\&quot;: 121,          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;24\&quot;,          \&quot;IsActive\&quot;: true,          \&quot;FreightCommissionPercentage\&quot;: null,          \&quot;ProductCommissionPercentage\&quot;: null      },      {          \&quot;SellerId\&quot;: \&quot;vtxkfj7352\&quot;,          \&quot;StockKeepingUnitId\&quot;: 14,          \&quot;SellerStockKeepingUnitId\&quot;: \&quot;60\&quot;,          \&quot;IsActive\&quot;: true,          \&quot;FreightCommissionPercentage\&quot;: null,          \&quot;ProductCommissionPercentage\&quot;: null      }  ]  &#x60;&#x60;&#x60;
     * @param page Page number. (required)
     * @param size Amount of results per page. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getpagedbySellerIdAsync(String page, String size, String contentType, String accept, String sellerId, final ApiCallback<List<GetallbySellerId200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getpagedbySellerIdValidateBeforeCall(page, size, contentType, accept, sellerId, _callback);
        Type localVarReturnType = new TypeToken<List<GetallbySellerId200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for insertSKUBinding
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param insertSKUBindingRequest Request body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertSKUBindingCall(String contentType, String accept, InsertSKUBindingRequest insertSKUBindingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = insertSKUBindingRequest;

        // create path and map variables
        String localVarPath = "/sku-binding/pvt/skuseller/insertion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call insertSKUBindingValidateBeforeCall(String contentType, String accept, InsertSKUBindingRequest insertSKUBindingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling insertSKUBinding(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling insertSKUBinding(Async)");
        }

        // verify the required parameter 'insertSKUBindingRequest' is set
        if (insertSKUBindingRequest == null) {
            throw new ApiException("Missing the required parameter 'insertSKUBindingRequest' when calling insertSKUBinding(Async)");
        }

        return insertSKUBindingCall(contentType, accept, insertSKUBindingRequest, _callback);

    }

    /**
     * Insert SKU Binding
     * Creates an SKU Binding, associating a seller&#39;s SKU with a marketplace&#39;s SKU.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/insertion&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param insertSKUBindingRequest Request body (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void insertSKUBinding(String contentType, String accept, InsertSKUBindingRequest insertSKUBindingRequest) throws ApiException {
        insertSKUBindingWithHttpInfo(contentType, accept, insertSKUBindingRequest);
    }

    /**
     * Insert SKU Binding
     * Creates an SKU Binding, associating a seller&#39;s SKU with a marketplace&#39;s SKU.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/insertion&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param insertSKUBindingRequest Request body (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> insertSKUBindingWithHttpInfo(String contentType, String accept, InsertSKUBindingRequest insertSKUBindingRequest) throws ApiException {
        okhttp3.Call localVarCall = insertSKUBindingValidateBeforeCall(contentType, accept, insertSKUBindingRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Insert SKU Binding (asynchronously)
     * Creates an SKU Binding, associating a seller&#39;s SKU with a marketplace&#39;s SKU.     &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/insertion&#x60;.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param insertSKUBindingRequest Request body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertSKUBindingAsync(String contentType, String accept, InsertSKUBindingRequest insertSKUBindingRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = insertSKUBindingValidateBeforeCall(contentType, accept, insertSKUBindingRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPost
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId ID of the binding of the seller with the SKU. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostCall(String contentType, String accept, String sellerId, String sellerSkuId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sku-binding/pvt/skuseller/changenotification/{sellerId}/{sellerSkuId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()))
            .replace("{" + "sellerSkuId" + "}", localVarApiClient.escapeString(sellerSkuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostValidateBeforeCall(String contentType, String accept, String sellerId, String sellerSkuId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPost(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPost(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPost(Async)");
        }

        // verify the required parameter 'sellerSkuId' is set
        if (sellerSkuId == null) {
            throw new ApiException("Missing the required parameter 'sellerSkuId' when calling skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPost(Async)");
        }

        return skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostCall(contentType, accept, sellerId, sellerSkuId, _callback);

    }

    /**
     * Change Notification with Seller ID and Seller SKU ID
     * The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.  With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.  There are two information expected by the marketplace in this request: the &#x60;sellerId&#x60;, which identifies the seller, and the &#x60;sellerSkuId&#x60;, which identifies the binding of the seller with the SKU.  Both information are passed through the request URL. The body of the request should be empty.   &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/changenotification/{sellerId}/{sellerSkuId}&#x60;.    ## Example    Let&#39;s say your seller has the ID &#x60;123&#x60; in the marketplace and you want to inform the marketplace that has been a change in the SKU with ID &#x60;700&#x60;.    In this case, you would have to replace the &#x60;sellerId&#x60; parameter with the value &#x60;123&#x60; and the &#x60;skuId&#x60; parameter with the value &#x60;700&#x60;. The URL of the request would be the following.    &#x60;&#x60;&#x60;  https://{{accountName}}.vtexcommercestable.com.br/api/sku-binding/pvt/skuseller/changenotification/123/700  &#x60;&#x60;&#x60;    ## Response codes    The following response codes are possible for this request.  * 200: the SKU whose ID was informed in the URL already exists in the marketplace and was found. The marketplace can now proceed with a fulfillment simulation in order to get updated information about this SKU&#39;s inventory and price.  * 403: Failure in the authentication.  * 404: the SKU was not found in the marketplace. The body of the response, in this case, should follow this format: \&quot;Seller StockKeepingUnit &#x60;{{skuId}}&#x60; not found for this seller id &#x60;{{sellerId}}&#x60;. This means that the seller can now proceed with sending an offer to the marketplace in order to suggest that this SKU is sold there.  * 429: Failure due to too many requests.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId ID of the binding of the seller with the SKU. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public void skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPost(String contentType, String accept, String sellerId, String sellerSkuId) throws ApiException {
        skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostWithHttpInfo(contentType, accept, sellerId, sellerSkuId);
    }

    /**
     * Change Notification with Seller ID and Seller SKU ID
     * The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.  With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.  There are two information expected by the marketplace in this request: the &#x60;sellerId&#x60;, which identifies the seller, and the &#x60;sellerSkuId&#x60;, which identifies the binding of the seller with the SKU.  Both information are passed through the request URL. The body of the request should be empty.   &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/changenotification/{sellerId}/{sellerSkuId}&#x60;.    ## Example    Let&#39;s say your seller has the ID &#x60;123&#x60; in the marketplace and you want to inform the marketplace that has been a change in the SKU with ID &#x60;700&#x60;.    In this case, you would have to replace the &#x60;sellerId&#x60; parameter with the value &#x60;123&#x60; and the &#x60;skuId&#x60; parameter with the value &#x60;700&#x60;. The URL of the request would be the following.    &#x60;&#x60;&#x60;  https://{{accountName}}.vtexcommercestable.com.br/api/sku-binding/pvt/skuseller/changenotification/123/700  &#x60;&#x60;&#x60;    ## Response codes    The following response codes are possible for this request.  * 200: the SKU whose ID was informed in the URL already exists in the marketplace and was found. The marketplace can now proceed with a fulfillment simulation in order to get updated information about this SKU&#39;s inventory and price.  * 403: Failure in the authentication.  * 404: the SKU was not found in the marketplace. The body of the response, in this case, should follow this format: \&quot;Seller StockKeepingUnit &#x60;{{skuId}}&#x60; not found for this seller id &#x60;{{sellerId}}&#x60;. This means that the seller can now proceed with sending an offer to the marketplace in order to suggest that this SKU is sold there.  * 429: Failure due to too many requests.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId ID of the binding of the seller with the SKU. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostWithHttpInfo(String contentType, String accept, String sellerId, String sellerSkuId) throws ApiException {
        okhttp3.Call localVarCall = skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostValidateBeforeCall(contentType, accept, sellerId, sellerSkuId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Change Notification with Seller ID and Seller SKU ID (asynchronously)
     * The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.  With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.  There are two information expected by the marketplace in this request: the &#x60;sellerId&#x60;, which identifies the seller, and the &#x60;sellerSkuId&#x60;, which identifies the binding of the seller with the SKU.  Both information are passed through the request URL. The body of the request should be empty.   &gt; ℹ This path is an updated version of &#x60;/api/catalog_system/pvt/skuseller/changenotification/{sellerId}/{sellerSkuId}&#x60;.    ## Example    Let&#39;s say your seller has the ID &#x60;123&#x60; in the marketplace and you want to inform the marketplace that has been a change in the SKU with ID &#x60;700&#x60;.    In this case, you would have to replace the &#x60;sellerId&#x60; parameter with the value &#x60;123&#x60; and the &#x60;skuId&#x60; parameter with the value &#x60;700&#x60;. The URL of the request would be the following.    &#x60;&#x60;&#x60;  https://{{accountName}}.vtexcommercestable.com.br/api/sku-binding/pvt/skuseller/changenotification/123/700  &#x60;&#x60;&#x60;    ## Response codes    The following response codes are possible for this request.  * 200: the SKU whose ID was informed in the URL already exists in the marketplace and was found. The marketplace can now proceed with a fulfillment simulation in order to get updated information about this SKU&#39;s inventory and price.  * 403: Failure in the authentication.  * 404: the SKU was not found in the marketplace. The body of the response, in this case, should follow this format: \&quot;Seller StockKeepingUnit &#x60;{{skuId}}&#x60; not found for this seller id &#x60;{{sellerId}}&#x60;. This means that the seller can now proceed with sending an offer to the marketplace in order to suggest that this SKU is sold there.  * 429: Failure due to too many requests.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID. (required)
     * @param sellerSkuId ID of the binding of the seller with the SKU. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostAsync(String contentType, String accept, String sellerId, String sellerSkuId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostValidateBeforeCall(contentType, accept, sellerId, sellerSkuId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
