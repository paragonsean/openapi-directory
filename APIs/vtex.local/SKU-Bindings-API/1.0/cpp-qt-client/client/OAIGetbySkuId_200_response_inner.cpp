/**
 * SKU Bindings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetbySkuId_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetbySkuId_200_response_inner::OAIGetbySkuId_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetbySkuId_200_response_inner::OAIGetbySkuId_200_response_inner() {
    this->initializeModel();
}

OAIGetbySkuId_200_response_inner::~OAIGetbySkuId_200_response_inner() {}

void OAIGetbySkuId_200_response_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_last_update_date_isSet = false;
    m_last_update_date_isValid = false;

    m_sales_policy_isSet = false;
    m_sales_policy_isValid = false;

    m_seller_id_isSet = false;
    m_seller_id_isValid = false;

    m_seller_sku_id_isSet = false;
    m_seller_sku_id_isValid = false;

    m_stock_keeping_unit_id_isSet = false;
    m_stock_keeping_unit_id_isValid = false;
}

void OAIGetbySkuId_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetbySkuId_200_response_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("IsActive")]);
    m_is_active_isSet = !json[QString("IsActive")].isNull() && m_is_active_isValid;

    m_last_update_date_isValid = ::OpenAPI::fromJsonValue(m_last_update_date, json[QString("LastUpdateDate")]);
    m_last_update_date_isSet = !json[QString("LastUpdateDate")].isNull() && m_last_update_date_isValid;

    m_sales_policy_isValid = ::OpenAPI::fromJsonValue(m_sales_policy, json[QString("SalesPolicy")]);
    m_sales_policy_isSet = !json[QString("SalesPolicy")].isNull() && m_sales_policy_isValid;

    m_seller_id_isValid = ::OpenAPI::fromJsonValue(m_seller_id, json[QString("SellerId")]);
    m_seller_id_isSet = !json[QString("SellerId")].isNull() && m_seller_id_isValid;

    m_seller_sku_id_isValid = ::OpenAPI::fromJsonValue(m_seller_sku_id, json[QString("SellerSkuId")]);
    m_seller_sku_id_isSet = !json[QString("SellerSkuId")].isNull() && m_seller_sku_id_isValid;

    m_stock_keeping_unit_id_isValid = ::OpenAPI::fromJsonValue(m_stock_keeping_unit_id, json[QString("StockKeepingUnitId")]);
    m_stock_keeping_unit_id_isSet = !json[QString("StockKeepingUnitId")].isNull() && m_stock_keeping_unit_id_isValid;
}

QString OAIGetbySkuId_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetbySkuId_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("IsActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_last_update_date_isSet) {
        obj.insert(QString("LastUpdateDate"), ::OpenAPI::toJsonValue(m_last_update_date));
    }
    if (m_sales_policy_isSet) {
        obj.insert(QString("SalesPolicy"), ::OpenAPI::toJsonValue(m_sales_policy));
    }
    if (m_seller_id_isSet) {
        obj.insert(QString("SellerId"), ::OpenAPI::toJsonValue(m_seller_id));
    }
    if (m_seller_sku_id_isSet) {
        obj.insert(QString("SellerSkuId"), ::OpenAPI::toJsonValue(m_seller_sku_id));
    }
    if (m_stock_keeping_unit_id_isSet) {
        obj.insert(QString("StockKeepingUnitId"), ::OpenAPI::toJsonValue(m_stock_keeping_unit_id));
    }
    return obj;
}

qint32 OAIGetbySkuId_200_response_inner::getId() const {
    return m_id;
}
void OAIGetbySkuId_200_response_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetbySkuId_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetbySkuId_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIGetbySkuId_200_response_inner::isIsActive() const {
    return m_is_active;
}
void OAIGetbySkuId_200_response_inner::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIGetbySkuId_200_response_inner::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIGetbySkuId_200_response_inner::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIGetbySkuId_200_response_inner::getLastUpdateDate() const {
    return m_last_update_date;
}
void OAIGetbySkuId_200_response_inner::setLastUpdateDate(const QString &last_update_date) {
    m_last_update_date = last_update_date;
    m_last_update_date_isSet = true;
}

bool OAIGetbySkuId_200_response_inner::is_last_update_date_Set() const{
    return m_last_update_date_isSet;
}

bool OAIGetbySkuId_200_response_inner::is_last_update_date_Valid() const{
    return m_last_update_date_isValid;
}

qint32 OAIGetbySkuId_200_response_inner::getSalesPolicy() const {
    return m_sales_policy;
}
void OAIGetbySkuId_200_response_inner::setSalesPolicy(const qint32 &sales_policy) {
    m_sales_policy = sales_policy;
    m_sales_policy_isSet = true;
}

bool OAIGetbySkuId_200_response_inner::is_sales_policy_Set() const{
    return m_sales_policy_isSet;
}

bool OAIGetbySkuId_200_response_inner::is_sales_policy_Valid() const{
    return m_sales_policy_isValid;
}

QString OAIGetbySkuId_200_response_inner::getSellerId() const {
    return m_seller_id;
}
void OAIGetbySkuId_200_response_inner::setSellerId(const QString &seller_id) {
    m_seller_id = seller_id;
    m_seller_id_isSet = true;
}

bool OAIGetbySkuId_200_response_inner::is_seller_id_Set() const{
    return m_seller_id_isSet;
}

bool OAIGetbySkuId_200_response_inner::is_seller_id_Valid() const{
    return m_seller_id_isValid;
}

QString OAIGetbySkuId_200_response_inner::getSellerSkuId() const {
    return m_seller_sku_id;
}
void OAIGetbySkuId_200_response_inner::setSellerSkuId(const QString &seller_sku_id) {
    m_seller_sku_id = seller_sku_id;
    m_seller_sku_id_isSet = true;
}

bool OAIGetbySkuId_200_response_inner::is_seller_sku_id_Set() const{
    return m_seller_sku_id_isSet;
}

bool OAIGetbySkuId_200_response_inner::is_seller_sku_id_Valid() const{
    return m_seller_sku_id_isValid;
}

qint32 OAIGetbySkuId_200_response_inner::getStockKeepingUnitId() const {
    return m_stock_keeping_unit_id;
}
void OAIGetbySkuId_200_response_inner::setStockKeepingUnitId(const qint32 &stock_keeping_unit_id) {
    m_stock_keeping_unit_id = stock_keeping_unit_id;
    m_stock_keeping_unit_id_isSet = true;
}

bool OAIGetbySkuId_200_response_inner::is_stock_keeping_unit_id_Set() const{
    return m_stock_keeping_unit_id_isSet;
}

bool OAIGetbySkuId_200_response_inner::is_stock_keeping_unit_id_Valid() const{
    return m_stock_keeping_unit_id_isValid;
}

bool OAIGetbySkuId_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_sku_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_keeping_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetbySkuId_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
