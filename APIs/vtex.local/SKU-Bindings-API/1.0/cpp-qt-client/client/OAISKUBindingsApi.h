/**
 * SKU Bindings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISKUBindingsApi_H
#define OAI_OAISKUBindingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBindtoanothersku_request.h"
#include "OAIGetSKUseller_200_response.h"
#include "OAIGetallbySellerId_200_response_inner.h"
#include "OAIGetbySkuId_200_response_inner.h"
#include "OAIGetpagedadmin_200_response.h"
#include "OAIInsertSKUBinding_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISKUBindingsApi : public QObject {
    Q_OBJECT

public:
    OAISKUBindingsApi(const int timeOut = 0);
    ~OAISKUBindingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  seller_id QString [required]
    * @param[in]  sku_seller_id QString [required]
    */
    virtual void activateSKUBinding(const QString &content_type, const QString &accept, const QString &seller_id, const QString &sku_seller_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  seller_id QString [required]
    * @param[in]  seller_sku_id QString [required]
    * @param[in]  oai_bindtoanothersku_request OAIBindtoanothersku_request [optional]
    */
    virtual void bindtoanothersku(const QString &content_type, const QString &accept, const QString &seller_id, const QString &seller_sku_id, const ::OpenAPI::OptionalParam<OAIBindtoanothersku_request> &oai_bindtoanothersku_request = ::OpenAPI::OptionalParam<OAIBindtoanothersku_request>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  sku_id QString [required]
    */
    virtual void changeNotification(const QString &content_type, const QString &accept, const QString &sku_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  seller_id QString [required]
    * @param[in]  sku_seller_id QString [required]
    */
    virtual void deactivateSKUBinding(const QString &content_type, const QString &accept, const QString &seller_id, const QString &sku_seller_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  seller_id QString [required]
    * @param[in]  seller_sku_id QString [required]
    */
    virtual void deleteSKUsellerassociation(const QString &content_type, const QString &accept, const QString &seller_id, const QString &seller_sku_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  seller_id QString [required]
    * @param[in]  seller_sku_id QString [required]
    */
    virtual void getSKUseller(const QString &content_type, const QString &accept, const QString &seller_id, const QString &seller_sku_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  seller_id QString [required]
    */
    virtual void getallbySellerId(const QString &content_type, const QString &accept, const QString &seller_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  sku_id QString [required]
    */
    virtual void getbySkuId(const QString &content_type, const QString &accept, const QString &sku_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  seller_id QString [optional]
    * @param[in]  sku_id QString [optional]
    * @param[in]  seller_sku_id QString [optional]
    * @param[in]  is_active bool [optional]
    * @param[in]  size QString [optional]
    */
    virtual void getpagedadmin(const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<QString> &seller_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sku_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seller_sku_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_active = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page QString [required]
    * @param[in]  size QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  seller_id QString [required]
    */
    virtual void getpagedbySellerId(const QString &page, const QString &size, const QString &content_type, const QString &accept, const QString &seller_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_insert_sku_binding_request OAIInsertSKUBinding_request [required]
    */
    virtual void insertSKUBinding(const QString &content_type, const QString &accept, const OAIInsertSKUBinding_request &oai_insert_sku_binding_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  seller_id QString [required]
    * @param[in]  seller_sku_id QString [required]
    */
    virtual void skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPost(const QString &content_type, const QString &accept, const QString &seller_id, const QString &seller_sku_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activateSKUBindingCallback(OAIHttpRequestWorker *worker);
    void bindtoanotherskuCallback(OAIHttpRequestWorker *worker);
    void changeNotificationCallback(OAIHttpRequestWorker *worker);
    void deactivateSKUBindingCallback(OAIHttpRequestWorker *worker);
    void deleteSKUsellerassociationCallback(OAIHttpRequestWorker *worker);
    void getSKUsellerCallback(OAIHttpRequestWorker *worker);
    void getallbySellerIdCallback(OAIHttpRequestWorker *worker);
    void getbySkuIdCallback(OAIHttpRequestWorker *worker);
    void getpagedadminCallback(OAIHttpRequestWorker *worker);
    void getpagedbySellerIdCallback(OAIHttpRequestWorker *worker);
    void insertSKUBindingCallback(OAIHttpRequestWorker *worker);
    void skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activateSKUBindingSignal();
    void bindtoanotherskuSignal();
    void changeNotificationSignal();
    void deactivateSKUBindingSignal();
    void deleteSKUsellerassociationSignal();
    void getSKUsellerSignal(OAIGetSKUseller_200_response summary);
    void getallbySellerIdSignal(QList<OAIGetallbySellerId_200_response_inner> summary);
    void getbySkuIdSignal(QList<OAIGetbySkuId_200_response_inner> summary);
    void getpagedadminSignal(OAIGetpagedadmin_200_response summary);
    void getpagedbySellerIdSignal(QList<OAIGetallbySellerId_200_response_inner> summary);
    void insertSKUBindingSignal();
    void skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostSignal();


    void activateSKUBindingSignalFull(OAIHttpRequestWorker *worker);
    void bindtoanotherskuSignalFull(OAIHttpRequestWorker *worker);
    void changeNotificationSignalFull(OAIHttpRequestWorker *worker);
    void deactivateSKUBindingSignalFull(OAIHttpRequestWorker *worker);
    void deleteSKUsellerassociationSignalFull(OAIHttpRequestWorker *worker);
    void getSKUsellerSignalFull(OAIHttpRequestWorker *worker, OAIGetSKUseller_200_response summary);
    void getallbySellerIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetallbySellerId_200_response_inner> summary);
    void getbySkuIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetbySkuId_200_response_inner> summary);
    void getpagedadminSignalFull(OAIHttpRequestWorker *worker, OAIGetpagedadmin_200_response summary);
    void getpagedbySellerIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetallbySellerId_200_response_inner> summary);
    void insertSKUBindingSignalFull(OAIHttpRequestWorker *worker);
    void skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use activateSKUBindingSignalError() instead")
    void activateSKUBindingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activateSKUBindingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bindtoanotherskuSignalError() instead")
    void bindtoanotherskuSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void bindtoanotherskuSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeNotificationSignalError() instead")
    void changeNotificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeNotificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateSKUBindingSignalError() instead")
    void deactivateSKUBindingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateSKUBindingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSKUsellerassociationSignalError() instead")
    void deleteSKUsellerassociationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSKUsellerassociationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSKUsellerSignalError() instead")
    void getSKUsellerSignalE(OAIGetSKUseller_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSKUsellerSignalError(OAIGetSKUseller_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getallbySellerIdSignalError() instead")
    void getallbySellerIdSignalE(QList<OAIGetallbySellerId_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getallbySellerIdSignalError(QList<OAIGetallbySellerId_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getbySkuIdSignalError() instead")
    void getbySkuIdSignalE(QList<OAIGetbySkuId_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getbySkuIdSignalError(QList<OAIGetbySkuId_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getpagedadminSignalError() instead")
    void getpagedadminSignalE(OAIGetpagedadmin_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getpagedadminSignalError(OAIGetpagedadmin_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getpagedbySellerIdSignalError() instead")
    void getpagedbySellerIdSignalE(QList<OAIGetallbySellerId_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getpagedbySellerIdSignalError(QList<OAIGetallbySellerId_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use insertSKUBindingSignalError() instead")
    void insertSKUBindingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void insertSKUBindingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostSignalError() instead")
    void skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activateSKUBindingSignalErrorFull() instead")
    void activateSKUBindingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activateSKUBindingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bindtoanotherskuSignalErrorFull() instead")
    void bindtoanotherskuSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bindtoanotherskuSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeNotificationSignalErrorFull() instead")
    void changeNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateSKUBindingSignalErrorFull() instead")
    void deactivateSKUBindingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateSKUBindingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSKUsellerassociationSignalErrorFull() instead")
    void deleteSKUsellerassociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSKUsellerassociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSKUsellerSignalErrorFull() instead")
    void getSKUsellerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSKUsellerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getallbySellerIdSignalErrorFull() instead")
    void getallbySellerIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getallbySellerIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getbySkuIdSignalErrorFull() instead")
    void getbySkuIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getbySkuIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getpagedadminSignalErrorFull() instead")
    void getpagedadminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getpagedadminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getpagedbySellerIdSignalErrorFull() instead")
    void getpagedbySellerIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getpagedbySellerIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use insertSKUBindingSignalErrorFull() instead")
    void insertSKUBindingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void insertSKUBindingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostSignalErrorFull() instead")
    void skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
