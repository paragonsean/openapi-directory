/**
 * SKU Bindings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSKUseller_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSKUseller_200_response::OAIGetSKUseller_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSKUseller_200_response::OAIGetSKUseller_200_response() {
    this->initializeModel();
}

OAIGetSKUseller_200_response::~OAIGetSKUseller_200_response() {}

void OAIGetSKUseller_200_response::initializeModel() {

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_persisted_isSet = false;
    m_is_persisted_isValid = false;

    m_is_removed_isSet = false;
    m_is_removed_isValid = false;

    m_requested_update_date_isSet = false;
    m_requested_update_date_isValid = false;

    m_seller_id_isSet = false;
    m_seller_id_isValid = false;

    m_seller_stock_keeping_unit_id_isSet = false;
    m_seller_stock_keeping_unit_id_isValid = false;

    m_sku_seller_id_isSet = false;
    m_sku_seller_id_isValid = false;

    m_stock_keeping_unit_id_isSet = false;
    m_stock_keeping_unit_id_isValid = false;

    m_update_date_isSet = false;
    m_update_date_isValid = false;
}

void OAIGetSKUseller_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSKUseller_200_response::fromJsonObject(QJsonObject json) {

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("IsActive")]);
    m_is_active_isSet = !json[QString("IsActive")].isNull() && m_is_active_isValid;

    m_is_persisted_isValid = ::OpenAPI::fromJsonValue(m_is_persisted, json[QString("IsPersisted")]);
    m_is_persisted_isSet = !json[QString("IsPersisted")].isNull() && m_is_persisted_isValid;

    m_is_removed_isValid = ::OpenAPI::fromJsonValue(m_is_removed, json[QString("IsRemoved")]);
    m_is_removed_isSet = !json[QString("IsRemoved")].isNull() && m_is_removed_isValid;

    m_requested_update_date_isValid = ::OpenAPI::fromJsonValue(m_requested_update_date, json[QString("RequestedUpdateDate")]);
    m_requested_update_date_isSet = !json[QString("RequestedUpdateDate")].isNull() && m_requested_update_date_isValid;

    m_seller_id_isValid = ::OpenAPI::fromJsonValue(m_seller_id, json[QString("SellerId")]);
    m_seller_id_isSet = !json[QString("SellerId")].isNull() && m_seller_id_isValid;

    m_seller_stock_keeping_unit_id_isValid = ::OpenAPI::fromJsonValue(m_seller_stock_keeping_unit_id, json[QString("SellerStockKeepingUnitId")]);
    m_seller_stock_keeping_unit_id_isSet = !json[QString("SellerStockKeepingUnitId")].isNull() && m_seller_stock_keeping_unit_id_isValid;

    m_sku_seller_id_isValid = ::OpenAPI::fromJsonValue(m_sku_seller_id, json[QString("SkuSellerId")]);
    m_sku_seller_id_isSet = !json[QString("SkuSellerId")].isNull() && m_sku_seller_id_isValid;

    m_stock_keeping_unit_id_isValid = ::OpenAPI::fromJsonValue(m_stock_keeping_unit_id, json[QString("StockKeepingUnitId")]);
    m_stock_keeping_unit_id_isSet = !json[QString("StockKeepingUnitId")].isNull() && m_stock_keeping_unit_id_isValid;

    m_update_date_isValid = ::OpenAPI::fromJsonValue(m_update_date, json[QString("UpdateDate")]);
    m_update_date_isSet = !json[QString("UpdateDate")].isNull() && m_update_date_isValid;
}

QString OAIGetSKUseller_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSKUseller_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_is_active_isSet) {
        obj.insert(QString("IsActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_persisted_isSet) {
        obj.insert(QString("IsPersisted"), ::OpenAPI::toJsonValue(m_is_persisted));
    }
    if (m_is_removed_isSet) {
        obj.insert(QString("IsRemoved"), ::OpenAPI::toJsonValue(m_is_removed));
    }
    if (m_requested_update_date_isSet) {
        obj.insert(QString("RequestedUpdateDate"), ::OpenAPI::toJsonValue(m_requested_update_date));
    }
    if (m_seller_id_isSet) {
        obj.insert(QString("SellerId"), ::OpenAPI::toJsonValue(m_seller_id));
    }
    if (m_seller_stock_keeping_unit_id_isSet) {
        obj.insert(QString("SellerStockKeepingUnitId"), ::OpenAPI::toJsonValue(m_seller_stock_keeping_unit_id));
    }
    if (m_sku_seller_id_isSet) {
        obj.insert(QString("SkuSellerId"), ::OpenAPI::toJsonValue(m_sku_seller_id));
    }
    if (m_stock_keeping_unit_id_isSet) {
        obj.insert(QString("StockKeepingUnitId"), ::OpenAPI::toJsonValue(m_stock_keeping_unit_id));
    }
    if (m_update_date_isSet) {
        obj.insert(QString("UpdateDate"), ::OpenAPI::toJsonValue(m_update_date));
    }
    return obj;
}

bool OAIGetSKUseller_200_response::isIsActive() const {
    return m_is_active;
}
void OAIGetSKUseller_200_response::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIGetSKUseller_200_response::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIGetSKUseller_200_response::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIGetSKUseller_200_response::isIsPersisted() const {
    return m_is_persisted;
}
void OAIGetSKUseller_200_response::setIsPersisted(const bool &is_persisted) {
    m_is_persisted = is_persisted;
    m_is_persisted_isSet = true;
}

bool OAIGetSKUseller_200_response::is_is_persisted_Set() const{
    return m_is_persisted_isSet;
}

bool OAIGetSKUseller_200_response::is_is_persisted_Valid() const{
    return m_is_persisted_isValid;
}

bool OAIGetSKUseller_200_response::isIsRemoved() const {
    return m_is_removed;
}
void OAIGetSKUseller_200_response::setIsRemoved(const bool &is_removed) {
    m_is_removed = is_removed;
    m_is_removed_isSet = true;
}

bool OAIGetSKUseller_200_response::is_is_removed_Set() const{
    return m_is_removed_isSet;
}

bool OAIGetSKUseller_200_response::is_is_removed_Valid() const{
    return m_is_removed_isValid;
}

QString OAIGetSKUseller_200_response::getRequestedUpdateDate() const {
    return m_requested_update_date;
}
void OAIGetSKUseller_200_response::setRequestedUpdateDate(const QString &requested_update_date) {
    m_requested_update_date = requested_update_date;
    m_requested_update_date_isSet = true;
}

bool OAIGetSKUseller_200_response::is_requested_update_date_Set() const{
    return m_requested_update_date_isSet;
}

bool OAIGetSKUseller_200_response::is_requested_update_date_Valid() const{
    return m_requested_update_date_isValid;
}

QString OAIGetSKUseller_200_response::getSellerId() const {
    return m_seller_id;
}
void OAIGetSKUseller_200_response::setSellerId(const QString &seller_id) {
    m_seller_id = seller_id;
    m_seller_id_isSet = true;
}

bool OAIGetSKUseller_200_response::is_seller_id_Set() const{
    return m_seller_id_isSet;
}

bool OAIGetSKUseller_200_response::is_seller_id_Valid() const{
    return m_seller_id_isValid;
}

QString OAIGetSKUseller_200_response::getSellerStockKeepingUnitId() const {
    return m_seller_stock_keeping_unit_id;
}
void OAIGetSKUseller_200_response::setSellerStockKeepingUnitId(const QString &seller_stock_keeping_unit_id) {
    m_seller_stock_keeping_unit_id = seller_stock_keeping_unit_id;
    m_seller_stock_keeping_unit_id_isSet = true;
}

bool OAIGetSKUseller_200_response::is_seller_stock_keeping_unit_id_Set() const{
    return m_seller_stock_keeping_unit_id_isSet;
}

bool OAIGetSKUseller_200_response::is_seller_stock_keeping_unit_id_Valid() const{
    return m_seller_stock_keeping_unit_id_isValid;
}

qint32 OAIGetSKUseller_200_response::getSkuSellerId() const {
    return m_sku_seller_id;
}
void OAIGetSKUseller_200_response::setSkuSellerId(const qint32 &sku_seller_id) {
    m_sku_seller_id = sku_seller_id;
    m_sku_seller_id_isSet = true;
}

bool OAIGetSKUseller_200_response::is_sku_seller_id_Set() const{
    return m_sku_seller_id_isSet;
}

bool OAIGetSKUseller_200_response::is_sku_seller_id_Valid() const{
    return m_sku_seller_id_isValid;
}

qint32 OAIGetSKUseller_200_response::getStockKeepingUnitId() const {
    return m_stock_keeping_unit_id;
}
void OAIGetSKUseller_200_response::setStockKeepingUnitId(const qint32 &stock_keeping_unit_id) {
    m_stock_keeping_unit_id = stock_keeping_unit_id;
    m_stock_keeping_unit_id_isSet = true;
}

bool OAIGetSKUseller_200_response::is_stock_keeping_unit_id_Set() const{
    return m_stock_keeping_unit_id_isSet;
}

bool OAIGetSKUseller_200_response::is_stock_keeping_unit_id_Valid() const{
    return m_stock_keeping_unit_id_isValid;
}

QString OAIGetSKUseller_200_response::getUpdateDate() const {
    return m_update_date;
}
void OAIGetSKUseller_200_response::setUpdateDate(const QString &update_date) {
    m_update_date = update_date;
    m_update_date_isSet = true;
}

bool OAIGetSKUseller_200_response::is_update_date_Set() const{
    return m_update_date_isSet;
}

bool OAIGetSKUseller_200_response::is_update_date_Valid() const{
    return m_update_date_isValid;
}

bool OAIGetSKUseller_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_persisted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_removed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_stock_keeping_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_keeping_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSKUseller_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_active_isValid && m_is_persisted_isValid && m_is_removed_isValid && m_requested_update_date_isValid && m_seller_id_isValid && m_seller_stock_keeping_unit_id_isValid && m_sku_seller_id_isValid && m_stock_keeping_unit_id_isValid && m_update_date_isValid && true;
}

} // namespace OpenAPI
