/**
 * SKU Bindings API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BindtoanotherskuRequest from '../model/BindtoanotherskuRequest';
import GetSKUseller200Response from '../model/GetSKUseller200Response';
import GetallbySellerId200ResponseInner from '../model/GetallbySellerId200ResponseInner';
import GetbySkuId200ResponseInner from '../model/GetbySkuId200ResponseInner';
import Getpagedadmin200Response from '../model/Getpagedadmin200Response';
import InsertSKUBindingRequest from '../model/InsertSKUBindingRequest';

/**
* SKUBindings service.
* @module api/SKUBindingsApi
* @version 1.0
*/
export default class SKUBindingsApi {

    /**
    * Constructs a new SKUBindingsApi. 
    * @alias module:api/SKUBindingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateSKUBinding operation.
     * @callback module:api/SKUBindingsApi~activateSKUBindingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate SKU Binding
     * Changes the status of an SKU Binding to active, setting `isActive` to `true`.     > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/activate/{sellerId}/{skuSellerId}`.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
     * @param {String} skuSellerId SKU ID in the seller's store.
     * @param {module:api/SKUBindingsApi~activateSKUBindingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activateSKUBinding(contentType, accept, sellerId, skuSellerId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling activateSKUBinding");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling activateSKUBinding");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling activateSKUBinding");
      }
      // verify the required parameter 'skuSellerId' is set
      if (skuSellerId === undefined || skuSellerId === null) {
        throw new Error("Missing the required parameter 'skuSellerId' when calling activateSKUBinding");
      }

      let pathParams = {
        'sellerId': sellerId,
        'skuSellerId': skuSellerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sku-binding/pvt/skuseller/activate/{sellerId}/{skuSellerId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bindtoanothersku operation.
     * @callback module:api/SKUBindingsApi~bindtoanotherskuCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bind a seller's SKU to another SKU
     * Associates a seller's SKU to another marketplace SKU.     > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}`.    ## Request body example    ```json  {      \"StockKeepingUnitId\": 1  }  ```
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
     * @param {String} sellerSkuId SKU ID in the seller's store.
     * @param {Object} opts Optional parameters
     * @param {module:model/BindtoanotherskuRequest} [bindtoanotherskuRequest] Request body
     * @param {module:api/SKUBindingsApi~bindtoanotherskuCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bindtoanothersku(contentType, accept, sellerId, sellerSkuId, opts, callback) {
      opts = opts || {};
      let postBody = opts['bindtoanotherskuRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling bindtoanothersku");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling bindtoanothersku");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling bindtoanothersku");
      }
      // verify the required parameter 'sellerSkuId' is set
      if (sellerSkuId === undefined || sellerSkuId === null) {
        throw new Error("Missing the required parameter 'sellerSkuId' when calling bindtoanothersku");
      }

      let pathParams = {
        'sellerId': sellerId,
        'sellerSkuId': sellerSkuId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sku-binding/pvt/skuseller/{sellerId}/{sellerSkuId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeNotification operation.
     * @callback module:api/SKUBindingsApi~changeNotificationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Notification with SKU ID
     * The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.  With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.  The body of the request should be empty.     > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/changenotification/{skuId}`.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} skuId A string that identifies the SKU in the marketplace. This is the ID that the marketplace will use to look for the SKU whose change the seller wants to inform. If the marketplace finds this ID, it responds with status code `200`. Otherwise, it responds with status code `404`.
     * @param {module:api/SKUBindingsApi~changeNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeNotification(contentType, accept, skuId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling changeNotification");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling changeNotification");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling changeNotification");
      }

      let pathParams = {
        'skuId': skuId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sku-binding/pvt/skuseller/changenotification/{skuId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateSKUBinding operation.
     * @callback module:api/SKUBindingsApi~deactivateSKUBindingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate SKU Binding
     * Changes the status of an SKU Binding to inactive, setting `isActive` to `false`.      > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/inactivate/{sellerId}/{skuSellerId}`.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
     * @param {String} skuSellerId SKU ID in the seller's store.
     * @param {module:api/SKUBindingsApi~deactivateSKUBindingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deactivateSKUBinding(contentType, accept, sellerId, skuSellerId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deactivateSKUBinding");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deactivateSKUBinding");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling deactivateSKUBinding");
      }
      // verify the required parameter 'skuSellerId' is set
      if (skuSellerId === undefined || skuSellerId === null) {
        throw new Error("Missing the required parameter 'skuSellerId' when calling deactivateSKUBinding");
      }

      let pathParams = {
        'sellerId': sellerId,
        'skuSellerId': skuSellerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sku-binding/pvt/skuseller/inactivate/{sellerId}/{skuSellerId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSKUsellerassociation operation.
     * @callback module:api/SKUBindingsApi~deleteSKUsellerassociationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a seller's SKU Binding
     * Remove a seller's SKU binding, given the Seller ID and the SKU ID in the seller's store.      > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/remove/{sellerId}/{sellerSkuId}`.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
     * @param {String} sellerSkuId SKU ID in the seller's store.
     * @param {module:api/SKUBindingsApi~deleteSKUsellerassociationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSKUsellerassociation(contentType, accept, sellerId, sellerSkuId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteSKUsellerassociation");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteSKUsellerassociation");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling deleteSKUsellerassociation");
      }
      // verify the required parameter 'sellerSkuId' is set
      if (sellerSkuId === undefined || sellerSkuId === null) {
        throw new Error("Missing the required parameter 'sellerSkuId' when calling deleteSKUsellerassociation");
      }

      let pathParams = {
        'sellerId': sellerId,
        'sellerSkuId': sellerSkuId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sku-binding/pvt/skuseller/remove/{sellerId}/{sellerSkuId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSKUseller operation.
     * @callback module:api/SKUBindingsApi~getSKUsellerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSKUseller200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of a seller's SKU
     * Retrieves the details of a seller's SKU given a seller ID and the SKU ID in the seller's store.      > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/{sellerId}/{sellerSkuId}`.    ## Response body example    ```json  {      \"IsPersisted\": true,      \"IsRemoved\": false,      \"SkuSellerId\": 102,      \"UpdateDate\": \"2021-04-12T20:06:59.413Z\",      \"RequestedUpdateDate\": null,      \"SellerStockKeepingUnitId\": \"71\",      \"SellerId\": \"vtxkfj7352\",      \"StockKeepingUnitId\": 1,      \"IsActive\": true  }  ```
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
     * @param {String} sellerSkuId SKU ID in the seller's store.
     * @param {module:api/SKUBindingsApi~getSKUsellerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSKUseller200Response}
     */
    getSKUseller(contentType, accept, sellerId, sellerSkuId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getSKUseller");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSKUseller");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getSKUseller");
      }
      // verify the required parameter 'sellerSkuId' is set
      if (sellerSkuId === undefined || sellerSkuId === null) {
        throw new Error("Missing the required parameter 'sellerSkuId' when calling getSKUseller");
      }

      let pathParams = {
        'sellerId': sellerId,
        'sellerSkuId': sellerSkuId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSKUseller200Response;
      return this.apiClient.callApi(
        '/sku-binding/pvt/skuseller/{sellerId}/{sellerSkuId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getallbySellerId operation.
     * @callback module:api/SKUBindingsApi~getallbySellerIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetallbySellerId200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all SKU Bindings by Seller ID
     * Retrieves a list of SKU Bindings given a specific Seller ID.      > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/list/bysellerId/{sellerId}`.    ## Response body example    ```json  [      {          \"SellerStockKeepingUnitId\": \"24\",          \"FreightCommissionPercentage\": null,          \"ProductCommissionPercentage\": null,          \"SellerId\": \"vtxkfj7352\",          \"StockKeepingUnitId\": 121,          \"IsActive\": true      }  ]  ```
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
     * @param {module:api/SKUBindingsApi~getallbySellerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetallbySellerId200ResponseInner>}
     */
    getallbySellerId(contentType, accept, sellerId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getallbySellerId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getallbySellerId");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getallbySellerId");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetallbySellerId200ResponseInner];
      return this.apiClient.callApi(
        '/sku-binding/pvt/skuseller/list/bysellerId/{sellerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getbySkuId operation.
     * @callback module:api/SKUBindingsApi~getbySkuIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetbySkuId200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get SKU Bindings by SKU ID
     * Retrieves SKU Bindings details by SKU ID.    ## Response body example    ```json  [      {          \"Id\": 48,          \"SellerId\": \"cosmetics1\",          \"StockKeepingUnitId\": 1,          \"SellerSkuId\": \"42\",          \"IsActive\": true,          \"LastUpdateDate\": \"2020-10-21T19:13:00.657\",          \"SalesPolicy\": 0      }  ]  ```
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} skuId SKU's unique identifier in the marketplace.
     * @param {module:api/SKUBindingsApi~getbySkuIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetbySkuId200ResponseInner>}
     */
    getbySkuId(contentType, accept, skuId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getbySkuId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getbySkuId");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling getbySkuId");
      }

      let pathParams = {
        'skuId': skuId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetbySkuId200ResponseInner];
      return this.apiClient.callApi(
        '/catalog/pvt/skusellers/{skuId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getpagedadmin operation.
     * @callback module:api/SKUBindingsApi~getpagedadminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getpagedadmin200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get SKU Bindings information
     * Retrieves SKU Bindings administrative information using optional query params `sellerId`, `skuId`, `sellerSkuId` and `IsActive` to filter results and `size` to restrict the amount of results.      > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/admin`.    ## Response body example    ```json  [      {          \"IsPersisted\": true,          \"IsRemoved\": false,          \"SkuSellerId\": 1,          \"UpdateDate\": \"2019-12-04T01:56:00.673Z\",          \"RequestedUpdateDate\": null,          \"SellerStockKeepingUnitId\": \"12\",          \"SellerId\": \"cosmetics1\",          \"StockKeepingUnitId\": 25,          \"IsActive\": true      }  ]  ```
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {String} [sellerId] ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
     * @param {String} [skuId] SKU's unique identifier in the marketplace.
     * @param {String} [sellerSkuId] SKU ID in the seller's store.
     * @param {Boolean} [isActive] Defines if the SKU binding is active.
     * @param {String} [size] Amount of results.
     * @param {module:api/SKUBindingsApi~getpagedadminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getpagedadmin200Response}
     */
    getpagedadmin(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getpagedadmin");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getpagedadmin");
      }

      let pathParams = {
      };
      let queryParams = {
        'sellerId': opts['sellerId'],
        'skuId': opts['skuId'],
        'sellerSkuId': opts['sellerSkuId'],
        'isActive': opts['isActive'],
        'size': opts['size']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Getpagedadmin200Response;
      return this.apiClient.callApi(
        '/sku-binding/pvt/skuseller/admin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getpagedbySellerId operation.
     * @callback module:api/SKUBindingsApi~getpagedbySellerIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetallbySellerId200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get paged SKU Bindings by Seller ID
     * Retrieves a paged list of SKU Bindings given a specific Seller ID.      > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/paged/sellerid/{sellerId}`.    ## Response body example    ```json  [      {          \"SellerId\": \"vtxkfj7352\",          \"StockKeepingUnitId\": 121,          \"SellerStockKeepingUnitId\": \"24\",          \"IsActive\": true,          \"FreightCommissionPercentage\": null,          \"ProductCommissionPercentage\": null      },      {          \"SellerId\": \"vtxkfj7352\",          \"StockKeepingUnitId\": 14,          \"SellerStockKeepingUnitId\": \"60\",          \"IsActive\": true,          \"FreightCommissionPercentage\": null,          \"ProductCommissionPercentage\": null      }  ]  ```
     * @param {String} page Page number.
     * @param {String} size Amount of results per page.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
     * @param {module:api/SKUBindingsApi~getpagedbySellerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetallbySellerId200ResponseInner>}
     */
    getpagedbySellerId(page, size, contentType, accept, sellerId, callback) {
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getpagedbySellerId");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling getpagedbySellerId");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getpagedbySellerId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getpagedbySellerId");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling getpagedbySellerId");
      }

      let pathParams = {
        'sellerId': sellerId
      };
      let queryParams = {
        'page': page,
        'size': size
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetallbySellerId200ResponseInner];
      return this.apiClient.callApi(
        '/sku-binding/pvt/skuseller/paged/sellerid/{sellerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertSKUBinding operation.
     * @callback module:api/SKUBindingsApi~insertSKUBindingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert SKU Binding
     * Creates an SKU Binding, associating a seller's SKU with a marketplace's SKU.     > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/insertion`.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {module:model/InsertSKUBindingRequest} insertSKUBindingRequest Request body
     * @param {module:api/SKUBindingsApi~insertSKUBindingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    insertSKUBinding(contentType, accept, insertSKUBindingRequest, callback) {
      let postBody = insertSKUBindingRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling insertSKUBinding");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling insertSKUBinding");
      }
      // verify the required parameter 'insertSKUBindingRequest' is set
      if (insertSKUBindingRequest === undefined || insertSKUBindingRequest === null) {
        throw new Error("Missing the required parameter 'insertSKUBindingRequest' when calling insertSKUBinding");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sku-binding/pvt/skuseller/insertion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPost operation.
     * @callback module:api/SKUBindingsApi~skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change Notification with Seller ID and Seller SKU ID
     * The seller is responsible for suggesting new SKUs to be sold in the VTEX marketplace and also for informing the marketplace about changes in their SKUs that already exist in the marketplace. Both actions start with a catalog notification, which is made by this request.  With this notification, the seller is telling the marketplace that something has changed about a specific SKU, like price or inventory, or that this is a new SKU that the seller would like to offer to the marketplace.  There are two information expected by the marketplace in this request: the `sellerId`, which identifies the seller, and the `sellerSkuId`, which identifies the binding of the seller with the SKU.  Both information are passed through the request URL. The body of the request should be empty.   > ℹ This path is an updated version of `/api/catalog_system/pvt/skuseller/changenotification/{sellerId}/{sellerSkuId}`.    ## Example    Let's say your seller has the ID `123` in the marketplace and you want to inform the marketplace that has been a change in the SKU with ID `700`.    In this case, you would have to replace the `sellerId` parameter with the value `123` and the `skuId` parameter with the value `700`. The URL of the request would be the following.    ```  https://{{accountName}}.vtexcommercestable.com.br/api/sku-binding/pvt/skuseller/changenotification/123/700  ```    ## Response codes    The following response codes are possible for this request.  * 200: the SKU whose ID was informed in the URL already exists in the marketplace and was found. The marketplace can now proceed with a fulfillment simulation in order to get updated information about this SKU's inventory and price.  * 403: Failure in the authentication.  * 404: the SKU was not found in the marketplace. The body of the response, in this case, should follow this format: \"Seller StockKeepingUnit `{{skuId}}` not found for this seller id `{{sellerId}}`. This means that the seller can now proceed with sending an offer to the marketplace in order to suggest that this SKU is sold there.  * 429: Failure due to too many requests.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} sellerId ID that identifies the seller in the marketplace. It can be the same as the seller name or a unique number. Check the **Sellers management** section in the Admin to get the correct ID.
     * @param {String} sellerSkuId ID of the binding of the seller with the SKU.
     * @param {module:api/SKUBindingsApi~skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPost(contentType, accept, sellerId, sellerSkuId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPost");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPost");
      }
      // verify the required parameter 'sellerId' is set
      if (sellerId === undefined || sellerId === null) {
        throw new Error("Missing the required parameter 'sellerId' when calling skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPost");
      }
      // verify the required parameter 'sellerSkuId' is set
      if (sellerSkuId === undefined || sellerSkuId === null) {
        throw new Error("Missing the required parameter 'sellerSkuId' when calling skuBindingPvtSkusellerChangenotificationSellerIdSellerSkuIdPost");
      }

      let pathParams = {
        'sellerId': sellerId,
        'sellerSkuId': sellerSkuId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sku-binding/pvt/skuseller/changenotification/{sellerId}/{sellerSkuId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
