/**
 * VTEX Do API
 * VTEX DO is a task management system for authorized users to process orders. It is possible to control notes, and create, update, list, and retrieve tasks.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Assignee from './Assignee';
import Follower from './Follower';
import Target from './Target';

/**
 * The NewTaskRequest model module.
 * @module model/NewTaskRequest
 * @version 1.0
 */
class NewTaskRequest {
    /**
     * Constructs a new <code>NewTaskRequest</code>.
     * @alias module:model/NewTaskRequest
     * @param assignee {module:model/Assignee} 
     * @param context {String} 
     * @param description {String} 
     * @param domain {String} 
     * @param dueDate {String} 
     * @param followers {Array.<module:model/Follower>} 
     * @param name {String} 
     * @param parentTaskId {String} 
     * @param priority {String} 
     * @param surrogateKey {String} 
     * @param target {Array.<module:model/Target>} 
     */
    constructor(assignee, context, description, domain, dueDate, followers, name, parentTaskId, priority, surrogateKey, target) { 
        
        NewTaskRequest.initialize(this, assignee, context, description, domain, dueDate, followers, name, parentTaskId, priority, surrogateKey, target);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assignee, context, description, domain, dueDate, followers, name, parentTaskId, priority, surrogateKey, target) { 
        obj['assignee'] = assignee;
        obj['context'] = context;
        obj['description'] = description;
        obj['domain'] = domain;
        obj['dueDate'] = dueDate;
        obj['followers'] = followers;
        obj['name'] = name;
        obj['parentTaskId'] = parentTaskId;
        obj['priority'] = priority;
        obj['surrogateKey'] = surrogateKey;
        obj['target'] = target;
    }

    /**
     * Constructs a <code>NewTaskRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewTaskRequest} obj Optional instance to populate.
     * @return {module:model/NewTaskRequest} The populated <code>NewTaskRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewTaskRequest();

            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = Assignee.constructFromObject(data['assignee']);
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'String');
            }
            if (data.hasOwnProperty('followers')) {
                obj['followers'] = ApiClient.convertToType(data['followers'], [Follower]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentTaskId')) {
                obj['parentTaskId'] = ApiClient.convertToType(data['parentTaskId'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
            if (data.hasOwnProperty('surrogateKey')) {
                obj['surrogateKey'] = ApiClient.convertToType(data['surrogateKey'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], [Target]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewTaskRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewTaskRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NewTaskRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `assignee`
        if (data['assignee']) { // data not null
          Assignee.validateJSON(data['assignee']);
        }
        // ensure the json data is a string
        if (data['context'] && !(typeof data['context'] === 'string' || data['context'] instanceof String)) {
            throw new Error("Expected the field `context` to be a primitive type in the JSON string but got " + data['context']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['dueDate'] && !(typeof data['dueDate'] === 'string' || data['dueDate'] instanceof String)) {
            throw new Error("Expected the field `dueDate` to be a primitive type in the JSON string but got " + data['dueDate']);
        }
        if (data['followers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['followers'])) {
                throw new Error("Expected the field `followers` to be an array in the JSON data but got " + data['followers']);
            }
            // validate the optional field `followers` (array)
            for (const item of data['followers']) {
                Follower.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parentTaskId'] && !(typeof data['parentTaskId'] === 'string' || data['parentTaskId'] instanceof String)) {
            throw new Error("Expected the field `parentTaskId` to be a primitive type in the JSON string but got " + data['parentTaskId']);
        }
        // ensure the json data is a string
        if (data['priority'] && !(typeof data['priority'] === 'string' || data['priority'] instanceof String)) {
            throw new Error("Expected the field `priority` to be a primitive type in the JSON string but got " + data['priority']);
        }
        // ensure the json data is a string
        if (data['surrogateKey'] && !(typeof data['surrogateKey'] === 'string' || data['surrogateKey'] instanceof String)) {
            throw new Error("Expected the field `surrogateKey` to be a primitive type in the JSON string but got " + data['surrogateKey']);
        }
        if (data['target']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['target'])) {
                throw new Error("Expected the field `target` to be an array in the JSON data but got " + data['target']);
            }
            // validate the optional field `target` (array)
            for (const item of data['target']) {
                Target.validateJSON(item);
            };
        }

        return true;
    }


}

NewTaskRequest.RequiredProperties = ["assignee", "context", "description", "domain", "dueDate", "followers", "name", "parentTaskId", "priority", "surrogateKey", "target"];

/**
 * @member {module:model/Assignee} assignee
 */
NewTaskRequest.prototype['assignee'] = undefined;

/**
 * @member {String} context
 */
NewTaskRequest.prototype['context'] = undefined;

/**
 * @member {String} description
 */
NewTaskRequest.prototype['description'] = undefined;

/**
 * @member {String} domain
 */
NewTaskRequest.prototype['domain'] = undefined;

/**
 * @member {String} dueDate
 */
NewTaskRequest.prototype['dueDate'] = undefined;

/**
 * 
 * @member {Array.<module:model/Follower>} followers
 */
NewTaskRequest.prototype['followers'] = undefined;

/**
 * @member {String} name
 */
NewTaskRequest.prototype['name'] = undefined;

/**
 * @member {String} parentTaskId
 */
NewTaskRequest.prototype['parentTaskId'] = undefined;

/**
 * @member {String} priority
 */
NewTaskRequest.prototype['priority'] = undefined;

/**
 * @member {String} surrogateKey
 */
NewTaskRequest.prototype['surrogateKey'] = undefined;

/**
 * 
 * @member {Array.<module:model/Target>} target
 */
NewTaskRequest.prototype['target'] = undefined;






export default NewTaskRequest;

