/**
 * VTEX Do API
 * VTEX DO is a task management system for authorized users to process orders. It is possible to control notes, and create, update, list, and retrieve tasks.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NewNoteRequestTarget from './NewNoteRequestTarget';

/**
 * The NewNoteRequest model module.
 * @module model/NewNoteRequest
 * @version 1.0
 */
class NewNoteRequest {
    /**
     * Constructs a new <code>NewNoteRequest</code>.
     * @alias module:model/NewNoteRequest
     * @param description {String} Note description. Maximum number of characters: 2000.
     * @param domain {String} Note domain.
     * @param target {module:model/NewNoteRequestTarget} 
     */
    constructor(description, domain, target) { 
        
        NewNoteRequest.initialize(this, description, domain, target);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, domain, target) { 
        obj['description'] = description;
        obj['domain'] = domain;
        obj['target'] = target;
    }

    /**
     * Constructs a <code>NewNoteRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewNoteRequest} obj Optional instance to populate.
     * @return {module:model/NewNoteRequest} The populated <code>NewNoteRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewNoteRequest();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = NewNoteRequestTarget.constructFromObject(data['target']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewNoteRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewNoteRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NewNoteRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // validate the optional field `target`
        if (data['target']) { // data not null
          NewNoteRequestTarget.validateJSON(data['target']);
        }

        return true;
    }


}

NewNoteRequest.RequiredProperties = ["description", "domain", "target"];

/**
 * Note description. Maximum number of characters: 2000.
 * @member {String} description
 */
NewNoteRequest.prototype['description'] = undefined;

/**
 * Note domain.
 * @member {String} domain
 */
NewNoteRequest.prototype['domain'] = undefined;

/**
 * @member {module:model/NewNoteRequestTarget} target
 */
NewNoteRequest.prototype['target'] = undefined;






export default NewNoteRequest;

