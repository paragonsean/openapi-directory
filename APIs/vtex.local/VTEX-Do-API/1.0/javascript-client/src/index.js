/**
 * VTEX Do API
 * VTEX DO is a task management system for authorized users to process orders. It is possible to control notes, and create, update, list, and retrieve tasks.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AddCommentRequest from './model/AddCommentRequest';
import Assignee from './model/Assignee';
import EditTaskRequest from './model/EditTaskRequest';
import Follower from './model/Follower';
import NewNoteRequest from './model/NewNoteRequest';
import NewNoteRequestTarget from './model/NewNoteRequestTarget';
import NewTaskRequest from './model/NewTaskRequest';
import Target from './model/Target';
import NoteApi from './api/NoteApi';
import TaskApi from './api/TaskApi';


/**
* VTEX DO is a task management system for authorized users to process orders. It is possible to control notes, and create, update, list, and retrieve tasks..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var VtexDoApi = require('index'); // See note below*.
* var xxxSvc = new VtexDoApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new VtexDoApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new VtexDoApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new VtexDoApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AddCommentRequest model constructor.
     * @property {module:model/AddCommentRequest}
     */
    AddCommentRequest,

    /**
     * The Assignee model constructor.
     * @property {module:model/Assignee}
     */
    Assignee,

    /**
     * The EditTaskRequest model constructor.
     * @property {module:model/EditTaskRequest}
     */
    EditTaskRequest,

    /**
     * The Follower model constructor.
     * @property {module:model/Follower}
     */
    Follower,

    /**
     * The NewNoteRequest model constructor.
     * @property {module:model/NewNoteRequest}
     */
    NewNoteRequest,

    /**
     * The NewNoteRequestTarget model constructor.
     * @property {module:model/NewNoteRequestTarget}
     */
    NewNoteRequestTarget,

    /**
     * The NewTaskRequest model constructor.
     * @property {module:model/NewTaskRequest}
     */
    NewTaskRequest,

    /**
     * The Target model constructor.
     * @property {module:model/Target}
     */
    Target,

    /**
    * The NoteApi service constructor.
    * @property {module:api/NoteApi}
    */
    NoteApi,

    /**
    * The TaskApi service constructor.
    * @property {module:api/TaskApi}
    */
    TaskApi
};
