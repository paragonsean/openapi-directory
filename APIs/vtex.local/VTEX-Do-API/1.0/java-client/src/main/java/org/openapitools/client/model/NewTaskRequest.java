/*
 * VTEX Do API
 * VTEX DO is a task management system for authorized users to process orders. It is possible to control notes, and create, update, list, and retrieve tasks.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Assignee;
import org.openapitools.client.model.Follower;
import org.openapitools.client.model.Target;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewTaskRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:15.613916-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewTaskRequest {
  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private Assignee assignee;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private String context;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_FOLLOWERS = "followers";
  @SerializedName(SERIALIZED_NAME_FOLLOWERS)
  private List<Follower> followers = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_TASK_ID = "parentTaskId";
  @SerializedName(SERIALIZED_NAME_PARENT_TASK_ID)
  private String parentTaskId;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private String priority;

  public static final String SERIALIZED_NAME_SURROGATE_KEY = "surrogateKey";
  @SerializedName(SERIALIZED_NAME_SURROGATE_KEY)
  private String surrogateKey;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private List<Target> target = new ArrayList<>();

  public NewTaskRequest() {
  }

  public NewTaskRequest assignee(Assignee assignee) {
    this.assignee = assignee;
    return this;
  }

  /**
   * Get assignee
   * @return assignee
   */
  @javax.annotation.Nonnull
  public Assignee getAssignee() {
    return assignee;
  }

  public void setAssignee(Assignee assignee) {
    this.assignee = assignee;
  }


  public NewTaskRequest context(String context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nonnull
  public String getContext() {
    return context;
  }

  public void setContext(String context) {
    this.context = context;
  }


  public NewTaskRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NewTaskRequest domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public NewTaskRequest dueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Get dueDate
   * @return dueDate
   */
  @javax.annotation.Nonnull
  public String getDueDate() {
    return dueDate;
  }

  public void setDueDate(String dueDate) {
    this.dueDate = dueDate;
  }


  public NewTaskRequest followers(List<Follower> followers) {
    this.followers = followers;
    return this;
  }

  public NewTaskRequest addFollowersItem(Follower followersItem) {
    if (this.followers == null) {
      this.followers = new ArrayList<>();
    }
    this.followers.add(followersItem);
    return this;
  }

  /**
   * 
   * @return followers
   */
  @javax.annotation.Nonnull
  public List<Follower> getFollowers() {
    return followers;
  }

  public void setFollowers(List<Follower> followers) {
    this.followers = followers;
  }


  public NewTaskRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NewTaskRequest parentTaskId(String parentTaskId) {
    this.parentTaskId = parentTaskId;
    return this;
  }

  /**
   * Get parentTaskId
   * @return parentTaskId
   */
  @javax.annotation.Nullable
  public String getParentTaskId() {
    return parentTaskId;
  }

  public void setParentTaskId(String parentTaskId) {
    this.parentTaskId = parentTaskId;
  }


  public NewTaskRequest priority(String priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nonnull
  public String getPriority() {
    return priority;
  }

  public void setPriority(String priority) {
    this.priority = priority;
  }


  public NewTaskRequest surrogateKey(String surrogateKey) {
    this.surrogateKey = surrogateKey;
    return this;
  }

  /**
   * Get surrogateKey
   * @return surrogateKey
   */
  @javax.annotation.Nonnull
  public String getSurrogateKey() {
    return surrogateKey;
  }

  public void setSurrogateKey(String surrogateKey) {
    this.surrogateKey = surrogateKey;
  }


  public NewTaskRequest target(List<Target> target) {
    this.target = target;
    return this;
  }

  public NewTaskRequest addTargetItem(Target targetItem) {
    if (this.target == null) {
      this.target = new ArrayList<>();
    }
    this.target.add(targetItem);
    return this;
  }

  /**
   * 
   * @return target
   */
  @javax.annotation.Nonnull
  public List<Target> getTarget() {
    return target;
  }

  public void setTarget(List<Target> target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewTaskRequest newTaskRequest = (NewTaskRequest) o;
    return Objects.equals(this.assignee, newTaskRequest.assignee) &&
        Objects.equals(this.context, newTaskRequest.context) &&
        Objects.equals(this.description, newTaskRequest.description) &&
        Objects.equals(this.domain, newTaskRequest.domain) &&
        Objects.equals(this.dueDate, newTaskRequest.dueDate) &&
        Objects.equals(this.followers, newTaskRequest.followers) &&
        Objects.equals(this.name, newTaskRequest.name) &&
        Objects.equals(this.parentTaskId, newTaskRequest.parentTaskId) &&
        Objects.equals(this.priority, newTaskRequest.priority) &&
        Objects.equals(this.surrogateKey, newTaskRequest.surrogateKey) &&
        Objects.equals(this.target, newTaskRequest.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignee, context, description, domain, dueDate, followers, name, parentTaskId, priority, surrogateKey, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewTaskRequest {\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    followers: ").append(toIndentedString(followers)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentTaskId: ").append(toIndentedString(parentTaskId)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    surrogateKey: ").append(toIndentedString(surrogateKey)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assignee");
    openapiFields.add("context");
    openapiFields.add("description");
    openapiFields.add("domain");
    openapiFields.add("dueDate");
    openapiFields.add("followers");
    openapiFields.add("name");
    openapiFields.add("parentTaskId");
    openapiFields.add("priority");
    openapiFields.add("surrogateKey");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("assignee");
    openapiRequiredFields.add("context");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("dueDate");
    openapiRequiredFields.add("followers");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("parentTaskId");
    openapiRequiredFields.add("priority");
    openapiRequiredFields.add("surrogateKey");
    openapiRequiredFields.add("target");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewTaskRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewTaskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewTaskRequest is not found in the empty JSON string", NewTaskRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewTaskRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewTaskRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewTaskRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `assignee`
      Assignee.validateJsonElement(jsonObj.get("assignee"));
      if (!jsonObj.get("context").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("dueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dueDate").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("followers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `followers` to be an array in the JSON string but got `%s`", jsonObj.get("followers").toString()));
      }

      JsonArray jsonArrayfollowers = jsonObj.getAsJsonArray("followers");
      // validate the required field `followers` (array)
      for (int i = 0; i < jsonArrayfollowers.size(); i++) {
        Follower.validateJsonElement(jsonArrayfollowers.get(i));
      };
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parentTaskId") != null && !jsonObj.get("parentTaskId").isJsonNull()) && !jsonObj.get("parentTaskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentTaskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentTaskId").toString()));
      }
      if (!jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      if (!jsonObj.get("surrogateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surrogateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surrogateKey").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("target").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be an array in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }

      JsonArray jsonArraytarget = jsonObj.getAsJsonArray("target");
      // validate the required field `target` (array)
      for (int i = 0; i < jsonArraytarget.size(); i++) {
        Target.validateJsonElement(jsonArraytarget.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewTaskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewTaskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewTaskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewTaskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<NewTaskRequest>() {
           @Override
           public void write(JsonWriter out, NewTaskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewTaskRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewTaskRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewTaskRequest
   * @throws IOException if the JSON string is invalid with respect to NewTaskRequest
   */
  public static NewTaskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewTaskRequest.class);
  }

  /**
   * Convert an instance of NewTaskRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

