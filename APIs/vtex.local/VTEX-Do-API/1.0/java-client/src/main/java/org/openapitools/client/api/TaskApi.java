/*
 * VTEX Do API
 * VTEX DO is a task management system for authorized users to process orders. It is possible to control notes, and create, update, list, and retrieve tasks.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddCommentRequest;
import org.openapitools.client.model.EditTaskRequest;
import org.openapitools.client.model.NewTaskRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addComment
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param taskId Task ID. (required)
     * @param addCommentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCommentCall(String accept, String contentType, String taskId, AddCommentRequest addCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addCommentRequest;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/comments"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCommentValidateBeforeCall(String accept, String contentType, String taskId, AddCommentRequest addCommentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling addComment(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling addComment(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling addComment(Async)");
        }

        // verify the required parameter 'addCommentRequest' is set
        if (addCommentRequest == null) {
            throw new ApiException("Missing the required parameter 'addCommentRequest' when calling addComment(Async)");
        }

        return addCommentCall(accept, contentType, taskId, addCommentRequest, _callback);

    }

    /**
     * Add Comment on a Task
     * Adds a comment to a given task, filtering by &#x60;taskId&#x60;.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param taskId Task ID. (required)
     * @param addCommentRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object addComment(String accept, String contentType, String taskId, AddCommentRequest addCommentRequest) throws ApiException {
        ApiResponse<Object> localVarResp = addCommentWithHttpInfo(accept, contentType, taskId, addCommentRequest);
        return localVarResp.getData();
    }

    /**
     * Add Comment on a Task
     * Adds a comment to a given task, filtering by &#x60;taskId&#x60;.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param taskId Task ID. (required)
     * @param addCommentRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addCommentWithHttpInfo(String accept, String contentType, String taskId, AddCommentRequest addCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = addCommentValidateBeforeCall(accept, contentType, taskId, addCommentRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Comment on a Task (asynchronously)
     * Adds a comment to a given task, filtering by &#x60;taskId&#x60;.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param taskId Task ID. (required)
     * @param addCommentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCommentAsync(String accept, String contentType, String taskId, AddCommentRequest addCommentRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCommentValidateBeforeCall(accept, contentType, taskId, addCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for editTask
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param taskId Task ID. (required)
     * @param editTaskRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editTaskCall(String accept, String contentType, String taskId, EditTaskRequest editTaskRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editTaskValidateBeforeCall(String accept, String contentType, String taskId, EditTaskRequest editTaskRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling editTask(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling editTask(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling editTask(Async)");
        }

        // verify the required parameter 'editTaskRequest' is set
        if (editTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'editTaskRequest' when calling editTask(Async)");
        }

        return editTaskCall(accept, contentType, taskId, editTaskRequest, _callback);

    }

    /**
     * Update Task
     * Updates a given task&#39;s status, for example, filtering by &#x60;taskId&#x60;.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param taskId Task ID. (required)
     * @param editTaskRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object editTask(String accept, String contentType, String taskId, EditTaskRequest editTaskRequest) throws ApiException {
        ApiResponse<Object> localVarResp = editTaskWithHttpInfo(accept, contentType, taskId, editTaskRequest);
        return localVarResp.getData();
    }

    /**
     * Update Task
     * Updates a given task&#39;s status, for example, filtering by &#x60;taskId&#x60;.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param taskId Task ID. (required)
     * @param editTaskRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> editTaskWithHttpInfo(String accept, String contentType, String taskId, EditTaskRequest editTaskRequest) throws ApiException {
        okhttp3.Call localVarCall = editTaskValidateBeforeCall(accept, contentType, taskId, editTaskRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Task (asynchronously)
     * Updates a given task&#39;s status, for example, filtering by &#x60;taskId&#x60;.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param taskId Task ID. (required)
     * @param editTaskRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editTaskAsync(String accept, String contentType, String taskId, EditTaskRequest editTaskRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = editTaskValidateBeforeCall(accept, contentType, taskId, editTaskRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTask
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param taskId Task ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskCall(String accept, String contentType, String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskValidateBeforeCall(String accept, String contentType, String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getTask(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getTask(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTask(Async)");
        }

        return getTaskCall(accept, contentType, taskId, _callback);

    }

    /**
     * Retrieve Task
     * Retrieves a given task, filtering by &#x60;taskId&#x60;.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param taskId Task ID. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object getTask(String accept, String contentType, String taskId) throws ApiException {
        ApiResponse<Object> localVarResp = getTaskWithHttpInfo(accept, contentType, taskId);
        return localVarResp.getData();
    }

    /**
     * Retrieve Task
     * Retrieves a given task, filtering by &#x60;taskId&#x60;.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param taskId Task ID. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getTaskWithHttpInfo(String accept, String contentType, String taskId) throws ApiException {
        okhttp3.Call localVarCall = getTaskValidateBeforeCall(accept, contentType, taskId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Task (asynchronously)
     * Retrieves a given task, filtering by &#x60;taskId&#x60;.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param taskId Task ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskAsync(String accept, String contentType, String taskId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskValidateBeforeCall(accept, contentType, taskId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listtasksbyassignee
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param assigneeEmail If you wish to list tasks by assignee, insert the desired assignee&#39;s email and status. (optional)
     * @param targetId If you wish to list tasks by target, insert the desired &#x60;targetId&#x60; and &#x60;status&#x60;. (optional)
     * @param context If you wish to list tasks by context, insert the desired context, &#x60;page&#x60;, &#x60;perPage&#x60; and &#x60;status&#x60;. (optional)
     * @param page If you wish to list tasks by context, also insert the desired &#x60;page&#x60;. (optional)
     * @param perPage If you wish to list tasks by context, also insert the desired &#x60;perPage&#x60; value. (optional)
     * @param status If you wish to list tasks by context, also insert the desired &#x60;status&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listtasksbyassigneeCall(String accept, String contentType, String assigneeEmail, String targetId, String context, String page, String perPage, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assigneeEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assignee.email", assigneeEmail));
        }

        if (targetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target.id", targetId));
        }

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listtasksbyassigneeValidateBeforeCall(String accept, String contentType, String assigneeEmail, String targetId, String context, String page, String perPage, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling listtasksbyassignee(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listtasksbyassignee(Async)");
        }

        return listtasksbyassigneeCall(accept, contentType, assigneeEmail, targetId, context, page, perPage, status, _callback);

    }

    /**
     * List tasks
     * This endpoint allows you to filter tasks. You can choose between the following filtering options:     - **Assignees:** using &#x60;assignee.email&#x60; and &#x60;status&#x60;. Example: &#x60;https://{{accountName}}.{{environment}}.com.br/api/do/tasks?assignee.email&#x3D;{{person@email.com}}&amp;status&#x3D;{{open}}&#x60;.     - **Targets:** using &#x60;targetId&#x60; and &#x60;status&#x60;. Example: &#x60;https://{{accountName}}.{{environment}}.com.br/api/do/tasks?target.id&#x3D;{{name}}&amp;status&#x3D;{{open}}&#x60;.     - **Paged tasks:** using &#x60;page&#x60;, &#x60;perPage&#x60; and &#x60;status&#x60;. Example: &#x60;https://{{accountName}}.{{environment}}.com.br/api/do/tasks?page&#x3D;{{1}}&amp;perPage&#x3D;{{10}}&amp;status&#x3D;;{{-Closed}}&#x60;.     - **Context:** using &#x60;context&#x60;, &#x60;page&#x60;, &#x60;perPage&#x60; and &#x60;status&#x60;. Example: &#x60;https://{{accountName}}.{{environment}}.com.br/api/do/tasks?context&#x3D;{{context}}&amp;page&#x3D;{{1}}&amp;perPage&#x3D;{{10}}&amp;status&#x3D;{{-Closed}}&#x60;.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param assigneeEmail If you wish to list tasks by assignee, insert the desired assignee&#39;s email and status. (optional)
     * @param targetId If you wish to list tasks by target, insert the desired &#x60;targetId&#x60; and &#x60;status&#x60;. (optional)
     * @param context If you wish to list tasks by context, insert the desired context, &#x60;page&#x60;, &#x60;perPage&#x60; and &#x60;status&#x60;. (optional)
     * @param page If you wish to list tasks by context, also insert the desired &#x60;page&#x60;. (optional)
     * @param perPage If you wish to list tasks by context, also insert the desired &#x60;perPage&#x60; value. (optional)
     * @param status If you wish to list tasks by context, also insert the desired &#x60;status&#x60;. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object listtasksbyassignee(String accept, String contentType, String assigneeEmail, String targetId, String context, String page, String perPage, String status) throws ApiException {
        ApiResponse<Object> localVarResp = listtasksbyassigneeWithHttpInfo(accept, contentType, assigneeEmail, targetId, context, page, perPage, status);
        return localVarResp.getData();
    }

    /**
     * List tasks
     * This endpoint allows you to filter tasks. You can choose between the following filtering options:     - **Assignees:** using &#x60;assignee.email&#x60; and &#x60;status&#x60;. Example: &#x60;https://{{accountName}}.{{environment}}.com.br/api/do/tasks?assignee.email&#x3D;{{person@email.com}}&amp;status&#x3D;{{open}}&#x60;.     - **Targets:** using &#x60;targetId&#x60; and &#x60;status&#x60;. Example: &#x60;https://{{accountName}}.{{environment}}.com.br/api/do/tasks?target.id&#x3D;{{name}}&amp;status&#x3D;{{open}}&#x60;.     - **Paged tasks:** using &#x60;page&#x60;, &#x60;perPage&#x60; and &#x60;status&#x60;. Example: &#x60;https://{{accountName}}.{{environment}}.com.br/api/do/tasks?page&#x3D;{{1}}&amp;perPage&#x3D;{{10}}&amp;status&#x3D;;{{-Closed}}&#x60;.     - **Context:** using &#x60;context&#x60;, &#x60;page&#x60;, &#x60;perPage&#x60; and &#x60;status&#x60;. Example: &#x60;https://{{accountName}}.{{environment}}.com.br/api/do/tasks?context&#x3D;{{context}}&amp;page&#x3D;{{1}}&amp;perPage&#x3D;{{10}}&amp;status&#x3D;{{-Closed}}&#x60;.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param assigneeEmail If you wish to list tasks by assignee, insert the desired assignee&#39;s email and status. (optional)
     * @param targetId If you wish to list tasks by target, insert the desired &#x60;targetId&#x60; and &#x60;status&#x60;. (optional)
     * @param context If you wish to list tasks by context, insert the desired context, &#x60;page&#x60;, &#x60;perPage&#x60; and &#x60;status&#x60;. (optional)
     * @param page If you wish to list tasks by context, also insert the desired &#x60;page&#x60;. (optional)
     * @param perPage If you wish to list tasks by context, also insert the desired &#x60;perPage&#x60; value. (optional)
     * @param status If you wish to list tasks by context, also insert the desired &#x60;status&#x60;. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listtasksbyassigneeWithHttpInfo(String accept, String contentType, String assigneeEmail, String targetId, String context, String page, String perPage, String status) throws ApiException {
        okhttp3.Call localVarCall = listtasksbyassigneeValidateBeforeCall(accept, contentType, assigneeEmail, targetId, context, page, perPage, status, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List tasks (asynchronously)
     * This endpoint allows you to filter tasks. You can choose between the following filtering options:     - **Assignees:** using &#x60;assignee.email&#x60; and &#x60;status&#x60;. Example: &#x60;https://{{accountName}}.{{environment}}.com.br/api/do/tasks?assignee.email&#x3D;{{person@email.com}}&amp;status&#x3D;{{open}}&#x60;.     - **Targets:** using &#x60;targetId&#x60; and &#x60;status&#x60;. Example: &#x60;https://{{accountName}}.{{environment}}.com.br/api/do/tasks?target.id&#x3D;{{name}}&amp;status&#x3D;{{open}}&#x60;.     - **Paged tasks:** using &#x60;page&#x60;, &#x60;perPage&#x60; and &#x60;status&#x60;. Example: &#x60;https://{{accountName}}.{{environment}}.com.br/api/do/tasks?page&#x3D;{{1}}&amp;perPage&#x3D;{{10}}&amp;status&#x3D;;{{-Closed}}&#x60;.     - **Context:** using &#x60;context&#x60;, &#x60;page&#x60;, &#x60;perPage&#x60; and &#x60;status&#x60;. Example: &#x60;https://{{accountName}}.{{environment}}.com.br/api/do/tasks?context&#x3D;{{context}}&amp;page&#x3D;{{1}}&amp;perPage&#x3D;{{10}}&amp;status&#x3D;{{-Closed}}&#x60;.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param assigneeEmail If you wish to list tasks by assignee, insert the desired assignee&#39;s email and status. (optional)
     * @param targetId If you wish to list tasks by target, insert the desired &#x60;targetId&#x60; and &#x60;status&#x60;. (optional)
     * @param context If you wish to list tasks by context, insert the desired context, &#x60;page&#x60;, &#x60;perPage&#x60; and &#x60;status&#x60;. (optional)
     * @param page If you wish to list tasks by context, also insert the desired &#x60;page&#x60;. (optional)
     * @param perPage If you wish to list tasks by context, also insert the desired &#x60;perPage&#x60; value. (optional)
     * @param status If you wish to list tasks by context, also insert the desired &#x60;status&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listtasksbyassigneeAsync(String accept, String contentType, String assigneeEmail, String targetId, String context, String page, String perPage, String status, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listtasksbyassigneeValidateBeforeCall(accept, contentType, assigneeEmail, targetId, context, page, perPage, status, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for newTask
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param newTaskRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newTaskCall(String contentType, String accept, NewTaskRequest newTaskRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newTaskRequest;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newTaskValidateBeforeCall(String contentType, String accept, NewTaskRequest newTaskRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling newTask(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling newTask(Async)");
        }

        // verify the required parameter 'newTaskRequest' is set
        if (newTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'newTaskRequest' when calling newTask(Async)");
        }

        return newTaskCall(contentType, accept, newTaskRequest, _callback);

    }

    /**
     * Create Task
     * Creates a new task in VTEX DO.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param newTaskRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object newTask(String contentType, String accept, NewTaskRequest newTaskRequest) throws ApiException {
        ApiResponse<Object> localVarResp = newTaskWithHttpInfo(contentType, accept, newTaskRequest);
        return localVarResp.getData();
    }

    /**
     * Create Task
     * Creates a new task in VTEX DO.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param newTaskRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> newTaskWithHttpInfo(String contentType, String accept, NewTaskRequest newTaskRequest) throws ApiException {
        okhttp3.Call localVarCall = newTaskValidateBeforeCall(contentType, accept, newTaskRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Task (asynchronously)
     * Creates a new task in VTEX DO.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param newTaskRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newTaskAsync(String contentType, String accept, NewTaskRequest newTaskRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = newTaskValidateBeforeCall(contentType, accept, newTaskRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
