/**
 * VTEX Do API
 * VTEX DO is a task management system for authorized users to process orders. It is possible to control notes, and create, update, list, and retrieve tasks.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewNote_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewNote_request::OAINewNote_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewNote_request::OAINewNote_request() {
    this->initializeModel();
}

OAINewNote_request::~OAINewNote_request() {}

void OAINewNote_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAINewNote_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewNote_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAINewNote_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewNote_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAINewNote_request::getDescription() const {
    return m_description;
}
void OAINewNote_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINewNote_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAINewNote_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAINewNote_request::getDomain() const {
    return m_domain;
}
void OAINewNote_request::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAINewNote_request::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAINewNote_request::is_domain_Valid() const{
    return m_domain_isValid;
}

OAINewNote_request_target OAINewNote_request::getTarget() const {
    return m_target;
}
void OAINewNote_request::setTarget(const OAINewNote_request_target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAINewNote_request::is_target_Set() const{
    return m_target_isSet;
}

bool OAINewNote_request::is_target_Valid() const{
    return m_target_isValid;
}

bool OAINewNote_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewNote_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_domain_isValid && m_target_isValid && true;
}

} // namespace OpenAPI
