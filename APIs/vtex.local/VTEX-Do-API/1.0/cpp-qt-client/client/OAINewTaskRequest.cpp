/**
 * VTEX Do API
 * VTEX DO is a task management system for authorized users to process orders. It is possible to control notes, and create, update, list, and retrieve tasks.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewTaskRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewTaskRequest::OAINewTaskRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewTaskRequest::OAINewTaskRequest() {
    this->initializeModel();
}

OAINewTaskRequest::~OAINewTaskRequest() {}

void OAINewTaskRequest::initializeModel() {

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_followers_isSet = false;
    m_followers_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_task_id_isSet = false;
    m_parent_task_id_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_surrogate_key_isSet = false;
    m_surrogate_key_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAINewTaskRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewTaskRequest::fromJsonObject(QJsonObject json) {

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_followers_isValid = ::OpenAPI::fromJsonValue(m_followers, json[QString("followers")]);
    m_followers_isSet = !json[QString("followers")].isNull() && m_followers_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_task_id_isValid = ::OpenAPI::fromJsonValue(m_parent_task_id, json[QString("parentTaskId")]);
    m_parent_task_id_isSet = !json[QString("parentTaskId")].isNull() && m_parent_task_id_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_surrogate_key_isValid = ::OpenAPI::fromJsonValue(m_surrogate_key, json[QString("surrogateKey")]);
    m_surrogate_key_isSet = !json[QString("surrogateKey")].isNull() && m_surrogate_key_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAINewTaskRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewTaskRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_followers.size() > 0) {
        obj.insert(QString("followers"), ::OpenAPI::toJsonValue(m_followers));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_task_id_isSet) {
        obj.insert(QString("parentTaskId"), ::OpenAPI::toJsonValue(m_parent_task_id));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_surrogate_key_isSet) {
        obj.insert(QString("surrogateKey"), ::OpenAPI::toJsonValue(m_surrogate_key));
    }
    if (m_target.size() > 0) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

OAIAssignee OAINewTaskRequest::getAssignee() const {
    return m_assignee;
}
void OAINewTaskRequest::setAssignee(const OAIAssignee &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAINewTaskRequest::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAINewTaskRequest::is_assignee_Valid() const{
    return m_assignee_isValid;
}

QString OAINewTaskRequest::getContext() const {
    return m_context;
}
void OAINewTaskRequest::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAINewTaskRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAINewTaskRequest::is_context_Valid() const{
    return m_context_isValid;
}

QString OAINewTaskRequest::getDescription() const {
    return m_description;
}
void OAINewTaskRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINewTaskRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAINewTaskRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAINewTaskRequest::getDomain() const {
    return m_domain;
}
void OAINewTaskRequest::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAINewTaskRequest::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAINewTaskRequest::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAINewTaskRequest::getDueDate() const {
    return m_due_date;
}
void OAINewTaskRequest::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAINewTaskRequest::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAINewTaskRequest::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QList<OAIFollower> OAINewTaskRequest::getFollowers() const {
    return m_followers;
}
void OAINewTaskRequest::setFollowers(const QList<OAIFollower> &followers) {
    m_followers = followers;
    m_followers_isSet = true;
}

bool OAINewTaskRequest::is_followers_Set() const{
    return m_followers_isSet;
}

bool OAINewTaskRequest::is_followers_Valid() const{
    return m_followers_isValid;
}

QString OAINewTaskRequest::getName() const {
    return m_name;
}
void OAINewTaskRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINewTaskRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAINewTaskRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINewTaskRequest::getParentTaskId() const {
    return m_parent_task_id;
}
void OAINewTaskRequest::setParentTaskId(const QString &parent_task_id) {
    m_parent_task_id = parent_task_id;
    m_parent_task_id_isSet = true;
}

bool OAINewTaskRequest::is_parent_task_id_Set() const{
    return m_parent_task_id_isSet;
}

bool OAINewTaskRequest::is_parent_task_id_Valid() const{
    return m_parent_task_id_isValid;
}

QString OAINewTaskRequest::getPriority() const {
    return m_priority;
}
void OAINewTaskRequest::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAINewTaskRequest::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAINewTaskRequest::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAINewTaskRequest::getSurrogateKey() const {
    return m_surrogate_key;
}
void OAINewTaskRequest::setSurrogateKey(const QString &surrogate_key) {
    m_surrogate_key = surrogate_key;
    m_surrogate_key_isSet = true;
}

bool OAINewTaskRequest::is_surrogate_key_Set() const{
    return m_surrogate_key_isSet;
}

bool OAINewTaskRequest::is_surrogate_key_Valid() const{
    return m_surrogate_key_isValid;
}

QList<OAITarget> OAINewTaskRequest::getTarget() const {
    return m_target;
}
void OAINewTaskRequest::setTarget(const QList<OAITarget> &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAINewTaskRequest::is_target_Set() const{
    return m_target_isSet;
}

bool OAINewTaskRequest::is_target_Valid() const{
    return m_target_isValid;
}

bool OAINewTaskRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_followers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surrogate_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewTaskRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assignee_isValid && m_context_isValid && m_description_isValid && m_domain_isValid && m_due_date_isValid && m_followers_isValid && m_name_isValid && m_parent_task_id_isValid && m_priority_isValid && m_surrogate_key_isValid && m_target_isValid && true;
}

} // namespace OpenAPI
