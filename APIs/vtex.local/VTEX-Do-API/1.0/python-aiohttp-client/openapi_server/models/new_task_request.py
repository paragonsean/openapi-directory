# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assignee import Assignee
from openapi_server.models.follower import Follower
from openapi_server.models.target import Target
from openapi_server import util


class NewTaskRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignee: Assignee=None, context: str=None, description: str=None, domain: str=None, due_date: str=None, followers: List[Follower]=None, name: str=None, parent_task_id: str=None, priority: str=None, surrogate_key: str=None, target: List[Target]=None):
        """NewTaskRequest - a model defined in OpenAPI

        :param assignee: The assignee of this NewTaskRequest.
        :param context: The context of this NewTaskRequest.
        :param description: The description of this NewTaskRequest.
        :param domain: The domain of this NewTaskRequest.
        :param due_date: The due_date of this NewTaskRequest.
        :param followers: The followers of this NewTaskRequest.
        :param name: The name of this NewTaskRequest.
        :param parent_task_id: The parent_task_id of this NewTaskRequest.
        :param priority: The priority of this NewTaskRequest.
        :param surrogate_key: The surrogate_key of this NewTaskRequest.
        :param target: The target of this NewTaskRequest.
        """
        self.openapi_types = {
            'assignee': Assignee,
            'context': str,
            'description': str,
            'domain': str,
            'due_date': str,
            'followers': List[Follower],
            'name': str,
            'parent_task_id': str,
            'priority': str,
            'surrogate_key': str,
            'target': List[Target]
        }

        self.attribute_map = {
            'assignee': 'assignee',
            'context': 'context',
            'description': 'description',
            'domain': 'domain',
            'due_date': 'dueDate',
            'followers': 'followers',
            'name': 'name',
            'parent_task_id': 'parentTaskId',
            'priority': 'priority',
            'surrogate_key': 'surrogateKey',
            'target': 'target'
        }

        self._assignee = assignee
        self._context = context
        self._description = description
        self._domain = domain
        self._due_date = due_date
        self._followers = followers
        self._name = name
        self._parent_task_id = parent_task_id
        self._priority = priority
        self._surrogate_key = surrogate_key
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewTaskRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewTaskRequest of this NewTaskRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignee(self):
        """Gets the assignee of this NewTaskRequest.


        :return: The assignee of this NewTaskRequest.
        :rtype: Assignee
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this NewTaskRequest.


        :param assignee: The assignee of this NewTaskRequest.
        :type assignee: Assignee
        """
        if assignee is None:
            raise ValueError("Invalid value for `assignee`, must not be `None`")

        self._assignee = assignee

    @property
    def context(self):
        """Gets the context of this NewTaskRequest.


        :return: The context of this NewTaskRequest.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this NewTaskRequest.


        :param context: The context of this NewTaskRequest.
        :type context: str
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def description(self):
        """Gets the description of this NewTaskRequest.


        :return: The description of this NewTaskRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewTaskRequest.


        :param description: The description of this NewTaskRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def domain(self):
        """Gets the domain of this NewTaskRequest.


        :return: The domain of this NewTaskRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this NewTaskRequest.


        :param domain: The domain of this NewTaskRequest.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def due_date(self):
        """Gets the due_date of this NewTaskRequest.


        :return: The due_date of this NewTaskRequest.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this NewTaskRequest.


        :param due_date: The due_date of this NewTaskRequest.
        :type due_date: str
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")

        self._due_date = due_date

    @property
    def followers(self):
        """Gets the followers of this NewTaskRequest.

        

        :return: The followers of this NewTaskRequest.
        :rtype: List[Follower]
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this NewTaskRequest.

        

        :param followers: The followers of this NewTaskRequest.
        :type followers: List[Follower]
        """
        if followers is None:
            raise ValueError("Invalid value for `followers`, must not be `None`")

        self._followers = followers

    @property
    def name(self):
        """Gets the name of this NewTaskRequest.


        :return: The name of this NewTaskRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewTaskRequest.


        :param name: The name of this NewTaskRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parent_task_id(self):
        """Gets the parent_task_id of this NewTaskRequest.


        :return: The parent_task_id of this NewTaskRequest.
        :rtype: str
        """
        return self._parent_task_id

    @parent_task_id.setter
    def parent_task_id(self, parent_task_id):
        """Sets the parent_task_id of this NewTaskRequest.


        :param parent_task_id: The parent_task_id of this NewTaskRequest.
        :type parent_task_id: str
        """
        if parent_task_id is None:
            raise ValueError("Invalid value for `parent_task_id`, must not be `None`")

        self._parent_task_id = parent_task_id

    @property
    def priority(self):
        """Gets the priority of this NewTaskRequest.


        :return: The priority of this NewTaskRequest.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this NewTaskRequest.


        :param priority: The priority of this NewTaskRequest.
        :type priority: str
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def surrogate_key(self):
        """Gets the surrogate_key of this NewTaskRequest.


        :return: The surrogate_key of this NewTaskRequest.
        :rtype: str
        """
        return self._surrogate_key

    @surrogate_key.setter
    def surrogate_key(self, surrogate_key):
        """Sets the surrogate_key of this NewTaskRequest.


        :param surrogate_key: The surrogate_key of this NewTaskRequest.
        :type surrogate_key: str
        """
        if surrogate_key is None:
            raise ValueError("Invalid value for `surrogate_key`, must not be `None`")

        self._surrogate_key = surrogate_key

    @property
    def target(self):
        """Gets the target of this NewTaskRequest.

        

        :return: The target of this NewTaskRequest.
        :rtype: List[Target]
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this NewTaskRequest.

        

        :param target: The target of this NewTaskRequest.
        :type target: List[Target]
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target
