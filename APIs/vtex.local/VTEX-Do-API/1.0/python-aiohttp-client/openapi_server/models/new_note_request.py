# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.new_note_request_target import NewNoteRequestTarget
from openapi_server import util


class NewNoteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, domain: str=None, target: NewNoteRequestTarget=None):
        """NewNoteRequest - a model defined in OpenAPI

        :param description: The description of this NewNoteRequest.
        :param domain: The domain of this NewNoteRequest.
        :param target: The target of this NewNoteRequest.
        """
        self.openapi_types = {
            'description': str,
            'domain': str,
            'target': NewNoteRequestTarget
        }

        self.attribute_map = {
            'description': 'description',
            'domain': 'domain',
            'target': 'target'
        }

        self._description = description
        self._domain = domain
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewNoteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewNote_request of this NewNoteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this NewNoteRequest.

        Note description. Maximum number of characters: 2000.

        :return: The description of this NewNoteRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewNoteRequest.

        Note description. Maximum number of characters: 2000.

        :param description: The description of this NewNoteRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def domain(self):
        """Gets the domain of this NewNoteRequest.

        Note domain.

        :return: The domain of this NewNoteRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this NewNoteRequest.

        Note domain.

        :param domain: The domain of this NewNoteRequest.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def target(self):
        """Gets the target of this NewNoteRequest.


        :return: The target of this NewNoteRequest.
        :rtype: NewNoteRequestTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this NewNoteRequest.


        :param target: The target of this NewNoteRequest.
        :type target: NewNoteRequestTarget
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target
