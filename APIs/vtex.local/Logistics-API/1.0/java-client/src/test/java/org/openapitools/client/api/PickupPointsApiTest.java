/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateUpdate;
import org.openapitools.client.model.CreateUpdatePickupPointRequest;
import org.openapitools.client.model.GetById1;
import org.openapitools.client.model.ListAllPickupPpoints200ResponseInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PickupPointsApi
 */
@Disabled
public class PickupPointsApiTest {

    private final PickupPointsApi api = new PickupPointsApi();

    /**
     * Create/Update Pickup Point
     *
     * Creates or updates [pickup points](https://help.vtex.com/en/subcategory/pickup-points--1c5Btie9ou2Gg2iUo0ggqM#) in your store by Pickup Point ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUpdatePickupPointTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String pickupPointId = null;
        CreateUpdatePickupPointRequest createUpdatePickupPointRequest = null;
        CreateUpdate response = api.createUpdatePickupPoint(contentType, accept, pickupPointId, createUpdatePickupPointRequest);
        // TODO: test validations
    }

    /**
     * Delete Pickup Point
     *
     * Deletes a given pickup point for your store, by pickup point ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String pickupPointId = null;
        api.delete(contentType, accept, pickupPointId);
        // TODO: test validations
    }

    /**
     * List Pickup Point By ID
     *
     * Lists your store&#39;s pickup points while searching by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String pickupPointId = null;
        GetById1 response = api.getById(contentType, accept, pickupPointId);
        // TODO: test validations
    }

    /**
     * List paged Pickup Points
     *
     * Lists paged pickup points in your store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getpagedTest() throws ApiException {
        String page = null;
        String pageSize = null;
        String keyword = null;
        String contentType = null;
        String accept = null;
        api.getpaged(page, pageSize, keyword, contentType, accept);
        // TODO: test validations
    }

    /**
     * List all pickup points
     *
     * Lists all of your store&#39;s pickup points.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllPickupPpointsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        List<ListAllPickupPpoints200ResponseInner> response = api.listAllPickupPpoints(contentType, accept);
        // TODO: test validations
    }

}
