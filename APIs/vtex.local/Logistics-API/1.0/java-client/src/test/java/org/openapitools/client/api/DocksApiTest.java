/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AllDocks200ResponseInner;
import org.openapitools.client.model.CreateUpdateDockRequest;
import org.openapitools.client.model.DockById200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocksApi
 */
@Disabled
public class DocksApiTest {

    private final DocksApi api = new DocksApi();

    /**
     * Activate dock
     *
     * Activates dock through dock ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateDockTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String dockId = null;
        api.activateDock(contentType, accept, dockId);
        // TODO: test validations
    }

    /**
     * List all  docks
     *
     * Informs a list of all docks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void allDocksTest() throws ApiException {
        String contentType = null;
        String accept = null;
        List<AllDocks200ResponseInner> response = api.allDocks(contentType, accept);
        // TODO: test validations
    }

    /**
     * Create/update dock
     *
     * Creates or updates docks to be used in your logistic operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUpdateDockTest() throws ApiException {
        String contentType = null;
        String accept = null;
        CreateUpdateDockRequest createUpdateDockRequest = null;
        api.createUpdateDock(contentType, accept, createUpdateDockRequest);
        // TODO: test validations
    }

    /**
     * Deactivate dock
     *
     * Deactivate dock by dock ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateDockTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String dockId = null;
        api.deactivateDock(contentType, accept, dockId);
        // TODO: test validations
    }

    /**
     * Delete dock
     *
     * Deletes dock by dock ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dockTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String dockId = null;
        api.dock(contentType, accept, dockId);
        // TODO: test validations
    }

    /**
     * List dock by ID
     *
     * Informs a given dock&#39;s information, searching by dock ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dockByIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String dockId = null;
        DockById200Response response = api.dockById(contentType, accept, dockId);
        // TODO: test validations
    }

}
