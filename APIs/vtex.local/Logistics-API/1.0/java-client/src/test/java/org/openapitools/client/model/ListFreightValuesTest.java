/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ListFreightValues
 */
public class ListFreightValuesTest {
    private final ListFreightValues model = new ListFreightValues();

    /**
     * Model tests for ListFreightValues
     */
    @Test
    public void testListFreightValues() {
        // TODO: test ListFreightValues
    }

    /**
     * Test the property 'absoluteMoneyCost'
     */
    @Test
    public void absoluteMoneyCostTest() {
        // TODO: test absoluteMoneyCost
    }

    /**
     * Test the property 'country'
     */
    @Test
    public void countryTest() {
        // TODO: test country
    }

    /**
     * Test the property 'maxVolume'
     */
    @Test
    public void maxVolumeTest() {
        // TODO: test maxVolume
    }

    /**
     * Test the property 'minimumValueInsurance'
     */
    @Test
    public void minimumValueInsuranceTest() {
        // TODO: test minimumValueInsurance
    }

    /**
     * Test the property 'operationType'
     */
    @Test
    public void operationTypeTest() {
        // TODO: test operationType
    }

    /**
     * Test the property 'polygon'
     */
    @Test
    public void polygonTest() {
        // TODO: test polygon
    }

    /**
     * Test the property 'pricePercent'
     */
    @Test
    public void pricePercentTest() {
        // TODO: test pricePercent
    }

    /**
     * Test the property 'pricePercentByWeight'
     */
    @Test
    public void pricePercentByWeightTest() {
        // TODO: test pricePercentByWeight
    }

    /**
     * Test the property 'restrictedFreights'
     */
    @Test
    public void restrictedFreightsTest() {
        // TODO: test restrictedFreights
    }

    /**
     * Test the property 'timeCost'
     */
    @Test
    public void timeCostTest() {
        // TODO: test timeCost
    }

    /**
     * Test the property 'weightEnd'
     */
    @Test
    public void weightEndTest() {
        // TODO: test weightEnd
    }

    /**
     * Test the property 'weightStart'
     */
    @Test
    public void weightStartTest() {
        // TODO: test weightStart
    }

    /**
     * Test the property 'zipCodeEnd'
     */
    @Test
    public void zipCodeEndTest() {
        // TODO: test zipCodeEnd
    }

    /**
     * Test the property 'zipCodeStart'
     */
    @Test
    public void zipCodeStartTest() {
        // TODO: test zipCodeStart
    }

}
