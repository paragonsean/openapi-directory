/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Getinventorywithdispatchedreservations200ResponseInner;
import org.openapitools.client.model.InventoryBySku200Response;
import org.openapitools.client.model.Inventoryperdock200ResponseInner;
import org.openapitools.client.model.SaveSupplyLot;
import org.openapitools.client.model.UpdateInventoryBySkuandWarehouseRequest1;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InventoryApi
 */
@Disabled
public class InventoryApiTest {

    private final InventoryApi api = new InventoryApi();

    /**
     * List supply lots
     *
     * Returns a list of the supply lots of an SKU in a specific warehouse.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSupplyLotsTest() throws ApiException {
        String accept = null;
        String contentType = null;
        String skuId = null;
        String warehouseId = null;
        api.getSupplyLots(accept, contentType, skuId, warehouseId);
        // TODO: test validations
    }

    /**
     * List inventory with dispatched reservations
     *
     * Lists inventory with dispatched reservations. When the number of active reservations is more than 2000 the return is an error with status code 400 (BadRequest) and the message: Too many active reservations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getinventorywithdispatchedreservationsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String itemId = null;
        String warehouseId = null;
        List<Getinventorywithdispatchedreservations200ResponseInner> response = api.getinventorywithdispatchedreservations(contentType, accept, itemId, warehouseId);
        // TODO: test validations
    }

    /**
     * List inventory by SKU
     *
     * Lists your store&#39;s inventory by SKU ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryBySkuTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String skuId = null;
        InventoryBySku200Response response = api.inventoryBySku(contentType, accept, skuId);
        // TODO: test validations
    }

    /**
     * List inventory per dock
     *
     * Lists inventory information per dock set up in your store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryperdockTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String skuId = null;
        String dockId = null;
        List<Inventoryperdock200ResponseInner> response = api.inventoryperdock(contentType, accept, skuId, dockId);
        // TODO: test validations
    }

    /**
     * List inventory per dock and warehouse
     *
     * Lists information of inventory per dock and warehouse.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryperdockandwarehouseTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String skuId = null;
        String dockId = null;
        String warehouseId = null;
        List<Inventoryperdock200ResponseInner> response = api.inventoryperdockandwarehouse(contentType, accept, skuId, dockId, warehouseId);
        // TODO: test validations
    }

    /**
     * List inventory per warehouse
     *
     * Lists inventory information per warehouse on your store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inventoryperwarehouseTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String skuId = null;
        String warehouseId = null;
        List<Inventoryperdock200ResponseInner> response = api.inventoryperwarehouse(contentType, accept, skuId, warehouseId);
        // TODO: test validations
    }

    /**
     * Save supply lot
     *
     * Creates a new Supply Lot. A Supply Lot lets the store sell products that are not currently available in stock but whose arrival is already scheduled.  Check out our [documentation](https://help.vtex.com/en/tutorial/setting-up-future-inventory--UMSGjooqRfkRbeoh94kS4) about this feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void saveSupplyLotTest() throws ApiException {
        String accept = null;
        String contentType = null;
        String skuId = null;
        String warehouseId = null;
        String supplyLotId = null;
        SaveSupplyLot saveSupplyLot = null;
        api.saveSupplyLot(accept, contentType, skuId, warehouseId, supplyLotId, saveSupplyLot);
        // TODO: test validations
    }

    /**
     * Transfer supply lot
     *
     * Transfers an SKU from a Supply Lot to the currently available inventory.  Check out how this transfer works in further detail by reading our [documentation](https://help.vtex.com/pt/tutorial/configurar-estoque-futuro--UMSGjooqRfkRbeoh94kS4) about this feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transferSupplyLotTest() throws ApiException {
        String accept = null;
        String contentType = null;
        String skuId = null;
        String warehouseId = null;
        String supplyLotId = null;
        api.transferSupplyLot(accept, contentType, skuId, warehouseId, supplyLotId);
        // TODO: test validations
    }

    /**
     * Update inventory by SKU and warehouse
     *
     * Updates inventory for a given SKU and warehouse.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInventoryBySkuandWarehouseTest() throws ApiException {
        String accept = null;
        String contentType = null;
        String skuId = null;
        String warehouseId = null;
        UpdateInventoryBySkuandWarehouseRequest1 updateInventoryBySkuandWarehouseRequest1 = null;
        api.updateInventoryBySkuandWarehouse(accept, contentType, skuId, warehouseId, updateInventoryBySkuandWarehouseRequest1);
        // TODO: test validations
    }

}
