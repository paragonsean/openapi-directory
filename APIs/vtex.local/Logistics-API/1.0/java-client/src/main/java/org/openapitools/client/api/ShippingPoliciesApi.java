/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RequestBody;
import org.openapitools.client.model.RequestBody1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShippingPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShippingPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShippingPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiLogisticsPvtShippingPoliciesGet
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param page Desired number of pages to retrieve information from your Shipping Policies. (required)
     * @param perPage Desired number of items per page, to retrieve information from your Shipping Policies. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLogisticsPvtShippingPoliciesGetCall(String accept, String contentType, String page, String perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/shipping-policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiLogisticsPvtShippingPoliciesGetValidateBeforeCall(String accept, String contentType, String page, String perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiLogisticsPvtShippingPoliciesGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiLogisticsPvtShippingPoliciesGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling apiLogisticsPvtShippingPoliciesGet(Async)");
        }

        // verify the required parameter 'perPage' is set
        if (perPage == null) {
            throw new ApiException("Missing the required parameter 'perPage' when calling apiLogisticsPvtShippingPoliciesGet(Async)");
        }

        return apiLogisticsPvtShippingPoliciesGetCall(accept, contentType, page, perPage, _callback);

    }

    /**
     * List shipping policies
     * This endpoint lists existing shipping policies from carriers in your store.    &gt; Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param page Desired number of pages to retrieve information from your Shipping Policies. (required)
     * @param perPage Desired number of items per page, to retrieve information from your Shipping Policies. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiLogisticsPvtShippingPoliciesGet(String accept, String contentType, String page, String perPage) throws ApiException {
        apiLogisticsPvtShippingPoliciesGetWithHttpInfo(accept, contentType, page, perPage);
    }

    /**
     * List shipping policies
     * This endpoint lists existing shipping policies from carriers in your store.    &gt; Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param page Desired number of pages to retrieve information from your Shipping Policies. (required)
     * @param perPage Desired number of items per page, to retrieve information from your Shipping Policies. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiLogisticsPvtShippingPoliciesGetWithHttpInfo(String accept, String contentType, String page, String perPage) throws ApiException {
        okhttp3.Call localVarCall = apiLogisticsPvtShippingPoliciesGetValidateBeforeCall(accept, contentType, page, perPage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List shipping policies (asynchronously)
     * This endpoint lists existing shipping policies from carriers in your store.    &gt; Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param page Desired number of pages to retrieve information from your Shipping Policies. (required)
     * @param perPage Desired number of items per page, to retrieve information from your Shipping Policies. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLogisticsPvtShippingPoliciesGetAsync(String accept, String contentType, String page, String perPage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiLogisticsPvtShippingPoliciesGetValidateBeforeCall(accept, contentType, page, perPage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiLogisticsPvtShippingPoliciesIdDelete
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param id ID of the shipping policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLogisticsPvtShippingPoliciesIdDeleteCall(String accept, String contentType, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/shipping-policies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiLogisticsPvtShippingPoliciesIdDeleteValidateBeforeCall(String accept, String contentType, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiLogisticsPvtShippingPoliciesIdDelete(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiLogisticsPvtShippingPoliciesIdDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiLogisticsPvtShippingPoliciesIdDelete(Async)");
        }

        return apiLogisticsPvtShippingPoliciesIdDeleteCall(accept, contentType, id, _callback);

    }

    /**
     * Delete shipping policies by ID
     * This endpoint deletes existing shipping policies from carriers in your store, searching by their IDs.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param id ID of the shipping policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiLogisticsPvtShippingPoliciesIdDelete(String accept, String contentType, String id) throws ApiException {
        apiLogisticsPvtShippingPoliciesIdDeleteWithHttpInfo(accept, contentType, id);
    }

    /**
     * Delete shipping policies by ID
     * This endpoint deletes existing shipping policies from carriers in your store, searching by their IDs.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param id ID of the shipping policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiLogisticsPvtShippingPoliciesIdDeleteWithHttpInfo(String accept, String contentType, String id) throws ApiException {
        okhttp3.Call localVarCall = apiLogisticsPvtShippingPoliciesIdDeleteValidateBeforeCall(accept, contentType, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete shipping policies by ID (asynchronously)
     * This endpoint deletes existing shipping policies from carriers in your store, searching by their IDs.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param id ID of the shipping policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLogisticsPvtShippingPoliciesIdDeleteAsync(String accept, String contentType, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiLogisticsPvtShippingPoliciesIdDeleteValidateBeforeCall(accept, contentType, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiLogisticsPvtShippingPoliciesIdGet
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param id ID of the shipping policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLogisticsPvtShippingPoliciesIdGetCall(String accept, String contentType, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/shipping-policies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiLogisticsPvtShippingPoliciesIdGetValidateBeforeCall(String accept, String contentType, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiLogisticsPvtShippingPoliciesIdGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiLogisticsPvtShippingPoliciesIdGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiLogisticsPvtShippingPoliciesIdGet(Async)");
        }

        return apiLogisticsPvtShippingPoliciesIdGetCall(accept, contentType, id, _callback);

    }

    /**
     * Retrieve shipping policy by ID
     * This endpoint lists existing [shipping policies](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140) from carriers in your store, searching by their IDs.    &gt; Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param id ID of the shipping policy. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiLogisticsPvtShippingPoliciesIdGet(String accept, String contentType, String id) throws ApiException {
        apiLogisticsPvtShippingPoliciesIdGetWithHttpInfo(accept, contentType, id);
    }

    /**
     * Retrieve shipping policy by ID
     * This endpoint lists existing [shipping policies](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140) from carriers in your store, searching by their IDs.    &gt; Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param id ID of the shipping policy. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiLogisticsPvtShippingPoliciesIdGetWithHttpInfo(String accept, String contentType, String id) throws ApiException {
        okhttp3.Call localVarCall = apiLogisticsPvtShippingPoliciesIdGetValidateBeforeCall(accept, contentType, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve shipping policy by ID (asynchronously)
     * This endpoint lists existing [shipping policies](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140) from carriers in your store, searching by their IDs.    &gt; Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param id ID of the shipping policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLogisticsPvtShippingPoliciesIdGetAsync(String accept, String contentType, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiLogisticsPvtShippingPoliciesIdGetValidateBeforeCall(accept, contentType, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiLogisticsPvtShippingPoliciesIdPut
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param id Shipping policy&#39;s ID (required)
     * @param requestBody1  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLogisticsPvtShippingPoliciesIdPutCall(String accept, String contentType, String id, RequestBody1 requestBody1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody1;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/shipping-policies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiLogisticsPvtShippingPoliciesIdPutValidateBeforeCall(String accept, String contentType, String id, RequestBody1 requestBody1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiLogisticsPvtShippingPoliciesIdPut(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiLogisticsPvtShippingPoliciesIdPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiLogisticsPvtShippingPoliciesIdPut(Async)");
        }

        return apiLogisticsPvtShippingPoliciesIdPutCall(accept, contentType, id, requestBody1, _callback);

    }

    /**
     * Update shipping policy
     * This endpoint updates information on existing Shipping Policies from carriers.    &gt; Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param id Shipping policy&#39;s ID (required)
     * @param requestBody1  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiLogisticsPvtShippingPoliciesIdPut(String accept, String contentType, String id, RequestBody1 requestBody1) throws ApiException {
        apiLogisticsPvtShippingPoliciesIdPutWithHttpInfo(accept, contentType, id, requestBody1);
    }

    /**
     * Update shipping policy
     * This endpoint updates information on existing Shipping Policies from carriers.    &gt; Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param id Shipping policy&#39;s ID (required)
     * @param requestBody1  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiLogisticsPvtShippingPoliciesIdPutWithHttpInfo(String accept, String contentType, String id, RequestBody1 requestBody1) throws ApiException {
        okhttp3.Call localVarCall = apiLogisticsPvtShippingPoliciesIdPutValidateBeforeCall(accept, contentType, id, requestBody1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update shipping policy (asynchronously)
     * This endpoint updates information on existing Shipping Policies from carriers.    &gt; Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param id Shipping policy&#39;s ID (required)
     * @param requestBody1  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLogisticsPvtShippingPoliciesIdPutAsync(String accept, String contentType, String id, RequestBody1 requestBody1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiLogisticsPvtShippingPoliciesIdPutValidateBeforeCall(accept, contentType, id, requestBody1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiLogisticsPvtShippingPoliciesPost
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLogisticsPvtShippingPoliciesPostCall(String accept, String contentType, RequestBody requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/shipping-policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiLogisticsPvtShippingPoliciesPostValidateBeforeCall(String accept, String contentType, RequestBody requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiLogisticsPvtShippingPoliciesPost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiLogisticsPvtShippingPoliciesPost(Async)");
        }

        return apiLogisticsPvtShippingPoliciesPostCall(accept, contentType, requestBody, _callback);

    }

    /**
     * Create shipping policy
     * This endpoint creates new shipping policies from carriers in your store.    &gt; Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param requestBody  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiLogisticsPvtShippingPoliciesPost(String accept, String contentType, RequestBody requestBody) throws ApiException {
        apiLogisticsPvtShippingPoliciesPostWithHttpInfo(accept, contentType, requestBody);
    }

    /**
     * Create shipping policy
     * This endpoint creates new shipping policies from carriers in your store.    &gt; Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param requestBody  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiLogisticsPvtShippingPoliciesPostWithHttpInfo(String accept, String contentType, RequestBody requestBody) throws ApiException {
        okhttp3.Call localVarCall = apiLogisticsPvtShippingPoliciesPostValidateBeforeCall(accept, contentType, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create shipping policy (asynchronously)
     * This endpoint creates new shipping policies from carriers in your store.    &gt; Note that, while most of our API endpoints return time fields in UTC, this endpoint returns **Scheduled Delivery** related time fields adjusted to the configured time zone of the account.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiLogisticsPvtShippingPoliciesPostAsync(String accept, String contentType, RequestBody requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiLogisticsPvtShippingPoliciesPostValidateBeforeCall(accept, contentType, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
