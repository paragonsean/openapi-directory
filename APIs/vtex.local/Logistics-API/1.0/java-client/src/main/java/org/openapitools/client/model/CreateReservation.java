/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SlaRequest1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateReservation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateReservation {
  public static final String SERIALIZED_NAME_AUTHORIZED_DATE_UTC = "AuthorizedDateUtc";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_DATE_UTC)
  private String authorizedDateUtc;

  public static final String SERIALIZED_NAME_CANCELED_DATE_UTC = "CanceledDateUtc";
  @SerializedName(SERIALIZED_NAME_CANCELED_DATE_UTC)
  private String canceledDateUtc;

  public static final String SERIALIZED_NAME_CONFIRMED_DATE_UTC = "ConfirmedDateUtc";
  @SerializedName(SERIALIZED_NAME_CONFIRMED_DATE_UTC)
  private String confirmedDateUtc;

  public static final String SERIALIZED_NAME_ERRORS = "Errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<String> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_SUCESS = "IsSucess";
  @SerializedName(SERIALIZED_NAME_IS_SUCESS)
  private Boolean isSucess;

  public static final String SERIALIZED_NAME_LAST_UPDATE_DATE_UTC = "LastUpdateDateUtc";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_DATE_UTC)
  private String lastUpdateDateUtc;

  public static final String SERIALIZED_NAME_LOCK_ID = "LockId";
  @SerializedName(SERIALIZED_NAME_LOCK_ID)
  private String lockId;

  public static final String SERIALIZED_NAME_MAXIMUM_CONFIRMATION_DATE_UTC = "MaximumConfirmationDateUtc";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_CONFIRMATION_DATE_UTC)
  private String maximumConfirmationDateUtc;

  public static final String SERIALIZED_NAME_PICKUP_POINT_ITEM_OPTIONS = "PickupPointItemOptions";
  @SerializedName(SERIALIZED_NAME_PICKUP_POINT_ITEM_OPTIONS)
  private String pickupPointItemOptions;

  public static final String SERIALIZED_NAME_RESERVATION_DATE_UTC = "ReservationDateUtc";
  @SerializedName(SERIALIZED_NAME_RESERVATION_DATE_UTC)
  private String reservationDateUtc;

  public static final String SERIALIZED_NAME_SALES_CHANNEL = "SalesChannel";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNEL)
  private String salesChannel;

  public static final String SERIALIZED_NAME_SLA_REQUEST = "SlaRequest";
  @SerializedName(SERIALIZED_NAME_SLA_REQUEST)
  private List<SlaRequest1> slaRequest = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public CreateReservation() {
  }

  public CreateReservation authorizedDateUtc(String authorizedDateUtc) {
    this.authorizedDateUtc = authorizedDateUtc;
    return this;
  }

  /**
   * Get authorizedDateUtc
   * @return authorizedDateUtc
   */
  @javax.annotation.Nonnull
  public String getAuthorizedDateUtc() {
    return authorizedDateUtc;
  }

  public void setAuthorizedDateUtc(String authorizedDateUtc) {
    this.authorizedDateUtc = authorizedDateUtc;
  }


  public CreateReservation canceledDateUtc(String canceledDateUtc) {
    this.canceledDateUtc = canceledDateUtc;
    return this;
  }

  /**
   * Get canceledDateUtc
   * @return canceledDateUtc
   */
  @javax.annotation.Nonnull
  public String getCanceledDateUtc() {
    return canceledDateUtc;
  }

  public void setCanceledDateUtc(String canceledDateUtc) {
    this.canceledDateUtc = canceledDateUtc;
  }


  public CreateReservation confirmedDateUtc(String confirmedDateUtc) {
    this.confirmedDateUtc = confirmedDateUtc;
    return this;
  }

  /**
   * Get confirmedDateUtc
   * @return confirmedDateUtc
   */
  @javax.annotation.Nonnull
  public String getConfirmedDateUtc() {
    return confirmedDateUtc;
  }

  public void setConfirmedDateUtc(String confirmedDateUtc) {
    this.confirmedDateUtc = confirmedDateUtc;
  }


  public CreateReservation errors(List<String> errors) {
    this.errors = errors;
    return this;
  }

  public CreateReservation addErrorsItem(String errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * 
   * @return errors
   */
  @javax.annotation.Nonnull
  public List<String> getErrors() {
    return errors;
  }

  public void setErrors(List<String> errors) {
    this.errors = errors;
  }


  public CreateReservation isSucess(Boolean isSucess) {
    this.isSucess = isSucess;
    return this;
  }

  /**
   * Get isSucess
   * @return isSucess
   */
  @javax.annotation.Nonnull
  public Boolean getIsSucess() {
    return isSucess;
  }

  public void setIsSucess(Boolean isSucess) {
    this.isSucess = isSucess;
  }


  public CreateReservation lastUpdateDateUtc(String lastUpdateDateUtc) {
    this.lastUpdateDateUtc = lastUpdateDateUtc;
    return this;
  }

  /**
   * Get lastUpdateDateUtc
   * @return lastUpdateDateUtc
   */
  @javax.annotation.Nonnull
  public String getLastUpdateDateUtc() {
    return lastUpdateDateUtc;
  }

  public void setLastUpdateDateUtc(String lastUpdateDateUtc) {
    this.lastUpdateDateUtc = lastUpdateDateUtc;
  }


  public CreateReservation lockId(String lockId) {
    this.lockId = lockId;
    return this;
  }

  /**
   * Get lockId
   * @return lockId
   */
  @javax.annotation.Nonnull
  public String getLockId() {
    return lockId;
  }

  public void setLockId(String lockId) {
    this.lockId = lockId;
  }


  public CreateReservation maximumConfirmationDateUtc(String maximumConfirmationDateUtc) {
    this.maximumConfirmationDateUtc = maximumConfirmationDateUtc;
    return this;
  }

  /**
   * Get maximumConfirmationDateUtc
   * @return maximumConfirmationDateUtc
   */
  @javax.annotation.Nonnull
  public String getMaximumConfirmationDateUtc() {
    return maximumConfirmationDateUtc;
  }

  public void setMaximumConfirmationDateUtc(String maximumConfirmationDateUtc) {
    this.maximumConfirmationDateUtc = maximumConfirmationDateUtc;
  }


  public CreateReservation pickupPointItemOptions(String pickupPointItemOptions) {
    this.pickupPointItemOptions = pickupPointItemOptions;
    return this;
  }

  /**
   * Get pickupPointItemOptions
   * @return pickupPointItemOptions
   */
  @javax.annotation.Nullable
  public String getPickupPointItemOptions() {
    return pickupPointItemOptions;
  }

  public void setPickupPointItemOptions(String pickupPointItemOptions) {
    this.pickupPointItemOptions = pickupPointItemOptions;
  }


  public CreateReservation reservationDateUtc(String reservationDateUtc) {
    this.reservationDateUtc = reservationDateUtc;
    return this;
  }

  /**
   * Get reservationDateUtc
   * @return reservationDateUtc
   */
  @javax.annotation.Nonnull
  public String getReservationDateUtc() {
    return reservationDateUtc;
  }

  public void setReservationDateUtc(String reservationDateUtc) {
    this.reservationDateUtc = reservationDateUtc;
  }


  public CreateReservation salesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
    return this;
  }

  /**
   * Get salesChannel
   * @return salesChannel
   */
  @javax.annotation.Nonnull
  public String getSalesChannel() {
    return salesChannel;
  }

  public void setSalesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
  }


  public CreateReservation slaRequest(List<SlaRequest1> slaRequest) {
    this.slaRequest = slaRequest;
    return this;
  }

  public CreateReservation addSlaRequestItem(SlaRequest1 slaRequestItem) {
    if (this.slaRequest == null) {
      this.slaRequest = new ArrayList<>();
    }
    this.slaRequest.add(slaRequestItem);
    return this;
  }

  /**
   * 
   * @return slaRequest
   */
  @javax.annotation.Nonnull
  public List<SlaRequest1> getSlaRequest() {
    return slaRequest;
  }

  public void setSlaRequest(List<SlaRequest1> slaRequest) {
    this.slaRequest = slaRequest;
  }


  public CreateReservation status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateReservation createReservation = (CreateReservation) o;
    return Objects.equals(this.authorizedDateUtc, createReservation.authorizedDateUtc) &&
        Objects.equals(this.canceledDateUtc, createReservation.canceledDateUtc) &&
        Objects.equals(this.confirmedDateUtc, createReservation.confirmedDateUtc) &&
        Objects.equals(this.errors, createReservation.errors) &&
        Objects.equals(this.isSucess, createReservation.isSucess) &&
        Objects.equals(this.lastUpdateDateUtc, createReservation.lastUpdateDateUtc) &&
        Objects.equals(this.lockId, createReservation.lockId) &&
        Objects.equals(this.maximumConfirmationDateUtc, createReservation.maximumConfirmationDateUtc) &&
        Objects.equals(this.pickupPointItemOptions, createReservation.pickupPointItemOptions) &&
        Objects.equals(this.reservationDateUtc, createReservation.reservationDateUtc) &&
        Objects.equals(this.salesChannel, createReservation.salesChannel) &&
        Objects.equals(this.slaRequest, createReservation.slaRequest) &&
        Objects.equals(this.status, createReservation.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizedDateUtc, canceledDateUtc, confirmedDateUtc, errors, isSucess, lastUpdateDateUtc, lockId, maximumConfirmationDateUtc, pickupPointItemOptions, reservationDateUtc, salesChannel, slaRequest, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateReservation {\n");
    sb.append("    authorizedDateUtc: ").append(toIndentedString(authorizedDateUtc)).append("\n");
    sb.append("    canceledDateUtc: ").append(toIndentedString(canceledDateUtc)).append("\n");
    sb.append("    confirmedDateUtc: ").append(toIndentedString(confirmedDateUtc)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    isSucess: ").append(toIndentedString(isSucess)).append("\n");
    sb.append("    lastUpdateDateUtc: ").append(toIndentedString(lastUpdateDateUtc)).append("\n");
    sb.append("    lockId: ").append(toIndentedString(lockId)).append("\n");
    sb.append("    maximumConfirmationDateUtc: ").append(toIndentedString(maximumConfirmationDateUtc)).append("\n");
    sb.append("    pickupPointItemOptions: ").append(toIndentedString(pickupPointItemOptions)).append("\n");
    sb.append("    reservationDateUtc: ").append(toIndentedString(reservationDateUtc)).append("\n");
    sb.append("    salesChannel: ").append(toIndentedString(salesChannel)).append("\n");
    sb.append("    slaRequest: ").append(toIndentedString(slaRequest)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AuthorizedDateUtc");
    openapiFields.add("CanceledDateUtc");
    openapiFields.add("ConfirmedDateUtc");
    openapiFields.add("Errors");
    openapiFields.add("IsSucess");
    openapiFields.add("LastUpdateDateUtc");
    openapiFields.add("LockId");
    openapiFields.add("MaximumConfirmationDateUtc");
    openapiFields.add("PickupPointItemOptions");
    openapiFields.add("ReservationDateUtc");
    openapiFields.add("SalesChannel");
    openapiFields.add("SlaRequest");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AuthorizedDateUtc");
    openapiRequiredFields.add("CanceledDateUtc");
    openapiRequiredFields.add("ConfirmedDateUtc");
    openapiRequiredFields.add("Errors");
    openapiRequiredFields.add("IsSucess");
    openapiRequiredFields.add("LastUpdateDateUtc");
    openapiRequiredFields.add("LockId");
    openapiRequiredFields.add("MaximumConfirmationDateUtc");
    openapiRequiredFields.add("PickupPointItemOptions");
    openapiRequiredFields.add("ReservationDateUtc");
    openapiRequiredFields.add("SalesChannel");
    openapiRequiredFields.add("SlaRequest");
    openapiRequiredFields.add("Status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateReservation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateReservation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateReservation is not found in the empty JSON string", CreateReservation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateReservation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateReservation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateReservation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AuthorizedDateUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AuthorizedDateUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AuthorizedDateUtc").toString()));
      }
      if (!jsonObj.get("CanceledDateUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CanceledDateUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CanceledDateUtc").toString()));
      }
      if (!jsonObj.get("ConfirmedDateUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfirmedDateUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfirmedDateUtc").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("Errors") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Errors` to be an array in the JSON string but got `%s`", jsonObj.get("Errors").toString()));
      }
      if (!jsonObj.get("LastUpdateDateUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastUpdateDateUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastUpdateDateUtc").toString()));
      }
      if (!jsonObj.get("LockId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LockId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LockId").toString()));
      }
      if (!jsonObj.get("MaximumConfirmationDateUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaximumConfirmationDateUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaximumConfirmationDateUtc").toString()));
      }
      if ((jsonObj.get("PickupPointItemOptions") != null && !jsonObj.get("PickupPointItemOptions").isJsonNull()) && !jsonObj.get("PickupPointItemOptions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PickupPointItemOptions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PickupPointItemOptions").toString()));
      }
      if (!jsonObj.get("ReservationDateUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReservationDateUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReservationDateUtc").toString()));
      }
      if (!jsonObj.get("SalesChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SalesChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SalesChannel").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("SlaRequest").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SlaRequest` to be an array in the JSON string but got `%s`", jsonObj.get("SlaRequest").toString()));
      }

      JsonArray jsonArrayslaRequest = jsonObj.getAsJsonArray("SlaRequest");
      // validate the required field `SlaRequest` (array)
      for (int i = 0; i < jsonArrayslaRequest.size(); i++) {
        SlaRequest1.validateJsonElement(jsonArrayslaRequest.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateReservation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateReservation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateReservation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateReservation.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateReservation>() {
           @Override
           public void write(JsonWriter out, CreateReservation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateReservation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateReservation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateReservation
   * @throws IOException if the JSON string is invalid with respect to CreateReservation
   */
  public static CreateReservation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateReservation.class);
  }

  /**
   * Convert an instance of CreateReservation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

