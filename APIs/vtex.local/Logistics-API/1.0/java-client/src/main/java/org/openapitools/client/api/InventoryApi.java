/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Getinventorywithdispatchedreservations200ResponseInner;
import org.openapitools.client.model.InventoryBySku200Response;
import org.openapitools.client.model.Inventoryperdock200ResponseInner;
import org.openapitools.client.model.SaveSupplyLot;
import org.openapitools.client.model.UpdateInventoryBySkuandWarehouseRequest1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InventoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InventoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InventoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSupplyLots
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param skuId ID of the SKU. (required)
     * @param warehouseId ID of the warehouse where the SKU is located. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSupplyLotsCall(String accept, String contentType, String skuId, String warehouseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}/supplyLots"
            .replace("{" + "skuId" + "}", localVarApiClient.escapeString(skuId.toString()))
            .replace("{" + "warehouseId" + "}", localVarApiClient.escapeString(warehouseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSupplyLotsValidateBeforeCall(String accept, String contentType, String skuId, String warehouseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getSupplyLots(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getSupplyLots(Async)");
        }

        // verify the required parameter 'skuId' is set
        if (skuId == null) {
            throw new ApiException("Missing the required parameter 'skuId' when calling getSupplyLots(Async)");
        }

        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null) {
            throw new ApiException("Missing the required parameter 'warehouseId' when calling getSupplyLots(Async)");
        }

        return getSupplyLotsCall(accept, contentType, skuId, warehouseId, _callback);

    }

    /**
     * List supply lots
     * Returns a list of the supply lots of an SKU in a specific warehouse.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param skuId ID of the SKU. (required)
     * @param warehouseId ID of the warehouse where the SKU is located. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getSupplyLots(String accept, String contentType, String skuId, String warehouseId) throws ApiException {
        getSupplyLotsWithHttpInfo(accept, contentType, skuId, warehouseId);
    }

    /**
     * List supply lots
     * Returns a list of the supply lots of an SKU in a specific warehouse.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param skuId ID of the SKU. (required)
     * @param warehouseId ID of the warehouse where the SKU is located. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSupplyLotsWithHttpInfo(String accept, String contentType, String skuId, String warehouseId) throws ApiException {
        okhttp3.Call localVarCall = getSupplyLotsValidateBeforeCall(accept, contentType, skuId, warehouseId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List supply lots (asynchronously)
     * Returns a list of the supply lots of an SKU in a specific warehouse.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param skuId ID of the SKU. (required)
     * @param warehouseId ID of the warehouse where the SKU is located. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSupplyLotsAsync(String accept, String contentType, String skuId, String warehouseId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSupplyLotsValidateBeforeCall(accept, contentType, skuId, warehouseId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getinventorywithdispatchedreservations
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param itemId  (required)
     * @param warehouseId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getinventorywithdispatchedreservationsCall(String contentType, String accept, String itemId, String warehouseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/items/{itemId}/warehouses/{warehouseId}/dispatched"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()))
            .replace("{" + "warehouseId" + "}", localVarApiClient.escapeString(warehouseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getinventorywithdispatchedreservationsValidateBeforeCall(String contentType, String accept, String itemId, String warehouseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getinventorywithdispatchedreservations(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getinventorywithdispatchedreservations(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getinventorywithdispatchedreservations(Async)");
        }

        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null) {
            throw new ApiException("Missing the required parameter 'warehouseId' when calling getinventorywithdispatchedreservations(Async)");
        }

        return getinventorywithdispatchedreservationsCall(contentType, accept, itemId, warehouseId, _callback);

    }

    /**
     * List inventory with dispatched reservations
     * Lists inventory with dispatched reservations. When the number of active reservations is more than 2000 the return is an error with status code 400 (BadRequest) and the message: Too many active reservations.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param itemId  (required)
     * @param warehouseId  (required)
     * @return List&lt;Getinventorywithdispatchedreservations200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Getinventorywithdispatchedreservations200ResponseInner> getinventorywithdispatchedreservations(String contentType, String accept, String itemId, String warehouseId) throws ApiException {
        ApiResponse<List<Getinventorywithdispatchedreservations200ResponseInner>> localVarResp = getinventorywithdispatchedreservationsWithHttpInfo(contentType, accept, itemId, warehouseId);
        return localVarResp.getData();
    }

    /**
     * List inventory with dispatched reservations
     * Lists inventory with dispatched reservations. When the number of active reservations is more than 2000 the return is an error with status code 400 (BadRequest) and the message: Too many active reservations.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param itemId  (required)
     * @param warehouseId  (required)
     * @return ApiResponse&lt;List&lt;Getinventorywithdispatchedreservations200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Getinventorywithdispatchedreservations200ResponseInner>> getinventorywithdispatchedreservationsWithHttpInfo(String contentType, String accept, String itemId, String warehouseId) throws ApiException {
        okhttp3.Call localVarCall = getinventorywithdispatchedreservationsValidateBeforeCall(contentType, accept, itemId, warehouseId, null);
        Type localVarReturnType = new TypeToken<List<Getinventorywithdispatchedreservations200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List inventory with dispatched reservations (asynchronously)
     * Lists inventory with dispatched reservations. When the number of active reservations is more than 2000 the return is an error with status code 400 (BadRequest) and the message: Too many active reservations.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param itemId  (required)
     * @param warehouseId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getinventorywithdispatchedreservationsAsync(String contentType, String accept, String itemId, String warehouseId, final ApiCallback<List<Getinventorywithdispatchedreservations200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getinventorywithdispatchedreservationsValidateBeforeCall(contentType, accept, itemId, warehouseId, _callback);
        Type localVarReturnType = new TypeToken<List<Getinventorywithdispatchedreservations200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inventoryBySku
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call inventoryBySkuCall(String contentType, String accept, String skuId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/skus/{skuId}"
            .replace("{" + "skuId" + "}", localVarApiClient.escapeString(skuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inventoryBySkuValidateBeforeCall(String contentType, String accept, String skuId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling inventoryBySku(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling inventoryBySku(Async)");
        }

        // verify the required parameter 'skuId' is set
        if (skuId == null) {
            throw new ApiException("Missing the required parameter 'skuId' when calling inventoryBySku(Async)");
        }

        return inventoryBySkuCall(contentType, accept, skuId, _callback);

    }

    /**
     * List inventory by SKU
     * Lists your store&#39;s inventory by SKU ID
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @return InventoryBySku200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public InventoryBySku200Response inventoryBySku(String contentType, String accept, String skuId) throws ApiException {
        ApiResponse<InventoryBySku200Response> localVarResp = inventoryBySkuWithHttpInfo(contentType, accept, skuId);
        return localVarResp.getData();
    }

    /**
     * List inventory by SKU
     * Lists your store&#39;s inventory by SKU ID
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @return ApiResponse&lt;InventoryBySku200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<InventoryBySku200Response> inventoryBySkuWithHttpInfo(String contentType, String accept, String skuId) throws ApiException {
        okhttp3.Call localVarCall = inventoryBySkuValidateBeforeCall(contentType, accept, skuId, null);
        Type localVarReturnType = new TypeToken<InventoryBySku200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List inventory by SKU (asynchronously)
     * Lists your store&#39;s inventory by SKU ID
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * Cache-Control -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-AspNet-Version -  <br>  * X-Powered-By -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call inventoryBySkuAsync(String contentType, String accept, String skuId, final ApiCallback<InventoryBySku200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = inventoryBySkuValidateBeforeCall(contentType, accept, skuId, _callback);
        Type localVarReturnType = new TypeToken<InventoryBySku200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inventoryperdock
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @param dockId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inventoryperdockCall(String contentType, String accept, String skuId, String dockId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/items/{skuId}/docks/{dockId}"
            .replace("{" + "skuId" + "}", localVarApiClient.escapeString(skuId.toString()))
            .replace("{" + "dockId" + "}", localVarApiClient.escapeString(dockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inventoryperdockValidateBeforeCall(String contentType, String accept, String skuId, String dockId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling inventoryperdock(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling inventoryperdock(Async)");
        }

        // verify the required parameter 'skuId' is set
        if (skuId == null) {
            throw new ApiException("Missing the required parameter 'skuId' when calling inventoryperdock(Async)");
        }

        // verify the required parameter 'dockId' is set
        if (dockId == null) {
            throw new ApiException("Missing the required parameter 'dockId' when calling inventoryperdock(Async)");
        }

        return inventoryperdockCall(contentType, accept, skuId, dockId, _callback);

    }

    /**
     * List inventory per dock
     * Lists inventory information per dock set up in your store.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @param dockId  (required)
     * @return List&lt;Inventoryperdock200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Inventoryperdock200ResponseInner> inventoryperdock(String contentType, String accept, String skuId, String dockId) throws ApiException {
        ApiResponse<List<Inventoryperdock200ResponseInner>> localVarResp = inventoryperdockWithHttpInfo(contentType, accept, skuId, dockId);
        return localVarResp.getData();
    }

    /**
     * List inventory per dock
     * Lists inventory information per dock set up in your store.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @param dockId  (required)
     * @return ApiResponse&lt;List&lt;Inventoryperdock200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Inventoryperdock200ResponseInner>> inventoryperdockWithHttpInfo(String contentType, String accept, String skuId, String dockId) throws ApiException {
        okhttp3.Call localVarCall = inventoryperdockValidateBeforeCall(contentType, accept, skuId, dockId, null);
        Type localVarReturnType = new TypeToken<List<Inventoryperdock200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List inventory per dock (asynchronously)
     * Lists inventory information per dock set up in your store.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @param dockId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inventoryperdockAsync(String contentType, String accept, String skuId, String dockId, final ApiCallback<List<Inventoryperdock200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = inventoryperdockValidateBeforeCall(contentType, accept, skuId, dockId, _callback);
        Type localVarReturnType = new TypeToken<List<Inventoryperdock200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inventoryperdockandwarehouse
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @param dockId  (required)
     * @param warehouseId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inventoryperdockandwarehouseCall(String contentType, String accept, String skuId, String dockId, String warehouseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/items/{skuId}/docks/{dockId}/warehouses/{warehouseId}"
            .replace("{" + "skuId" + "}", localVarApiClient.escapeString(skuId.toString()))
            .replace("{" + "dockId" + "}", localVarApiClient.escapeString(dockId.toString()))
            .replace("{" + "warehouseId" + "}", localVarApiClient.escapeString(warehouseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inventoryperdockandwarehouseValidateBeforeCall(String contentType, String accept, String skuId, String dockId, String warehouseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling inventoryperdockandwarehouse(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling inventoryperdockandwarehouse(Async)");
        }

        // verify the required parameter 'skuId' is set
        if (skuId == null) {
            throw new ApiException("Missing the required parameter 'skuId' when calling inventoryperdockandwarehouse(Async)");
        }

        // verify the required parameter 'dockId' is set
        if (dockId == null) {
            throw new ApiException("Missing the required parameter 'dockId' when calling inventoryperdockandwarehouse(Async)");
        }

        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null) {
            throw new ApiException("Missing the required parameter 'warehouseId' when calling inventoryperdockandwarehouse(Async)");
        }

        return inventoryperdockandwarehouseCall(contentType, accept, skuId, dockId, warehouseId, _callback);

    }

    /**
     * List inventory per dock and warehouse
     * Lists information of inventory per dock and warehouse.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @param dockId  (required)
     * @param warehouseId  (required)
     * @return List&lt;Inventoryperdock200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Inventoryperdock200ResponseInner> inventoryperdockandwarehouse(String contentType, String accept, String skuId, String dockId, String warehouseId) throws ApiException {
        ApiResponse<List<Inventoryperdock200ResponseInner>> localVarResp = inventoryperdockandwarehouseWithHttpInfo(contentType, accept, skuId, dockId, warehouseId);
        return localVarResp.getData();
    }

    /**
     * List inventory per dock and warehouse
     * Lists information of inventory per dock and warehouse.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @param dockId  (required)
     * @param warehouseId  (required)
     * @return ApiResponse&lt;List&lt;Inventoryperdock200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Inventoryperdock200ResponseInner>> inventoryperdockandwarehouseWithHttpInfo(String contentType, String accept, String skuId, String dockId, String warehouseId) throws ApiException {
        okhttp3.Call localVarCall = inventoryperdockandwarehouseValidateBeforeCall(contentType, accept, skuId, dockId, warehouseId, null);
        Type localVarReturnType = new TypeToken<List<Inventoryperdock200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List inventory per dock and warehouse (asynchronously)
     * Lists information of inventory per dock and warehouse.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @param dockId  (required)
     * @param warehouseId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inventoryperdockandwarehouseAsync(String contentType, String accept, String skuId, String dockId, String warehouseId, final ApiCallback<List<Inventoryperdock200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = inventoryperdockandwarehouseValidateBeforeCall(contentType, accept, skuId, dockId, warehouseId, _callback);
        Type localVarReturnType = new TypeToken<List<Inventoryperdock200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inventoryperwarehouse
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @param warehouseId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inventoryperwarehouseCall(String contentType, String accept, String skuId, String warehouseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}"
            .replace("{" + "skuId" + "}", localVarApiClient.escapeString(skuId.toString()))
            .replace("{" + "warehouseId" + "}", localVarApiClient.escapeString(warehouseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inventoryperwarehouseValidateBeforeCall(String contentType, String accept, String skuId, String warehouseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling inventoryperwarehouse(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling inventoryperwarehouse(Async)");
        }

        // verify the required parameter 'skuId' is set
        if (skuId == null) {
            throw new ApiException("Missing the required parameter 'skuId' when calling inventoryperwarehouse(Async)");
        }

        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null) {
            throw new ApiException("Missing the required parameter 'warehouseId' when calling inventoryperwarehouse(Async)");
        }

        return inventoryperwarehouseCall(contentType, accept, skuId, warehouseId, _callback);

    }

    /**
     * List inventory per warehouse
     * Lists inventory information per warehouse on your store.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @param warehouseId  (required)
     * @return List&lt;Inventoryperdock200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Inventoryperdock200ResponseInner> inventoryperwarehouse(String contentType, String accept, String skuId, String warehouseId) throws ApiException {
        ApiResponse<List<Inventoryperdock200ResponseInner>> localVarResp = inventoryperwarehouseWithHttpInfo(contentType, accept, skuId, warehouseId);
        return localVarResp.getData();
    }

    /**
     * List inventory per warehouse
     * Lists inventory information per warehouse on your store.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @param warehouseId  (required)
     * @return ApiResponse&lt;List&lt;Inventoryperdock200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Inventoryperdock200ResponseInner>> inventoryperwarehouseWithHttpInfo(String contentType, String accept, String skuId, String warehouseId) throws ApiException {
        okhttp3.Call localVarCall = inventoryperwarehouseValidateBeforeCall(contentType, accept, skuId, warehouseId, null);
        Type localVarReturnType = new TypeToken<List<Inventoryperdock200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List inventory per warehouse (asynchronously)
     * Lists inventory information per warehouse on your store.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param skuId  (required)
     * @param warehouseId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inventoryperwarehouseAsync(String contentType, String accept, String skuId, String warehouseId, final ApiCallback<List<Inventoryperdock200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = inventoryperwarehouseValidateBeforeCall(contentType, accept, skuId, warehouseId, _callback);
        Type localVarReturnType = new TypeToken<List<Inventoryperdock200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveSupplyLot
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param skuId ID of the SKU whose availability is being scheduled. (required)
     * @param warehouseId ID of the warehouse where the SKU will arrive. (required)
     * @param supplyLotId ID of the Supply Lot in which the SKU&#39;s scheduling should be considered. (required)
     * @param saveSupplyLot  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveSupplyLotCall(String accept, String contentType, String skuId, String warehouseId, String supplyLotId, SaveSupplyLot saveSupplyLot, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = saveSupplyLot;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}/supplyLots/{supplyLotId}"
            .replace("{" + "skuId" + "}", localVarApiClient.escapeString(skuId.toString()))
            .replace("{" + "warehouseId" + "}", localVarApiClient.escapeString(warehouseId.toString()))
            .replace("{" + "supplyLotId" + "}", localVarApiClient.escapeString(supplyLotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json; charset=utf-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveSupplyLotValidateBeforeCall(String accept, String contentType, String skuId, String warehouseId, String supplyLotId, SaveSupplyLot saveSupplyLot, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling saveSupplyLot(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling saveSupplyLot(Async)");
        }

        // verify the required parameter 'skuId' is set
        if (skuId == null) {
            throw new ApiException("Missing the required parameter 'skuId' when calling saveSupplyLot(Async)");
        }

        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null) {
            throw new ApiException("Missing the required parameter 'warehouseId' when calling saveSupplyLot(Async)");
        }

        // verify the required parameter 'supplyLotId' is set
        if (supplyLotId == null) {
            throw new ApiException("Missing the required parameter 'supplyLotId' when calling saveSupplyLot(Async)");
        }

        // verify the required parameter 'saveSupplyLot' is set
        if (saveSupplyLot == null) {
            throw new ApiException("Missing the required parameter 'saveSupplyLot' when calling saveSupplyLot(Async)");
        }

        return saveSupplyLotCall(accept, contentType, skuId, warehouseId, supplyLotId, saveSupplyLot, _callback);

    }

    /**
     * Save supply lot
     * Creates a new Supply Lot. A Supply Lot lets the store sell products that are not currently available in stock but whose arrival is already scheduled.  Check out our [documentation](https://help.vtex.com/en/tutorial/setting-up-future-inventory--UMSGjooqRfkRbeoh94kS4) about this feature.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param skuId ID of the SKU whose availability is being scheduled. (required)
     * @param warehouseId ID of the warehouse where the SKU will arrive. (required)
     * @param supplyLotId ID of the Supply Lot in which the SKU&#39;s scheduling should be considered. (required)
     * @param saveSupplyLot  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void saveSupplyLot(String accept, String contentType, String skuId, String warehouseId, String supplyLotId, SaveSupplyLot saveSupplyLot) throws ApiException {
        saveSupplyLotWithHttpInfo(accept, contentType, skuId, warehouseId, supplyLotId, saveSupplyLot);
    }

    /**
     * Save supply lot
     * Creates a new Supply Lot. A Supply Lot lets the store sell products that are not currently available in stock but whose arrival is already scheduled.  Check out our [documentation](https://help.vtex.com/en/tutorial/setting-up-future-inventory--UMSGjooqRfkRbeoh94kS4) about this feature.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param skuId ID of the SKU whose availability is being scheduled. (required)
     * @param warehouseId ID of the warehouse where the SKU will arrive. (required)
     * @param supplyLotId ID of the Supply Lot in which the SKU&#39;s scheduling should be considered. (required)
     * @param saveSupplyLot  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> saveSupplyLotWithHttpInfo(String accept, String contentType, String skuId, String warehouseId, String supplyLotId, SaveSupplyLot saveSupplyLot) throws ApiException {
        okhttp3.Call localVarCall = saveSupplyLotValidateBeforeCall(accept, contentType, skuId, warehouseId, supplyLotId, saveSupplyLot, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Save supply lot (asynchronously)
     * Creates a new Supply Lot. A Supply Lot lets the store sell products that are not currently available in stock but whose arrival is already scheduled.  Check out our [documentation](https://help.vtex.com/en/tutorial/setting-up-future-inventory--UMSGjooqRfkRbeoh94kS4) about this feature.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param skuId ID of the SKU whose availability is being scheduled. (required)
     * @param warehouseId ID of the warehouse where the SKU will arrive. (required)
     * @param supplyLotId ID of the Supply Lot in which the SKU&#39;s scheduling should be considered. (required)
     * @param saveSupplyLot  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveSupplyLotAsync(String accept, String contentType, String skuId, String warehouseId, String supplyLotId, SaveSupplyLot saveSupplyLot, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveSupplyLotValidateBeforeCall(accept, contentType, skuId, warehouseId, supplyLotId, saveSupplyLot, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferSupplyLot
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param skuId ID of the SKU. (required)
     * @param warehouseId ID of the warehouse where the SKU is located. (required)
     * @param supplyLotId ID of the Supply Lot in which the SKU is currently located and from where it will be transfered. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferSupplyLotCall(String accept, String contentType, String skuId, String warehouseId, String supplyLotId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}/supplyLots/{supplyLotId}/transfer"
            .replace("{" + "skuId" + "}", localVarApiClient.escapeString(skuId.toString()))
            .replace("{" + "warehouseId" + "}", localVarApiClient.escapeString(warehouseId.toString()))
            .replace("{" + "supplyLotId" + "}", localVarApiClient.escapeString(supplyLotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferSupplyLotValidateBeforeCall(String accept, String contentType, String skuId, String warehouseId, String supplyLotId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling transferSupplyLot(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling transferSupplyLot(Async)");
        }

        // verify the required parameter 'skuId' is set
        if (skuId == null) {
            throw new ApiException("Missing the required parameter 'skuId' when calling transferSupplyLot(Async)");
        }

        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null) {
            throw new ApiException("Missing the required parameter 'warehouseId' when calling transferSupplyLot(Async)");
        }

        // verify the required parameter 'supplyLotId' is set
        if (supplyLotId == null) {
            throw new ApiException("Missing the required parameter 'supplyLotId' when calling transferSupplyLot(Async)");
        }

        return transferSupplyLotCall(accept, contentType, skuId, warehouseId, supplyLotId, _callback);

    }

    /**
     * Transfer supply lot
     * Transfers an SKU from a Supply Lot to the currently available inventory.  Check out how this transfer works in further detail by reading our [documentation](https://help.vtex.com/pt/tutorial/configurar-estoque-futuro--UMSGjooqRfkRbeoh94kS4) about this feature.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param skuId ID of the SKU. (required)
     * @param warehouseId ID of the warehouse where the SKU is located. (required)
     * @param supplyLotId ID of the Supply Lot in which the SKU is currently located and from where it will be transfered. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void transferSupplyLot(String accept, String contentType, String skuId, String warehouseId, String supplyLotId) throws ApiException {
        transferSupplyLotWithHttpInfo(accept, contentType, skuId, warehouseId, supplyLotId);
    }

    /**
     * Transfer supply lot
     * Transfers an SKU from a Supply Lot to the currently available inventory.  Check out how this transfer works in further detail by reading our [documentation](https://help.vtex.com/pt/tutorial/configurar-estoque-futuro--UMSGjooqRfkRbeoh94kS4) about this feature.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param skuId ID of the SKU. (required)
     * @param warehouseId ID of the warehouse where the SKU is located. (required)
     * @param supplyLotId ID of the Supply Lot in which the SKU is currently located and from where it will be transfered. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transferSupplyLotWithHttpInfo(String accept, String contentType, String skuId, String warehouseId, String supplyLotId) throws ApiException {
        okhttp3.Call localVarCall = transferSupplyLotValidateBeforeCall(accept, contentType, skuId, warehouseId, supplyLotId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Transfer supply lot (asynchronously)
     * Transfers an SKU from a Supply Lot to the currently available inventory.  Check out how this transfer works in further detail by reading our [documentation](https://help.vtex.com/pt/tutorial/configurar-estoque-futuro--UMSGjooqRfkRbeoh94kS4) about this feature.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param contentType Type of the content being sent (required)
     * @param skuId ID of the SKU. (required)
     * @param warehouseId ID of the warehouse where the SKU is located. (required)
     * @param supplyLotId ID of the Supply Lot in which the SKU is currently located and from where it will be transfered. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferSupplyLotAsync(String accept, String contentType, String skuId, String warehouseId, String supplyLotId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferSupplyLotValidateBeforeCall(accept, contentType, skuId, warehouseId, supplyLotId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateInventoryBySkuandWarehouse
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param skuId  (required)
     * @param warehouseId  (required)
     * @param updateInventoryBySkuandWarehouseRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInventoryBySkuandWarehouseCall(String accept, String contentType, String skuId, String warehouseId, UpdateInventoryBySkuandWarehouseRequest1 updateInventoryBySkuandWarehouseRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateInventoryBySkuandWarehouseRequest1;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/skus/{skuId}/warehouses/{warehouseId}"
            .replace("{" + "skuId" + "}", localVarApiClient.escapeString(skuId.toString()))
            .replace("{" + "warehouseId" + "}", localVarApiClient.escapeString(warehouseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json; charset=utf-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInventoryBySkuandWarehouseValidateBeforeCall(String accept, String contentType, String skuId, String warehouseId, UpdateInventoryBySkuandWarehouseRequest1 updateInventoryBySkuandWarehouseRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateInventoryBySkuandWarehouse(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateInventoryBySkuandWarehouse(Async)");
        }

        // verify the required parameter 'skuId' is set
        if (skuId == null) {
            throw new ApiException("Missing the required parameter 'skuId' when calling updateInventoryBySkuandWarehouse(Async)");
        }

        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null) {
            throw new ApiException("Missing the required parameter 'warehouseId' when calling updateInventoryBySkuandWarehouse(Async)");
        }

        // verify the required parameter 'updateInventoryBySkuandWarehouseRequest1' is set
        if (updateInventoryBySkuandWarehouseRequest1 == null) {
            throw new ApiException("Missing the required parameter 'updateInventoryBySkuandWarehouseRequest1' when calling updateInventoryBySkuandWarehouse(Async)");
        }

        return updateInventoryBySkuandWarehouseCall(accept, contentType, skuId, warehouseId, updateInventoryBySkuandWarehouseRequest1, _callback);

    }

    /**
     * Update inventory by SKU and warehouse
     * Updates inventory for a given SKU and warehouse.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param skuId  (required)
     * @param warehouseId  (required)
     * @param updateInventoryBySkuandWarehouseRequest1  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void updateInventoryBySkuandWarehouse(String accept, String contentType, String skuId, String warehouseId, UpdateInventoryBySkuandWarehouseRequest1 updateInventoryBySkuandWarehouseRequest1) throws ApiException {
        updateInventoryBySkuandWarehouseWithHttpInfo(accept, contentType, skuId, warehouseId, updateInventoryBySkuandWarehouseRequest1);
    }

    /**
     * Update inventory by SKU and warehouse
     * Updates inventory for a given SKU and warehouse.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param skuId  (required)
     * @param warehouseId  (required)
     * @param updateInventoryBySkuandWarehouseRequest1  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateInventoryBySkuandWarehouseWithHttpInfo(String accept, String contentType, String skuId, String warehouseId, UpdateInventoryBySkuandWarehouseRequest1 updateInventoryBySkuandWarehouseRequest1) throws ApiException {
        okhttp3.Call localVarCall = updateInventoryBySkuandWarehouseValidateBeforeCall(accept, contentType, skuId, warehouseId, updateInventoryBySkuandWarehouseRequest1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update inventory by SKU and warehouse (asynchronously)
     * Updates inventory for a given SKU and warehouse.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param skuId  (required)
     * @param warehouseId  (required)
     * @param updateInventoryBySkuandWarehouseRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateInventoryBySkuandWarehouseAsync(String accept, String contentType, String skuId, String warehouseId, UpdateInventoryBySkuandWarehouseRequest1 updateInventoryBySkuandWarehouseRequest1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInventoryBySkuandWarehouseValidateBeforeCall(accept, contentType, skuId, warehouseId, updateInventoryBySkuandWarehouseRequest1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
