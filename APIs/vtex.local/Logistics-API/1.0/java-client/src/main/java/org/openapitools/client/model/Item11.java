/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Dimension11;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Item11
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Item11 {
  public static final String SERIALIZED_NAME_ADDITIONAL_HANDLING_TIME = "additionalHandlingTime";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_HANDLING_TIME)
  private String additionalHandlingTime;

  public static final String SERIALIZED_NAME_DIMENSION = "dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private Dimension11 dimension;

  public static final String SERIALIZED_NAME_GROUP_ITEM_ID = "groupItemId";
  @SerializedName(SERIALIZED_NAME_GROUP_ITEM_ID)
  private String groupItemId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIT_ITEM = "kitItem";
  @SerializedName(SERIALIZED_NAME_KIT_ITEM)
  private List<String> kitItem = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODAL = "modal";
  @SerializedName(SERIALIZED_NAME_MODAL)
  private String modal;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_UNLIMITED_QUANTITY = "unlimitedQuantity";
  @SerializedName(SERIALIZED_NAME_UNLIMITED_QUANTITY)
  private Boolean unlimitedQuantity;

  public Item11() {
  }

  public Item11 additionalHandlingTime(String additionalHandlingTime) {
    this.additionalHandlingTime = additionalHandlingTime;
    return this;
  }

  /**
   * Get additionalHandlingTime
   * @return additionalHandlingTime
   */
  @javax.annotation.Nonnull
  public String getAdditionalHandlingTime() {
    return additionalHandlingTime;
  }

  public void setAdditionalHandlingTime(String additionalHandlingTime) {
    this.additionalHandlingTime = additionalHandlingTime;
  }


  public Item11 dimension(Dimension11 dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * Get dimension
   * @return dimension
   */
  @javax.annotation.Nonnull
  public Dimension11 getDimension() {
    return dimension;
  }

  public void setDimension(Dimension11 dimension) {
    this.dimension = dimension;
  }


  public Item11 groupItemId(String groupItemId) {
    this.groupItemId = groupItemId;
    return this;
  }

  /**
   * Get groupItemId
   * @return groupItemId
   */
  @javax.annotation.Nullable
  public String getGroupItemId() {
    return groupItemId;
  }

  public void setGroupItemId(String groupItemId) {
    this.groupItemId = groupItemId;
  }


  public Item11 id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Item11 kitItem(List<String> kitItem) {
    this.kitItem = kitItem;
    return this;
  }

  public Item11 addKitItemItem(String kitItemItem) {
    if (this.kitItem == null) {
      this.kitItem = new ArrayList<>();
    }
    this.kitItem.add(kitItemItem);
    return this;
  }

  /**
   * 
   * @return kitItem
   */
  @javax.annotation.Nonnull
  public List<String> getKitItem() {
    return kitItem;
  }

  public void setKitItem(List<String> kitItem) {
    this.kitItem = kitItem;
  }


  public Item11 modal(String modal) {
    this.modal = modal;
    return this;
  }

  /**
   * Get modal
   * @return modal
   */
  @javax.annotation.Nullable
  public String getModal() {
    return modal;
  }

  public void setModal(String modal) {
    this.modal = modal;
  }


  public Item11 price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nonnull
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public Item11 quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nonnull
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public Item11 unlimitedQuantity(Boolean unlimitedQuantity) {
    this.unlimitedQuantity = unlimitedQuantity;
    return this;
  }

  /**
   * Get unlimitedQuantity
   * @return unlimitedQuantity
   */
  @javax.annotation.Nonnull
  public Boolean getUnlimitedQuantity() {
    return unlimitedQuantity;
  }

  public void setUnlimitedQuantity(Boolean unlimitedQuantity) {
    this.unlimitedQuantity = unlimitedQuantity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Item11 item11 = (Item11) o;
    return Objects.equals(this.additionalHandlingTime, item11.additionalHandlingTime) &&
        Objects.equals(this.dimension, item11.dimension) &&
        Objects.equals(this.groupItemId, item11.groupItemId) &&
        Objects.equals(this.id, item11.id) &&
        Objects.equals(this.kitItem, item11.kitItem) &&
        Objects.equals(this.modal, item11.modal) &&
        Objects.equals(this.price, item11.price) &&
        Objects.equals(this.quantity, item11.quantity) &&
        Objects.equals(this.unlimitedQuantity, item11.unlimitedQuantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalHandlingTime, dimension, groupItemId, id, kitItem, modal, price, quantity, unlimitedQuantity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Item11 {\n");
    sb.append("    additionalHandlingTime: ").append(toIndentedString(additionalHandlingTime)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    groupItemId: ").append(toIndentedString(groupItemId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kitItem: ").append(toIndentedString(kitItem)).append("\n");
    sb.append("    modal: ").append(toIndentedString(modal)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    unlimitedQuantity: ").append(toIndentedString(unlimitedQuantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalHandlingTime");
    openapiFields.add("dimension");
    openapiFields.add("groupItemId");
    openapiFields.add("id");
    openapiFields.add("kitItem");
    openapiFields.add("modal");
    openapiFields.add("price");
    openapiFields.add("quantity");
    openapiFields.add("unlimitedQuantity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("additionalHandlingTime");
    openapiRequiredFields.add("dimension");
    openapiRequiredFields.add("groupItemId");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("kitItem");
    openapiRequiredFields.add("modal");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("unlimitedQuantity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Item11
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Item11.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Item11 is not found in the empty JSON string", Item11.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Item11.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Item11` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Item11.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("additionalHandlingTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalHandlingTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalHandlingTime").toString()));
      }
      // validate the required field `dimension`
      Dimension11.validateJsonElement(jsonObj.get("dimension"));
      if ((jsonObj.get("groupItemId") != null && !jsonObj.get("groupItemId").isJsonNull()) && !jsonObj.get("groupItemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupItemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupItemId").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("kitItem") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("kitItem").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `kitItem` to be an array in the JSON string but got `%s`", jsonObj.get("kitItem").toString()));
      }
      if ((jsonObj.get("modal") != null && !jsonObj.get("modal").isJsonNull()) && !jsonObj.get("modal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modal").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Item11.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Item11' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Item11> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Item11.class));

       return (TypeAdapter<T>) new TypeAdapter<Item11>() {
           @Override
           public void write(JsonWriter out, Item11 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Item11 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Item11 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Item11
   * @throws IOException if the JSON string is invalid with respect to Item11
   */
  public static Item11 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Item11.class);
  }

  /**
   * Convert an instance of Item11 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

