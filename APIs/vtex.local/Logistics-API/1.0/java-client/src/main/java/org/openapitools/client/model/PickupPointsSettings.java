/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for Pickup Points.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PickupPointsSettings {
  public static final String SERIALIZED_NAME_PICKUP_POINT_IDS = "pickupPointIds";
  @SerializedName(SERIALIZED_NAME_PICKUP_POINT_IDS)
  private List<Object> pickupPointIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PICKUP_POINT_TAGS = "pickupPointTags";
  @SerializedName(SERIALIZED_NAME_PICKUP_POINT_TAGS)
  private List<Object> pickupPointTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLERS = "sellers";
  @SerializedName(SERIALIZED_NAME_SELLERS)
  private List<Object> sellers = new ArrayList<>();

  public PickupPointsSettings() {
  }

  public PickupPointsSettings pickupPointIds(List<Object> pickupPointIds) {
    this.pickupPointIds = pickupPointIds;
    return this;
  }

  public PickupPointsSettings addPickupPointIdsItem(Object pickupPointIdsItem) {
    if (this.pickupPointIds == null) {
      this.pickupPointIds = new ArrayList<>();
    }
    this.pickupPointIds.add(pickupPointIdsItem);
    return this;
  }

  /**
   * Insert the IDs for pickup points previously configured in your store.
   * @return pickupPointIds
   */
  @javax.annotation.Nonnull
  public List<Object> getPickupPointIds() {
    return pickupPointIds;
  }

  public void setPickupPointIds(List<Object> pickupPointIds) {
    this.pickupPointIds = pickupPointIds;
  }


  public PickupPointsSettings pickupPointTags(List<Object> pickupPointTags) {
    this.pickupPointTags = pickupPointTags;
    return this;
  }

  public PickupPointsSettings addPickupPointTagsItem(Object pickupPointTagsItem) {
    if (this.pickupPointTags == null) {
      this.pickupPointTags = new ArrayList<>();
    }
    this.pickupPointTags.add(pickupPointTagsItem);
    return this;
  }

  /**
   * Insert the tags for pickup points previously configured in your store.
   * @return pickupPointTags
   */
  @javax.annotation.Nonnull
  public List<Object> getPickupPointTags() {
    return pickupPointTags;
  }

  public void setPickupPointTags(List<Object> pickupPointTags) {
    this.pickupPointTags = pickupPointTags;
  }


  public PickupPointsSettings sellers(List<Object> sellers) {
    this.sellers = sellers;
    return this;
  }

  public PickupPointsSettings addSellersItem(Object sellersItem) {
    if (this.sellers == null) {
      this.sellers = new ArrayList<>();
    }
    this.sellers.add(sellersItem);
    return this;
  }

  /**
   * Sellers that will be associated with the [pickup points](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) of the shipping policy being created.
   * @return sellers
   */
  @javax.annotation.Nonnull
  public List<Object> getSellers() {
    return sellers;
  }

  public void setSellers(List<Object> sellers) {
    this.sellers = sellers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PickupPointsSettings pickupPointsSettings = (PickupPointsSettings) o;
    return Objects.equals(this.pickupPointIds, pickupPointsSettings.pickupPointIds) &&
        Objects.equals(this.pickupPointTags, pickupPointsSettings.pickupPointTags) &&
        Objects.equals(this.sellers, pickupPointsSettings.sellers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pickupPointIds, pickupPointTags, sellers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PickupPointsSettings {\n");
    sb.append("    pickupPointIds: ").append(toIndentedString(pickupPointIds)).append("\n");
    sb.append("    pickupPointTags: ").append(toIndentedString(pickupPointTags)).append("\n");
    sb.append("    sellers: ").append(toIndentedString(sellers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pickupPointIds");
    openapiFields.add("pickupPointTags");
    openapiFields.add("sellers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pickupPointIds");
    openapiRequiredFields.add("pickupPointTags");
    openapiRequiredFields.add("sellers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PickupPointsSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PickupPointsSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PickupPointsSettings is not found in the empty JSON string", PickupPointsSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PickupPointsSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PickupPointsSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PickupPointsSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("pickupPointIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pickupPointIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickupPointIds` to be an array in the JSON string but got `%s`", jsonObj.get("pickupPointIds").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("pickupPointTags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pickupPointTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickupPointTags` to be an array in the JSON string but got `%s`", jsonObj.get("pickupPointTags").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("sellers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("sellers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellers` to be an array in the JSON string but got `%s`", jsonObj.get("sellers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PickupPointsSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PickupPointsSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PickupPointsSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PickupPointsSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<PickupPointsSettings>() {
           @Override
           public void write(JsonWriter out, PickupPointsSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PickupPointsSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PickupPointsSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PickupPointsSettings
   * @throws IOException if the JSON string is invalid with respect to PickupPointsSettings
   */
  public static PickupPointsSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PickupPointsSettings.class);
  }

  /**
   * Convert an instance of PickupPointsSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

