/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configurations for the [modal](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125), which is the attachement of a specific product to a carrier specialized in delivering that type of product.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModalSettings {
  public static final String SERIALIZED_NAME_MODALS = "modals";
  @SerializedName(SERIALIZED_NAME_MODALS)
  private List<Object> modals = new ArrayList<>();

  public static final String SERIALIZED_NAME_USE_ONLY_ITEMS_WITH_DEFINED_MODAL = "useOnlyItemsWithDefinedModal";
  @SerializedName(SERIALIZED_NAME_USE_ONLY_ITEMS_WITH_DEFINED_MODAL)
  private Boolean useOnlyItemsWithDefinedModal;

  public ModalSettings() {
  }

  public ModalSettings modals(List<Object> modals) {
    this.modals = modals;
    return this;
  }

  public ModalSettings addModalsItem(Object modalsItem) {
    if (this.modals == null) {
      this.modals = new ArrayList<>();
    }
    this.modals.add(modalsItem);
    return this;
  }

  /**
   * Type of special freight.
   * @return modals
   */
  @javax.annotation.Nonnull
  public List<Object> getModals() {
    return modals;
  }

  public void setModals(List<Object> modals) {
    this.modals = modals;
  }


  public ModalSettings useOnlyItemsWithDefinedModal(Boolean useOnlyItemsWithDefinedModal) {
    this.useOnlyItemsWithDefinedModal = useOnlyItemsWithDefinedModal;
    return this;
  }

  /**
   * When set as &#x60;true&#x60;, the modal&#39;s configurations will apply only for items with a defined modal.
   * @return useOnlyItemsWithDefinedModal
   */
  @javax.annotation.Nonnull
  public Boolean getUseOnlyItemsWithDefinedModal() {
    return useOnlyItemsWithDefinedModal;
  }

  public void setUseOnlyItemsWithDefinedModal(Boolean useOnlyItemsWithDefinedModal) {
    this.useOnlyItemsWithDefinedModal = useOnlyItemsWithDefinedModal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModalSettings modalSettings = (ModalSettings) o;
    return Objects.equals(this.modals, modalSettings.modals) &&
        Objects.equals(this.useOnlyItemsWithDefinedModal, modalSettings.useOnlyItemsWithDefinedModal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modals, useOnlyItemsWithDefinedModal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModalSettings {\n");
    sb.append("    modals: ").append(toIndentedString(modals)).append("\n");
    sb.append("    useOnlyItemsWithDefinedModal: ").append(toIndentedString(useOnlyItemsWithDefinedModal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("modals");
    openapiFields.add("useOnlyItemsWithDefinedModal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("modals");
    openapiRequiredFields.add("useOnlyItemsWithDefinedModal");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModalSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModalSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModalSettings is not found in the empty JSON string", ModalSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModalSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModalSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModalSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("modals") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("modals").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modals` to be an array in the JSON string but got `%s`", jsonObj.get("modals").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModalSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModalSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModalSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModalSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ModalSettings>() {
           @Override
           public void write(JsonWriter out, ModalSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModalSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModalSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModalSettings
   * @throws IOException if the JSON string is invalid with respect to ModalSettings
   */
  public static ModalSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModalSettings.class);
  }

  /**
   * Convert an instance of ModalSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

