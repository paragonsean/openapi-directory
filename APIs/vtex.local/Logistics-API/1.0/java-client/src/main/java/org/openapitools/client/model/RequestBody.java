/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BusinessHourSettings;
import org.openapitools.client.model.CarrierScheduleInner;
import org.openapitools.client.model.CubicWeightSettings;
import org.openapitools.client.model.DeliveryScheduleSettings;
import org.openapitools.client.model.MaxDimension;
import org.openapitools.client.model.ModalSettings;
import org.openapitools.client.model.PickupPointsSettings;
import org.openapitools.client.model.WeekendAndHolidays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RequestBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestBody {
  public static final String SERIALIZED_NAME_BUSINESS_HOUR_SETTINGS = "businessHourSettings";
  @SerializedName(SERIALIZED_NAME_BUSINESS_HOUR_SETTINGS)
  private BusinessHourSettings businessHourSettings;

  public static final String SERIALIZED_NAME_CARRIER_SCHEDULE = "carrierSchedule";
  @SerializedName(SERIALIZED_NAME_CARRIER_SCHEDULE)
  private List<CarrierScheduleInner> carrierSchedule = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUBIC_WEIGHT_SETTINGS = "cubicWeightSettings";
  @SerializedName(SERIALIZED_NAME_CUBIC_WEIGHT_SETTINGS)
  private CubicWeightSettings cubicWeightSettings;

  public static final String SERIALIZED_NAME_DELIVERY_SCHEDULE_SETTINGS = "deliveryScheduleSettings";
  @SerializedName(SERIALIZED_NAME_DELIVERY_SCHEDULE_SETTINGS)
  private DeliveryScheduleSettings deliveryScheduleSettings;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_MAX_DIMENSION = "maxDimension";
  @SerializedName(SERIALIZED_NAME_MAX_DIMENSION)
  private MaxDimension maxDimension;

  public static final String SERIALIZED_NAME_MAXIMUM_VALUE_ACEPTABLE = "maximumValueAceptable";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_VALUE_ACEPTABLE)
  private BigDecimal maximumValueAceptable;

  public static final String SERIALIZED_NAME_MINIMUM_VALUE_ACEPTABLE = "minimumValueAceptable";
  @SerializedName(SERIALIZED_NAME_MINIMUM_VALUE_ACEPTABLE)
  private BigDecimal minimumValueAceptable;

  public static final String SERIALIZED_NAME_MODAL_SETTINGS = "modalSettings";
  @SerializedName(SERIALIZED_NAME_MODAL_SETTINGS)
  private ModalSettings modalSettings;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_OF_ITEMS_PER_SHIPMENT = "numberOfItemsPerShipment";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ITEMS_PER_SHIPMENT)
  private Integer numberOfItemsPerShipment;

  public static final String SERIALIZED_NAME_PICKUP_POINTS_SETTINGS = "pickupPointsSettings";
  @SerializedName(SERIALIZED_NAME_PICKUP_POINTS_SETTINGS)
  private PickupPointsSettings pickupPointsSettings;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD = "shippingMethod";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD)
  private String shippingMethod;

  public static final String SERIALIZED_NAME_WEEKEND_AND_HOLIDAYS = "weekendAndHolidays";
  @SerializedName(SERIALIZED_NAME_WEEKEND_AND_HOLIDAYS)
  private WeekendAndHolidays weekendAndHolidays;

  public RequestBody() {
  }

  public RequestBody businessHourSettings(BusinessHourSettings businessHourSettings) {
    this.businessHourSettings = businessHourSettings;
    return this;
  }

  /**
   * Get businessHourSettings
   * @return businessHourSettings
   */
  @javax.annotation.Nonnull
  public BusinessHourSettings getBusinessHourSettings() {
    return businessHourSettings;
  }

  public void setBusinessHourSettings(BusinessHourSettings businessHourSettings) {
    this.businessHourSettings = businessHourSettings;
  }


  public RequestBody carrierSchedule(List<CarrierScheduleInner> carrierSchedule) {
    this.carrierSchedule = carrierSchedule;
    return this;
  }

  public RequestBody addCarrierScheduleItem(CarrierScheduleInner carrierScheduleItem) {
    if (this.carrierSchedule == null) {
      this.carrierSchedule = new ArrayList<>();
    }
    this.carrierSchedule.add(carrierScheduleItem);
    return this;
  }

  /**
   * Schedule sent by the carrier, to configure Shipping policy
   * @return carrierSchedule
   */
  @javax.annotation.Nullable
  public List<CarrierScheduleInner> getCarrierSchedule() {
    return carrierSchedule;
  }

  public void setCarrierSchedule(List<CarrierScheduleInner> carrierSchedule) {
    this.carrierSchedule = carrierSchedule;
  }


  public RequestBody cubicWeightSettings(CubicWeightSettings cubicWeightSettings) {
    this.cubicWeightSettings = cubicWeightSettings;
    return this;
  }

  /**
   * Get cubicWeightSettings
   * @return cubicWeightSettings
   */
  @javax.annotation.Nonnull
  public CubicWeightSettings getCubicWeightSettings() {
    return cubicWeightSettings;
  }

  public void setCubicWeightSettings(CubicWeightSettings cubicWeightSettings) {
    this.cubicWeightSettings = cubicWeightSettings;
  }


  public RequestBody deliveryScheduleSettings(DeliveryScheduleSettings deliveryScheduleSettings) {
    this.deliveryScheduleSettings = deliveryScheduleSettings;
    return this;
  }

  /**
   * Get deliveryScheduleSettings
   * @return deliveryScheduleSettings
   */
  @javax.annotation.Nonnull
  public DeliveryScheduleSettings getDeliveryScheduleSettings() {
    return deliveryScheduleSettings;
  }

  public void setDeliveryScheduleSettings(DeliveryScheduleSettings deliveryScheduleSettings) {
    this.deliveryScheduleSettings = deliveryScheduleSettings;
  }


  public RequestBody id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the shipping policy.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RequestBody isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Indicates whether shipping policy is active or not.
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public RequestBody maxDimension(MaxDimension maxDimension) {
    this.maxDimension = maxDimension;
    return this;
  }

  /**
   * Get maxDimension
   * @return maxDimension
   */
  @javax.annotation.Nonnull
  public MaxDimension getMaxDimension() {
    return maxDimension;
  }

  public void setMaxDimension(MaxDimension maxDimension) {
    this.maxDimension = maxDimension;
  }


  public RequestBody maximumValueAceptable(BigDecimal maximumValueAceptable) {
    this.maximumValueAceptable = maximumValueAceptable;
    return this;
  }

  /**
   * Maximum value accepted by the carrier, to realize the shipping.
   * @return maximumValueAceptable
   */
  @javax.annotation.Nonnull
  public BigDecimal getMaximumValueAceptable() {
    return maximumValueAceptable;
  }

  public void setMaximumValueAceptable(BigDecimal maximumValueAceptable) {
    this.maximumValueAceptable = maximumValueAceptable;
  }


  public RequestBody minimumValueAceptable(BigDecimal minimumValueAceptable) {
    this.minimumValueAceptable = minimumValueAceptable;
    return this;
  }

  /**
   * Minimum value accepted by the carrier, to realize the shipping.
   * @return minimumValueAceptable
   */
  @javax.annotation.Nonnull
  public BigDecimal getMinimumValueAceptable() {
    return minimumValueAceptable;
  }

  public void setMinimumValueAceptable(BigDecimal minimumValueAceptable) {
    this.minimumValueAceptable = minimumValueAceptable;
  }


  public RequestBody modalSettings(ModalSettings modalSettings) {
    this.modalSettings = modalSettings;
    return this;
  }

  /**
   * Get modalSettings
   * @return modalSettings
   */
  @javax.annotation.Nonnull
  public ModalSettings getModalSettings() {
    return modalSettings;
  }

  public void setModalSettings(ModalSettings modalSettings) {
    this.modalSettings = modalSettings;
  }


  public RequestBody name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the shipping policy.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RequestBody numberOfItemsPerShipment(Integer numberOfItemsPerShipment) {
    this.numberOfItemsPerShipment = numberOfItemsPerShipment;
    return this;
  }

  /**
   * Capacity of your store&#39;s logistics of shipment, determines number of items permitted per shipment.
   * @return numberOfItemsPerShipment
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfItemsPerShipment() {
    return numberOfItemsPerShipment;
  }

  public void setNumberOfItemsPerShipment(Integer numberOfItemsPerShipment) {
    this.numberOfItemsPerShipment = numberOfItemsPerShipment;
  }


  public RequestBody pickupPointsSettings(PickupPointsSettings pickupPointsSettings) {
    this.pickupPointsSettings = pickupPointsSettings;
    return this;
  }

  /**
   * Get pickupPointsSettings
   * @return pickupPointsSettings
   */
  @javax.annotation.Nonnull
  public PickupPointsSettings getPickupPointsSettings() {
    return pickupPointsSettings;
  }

  public void setPickupPointsSettings(PickupPointsSettings pickupPointsSettings) {
    this.pickupPointsSettings = pickupPointsSettings;
  }


  public RequestBody shippingMethod(String shippingMethod) {
    this.shippingMethod = shippingMethod;
    return this;
  }

  /**
   * Type of shipping available for this shipping policy (carrier). Options shown on freight simulation
   * @return shippingMethod
   */
  @javax.annotation.Nonnull
  public String getShippingMethod() {
    return shippingMethod;
  }

  public void setShippingMethod(String shippingMethod) {
    this.shippingMethod = shippingMethod;
  }


  public RequestBody weekendAndHolidays(WeekendAndHolidays weekendAndHolidays) {
    this.weekendAndHolidays = weekendAndHolidays;
    return this;
  }

  /**
   * Get weekendAndHolidays
   * @return weekendAndHolidays
   */
  @javax.annotation.Nonnull
  public WeekendAndHolidays getWeekendAndHolidays() {
    return weekendAndHolidays;
  }

  public void setWeekendAndHolidays(WeekendAndHolidays weekendAndHolidays) {
    this.weekendAndHolidays = weekendAndHolidays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestBody requestBody = (RequestBody) o;
    return Objects.equals(this.businessHourSettings, requestBody.businessHourSettings) &&
        Objects.equals(this.carrierSchedule, requestBody.carrierSchedule) &&
        Objects.equals(this.cubicWeightSettings, requestBody.cubicWeightSettings) &&
        Objects.equals(this.deliveryScheduleSettings, requestBody.deliveryScheduleSettings) &&
        Objects.equals(this.id, requestBody.id) &&
        Objects.equals(this.isActive, requestBody.isActive) &&
        Objects.equals(this.maxDimension, requestBody.maxDimension) &&
        Objects.equals(this.maximumValueAceptable, requestBody.maximumValueAceptable) &&
        Objects.equals(this.minimumValueAceptable, requestBody.minimumValueAceptable) &&
        Objects.equals(this.modalSettings, requestBody.modalSettings) &&
        Objects.equals(this.name, requestBody.name) &&
        Objects.equals(this.numberOfItemsPerShipment, requestBody.numberOfItemsPerShipment) &&
        Objects.equals(this.pickupPointsSettings, requestBody.pickupPointsSettings) &&
        Objects.equals(this.shippingMethod, requestBody.shippingMethod) &&
        Objects.equals(this.weekendAndHolidays, requestBody.weekendAndHolidays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessHourSettings, carrierSchedule, cubicWeightSettings, deliveryScheduleSettings, id, isActive, maxDimension, maximumValueAceptable, minimumValueAceptable, modalSettings, name, numberOfItemsPerShipment, pickupPointsSettings, shippingMethod, weekendAndHolidays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestBody {\n");
    sb.append("    businessHourSettings: ").append(toIndentedString(businessHourSettings)).append("\n");
    sb.append("    carrierSchedule: ").append(toIndentedString(carrierSchedule)).append("\n");
    sb.append("    cubicWeightSettings: ").append(toIndentedString(cubicWeightSettings)).append("\n");
    sb.append("    deliveryScheduleSettings: ").append(toIndentedString(deliveryScheduleSettings)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    maxDimension: ").append(toIndentedString(maxDimension)).append("\n");
    sb.append("    maximumValueAceptable: ").append(toIndentedString(maximumValueAceptable)).append("\n");
    sb.append("    minimumValueAceptable: ").append(toIndentedString(minimumValueAceptable)).append("\n");
    sb.append("    modalSettings: ").append(toIndentedString(modalSettings)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberOfItemsPerShipment: ").append(toIndentedString(numberOfItemsPerShipment)).append("\n");
    sb.append("    pickupPointsSettings: ").append(toIndentedString(pickupPointsSettings)).append("\n");
    sb.append("    shippingMethod: ").append(toIndentedString(shippingMethod)).append("\n");
    sb.append("    weekendAndHolidays: ").append(toIndentedString(weekendAndHolidays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("businessHourSettings");
    openapiFields.add("carrierSchedule");
    openapiFields.add("cubicWeightSettings");
    openapiFields.add("deliveryScheduleSettings");
    openapiFields.add("id");
    openapiFields.add("isActive");
    openapiFields.add("maxDimension");
    openapiFields.add("maximumValueAceptable");
    openapiFields.add("minimumValueAceptable");
    openapiFields.add("modalSettings");
    openapiFields.add("name");
    openapiFields.add("numberOfItemsPerShipment");
    openapiFields.add("pickupPointsSettings");
    openapiFields.add("shippingMethod");
    openapiFields.add("weekendAndHolidays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("businessHourSettings");
    openapiRequiredFields.add("cubicWeightSettings");
    openapiRequiredFields.add("deliveryScheduleSettings");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isActive");
    openapiRequiredFields.add("maxDimension");
    openapiRequiredFields.add("maximumValueAceptable");
    openapiRequiredFields.add("minimumValueAceptable");
    openapiRequiredFields.add("modalSettings");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("numberOfItemsPerShipment");
    openapiRequiredFields.add("pickupPointsSettings");
    openapiRequiredFields.add("shippingMethod");
    openapiRequiredFields.add("weekendAndHolidays");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestBody is not found in the empty JSON string", RequestBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RequestBody.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `businessHourSettings`
      BusinessHourSettings.validateJsonElement(jsonObj.get("businessHourSettings"));
      if (jsonObj.get("carrierSchedule") != null && !jsonObj.get("carrierSchedule").isJsonNull()) {
        JsonArray jsonArraycarrierSchedule = jsonObj.getAsJsonArray("carrierSchedule");
        if (jsonArraycarrierSchedule != null) {
          // ensure the json data is an array
          if (!jsonObj.get("carrierSchedule").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `carrierSchedule` to be an array in the JSON string but got `%s`", jsonObj.get("carrierSchedule").toString()));
          }

          // validate the optional field `carrierSchedule` (array)
          for (int i = 0; i < jsonArraycarrierSchedule.size(); i++) {
            CarrierScheduleInner.validateJsonElement(jsonArraycarrierSchedule.get(i));
          };
        }
      }
      // validate the required field `cubicWeightSettings`
      CubicWeightSettings.validateJsonElement(jsonObj.get("cubicWeightSettings"));
      // validate the required field `deliveryScheduleSettings`
      DeliveryScheduleSettings.validateJsonElement(jsonObj.get("deliveryScheduleSettings"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `maxDimension`
      MaxDimension.validateJsonElement(jsonObj.get("maxDimension"));
      // validate the required field `modalSettings`
      ModalSettings.validateJsonElement(jsonObj.get("modalSettings"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `pickupPointsSettings`
      PickupPointsSettings.validateJsonElement(jsonObj.get("pickupPointsSettings"));
      if (!jsonObj.get("shippingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingMethod").toString()));
      }
      // validate the required field `weekendAndHolidays`
      WeekendAndHolidays.validateJsonElement(jsonObj.get("weekendAndHolidays"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestBody>() {
           @Override
           public void write(JsonWriter out, RequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestBody
   * @throws IOException if the JSON string is invalid with respect to RequestBody
   */
  public static RequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestBody.class);
  }

  /**
   * Convert an instance of RequestBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

