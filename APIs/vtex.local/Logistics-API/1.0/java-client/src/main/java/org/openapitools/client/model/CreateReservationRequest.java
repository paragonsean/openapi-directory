/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeliveryItemOption1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateReservationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateReservationRequest {
  public static final String SERIALIZED_NAME_AUTORIZATION_EXPIRATION_T_T_L = "autorizationExpirationTTL";
  @SerializedName(SERIALIZED_NAME_AUTORIZATION_EXPIRATION_T_T_L)
  private String autorizationExpirationTTL;

  public static final String SERIALIZED_NAME_DELIVERY_ITEM_OPTIONS = "deliveryItemOptions";
  @SerializedName(SERIALIZED_NAME_DELIVERY_ITEM_OPTIONS)
  private List<DeliveryItemOption1> deliveryItemOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCK_ID = "lockId";
  @SerializedName(SERIALIZED_NAME_LOCK_ID)
  private String lockId;

  public static final String SERIALIZED_NAME_SALES_CHANNEL = "salesChannel";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNEL)
  private String salesChannel;

  public CreateReservationRequest() {
  }

  public CreateReservationRequest autorizationExpirationTTL(String autorizationExpirationTTL) {
    this.autorizationExpirationTTL = autorizationExpirationTTL;
    return this;
  }

  /**
   * Get autorizationExpirationTTL
   * @return autorizationExpirationTTL
   */
  @javax.annotation.Nonnull
  public String getAutorizationExpirationTTL() {
    return autorizationExpirationTTL;
  }

  public void setAutorizationExpirationTTL(String autorizationExpirationTTL) {
    this.autorizationExpirationTTL = autorizationExpirationTTL;
  }


  public CreateReservationRequest deliveryItemOptions(List<DeliveryItemOption1> deliveryItemOptions) {
    this.deliveryItemOptions = deliveryItemOptions;
    return this;
  }

  public CreateReservationRequest addDeliveryItemOptionsItem(DeliveryItemOption1 deliveryItemOptionsItem) {
    if (this.deliveryItemOptions == null) {
      this.deliveryItemOptions = new ArrayList<>();
    }
    this.deliveryItemOptions.add(deliveryItemOptionsItem);
    return this;
  }

  /**
   * 
   * @return deliveryItemOptions
   */
  @javax.annotation.Nonnull
  public List<DeliveryItemOption1> getDeliveryItemOptions() {
    return deliveryItemOptions;
  }

  public void setDeliveryItemOptions(List<DeliveryItemOption1> deliveryItemOptions) {
    this.deliveryItemOptions = deliveryItemOptions;
  }


  public CreateReservationRequest lockId(String lockId) {
    this.lockId = lockId;
    return this;
  }

  /**
   * Get lockId
   * @return lockId
   */
  @javax.annotation.Nullable
  public String getLockId() {
    return lockId;
  }

  public void setLockId(String lockId) {
    this.lockId = lockId;
  }


  public CreateReservationRequest salesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
    return this;
  }

  /**
   * Get salesChannel
   * @return salesChannel
   */
  @javax.annotation.Nonnull
  public String getSalesChannel() {
    return salesChannel;
  }

  public void setSalesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateReservationRequest createReservationRequest = (CreateReservationRequest) o;
    return Objects.equals(this.autorizationExpirationTTL, createReservationRequest.autorizationExpirationTTL) &&
        Objects.equals(this.deliveryItemOptions, createReservationRequest.deliveryItemOptions) &&
        Objects.equals(this.lockId, createReservationRequest.lockId) &&
        Objects.equals(this.salesChannel, createReservationRequest.salesChannel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autorizationExpirationTTL, deliveryItemOptions, lockId, salesChannel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateReservationRequest {\n");
    sb.append("    autorizationExpirationTTL: ").append(toIndentedString(autorizationExpirationTTL)).append("\n");
    sb.append("    deliveryItemOptions: ").append(toIndentedString(deliveryItemOptions)).append("\n");
    sb.append("    lockId: ").append(toIndentedString(lockId)).append("\n");
    sb.append("    salesChannel: ").append(toIndentedString(salesChannel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autorizationExpirationTTL");
    openapiFields.add("deliveryItemOptions");
    openapiFields.add("lockId");
    openapiFields.add("salesChannel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("autorizationExpirationTTL");
    openapiRequiredFields.add("deliveryItemOptions");
    openapiRequiredFields.add("lockId");
    openapiRequiredFields.add("salesChannel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateReservationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateReservationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateReservationRequest is not found in the empty JSON string", CreateReservationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateReservationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateReservationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateReservationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("autorizationExpirationTTL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autorizationExpirationTTL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autorizationExpirationTTL").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("deliveryItemOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryItemOptions` to be an array in the JSON string but got `%s`", jsonObj.get("deliveryItemOptions").toString()));
      }

      JsonArray jsonArraydeliveryItemOptions = jsonObj.getAsJsonArray("deliveryItemOptions");
      // validate the required field `deliveryItemOptions` (array)
      for (int i = 0; i < jsonArraydeliveryItemOptions.size(); i++) {
        DeliveryItemOption1.validateJsonElement(jsonArraydeliveryItemOptions.get(i));
      };
      if ((jsonObj.get("lockId") != null && !jsonObj.get("lockId").isJsonNull()) && !jsonObj.get("lockId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockId").toString()));
      }
      if (!jsonObj.get("salesChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesChannel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateReservationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateReservationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateReservationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateReservationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateReservationRequest>() {
           @Override
           public void write(JsonWriter out, CreateReservationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateReservationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateReservationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateReservationRequest
   * @throws IOException if the JSON string is invalid with respect to CreateReservationRequest
   */
  public static CreateReservationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateReservationRequest.class);
  }

  /**
   * Convert an instance of CreateReservationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

