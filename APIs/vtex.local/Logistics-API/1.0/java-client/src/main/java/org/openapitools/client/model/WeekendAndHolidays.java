/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If the shipping policy includes deliveries on weekends and holidays.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WeekendAndHolidays {
  public static final String SERIALIZED_NAME_HOLIDAY = "holiday";
  @SerializedName(SERIALIZED_NAME_HOLIDAY)
  private Boolean holiday;

  public static final String SERIALIZED_NAME_SATURDAY = "saturday";
  @SerializedName(SERIALIZED_NAME_SATURDAY)
  private Boolean saturday;

  public static final String SERIALIZED_NAME_SUNDAY = "sunday";
  @SerializedName(SERIALIZED_NAME_SUNDAY)
  private Boolean sunday;

  public WeekendAndHolidays() {
  }

  public WeekendAndHolidays holiday(Boolean holiday) {
    this.holiday = holiday;
    return this;
  }

  /**
   * Does the shipping policy allow deliveries onholidays?
   * @return holiday
   */
  @javax.annotation.Nonnull
  public Boolean getHoliday() {
    return holiday;
  }

  public void setHoliday(Boolean holiday) {
    this.holiday = holiday;
  }


  public WeekendAndHolidays saturday(Boolean saturday) {
    this.saturday = saturday;
    return this;
  }

  /**
   * Does the shipping policy allow deliveries on saturdays?
   * @return saturday
   */
  @javax.annotation.Nonnull
  public Boolean getSaturday() {
    return saturday;
  }

  public void setSaturday(Boolean saturday) {
    this.saturday = saturday;
  }


  public WeekendAndHolidays sunday(Boolean sunday) {
    this.sunday = sunday;
    return this;
  }

  /**
   * Does the shipping policy allow deliveries on sundays?
   * @return sunday
   */
  @javax.annotation.Nonnull
  public Boolean getSunday() {
    return sunday;
  }

  public void setSunday(Boolean sunday) {
    this.sunday = sunday;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WeekendAndHolidays weekendAndHolidays = (WeekendAndHolidays) o;
    return Objects.equals(this.holiday, weekendAndHolidays.holiday) &&
        Objects.equals(this.saturday, weekendAndHolidays.saturday) &&
        Objects.equals(this.sunday, weekendAndHolidays.sunday);
  }

  @Override
  public int hashCode() {
    return Objects.hash(holiday, saturday, sunday);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WeekendAndHolidays {\n");
    sb.append("    holiday: ").append(toIndentedString(holiday)).append("\n");
    sb.append("    saturday: ").append(toIndentedString(saturday)).append("\n");
    sb.append("    sunday: ").append(toIndentedString(sunday)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("holiday");
    openapiFields.add("saturday");
    openapiFields.add("sunday");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("holiday");
    openapiRequiredFields.add("saturday");
    openapiRequiredFields.add("sunday");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WeekendAndHolidays
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WeekendAndHolidays.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WeekendAndHolidays is not found in the empty JSON string", WeekendAndHolidays.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WeekendAndHolidays.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WeekendAndHolidays` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WeekendAndHolidays.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WeekendAndHolidays.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WeekendAndHolidays' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WeekendAndHolidays> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WeekendAndHolidays.class));

       return (TypeAdapter<T>) new TypeAdapter<WeekendAndHolidays>() {
           @Override
           public void write(JsonWriter out, WeekendAndHolidays value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WeekendAndHolidays read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WeekendAndHolidays given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WeekendAndHolidays
   * @throws IOException if the JSON string is invalid with respect to WeekendAndHolidays
   */
  public static WeekendAndHolidays fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WeekendAndHolidays.class);
  }

  /**
   * Convert an instance of WeekendAndHolidays to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

