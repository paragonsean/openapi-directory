/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateUpdatePickupPointRequestAddressCountry;
import org.openapitools.client.model.CreateUpdatePickupPointRequestAddressLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateUpdatePickupPointRequestAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateUpdatePickupPointRequestAddress {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPLEMENT = "complement";
  @SerializedName(SERIALIZED_NAME_COMPLEMENT)
  private String complement;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private CreateUpdatePickupPointRequestAddressCountry country;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private CreateUpdatePickupPointRequestAddressLocation location;

  public static final String SERIALIZED_NAME_NEIGHBORHOOD = "neighborhood";
  @SerializedName(SERIALIZED_NAME_NEIGHBORHOOD)
  private String neighborhood;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public CreateUpdatePickupPointRequestAddress() {
  }

  public CreateUpdatePickupPointRequestAddress city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Address city.
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public CreateUpdatePickupPointRequestAddress complement(String complement) {
    this.complement = complement;
    return this;
  }

  /**
   * Address complement.
   * @return complement
   */
  @javax.annotation.Nonnull
  public String getComplement() {
    return complement;
  }

  public void setComplement(String complement) {
    this.complement = complement;
  }


  public CreateUpdatePickupPointRequestAddress country(CreateUpdatePickupPointRequestAddressCountry country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nonnull
  public CreateUpdatePickupPointRequestAddressCountry getCountry() {
    return country;
  }

  public void setCountry(CreateUpdatePickupPointRequestAddressCountry country) {
    this.country = country;
  }


  public CreateUpdatePickupPointRequestAddress location(CreateUpdatePickupPointRequestAddressLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nonnull
  public CreateUpdatePickupPointRequestAddressLocation getLocation() {
    return location;
  }

  public void setLocation(CreateUpdatePickupPointRequestAddressLocation location) {
    this.location = location;
  }


  public CreateUpdatePickupPointRequestAddress neighborhood(String neighborhood) {
    this.neighborhood = neighborhood;
    return this;
  }

  /**
   * Address neighborhood.
   * @return neighborhood
   */
  @javax.annotation.Nonnull
  public String getNeighborhood() {
    return neighborhood;
  }

  public void setNeighborhood(String neighborhood) {
    this.neighborhood = neighborhood;
  }


  public CreateUpdatePickupPointRequestAddress number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Address street number.
   * @return number
   */
  @javax.annotation.Nonnull
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public CreateUpdatePickupPointRequestAddress postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Postal code.
   * @return postalCode
   */
  @javax.annotation.Nonnull
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public CreateUpdatePickupPointRequestAddress reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Complement that might help locate the shipping address more precisely in case of delivery.
   * @return reference
   */
  @javax.annotation.Nonnull
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public CreateUpdatePickupPointRequestAddress state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Address state.
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public CreateUpdatePickupPointRequestAddress street(String street) {
    this.street = street;
    return this;
  }

  /**
   * Address street name.
   * @return street
   */
  @javax.annotation.Nonnull
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUpdatePickupPointRequestAddress createUpdatePickupPointRequestAddress = (CreateUpdatePickupPointRequestAddress) o;
    return Objects.equals(this.city, createUpdatePickupPointRequestAddress.city) &&
        Objects.equals(this.complement, createUpdatePickupPointRequestAddress.complement) &&
        Objects.equals(this.country, createUpdatePickupPointRequestAddress.country) &&
        Objects.equals(this.location, createUpdatePickupPointRequestAddress.location) &&
        Objects.equals(this.neighborhood, createUpdatePickupPointRequestAddress.neighborhood) &&
        Objects.equals(this.number, createUpdatePickupPointRequestAddress.number) &&
        Objects.equals(this.postalCode, createUpdatePickupPointRequestAddress.postalCode) &&
        Objects.equals(this.reference, createUpdatePickupPointRequestAddress.reference) &&
        Objects.equals(this.state, createUpdatePickupPointRequestAddress.state) &&
        Objects.equals(this.street, createUpdatePickupPointRequestAddress.street);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, complement, country, location, neighborhood, number, postalCode, reference, state, street);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUpdatePickupPointRequestAddress {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    complement: ").append(toIndentedString(complement)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    neighborhood: ").append(toIndentedString(neighborhood)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("complement");
    openapiFields.add("country");
    openapiFields.add("location");
    openapiFields.add("neighborhood");
    openapiFields.add("number");
    openapiFields.add("postalCode");
    openapiFields.add("reference");
    openapiFields.add("state");
    openapiFields.add("street");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("complement");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("neighborhood");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("postalCode");
    openapiRequiredFields.add("reference");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("street");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateUpdatePickupPointRequestAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateUpdatePickupPointRequestAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateUpdatePickupPointRequestAddress is not found in the empty JSON string", CreateUpdatePickupPointRequestAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateUpdatePickupPointRequestAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateUpdatePickupPointRequestAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateUpdatePickupPointRequestAddress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("complement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complement").toString()));
      }
      // validate the required field `country`
      CreateUpdatePickupPointRequestAddressCountry.validateJsonElement(jsonObj.get("country"));
      // validate the required field `location`
      CreateUpdatePickupPointRequestAddressLocation.validateJsonElement(jsonObj.get("location"));
      if (!jsonObj.get("neighborhood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `neighborhood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("neighborhood").toString()));
      }
      if (!jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if (!jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if (!jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateUpdatePickupPointRequestAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateUpdatePickupPointRequestAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateUpdatePickupPointRequestAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateUpdatePickupPointRequestAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateUpdatePickupPointRequestAddress>() {
           @Override
           public void write(JsonWriter out, CreateUpdatePickupPointRequestAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateUpdatePickupPointRequestAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateUpdatePickupPointRequestAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateUpdatePickupPointRequestAddress
   * @throws IOException if the JSON string is invalid with respect to CreateUpdatePickupPointRequestAddress
   */
  public static CreateUpdatePickupPointRequestAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateUpdatePickupPointRequestAddress.class);
  }

  /**
   * Convert an instance of CreateUpdatePickupPointRequestAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

