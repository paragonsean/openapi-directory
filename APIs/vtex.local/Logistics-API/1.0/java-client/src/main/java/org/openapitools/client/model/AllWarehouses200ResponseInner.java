/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WarehouseDock11;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AllWarehouses200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AllWarehouses200ResponseInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICKUP_POINT_IDS = "pickupPointIds";
  @SerializedName(SERIALIZED_NAME_PICKUP_POINT_IDS)
  private List<Object> pickupPointIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_WAREHOUSE_DOCKS = "warehouseDocks";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_DOCKS)
  private List<WarehouseDock11> warehouseDocks = new ArrayList<>();

  public AllWarehouses200ResponseInner() {
  }

  public AllWarehouses200ResponseInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Code that identifies a warehouse.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AllWarehouses200ResponseInner isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Shows if the warehouse is active (&#x60;true&#x60;) or inactive (&#x60;false&#x60;).
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public AllWarehouses200ResponseInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the warehouse.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AllWarehouses200ResponseInner pickupPointIds(List<Object> pickupPointIds) {
    this.pickupPointIds = pickupPointIds;
    return this;
  }

  public AllWarehouses200ResponseInner addPickupPointIdsItem(Object pickupPointIdsItem) {
    if (this.pickupPointIds == null) {
      this.pickupPointIds = new ArrayList<>();
    }
    this.pickupPointIds.add(pickupPointIdsItem);
    return this;
  }

  /**
   * This field returns a list of the [pickup points&#39; IDs](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) associated with the given warehouse.
   * @return pickupPointIds
   */
  @javax.annotation.Nonnull
  public List<Object> getPickupPointIds() {
    return pickupPointIds;
  }

  public void setPickupPointIds(List<Object> pickupPointIds) {
    this.pickupPointIds = pickupPointIds;
  }


  public AllWarehouses200ResponseInner priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * If the warehouse was configured as a priority. When no priority was set, the value returns&#x60;0&#x60;.
   * @return priority
   */
  @javax.annotation.Nonnull
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public AllWarehouses200ResponseInner warehouseDocks(List<WarehouseDock11> warehouseDocks) {
    this.warehouseDocks = warehouseDocks;
    return this;
  }

  public AllWarehouses200ResponseInner addWarehouseDocksItem(WarehouseDock11 warehouseDocksItem) {
    if (this.warehouseDocks == null) {
      this.warehouseDocks = new ArrayList<>();
    }
    this.warehouseDocks.add(warehouseDocksItem);
    return this;
  }

  /**
   * Information related to the docks available for the warehouses.
   * @return warehouseDocks
   */
  @javax.annotation.Nonnull
  public List<WarehouseDock11> getWarehouseDocks() {
    return warehouseDocks;
  }

  public void setWarehouseDocks(List<WarehouseDock11> warehouseDocks) {
    this.warehouseDocks = warehouseDocks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllWarehouses200ResponseInner allWarehouses200ResponseInner = (AllWarehouses200ResponseInner) o;
    return Objects.equals(this.id, allWarehouses200ResponseInner.id) &&
        Objects.equals(this.isActive, allWarehouses200ResponseInner.isActive) &&
        Objects.equals(this.name, allWarehouses200ResponseInner.name) &&
        Objects.equals(this.pickupPointIds, allWarehouses200ResponseInner.pickupPointIds) &&
        Objects.equals(this.priority, allWarehouses200ResponseInner.priority) &&
        Objects.equals(this.warehouseDocks, allWarehouses200ResponseInner.warehouseDocks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, isActive, name, pickupPointIds, priority, warehouseDocks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllWarehouses200ResponseInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pickupPointIds: ").append(toIndentedString(pickupPointIds)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    warehouseDocks: ").append(toIndentedString(warehouseDocks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("isActive");
    openapiFields.add("name");
    openapiFields.add("pickupPointIds");
    openapiFields.add("priority");
    openapiFields.add("warehouseDocks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isActive");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pickupPointIds");
    openapiRequiredFields.add("priority");
    openapiRequiredFields.add("warehouseDocks");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AllWarehouses200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AllWarehouses200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AllWarehouses200ResponseInner is not found in the empty JSON string", AllWarehouses200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AllWarehouses200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AllWarehouses200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AllWarehouses200ResponseInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("pickupPointIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pickupPointIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickupPointIds` to be an array in the JSON string but got `%s`", jsonObj.get("pickupPointIds").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("warehouseDocks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouseDocks` to be an array in the JSON string but got `%s`", jsonObj.get("warehouseDocks").toString()));
      }

      JsonArray jsonArraywarehouseDocks = jsonObj.getAsJsonArray("warehouseDocks");
      // validate the required field `warehouseDocks` (array)
      for (int i = 0; i < jsonArraywarehouseDocks.size(); i++) {
        WarehouseDock11.validateJsonElement(jsonArraywarehouseDocks.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AllWarehouses200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AllWarehouses200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AllWarehouses200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AllWarehouses200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AllWarehouses200ResponseInner>() {
           @Override
           public void write(JsonWriter out, AllWarehouses200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AllWarehouses200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AllWarehouses200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AllWarehouses200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to AllWarehouses200ResponseInner
   */
  public static AllWarehouses200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AllWarehouses200ResponseInner.class);
  }

  /**
   * Convert an instance of AllWarehouses200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

