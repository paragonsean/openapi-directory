/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DayOfWeekForDeliveryInner;
import org.openapitools.client.model.MaxDimension21;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Allcarrier
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Allcarrier {
  public static final String SERIALIZED_NAME_CARRIER_SCHEDULE = "carrierSchedule";
  @SerializedName(SERIALIZED_NAME_CARRIER_SCHEDULE)
  private List<String> carrierSchedule = new ArrayList<>();

  public static final String SERIALIZED_NAME_DAY_OF_WEEK_BLOCKEDS = "dayOfWeekBlockeds";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK_BLOCKEDS)
  private List<String> dayOfWeekBlockeds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DAY_OF_WEEK_FOR_DELIVERY = "dayOfWeekForDelivery";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK_FOR_DELIVERY)
  private List<DayOfWeekForDeliveryInner> dayOfWeekForDelivery;

  public static final String SERIALIZED_NAME_DELIVERY_ON_WEEKENDS = "deliveryOnWeekends";
  @SerializedName(SERIALIZED_NAME_DELIVERY_ON_WEEKENDS)
  private Boolean deliveryOnWeekends;

  public static final String SERIALIZED_NAME_EXCLUSIVE_TO_DELIVERY_POINTS = "exclusiveToDeliveryPoints";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_TO_DELIVERY_POINTS)
  private Boolean exclusiveToDeliveryPoints;

  public static final String SERIALIZED_NAME_FACTOR_CUBIC_WEIGHT = "factorCubicWeight";
  @SerializedName(SERIALIZED_NAME_FACTOR_CUBIC_WEIGHT)
  private BigDecimal factorCubicWeight;

  public static final String SERIALIZED_NAME_FREIGHT_TABLE_PROCESS_STATUS = "freightTableProcessStatus";
  @SerializedName(SERIALIZED_NAME_FREIGHT_TABLE_PROCESS_STATUS)
  private Integer freightTableProcessStatus;

  public static final String SERIALIZED_NAME_FREIGHT_TABLE_VALUE_ERROR = "freightTableValueError";
  @SerializedName(SERIALIZED_NAME_FREIGHT_TABLE_VALUE_ERROR)
  private String freightTableValueError;

  public static final String SERIALIZED_NAME_FREIGHT_VALUE = "freightValue";
  @SerializedName(SERIALIZED_NAME_FREIGHT_VALUE)
  private List<String> freightValue = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_POLYGON = "isPolygon";
  @SerializedName(SERIALIZED_NAME_IS_POLYGON)
  private Boolean isPolygon;

  public static final String SERIALIZED_NAME_MAX_DIMENSION = "maxDimension";
  @SerializedName(SERIALIZED_NAME_MAX_DIMENSION)
  private MaxDimension21 maxDimension;

  public static final String SERIALIZED_NAME_MAX_RANGE_DELIVERY = "maxRangeDelivery";
  @SerializedName(SERIALIZED_NAME_MAX_RANGE_DELIVERY)
  private Integer maxRangeDelivery;

  public static final String SERIALIZED_NAME_MINIMUN_CUBIC_WEIGHT = "minimunCubicWeight";
  @SerializedName(SERIALIZED_NAME_MINIMUN_CUBIC_WEIGHT)
  private BigDecimal minimunCubicWeight;

  public static final String SERIALIZED_NAME_MODALS = "modals";
  @SerializedName(SERIALIZED_NAME_MODALS)
  private List<String> modals = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_OF_ITEMS_PER_SHIPMENT = "numberOfItemsPerShipment";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ITEMS_PER_SHIPMENT)
  private String numberOfItemsPerShipment;

  public static final String SERIALIZED_NAME_ONLY_ITEMS_WITH_DEFINED_MODAL = "onlyItemsWithDefinedModal";
  @SerializedName(SERIALIZED_NAME_ONLY_ITEMS_WITH_DEFINED_MODAL)
  private Boolean onlyItemsWithDefinedModal;

  public static final String SERIALIZED_NAME_SCHEDULED_DELIVERY = "scheduledDelivery";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_DELIVERY)
  private Boolean scheduledDelivery;

  public static final String SERIALIZED_NAME_SLA_TYPE = "slaType";
  @SerializedName(SERIALIZED_NAME_SLA_TYPE)
  private String slaType;

  public Allcarrier() {
  }

  public Allcarrier carrierSchedule(List<String> carrierSchedule) {
    this.carrierSchedule = carrierSchedule;
    return this;
  }

  public Allcarrier addCarrierScheduleItem(String carrierScheduleItem) {
    if (this.carrierSchedule == null) {
      this.carrierSchedule = new ArrayList<>();
    }
    this.carrierSchedule.add(carrierScheduleItem);
    return this;
  }

  /**
   * 
   * @return carrierSchedule
   */
  @javax.annotation.Nonnull
  public List<String> getCarrierSchedule() {
    return carrierSchedule;
  }

  public void setCarrierSchedule(List<String> carrierSchedule) {
    this.carrierSchedule = carrierSchedule;
  }


  public Allcarrier dayOfWeekBlockeds(List<String> dayOfWeekBlockeds) {
    this.dayOfWeekBlockeds = dayOfWeekBlockeds;
    return this;
  }

  public Allcarrier addDayOfWeekBlockedsItem(String dayOfWeekBlockedsItem) {
    if (this.dayOfWeekBlockeds == null) {
      this.dayOfWeekBlockeds = new ArrayList<>();
    }
    this.dayOfWeekBlockeds.add(dayOfWeekBlockedsItem);
    return this;
  }

  /**
   * 
   * @return dayOfWeekBlockeds
   */
  @javax.annotation.Nonnull
  public List<String> getDayOfWeekBlockeds() {
    return dayOfWeekBlockeds;
  }

  public void setDayOfWeekBlockeds(List<String> dayOfWeekBlockeds) {
    this.dayOfWeekBlockeds = dayOfWeekBlockeds;
  }


  public Allcarrier dayOfWeekForDelivery(List<DayOfWeekForDeliveryInner> dayOfWeekForDelivery) {
    this.dayOfWeekForDelivery = dayOfWeekForDelivery;
    return this;
  }

  public Allcarrier addDayOfWeekForDeliveryItem(DayOfWeekForDeliveryInner dayOfWeekForDeliveryItem) {
    if (this.dayOfWeekForDelivery == null) {
      this.dayOfWeekForDelivery = new ArrayList<>();
    }
    this.dayOfWeekForDelivery.add(dayOfWeekForDeliveryItem);
    return this;
  }

  /**
   * Select the chosen days for delivery. Values for each day of the week are: 0 &#x3D; sunday, 1 &#x3D; monday, 2 &#x3D; tuesday, 3 &#x3D; wednesday, 4 &#x3D; thursday, 5 &#x3D; friday, 6 &#x3D; saturday. Make sure to add the available hours for the chosen days, following the example.
   * @return dayOfWeekForDelivery
   */
  @javax.annotation.Nullable
  public List<DayOfWeekForDeliveryInner> getDayOfWeekForDelivery() {
    return dayOfWeekForDelivery;
  }

  public void setDayOfWeekForDelivery(List<DayOfWeekForDeliveryInner> dayOfWeekForDelivery) {
    this.dayOfWeekForDelivery = dayOfWeekForDelivery;
  }


  public Allcarrier deliveryOnWeekends(Boolean deliveryOnWeekends) {
    this.deliveryOnWeekends = deliveryOnWeekends;
    return this;
  }

  /**
   * Get deliveryOnWeekends
   * @return deliveryOnWeekends
   */
  @javax.annotation.Nonnull
  public Boolean getDeliveryOnWeekends() {
    return deliveryOnWeekends;
  }

  public void setDeliveryOnWeekends(Boolean deliveryOnWeekends) {
    this.deliveryOnWeekends = deliveryOnWeekends;
  }


  public Allcarrier exclusiveToDeliveryPoints(Boolean exclusiveToDeliveryPoints) {
    this.exclusiveToDeliveryPoints = exclusiveToDeliveryPoints;
    return this;
  }

  /**
   * Get exclusiveToDeliveryPoints
   * @return exclusiveToDeliveryPoints
   */
  @javax.annotation.Nonnull
  public Boolean getExclusiveToDeliveryPoints() {
    return exclusiveToDeliveryPoints;
  }

  public void setExclusiveToDeliveryPoints(Boolean exclusiveToDeliveryPoints) {
    this.exclusiveToDeliveryPoints = exclusiveToDeliveryPoints;
  }


  public Allcarrier factorCubicWeight(BigDecimal factorCubicWeight) {
    this.factorCubicWeight = factorCubicWeight;
    return this;
  }

  /**
   * Get factorCubicWeight
   * @return factorCubicWeight
   */
  @javax.annotation.Nullable
  public BigDecimal getFactorCubicWeight() {
    return factorCubicWeight;
  }

  public void setFactorCubicWeight(BigDecimal factorCubicWeight) {
    this.factorCubicWeight = factorCubicWeight;
  }


  public Allcarrier freightTableProcessStatus(Integer freightTableProcessStatus) {
    this.freightTableProcessStatus = freightTableProcessStatus;
    return this;
  }

  /**
   * Get freightTableProcessStatus
   * @return freightTableProcessStatus
   */
  @javax.annotation.Nonnull
  public Integer getFreightTableProcessStatus() {
    return freightTableProcessStatus;
  }

  public void setFreightTableProcessStatus(Integer freightTableProcessStatus) {
    this.freightTableProcessStatus = freightTableProcessStatus;
  }


  public Allcarrier freightTableValueError(String freightTableValueError) {
    this.freightTableValueError = freightTableValueError;
    return this;
  }

  /**
   * Get freightTableValueError
   * @return freightTableValueError
   */
  @javax.annotation.Nullable
  public String getFreightTableValueError() {
    return freightTableValueError;
  }

  public void setFreightTableValueError(String freightTableValueError) {
    this.freightTableValueError = freightTableValueError;
  }


  public Allcarrier freightValue(List<String> freightValue) {
    this.freightValue = freightValue;
    return this;
  }

  public Allcarrier addFreightValueItem(String freightValueItem) {
    if (this.freightValue == null) {
      this.freightValue = new ArrayList<>();
    }
    this.freightValue.add(freightValueItem);
    return this;
  }

  /**
   * 
   * @return freightValue
   */
  @javax.annotation.Nonnull
  public List<String> getFreightValue() {
    return freightValue;
  }

  public void setFreightValue(List<String> freightValue) {
    this.freightValue = freightValue;
  }


  public Allcarrier id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Allcarrier isPolygon(Boolean isPolygon) {
    this.isPolygon = isPolygon;
    return this;
  }

  /**
   * Get isPolygon
   * @return isPolygon
   */
  @javax.annotation.Nonnull
  public Boolean getIsPolygon() {
    return isPolygon;
  }

  public void setIsPolygon(Boolean isPolygon) {
    this.isPolygon = isPolygon;
  }


  public Allcarrier maxDimension(MaxDimension21 maxDimension) {
    this.maxDimension = maxDimension;
    return this;
  }

  /**
   * Get maxDimension
   * @return maxDimension
   */
  @javax.annotation.Nonnull
  public MaxDimension21 getMaxDimension() {
    return maxDimension;
  }

  public void setMaxDimension(MaxDimension21 maxDimension) {
    this.maxDimension = maxDimension;
  }


  public Allcarrier maxRangeDelivery(Integer maxRangeDelivery) {
    this.maxRangeDelivery = maxRangeDelivery;
    return this;
  }

  /**
   * Get maxRangeDelivery
   * @return maxRangeDelivery
   */
  @javax.annotation.Nonnull
  public Integer getMaxRangeDelivery() {
    return maxRangeDelivery;
  }

  public void setMaxRangeDelivery(Integer maxRangeDelivery) {
    this.maxRangeDelivery = maxRangeDelivery;
  }


  public Allcarrier minimunCubicWeight(BigDecimal minimunCubicWeight) {
    this.minimunCubicWeight = minimunCubicWeight;
    return this;
  }

  /**
   * Get minimunCubicWeight
   * @return minimunCubicWeight
   */
  @javax.annotation.Nonnull
  public BigDecimal getMinimunCubicWeight() {
    return minimunCubicWeight;
  }

  public void setMinimunCubicWeight(BigDecimal minimunCubicWeight) {
    this.minimunCubicWeight = minimunCubicWeight;
  }


  public Allcarrier modals(List<String> modals) {
    this.modals = modals;
    return this;
  }

  public Allcarrier addModalsItem(String modalsItem) {
    if (this.modals == null) {
      this.modals = new ArrayList<>();
    }
    this.modals.add(modalsItem);
    return this;
  }

  /**
   * 
   * @return modals
   */
  @javax.annotation.Nonnull
  public List<String> getModals() {
    return modals;
  }

  public void setModals(List<String> modals) {
    this.modals = modals;
  }


  public Allcarrier name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Allcarrier numberOfItemsPerShipment(String numberOfItemsPerShipment) {
    this.numberOfItemsPerShipment = numberOfItemsPerShipment;
    return this;
  }

  /**
   * Get numberOfItemsPerShipment
   * @return numberOfItemsPerShipment
   */
  @javax.annotation.Nullable
  public String getNumberOfItemsPerShipment() {
    return numberOfItemsPerShipment;
  }

  public void setNumberOfItemsPerShipment(String numberOfItemsPerShipment) {
    this.numberOfItemsPerShipment = numberOfItemsPerShipment;
  }


  public Allcarrier onlyItemsWithDefinedModal(Boolean onlyItemsWithDefinedModal) {
    this.onlyItemsWithDefinedModal = onlyItemsWithDefinedModal;
    return this;
  }

  /**
   * Get onlyItemsWithDefinedModal
   * @return onlyItemsWithDefinedModal
   */
  @javax.annotation.Nonnull
  public Boolean getOnlyItemsWithDefinedModal() {
    return onlyItemsWithDefinedModal;
  }

  public void setOnlyItemsWithDefinedModal(Boolean onlyItemsWithDefinedModal) {
    this.onlyItemsWithDefinedModal = onlyItemsWithDefinedModal;
  }


  public Allcarrier scheduledDelivery(Boolean scheduledDelivery) {
    this.scheduledDelivery = scheduledDelivery;
    return this;
  }

  /**
   * Get scheduledDelivery
   * @return scheduledDelivery
   */
  @javax.annotation.Nonnull
  public Boolean getScheduledDelivery() {
    return scheduledDelivery;
  }

  public void setScheduledDelivery(Boolean scheduledDelivery) {
    this.scheduledDelivery = scheduledDelivery;
  }


  public Allcarrier slaType(String slaType) {
    this.slaType = slaType;
    return this;
  }

  /**
   * Get slaType
   * @return slaType
   */
  @javax.annotation.Nonnull
  public String getSlaType() {
    return slaType;
  }

  public void setSlaType(String slaType) {
    this.slaType = slaType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Allcarrier allcarrier = (Allcarrier) o;
    return Objects.equals(this.carrierSchedule, allcarrier.carrierSchedule) &&
        Objects.equals(this.dayOfWeekBlockeds, allcarrier.dayOfWeekBlockeds) &&
        Objects.equals(this.dayOfWeekForDelivery, allcarrier.dayOfWeekForDelivery) &&
        Objects.equals(this.deliveryOnWeekends, allcarrier.deliveryOnWeekends) &&
        Objects.equals(this.exclusiveToDeliveryPoints, allcarrier.exclusiveToDeliveryPoints) &&
        Objects.equals(this.factorCubicWeight, allcarrier.factorCubicWeight) &&
        Objects.equals(this.freightTableProcessStatus, allcarrier.freightTableProcessStatus) &&
        Objects.equals(this.freightTableValueError, allcarrier.freightTableValueError) &&
        Objects.equals(this.freightValue, allcarrier.freightValue) &&
        Objects.equals(this.id, allcarrier.id) &&
        Objects.equals(this.isPolygon, allcarrier.isPolygon) &&
        Objects.equals(this.maxDimension, allcarrier.maxDimension) &&
        Objects.equals(this.maxRangeDelivery, allcarrier.maxRangeDelivery) &&
        Objects.equals(this.minimunCubicWeight, allcarrier.minimunCubicWeight) &&
        Objects.equals(this.modals, allcarrier.modals) &&
        Objects.equals(this.name, allcarrier.name) &&
        Objects.equals(this.numberOfItemsPerShipment, allcarrier.numberOfItemsPerShipment) &&
        Objects.equals(this.onlyItemsWithDefinedModal, allcarrier.onlyItemsWithDefinedModal) &&
        Objects.equals(this.scheduledDelivery, allcarrier.scheduledDelivery) &&
        Objects.equals(this.slaType, allcarrier.slaType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carrierSchedule, dayOfWeekBlockeds, dayOfWeekForDelivery, deliveryOnWeekends, exclusiveToDeliveryPoints, factorCubicWeight, freightTableProcessStatus, freightTableValueError, freightValue, id, isPolygon, maxDimension, maxRangeDelivery, minimunCubicWeight, modals, name, numberOfItemsPerShipment, onlyItemsWithDefinedModal, scheduledDelivery, slaType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Allcarrier {\n");
    sb.append("    carrierSchedule: ").append(toIndentedString(carrierSchedule)).append("\n");
    sb.append("    dayOfWeekBlockeds: ").append(toIndentedString(dayOfWeekBlockeds)).append("\n");
    sb.append("    dayOfWeekForDelivery: ").append(toIndentedString(dayOfWeekForDelivery)).append("\n");
    sb.append("    deliveryOnWeekends: ").append(toIndentedString(deliveryOnWeekends)).append("\n");
    sb.append("    exclusiveToDeliveryPoints: ").append(toIndentedString(exclusiveToDeliveryPoints)).append("\n");
    sb.append("    factorCubicWeight: ").append(toIndentedString(factorCubicWeight)).append("\n");
    sb.append("    freightTableProcessStatus: ").append(toIndentedString(freightTableProcessStatus)).append("\n");
    sb.append("    freightTableValueError: ").append(toIndentedString(freightTableValueError)).append("\n");
    sb.append("    freightValue: ").append(toIndentedString(freightValue)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPolygon: ").append(toIndentedString(isPolygon)).append("\n");
    sb.append("    maxDimension: ").append(toIndentedString(maxDimension)).append("\n");
    sb.append("    maxRangeDelivery: ").append(toIndentedString(maxRangeDelivery)).append("\n");
    sb.append("    minimunCubicWeight: ").append(toIndentedString(minimunCubicWeight)).append("\n");
    sb.append("    modals: ").append(toIndentedString(modals)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberOfItemsPerShipment: ").append(toIndentedString(numberOfItemsPerShipment)).append("\n");
    sb.append("    onlyItemsWithDefinedModal: ").append(toIndentedString(onlyItemsWithDefinedModal)).append("\n");
    sb.append("    scheduledDelivery: ").append(toIndentedString(scheduledDelivery)).append("\n");
    sb.append("    slaType: ").append(toIndentedString(slaType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("carrierSchedule");
    openapiFields.add("dayOfWeekBlockeds");
    openapiFields.add("dayOfWeekForDelivery");
    openapiFields.add("deliveryOnWeekends");
    openapiFields.add("exclusiveToDeliveryPoints");
    openapiFields.add("factorCubicWeight");
    openapiFields.add("freightTableProcessStatus");
    openapiFields.add("freightTableValueError");
    openapiFields.add("freightValue");
    openapiFields.add("id");
    openapiFields.add("isPolygon");
    openapiFields.add("maxDimension");
    openapiFields.add("maxRangeDelivery");
    openapiFields.add("minimunCubicWeight");
    openapiFields.add("modals");
    openapiFields.add("name");
    openapiFields.add("numberOfItemsPerShipment");
    openapiFields.add("onlyItemsWithDefinedModal");
    openapiFields.add("scheduledDelivery");
    openapiFields.add("slaType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("carrierSchedule");
    openapiRequiredFields.add("dayOfWeekBlockeds");
    openapiRequiredFields.add("dayOfWeekForDelivery");
    openapiRequiredFields.add("deliveryOnWeekends");
    openapiRequiredFields.add("exclusiveToDeliveryPoints");
    openapiRequiredFields.add("factorCubicWeight");
    openapiRequiredFields.add("freightTableProcessStatus");
    openapiRequiredFields.add("freightTableValueError");
    openapiRequiredFields.add("freightValue");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isPolygon");
    openapiRequiredFields.add("maxDimension");
    openapiRequiredFields.add("maxRangeDelivery");
    openapiRequiredFields.add("minimunCubicWeight");
    openapiRequiredFields.add("modals");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("numberOfItemsPerShipment");
    openapiRequiredFields.add("onlyItemsWithDefinedModal");
    openapiRequiredFields.add("scheduledDelivery");
    openapiRequiredFields.add("slaType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Allcarrier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Allcarrier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Allcarrier is not found in the empty JSON string", Allcarrier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Allcarrier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Allcarrier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Allcarrier.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("carrierSchedule") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("carrierSchedule").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierSchedule` to be an array in the JSON string but got `%s`", jsonObj.get("carrierSchedule").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("dayOfWeekBlockeds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("dayOfWeekBlockeds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayOfWeekBlockeds` to be an array in the JSON string but got `%s`", jsonObj.get("dayOfWeekBlockeds").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("dayOfWeekForDelivery").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayOfWeekForDelivery` to be an array in the JSON string but got `%s`", jsonObj.get("dayOfWeekForDelivery").toString()));
      }

      JsonArray jsonArraydayOfWeekForDelivery = jsonObj.getAsJsonArray("dayOfWeekForDelivery");
      // validate the required field `dayOfWeekForDelivery` (array)
      for (int i = 0; i < jsonArraydayOfWeekForDelivery.size(); i++) {
        DayOfWeekForDeliveryInner.validateJsonElement(jsonArraydayOfWeekForDelivery.get(i));
      };
      if ((jsonObj.get("freightTableValueError") != null && !jsonObj.get("freightTableValueError").isJsonNull()) && !jsonObj.get("freightTableValueError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freightTableValueError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freightTableValueError").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("freightValue") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("freightValue").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `freightValue` to be an array in the JSON string but got `%s`", jsonObj.get("freightValue").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `maxDimension`
      MaxDimension21.validateJsonElement(jsonObj.get("maxDimension"));
      // ensure the required json array is present
      if (jsonObj.get("modals") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("modals").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modals` to be an array in the JSON string but got `%s`", jsonObj.get("modals").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("numberOfItemsPerShipment") != null && !jsonObj.get("numberOfItemsPerShipment").isJsonNull()) && !jsonObj.get("numberOfItemsPerShipment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numberOfItemsPerShipment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numberOfItemsPerShipment").toString()));
      }
      if (!jsonObj.get("slaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slaType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Allcarrier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Allcarrier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Allcarrier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Allcarrier.class));

       return (TypeAdapter<T>) new TypeAdapter<Allcarrier>() {
           @Override
           public void write(JsonWriter out, Allcarrier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Allcarrier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Allcarrier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Allcarrier
   * @throws IOException if the JSON string is invalid with respect to Allcarrier
   */
  public static Allcarrier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Allcarrier.class);
  }

  /**
   * Convert an instance of Allcarrier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

