/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListFreightValues
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListFreightValues {
  public static final String SERIALIZED_NAME_ABSOLUTE_MONEY_COST = "absoluteMoneyCost";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_MONEY_COST)
  private BigDecimal absoluteMoneyCost;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_MAX_VOLUME = "maxVolume";
  @SerializedName(SERIALIZED_NAME_MAX_VOLUME)
  private BigDecimal maxVolume;

  public static final String SERIALIZED_NAME_MINIMUM_VALUE_INSURANCE = "minimumValueInsurance";
  @SerializedName(SERIALIZED_NAME_MINIMUM_VALUE_INSURANCE)
  private BigDecimal minimumValueInsurance;

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private Integer operationType;

  public static final String SERIALIZED_NAME_POLYGON = "polygon";
  @SerializedName(SERIALIZED_NAME_POLYGON)
  private String polygon;

  public static final String SERIALIZED_NAME_PRICE_PERCENT = "pricePercent";
  @SerializedName(SERIALIZED_NAME_PRICE_PERCENT)
  private BigDecimal pricePercent;

  public static final String SERIALIZED_NAME_PRICE_PERCENT_BY_WEIGHT = "pricePercentByWeight";
  @SerializedName(SERIALIZED_NAME_PRICE_PERCENT_BY_WEIGHT)
  private BigDecimal pricePercentByWeight;

  public static final String SERIALIZED_NAME_RESTRICTED_FREIGHTS = "restrictedFreights";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_FREIGHTS)
  private List<String> restrictedFreights = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_COST = "timeCost";
  @SerializedName(SERIALIZED_NAME_TIME_COST)
  private String timeCost;

  public static final String SERIALIZED_NAME_WEIGHT_END = "weightEnd";
  @SerializedName(SERIALIZED_NAME_WEIGHT_END)
  private BigDecimal weightEnd;

  public static final String SERIALIZED_NAME_WEIGHT_START = "weightStart";
  @SerializedName(SERIALIZED_NAME_WEIGHT_START)
  private BigDecimal weightStart;

  public static final String SERIALIZED_NAME_ZIP_CODE_END = "zipCodeEnd";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE_END)
  private String zipCodeEnd;

  public static final String SERIALIZED_NAME_ZIP_CODE_START = "zipCodeStart";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE_START)
  private String zipCodeStart;

  public ListFreightValues() {
  }

  public ListFreightValues absoluteMoneyCost(BigDecimal absoluteMoneyCost) {
    this.absoluteMoneyCost = absoluteMoneyCost;
    return this;
  }

  /**
   * Get absoluteMoneyCost
   * @return absoluteMoneyCost
   */
  @javax.annotation.Nonnull
  public BigDecimal getAbsoluteMoneyCost() {
    return absoluteMoneyCost;
  }

  public void setAbsoluteMoneyCost(BigDecimal absoluteMoneyCost) {
    this.absoluteMoneyCost = absoluteMoneyCost;
  }


  public ListFreightValues country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ListFreightValues maxVolume(BigDecimal maxVolume) {
    this.maxVolume = maxVolume;
    return this;
  }

  /**
   * Get maxVolume
   * @return maxVolume
   */
  @javax.annotation.Nonnull
  public BigDecimal getMaxVolume() {
    return maxVolume;
  }

  public void setMaxVolume(BigDecimal maxVolume) {
    this.maxVolume = maxVolume;
  }


  public ListFreightValues minimumValueInsurance(BigDecimal minimumValueInsurance) {
    this.minimumValueInsurance = minimumValueInsurance;
    return this;
  }

  /**
   * Get minimumValueInsurance
   * @return minimumValueInsurance
   */
  @javax.annotation.Nonnull
  public BigDecimal getMinimumValueInsurance() {
    return minimumValueInsurance;
  }

  public void setMinimumValueInsurance(BigDecimal minimumValueInsurance) {
    this.minimumValueInsurance = minimumValueInsurance;
  }


  public ListFreightValues operationType(Integer operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * Get operationType
   * @return operationType
   */
  @javax.annotation.Nonnull
  public Integer getOperationType() {
    return operationType;
  }

  public void setOperationType(Integer operationType) {
    this.operationType = operationType;
  }


  public ListFreightValues polygon(String polygon) {
    this.polygon = polygon;
    return this;
  }

  /**
   * Get polygon
   * @return polygon
   */
  @javax.annotation.Nonnull
  public String getPolygon() {
    return polygon;
  }

  public void setPolygon(String polygon) {
    this.polygon = polygon;
  }


  public ListFreightValues pricePercent(BigDecimal pricePercent) {
    this.pricePercent = pricePercent;
    return this;
  }

  /**
   * Get pricePercent
   * @return pricePercent
   */
  @javax.annotation.Nonnull
  public BigDecimal getPricePercent() {
    return pricePercent;
  }

  public void setPricePercent(BigDecimal pricePercent) {
    this.pricePercent = pricePercent;
  }


  public ListFreightValues pricePercentByWeight(BigDecimal pricePercentByWeight) {
    this.pricePercentByWeight = pricePercentByWeight;
    return this;
  }

  /**
   * Get pricePercentByWeight
   * @return pricePercentByWeight
   */
  @javax.annotation.Nonnull
  public BigDecimal getPricePercentByWeight() {
    return pricePercentByWeight;
  }

  public void setPricePercentByWeight(BigDecimal pricePercentByWeight) {
    this.pricePercentByWeight = pricePercentByWeight;
  }


  public ListFreightValues restrictedFreights(List<String> restrictedFreights) {
    this.restrictedFreights = restrictedFreights;
    return this;
  }

  public ListFreightValues addRestrictedFreightsItem(String restrictedFreightsItem) {
    if (this.restrictedFreights == null) {
      this.restrictedFreights = new ArrayList<>();
    }
    this.restrictedFreights.add(restrictedFreightsItem);
    return this;
  }

  /**
   * 
   * @return restrictedFreights
   */
  @javax.annotation.Nonnull
  public List<String> getRestrictedFreights() {
    return restrictedFreights;
  }

  public void setRestrictedFreights(List<String> restrictedFreights) {
    this.restrictedFreights = restrictedFreights;
  }


  public ListFreightValues timeCost(String timeCost) {
    this.timeCost = timeCost;
    return this;
  }

  /**
   * Get timeCost
   * @return timeCost
   */
  @javax.annotation.Nonnull
  public String getTimeCost() {
    return timeCost;
  }

  public void setTimeCost(String timeCost) {
    this.timeCost = timeCost;
  }


  public ListFreightValues weightEnd(BigDecimal weightEnd) {
    this.weightEnd = weightEnd;
    return this;
  }

  /**
   * Get weightEnd
   * @return weightEnd
   */
  @javax.annotation.Nonnull
  public BigDecimal getWeightEnd() {
    return weightEnd;
  }

  public void setWeightEnd(BigDecimal weightEnd) {
    this.weightEnd = weightEnd;
  }


  public ListFreightValues weightStart(BigDecimal weightStart) {
    this.weightStart = weightStart;
    return this;
  }

  /**
   * Get weightStart
   * @return weightStart
   */
  @javax.annotation.Nonnull
  public BigDecimal getWeightStart() {
    return weightStart;
  }

  public void setWeightStart(BigDecimal weightStart) {
    this.weightStart = weightStart;
  }


  public ListFreightValues zipCodeEnd(String zipCodeEnd) {
    this.zipCodeEnd = zipCodeEnd;
    return this;
  }

  /**
   * Get zipCodeEnd
   * @return zipCodeEnd
   */
  @javax.annotation.Nonnull
  public String getZipCodeEnd() {
    return zipCodeEnd;
  }

  public void setZipCodeEnd(String zipCodeEnd) {
    this.zipCodeEnd = zipCodeEnd;
  }


  public ListFreightValues zipCodeStart(String zipCodeStart) {
    this.zipCodeStart = zipCodeStart;
    return this;
  }

  /**
   * Get zipCodeStart
   * @return zipCodeStart
   */
  @javax.annotation.Nonnull
  public String getZipCodeStart() {
    return zipCodeStart;
  }

  public void setZipCodeStart(String zipCodeStart) {
    this.zipCodeStart = zipCodeStart;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListFreightValues listFreightValues = (ListFreightValues) o;
    return Objects.equals(this.absoluteMoneyCost, listFreightValues.absoluteMoneyCost) &&
        Objects.equals(this.country, listFreightValues.country) &&
        Objects.equals(this.maxVolume, listFreightValues.maxVolume) &&
        Objects.equals(this.minimumValueInsurance, listFreightValues.minimumValueInsurance) &&
        Objects.equals(this.operationType, listFreightValues.operationType) &&
        Objects.equals(this.polygon, listFreightValues.polygon) &&
        Objects.equals(this.pricePercent, listFreightValues.pricePercent) &&
        Objects.equals(this.pricePercentByWeight, listFreightValues.pricePercentByWeight) &&
        Objects.equals(this.restrictedFreights, listFreightValues.restrictedFreights) &&
        Objects.equals(this.timeCost, listFreightValues.timeCost) &&
        Objects.equals(this.weightEnd, listFreightValues.weightEnd) &&
        Objects.equals(this.weightStart, listFreightValues.weightStart) &&
        Objects.equals(this.zipCodeEnd, listFreightValues.zipCodeEnd) &&
        Objects.equals(this.zipCodeStart, listFreightValues.zipCodeStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteMoneyCost, country, maxVolume, minimumValueInsurance, operationType, polygon, pricePercent, pricePercentByWeight, restrictedFreights, timeCost, weightEnd, weightStart, zipCodeEnd, zipCodeStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListFreightValues {\n");
    sb.append("    absoluteMoneyCost: ").append(toIndentedString(absoluteMoneyCost)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    maxVolume: ").append(toIndentedString(maxVolume)).append("\n");
    sb.append("    minimumValueInsurance: ").append(toIndentedString(minimumValueInsurance)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    polygon: ").append(toIndentedString(polygon)).append("\n");
    sb.append("    pricePercent: ").append(toIndentedString(pricePercent)).append("\n");
    sb.append("    pricePercentByWeight: ").append(toIndentedString(pricePercentByWeight)).append("\n");
    sb.append("    restrictedFreights: ").append(toIndentedString(restrictedFreights)).append("\n");
    sb.append("    timeCost: ").append(toIndentedString(timeCost)).append("\n");
    sb.append("    weightEnd: ").append(toIndentedString(weightEnd)).append("\n");
    sb.append("    weightStart: ").append(toIndentedString(weightStart)).append("\n");
    sb.append("    zipCodeEnd: ").append(toIndentedString(zipCodeEnd)).append("\n");
    sb.append("    zipCodeStart: ").append(toIndentedString(zipCodeStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absoluteMoneyCost");
    openapiFields.add("country");
    openapiFields.add("maxVolume");
    openapiFields.add("minimumValueInsurance");
    openapiFields.add("operationType");
    openapiFields.add("polygon");
    openapiFields.add("pricePercent");
    openapiFields.add("pricePercentByWeight");
    openapiFields.add("restrictedFreights");
    openapiFields.add("timeCost");
    openapiFields.add("weightEnd");
    openapiFields.add("weightStart");
    openapiFields.add("zipCodeEnd");
    openapiFields.add("zipCodeStart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("absoluteMoneyCost");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("maxVolume");
    openapiRequiredFields.add("minimumValueInsurance");
    openapiRequiredFields.add("operationType");
    openapiRequiredFields.add("polygon");
    openapiRequiredFields.add("pricePercent");
    openapiRequiredFields.add("pricePercentByWeight");
    openapiRequiredFields.add("restrictedFreights");
    openapiRequiredFields.add("timeCost");
    openapiRequiredFields.add("weightEnd");
    openapiRequiredFields.add("weightStart");
    openapiRequiredFields.add("zipCodeEnd");
    openapiRequiredFields.add("zipCodeStart");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListFreightValues
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListFreightValues.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListFreightValues is not found in the empty JSON string", ListFreightValues.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListFreightValues.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListFreightValues` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListFreightValues.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("polygon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `polygon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("polygon").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("restrictedFreights") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("restrictedFreights").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictedFreights` to be an array in the JSON string but got `%s`", jsonObj.get("restrictedFreights").toString()));
      }
      if (!jsonObj.get("timeCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeCost").toString()));
      }
      if (!jsonObj.get("zipCodeEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCodeEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCodeEnd").toString()));
      }
      if (!jsonObj.get("zipCodeStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCodeStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCodeStart").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListFreightValues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListFreightValues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListFreightValues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListFreightValues.class));

       return (TypeAdapter<T>) new TypeAdapter<ListFreightValues>() {
           @Override
           public void write(JsonWriter out, ListFreightValues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListFreightValues read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListFreightValues given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListFreightValues
   * @throws IOException if the JSON string is invalid with respect to ListFreightValues
   */
  public static ListFreightValues fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListFreightValues.class);
  }

  /**
   * Convert an instance of ListFreightValues to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

