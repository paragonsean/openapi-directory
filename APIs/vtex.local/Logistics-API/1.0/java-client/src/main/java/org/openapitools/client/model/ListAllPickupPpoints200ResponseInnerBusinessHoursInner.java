/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListAllPickupPpoints200ResponseInnerBusinessHoursInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListAllPickupPpoints200ResponseInnerBusinessHoursInner {
  public static final String SERIALIZED_NAME_CLOSING_TIME = "closingTime";
  @SerializedName(SERIALIZED_NAME_CLOSING_TIME)
  private String closingTime;

  public static final String SERIALIZED_NAME_DAY_OF_WEEK = "dayOfWeek";
  @SerializedName(SERIALIZED_NAME_DAY_OF_WEEK)
  private Integer dayOfWeek;

  public static final String SERIALIZED_NAME_OPENING_TIME = "openingTime";
  @SerializedName(SERIALIZED_NAME_OPENING_TIME)
  private String openingTime;

  public ListAllPickupPpoints200ResponseInnerBusinessHoursInner() {
  }

  public ListAllPickupPpoints200ResponseInnerBusinessHoursInner closingTime(String closingTime) {
    this.closingTime = closingTime;
    return this;
  }

  /**
   * Closing time in &#x60;hh:mm:ss&#x60;.
   * @return closingTime
   */
  @javax.annotation.Nullable
  public String getClosingTime() {
    return closingTime;
  }

  public void setClosingTime(String closingTime) {
    this.closingTime = closingTime;
  }


  public ListAllPickupPpoints200ResponseInnerBusinessHoursInner dayOfWeek(Integer dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
    return this;
  }

  /**
   * Day of the week, from &#x60;0&#x60; (sunday) to &#x60;6&#x60; (saturday).
   * @return dayOfWeek
   */
  @javax.annotation.Nullable
  public Integer getDayOfWeek() {
    return dayOfWeek;
  }

  public void setDayOfWeek(Integer dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
  }


  public ListAllPickupPpoints200ResponseInnerBusinessHoursInner openingTime(String openingTime) {
    this.openingTime = openingTime;
    return this;
  }

  /**
   * Opening time in &#x60;hh:mm:ss&#x60;.
   * @return openingTime
   */
  @javax.annotation.Nullable
  public String getOpeningTime() {
    return openingTime;
  }

  public void setOpeningTime(String openingTime) {
    this.openingTime = openingTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAllPickupPpoints200ResponseInnerBusinessHoursInner listAllPickupPpoints200ResponseInnerBusinessHoursInner = (ListAllPickupPpoints200ResponseInnerBusinessHoursInner) o;
    return Objects.equals(this.closingTime, listAllPickupPpoints200ResponseInnerBusinessHoursInner.closingTime) &&
        Objects.equals(this.dayOfWeek, listAllPickupPpoints200ResponseInnerBusinessHoursInner.dayOfWeek) &&
        Objects.equals(this.openingTime, listAllPickupPpoints200ResponseInnerBusinessHoursInner.openingTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closingTime, dayOfWeek, openingTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAllPickupPpoints200ResponseInnerBusinessHoursInner {\n");
    sb.append("    closingTime: ").append(toIndentedString(closingTime)).append("\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("    openingTime: ").append(toIndentedString(openingTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closingTime");
    openapiFields.add("dayOfWeek");
    openapiFields.add("openingTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListAllPickupPpoints200ResponseInnerBusinessHoursInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListAllPickupPpoints200ResponseInnerBusinessHoursInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAllPickupPpoints200ResponseInnerBusinessHoursInner is not found in the empty JSON string", ListAllPickupPpoints200ResponseInnerBusinessHoursInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListAllPickupPpoints200ResponseInnerBusinessHoursInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAllPickupPpoints200ResponseInnerBusinessHoursInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("closingTime") != null && !jsonObj.get("closingTime").isJsonNull()) && !jsonObj.get("closingTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closingTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closingTime").toString()));
      }
      if ((jsonObj.get("openingTime") != null && !jsonObj.get("openingTime").isJsonNull()) && !jsonObj.get("openingTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openingTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openingTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAllPickupPpoints200ResponseInnerBusinessHoursInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAllPickupPpoints200ResponseInnerBusinessHoursInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAllPickupPpoints200ResponseInnerBusinessHoursInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAllPickupPpoints200ResponseInnerBusinessHoursInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAllPickupPpoints200ResponseInnerBusinessHoursInner>() {
           @Override
           public void write(JsonWriter out, ListAllPickupPpoints200ResponseInnerBusinessHoursInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAllPickupPpoints200ResponseInnerBusinessHoursInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListAllPickupPpoints200ResponseInnerBusinessHoursInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListAllPickupPpoints200ResponseInnerBusinessHoursInner
   * @throws IOException if the JSON string is invalid with respect to ListAllPickupPpoints200ResponseInnerBusinessHoursInner
   */
  public static ListAllPickupPpoints200ResponseInnerBusinessHoursInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAllPickupPpoints200ResponseInnerBusinessHoursInner.class);
  }

  /**
   * Convert an instance of ListAllPickupPpoints200ResponseInnerBusinessHoursInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

