/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Item1;
import org.openapitools.client.model.Location1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeliveryItemOption
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeliveryItemOption {
  public static final String SERIALIZED_NAME_ADITIONAL_TIME_BLOCKED_DAYS = "aditionalTimeBlockedDays";
  @SerializedName(SERIALIZED_NAME_ADITIONAL_TIME_BLOCKED_DAYS)
  private String aditionalTimeBlockedDays;

  public static final String SERIALIZED_NAME_DELIVERY_WINDOWS = "deliveryWindows";
  @SerializedName(SERIALIZED_NAME_DELIVERY_WINDOWS)
  private List<String> deliveryWindows = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOCK_ID = "dockId";
  @SerializedName(SERIALIZED_NAME_DOCK_ID)
  private String dockId;

  public static final String SERIALIZED_NAME_DOCK_TIME = "dockTime";
  @SerializedName(SERIALIZED_NAME_DOCK_TIME)
  private String dockTime;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private Item1 item;

  public static final String SERIALIZED_NAME_LIST_PRICE = "listPrice";
  @SerializedName(SERIALIZED_NAME_LIST_PRICE)
  private BigDecimal listPrice;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location1 location;

  public static final String SERIALIZED_NAME_PROMOTIONAL_PRICE = "promotionalPrice";
  @SerializedName(SERIALIZED_NAME_PROMOTIONAL_PRICE)
  private BigDecimal promotionalPrice;

  public static final String SERIALIZED_NAME_SLA_TYPE = "slaType";
  @SerializedName(SERIALIZED_NAME_SLA_TYPE)
  private String slaType;

  public static final String SERIALIZED_NAME_SLA_TYPE_NAME = "slaTypeName";
  @SerializedName(SERIALIZED_NAME_SLA_TYPE_NAME)
  private String slaTypeName;

  public static final String SERIALIZED_NAME_TIME_TO_DOCK_PLUS_DOCK_TIME = "timeToDockPlusDockTime";
  @SerializedName(SERIALIZED_NAME_TIME_TO_DOCK_PLUS_DOCK_TIME)
  private String timeToDockPlusDockTime;

  public static final String SERIALIZED_NAME_TOTAL_TIME = "totalTime";
  @SerializedName(SERIALIZED_NAME_TOTAL_TIME)
  private String totalTime;

  public static final String SERIALIZED_NAME_TRANSIT_TIME = "transitTime";
  @SerializedName(SERIALIZED_NAME_TRANSIT_TIME)
  private String transitTime;

  public static final String SERIALIZED_NAME_WARE_HOUSE_ID = "wareHouseId";
  @SerializedName(SERIALIZED_NAME_WARE_HOUSE_ID)
  private String wareHouseId;

  public DeliveryItemOption() {
  }

  public DeliveryItemOption aditionalTimeBlockedDays(String aditionalTimeBlockedDays) {
    this.aditionalTimeBlockedDays = aditionalTimeBlockedDays;
    return this;
  }

  /**
   * Get aditionalTimeBlockedDays
   * @return aditionalTimeBlockedDays
   */
  @javax.annotation.Nonnull
  public String getAditionalTimeBlockedDays() {
    return aditionalTimeBlockedDays;
  }

  public void setAditionalTimeBlockedDays(String aditionalTimeBlockedDays) {
    this.aditionalTimeBlockedDays = aditionalTimeBlockedDays;
  }


  public DeliveryItemOption deliveryWindows(List<String> deliveryWindows) {
    this.deliveryWindows = deliveryWindows;
    return this;
  }

  public DeliveryItemOption addDeliveryWindowsItem(String deliveryWindowsItem) {
    if (this.deliveryWindows == null) {
      this.deliveryWindows = new ArrayList<>();
    }
    this.deliveryWindows.add(deliveryWindowsItem);
    return this;
  }

  /**
   * 
   * @return deliveryWindows
   */
  @javax.annotation.Nonnull
  public List<String> getDeliveryWindows() {
    return deliveryWindows;
  }

  public void setDeliveryWindows(List<String> deliveryWindows) {
    this.deliveryWindows = deliveryWindows;
  }


  public DeliveryItemOption dockId(String dockId) {
    this.dockId = dockId;
    return this;
  }

  /**
   * Get dockId
   * @return dockId
   */
  @javax.annotation.Nonnull
  public String getDockId() {
    return dockId;
  }

  public void setDockId(String dockId) {
    this.dockId = dockId;
  }


  public DeliveryItemOption dockTime(String dockTime) {
    this.dockTime = dockTime;
    return this;
  }

  /**
   * Get dockTime
   * @return dockTime
   */
  @javax.annotation.Nonnull
  public String getDockTime() {
    return dockTime;
  }

  public void setDockTime(String dockTime) {
    this.dockTime = dockTime;
  }


  public DeliveryItemOption item(Item1 item) {
    this.item = item;
    return this;
  }

  /**
   * Get item
   * @return item
   */
  @javax.annotation.Nonnull
  public Item1 getItem() {
    return item;
  }

  public void setItem(Item1 item) {
    this.item = item;
  }


  public DeliveryItemOption listPrice(BigDecimal listPrice) {
    this.listPrice = listPrice;
    return this;
  }

  /**
   * Get listPrice
   * @return listPrice
   */
  @javax.annotation.Nonnull
  public BigDecimal getListPrice() {
    return listPrice;
  }

  public void setListPrice(BigDecimal listPrice) {
    this.listPrice = listPrice;
  }


  public DeliveryItemOption location(Location1 location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nonnull
  public Location1 getLocation() {
    return location;
  }

  public void setLocation(Location1 location) {
    this.location = location;
  }


  public DeliveryItemOption promotionalPrice(BigDecimal promotionalPrice) {
    this.promotionalPrice = promotionalPrice;
    return this;
  }

  /**
   * Get promotionalPrice
   * @return promotionalPrice
   */
  @javax.annotation.Nonnull
  public BigDecimal getPromotionalPrice() {
    return promotionalPrice;
  }

  public void setPromotionalPrice(BigDecimal promotionalPrice) {
    this.promotionalPrice = promotionalPrice;
  }


  public DeliveryItemOption slaType(String slaType) {
    this.slaType = slaType;
    return this;
  }

  /**
   * Get slaType
   * @return slaType
   */
  @javax.annotation.Nonnull
  public String getSlaType() {
    return slaType;
  }

  public void setSlaType(String slaType) {
    this.slaType = slaType;
  }


  public DeliveryItemOption slaTypeName(String slaTypeName) {
    this.slaTypeName = slaTypeName;
    return this;
  }

  /**
   * Get slaTypeName
   * @return slaTypeName
   */
  @javax.annotation.Nonnull
  public String getSlaTypeName() {
    return slaTypeName;
  }

  public void setSlaTypeName(String slaTypeName) {
    this.slaTypeName = slaTypeName;
  }


  public DeliveryItemOption timeToDockPlusDockTime(String timeToDockPlusDockTime) {
    this.timeToDockPlusDockTime = timeToDockPlusDockTime;
    return this;
  }

  /**
   * Get timeToDockPlusDockTime
   * @return timeToDockPlusDockTime
   */
  @javax.annotation.Nonnull
  public String getTimeToDockPlusDockTime() {
    return timeToDockPlusDockTime;
  }

  public void setTimeToDockPlusDockTime(String timeToDockPlusDockTime) {
    this.timeToDockPlusDockTime = timeToDockPlusDockTime;
  }


  public DeliveryItemOption totalTime(String totalTime) {
    this.totalTime = totalTime;
    return this;
  }

  /**
   * Get totalTime
   * @return totalTime
   */
  @javax.annotation.Nonnull
  public String getTotalTime() {
    return totalTime;
  }

  public void setTotalTime(String totalTime) {
    this.totalTime = totalTime;
  }


  public DeliveryItemOption transitTime(String transitTime) {
    this.transitTime = transitTime;
    return this;
  }

  /**
   * Get transitTime
   * @return transitTime
   */
  @javax.annotation.Nonnull
  public String getTransitTime() {
    return transitTime;
  }

  public void setTransitTime(String transitTime) {
    this.transitTime = transitTime;
  }


  public DeliveryItemOption wareHouseId(String wareHouseId) {
    this.wareHouseId = wareHouseId;
    return this;
  }

  /**
   * Get wareHouseId
   * @return wareHouseId
   */
  @javax.annotation.Nullable
  public String getWareHouseId() {
    return wareHouseId;
  }

  public void setWareHouseId(String wareHouseId) {
    this.wareHouseId = wareHouseId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliveryItemOption deliveryItemOption = (DeliveryItemOption) o;
    return Objects.equals(this.aditionalTimeBlockedDays, deliveryItemOption.aditionalTimeBlockedDays) &&
        Objects.equals(this.deliveryWindows, deliveryItemOption.deliveryWindows) &&
        Objects.equals(this.dockId, deliveryItemOption.dockId) &&
        Objects.equals(this.dockTime, deliveryItemOption.dockTime) &&
        Objects.equals(this.item, deliveryItemOption.item) &&
        Objects.equals(this.listPrice, deliveryItemOption.listPrice) &&
        Objects.equals(this.location, deliveryItemOption.location) &&
        Objects.equals(this.promotionalPrice, deliveryItemOption.promotionalPrice) &&
        Objects.equals(this.slaType, deliveryItemOption.slaType) &&
        Objects.equals(this.slaTypeName, deliveryItemOption.slaTypeName) &&
        Objects.equals(this.timeToDockPlusDockTime, deliveryItemOption.timeToDockPlusDockTime) &&
        Objects.equals(this.totalTime, deliveryItemOption.totalTime) &&
        Objects.equals(this.transitTime, deliveryItemOption.transitTime) &&
        Objects.equals(this.wareHouseId, deliveryItemOption.wareHouseId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aditionalTimeBlockedDays, deliveryWindows, dockId, dockTime, item, listPrice, location, promotionalPrice, slaType, slaTypeName, timeToDockPlusDockTime, totalTime, transitTime, wareHouseId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliveryItemOption {\n");
    sb.append("    aditionalTimeBlockedDays: ").append(toIndentedString(aditionalTimeBlockedDays)).append("\n");
    sb.append("    deliveryWindows: ").append(toIndentedString(deliveryWindows)).append("\n");
    sb.append("    dockId: ").append(toIndentedString(dockId)).append("\n");
    sb.append("    dockTime: ").append(toIndentedString(dockTime)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("    listPrice: ").append(toIndentedString(listPrice)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    promotionalPrice: ").append(toIndentedString(promotionalPrice)).append("\n");
    sb.append("    slaType: ").append(toIndentedString(slaType)).append("\n");
    sb.append("    slaTypeName: ").append(toIndentedString(slaTypeName)).append("\n");
    sb.append("    timeToDockPlusDockTime: ").append(toIndentedString(timeToDockPlusDockTime)).append("\n");
    sb.append("    totalTime: ").append(toIndentedString(totalTime)).append("\n");
    sb.append("    transitTime: ").append(toIndentedString(transitTime)).append("\n");
    sb.append("    wareHouseId: ").append(toIndentedString(wareHouseId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aditionalTimeBlockedDays");
    openapiFields.add("deliveryWindows");
    openapiFields.add("dockId");
    openapiFields.add("dockTime");
    openapiFields.add("item");
    openapiFields.add("listPrice");
    openapiFields.add("location");
    openapiFields.add("promotionalPrice");
    openapiFields.add("slaType");
    openapiFields.add("slaTypeName");
    openapiFields.add("timeToDockPlusDockTime");
    openapiFields.add("totalTime");
    openapiFields.add("transitTime");
    openapiFields.add("wareHouseId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aditionalTimeBlockedDays");
    openapiRequiredFields.add("deliveryWindows");
    openapiRequiredFields.add("dockId");
    openapiRequiredFields.add("dockTime");
    openapiRequiredFields.add("item");
    openapiRequiredFields.add("listPrice");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("promotionalPrice");
    openapiRequiredFields.add("slaType");
    openapiRequiredFields.add("slaTypeName");
    openapiRequiredFields.add("timeToDockPlusDockTime");
    openapiRequiredFields.add("totalTime");
    openapiRequiredFields.add("transitTime");
    openapiRequiredFields.add("wareHouseId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeliveryItemOption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeliveryItemOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliveryItemOption is not found in the empty JSON string", DeliveryItemOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeliveryItemOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeliveryItemOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeliveryItemOption.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("aditionalTimeBlockedDays").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aditionalTimeBlockedDays` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aditionalTimeBlockedDays").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("deliveryWindows") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("deliveryWindows").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryWindows` to be an array in the JSON string but got `%s`", jsonObj.get("deliveryWindows").toString()));
      }
      if (!jsonObj.get("dockId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockId").toString()));
      }
      if (!jsonObj.get("dockTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockTime").toString()));
      }
      // validate the required field `item`
      Item1.validateJsonElement(jsonObj.get("item"));
      // validate the required field `location`
      Location1.validateJsonElement(jsonObj.get("location"));
      if (!jsonObj.get("slaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slaType").toString()));
      }
      if (!jsonObj.get("slaTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slaTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slaTypeName").toString()));
      }
      if (!jsonObj.get("timeToDockPlusDockTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeToDockPlusDockTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeToDockPlusDockTime").toString()));
      }
      if (!jsonObj.get("totalTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalTime").toString()));
      }
      if (!jsonObj.get("transitTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transitTime").toString()));
      }
      if ((jsonObj.get("wareHouseId") != null && !jsonObj.get("wareHouseId").isJsonNull()) && !jsonObj.get("wareHouseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wareHouseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wareHouseId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliveryItemOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliveryItemOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliveryItemOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliveryItemOption.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliveryItemOption>() {
           @Override
           public void write(JsonWriter out, DeliveryItemOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliveryItemOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeliveryItemOption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeliveryItemOption
   * @throws IOException if the JSON string is invalid with respect to DeliveryItemOption
   */
  public static DeliveryItemOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliveryItemOption.class);
  }

  /**
   * Convert an instance of DeliveryItemOption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

