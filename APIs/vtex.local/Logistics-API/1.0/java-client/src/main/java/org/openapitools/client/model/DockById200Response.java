/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PickupStoreInfo11;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DockById200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DockById200Response {
  public static final String SERIALIZED_NAME_DOCK_TIME_FAKE = "dockTimeFake";
  @SerializedName(SERIALIZED_NAME_DOCK_TIME_FAKE)
  private String dockTimeFake;

  public static final String SERIALIZED_NAME_FREIGHT_TABLE_IDS = "freightTableIds";
  @SerializedName(SERIALIZED_NAME_FREIGHT_TABLE_IDS)
  private List<String> freightTableIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICKUP_STORE_INFO = "pickupStoreInfo";
  @SerializedName(SERIALIZED_NAME_PICKUP_STORE_INFO)
  private PickupStoreInfo11 pickupStoreInfo;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_SALES_CHANNEL = "salesChannel";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNEL)
  private String salesChannel;

  public static final String SERIALIZED_NAME_SALES_CHANNELS = "salesChannels";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNELS)
  private List<String> salesChannels = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_FAKE_OVERHEAD = "timeFakeOverhead";
  @SerializedName(SERIALIZED_NAME_TIME_FAKE_OVERHEAD)
  private String timeFakeOverhead;

  public static final String SERIALIZED_NAME_WMS_END_POINT = "wmsEndPoint";
  @SerializedName(SERIALIZED_NAME_WMS_END_POINT)
  private String wmsEndPoint;

  public DockById200Response() {
  }

  public DockById200Response dockTimeFake(String dockTimeFake) {
    this.dockTimeFake = dockTimeFake;
    return this;
  }

  /**
   * Get dockTimeFake
   * @return dockTimeFake
   */
  @javax.annotation.Nonnull
  public String getDockTimeFake() {
    return dockTimeFake;
  }

  public void setDockTimeFake(String dockTimeFake) {
    this.dockTimeFake = dockTimeFake;
  }


  public DockById200Response freightTableIds(List<String> freightTableIds) {
    this.freightTableIds = freightTableIds;
    return this;
  }

  public DockById200Response addFreightTableIdsItem(String freightTableIdsItem) {
    if (this.freightTableIds == null) {
      this.freightTableIds = new ArrayList<>();
    }
    this.freightTableIds.add(freightTableIdsItem);
    return this;
  }

  /**
   * 
   * @return freightTableIds
   */
  @javax.annotation.Nonnull
  public List<String> getFreightTableIds() {
    return freightTableIds;
  }

  public void setFreightTableIds(List<String> freightTableIds) {
    this.freightTableIds = freightTableIds;
  }


  public DockById200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DockById200Response name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DockById200Response pickupStoreInfo(PickupStoreInfo11 pickupStoreInfo) {
    this.pickupStoreInfo = pickupStoreInfo;
    return this;
  }

  /**
   * Get pickupStoreInfo
   * @return pickupStoreInfo
   */
  @javax.annotation.Nonnull
  public PickupStoreInfo11 getPickupStoreInfo() {
    return pickupStoreInfo;
  }

  public void setPickupStoreInfo(PickupStoreInfo11 pickupStoreInfo) {
    this.pickupStoreInfo = pickupStoreInfo;
  }


  public DockById200Response priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nonnull
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public DockById200Response salesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
    return this;
  }

  /**
   * Get salesChannel
   * @return salesChannel
   */
  @javax.annotation.Nullable
  public String getSalesChannel() {
    return salesChannel;
  }

  public void setSalesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
  }


  public DockById200Response salesChannels(List<String> salesChannels) {
    this.salesChannels = salesChannels;
    return this;
  }

  public DockById200Response addSalesChannelsItem(String salesChannelsItem) {
    if (this.salesChannels == null) {
      this.salesChannels = new ArrayList<>();
    }
    this.salesChannels.add(salesChannelsItem);
    return this;
  }

  /**
   * 
   * @return salesChannels
   */
  @javax.annotation.Nonnull
  public List<String> getSalesChannels() {
    return salesChannels;
  }

  public void setSalesChannels(List<String> salesChannels) {
    this.salesChannels = salesChannels;
  }


  public DockById200Response timeFakeOverhead(String timeFakeOverhead) {
    this.timeFakeOverhead = timeFakeOverhead;
    return this;
  }

  /**
   * Get timeFakeOverhead
   * @return timeFakeOverhead
   */
  @javax.annotation.Nonnull
  public String getTimeFakeOverhead() {
    return timeFakeOverhead;
  }

  public void setTimeFakeOverhead(String timeFakeOverhead) {
    this.timeFakeOverhead = timeFakeOverhead;
  }


  public DockById200Response wmsEndPoint(String wmsEndPoint) {
    this.wmsEndPoint = wmsEndPoint;
    return this;
  }

  /**
   * Get wmsEndPoint
   * @return wmsEndPoint
   */
  @javax.annotation.Nonnull
  public String getWmsEndPoint() {
    return wmsEndPoint;
  }

  public void setWmsEndPoint(String wmsEndPoint) {
    this.wmsEndPoint = wmsEndPoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DockById200Response dockById200Response = (DockById200Response) o;
    return Objects.equals(this.dockTimeFake, dockById200Response.dockTimeFake) &&
        Objects.equals(this.freightTableIds, dockById200Response.freightTableIds) &&
        Objects.equals(this.id, dockById200Response.id) &&
        Objects.equals(this.name, dockById200Response.name) &&
        Objects.equals(this.pickupStoreInfo, dockById200Response.pickupStoreInfo) &&
        Objects.equals(this.priority, dockById200Response.priority) &&
        Objects.equals(this.salesChannel, dockById200Response.salesChannel) &&
        Objects.equals(this.salesChannels, dockById200Response.salesChannels) &&
        Objects.equals(this.timeFakeOverhead, dockById200Response.timeFakeOverhead) &&
        Objects.equals(this.wmsEndPoint, dockById200Response.wmsEndPoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dockTimeFake, freightTableIds, id, name, pickupStoreInfo, priority, salesChannel, salesChannels, timeFakeOverhead, wmsEndPoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DockById200Response {\n");
    sb.append("    dockTimeFake: ").append(toIndentedString(dockTimeFake)).append("\n");
    sb.append("    freightTableIds: ").append(toIndentedString(freightTableIds)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pickupStoreInfo: ").append(toIndentedString(pickupStoreInfo)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    salesChannel: ").append(toIndentedString(salesChannel)).append("\n");
    sb.append("    salesChannels: ").append(toIndentedString(salesChannels)).append("\n");
    sb.append("    timeFakeOverhead: ").append(toIndentedString(timeFakeOverhead)).append("\n");
    sb.append("    wmsEndPoint: ").append(toIndentedString(wmsEndPoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dockTimeFake");
    openapiFields.add("freightTableIds");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("pickupStoreInfo");
    openapiFields.add("priority");
    openapiFields.add("salesChannel");
    openapiFields.add("salesChannels");
    openapiFields.add("timeFakeOverhead");
    openapiFields.add("wmsEndPoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dockTimeFake");
    openapiRequiredFields.add("freightTableIds");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pickupStoreInfo");
    openapiRequiredFields.add("priority");
    openapiRequiredFields.add("salesChannel");
    openapiRequiredFields.add("salesChannels");
    openapiRequiredFields.add("timeFakeOverhead");
    openapiRequiredFields.add("wmsEndPoint");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DockById200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DockById200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DockById200Response is not found in the empty JSON string", DockById200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DockById200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DockById200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DockById200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dockTimeFake").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockTimeFake` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockTimeFake").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("freightTableIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("freightTableIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `freightTableIds` to be an array in the JSON string but got `%s`", jsonObj.get("freightTableIds").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `pickupStoreInfo`
      PickupStoreInfo11.validateJsonElement(jsonObj.get("pickupStoreInfo"));
      if ((jsonObj.get("salesChannel") != null && !jsonObj.get("salesChannel").isJsonNull()) && !jsonObj.get("salesChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesChannel").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("salesChannels") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("salesChannels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesChannels` to be an array in the JSON string but got `%s`", jsonObj.get("salesChannels").toString()));
      }
      if (!jsonObj.get("timeFakeOverhead").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeFakeOverhead` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeFakeOverhead").toString()));
      }
      if (!jsonObj.get("wmsEndPoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wmsEndPoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wmsEndPoint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DockById200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DockById200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DockById200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DockById200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<DockById200Response>() {
           @Override
           public void write(JsonWriter out, DockById200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DockById200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DockById200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DockById200Response
   * @throws IOException if the JSON string is invalid with respect to DockById200Response
   */
  public static DockById200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DockById200Response.class);
  }

  /**
   * Convert an instance of DockById200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

