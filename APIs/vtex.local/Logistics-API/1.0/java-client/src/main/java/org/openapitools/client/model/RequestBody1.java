/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MaxDimension1;
import org.openapitools.client.model.RequestBody1DeliveryScheduleSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RequestBody1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestBody1 {
  public static final String SERIALIZED_NAME_DELIVERY_ON_WEEKENDS = "deliveryOnWeekends";
  @SerializedName(SERIALIZED_NAME_DELIVERY_ON_WEEKENDS)
  private Boolean deliveryOnWeekends;

  public static final String SERIALIZED_NAME_DELIVERY_SCHEDULE_SETTINGS = "deliveryScheduleSettings";
  @SerializedName(SERIALIZED_NAME_DELIVERY_SCHEDULE_SETTINGS)
  private RequestBody1DeliveryScheduleSettings deliveryScheduleSettings;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_MAX_DIMENSION = "maxDimension";
  @SerializedName(SERIALIZED_NAME_MAX_DIMENSION)
  private MaxDimension1 maxDimension;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD = "shippingMethod";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD)
  private String shippingMethod;

  public RequestBody1() {
  }

  public RequestBody1 deliveryOnWeekends(Boolean deliveryOnWeekends) {
    this.deliveryOnWeekends = deliveryOnWeekends;
    return this;
  }

  /**
   * If the shipping policy (carrier) delivers on weekends
   * @return deliveryOnWeekends
   */
  @javax.annotation.Nonnull
  public Boolean getDeliveryOnWeekends() {
    return deliveryOnWeekends;
  }

  public void setDeliveryOnWeekends(Boolean deliveryOnWeekends) {
    this.deliveryOnWeekends = deliveryOnWeekends;
  }


  public RequestBody1 deliveryScheduleSettings(RequestBody1DeliveryScheduleSettings deliveryScheduleSettings) {
    this.deliveryScheduleSettings = deliveryScheduleSettings;
    return this;
  }

  /**
   * Get deliveryScheduleSettings
   * @return deliveryScheduleSettings
   */
  @javax.annotation.Nullable
  public RequestBody1DeliveryScheduleSettings getDeliveryScheduleSettings() {
    return deliveryScheduleSettings;
  }

  public void setDeliveryScheduleSettings(RequestBody1DeliveryScheduleSettings deliveryScheduleSettings) {
    this.deliveryScheduleSettings = deliveryScheduleSettings;
  }


  public RequestBody1 isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * If the shipping policy is active or not.
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public RequestBody1 maxDimension(MaxDimension1 maxDimension) {
    this.maxDimension = maxDimension;
    return this;
  }

  /**
   * Get maxDimension
   * @return maxDimension
   */
  @javax.annotation.Nonnull
  public MaxDimension1 getMaxDimension() {
    return maxDimension;
  }

  public void setMaxDimension(MaxDimension1 maxDimension) {
    this.maxDimension = maxDimension;
  }


  public RequestBody1 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the shipping policy
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RequestBody1 shippingMethod(String shippingMethod) {
    this.shippingMethod = shippingMethod;
    return this;
  }

  /**
   * Type of shipping available for this shipping policy (carrier). Options shown on freight simulation.
   * @return shippingMethod
   */
  @javax.annotation.Nonnull
  public String getShippingMethod() {
    return shippingMethod;
  }

  public void setShippingMethod(String shippingMethod) {
    this.shippingMethod = shippingMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestBody1 requestBody1 = (RequestBody1) o;
    return Objects.equals(this.deliveryOnWeekends, requestBody1.deliveryOnWeekends) &&
        Objects.equals(this.deliveryScheduleSettings, requestBody1.deliveryScheduleSettings) &&
        Objects.equals(this.isActive, requestBody1.isActive) &&
        Objects.equals(this.maxDimension, requestBody1.maxDimension) &&
        Objects.equals(this.name, requestBody1.name) &&
        Objects.equals(this.shippingMethod, requestBody1.shippingMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryOnWeekends, deliveryScheduleSettings, isActive, maxDimension, name, shippingMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestBody1 {\n");
    sb.append("    deliveryOnWeekends: ").append(toIndentedString(deliveryOnWeekends)).append("\n");
    sb.append("    deliveryScheduleSettings: ").append(toIndentedString(deliveryScheduleSettings)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    maxDimension: ").append(toIndentedString(maxDimension)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    shippingMethod: ").append(toIndentedString(shippingMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deliveryOnWeekends");
    openapiFields.add("deliveryScheduleSettings");
    openapiFields.add("isActive");
    openapiFields.add("maxDimension");
    openapiFields.add("name");
    openapiFields.add("shippingMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deliveryOnWeekends");
    openapiRequiredFields.add("isActive");
    openapiRequiredFields.add("maxDimension");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("shippingMethod");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestBody1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestBody1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestBody1 is not found in the empty JSON string", RequestBody1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestBody1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestBody1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RequestBody1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deliveryScheduleSettings`
      if (jsonObj.get("deliveryScheduleSettings") != null && !jsonObj.get("deliveryScheduleSettings").isJsonNull()) {
        RequestBody1DeliveryScheduleSettings.validateJsonElement(jsonObj.get("deliveryScheduleSettings"));
      }
      // validate the required field `maxDimension`
      MaxDimension1.validateJsonElement(jsonObj.get("maxDimension"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("shippingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingMethod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestBody1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestBody1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestBody1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestBody1.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestBody1>() {
           @Override
           public void write(JsonWriter out, RequestBody1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestBody1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestBody1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestBody1
   * @throws IOException if the JSON string is invalid with respect to RequestBody1
   */
  public static RequestBody1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestBody1.class);
  }

  /**
   * Convert an instance of RequestBody1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

