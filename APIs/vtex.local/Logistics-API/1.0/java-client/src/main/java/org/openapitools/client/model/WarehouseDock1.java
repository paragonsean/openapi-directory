/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WarehouseDock1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WarehouseDock1 {
  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private String cost;

  public static final String SERIALIZED_NAME_COST_TO_DISPLAY = "costToDisplay";
  @SerializedName(SERIALIZED_NAME_COST_TO_DISPLAY)
  private String costToDisplay;

  public static final String SERIALIZED_NAME_DOCK_ID = "dockId";
  @SerializedName(SERIALIZED_NAME_DOCK_ID)
  private String dockId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  public static final String SERIALIZED_NAME_TRANSLATE_DAYS = "translateDays";
  @SerializedName(SERIALIZED_NAME_TRANSLATE_DAYS)
  private String translateDays;

  public WarehouseDock1() {
  }

  public WarehouseDock1 cost(String cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Get cost
   * @return cost
   */
  @javax.annotation.Nonnull
  public String getCost() {
    return cost;
  }

  public void setCost(String cost) {
    this.cost = cost;
  }


  public WarehouseDock1 costToDisplay(String costToDisplay) {
    this.costToDisplay = costToDisplay;
    return this;
  }

  /**
   * Get costToDisplay
   * @return costToDisplay
   */
  @javax.annotation.Nonnull
  public String getCostToDisplay() {
    return costToDisplay;
  }

  public void setCostToDisplay(String costToDisplay) {
    this.costToDisplay = costToDisplay;
  }


  public WarehouseDock1 dockId(String dockId) {
    this.dockId = dockId;
    return this;
  }

  /**
   * Get dockId
   * @return dockId
   */
  @javax.annotation.Nonnull
  public String getDockId() {
    return dockId;
  }

  public void setDockId(String dockId) {
    this.dockId = dockId;
  }


  public WarehouseDock1 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WarehouseDock1 time(String time) {
    this.time = time;
    return this;
  }

  /**
   * Get time
   * @return time
   */
  @javax.annotation.Nonnull
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }


  public WarehouseDock1 translateDays(String translateDays) {
    this.translateDays = translateDays;
    return this;
  }

  /**
   * Get translateDays
   * @return translateDays
   */
  @javax.annotation.Nonnull
  public String getTranslateDays() {
    return translateDays;
  }

  public void setTranslateDays(String translateDays) {
    this.translateDays = translateDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WarehouseDock1 warehouseDock1 = (WarehouseDock1) o;
    return Objects.equals(this.cost, warehouseDock1.cost) &&
        Objects.equals(this.costToDisplay, warehouseDock1.costToDisplay) &&
        Objects.equals(this.dockId, warehouseDock1.dockId) &&
        Objects.equals(this.name, warehouseDock1.name) &&
        Objects.equals(this.time, warehouseDock1.time) &&
        Objects.equals(this.translateDays, warehouseDock1.translateDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cost, costToDisplay, dockId, name, time, translateDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WarehouseDock1 {\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    costToDisplay: ").append(toIndentedString(costToDisplay)).append("\n");
    sb.append("    dockId: ").append(toIndentedString(dockId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    translateDays: ").append(toIndentedString(translateDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cost");
    openapiFields.add("costToDisplay");
    openapiFields.add("dockId");
    openapiFields.add("name");
    openapiFields.add("time");
    openapiFields.add("translateDays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cost");
    openapiRequiredFields.add("costToDisplay");
    openapiRequiredFields.add("dockId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("time");
    openapiRequiredFields.add("translateDays");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WarehouseDock1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WarehouseDock1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WarehouseDock1 is not found in the empty JSON string", WarehouseDock1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WarehouseDock1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WarehouseDock1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WarehouseDock1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("cost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cost").toString()));
      }
      if (!jsonObj.get("costToDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costToDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costToDisplay").toString()));
      }
      if (!jsonObj.get("dockId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
      if (!jsonObj.get("translateDays").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `translateDays` to be a primitive type in the JSON string but got `%s`", jsonObj.get("translateDays").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WarehouseDock1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WarehouseDock1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WarehouseDock1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WarehouseDock1.class));

       return (TypeAdapter<T>) new TypeAdapter<WarehouseDock1>() {
           @Override
           public void write(JsonWriter out, WarehouseDock1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WarehouseDock1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WarehouseDock1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WarehouseDock1
   * @throws IOException if the JSON string is invalid with respect to WarehouseDock1
   */
  public static WarehouseDock1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WarehouseDock1.class);
  }

  /**
   * Convert an instance of WarehouseDock1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

