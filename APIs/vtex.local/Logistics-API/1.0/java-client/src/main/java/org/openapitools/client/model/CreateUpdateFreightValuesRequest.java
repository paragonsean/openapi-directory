/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateUpdateFreightValuesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateUpdateFreightValuesRequest {
  public static final String SERIALIZED_NAME_ABSOLUTE_MONEY_COST = "absoluteMoneyCost";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_MONEY_COST)
  private String absoluteMoneyCost;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_MAX_VOLUME = "maxVolume";
  @SerializedName(SERIALIZED_NAME_MAX_VOLUME)
  private Integer maxVolume;

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private Integer operationType;

  public static final String SERIALIZED_NAME_POLYGON = "polygon";
  @SerializedName(SERIALIZED_NAME_POLYGON)
  private String polygon;

  public static final String SERIALIZED_NAME_PRICE_PERCENT = "pricePercent";
  @SerializedName(SERIALIZED_NAME_PRICE_PERCENT)
  private Integer pricePercent;

  public static final String SERIALIZED_NAME_PRICE_PERCENT_BY_WEIGHT = "pricePercentByWeight";
  @SerializedName(SERIALIZED_NAME_PRICE_PERCENT_BY_WEIGHT)
  private Integer pricePercentByWeight;

  public static final String SERIALIZED_NAME_TIME_COST = "timeCost";
  @SerializedName(SERIALIZED_NAME_TIME_COST)
  private String timeCost;

  public static final String SERIALIZED_NAME_WEIGHT_END = "weightEnd";
  @SerializedName(SERIALIZED_NAME_WEIGHT_END)
  private Integer weightEnd;

  public static final String SERIALIZED_NAME_WEIGHT_START = "weightStart";
  @SerializedName(SERIALIZED_NAME_WEIGHT_START)
  private Integer weightStart;

  public static final String SERIALIZED_NAME_ZIP_CODE_END = "zipCodeEnd";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE_END)
  private String zipCodeEnd;

  public static final String SERIALIZED_NAME_ZIP_CODE_START = "zipCodeStart";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE_START)
  private String zipCodeStart;

  public CreateUpdateFreightValuesRequest() {
  }

  public CreateUpdateFreightValuesRequest absoluteMoneyCost(String absoluteMoneyCost) {
    this.absoluteMoneyCost = absoluteMoneyCost;
    return this;
  }

  /**
   * Fixed shipping cost to be charged in a decimal number.
   * @return absoluteMoneyCost
   */
  @javax.annotation.Nonnull
  public String getAbsoluteMoneyCost() {
    return absoluteMoneyCost;
  }

  public void setAbsoluteMoneyCost(String absoluteMoneyCost) {
    this.absoluteMoneyCost = absoluteMoneyCost;
  }


  public CreateUpdateFreightValuesRequest country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Three letter ISO code for the country where the delivery will take place.
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public CreateUpdateFreightValuesRequest maxVolume(Integer maxVolume) {
    this.maxVolume = maxVolume;
    return this;
  }

  /**
   * Maximum volume that can be transported by the carrier in cmÂ³.
   * @return maxVolume
   */
  @javax.annotation.Nonnull
  public Integer getMaxVolume() {
    return maxVolume;
  }

  public void setMaxVolume(Integer maxVolume) {
    this.maxVolume = maxVolume;
  }


  public CreateUpdateFreightValuesRequest operationType(Integer operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * Indicates desired action for the object. Possible values are &#x60;1&#x60; (Insert), &#x60;2&#x60; (Update) or &#x60;3&#x60;(Delete).
   * @return operationType
   */
  @javax.annotation.Nonnull
  public Integer getOperationType() {
    return operationType;
  }

  public void setOperationType(Integer operationType) {
    this.operationType = operationType;
  }


  public CreateUpdateFreightValuesRequest polygon(String polygon) {
    this.polygon = polygon;
    return this;
  }

  /**
   * Polygon ID, according to the [geolocation](https://help.vtex.com/en/tutorial/registering-geolocation/) feature.
   * @return polygon
   */
  @javax.annotation.Nonnull
  public String getPolygon() {
    return polygon;
  }

  public void setPolygon(String polygon) {
    this.polygon = polygon;
  }


  public CreateUpdateFreightValuesRequest pricePercent(Integer pricePercent) {
    this.pricePercent = pricePercent;
    return this;
  }

  /**
   * [Price-based additional shipping charge](https://help.vtex.com/en/tutorial/additional-shipping-costs--2vqGwMn0LabkOHY6zSHYNV), calculated based on the total price of the order, in decimal number. You must fill in this field with a percentage value. For example, for an additional charge of 10%, fill in the table with 10.
   * @return pricePercent
   */
  @javax.annotation.Nonnull
  public Integer getPricePercent() {
    return pricePercent;
  }

  public void setPricePercent(Integer pricePercent) {
    this.pricePercent = pricePercent;
  }


  public CreateUpdateFreightValuesRequest pricePercentByWeight(Integer pricePercentByWeight) {
    this.pricePercentByWeight = pricePercentByWeight;
    return this;
  }

  /**
   * [Weight-based additional shipping charge](https://help.vtex.com/en/tutorial/additional-shipping-costs--2vqGwMn0LabkOHY6zSHYNV), calculated based on the total weight of the order.
   * @return pricePercentByWeight
   */
  @javax.annotation.Nonnull
  public Integer getPricePercentByWeight() {
    return pricePercentByWeight;
  }

  public void setPricePercentByWeight(Integer pricePercentByWeight) {
    this.pricePercentByWeight = pricePercentByWeight;
  }


  public CreateUpdateFreightValuesRequest timeCost(String timeCost) {
    this.timeCost = timeCost;
    return this;
  }

  /**
   * Delivery time frame informed by the carrier, in the format DD.HH:MM:SS.
   * @return timeCost
   */
  @javax.annotation.Nonnull
  public String getTimeCost() {
    return timeCost;
  }

  public void setTimeCost(String timeCost) {
    this.timeCost = timeCost;
  }


  public CreateUpdateFreightValuesRequest weightEnd(Integer weightEnd) {
    this.weightEnd = weightEnd;
    return this;
  }

  /**
   * Maximum weight allowed.
   * @return weightEnd
   */
  @javax.annotation.Nonnull
  public Integer getWeightEnd() {
    return weightEnd;
  }

  public void setWeightEnd(Integer weightEnd) {
    this.weightEnd = weightEnd;
  }


  public CreateUpdateFreightValuesRequest weightStart(Integer weightStart) {
    this.weightStart = weightStart;
    return this;
  }

  /**
   * Minimum weight allowed
   * @return weightStart
   */
  @javax.annotation.Nonnull
  public Integer getWeightStart() {
    return weightStart;
  }

  public void setWeightStart(Integer weightStart) {
    this.weightStart = weightStart;
  }


  public CreateUpdateFreightValuesRequest zipCodeEnd(String zipCodeEnd) {
    this.zipCodeEnd = zipCodeEnd;
    return this;
  }

  /**
   * End of postal code interval.
   * @return zipCodeEnd
   */
  @javax.annotation.Nonnull
  public String getZipCodeEnd() {
    return zipCodeEnd;
  }

  public void setZipCodeEnd(String zipCodeEnd) {
    this.zipCodeEnd = zipCodeEnd;
  }


  public CreateUpdateFreightValuesRequest zipCodeStart(String zipCodeStart) {
    this.zipCodeStart = zipCodeStart;
    return this;
  }

  /**
   * Start of postal code interval.
   * @return zipCodeStart
   */
  @javax.annotation.Nonnull
  public String getZipCodeStart() {
    return zipCodeStart;
  }

  public void setZipCodeStart(String zipCodeStart) {
    this.zipCodeStart = zipCodeStart;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUpdateFreightValuesRequest createUpdateFreightValuesRequest = (CreateUpdateFreightValuesRequest) o;
    return Objects.equals(this.absoluteMoneyCost, createUpdateFreightValuesRequest.absoluteMoneyCost) &&
        Objects.equals(this.country, createUpdateFreightValuesRequest.country) &&
        Objects.equals(this.maxVolume, createUpdateFreightValuesRequest.maxVolume) &&
        Objects.equals(this.operationType, createUpdateFreightValuesRequest.operationType) &&
        Objects.equals(this.polygon, createUpdateFreightValuesRequest.polygon) &&
        Objects.equals(this.pricePercent, createUpdateFreightValuesRequest.pricePercent) &&
        Objects.equals(this.pricePercentByWeight, createUpdateFreightValuesRequest.pricePercentByWeight) &&
        Objects.equals(this.timeCost, createUpdateFreightValuesRequest.timeCost) &&
        Objects.equals(this.weightEnd, createUpdateFreightValuesRequest.weightEnd) &&
        Objects.equals(this.weightStart, createUpdateFreightValuesRequest.weightStart) &&
        Objects.equals(this.zipCodeEnd, createUpdateFreightValuesRequest.zipCodeEnd) &&
        Objects.equals(this.zipCodeStart, createUpdateFreightValuesRequest.zipCodeStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteMoneyCost, country, maxVolume, operationType, polygon, pricePercent, pricePercentByWeight, timeCost, weightEnd, weightStart, zipCodeEnd, zipCodeStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUpdateFreightValuesRequest {\n");
    sb.append("    absoluteMoneyCost: ").append(toIndentedString(absoluteMoneyCost)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    maxVolume: ").append(toIndentedString(maxVolume)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    polygon: ").append(toIndentedString(polygon)).append("\n");
    sb.append("    pricePercent: ").append(toIndentedString(pricePercent)).append("\n");
    sb.append("    pricePercentByWeight: ").append(toIndentedString(pricePercentByWeight)).append("\n");
    sb.append("    timeCost: ").append(toIndentedString(timeCost)).append("\n");
    sb.append("    weightEnd: ").append(toIndentedString(weightEnd)).append("\n");
    sb.append("    weightStart: ").append(toIndentedString(weightStart)).append("\n");
    sb.append("    zipCodeEnd: ").append(toIndentedString(zipCodeEnd)).append("\n");
    sb.append("    zipCodeStart: ").append(toIndentedString(zipCodeStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absoluteMoneyCost");
    openapiFields.add("country");
    openapiFields.add("maxVolume");
    openapiFields.add("operationType");
    openapiFields.add("polygon");
    openapiFields.add("pricePercent");
    openapiFields.add("pricePercentByWeight");
    openapiFields.add("timeCost");
    openapiFields.add("weightEnd");
    openapiFields.add("weightStart");
    openapiFields.add("zipCodeEnd");
    openapiFields.add("zipCodeStart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("absoluteMoneyCost");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("maxVolume");
    openapiRequiredFields.add("operationType");
    openapiRequiredFields.add("polygon");
    openapiRequiredFields.add("pricePercent");
    openapiRequiredFields.add("pricePercentByWeight");
    openapiRequiredFields.add("timeCost");
    openapiRequiredFields.add("weightEnd");
    openapiRequiredFields.add("weightStart");
    openapiRequiredFields.add("zipCodeEnd");
    openapiRequiredFields.add("zipCodeStart");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateUpdateFreightValuesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateUpdateFreightValuesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateUpdateFreightValuesRequest is not found in the empty JSON string", CreateUpdateFreightValuesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateUpdateFreightValuesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateUpdateFreightValuesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateUpdateFreightValuesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("absoluteMoneyCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `absoluteMoneyCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("absoluteMoneyCost").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("polygon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `polygon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("polygon").toString()));
      }
      if (!jsonObj.get("timeCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeCost").toString()));
      }
      if (!jsonObj.get("zipCodeEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCodeEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCodeEnd").toString()));
      }
      if (!jsonObj.get("zipCodeStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCodeStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCodeStart").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateUpdateFreightValuesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateUpdateFreightValuesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateUpdateFreightValuesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateUpdateFreightValuesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateUpdateFreightValuesRequest>() {
           @Override
           public void write(JsonWriter out, CreateUpdateFreightValuesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateUpdateFreightValuesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateUpdateFreightValuesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateUpdateFreightValuesRequest
   * @throws IOException if the JSON string is invalid with respect to CreateUpdateFreightValuesRequest
   */
  public static CreateUpdateFreightValuesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateUpdateFreightValuesRequest.class);
  }

  /**
   * Convert an instance of CreateUpdateFreightValuesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

