/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReservationById200ResponseSlaRequestInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReservationById200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationById200Response {
  public static final String SERIALIZED_NAME_AUTHORIZED_DATE_UTC = "AuthorizedDateUtc";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_DATE_UTC)
  private String authorizedDateUtc;

  public static final String SERIALIZED_NAME_CANCELED_DATE_UTC = "CanceledDateUtc";
  @SerializedName(SERIALIZED_NAME_CANCELED_DATE_UTC)
  private String canceledDateUtc;

  public static final String SERIALIZED_NAME_CONFIRMED_DATE_UTC = "ConfirmedDateUtc";
  @SerializedName(SERIALIZED_NAME_CONFIRMED_DATE_UTC)
  private String confirmedDateUtc;

  public static final String SERIALIZED_NAME_ERRORS = "Errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<String> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_SUCESS = "IsSucess";
  @SerializedName(SERIALIZED_NAME_IS_SUCESS)
  private Boolean isSucess;

  public static final String SERIALIZED_NAME_LAST_UPDATE_DATE_UTC = "LastUpdateDateUtc";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_DATE_UTC)
  private String lastUpdateDateUtc;

  public static final String SERIALIZED_NAME_LOCK_ID = "LockId";
  @SerializedName(SERIALIZED_NAME_LOCK_ID)
  private String lockId;

  public static final String SERIALIZED_NAME_MAXIMUM_CONFIRMATION_DATE_UTC = "MaximumConfirmationDateUtc";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_CONFIRMATION_DATE_UTC)
  private String maximumConfirmationDateUtc;

  public static final String SERIALIZED_NAME_PICKUP_POINT_ITEM_OPTIONS = "PickupPointItemOptions";
  @SerializedName(SERIALIZED_NAME_PICKUP_POINT_ITEM_OPTIONS)
  private String pickupPointItemOptions;

  public static final String SERIALIZED_NAME_RESERVATION_DATE_UTC = "ReservationDateUtc";
  @SerializedName(SERIALIZED_NAME_RESERVATION_DATE_UTC)
  private String reservationDateUtc;

  public static final String SERIALIZED_NAME_SALES_CHANNEL = "SalesChannel";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNEL)
  private String salesChannel;

  public static final String SERIALIZED_NAME_SLA_REQUEST = "SlaRequest";
  @SerializedName(SERIALIZED_NAME_SLA_REQUEST)
  private List<ReservationById200ResponseSlaRequestInner> slaRequest = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public ReservationById200Response() {
  }

  public ReservationById200Response authorizedDateUtc(String authorizedDateUtc) {
    this.authorizedDateUtc = authorizedDateUtc;
    return this;
  }

  /**
   * Authorized date in UTC.
   * @return authorizedDateUtc
   */
  @javax.annotation.Nullable
  public String getAuthorizedDateUtc() {
    return authorizedDateUtc;
  }

  public void setAuthorizedDateUtc(String authorizedDateUtc) {
    this.authorizedDateUtc = authorizedDateUtc;
  }


  public ReservationById200Response canceledDateUtc(String canceledDateUtc) {
    this.canceledDateUtc = canceledDateUtc;
    return this;
  }

  /**
   * Canceled date in UTC.
   * @return canceledDateUtc
   */
  @javax.annotation.Nullable
  public String getCanceledDateUtc() {
    return canceledDateUtc;
  }

  public void setCanceledDateUtc(String canceledDateUtc) {
    this.canceledDateUtc = canceledDateUtc;
  }


  public ReservationById200Response confirmedDateUtc(String confirmedDateUtc) {
    this.confirmedDateUtc = confirmedDateUtc;
    return this;
  }

  /**
   * Confirmed date in UTC.
   * @return confirmedDateUtc
   */
  @javax.annotation.Nullable
  public String getConfirmedDateUtc() {
    return confirmedDateUtc;
  }

  public void setConfirmedDateUtc(String confirmedDateUtc) {
    this.confirmedDateUtc = confirmedDateUtc;
  }


  public ReservationById200Response errors(List<String> errors) {
    this.errors = errors;
    return this;
  }

  public ReservationById200Response addErrorsItem(String errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Information on errors, if there are any.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<String> getErrors() {
    return errors;
  }

  public void setErrors(List<String> errors) {
    this.errors = errors;
  }


  public ReservationById200Response isSucess(Boolean isSucess) {
    this.isSucess = isSucess;
    return this;
  }

  /**
   * Get isSucess
   * @return isSucess
   */
  @javax.annotation.Nullable
  public Boolean getIsSucess() {
    return isSucess;
  }

  public void setIsSucess(Boolean isSucess) {
    this.isSucess = isSucess;
  }


  public ReservationById200Response lastUpdateDateUtc(String lastUpdateDateUtc) {
    this.lastUpdateDateUtc = lastUpdateDateUtc;
    return this;
  }

  /**
   * Date of the last update in UTC.
   * @return lastUpdateDateUtc
   */
  @javax.annotation.Nullable
  public String getLastUpdateDateUtc() {
    return lastUpdateDateUtc;
  }

  public void setLastUpdateDateUtc(String lastUpdateDateUtc) {
    this.lastUpdateDateUtc = lastUpdateDateUtc;
  }


  public ReservationById200Response lockId(String lockId) {
    this.lockId = lockId;
    return this;
  }

  /**
   * Lock ID.
   * @return lockId
   */
  @javax.annotation.Nullable
  public String getLockId() {
    return lockId;
  }

  public void setLockId(String lockId) {
    this.lockId = lockId;
  }


  public ReservationById200Response maximumConfirmationDateUtc(String maximumConfirmationDateUtc) {
    this.maximumConfirmationDateUtc = maximumConfirmationDateUtc;
    return this;
  }

  /**
   * Maximum confirmation date in UTC.
   * @return maximumConfirmationDateUtc
   */
  @javax.annotation.Nullable
  public String getMaximumConfirmationDateUtc() {
    return maximumConfirmationDateUtc;
  }

  public void setMaximumConfirmationDateUtc(String maximumConfirmationDateUtc) {
    this.maximumConfirmationDateUtc = maximumConfirmationDateUtc;
  }


  public ReservationById200Response pickupPointItemOptions(String pickupPointItemOptions) {
    this.pickupPointItemOptions = pickupPointItemOptions;
    return this;
  }

  /**
   * Pickup point item options.
   * @return pickupPointItemOptions
   */
  @javax.annotation.Nullable
  public String getPickupPointItemOptions() {
    return pickupPointItemOptions;
  }

  public void setPickupPointItemOptions(String pickupPointItemOptions) {
    this.pickupPointItemOptions = pickupPointItemOptions;
  }


  public ReservationById200Response reservationDateUtc(String reservationDateUtc) {
    this.reservationDateUtc = reservationDateUtc;
    return this;
  }

  /**
   * Reservation date in UTC.
   * @return reservationDateUtc
   */
  @javax.annotation.Nullable
  public String getReservationDateUtc() {
    return reservationDateUtc;
  }

  public void setReservationDateUtc(String reservationDateUtc) {
    this.reservationDateUtc = reservationDateUtc;
  }


  public ReservationById200Response salesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
    return this;
  }

  /**
   * Sales channel.
   * @return salesChannel
   */
  @javax.annotation.Nullable
  public String getSalesChannel() {
    return salesChannel;
  }

  public void setSalesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
  }


  public ReservationById200Response slaRequest(List<ReservationById200ResponseSlaRequestInner> slaRequest) {
    this.slaRequest = slaRequest;
    return this;
  }

  public ReservationById200Response addSlaRequestItem(ReservationById200ResponseSlaRequestInner slaRequestItem) {
    if (this.slaRequest == null) {
      this.slaRequest = new ArrayList<>();
    }
    this.slaRequest.add(slaRequestItem);
    return this;
  }

  /**
   * Information on SLA request.
   * @return slaRequest
   */
  @javax.annotation.Nullable
  public List<ReservationById200ResponseSlaRequestInner> getSlaRequest() {
    return slaRequest;
  }

  public void setSlaRequest(List<ReservationById200ResponseSlaRequestInner> slaRequest) {
    this.slaRequest = slaRequest;
  }


  public ReservationById200Response status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Reservation status, being:  &#x60;0&#x60;: &#x60;NotCommitted&#x60;  &#x60;1&#x60;: &#x60;Authorized&#x60;  &#x60;2&#x60;: &#x60;Confirmed&#x60;  &#x60;3&#x60;: &#x60;Canceled_AbortedCommitted&#x60;  &#x60;4&#x60;: &#x60;Canceled_AuthorizationExpired&#x60;  &#x60;5&#x60;: &#x60;Canceled_Manually&#x60;
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationById200Response reservationById200Response = (ReservationById200Response) o;
    return Objects.equals(this.authorizedDateUtc, reservationById200Response.authorizedDateUtc) &&
        Objects.equals(this.canceledDateUtc, reservationById200Response.canceledDateUtc) &&
        Objects.equals(this.confirmedDateUtc, reservationById200Response.confirmedDateUtc) &&
        Objects.equals(this.errors, reservationById200Response.errors) &&
        Objects.equals(this.isSucess, reservationById200Response.isSucess) &&
        Objects.equals(this.lastUpdateDateUtc, reservationById200Response.lastUpdateDateUtc) &&
        Objects.equals(this.lockId, reservationById200Response.lockId) &&
        Objects.equals(this.maximumConfirmationDateUtc, reservationById200Response.maximumConfirmationDateUtc) &&
        Objects.equals(this.pickupPointItemOptions, reservationById200Response.pickupPointItemOptions) &&
        Objects.equals(this.reservationDateUtc, reservationById200Response.reservationDateUtc) &&
        Objects.equals(this.salesChannel, reservationById200Response.salesChannel) &&
        Objects.equals(this.slaRequest, reservationById200Response.slaRequest) &&
        Objects.equals(this.status, reservationById200Response.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizedDateUtc, canceledDateUtc, confirmedDateUtc, errors, isSucess, lastUpdateDateUtc, lockId, maximumConfirmationDateUtc, pickupPointItemOptions, reservationDateUtc, salesChannel, slaRequest, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationById200Response {\n");
    sb.append("    authorizedDateUtc: ").append(toIndentedString(authorizedDateUtc)).append("\n");
    sb.append("    canceledDateUtc: ").append(toIndentedString(canceledDateUtc)).append("\n");
    sb.append("    confirmedDateUtc: ").append(toIndentedString(confirmedDateUtc)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    isSucess: ").append(toIndentedString(isSucess)).append("\n");
    sb.append("    lastUpdateDateUtc: ").append(toIndentedString(lastUpdateDateUtc)).append("\n");
    sb.append("    lockId: ").append(toIndentedString(lockId)).append("\n");
    sb.append("    maximumConfirmationDateUtc: ").append(toIndentedString(maximumConfirmationDateUtc)).append("\n");
    sb.append("    pickupPointItemOptions: ").append(toIndentedString(pickupPointItemOptions)).append("\n");
    sb.append("    reservationDateUtc: ").append(toIndentedString(reservationDateUtc)).append("\n");
    sb.append("    salesChannel: ").append(toIndentedString(salesChannel)).append("\n");
    sb.append("    slaRequest: ").append(toIndentedString(slaRequest)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AuthorizedDateUtc");
    openapiFields.add("CanceledDateUtc");
    openapiFields.add("ConfirmedDateUtc");
    openapiFields.add("Errors");
    openapiFields.add("IsSucess");
    openapiFields.add("LastUpdateDateUtc");
    openapiFields.add("LockId");
    openapiFields.add("MaximumConfirmationDateUtc");
    openapiFields.add("PickupPointItemOptions");
    openapiFields.add("ReservationDateUtc");
    openapiFields.add("SalesChannel");
    openapiFields.add("SlaRequest");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationById200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationById200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationById200Response is not found in the empty JSON string", ReservationById200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationById200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationById200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AuthorizedDateUtc") != null && !jsonObj.get("AuthorizedDateUtc").isJsonNull()) && !jsonObj.get("AuthorizedDateUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AuthorizedDateUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AuthorizedDateUtc").toString()));
      }
      if ((jsonObj.get("CanceledDateUtc") != null && !jsonObj.get("CanceledDateUtc").isJsonNull()) && !jsonObj.get("CanceledDateUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CanceledDateUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CanceledDateUtc").toString()));
      }
      if ((jsonObj.get("ConfirmedDateUtc") != null && !jsonObj.get("ConfirmedDateUtc").isJsonNull()) && !jsonObj.get("ConfirmedDateUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConfirmedDateUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConfirmedDateUtc").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Errors") != null && !jsonObj.get("Errors").isJsonNull() && !jsonObj.get("Errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Errors` to be an array in the JSON string but got `%s`", jsonObj.get("Errors").toString()));
      }
      if ((jsonObj.get("LastUpdateDateUtc") != null && !jsonObj.get("LastUpdateDateUtc").isJsonNull()) && !jsonObj.get("LastUpdateDateUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastUpdateDateUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastUpdateDateUtc").toString()));
      }
      if ((jsonObj.get("LockId") != null && !jsonObj.get("LockId").isJsonNull()) && !jsonObj.get("LockId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LockId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LockId").toString()));
      }
      if ((jsonObj.get("MaximumConfirmationDateUtc") != null && !jsonObj.get("MaximumConfirmationDateUtc").isJsonNull()) && !jsonObj.get("MaximumConfirmationDateUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaximumConfirmationDateUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaximumConfirmationDateUtc").toString()));
      }
      if ((jsonObj.get("PickupPointItemOptions") != null && !jsonObj.get("PickupPointItemOptions").isJsonNull()) && !jsonObj.get("PickupPointItemOptions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PickupPointItemOptions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PickupPointItemOptions").toString()));
      }
      if ((jsonObj.get("ReservationDateUtc") != null && !jsonObj.get("ReservationDateUtc").isJsonNull()) && !jsonObj.get("ReservationDateUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReservationDateUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReservationDateUtc").toString()));
      }
      if ((jsonObj.get("SalesChannel") != null && !jsonObj.get("SalesChannel").isJsonNull()) && !jsonObj.get("SalesChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SalesChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SalesChannel").toString()));
      }
      if (jsonObj.get("SlaRequest") != null && !jsonObj.get("SlaRequest").isJsonNull()) {
        JsonArray jsonArrayslaRequest = jsonObj.getAsJsonArray("SlaRequest");
        if (jsonArrayslaRequest != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SlaRequest").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SlaRequest` to be an array in the JSON string but got `%s`", jsonObj.get("SlaRequest").toString()));
          }

          // validate the optional field `SlaRequest` (array)
          for (int i = 0; i < jsonArrayslaRequest.size(); i++) {
            ReservationById200ResponseSlaRequestInner.validateJsonElement(jsonArrayslaRequest.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationById200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationById200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationById200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationById200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationById200Response>() {
           @Override
           public void write(JsonWriter out, ReservationById200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationById200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationById200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationById200Response
   * @throws IOException if the JSON string is invalid with respect to ReservationById200Response
   */
  public static ReservationById200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationById200Response.class);
  }

  /**
   * Convert an instance of ReservationById200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

