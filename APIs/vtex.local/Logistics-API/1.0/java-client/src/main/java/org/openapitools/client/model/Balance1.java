/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Balance1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Balance1 {
  public static final String SERIALIZED_NAME_HAS_UNLIMITED_QUANTITY = "hasUnlimitedQuantity";
  @SerializedName(SERIALIZED_NAME_HAS_UNLIMITED_QUANTITY)
  private Boolean hasUnlimitedQuantity;

  public static final String SERIALIZED_NAME_RESERVED_QUANTITY = "reservedQuantity";
  @SerializedName(SERIALIZED_NAME_RESERVED_QUANTITY)
  private Integer reservedQuantity;

  public static final String SERIALIZED_NAME_TOTAL_QUANTITY = "totalQuantity";
  @SerializedName(SERIALIZED_NAME_TOTAL_QUANTITY)
  private Integer totalQuantity;

  public static final String SERIALIZED_NAME_WAREHOUSE_ID = "warehouseId";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_ID)
  private String warehouseId;

  public static final String SERIALIZED_NAME_WAREHOUSE_NAME = "warehouseName";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_NAME)
  private String warehouseName;

  public Balance1() {
  }

  public Balance1 hasUnlimitedQuantity(Boolean hasUnlimitedQuantity) {
    this.hasUnlimitedQuantity = hasUnlimitedQuantity;
    return this;
  }

  /**
   * Get hasUnlimitedQuantity
   * @return hasUnlimitedQuantity
   */
  @javax.annotation.Nonnull
  public Boolean getHasUnlimitedQuantity() {
    return hasUnlimitedQuantity;
  }

  public void setHasUnlimitedQuantity(Boolean hasUnlimitedQuantity) {
    this.hasUnlimitedQuantity = hasUnlimitedQuantity;
  }


  public Balance1 reservedQuantity(Integer reservedQuantity) {
    this.reservedQuantity = reservedQuantity;
    return this;
  }

  /**
   * Get reservedQuantity
   * @return reservedQuantity
   */
  @javax.annotation.Nonnull
  public Integer getReservedQuantity() {
    return reservedQuantity;
  }

  public void setReservedQuantity(Integer reservedQuantity) {
    this.reservedQuantity = reservedQuantity;
  }


  public Balance1 totalQuantity(Integer totalQuantity) {
    this.totalQuantity = totalQuantity;
    return this;
  }

  /**
   * Get totalQuantity
   * @return totalQuantity
   */
  @javax.annotation.Nonnull
  public Integer getTotalQuantity() {
    return totalQuantity;
  }

  public void setTotalQuantity(Integer totalQuantity) {
    this.totalQuantity = totalQuantity;
  }


  public Balance1 warehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
    return this;
  }

  /**
   * Get warehouseId
   * @return warehouseId
   */
  @javax.annotation.Nonnull
  public String getWarehouseId() {
    return warehouseId;
  }

  public void setWarehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
  }


  public Balance1 warehouseName(String warehouseName) {
    this.warehouseName = warehouseName;
    return this;
  }

  /**
   * Get warehouseName
   * @return warehouseName
   */
  @javax.annotation.Nonnull
  public String getWarehouseName() {
    return warehouseName;
  }

  public void setWarehouseName(String warehouseName) {
    this.warehouseName = warehouseName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Balance1 balance1 = (Balance1) o;
    return Objects.equals(this.hasUnlimitedQuantity, balance1.hasUnlimitedQuantity) &&
        Objects.equals(this.reservedQuantity, balance1.reservedQuantity) &&
        Objects.equals(this.totalQuantity, balance1.totalQuantity) &&
        Objects.equals(this.warehouseId, balance1.warehouseId) &&
        Objects.equals(this.warehouseName, balance1.warehouseName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasUnlimitedQuantity, reservedQuantity, totalQuantity, warehouseId, warehouseName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Balance1 {\n");
    sb.append("    hasUnlimitedQuantity: ").append(toIndentedString(hasUnlimitedQuantity)).append("\n");
    sb.append("    reservedQuantity: ").append(toIndentedString(reservedQuantity)).append("\n");
    sb.append("    totalQuantity: ").append(toIndentedString(totalQuantity)).append("\n");
    sb.append("    warehouseId: ").append(toIndentedString(warehouseId)).append("\n");
    sb.append("    warehouseName: ").append(toIndentedString(warehouseName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hasUnlimitedQuantity");
    openapiFields.add("reservedQuantity");
    openapiFields.add("totalQuantity");
    openapiFields.add("warehouseId");
    openapiFields.add("warehouseName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hasUnlimitedQuantity");
    openapiRequiredFields.add("reservedQuantity");
    openapiRequiredFields.add("totalQuantity");
    openapiRequiredFields.add("warehouseId");
    openapiRequiredFields.add("warehouseName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Balance1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Balance1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Balance1 is not found in the empty JSON string", Balance1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Balance1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Balance1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Balance1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("warehouseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouseId").toString()));
      }
      if (!jsonObj.get("warehouseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouseName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Balance1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Balance1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Balance1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Balance1.class));

       return (TypeAdapter<T>) new TypeAdapter<Balance1>() {
           @Override
           public void write(JsonWriter out, Balance1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Balance1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Balance1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Balance1
   * @throws IOException if the JSON string is invalid with respect to Balance1
   */
  public static Balance1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Balance1.class);
  }

  /**
   * Convert an instance of Balance1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

