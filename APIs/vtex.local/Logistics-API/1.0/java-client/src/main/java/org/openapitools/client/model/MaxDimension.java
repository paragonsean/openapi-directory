/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object containing attributes of maximum dimension permitted by the shipping policy (carrier).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MaxDimension {
  public static final String SERIALIZED_NAME_LARGEST_MEASURE = "largestMeasure";
  @SerializedName(SERIALIZED_NAME_LARGEST_MEASURE)
  private BigDecimal largestMeasure;

  public static final String SERIALIZED_NAME_MAX_MEASURE_SUM = "maxMeasureSum";
  @SerializedName(SERIALIZED_NAME_MAX_MEASURE_SUM)
  private BigDecimal maxMeasureSum;

  public MaxDimension() {
  }

  public MaxDimension largestMeasure(BigDecimal largestMeasure) {
    this.largestMeasure = largestMeasure;
    return this;
  }

  /**
   * Largest measure of the package.
   * @return largestMeasure
   */
  @javax.annotation.Nonnull
  public BigDecimal getLargestMeasure() {
    return largestMeasure;
  }

  public void setLargestMeasure(BigDecimal largestMeasure) {
    this.largestMeasure = largestMeasure;
  }


  public MaxDimension maxMeasureSum(BigDecimal maxMeasureSum) {
    this.maxMeasureSum = maxMeasureSum;
    return this;
  }

  /**
   * Sum of all maximum measures of the package.
   * @return maxMeasureSum
   */
  @javax.annotation.Nonnull
  public BigDecimal getMaxMeasureSum() {
    return maxMeasureSum;
  }

  public void setMaxMeasureSum(BigDecimal maxMeasureSum) {
    this.maxMeasureSum = maxMeasureSum;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MaxDimension maxDimension = (MaxDimension) o;
    return Objects.equals(this.largestMeasure, maxDimension.largestMeasure) &&
        Objects.equals(this.maxMeasureSum, maxDimension.maxMeasureSum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(largestMeasure, maxMeasureSum);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MaxDimension {\n");
    sb.append("    largestMeasure: ").append(toIndentedString(largestMeasure)).append("\n");
    sb.append("    maxMeasureSum: ").append(toIndentedString(maxMeasureSum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("largestMeasure");
    openapiFields.add("maxMeasureSum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("largestMeasure");
    openapiRequiredFields.add("maxMeasureSum");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MaxDimension
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MaxDimension.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MaxDimension is not found in the empty JSON string", MaxDimension.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MaxDimension.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MaxDimension` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MaxDimension.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MaxDimension.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MaxDimension' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MaxDimension> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MaxDimension.class));

       return (TypeAdapter<T>) new TypeAdapter<MaxDimension>() {
           @Override
           public void write(JsonWriter out, MaxDimension value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MaxDimension read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MaxDimension given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MaxDimension
   * @throws IOException if the JSON string is invalid with respect to MaxDimension
   */
  public static MaxDimension fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MaxDimension.class);
  }

  /**
   * Convert an instance of MaxDimension to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

