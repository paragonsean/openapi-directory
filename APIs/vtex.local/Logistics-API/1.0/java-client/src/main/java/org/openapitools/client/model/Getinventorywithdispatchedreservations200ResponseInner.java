/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Getinventorywithdispatchedreservations200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Getinventorywithdispatchedreservations200ResponseInner {
  public static final String SERIALIZED_NAME_AVAILABLE_QUANTITY = "availableQuantity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_QUANTITY)
  private Integer availableQuantity;

  public static final String SERIALIZED_NAME_DISPATCHED_RESERVATIONS_QUANTITY = "dispatchedReservationsQuantity";
  @SerializedName(SERIALIZED_NAME_DISPATCHED_RESERVATIONS_QUANTITY)
  private Integer dispatchedReservationsQuantity;

  public static final String SERIALIZED_NAME_IS_UNLIMITED_QUANTITY = "isUnlimitedQuantity";
  @SerializedName(SERIALIZED_NAME_IS_UNLIMITED_QUANTITY)
  private Boolean isUnlimitedQuantity;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_SKU_ID = "skuId";
  @SerializedName(SERIALIZED_NAME_SKU_ID)
  private String skuId;

  public static final String SERIALIZED_NAME_TOTAL_RESERVED_QUANTITY = "totalReservedQuantity";
  @SerializedName(SERIALIZED_NAME_TOTAL_RESERVED_QUANTITY)
  private Integer totalReservedQuantity;

  public static final String SERIALIZED_NAME_WAREHOUSE_ID = "warehouseId";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_ID)
  private String warehouseId;

  public Getinventorywithdispatchedreservations200ResponseInner() {
  }

  public Getinventorywithdispatchedreservations200ResponseInner availableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
    return this;
  }

  /**
   * Available quantity.
   * @return availableQuantity
   */
  @javax.annotation.Nullable
  public Integer getAvailableQuantity() {
    return availableQuantity;
  }

  public void setAvailableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
  }


  public Getinventorywithdispatchedreservations200ResponseInner dispatchedReservationsQuantity(Integer dispatchedReservationsQuantity) {
    this.dispatchedReservationsQuantity = dispatchedReservationsQuantity;
    return this;
  }

  /**
   * Dispatched reservations quantity.
   * @return dispatchedReservationsQuantity
   */
  @javax.annotation.Nullable
  public Integer getDispatchedReservationsQuantity() {
    return dispatchedReservationsQuantity;
  }

  public void setDispatchedReservationsQuantity(Integer dispatchedReservationsQuantity) {
    this.dispatchedReservationsQuantity = dispatchedReservationsQuantity;
  }


  public Getinventorywithdispatchedreservations200ResponseInner isUnlimitedQuantity(Boolean isUnlimitedQuantity) {
    this.isUnlimitedQuantity = isUnlimitedQuantity;
    return this;
  }

  /**
   * Indicates whether the SKU&#39;s availability is unlimited (\&quot;infinite inventory\&quot;).
   * @return isUnlimitedQuantity
   */
  @javax.annotation.Nullable
  public Boolean getIsUnlimitedQuantity() {
    return isUnlimitedQuantity;
  }

  public void setIsUnlimitedQuantity(Boolean isUnlimitedQuantity) {
    this.isUnlimitedQuantity = isUnlimitedQuantity;
  }


  public Getinventorywithdispatchedreservations200ResponseInner quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * SKU quantity.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public Getinventorywithdispatchedreservations200ResponseInner skuId(String skuId) {
    this.skuId = skuId;
    return this;
  }

  /**
   * SKU ID.
   * @return skuId
   */
  @javax.annotation.Nullable
  public String getSkuId() {
    return skuId;
  }

  public void setSkuId(String skuId) {
    this.skuId = skuId;
  }


  public Getinventorywithdispatchedreservations200ResponseInner totalReservedQuantity(Integer totalReservedQuantity) {
    this.totalReservedQuantity = totalReservedQuantity;
    return this;
  }

  /**
   * Total reserved quantity of the SKU.
   * @return totalReservedQuantity
   */
  @javax.annotation.Nullable
  public Integer getTotalReservedQuantity() {
    return totalReservedQuantity;
  }

  public void setTotalReservedQuantity(Integer totalReservedQuantity) {
    this.totalReservedQuantity = totalReservedQuantity;
  }


  public Getinventorywithdispatchedreservations200ResponseInner warehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
    return this;
  }

  /**
   * Warehouse ID.
   * @return warehouseId
   */
  @javax.annotation.Nullable
  public String getWarehouseId() {
    return warehouseId;
  }

  public void setWarehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Getinventorywithdispatchedreservations200ResponseInner getinventorywithdispatchedreservations200ResponseInner = (Getinventorywithdispatchedreservations200ResponseInner) o;
    return Objects.equals(this.availableQuantity, getinventorywithdispatchedreservations200ResponseInner.availableQuantity) &&
        Objects.equals(this.dispatchedReservationsQuantity, getinventorywithdispatchedreservations200ResponseInner.dispatchedReservationsQuantity) &&
        Objects.equals(this.isUnlimitedQuantity, getinventorywithdispatchedreservations200ResponseInner.isUnlimitedQuantity) &&
        Objects.equals(this.quantity, getinventorywithdispatchedreservations200ResponseInner.quantity) &&
        Objects.equals(this.skuId, getinventorywithdispatchedreservations200ResponseInner.skuId) &&
        Objects.equals(this.totalReservedQuantity, getinventorywithdispatchedreservations200ResponseInner.totalReservedQuantity) &&
        Objects.equals(this.warehouseId, getinventorywithdispatchedreservations200ResponseInner.warehouseId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableQuantity, dispatchedReservationsQuantity, isUnlimitedQuantity, quantity, skuId, totalReservedQuantity, warehouseId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Getinventorywithdispatchedreservations200ResponseInner {\n");
    sb.append("    availableQuantity: ").append(toIndentedString(availableQuantity)).append("\n");
    sb.append("    dispatchedReservationsQuantity: ").append(toIndentedString(dispatchedReservationsQuantity)).append("\n");
    sb.append("    isUnlimitedQuantity: ").append(toIndentedString(isUnlimitedQuantity)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    skuId: ").append(toIndentedString(skuId)).append("\n");
    sb.append("    totalReservedQuantity: ").append(toIndentedString(totalReservedQuantity)).append("\n");
    sb.append("    warehouseId: ").append(toIndentedString(warehouseId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableQuantity");
    openapiFields.add("dispatchedReservationsQuantity");
    openapiFields.add("isUnlimitedQuantity");
    openapiFields.add("quantity");
    openapiFields.add("skuId");
    openapiFields.add("totalReservedQuantity");
    openapiFields.add("warehouseId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Getinventorywithdispatchedreservations200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Getinventorywithdispatchedreservations200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Getinventorywithdispatchedreservations200ResponseInner is not found in the empty JSON string", Getinventorywithdispatchedreservations200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Getinventorywithdispatchedreservations200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Getinventorywithdispatchedreservations200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("skuId") != null && !jsonObj.get("skuId").isJsonNull()) && !jsonObj.get("skuId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuId").toString()));
      }
      if ((jsonObj.get("warehouseId") != null && !jsonObj.get("warehouseId").isJsonNull()) && !jsonObj.get("warehouseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouseId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Getinventorywithdispatchedreservations200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Getinventorywithdispatchedreservations200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Getinventorywithdispatchedreservations200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Getinventorywithdispatchedreservations200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<Getinventorywithdispatchedreservations200ResponseInner>() {
           @Override
           public void write(JsonWriter out, Getinventorywithdispatchedreservations200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Getinventorywithdispatchedreservations200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Getinventorywithdispatchedreservations200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Getinventorywithdispatchedreservations200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to Getinventorywithdispatchedreservations200ResponseInner
   */
  public static Getinventorywithdispatchedreservations200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Getinventorywithdispatchedreservations200ResponseInner.class);
  }

  /**
   * Convert an instance of Getinventorywithdispatchedreservations200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

