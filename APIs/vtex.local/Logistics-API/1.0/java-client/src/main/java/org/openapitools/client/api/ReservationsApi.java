/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateReservation200Response;
import org.openapitools.client.model.CreateReservationRequest1;
import org.openapitools.client.model.ReservationById200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReservationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReservationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReservationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acknowledgmentReservation
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acknowledgmentReservationCall(String contentType, String accept, String reservationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/reservations/{reservationId}/acknowledge"
            .replace("{" + "reservationId" + "}", localVarApiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acknowledgmentReservationValidateBeforeCall(String contentType, String accept, String reservationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling acknowledgmentReservation(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling acknowledgmentReservation(Async)");
        }

        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling acknowledgmentReservation(Async)");
        }

        return acknowledgmentReservationCall(contentType, accept, reservationId, _callback);

    }

    /**
     * Acknowledgment reservation
     * Acknowledges reservations made by reservation ID.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void acknowledgmentReservation(String contentType, String accept, String reservationId) throws ApiException {
        acknowledgmentReservationWithHttpInfo(contentType, accept, reservationId);
    }

    /**
     * Acknowledgment reservation
     * Acknowledges reservations made by reservation ID.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> acknowledgmentReservationWithHttpInfo(String contentType, String accept, String reservationId) throws ApiException {
        okhttp3.Call localVarCall = acknowledgmentReservationValidateBeforeCall(contentType, accept, reservationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Acknowledgment reservation (asynchronously)
     * Acknowledges reservations made by reservation ID.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acknowledgmentReservationAsync(String contentType, String accept, String reservationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = acknowledgmentReservationValidateBeforeCall(contentType, accept, reservationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelReservation
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelReservationCall(String contentType, String accept, String reservationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/reservations/{reservationId}/cancel"
            .replace("{" + "reservationId" + "}", localVarApiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelReservationValidateBeforeCall(String contentType, String accept, String reservationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling cancelReservation(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling cancelReservation(Async)");
        }

        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling cancelReservation(Async)");
        }

        return cancelReservationCall(contentType, accept, reservationId, _callback);

    }

    /**
     * Cancel reservation
     * Cancels reservation by reservation ID.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void cancelReservation(String contentType, String accept, String reservationId) throws ApiException {
        cancelReservationWithHttpInfo(contentType, accept, reservationId);
    }

    /**
     * Cancel reservation
     * Cancels reservation by reservation ID.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelReservationWithHttpInfo(String contentType, String accept, String reservationId) throws ApiException {
        okhttp3.Call localVarCall = cancelReservationValidateBeforeCall(contentType, accept, reservationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel reservation (asynchronously)
     * Cancels reservation by reservation ID.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelReservationAsync(String contentType, String accept, String reservationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelReservationValidateBeforeCall(contentType, accept, reservationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmReservation
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmReservationCall(String contentType, String accept, String reservationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/reservations/{reservationId}/confirm"
            .replace("{" + "reservationId" + "}", localVarApiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmReservationValidateBeforeCall(String contentType, String accept, String reservationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling confirmReservation(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling confirmReservation(Async)");
        }

        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling confirmReservation(Async)");
        }

        return confirmReservationCall(contentType, accept, reservationId, _callback);

    }

    /**
     * Confirm reservation
     * Confirms reservation by reservation ID.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void confirmReservation(String contentType, String accept, String reservationId) throws ApiException {
        confirmReservationWithHttpInfo(contentType, accept, reservationId);
    }

    /**
     * Confirm reservation
     * Confirms reservation by reservation ID.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> confirmReservationWithHttpInfo(String contentType, String accept, String reservationId) throws ApiException {
        okhttp3.Call localVarCall = confirmReservationValidateBeforeCall(contentType, accept, reservationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Confirm reservation (asynchronously)
     * Confirms reservation by reservation ID.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmReservationAsync(String contentType, String accept, String reservationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmReservationValidateBeforeCall(contentType, accept, reservationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReservation
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param createReservationRequest1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-CacheServer -  <br>  * X-Powered-by-VTEX-Janus-ApiCache -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Powered-by-VTEX-Janus-Router -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createReservationCall(String accept, String contentType, CreateReservationRequest1 createReservationRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReservationRequest1;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/reservations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json; charset=utf-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReservationValidateBeforeCall(String accept, String contentType, CreateReservationRequest1 createReservationRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createReservation(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createReservation(Async)");
        }

        // verify the required parameter 'createReservationRequest1' is set
        if (createReservationRequest1 == null) {
            throw new ApiException("Missing the required parameter 'createReservationRequest1' when calling createReservation(Async)");
        }

        return createReservationCall(accept, contentType, createReservationRequest1, _callback);

    }

    /**
     * Create reservation
     * Creates [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92).
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param createReservationRequest1  (required)
     * @return CreateReservation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-CacheServer -  <br>  * X-Powered-by-VTEX-Janus-ApiCache -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Powered-by-VTEX-Janus-Router -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public CreateReservation200Response createReservation(String accept, String contentType, CreateReservationRequest1 createReservationRequest1) throws ApiException {
        ApiResponse<CreateReservation200Response> localVarResp = createReservationWithHttpInfo(accept, contentType, createReservationRequest1);
        return localVarResp.getData();
    }

    /**
     * Create reservation
     * Creates [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92).
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param createReservationRequest1  (required)
     * @return ApiResponse&lt;CreateReservation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-CacheServer -  <br>  * X-Powered-by-VTEX-Janus-ApiCache -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Powered-by-VTEX-Janus-Router -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<CreateReservation200Response> createReservationWithHttpInfo(String accept, String contentType, CreateReservationRequest1 createReservationRequest1) throws ApiException {
        okhttp3.Call localVarCall = createReservationValidateBeforeCall(accept, contentType, createReservationRequest1, null);
        Type localVarReturnType = new TypeToken<CreateReservation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create reservation (asynchronously)
     * Creates [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92).
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param createReservationRequest1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-CacheServer -  <br>  * X-Powered-by-VTEX-Janus-ApiCache -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Powered-by-VTEX-Janus-Router -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createReservationAsync(String accept, String contentType, CreateReservationRequest1 createReservationRequest1, final ApiCallback<CreateReservation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReservationValidateBeforeCall(accept, contentType, createReservationRequest1, _callback);
        Type localVarReturnType = new TypeToken<CreateReservation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reservationById
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-CacheServer -  <br>  * X-Powered-by-VTEX-Janus-ApiCache -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Powered-by-VTEX-Janus-Router -  <br>  * X-Track -  <br>  * X-VTEX-Cache-Status-Janus-ApiCache -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call reservationByIdCall(String contentType, String accept, String reservationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/reservations/{reservationId}"
            .replace("{" + "reservationId" + "}", localVarApiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reservationByIdValidateBeforeCall(String contentType, String accept, String reservationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling reservationById(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling reservationById(Async)");
        }

        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling reservationById(Async)");
        }

        return reservationByIdCall(contentType, accept, reservationId, _callback);

    }

    /**
     * List reservation by ID
     * Lists reservation&#39;s information by ID.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @return ReservationById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-CacheServer -  <br>  * X-Powered-by-VTEX-Janus-ApiCache -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Powered-by-VTEX-Janus-Router -  <br>  * X-Track -  <br>  * X-VTEX-Cache-Status-Janus-ApiCache -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public ReservationById200Response reservationById(String contentType, String accept, String reservationId) throws ApiException {
        ApiResponse<ReservationById200Response> localVarResp = reservationByIdWithHttpInfo(contentType, accept, reservationId);
        return localVarResp.getData();
    }

    /**
     * List reservation by ID
     * Lists reservation&#39;s information by ID.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @return ApiResponse&lt;ReservationById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-CacheServer -  <br>  * X-Powered-by-VTEX-Janus-ApiCache -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Powered-by-VTEX-Janus-Router -  <br>  * X-Track -  <br>  * X-VTEX-Cache-Status-Janus-ApiCache -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ReservationById200Response> reservationByIdWithHttpInfo(String contentType, String accept, String reservationId) throws ApiException {
        okhttp3.Call localVarCall = reservationByIdValidateBeforeCall(contentType, accept, reservationId, null);
        Type localVarReturnType = new TypeToken<ReservationById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List reservation by ID (asynchronously)
     * Lists reservation&#39;s information by ID.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param reservationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-CacheServer -  <br>  * X-Powered-by-VTEX-Janus-ApiCache -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Powered-by-VTEX-Janus-Router -  <br>  * X-Track -  <br>  * X-VTEX-Cache-Status-Janus-ApiCache -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call reservationByIdAsync(String contentType, String accept, String reservationId, final ApiCallback<ReservationById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reservationByIdValidateBeforeCall(contentType, accept, reservationId, _callback);
        Type localVarReturnType = new TypeToken<ReservationById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reservationbyWarehouseandSku
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param warehouseId  (required)
     * @param skuId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservationbyWarehouseandSkuCall(String contentType, String accept, String warehouseId, String skuId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/inventory/reservations/{warehouseId}/{skuId}"
            .replace("{" + "warehouseId" + "}", localVarApiClient.escapeString(warehouseId.toString()))
            .replace("{" + "skuId" + "}", localVarApiClient.escapeString(skuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reservationbyWarehouseandSkuValidateBeforeCall(String contentType, String accept, String warehouseId, String skuId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling reservationbyWarehouseandSku(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling reservationbyWarehouseandSku(Async)");
        }

        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null) {
            throw new ApiException("Missing the required parameter 'warehouseId' when calling reservationbyWarehouseandSku(Async)");
        }

        // verify the required parameter 'skuId' is set
        if (skuId == null) {
            throw new ApiException("Missing the required parameter 'skuId' when calling reservationbyWarehouseandSku(Async)");
        }

        return reservationbyWarehouseandSkuCall(contentType, accept, warehouseId, skuId, _callback);

    }

    /**
     * List reservation by warehouse and SKU
     * Lists reservations in your store, by searching through warehouse and SKU.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param warehouseId  (required)
     * @param skuId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void reservationbyWarehouseandSku(String contentType, String accept, String warehouseId, String skuId) throws ApiException {
        reservationbyWarehouseandSkuWithHttpInfo(contentType, accept, warehouseId, skuId);
    }

    /**
     * List reservation by warehouse and SKU
     * Lists reservations in your store, by searching through warehouse and SKU.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param warehouseId  (required)
     * @param skuId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reservationbyWarehouseandSkuWithHttpInfo(String contentType, String accept, String warehouseId, String skuId) throws ApiException {
        okhttp3.Call localVarCall = reservationbyWarehouseandSkuValidateBeforeCall(contentType, accept, warehouseId, skuId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List reservation by warehouse and SKU (asynchronously)
     * Lists reservations in your store, by searching through warehouse and SKU.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param warehouseId  (required)
     * @param skuId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservationbyWarehouseandSkuAsync(String contentType, String accept, String warehouseId, String skuId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reservationbyWarehouseandSkuValidateBeforeCall(contentType, accept, warehouseId, skuId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
