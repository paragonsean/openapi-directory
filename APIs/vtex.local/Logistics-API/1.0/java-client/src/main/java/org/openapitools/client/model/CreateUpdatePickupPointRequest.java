/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BusinessHour1;
import org.openapitools.client.model.CreateUpdatePickupPointRequestAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateUpdatePickupPointRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateUpdatePickupPointRequest {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private CreateUpdatePickupPointRequestAddress address;

  public static final String SERIALIZED_NAME_BUSINESS_HOURS = "businessHours";
  @SerializedName(SERIALIZED_NAME_BUSINESS_HOURS)
  private List<BusinessHour1> businessHours = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FORMATTED_ADDRESS = "formatted_address";
  @SerializedName(SERIALIZED_NAME_FORMATTED_ADDRESS)
  private String formattedAddress;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTRUCTIONS = "instructions";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS)
  private String instructions;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_THIRD_PARTY_PICKUP = "isThirdPartyPickup";
  @SerializedName(SERIALIZED_NAME_IS_THIRD_PARTY_PICKUP)
  private Boolean isThirdPartyPickup;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGS_LABEL = "tagsLabel";
  @SerializedName(SERIALIZED_NAME_TAGS_LABEL)
  private List<String> tagsLabel = new ArrayList<>();

  public CreateUpdatePickupPointRequest() {
  }

  public CreateUpdatePickupPointRequest address(CreateUpdatePickupPointRequestAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nonnull
  public CreateUpdatePickupPointRequestAddress getAddress() {
    return address;
  }

  public void setAddress(CreateUpdatePickupPointRequestAddress address) {
    this.address = address;
  }


  public CreateUpdatePickupPointRequest businessHours(List<BusinessHour1> businessHours) {
    this.businessHours = businessHours;
    return this;
  }

  public CreateUpdatePickupPointRequest addBusinessHoursItem(BusinessHour1 businessHoursItem) {
    if (this.businessHours == null) {
      this.businessHours = new ArrayList<>();
    }
    this.businessHours.add(businessHoursItem);
    return this;
  }

  /**
   * 
   * @return businessHours
   */
  @javax.annotation.Nonnull
  public List<BusinessHour1> getBusinessHours() {
    return businessHours;
  }

  public void setBusinessHours(List<BusinessHour1> businessHours) {
    this.businessHours = businessHours;
  }


  public CreateUpdatePickupPointRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Pickup point description.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateUpdatePickupPointRequest formattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
    return this;
  }

  /**
   * Formated address.
   * @return formattedAddress
   */
  @javax.annotation.Nonnull
  public String getFormattedAddress() {
    return formattedAddress;
  }

  public void setFormattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
  }


  public CreateUpdatePickupPointRequest id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Pickup Point ID. Cannot contain spaces.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreateUpdatePickupPointRequest instructions(String instructions) {
    this.instructions = instructions;
    return this;
  }

  /**
   * Pickup point instructions.
   * @return instructions
   */
  @javax.annotation.Nonnull
  public String getInstructions() {
    return instructions;
  }

  public void setInstructions(String instructions) {
    this.instructions = instructions;
  }


  public CreateUpdatePickupPointRequest isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Get isActive
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public CreateUpdatePickupPointRequest isThirdPartyPickup(Boolean isThirdPartyPickup) {
    this.isThirdPartyPickup = isThirdPartyPickup;
    return this;
  }

  /**
   * Get isThirdPartyPickup
   * @return isThirdPartyPickup
   */
  @javax.annotation.Nullable
  public Boolean getIsThirdPartyPickup() {
    return isThirdPartyPickup;
  }

  public void setIsThirdPartyPickup(Boolean isThirdPartyPickup) {
    this.isThirdPartyPickup = isThirdPartyPickup;
  }


  public CreateUpdatePickupPointRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Pickup point name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateUpdatePickupPointRequest tagsLabel(List<String> tagsLabel) {
    this.tagsLabel = tagsLabel;
    return this;
  }

  public CreateUpdatePickupPointRequest addTagsLabelItem(String tagsLabelItem) {
    if (this.tagsLabel == null) {
      this.tagsLabel = new ArrayList<>();
    }
    this.tagsLabel.add(tagsLabelItem);
    return this;
  }

  /**
   * 
   * @return tagsLabel
   */
  @javax.annotation.Nonnull
  public List<String> getTagsLabel() {
    return tagsLabel;
  }

  public void setTagsLabel(List<String> tagsLabel) {
    this.tagsLabel = tagsLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUpdatePickupPointRequest createUpdatePickupPointRequest = (CreateUpdatePickupPointRequest) o;
    return Objects.equals(this.address, createUpdatePickupPointRequest.address) &&
        Objects.equals(this.businessHours, createUpdatePickupPointRequest.businessHours) &&
        Objects.equals(this.description, createUpdatePickupPointRequest.description) &&
        Objects.equals(this.formattedAddress, createUpdatePickupPointRequest.formattedAddress) &&
        Objects.equals(this.id, createUpdatePickupPointRequest.id) &&
        Objects.equals(this.instructions, createUpdatePickupPointRequest.instructions) &&
        Objects.equals(this.isActive, createUpdatePickupPointRequest.isActive) &&
        Objects.equals(this.isThirdPartyPickup, createUpdatePickupPointRequest.isThirdPartyPickup) &&
        Objects.equals(this.name, createUpdatePickupPointRequest.name) &&
        Objects.equals(this.tagsLabel, createUpdatePickupPointRequest.tagsLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, businessHours, description, formattedAddress, id, instructions, isActive, isThirdPartyPickup, name, tagsLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUpdatePickupPointRequest {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    businessHours: ").append(toIndentedString(businessHours)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    formattedAddress: ").append(toIndentedString(formattedAddress)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isThirdPartyPickup: ").append(toIndentedString(isThirdPartyPickup)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tagsLabel: ").append(toIndentedString(tagsLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("businessHours");
    openapiFields.add("description");
    openapiFields.add("formatted_address");
    openapiFields.add("id");
    openapiFields.add("instructions");
    openapiFields.add("isActive");
    openapiFields.add("isThirdPartyPickup");
    openapiFields.add("name");
    openapiFields.add("tagsLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("businessHours");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("formatted_address");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("instructions");
    openapiRequiredFields.add("isActive");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("tagsLabel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateUpdatePickupPointRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateUpdatePickupPointRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateUpdatePickupPointRequest is not found in the empty JSON string", CreateUpdatePickupPointRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateUpdatePickupPointRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateUpdatePickupPointRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateUpdatePickupPointRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `address`
      CreateUpdatePickupPointRequestAddress.validateJsonElement(jsonObj.get("address"));
      // ensure the json data is an array
      if (!jsonObj.get("businessHours").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessHours` to be an array in the JSON string but got `%s`", jsonObj.get("businessHours").toString()));
      }

      JsonArray jsonArraybusinessHours = jsonObj.getAsJsonArray("businessHours");
      // validate the required field `businessHours` (array)
      for (int i = 0; i < jsonArraybusinessHours.size(); i++) {
        BusinessHour1.validateJsonElement(jsonArraybusinessHours.get(i));
      };
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("formatted_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formatted_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formatted_address").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructions").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tagsLabel") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tagsLabel").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagsLabel` to be an array in the JSON string but got `%s`", jsonObj.get("tagsLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateUpdatePickupPointRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateUpdatePickupPointRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateUpdatePickupPointRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateUpdatePickupPointRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateUpdatePickupPointRequest>() {
           @Override
           public void write(JsonWriter out, CreateUpdatePickupPointRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateUpdatePickupPointRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateUpdatePickupPointRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateUpdatePickupPointRequest
   * @throws IOException if the JSON string is invalid with respect to CreateUpdatePickupPointRequest
   */
  public static CreateUpdatePickupPointRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateUpdatePickupPointRequest.class);
  }

  /**
   * Convert an instance of CreateUpdatePickupPointRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

