/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ListAllPickupPpoints200ResponseInnerAddress;
import org.openapitools.client.model.ListAllPickupPpoints200ResponseInnerBusinessHoursInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListAllPickupPpoints200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListAllPickupPpoints200ResponseInner {
  public static final String SERIALIZED_NAME_ACCOUNT_GROUP_ID = "accountGroupId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_GROUP_ID)
  private String accountGroupId;

  public static final String SERIALIZED_NAME_ACCOUNT_OWNER_ID = "accountOwnerId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_OWNER_ID)
  private String accountOwnerId;

  public static final String SERIALIZED_NAME_ACCOUNT_OWNER_NAME = "accountOwnerName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_OWNER_NAME)
  private String accountOwnerName;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private ListAllPickupPpoints200ResponseInnerAddress address;

  public static final String SERIALIZED_NAME_BUSINESS_HOURS = "businessHours";
  @SerializedName(SERIALIZED_NAME_BUSINESS_HOURS)
  private List<ListAllPickupPpoints200ResponseInnerBusinessHoursInner> businessHours = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private BigDecimal distance;

  public static final String SERIALIZED_NAME_FORMATTED_ADDRESS = "formatted_address";
  @SerializedName(SERIALIZED_NAME_FORMATTED_ADDRESS)
  private String formattedAddress;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTRUCTIONS = "instructions";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS)
  private String instructions;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_IS_THIRD_PARTY_PICKUP = "isThirdPartyPickup";
  @SerializedName(SERIALIZED_NAME_IS_THIRD_PARTY_PICKUP)
  private Boolean isThirdPartyPickup;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGINAL_ID = "originalId";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_ID)
  private String originalId;

  public static final String SERIALIZED_NAME_PARENT_ACCOUNT_NAME = "parentAccountName";
  @SerializedName(SERIALIZED_NAME_PARENT_ACCOUNT_NAME)
  private String parentAccountName;

  public static final String SERIALIZED_NAME_PICKUP_HOLIDAYS = "pickupHolidays";
  @SerializedName(SERIALIZED_NAME_PICKUP_HOLIDAYS)
  private List<String> pickupHolidays = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLER = "seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  private String seller;

  public static final String SERIALIZED_NAME_TAGS_LABEL = "tagsLabel";
  @SerializedName(SERIALIZED_NAME_TAGS_LABEL)
  private List<String> tagsLabel = new ArrayList<>();

  public ListAllPickupPpoints200ResponseInner() {
  }

  public ListAllPickupPpoints200ResponseInner accountGroupId(String accountGroupId) {
    this.accountGroupId = accountGroupId;
    return this;
  }

  /**
   * Account group ID.
   * @return accountGroupId
   */
  @javax.annotation.Nullable
  public String getAccountGroupId() {
    return accountGroupId;
  }

  public void setAccountGroupId(String accountGroupId) {
    this.accountGroupId = accountGroupId;
  }


  public ListAllPickupPpoints200ResponseInner accountOwnerId(String accountOwnerId) {
    this.accountOwnerId = accountOwnerId;
    return this;
  }

  /**
   * Account owner ID.
   * @return accountOwnerId
   */
  @javax.annotation.Nullable
  public String getAccountOwnerId() {
    return accountOwnerId;
  }

  public void setAccountOwnerId(String accountOwnerId) {
    this.accountOwnerId = accountOwnerId;
  }


  public ListAllPickupPpoints200ResponseInner accountOwnerName(String accountOwnerName) {
    this.accountOwnerName = accountOwnerName;
    return this;
  }

  /**
   * Account owner name.
   * @return accountOwnerName
   */
  @javax.annotation.Nullable
  public String getAccountOwnerName() {
    return accountOwnerName;
  }

  public void setAccountOwnerName(String accountOwnerName) {
    this.accountOwnerName = accountOwnerName;
  }


  public ListAllPickupPpoints200ResponseInner address(ListAllPickupPpoints200ResponseInnerAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public ListAllPickupPpoints200ResponseInnerAddress getAddress() {
    return address;
  }

  public void setAddress(ListAllPickupPpoints200ResponseInnerAddress address) {
    this.address = address;
  }


  public ListAllPickupPpoints200ResponseInner businessHours(List<ListAllPickupPpoints200ResponseInnerBusinessHoursInner> businessHours) {
    this.businessHours = businessHours;
    return this;
  }

  public ListAllPickupPpoints200ResponseInner addBusinessHoursItem(ListAllPickupPpoints200ResponseInnerBusinessHoursInner businessHoursItem) {
    if (this.businessHours == null) {
      this.businessHours = new ArrayList<>();
    }
    this.businessHours.add(businessHoursItem);
    return this;
  }

  /**
   * Business hours information for each day of the week.
   * @return businessHours
   */
  @javax.annotation.Nullable
  public List<ListAllPickupPpoints200ResponseInnerBusinessHoursInner> getBusinessHours() {
    return businessHours;
  }

  public void setBusinessHours(List<ListAllPickupPpoints200ResponseInnerBusinessHoursInner> businessHours) {
    this.businessHours = businessHours;
  }


  public ListAllPickupPpoints200ResponseInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Pickup point description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ListAllPickupPpoints200ResponseInner distance(BigDecimal distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Distance.
   * @return distance
   */
  @javax.annotation.Nullable
  public BigDecimal getDistance() {
    return distance;
  }

  public void setDistance(BigDecimal distance) {
    this.distance = distance;
  }


  public ListAllPickupPpoints200ResponseInner formattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
    return this;
  }

  /**
   * Formated address.
   * @return formattedAddress
   */
  @javax.annotation.Nullable
  public String getFormattedAddress() {
    return formattedAddress;
  }

  public void setFormattedAddress(String formattedAddress) {
    this.formattedAddress = formattedAddress;
  }


  public ListAllPickupPpoints200ResponseInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Pickup point ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ListAllPickupPpoints200ResponseInner instructions(String instructions) {
    this.instructions = instructions;
    return this;
  }

  /**
   * Instructions.
   * @return instructions
   */
  @javax.annotation.Nullable
  public String getInstructions() {
    return instructions;
  }

  public void setInstructions(String instructions) {
    this.instructions = instructions;
  }


  public ListAllPickupPpoints200ResponseInner isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Indicates whether pickup point is active.
   * @return isActive
   */
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public ListAllPickupPpoints200ResponseInner isThirdPartyPickup(Boolean isThirdPartyPickup) {
    this.isThirdPartyPickup = isThirdPartyPickup;
    return this;
  }

  /**
   * Indicates whether pickup point is third party.
   * @return isThirdPartyPickup
   */
  @javax.annotation.Nullable
  public Boolean getIsThirdPartyPickup() {
    return isThirdPartyPickup;
  }

  public void setIsThirdPartyPickup(Boolean isThirdPartyPickup) {
    this.isThirdPartyPickup = isThirdPartyPickup;
  }


  public ListAllPickupPpoints200ResponseInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Pickup point name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ListAllPickupPpoints200ResponseInner originalId(String originalId) {
    this.originalId = originalId;
    return this;
  }

  /**
   * Original ID.
   * @return originalId
   */
  @javax.annotation.Nullable
  public String getOriginalId() {
    return originalId;
  }

  public void setOriginalId(String originalId) {
    this.originalId = originalId;
  }


  public ListAllPickupPpoints200ResponseInner parentAccountName(String parentAccountName) {
    this.parentAccountName = parentAccountName;
    return this;
  }

  /**
   * Parent account name.
   * @return parentAccountName
   */
  @javax.annotation.Nullable
  public String getParentAccountName() {
    return parentAccountName;
  }

  public void setParentAccountName(String parentAccountName) {
    this.parentAccountName = parentAccountName;
  }


  public ListAllPickupPpoints200ResponseInner pickupHolidays(List<String> pickupHolidays) {
    this.pickupHolidays = pickupHolidays;
    return this;
  }

  public ListAllPickupPpoints200ResponseInner addPickupHolidaysItem(String pickupHolidaysItem) {
    if (this.pickupHolidays == null) {
      this.pickupHolidays = new ArrayList<>();
    }
    this.pickupHolidays.add(pickupHolidaysItem);
    return this;
  }

  /**
   * Holidays which apply for pickup point.
   * @return pickupHolidays
   */
  @javax.annotation.Nullable
  public List<String> getPickupHolidays() {
    return pickupHolidays;
  }

  public void setPickupHolidays(List<String> pickupHolidays) {
    this.pickupHolidays = pickupHolidays;
  }


  public ListAllPickupPpoints200ResponseInner seller(String seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Seller corresponding to pickup point.
   * @return seller
   */
  @javax.annotation.Nullable
  public String getSeller() {
    return seller;
  }

  public void setSeller(String seller) {
    this.seller = seller;
  }


  public ListAllPickupPpoints200ResponseInner tagsLabel(List<String> tagsLabel) {
    this.tagsLabel = tagsLabel;
    return this;
  }

  public ListAllPickupPpoints200ResponseInner addTagsLabelItem(String tagsLabelItem) {
    if (this.tagsLabel == null) {
      this.tagsLabel = new ArrayList<>();
    }
    this.tagsLabel.add(tagsLabelItem);
    return this;
  }

  /**
   * List of tags.
   * @return tagsLabel
   */
  @javax.annotation.Nullable
  public List<String> getTagsLabel() {
    return tagsLabel;
  }

  public void setTagsLabel(List<String> tagsLabel) {
    this.tagsLabel = tagsLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAllPickupPpoints200ResponseInner listAllPickupPpoints200ResponseInner = (ListAllPickupPpoints200ResponseInner) o;
    return Objects.equals(this.accountGroupId, listAllPickupPpoints200ResponseInner.accountGroupId) &&
        Objects.equals(this.accountOwnerId, listAllPickupPpoints200ResponseInner.accountOwnerId) &&
        Objects.equals(this.accountOwnerName, listAllPickupPpoints200ResponseInner.accountOwnerName) &&
        Objects.equals(this.address, listAllPickupPpoints200ResponseInner.address) &&
        Objects.equals(this.businessHours, listAllPickupPpoints200ResponseInner.businessHours) &&
        Objects.equals(this.description, listAllPickupPpoints200ResponseInner.description) &&
        Objects.equals(this.distance, listAllPickupPpoints200ResponseInner.distance) &&
        Objects.equals(this.formattedAddress, listAllPickupPpoints200ResponseInner.formattedAddress) &&
        Objects.equals(this.id, listAllPickupPpoints200ResponseInner.id) &&
        Objects.equals(this.instructions, listAllPickupPpoints200ResponseInner.instructions) &&
        Objects.equals(this.isActive, listAllPickupPpoints200ResponseInner.isActive) &&
        Objects.equals(this.isThirdPartyPickup, listAllPickupPpoints200ResponseInner.isThirdPartyPickup) &&
        Objects.equals(this.name, listAllPickupPpoints200ResponseInner.name) &&
        Objects.equals(this.originalId, listAllPickupPpoints200ResponseInner.originalId) &&
        Objects.equals(this.parentAccountName, listAllPickupPpoints200ResponseInner.parentAccountName) &&
        Objects.equals(this.pickupHolidays, listAllPickupPpoints200ResponseInner.pickupHolidays) &&
        Objects.equals(this.seller, listAllPickupPpoints200ResponseInner.seller) &&
        Objects.equals(this.tagsLabel, listAllPickupPpoints200ResponseInner.tagsLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountGroupId, accountOwnerId, accountOwnerName, address, businessHours, description, distance, formattedAddress, id, instructions, isActive, isThirdPartyPickup, name, originalId, parentAccountName, pickupHolidays, seller, tagsLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAllPickupPpoints200ResponseInner {\n");
    sb.append("    accountGroupId: ").append(toIndentedString(accountGroupId)).append("\n");
    sb.append("    accountOwnerId: ").append(toIndentedString(accountOwnerId)).append("\n");
    sb.append("    accountOwnerName: ").append(toIndentedString(accountOwnerName)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    businessHours: ").append(toIndentedString(businessHours)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    formattedAddress: ").append(toIndentedString(formattedAddress)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isThirdPartyPickup: ").append(toIndentedString(isThirdPartyPickup)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    originalId: ").append(toIndentedString(originalId)).append("\n");
    sb.append("    parentAccountName: ").append(toIndentedString(parentAccountName)).append("\n");
    sb.append("    pickupHolidays: ").append(toIndentedString(pickupHolidays)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("    tagsLabel: ").append(toIndentedString(tagsLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountGroupId");
    openapiFields.add("accountOwnerId");
    openapiFields.add("accountOwnerName");
    openapiFields.add("address");
    openapiFields.add("businessHours");
    openapiFields.add("description");
    openapiFields.add("distance");
    openapiFields.add("formatted_address");
    openapiFields.add("id");
    openapiFields.add("instructions");
    openapiFields.add("isActive");
    openapiFields.add("isThirdPartyPickup");
    openapiFields.add("name");
    openapiFields.add("originalId");
    openapiFields.add("parentAccountName");
    openapiFields.add("pickupHolidays");
    openapiFields.add("seller");
    openapiFields.add("tagsLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListAllPickupPpoints200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListAllPickupPpoints200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAllPickupPpoints200ResponseInner is not found in the empty JSON string", ListAllPickupPpoints200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListAllPickupPpoints200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAllPickupPpoints200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountGroupId") != null && !jsonObj.get("accountGroupId").isJsonNull()) && !jsonObj.get("accountGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountGroupId").toString()));
      }
      if ((jsonObj.get("accountOwnerId") != null && !jsonObj.get("accountOwnerId").isJsonNull()) && !jsonObj.get("accountOwnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountOwnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountOwnerId").toString()));
      }
      if ((jsonObj.get("accountOwnerName") != null && !jsonObj.get("accountOwnerName").isJsonNull()) && !jsonObj.get("accountOwnerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountOwnerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountOwnerName").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        ListAllPickupPpoints200ResponseInnerAddress.validateJsonElement(jsonObj.get("address"));
      }
      if (jsonObj.get("businessHours") != null && !jsonObj.get("businessHours").isJsonNull()) {
        JsonArray jsonArraybusinessHours = jsonObj.getAsJsonArray("businessHours");
        if (jsonArraybusinessHours != null) {
          // ensure the json data is an array
          if (!jsonObj.get("businessHours").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `businessHours` to be an array in the JSON string but got `%s`", jsonObj.get("businessHours").toString()));
          }

          // validate the optional field `businessHours` (array)
          for (int i = 0; i < jsonArraybusinessHours.size(); i++) {
            ListAllPickupPpoints200ResponseInnerBusinessHoursInner.validateJsonElement(jsonArraybusinessHours.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("formatted_address") != null && !jsonObj.get("formatted_address").isJsonNull()) && !jsonObj.get("formatted_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formatted_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formatted_address").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("instructions") != null && !jsonObj.get("instructions").isJsonNull()) && !jsonObj.get("instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructions").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("originalId") != null && !jsonObj.get("originalId").isJsonNull()) && !jsonObj.get("originalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalId").toString()));
      }
      if ((jsonObj.get("parentAccountName") != null && !jsonObj.get("parentAccountName").isJsonNull()) && !jsonObj.get("parentAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentAccountName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pickupHolidays") != null && !jsonObj.get("pickupHolidays").isJsonNull() && !jsonObj.get("pickupHolidays").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickupHolidays` to be an array in the JSON string but got `%s`", jsonObj.get("pickupHolidays").toString()));
      }
      if ((jsonObj.get("seller") != null && !jsonObj.get("seller").isJsonNull()) && !jsonObj.get("seller").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tagsLabel") != null && !jsonObj.get("tagsLabel").isJsonNull() && !jsonObj.get("tagsLabel").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagsLabel` to be an array in the JSON string but got `%s`", jsonObj.get("tagsLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAllPickupPpoints200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAllPickupPpoints200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAllPickupPpoints200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAllPickupPpoints200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAllPickupPpoints200ResponseInner>() {
           @Override
           public void write(JsonWriter out, ListAllPickupPpoints200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAllPickupPpoints200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListAllPickupPpoints200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListAllPickupPpoints200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to ListAllPickupPpoints200ResponseInner
   */
  public static ListAllPickupPpoints200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAllPickupPpoints200ResponseInner.class);
  }

  /**
   * Convert an instance of ListAllPickupPpoints200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

