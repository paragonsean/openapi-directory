/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateUpdateFreightValuesRequest;
import org.openapitools.client.model.FreightValues200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FreightValuesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FreightValuesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FreightValuesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createUpdateFreightValues
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param carrierId  (required)
     * @param createUpdateFreightValuesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUpdateFreightValuesCall(String contentType, String accept, String carrierId, List<CreateUpdateFreightValuesRequest> createUpdateFreightValuesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateFreightValuesRequest;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/configuration/freights/{carrierId}/values/update"
            .replace("{" + "carrierId" + "}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json; charset=utf-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUpdateFreightValuesValidateBeforeCall(String contentType, String accept, String carrierId, List<CreateUpdateFreightValuesRequest> createUpdateFreightValuesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createUpdateFreightValues(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createUpdateFreightValues(Async)");
        }

        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling createUpdateFreightValues(Async)");
        }

        // verify the required parameter 'createUpdateFreightValuesRequest' is set
        if (createUpdateFreightValuesRequest == null) {
            throw new ApiException("Missing the required parameter 'createUpdateFreightValuesRequest' when calling createUpdateFreightValues(Async)");
        }

        return createUpdateFreightValuesCall(contentType, accept, carrierId, createUpdateFreightValuesRequest, _callback);

    }

    /**
     * Create/update freight values
     * Creates or updates the freight values of your store&#39;s carriers. Learn more in [Shipping rate template](https://help.vtex.com/en/tutorial/planilha-de-frete--tutorials_127#).
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param carrierId  (required)
     * @param createUpdateFreightValuesRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void createUpdateFreightValues(String contentType, String accept, String carrierId, List<CreateUpdateFreightValuesRequest> createUpdateFreightValuesRequest) throws ApiException {
        createUpdateFreightValuesWithHttpInfo(contentType, accept, carrierId, createUpdateFreightValuesRequest);
    }

    /**
     * Create/update freight values
     * Creates or updates the freight values of your store&#39;s carriers. Learn more in [Shipping rate template](https://help.vtex.com/en/tutorial/planilha-de-frete--tutorials_127#).
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param carrierId  (required)
     * @param createUpdateFreightValuesRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createUpdateFreightValuesWithHttpInfo(String contentType, String accept, String carrierId, List<CreateUpdateFreightValuesRequest> createUpdateFreightValuesRequest) throws ApiException {
        okhttp3.Call localVarCall = createUpdateFreightValuesValidateBeforeCall(contentType, accept, carrierId, createUpdateFreightValuesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create/update freight values (asynchronously)
     * Creates or updates the freight values of your store&#39;s carriers. Learn more in [Shipping rate template](https://help.vtex.com/en/tutorial/planilha-de-frete--tutorials_127#).
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param carrierId  (required)
     * @param createUpdateFreightValuesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUpdateFreightValuesAsync(String contentType, String accept, String carrierId, List<CreateUpdateFreightValuesRequest> createUpdateFreightValuesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUpdateFreightValuesValidateBeforeCall(contentType, accept, carrierId, createUpdateFreightValuesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for freightValues
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param carrierId Carrier ID (required)
     * @param cep Postal code. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-CacheServer -  <br>  * X-Powered-by-VTEX-Janus-ApiCache -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Powered-by-VTEX-Janus-Router -  <br>  * X-Track -  <br>  * X-VTEX-Cache-Status-Janus-ApiCache -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call freightValuesCall(String contentType, String accept, String carrierId, String cep, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/configuration/freights/{carrierId}/{cep}/values"
            .replace("{" + "carrierId" + "}", localVarApiClient.escapeString(carrierId.toString()))
            .replace("{" + "cep" + "}", localVarApiClient.escapeString(cep.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call freightValuesValidateBeforeCall(String contentType, String accept, String carrierId, String cep, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling freightValues(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling freightValues(Async)");
        }

        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling freightValues(Async)");
        }

        // verify the required parameter 'cep' is set
        if (cep == null) {
            throw new ApiException("Missing the required parameter 'cep' when calling freightValues(Async)");
        }

        return freightValuesCall(contentType, accept, carrierId, cep, _callback);

    }

    /**
     * List freight values
     * Lists freight values apointed to your store&#39;s carriers, searching by carrier ID and postal code (&#x60;cep&#x60;).
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param carrierId Carrier ID (required)
     * @param cep Postal code. (required)
     * @return List&lt;FreightValues200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-CacheServer -  <br>  * X-Powered-by-VTEX-Janus-ApiCache -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Powered-by-VTEX-Janus-Router -  <br>  * X-Track -  <br>  * X-VTEX-Cache-Status-Janus-ApiCache -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public List<FreightValues200ResponseInner> freightValues(String contentType, String accept, String carrierId, String cep) throws ApiException {
        ApiResponse<List<FreightValues200ResponseInner>> localVarResp = freightValuesWithHttpInfo(contentType, accept, carrierId, cep);
        return localVarResp.getData();
    }

    /**
     * List freight values
     * Lists freight values apointed to your store&#39;s carriers, searching by carrier ID and postal code (&#x60;cep&#x60;).
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param carrierId Carrier ID (required)
     * @param cep Postal code. (required)
     * @return ApiResponse&lt;List&lt;FreightValues200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-CacheServer -  <br>  * X-Powered-by-VTEX-Janus-ApiCache -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Powered-by-VTEX-Janus-Router -  <br>  * X-Track -  <br>  * X-VTEX-Cache-Status-Janus-ApiCache -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<FreightValues200ResponseInner>> freightValuesWithHttpInfo(String contentType, String accept, String carrierId, String cep) throws ApiException {
        okhttp3.Call localVarCall = freightValuesValidateBeforeCall(contentType, accept, carrierId, cep, null);
        Type localVarReturnType = new TypeToken<List<FreightValues200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List freight values (asynchronously)
     * Lists freight values apointed to your store&#39;s carriers, searching by carrier ID and postal code (&#x60;cep&#x60;).
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param carrierId Carrier ID (required)
     * @param cep Postal code. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Length -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * X-CDNIgnore -  <br>  * X-CacheServer -  <br>  * X-Powered-by-VTEX-Janus-ApiCache -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Powered-by-VTEX-Janus-Router -  <br>  * X-Track -  <br>  * X-VTEX-Cache-Status-Janus-ApiCache -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  * x-vtex-operation-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call freightValuesAsync(String contentType, String accept, String carrierId, String cep, final ApiCallback<List<FreightValues200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = freightValuesValidateBeforeCall(contentType, accept, carrierId, cep, _callback);
        Type localVarReturnType = new TypeToken<List<FreightValues200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
