/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeliveryWindow1;
import org.openapitools.client.model.Location11;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CalculateSLA200ResponseInnerInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CalculateSLA200ResponseInnerInner {
  public static final String SERIALIZED_NAME_ADITIONAL_TIME_BLOCKED_DAYS = "aditionalTimeBlockedDays";
  @SerializedName(SERIALIZED_NAME_ADITIONAL_TIME_BLOCKED_DAYS)
  private String aditionalTimeBlockedDays;

  public static final String SERIALIZED_NAME_AVAILABILITY_QUANTITY = "availabilityQuantity";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_QUANTITY)
  private Integer availabilityQuantity;

  public static final String SERIALIZED_NAME_CARRIER_SCHEDULE = "carrierSchedule";
  @SerializedName(SERIALIZED_NAME_CARRIER_SCHEDULE)
  private List<String> carrierSchedule = new ArrayList<>();

  public static final String SERIALIZED_NAME_COORDINATES = "coordinates";
  @SerializedName(SERIALIZED_NAME_COORDINATES)
  private String coordinates;

  public static final String SERIALIZED_NAME_DELIVERY_ON_WEEKENDS = "deliveryOnWeekends";
  @SerializedName(SERIALIZED_NAME_DELIVERY_ON_WEEKENDS)
  private Boolean deliveryOnWeekends;

  public static final String SERIALIZED_NAME_DELIVERY_WINDOWS = "deliveryWindows";
  @SerializedName(SERIALIZED_NAME_DELIVERY_WINDOWS)
  private List<DeliveryWindow1> deliveryWindows = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOCK_ID = "dockId";
  @SerializedName(SERIALIZED_NAME_DOCK_ID)
  private String dockId;

  public static final String SERIALIZED_NAME_DOCK_TIME = "dockTime";
  @SerializedName(SERIALIZED_NAME_DOCK_TIME)
  private String dockTime;

  public static final String SERIALIZED_NAME_FREIGHT_TABLE_ID = "freightTableId";
  @SerializedName(SERIALIZED_NAME_FREIGHT_TABLE_ID)
  private String freightTableId;

  public static final String SERIALIZED_NAME_FREIGHT_TABLE_NAME = "freightTableName";
  @SerializedName(SERIALIZED_NAME_FREIGHT_TABLE_NAME)
  private String freightTableName;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_LIST_PRICE = "listPrice";
  @SerializedName(SERIALIZED_NAME_LIST_PRICE)
  private BigDecimal listPrice;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location11 location;

  public static final String SERIALIZED_NAME_PICKUP_STORE_INFO = "pickupStoreInfo";
  @SerializedName(SERIALIZED_NAME_PICKUP_STORE_INFO)
  private String pickupStoreInfo;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_RESTRICTED_FREIGHT = "restrictedFreight";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_FREIGHT)
  private String restrictedFreight;

  public static final String SERIALIZED_NAME_SALES_CHANNEL = "salesChannel";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNEL)
  private String salesChannel;

  public static final String SERIALIZED_NAME_SLA_TYPE = "slaType";
  @SerializedName(SERIALIZED_NAME_SLA_TYPE)
  private String slaType;

  public static final String SERIALIZED_NAME_SLA_TYPE_NAME = "slaTypeName";
  @SerializedName(SERIALIZED_NAME_SLA_TYPE_NAME)
  private String slaTypeName;

  public static final String SERIALIZED_NAME_TIME_TO_DOCK_PLUS_DOCK_TIME = "timeToDockPlusDockTime";
  @SerializedName(SERIALIZED_NAME_TIME_TO_DOCK_PLUS_DOCK_TIME)
  private String timeToDockPlusDockTime;

  public static final String SERIALIZED_NAME_TOTAL_TIME = "totalTime";
  @SerializedName(SERIALIZED_NAME_TOTAL_TIME)
  private String totalTime;

  public static final String SERIALIZED_NAME_TRANSIT_TIME = "transitTime";
  @SerializedName(SERIALIZED_NAME_TRANSIT_TIME)
  private String transitTime;

  public static final String SERIALIZED_NAME_WARE_HOUSE_ID = "wareHouseId";
  @SerializedName(SERIALIZED_NAME_WARE_HOUSE_ID)
  private String wareHouseId;

  public CalculateSLA200ResponseInnerInner() {
  }

  public CalculateSLA200ResponseInnerInner aditionalTimeBlockedDays(String aditionalTimeBlockedDays) {
    this.aditionalTimeBlockedDays = aditionalTimeBlockedDays;
    return this;
  }

  /**
   * Get aditionalTimeBlockedDays
   * @return aditionalTimeBlockedDays
   */
  @javax.annotation.Nonnull
  public String getAditionalTimeBlockedDays() {
    return aditionalTimeBlockedDays;
  }

  public void setAditionalTimeBlockedDays(String aditionalTimeBlockedDays) {
    this.aditionalTimeBlockedDays = aditionalTimeBlockedDays;
  }


  public CalculateSLA200ResponseInnerInner availabilityQuantity(Integer availabilityQuantity) {
    this.availabilityQuantity = availabilityQuantity;
    return this;
  }

  /**
   * Get availabilityQuantity
   * @return availabilityQuantity
   */
  @javax.annotation.Nonnull
  public Integer getAvailabilityQuantity() {
    return availabilityQuantity;
  }

  public void setAvailabilityQuantity(Integer availabilityQuantity) {
    this.availabilityQuantity = availabilityQuantity;
  }


  public CalculateSLA200ResponseInnerInner carrierSchedule(List<String> carrierSchedule) {
    this.carrierSchedule = carrierSchedule;
    return this;
  }

  public CalculateSLA200ResponseInnerInner addCarrierScheduleItem(String carrierScheduleItem) {
    if (this.carrierSchedule == null) {
      this.carrierSchedule = new ArrayList<>();
    }
    this.carrierSchedule.add(carrierScheduleItem);
    return this;
  }

  /**
   * 
   * @return carrierSchedule
   */
  @javax.annotation.Nonnull
  public List<String> getCarrierSchedule() {
    return carrierSchedule;
  }

  public void setCarrierSchedule(List<String> carrierSchedule) {
    this.carrierSchedule = carrierSchedule;
  }


  public CalculateSLA200ResponseInnerInner coordinates(String coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  /**
   * Get coordinates
   * @return coordinates
   */
  @javax.annotation.Nullable
  public String getCoordinates() {
    return coordinates;
  }

  public void setCoordinates(String coordinates) {
    this.coordinates = coordinates;
  }


  public CalculateSLA200ResponseInnerInner deliveryOnWeekends(Boolean deliveryOnWeekends) {
    this.deliveryOnWeekends = deliveryOnWeekends;
    return this;
  }

  /**
   * Get deliveryOnWeekends
   * @return deliveryOnWeekends
   */
  @javax.annotation.Nonnull
  public Boolean getDeliveryOnWeekends() {
    return deliveryOnWeekends;
  }

  public void setDeliveryOnWeekends(Boolean deliveryOnWeekends) {
    this.deliveryOnWeekends = deliveryOnWeekends;
  }


  public CalculateSLA200ResponseInnerInner deliveryWindows(List<DeliveryWindow1> deliveryWindows) {
    this.deliveryWindows = deliveryWindows;
    return this;
  }

  public CalculateSLA200ResponseInnerInner addDeliveryWindowsItem(DeliveryWindow1 deliveryWindowsItem) {
    if (this.deliveryWindows == null) {
      this.deliveryWindows = new ArrayList<>();
    }
    this.deliveryWindows.add(deliveryWindowsItem);
    return this;
  }

  /**
   * 
   * @return deliveryWindows
   */
  @javax.annotation.Nonnull
  public List<DeliveryWindow1> getDeliveryWindows() {
    return deliveryWindows;
  }

  public void setDeliveryWindows(List<DeliveryWindow1> deliveryWindows) {
    this.deliveryWindows = deliveryWindows;
  }


  public CalculateSLA200ResponseInnerInner dockId(String dockId) {
    this.dockId = dockId;
    return this;
  }

  /**
   * Get dockId
   * @return dockId
   */
  @javax.annotation.Nonnull
  public String getDockId() {
    return dockId;
  }

  public void setDockId(String dockId) {
    this.dockId = dockId;
  }


  public CalculateSLA200ResponseInnerInner dockTime(String dockTime) {
    this.dockTime = dockTime;
    return this;
  }

  /**
   * Get dockTime
   * @return dockTime
   */
  @javax.annotation.Nonnull
  public String getDockTime() {
    return dockTime;
  }

  public void setDockTime(String dockTime) {
    this.dockTime = dockTime;
  }


  public CalculateSLA200ResponseInnerInner freightTableId(String freightTableId) {
    this.freightTableId = freightTableId;
    return this;
  }

  /**
   * Get freightTableId
   * @return freightTableId
   */
  @javax.annotation.Nonnull
  public String getFreightTableId() {
    return freightTableId;
  }

  public void setFreightTableId(String freightTableId) {
    this.freightTableId = freightTableId;
  }


  public CalculateSLA200ResponseInnerInner freightTableName(String freightTableName) {
    this.freightTableName = freightTableName;
    return this;
  }

  /**
   * Get freightTableName
   * @return freightTableName
   */
  @javax.annotation.Nonnull
  public String getFreightTableName() {
    return freightTableName;
  }

  public void setFreightTableName(String freightTableName) {
    this.freightTableName = freightTableName;
  }


  public CalculateSLA200ResponseInnerInner itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Get itemId
   * @return itemId
   */
  @javax.annotation.Nonnull
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public CalculateSLA200ResponseInnerInner listPrice(BigDecimal listPrice) {
    this.listPrice = listPrice;
    return this;
  }

  /**
   * Get listPrice
   * @return listPrice
   */
  @javax.annotation.Nonnull
  public BigDecimal getListPrice() {
    return listPrice;
  }

  public void setListPrice(BigDecimal listPrice) {
    this.listPrice = listPrice;
  }


  public CalculateSLA200ResponseInnerInner location(Location11 location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nonnull
  public Location11 getLocation() {
    return location;
  }

  public void setLocation(Location11 location) {
    this.location = location;
  }


  public CalculateSLA200ResponseInnerInner pickupStoreInfo(String pickupStoreInfo) {
    this.pickupStoreInfo = pickupStoreInfo;
    return this;
  }

  /**
   * Get pickupStoreInfo
   * @return pickupStoreInfo
   */
  @javax.annotation.Nullable
  public String getPickupStoreInfo() {
    return pickupStoreInfo;
  }

  public void setPickupStoreInfo(String pickupStoreInfo) {
    this.pickupStoreInfo = pickupStoreInfo;
  }


  public CalculateSLA200ResponseInnerInner quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nonnull
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public CalculateSLA200ResponseInnerInner restrictedFreight(String restrictedFreight) {
    this.restrictedFreight = restrictedFreight;
    return this;
  }

  /**
   * Get restrictedFreight
   * @return restrictedFreight
   */
  @javax.annotation.Nullable
  public String getRestrictedFreight() {
    return restrictedFreight;
  }

  public void setRestrictedFreight(String restrictedFreight) {
    this.restrictedFreight = restrictedFreight;
  }


  public CalculateSLA200ResponseInnerInner salesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
    return this;
  }

  /**
   * Get salesChannel
   * @return salesChannel
   */
  @javax.annotation.Nonnull
  public String getSalesChannel() {
    return salesChannel;
  }

  public void setSalesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
  }


  public CalculateSLA200ResponseInnerInner slaType(String slaType) {
    this.slaType = slaType;
    return this;
  }

  /**
   * Get slaType
   * @return slaType
   */
  @javax.annotation.Nonnull
  public String getSlaType() {
    return slaType;
  }

  public void setSlaType(String slaType) {
    this.slaType = slaType;
  }


  public CalculateSLA200ResponseInnerInner slaTypeName(String slaTypeName) {
    this.slaTypeName = slaTypeName;
    return this;
  }

  /**
   * Get slaTypeName
   * @return slaTypeName
   */
  @javax.annotation.Nonnull
  public String getSlaTypeName() {
    return slaTypeName;
  }

  public void setSlaTypeName(String slaTypeName) {
    this.slaTypeName = slaTypeName;
  }


  public CalculateSLA200ResponseInnerInner timeToDockPlusDockTime(String timeToDockPlusDockTime) {
    this.timeToDockPlusDockTime = timeToDockPlusDockTime;
    return this;
  }

  /**
   * Get timeToDockPlusDockTime
   * @return timeToDockPlusDockTime
   */
  @javax.annotation.Nonnull
  public String getTimeToDockPlusDockTime() {
    return timeToDockPlusDockTime;
  }

  public void setTimeToDockPlusDockTime(String timeToDockPlusDockTime) {
    this.timeToDockPlusDockTime = timeToDockPlusDockTime;
  }


  public CalculateSLA200ResponseInnerInner totalTime(String totalTime) {
    this.totalTime = totalTime;
    return this;
  }

  /**
   * Get totalTime
   * @return totalTime
   */
  @javax.annotation.Nonnull
  public String getTotalTime() {
    return totalTime;
  }

  public void setTotalTime(String totalTime) {
    this.totalTime = totalTime;
  }


  public CalculateSLA200ResponseInnerInner transitTime(String transitTime) {
    this.transitTime = transitTime;
    return this;
  }

  /**
   * Get transitTime
   * @return transitTime
   */
  @javax.annotation.Nonnull
  public String getTransitTime() {
    return transitTime;
  }

  public void setTransitTime(String transitTime) {
    this.transitTime = transitTime;
  }


  public CalculateSLA200ResponseInnerInner wareHouseId(String wareHouseId) {
    this.wareHouseId = wareHouseId;
    return this;
  }

  /**
   * Get wareHouseId
   * @return wareHouseId
   */
  @javax.annotation.Nonnull
  public String getWareHouseId() {
    return wareHouseId;
  }

  public void setWareHouseId(String wareHouseId) {
    this.wareHouseId = wareHouseId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculateSLA200ResponseInnerInner calculateSLA200ResponseInnerInner = (CalculateSLA200ResponseInnerInner) o;
    return Objects.equals(this.aditionalTimeBlockedDays, calculateSLA200ResponseInnerInner.aditionalTimeBlockedDays) &&
        Objects.equals(this.availabilityQuantity, calculateSLA200ResponseInnerInner.availabilityQuantity) &&
        Objects.equals(this.carrierSchedule, calculateSLA200ResponseInnerInner.carrierSchedule) &&
        Objects.equals(this.coordinates, calculateSLA200ResponseInnerInner.coordinates) &&
        Objects.equals(this.deliveryOnWeekends, calculateSLA200ResponseInnerInner.deliveryOnWeekends) &&
        Objects.equals(this.deliveryWindows, calculateSLA200ResponseInnerInner.deliveryWindows) &&
        Objects.equals(this.dockId, calculateSLA200ResponseInnerInner.dockId) &&
        Objects.equals(this.dockTime, calculateSLA200ResponseInnerInner.dockTime) &&
        Objects.equals(this.freightTableId, calculateSLA200ResponseInnerInner.freightTableId) &&
        Objects.equals(this.freightTableName, calculateSLA200ResponseInnerInner.freightTableName) &&
        Objects.equals(this.itemId, calculateSLA200ResponseInnerInner.itemId) &&
        Objects.equals(this.listPrice, calculateSLA200ResponseInnerInner.listPrice) &&
        Objects.equals(this.location, calculateSLA200ResponseInnerInner.location) &&
        Objects.equals(this.pickupStoreInfo, calculateSLA200ResponseInnerInner.pickupStoreInfo) &&
        Objects.equals(this.quantity, calculateSLA200ResponseInnerInner.quantity) &&
        Objects.equals(this.restrictedFreight, calculateSLA200ResponseInnerInner.restrictedFreight) &&
        Objects.equals(this.salesChannel, calculateSLA200ResponseInnerInner.salesChannel) &&
        Objects.equals(this.slaType, calculateSLA200ResponseInnerInner.slaType) &&
        Objects.equals(this.slaTypeName, calculateSLA200ResponseInnerInner.slaTypeName) &&
        Objects.equals(this.timeToDockPlusDockTime, calculateSLA200ResponseInnerInner.timeToDockPlusDockTime) &&
        Objects.equals(this.totalTime, calculateSLA200ResponseInnerInner.totalTime) &&
        Objects.equals(this.transitTime, calculateSLA200ResponseInnerInner.transitTime) &&
        Objects.equals(this.wareHouseId, calculateSLA200ResponseInnerInner.wareHouseId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aditionalTimeBlockedDays, availabilityQuantity, carrierSchedule, coordinates, deliveryOnWeekends, deliveryWindows, dockId, dockTime, freightTableId, freightTableName, itemId, listPrice, location, pickupStoreInfo, quantity, restrictedFreight, salesChannel, slaType, slaTypeName, timeToDockPlusDockTime, totalTime, transitTime, wareHouseId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculateSLA200ResponseInnerInner {\n");
    sb.append("    aditionalTimeBlockedDays: ").append(toIndentedString(aditionalTimeBlockedDays)).append("\n");
    sb.append("    availabilityQuantity: ").append(toIndentedString(availabilityQuantity)).append("\n");
    sb.append("    carrierSchedule: ").append(toIndentedString(carrierSchedule)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("    deliveryOnWeekends: ").append(toIndentedString(deliveryOnWeekends)).append("\n");
    sb.append("    deliveryWindows: ").append(toIndentedString(deliveryWindows)).append("\n");
    sb.append("    dockId: ").append(toIndentedString(dockId)).append("\n");
    sb.append("    dockTime: ").append(toIndentedString(dockTime)).append("\n");
    sb.append("    freightTableId: ").append(toIndentedString(freightTableId)).append("\n");
    sb.append("    freightTableName: ").append(toIndentedString(freightTableName)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    listPrice: ").append(toIndentedString(listPrice)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    pickupStoreInfo: ").append(toIndentedString(pickupStoreInfo)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    restrictedFreight: ").append(toIndentedString(restrictedFreight)).append("\n");
    sb.append("    salesChannel: ").append(toIndentedString(salesChannel)).append("\n");
    sb.append("    slaType: ").append(toIndentedString(slaType)).append("\n");
    sb.append("    slaTypeName: ").append(toIndentedString(slaTypeName)).append("\n");
    sb.append("    timeToDockPlusDockTime: ").append(toIndentedString(timeToDockPlusDockTime)).append("\n");
    sb.append("    totalTime: ").append(toIndentedString(totalTime)).append("\n");
    sb.append("    transitTime: ").append(toIndentedString(transitTime)).append("\n");
    sb.append("    wareHouseId: ").append(toIndentedString(wareHouseId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aditionalTimeBlockedDays");
    openapiFields.add("availabilityQuantity");
    openapiFields.add("carrierSchedule");
    openapiFields.add("coordinates");
    openapiFields.add("deliveryOnWeekends");
    openapiFields.add("deliveryWindows");
    openapiFields.add("dockId");
    openapiFields.add("dockTime");
    openapiFields.add("freightTableId");
    openapiFields.add("freightTableName");
    openapiFields.add("itemId");
    openapiFields.add("listPrice");
    openapiFields.add("location");
    openapiFields.add("pickupStoreInfo");
    openapiFields.add("quantity");
    openapiFields.add("restrictedFreight");
    openapiFields.add("salesChannel");
    openapiFields.add("slaType");
    openapiFields.add("slaTypeName");
    openapiFields.add("timeToDockPlusDockTime");
    openapiFields.add("totalTime");
    openapiFields.add("transitTime");
    openapiFields.add("wareHouseId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aditionalTimeBlockedDays");
    openapiRequiredFields.add("availabilityQuantity");
    openapiRequiredFields.add("carrierSchedule");
    openapiRequiredFields.add("coordinates");
    openapiRequiredFields.add("deliveryOnWeekends");
    openapiRequiredFields.add("deliveryWindows");
    openapiRequiredFields.add("dockId");
    openapiRequiredFields.add("dockTime");
    openapiRequiredFields.add("freightTableId");
    openapiRequiredFields.add("freightTableName");
    openapiRequiredFields.add("itemId");
    openapiRequiredFields.add("listPrice");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("pickupStoreInfo");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("restrictedFreight");
    openapiRequiredFields.add("salesChannel");
    openapiRequiredFields.add("slaType");
    openapiRequiredFields.add("slaTypeName");
    openapiRequiredFields.add("timeToDockPlusDockTime");
    openapiRequiredFields.add("totalTime");
    openapiRequiredFields.add("transitTime");
    openapiRequiredFields.add("wareHouseId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CalculateSLA200ResponseInnerInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CalculateSLA200ResponseInnerInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CalculateSLA200ResponseInnerInner is not found in the empty JSON string", CalculateSLA200ResponseInnerInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CalculateSLA200ResponseInnerInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CalculateSLA200ResponseInnerInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CalculateSLA200ResponseInnerInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("aditionalTimeBlockedDays").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aditionalTimeBlockedDays` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aditionalTimeBlockedDays").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("carrierSchedule") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("carrierSchedule").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierSchedule` to be an array in the JSON string but got `%s`", jsonObj.get("carrierSchedule").toString()));
      }
      if ((jsonObj.get("coordinates") != null && !jsonObj.get("coordinates").isJsonNull()) && !jsonObj.get("coordinates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coordinates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coordinates").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("deliveryWindows").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryWindows` to be an array in the JSON string but got `%s`", jsonObj.get("deliveryWindows").toString()));
      }

      JsonArray jsonArraydeliveryWindows = jsonObj.getAsJsonArray("deliveryWindows");
      // validate the required field `deliveryWindows` (array)
      for (int i = 0; i < jsonArraydeliveryWindows.size(); i++) {
        DeliveryWindow1.validateJsonElement(jsonArraydeliveryWindows.get(i));
      };
      if (!jsonObj.get("dockId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockId").toString()));
      }
      if (!jsonObj.get("dockTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockTime").toString()));
      }
      if (!jsonObj.get("freightTableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freightTableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freightTableId").toString()));
      }
      if (!jsonObj.get("freightTableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freightTableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freightTableName").toString()));
      }
      if (!jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      // validate the required field `location`
      Location11.validateJsonElement(jsonObj.get("location"));
      if ((jsonObj.get("pickupStoreInfo") != null && !jsonObj.get("pickupStoreInfo").isJsonNull()) && !jsonObj.get("pickupStoreInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickupStoreInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickupStoreInfo").toString()));
      }
      if ((jsonObj.get("restrictedFreight") != null && !jsonObj.get("restrictedFreight").isJsonNull()) && !jsonObj.get("restrictedFreight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictedFreight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restrictedFreight").toString()));
      }
      if (!jsonObj.get("salesChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesChannel").toString()));
      }
      if (!jsonObj.get("slaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slaType").toString()));
      }
      if (!jsonObj.get("slaTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slaTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slaTypeName").toString()));
      }
      if (!jsonObj.get("timeToDockPlusDockTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeToDockPlusDockTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeToDockPlusDockTime").toString()));
      }
      if (!jsonObj.get("totalTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalTime").toString()));
      }
      if (!jsonObj.get("transitTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transitTime").toString()));
      }
      if (!jsonObj.get("wareHouseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wareHouseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wareHouseId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CalculateSLA200ResponseInnerInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CalculateSLA200ResponseInnerInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CalculateSLA200ResponseInnerInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CalculateSLA200ResponseInnerInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CalculateSLA200ResponseInnerInner>() {
           @Override
           public void write(JsonWriter out, CalculateSLA200ResponseInnerInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CalculateSLA200ResponseInnerInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CalculateSLA200ResponseInnerInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CalculateSLA200ResponseInnerInner
   * @throws IOException if the JSON string is invalid with respect to CalculateSLA200ResponseInnerInner
   */
  public static CalculateSLA200ResponseInnerInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CalculateSLA200ResponseInnerInner.class);
  }

  /**
   * Convert an instance of CalculateSLA200ResponseInnerInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

