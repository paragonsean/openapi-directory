/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner {
  public static final String SERIALIZED_NAME_CAPACITY_TYPE = "capacityType";
  @SerializedName(SERIALIZED_NAME_CAPACITY_TYPE)
  private String capacityType;

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private BigDecimal maxValue;

  public DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner() {
  }

  public DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner capacityType(String capacityType) {
    this.capacityType = capacityType;
    return this;
  }

  /**
   * Defines how the delivery capacity is measured for this reservation window, by maximum number of orders (&#x60;\&quot;ORDERS_QUANTITY\&quot;&#x60;) or SKUs (&#x60;\&quot;SKUS_QUANTITY\&quot;&#x60;).
   * @return capacityType
   */
  @javax.annotation.Nonnull
  public String getCapacityType() {
    return capacityType;
  }

  public void setCapacityType(String capacityType) {
    this.capacityType = capacityType;
  }


  public DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner maxValue(BigDecimal maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * Maximum number of orders or SKUs that the store is capable of fulfilling.
   * @return maxValue
   */
  @javax.annotation.Nonnull
  public BigDecimal getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(BigDecimal maxValue) {
    this.maxValue = maxValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner dayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner = (DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner) o;
    return Objects.equals(this.capacityType, dayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner.capacityType) &&
        Objects.equals(this.maxValue, dayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner.maxValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacityType, maxValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner {\n");
    sb.append("    capacityType: ").append(toIndentedString(capacityType)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capacityType");
    openapiFields.add("maxValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("capacityType");
    openapiRequiredFields.add("maxValue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner is not found in the empty JSON string", DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("capacityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `capacityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("capacityType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner>() {
           @Override
           public void write(JsonWriter out, DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner
   * @throws IOException if the JSON string is invalid with respect to DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner
   */
  public static DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner.class);
  }

  /**
   * Convert an instance of DayOfWeekForDeliveryInnerDeliveryRangesInnerDeliveryCapacityInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

