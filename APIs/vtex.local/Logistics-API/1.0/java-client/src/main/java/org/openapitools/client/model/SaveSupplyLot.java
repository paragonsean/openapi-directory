/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SaveSupplyLot
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SaveSupplyLot {
  public static final String SERIALIZED_NAME_DATE_OF_SUPPLY_UTC = "dateOfSupplyUtc";
  @SerializedName(SERIALIZED_NAME_DATE_OF_SUPPLY_UTC)
  private String dateOfSupplyUtc;

  public static final String SERIALIZED_NAME_KEEP_SELLING_AFTER_EXPIRATION = "keepSellingAfterExpiration";
  @SerializedName(SERIALIZED_NAME_KEEP_SELLING_AFTER_EXPIRATION)
  private Boolean keepSellingAfterExpiration;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public SaveSupplyLot() {
  }

  public SaveSupplyLot dateOfSupplyUtc(String dateOfSupplyUtc) {
    this.dateOfSupplyUtc = dateOfSupplyUtc;
    return this;
  }

  /**
   * Get dateOfSupplyUtc
   * @return dateOfSupplyUtc
   */
  @javax.annotation.Nonnull
  public String getDateOfSupplyUtc() {
    return dateOfSupplyUtc;
  }

  public void setDateOfSupplyUtc(String dateOfSupplyUtc) {
    this.dateOfSupplyUtc = dateOfSupplyUtc;
  }


  public SaveSupplyLot keepSellingAfterExpiration(Boolean keepSellingAfterExpiration) {
    this.keepSellingAfterExpiration = keepSellingAfterExpiration;
    return this;
  }

  /**
   * Get keepSellingAfterExpiration
   * @return keepSellingAfterExpiration
   */
  @javax.annotation.Nonnull
  public Boolean getKeepSellingAfterExpiration() {
    return keepSellingAfterExpiration;
  }

  public void setKeepSellingAfterExpiration(Boolean keepSellingAfterExpiration) {
    this.keepSellingAfterExpiration = keepSellingAfterExpiration;
  }


  public SaveSupplyLot quantity(BigDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nonnull
  public BigDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(BigDecimal quantity) {
    this.quantity = quantity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaveSupplyLot saveSupplyLot = (SaveSupplyLot) o;
    return Objects.equals(this.dateOfSupplyUtc, saveSupplyLot.dateOfSupplyUtc) &&
        Objects.equals(this.keepSellingAfterExpiration, saveSupplyLot.keepSellingAfterExpiration) &&
        Objects.equals(this.quantity, saveSupplyLot.quantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateOfSupplyUtc, keepSellingAfterExpiration, quantity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaveSupplyLot {\n");
    sb.append("    dateOfSupplyUtc: ").append(toIndentedString(dateOfSupplyUtc)).append("\n");
    sb.append("    keepSellingAfterExpiration: ").append(toIndentedString(keepSellingAfterExpiration)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateOfSupplyUtc");
    openapiFields.add("keepSellingAfterExpiration");
    openapiFields.add("quantity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dateOfSupplyUtc");
    openapiRequiredFields.add("keepSellingAfterExpiration");
    openapiRequiredFields.add("quantity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SaveSupplyLot
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SaveSupplyLot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaveSupplyLot is not found in the empty JSON string", SaveSupplyLot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SaveSupplyLot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SaveSupplyLot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SaveSupplyLot.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dateOfSupplyUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfSupplyUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfSupplyUtc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaveSupplyLot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaveSupplyLot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaveSupplyLot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaveSupplyLot.class));

       return (TypeAdapter<T>) new TypeAdapter<SaveSupplyLot>() {
           @Override
           public void write(JsonWriter out, SaveSupplyLot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SaveSupplyLot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SaveSupplyLot given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SaveSupplyLot
   * @throws IOException if the JSON string is invalid with respect to SaveSupplyLot
   */
  public static SaveSupplyLot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaveSupplyLot.class);
  }

  /**
   * Convert an instance of SaveSupplyLot to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

