/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateUpdatePolygonRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PolygonsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PolygonsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PolygonsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createUpdatePolygon
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param createUpdatePolygonRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUpdatePolygonCall(String contentType, String accept, CreateUpdatePolygonRequest createUpdatePolygonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdatePolygonRequest;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/configuration/geoshape";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json; charset=utf-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUpdatePolygonValidateBeforeCall(String contentType, String accept, CreateUpdatePolygonRequest createUpdatePolygonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createUpdatePolygon(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createUpdatePolygon(Async)");
        }

        // verify the required parameter 'createUpdatePolygonRequest' is set
        if (createUpdatePolygonRequest == null) {
            throw new ApiException("Missing the required parameter 'createUpdatePolygonRequest' when calling createUpdatePolygon(Async)");
        }

        return createUpdatePolygonCall(contentType, accept, createUpdatePolygonRequest, _callback);

    }

    /**
     * Create/update polygon
     * Creates or updates your store&#39;s polygons by geoshape coordinates and polygon name.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param createUpdatePolygonRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void createUpdatePolygon(String contentType, String accept, CreateUpdatePolygonRequest createUpdatePolygonRequest) throws ApiException {
        createUpdatePolygonWithHttpInfo(contentType, accept, createUpdatePolygonRequest);
    }

    /**
     * Create/update polygon
     * Creates or updates your store&#39;s polygons by geoshape coordinates and polygon name.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param createUpdatePolygonRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createUpdatePolygonWithHttpInfo(String contentType, String accept, CreateUpdatePolygonRequest createUpdatePolygonRequest) throws ApiException {
        okhttp3.Call localVarCall = createUpdatePolygonValidateBeforeCall(contentType, accept, createUpdatePolygonRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create/update polygon (asynchronously)
     * Creates or updates your store&#39;s polygons by geoshape coordinates and polygon name.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param createUpdatePolygonRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUpdatePolygonAsync(String contentType, String accept, CreateUpdatePolygonRequest createUpdatePolygonRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUpdatePolygonValidateBeforeCall(contentType, accept, createUpdatePolygonRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePolygon
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param polygonName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePolygonCall(String contentType, String accept, String polygonName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/configuration/geoshape/{polygonName}"
            .replace("{" + "polygonName" + "}", localVarApiClient.escapeString(polygonName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolygonValidateBeforeCall(String contentType, String accept, String polygonName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deletePolygon(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deletePolygon(Async)");
        }

        // verify the required parameter 'polygonName' is set
        if (polygonName == null) {
            throw new ApiException("Missing the required parameter 'polygonName' when calling deletePolygon(Async)");
        }

        return deletePolygonCall(contentType, accept, polygonName, _callback);

    }

    /**
     * Delete polygon
     * Deletes polygon set up in your store, by polygon name.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param polygonName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deletePolygon(String contentType, String accept, String polygonName) throws ApiException {
        deletePolygonWithHttpInfo(contentType, accept, polygonName);
    }

    /**
     * Delete polygon
     * Deletes polygon set up in your store, by polygon name.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param polygonName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePolygonWithHttpInfo(String contentType, String accept, String polygonName) throws ApiException {
        okhttp3.Call localVarCall = deletePolygonValidateBeforeCall(contentType, accept, polygonName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete polygon (asynchronously)
     * Deletes polygon set up in your store, by polygon name.
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param polygonName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePolygonAsync(String contentType, String accept, String polygonName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePolygonValidateBeforeCall(contentType, accept, polygonName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pagedPolygons
     * @param page  (required)
     * @param perPage  (required)
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagedPolygonsCall(String page, String perPage, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/configuration/geoshape";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perPage", perPage));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagedPolygonsValidateBeforeCall(String page, String perPage, String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling pagedPolygons(Async)");
        }

        // verify the required parameter 'perPage' is set
        if (perPage == null) {
            throw new ApiException("Missing the required parameter 'perPage' when calling pagedPolygons(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling pagedPolygons(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling pagedPolygons(Async)");
        }

        return pagedPolygonsCall(page, perPage, contentType, accept, _callback);

    }

    /**
     * List paged polygons
     * Lists stored polygons.
     * @param page  (required)
     * @param perPage  (required)
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void pagedPolygons(String page, String perPage, String contentType, String accept) throws ApiException {
        pagedPolygonsWithHttpInfo(page, perPage, contentType, accept);
    }

    /**
     * List paged polygons
     * Lists stored polygons.
     * @param page  (required)
     * @param perPage  (required)
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pagedPolygonsWithHttpInfo(String page, String perPage, String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = pagedPolygonsValidateBeforeCall(page, perPage, contentType, accept, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List paged polygons (asynchronously)
     * Lists stored polygons.
     * @param page  (required)
     * @param perPage  (required)
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagedPolygonsAsync(String page, String perPage, String contentType, String accept, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagedPolygonsValidateBeforeCall(page, perPage, contentType, accept, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for polygonbyId
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param polygonName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call polygonbyIdCall(String contentType, String accept, String polygonName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/logistics/pvt/configuration/geoshape/{polygonName}"
            .replace("{" + "polygonName" + "}", localVarApiClient.escapeString(polygonName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call polygonbyIdValidateBeforeCall(String contentType, String accept, String polygonName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling polygonbyId(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling polygonbyId(Async)");
        }

        // verify the required parameter 'polygonName' is set
        if (polygonName == null) {
            throw new ApiException("Missing the required parameter 'polygonName' when calling polygonbyId(Async)");
        }

        return polygonbyIdCall(contentType, accept, polygonName, _callback);

    }

    /**
     * List polygon by ID
     * Lists your store&#39;s polygons by searching through polygon name
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param polygonName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void polygonbyId(String contentType, String accept, String polygonName) throws ApiException {
        polygonbyIdWithHttpInfo(contentType, accept, polygonName);
    }

    /**
     * List polygon by ID
     * Lists your store&#39;s polygons by searching through polygon name
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param polygonName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> polygonbyIdWithHttpInfo(String contentType, String accept, String polygonName) throws ApiException {
        okhttp3.Call localVarCall = polygonbyIdValidateBeforeCall(contentType, accept, polygonName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List polygon by ID (asynchronously)
     * Lists your store&#39;s polygons by searching through polygon name
     * @param contentType Type of the content being sent (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand (required)
     * @param polygonName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call polygonbyIdAsync(String contentType, String accept, String polygonName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = polygonbyIdValidateBeforeCall(contentType, accept, polygonName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
