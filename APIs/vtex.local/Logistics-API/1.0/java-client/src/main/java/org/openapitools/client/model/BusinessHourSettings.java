/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CarrierBusinessHoursInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Business hour configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BusinessHourSettings {
  public static final String SERIALIZED_NAME_CARRIER_BUSINESS_HOURS = "carrierBusinessHours";
  @SerializedName(SERIALIZED_NAME_CARRIER_BUSINESS_HOURS)
  private List<CarrierBusinessHoursInner> carrierBusinessHours = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_OPEN_OUTSIDE_BUSINESS_HOURS = "isOpenOutsideBusinessHours";
  @SerializedName(SERIALIZED_NAME_IS_OPEN_OUTSIDE_BUSINESS_HOURS)
  private Boolean isOpenOutsideBusinessHours;

  public BusinessHourSettings() {
  }

  public BusinessHourSettings carrierBusinessHours(List<CarrierBusinessHoursInner> carrierBusinessHours) {
    this.carrierBusinessHours = carrierBusinessHours;
    return this;
  }

  public BusinessHourSettings addCarrierBusinessHoursItem(CarrierBusinessHoursInner carrierBusinessHoursItem) {
    if (this.carrierBusinessHours == null) {
      this.carrierBusinessHours = new ArrayList<>();
    }
    this.carrierBusinessHours.add(carrierBusinessHoursItem);
    return this;
  }

  /**
   * Array containing objects with business hour configurations.
   * @return carrierBusinessHours
   */
  @javax.annotation.Nonnull
  public List<CarrierBusinessHoursInner> getCarrierBusinessHours() {
    return carrierBusinessHours;
  }

  public void setCarrierBusinessHours(List<CarrierBusinessHoursInner> carrierBusinessHours) {
    this.carrierBusinessHours = carrierBusinessHours;
  }


  public BusinessHourSettings isOpenOutsideBusinessHours(Boolean isOpenOutsideBusinessHours) {
    this.isOpenOutsideBusinessHours = isOpenOutsideBusinessHours;
    return this;
  }

  /**
   * Select whether the shipping policy allows deliveries outside business hours.
   * @return isOpenOutsideBusinessHours
   */
  @javax.annotation.Nonnull
  public Boolean getIsOpenOutsideBusinessHours() {
    return isOpenOutsideBusinessHours;
  }

  public void setIsOpenOutsideBusinessHours(Boolean isOpenOutsideBusinessHours) {
    this.isOpenOutsideBusinessHours = isOpenOutsideBusinessHours;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessHourSettings businessHourSettings = (BusinessHourSettings) o;
    return Objects.equals(this.carrierBusinessHours, businessHourSettings.carrierBusinessHours) &&
        Objects.equals(this.isOpenOutsideBusinessHours, businessHourSettings.isOpenOutsideBusinessHours);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carrierBusinessHours, isOpenOutsideBusinessHours);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessHourSettings {\n");
    sb.append("    carrierBusinessHours: ").append(toIndentedString(carrierBusinessHours)).append("\n");
    sb.append("    isOpenOutsideBusinessHours: ").append(toIndentedString(isOpenOutsideBusinessHours)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("carrierBusinessHours");
    openapiFields.add("isOpenOutsideBusinessHours");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("carrierBusinessHours");
    openapiRequiredFields.add("isOpenOutsideBusinessHours");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BusinessHourSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BusinessHourSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessHourSettings is not found in the empty JSON string", BusinessHourSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BusinessHourSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BusinessHourSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BusinessHourSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("carrierBusinessHours").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrierBusinessHours` to be an array in the JSON string but got `%s`", jsonObj.get("carrierBusinessHours").toString()));
      }

      JsonArray jsonArraycarrierBusinessHours = jsonObj.getAsJsonArray("carrierBusinessHours");
      // validate the required field `carrierBusinessHours` (array)
      for (int i = 0; i < jsonArraycarrierBusinessHours.size(); i++) {
        CarrierBusinessHoursInner.validateJsonElement(jsonArraycarrierBusinessHours.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessHourSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessHourSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessHourSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessHourSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessHourSettings>() {
           @Override
           public void write(JsonWriter out, BusinessHourSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessHourSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BusinessHourSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BusinessHourSettings
   * @throws IOException if the JSON string is invalid with respect to BusinessHourSettings
   */
  public static BusinessHourSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessHourSettings.class);
  }

  /**
   * Convert an instance of BusinessHourSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

