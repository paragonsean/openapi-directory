/*
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Inventoryperdock200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:20.128391-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Inventoryperdock200ResponseInner {
  public static final String SERIALIZED_NAME_AVAILABLE_QUANTITY = "availableQuantity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_QUANTITY)
  private Integer availableQuantity;

  public static final String SERIALIZED_NAME_DATE_OF_SUPPLY_UTC = "dateOfSupplyUtc";
  @SerializedName(SERIALIZED_NAME_DATE_OF_SUPPLY_UTC)
  private String dateOfSupplyUtc;

  public static final String SERIALIZED_NAME_DELIVERY_CHANNEL = "deliveryChannel";
  @SerializedName(SERIALIZED_NAME_DELIVERY_CHANNEL)
  private List<String> deliveryChannel = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOCK_ID = "dockId";
  @SerializedName(SERIALIZED_NAME_DOCK_ID)
  private String dockId;

  public static final String SERIALIZED_NAME_IS_UNLIMITED = "isUnlimited";
  @SerializedName(SERIALIZED_NAME_IS_UNLIMITED)
  private Boolean isUnlimited;

  public static final String SERIALIZED_NAME_KEEP_SELLING_AFTER_EXPIRATION = "keepSellingAfterExpiration";
  @SerializedName(SERIALIZED_NAME_KEEP_SELLING_AFTER_EXPIRATION)
  private Boolean keepSellingAfterExpiration;

  public static final String SERIALIZED_NAME_RESERVED_QUANTITY = "reservedQuantity";
  @SerializedName(SERIALIZED_NAME_RESERVED_QUANTITY)
  private Integer reservedQuantity;

  public static final String SERIALIZED_NAME_SALES_CHANNEL = "salesChannel";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNEL)
  private List<String> salesChannel = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKU_ID = "skuId";
  @SerializedName(SERIALIZED_NAME_SKU_ID)
  private String skuId;

  public static final String SERIALIZED_NAME_TIME_TO_REFILL = "timeToRefill";
  @SerializedName(SERIALIZED_NAME_TIME_TO_REFILL)
  private String timeToRefill;

  public static final String SERIALIZED_NAME_TOTAL_QUANTITY = "totalQuantity";
  @SerializedName(SERIALIZED_NAME_TOTAL_QUANTITY)
  private Integer totalQuantity;

  public static final String SERIALIZED_NAME_TRANSFER = "transfer";
  @SerializedName(SERIALIZED_NAME_TRANSFER)
  private String transfer;

  public static final String SERIALIZED_NAME_WAREHOUSE_ID = "warehouseId";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_ID)
  private String warehouseId;

  public Inventoryperdock200ResponseInner() {
  }

  public Inventoryperdock200ResponseInner availableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
    return this;
  }

  /**
   * Amount of items available for sale. Difference between total quantity and reserved quantity.
   * @return availableQuantity
   */
  @javax.annotation.Nullable
  public Integer getAvailableQuantity() {
    return availableQuantity;
  }

  public void setAvailableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
  }


  public Inventoryperdock200ResponseInner dateOfSupplyUtc(String dateOfSupplyUtc) {
    this.dateOfSupplyUtc = dateOfSupplyUtc;
    return this;
  }

  /**
   * Date of supply lot in UTC.
   * @return dateOfSupplyUtc
   */
  @javax.annotation.Nullable
  public String getDateOfSupplyUtc() {
    return dateOfSupplyUtc;
  }

  public void setDateOfSupplyUtc(String dateOfSupplyUtc) {
    this.dateOfSupplyUtc = dateOfSupplyUtc;
  }


  public Inventoryperdock200ResponseInner deliveryChannel(List<String> deliveryChannel) {
    this.deliveryChannel = deliveryChannel;
    return this;
  }

  public Inventoryperdock200ResponseInner addDeliveryChannelItem(String deliveryChannelItem) {
    if (this.deliveryChannel == null) {
      this.deliveryChannel = new ArrayList<>();
    }
    this.deliveryChannel.add(deliveryChannelItem);
    return this;
  }

  /**
   * List of delivery channels available.
   * @return deliveryChannel
   */
  @javax.annotation.Nullable
  public List<String> getDeliveryChannel() {
    return deliveryChannel;
  }

  public void setDeliveryChannel(List<String> deliveryChannel) {
    this.deliveryChannel = deliveryChannel;
  }


  public Inventoryperdock200ResponseInner dockId(String dockId) {
    this.dockId = dockId;
    return this;
  }

  /**
   * Dock ID.
   * @return dockId
   */
  @javax.annotation.Nullable
  public String getDockId() {
    return dockId;
  }

  public void setDockId(String dockId) {
    this.dockId = dockId;
  }


  public Inventoryperdock200ResponseInner isUnlimited(Boolean isUnlimited) {
    this.isUnlimited = isUnlimited;
    return this;
  }

  /**
   * Indicates whether the SKU&#39;s availability is unlimited (\&quot;infinite inventory\&quot;).
   * @return isUnlimited
   */
  @javax.annotation.Nullable
  public Boolean getIsUnlimited() {
    return isUnlimited;
  }

  public void setIsUnlimited(Boolean isUnlimited) {
    this.isUnlimited = isUnlimited;
  }


  public Inventoryperdock200ResponseInner keepSellingAfterExpiration(Boolean keepSellingAfterExpiration) {
    this.keepSellingAfterExpiration = keepSellingAfterExpiration;
    return this;
  }

  /**
   * Indicates whether SKU can continue to be sold after the available quantity gets to 0.
   * @return keepSellingAfterExpiration
   */
  @javax.annotation.Nullable
  public Boolean getKeepSellingAfterExpiration() {
    return keepSellingAfterExpiration;
  }

  public void setKeepSellingAfterExpiration(Boolean keepSellingAfterExpiration) {
    this.keepSellingAfterExpiration = keepSellingAfterExpiration;
  }


  public Inventoryperdock200ResponseInner reservedQuantity(Integer reservedQuantity) {
    this.reservedQuantity = reservedQuantity;
    return this;
  }

  /**
   * Reserved quantity of the SKU.
   * @return reservedQuantity
   */
  @javax.annotation.Nullable
  public Integer getReservedQuantity() {
    return reservedQuantity;
  }

  public void setReservedQuantity(Integer reservedQuantity) {
    this.reservedQuantity = reservedQuantity;
  }


  public Inventoryperdock200ResponseInner salesChannel(List<String> salesChannel) {
    this.salesChannel = salesChannel;
    return this;
  }

  public Inventoryperdock200ResponseInner addSalesChannelItem(String salesChannelItem) {
    if (this.salesChannel == null) {
      this.salesChannel = new ArrayList<>();
    }
    this.salesChannel.add(salesChannelItem);
    return this;
  }

  /**
   * List of sales channels associated.
   * @return salesChannel
   */
  @javax.annotation.Nullable
  public List<String> getSalesChannel() {
    return salesChannel;
  }

  public void setSalesChannel(List<String> salesChannel) {
    this.salesChannel = salesChannel;
  }


  public Inventoryperdock200ResponseInner skuId(String skuId) {
    this.skuId = skuId;
    return this;
  }

  /**
   * SKU ID.
   * @return skuId
   */
  @javax.annotation.Nullable
  public String getSkuId() {
    return skuId;
  }

  public void setSkuId(String skuId) {
    this.skuId = skuId;
  }


  public Inventoryperdock200ResponseInner timeToRefill(String timeToRefill) {
    this.timeToRefill = timeToRefill;
    return this;
  }

  /**
   * Time to refill (deprecated).
   * @return timeToRefill
   */
  @javax.annotation.Nullable
  public String getTimeToRefill() {
    return timeToRefill;
  }

  public void setTimeToRefill(String timeToRefill) {
    this.timeToRefill = timeToRefill;
  }


  public Inventoryperdock200ResponseInner totalQuantity(Integer totalQuantity) {
    this.totalQuantity = totalQuantity;
    return this;
  }

  /**
   * Total quantity of SKU.
   * @return totalQuantity
   */
  @javax.annotation.Nullable
  public Integer getTotalQuantity() {
    return totalQuantity;
  }

  public void setTotalQuantity(Integer totalQuantity) {
    this.totalQuantity = totalQuantity;
  }


  public Inventoryperdock200ResponseInner transfer(String transfer) {
    this.transfer = transfer;
    return this;
  }

  /**
   * Transfer.
   * @return transfer
   */
  @javax.annotation.Nullable
  public String getTransfer() {
    return transfer;
  }

  public void setTransfer(String transfer) {
    this.transfer = transfer;
  }


  public Inventoryperdock200ResponseInner warehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
    return this;
  }

  /**
   * Warehouse ID.
   * @return warehouseId
   */
  @javax.annotation.Nullable
  public String getWarehouseId() {
    return warehouseId;
  }

  public void setWarehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Inventoryperdock200ResponseInner inventoryperdock200ResponseInner = (Inventoryperdock200ResponseInner) o;
    return Objects.equals(this.availableQuantity, inventoryperdock200ResponseInner.availableQuantity) &&
        Objects.equals(this.dateOfSupplyUtc, inventoryperdock200ResponseInner.dateOfSupplyUtc) &&
        Objects.equals(this.deliveryChannel, inventoryperdock200ResponseInner.deliveryChannel) &&
        Objects.equals(this.dockId, inventoryperdock200ResponseInner.dockId) &&
        Objects.equals(this.isUnlimited, inventoryperdock200ResponseInner.isUnlimited) &&
        Objects.equals(this.keepSellingAfterExpiration, inventoryperdock200ResponseInner.keepSellingAfterExpiration) &&
        Objects.equals(this.reservedQuantity, inventoryperdock200ResponseInner.reservedQuantity) &&
        Objects.equals(this.salesChannel, inventoryperdock200ResponseInner.salesChannel) &&
        Objects.equals(this.skuId, inventoryperdock200ResponseInner.skuId) &&
        Objects.equals(this.timeToRefill, inventoryperdock200ResponseInner.timeToRefill) &&
        Objects.equals(this.totalQuantity, inventoryperdock200ResponseInner.totalQuantity) &&
        Objects.equals(this.transfer, inventoryperdock200ResponseInner.transfer) &&
        Objects.equals(this.warehouseId, inventoryperdock200ResponseInner.warehouseId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableQuantity, dateOfSupplyUtc, deliveryChannel, dockId, isUnlimited, keepSellingAfterExpiration, reservedQuantity, salesChannel, skuId, timeToRefill, totalQuantity, transfer, warehouseId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Inventoryperdock200ResponseInner {\n");
    sb.append("    availableQuantity: ").append(toIndentedString(availableQuantity)).append("\n");
    sb.append("    dateOfSupplyUtc: ").append(toIndentedString(dateOfSupplyUtc)).append("\n");
    sb.append("    deliveryChannel: ").append(toIndentedString(deliveryChannel)).append("\n");
    sb.append("    dockId: ").append(toIndentedString(dockId)).append("\n");
    sb.append("    isUnlimited: ").append(toIndentedString(isUnlimited)).append("\n");
    sb.append("    keepSellingAfterExpiration: ").append(toIndentedString(keepSellingAfterExpiration)).append("\n");
    sb.append("    reservedQuantity: ").append(toIndentedString(reservedQuantity)).append("\n");
    sb.append("    salesChannel: ").append(toIndentedString(salesChannel)).append("\n");
    sb.append("    skuId: ").append(toIndentedString(skuId)).append("\n");
    sb.append("    timeToRefill: ").append(toIndentedString(timeToRefill)).append("\n");
    sb.append("    totalQuantity: ").append(toIndentedString(totalQuantity)).append("\n");
    sb.append("    transfer: ").append(toIndentedString(transfer)).append("\n");
    sb.append("    warehouseId: ").append(toIndentedString(warehouseId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableQuantity");
    openapiFields.add("dateOfSupplyUtc");
    openapiFields.add("deliveryChannel");
    openapiFields.add("dockId");
    openapiFields.add("isUnlimited");
    openapiFields.add("keepSellingAfterExpiration");
    openapiFields.add("reservedQuantity");
    openapiFields.add("salesChannel");
    openapiFields.add("skuId");
    openapiFields.add("timeToRefill");
    openapiFields.add("totalQuantity");
    openapiFields.add("transfer");
    openapiFields.add("warehouseId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Inventoryperdock200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Inventoryperdock200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Inventoryperdock200ResponseInner is not found in the empty JSON string", Inventoryperdock200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Inventoryperdock200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Inventoryperdock200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dateOfSupplyUtc") != null && !jsonObj.get("dateOfSupplyUtc").isJsonNull()) && !jsonObj.get("dateOfSupplyUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfSupplyUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfSupplyUtc").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deliveryChannel") != null && !jsonObj.get("deliveryChannel").isJsonNull() && !jsonObj.get("deliveryChannel").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryChannel` to be an array in the JSON string but got `%s`", jsonObj.get("deliveryChannel").toString()));
      }
      if ((jsonObj.get("dockId") != null && !jsonObj.get("dockId").isJsonNull()) && !jsonObj.get("dockId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dockId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dockId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("salesChannel") != null && !jsonObj.get("salesChannel").isJsonNull() && !jsonObj.get("salesChannel").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesChannel` to be an array in the JSON string but got `%s`", jsonObj.get("salesChannel").toString()));
      }
      if ((jsonObj.get("skuId") != null && !jsonObj.get("skuId").isJsonNull()) && !jsonObj.get("skuId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuId").toString()));
      }
      if ((jsonObj.get("timeToRefill") != null && !jsonObj.get("timeToRefill").isJsonNull()) && !jsonObj.get("timeToRefill").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeToRefill` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeToRefill").toString()));
      }
      if ((jsonObj.get("transfer") != null && !jsonObj.get("transfer").isJsonNull()) && !jsonObj.get("transfer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer").toString()));
      }
      if ((jsonObj.get("warehouseId") != null && !jsonObj.get("warehouseId").isJsonNull()) && !jsonObj.get("warehouseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouseId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Inventoryperdock200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Inventoryperdock200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Inventoryperdock200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Inventoryperdock200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<Inventoryperdock200ResponseInner>() {
           @Override
           public void write(JsonWriter out, Inventoryperdock200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Inventoryperdock200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Inventoryperdock200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Inventoryperdock200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to Inventoryperdock200ResponseInner
   */
  public static Inventoryperdock200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Inventoryperdock200ResponseInner.class);
  }

  /**
   * Convert an instance of Inventoryperdock200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

