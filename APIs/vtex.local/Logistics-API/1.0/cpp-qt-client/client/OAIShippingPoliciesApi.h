/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIShippingPoliciesApi_H
#define OAI_OAIShippingPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRequest_body.h"
#include "OAIRequest_body_1.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIShippingPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIShippingPoliciesApi(const int timeOut = 0);
    ~OAIShippingPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  page QString [required]
    * @param[in]  per_page QString [required]
    */
    virtual void apiLogisticsPvtShippingPoliciesGet(const QString &accept, const QString &content_type, const QString &page, const QString &per_page);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  id QString [required]
    */
    virtual void apiLogisticsPvtShippingPoliciesIdDelete(const QString &accept, const QString &content_type, const QString &id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  id QString [required]
    */
    virtual void apiLogisticsPvtShippingPoliciesIdGet(const QString &accept, const QString &content_type, const QString &id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_request_body_1 OAIRequest_body_1 [optional]
    */
    virtual void apiLogisticsPvtShippingPoliciesIdPut(const QString &accept, const QString &content_type, const QString &id, const ::OpenAPI::OptionalParam<OAIRequest_body_1> &oai_request_body_1 = ::OpenAPI::OptionalParam<OAIRequest_body_1>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_request_body OAIRequest_body [optional]
    */
    virtual void apiLogisticsPvtShippingPoliciesPost(const QString &accept, const QString &content_type, const ::OpenAPI::OptionalParam<OAIRequest_body> &oai_request_body = ::OpenAPI::OptionalParam<OAIRequest_body>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiLogisticsPvtShippingPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void apiLogisticsPvtShippingPoliciesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void apiLogisticsPvtShippingPoliciesIdGetCallback(OAIHttpRequestWorker *worker);
    void apiLogisticsPvtShippingPoliciesIdPutCallback(OAIHttpRequestWorker *worker);
    void apiLogisticsPvtShippingPoliciesPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiLogisticsPvtShippingPoliciesGetSignal();
    void apiLogisticsPvtShippingPoliciesIdDeleteSignal();
    void apiLogisticsPvtShippingPoliciesIdGetSignal();
    void apiLogisticsPvtShippingPoliciesIdPutSignal();
    void apiLogisticsPvtShippingPoliciesPostSignal();


    void apiLogisticsPvtShippingPoliciesGetSignalFull(OAIHttpRequestWorker *worker);
    void apiLogisticsPvtShippingPoliciesIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiLogisticsPvtShippingPoliciesIdGetSignalFull(OAIHttpRequestWorker *worker);
    void apiLogisticsPvtShippingPoliciesIdPutSignalFull(OAIHttpRequestWorker *worker);
    void apiLogisticsPvtShippingPoliciesPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiLogisticsPvtShippingPoliciesGetSignalError() instead")
    void apiLogisticsPvtShippingPoliciesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiLogisticsPvtShippingPoliciesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLogisticsPvtShippingPoliciesIdDeleteSignalError() instead")
    void apiLogisticsPvtShippingPoliciesIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiLogisticsPvtShippingPoliciesIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLogisticsPvtShippingPoliciesIdGetSignalError() instead")
    void apiLogisticsPvtShippingPoliciesIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiLogisticsPvtShippingPoliciesIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLogisticsPvtShippingPoliciesIdPutSignalError() instead")
    void apiLogisticsPvtShippingPoliciesIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiLogisticsPvtShippingPoliciesIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLogisticsPvtShippingPoliciesPostSignalError() instead")
    void apiLogisticsPvtShippingPoliciesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiLogisticsPvtShippingPoliciesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiLogisticsPvtShippingPoliciesGetSignalErrorFull() instead")
    void apiLogisticsPvtShippingPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLogisticsPvtShippingPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLogisticsPvtShippingPoliciesIdDeleteSignalErrorFull() instead")
    void apiLogisticsPvtShippingPoliciesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLogisticsPvtShippingPoliciesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLogisticsPvtShippingPoliciesIdGetSignalErrorFull() instead")
    void apiLogisticsPvtShippingPoliciesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLogisticsPvtShippingPoliciesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLogisticsPvtShippingPoliciesIdPutSignalErrorFull() instead")
    void apiLogisticsPvtShippingPoliciesIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLogisticsPvtShippingPoliciesIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLogisticsPvtShippingPoliciesPostSignalErrorFull() instead")
    void apiLogisticsPvtShippingPoliciesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLogisticsPvtShippingPoliciesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
