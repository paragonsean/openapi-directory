/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICubicWeightSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICubicWeightSettings::OAICubicWeightSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICubicWeightSettings::OAICubicWeightSettings() {
    this->initializeModel();
}

OAICubicWeightSettings::~OAICubicWeightSettings() {}

void OAICubicWeightSettings::initializeModel() {

    m_minimun_acceptable_volumetric_weight_isSet = false;
    m_minimun_acceptable_volumetric_weight_isValid = false;

    m_volumetric_factor_isSet = false;
    m_volumetric_factor_isValid = false;
}

void OAICubicWeightSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICubicWeightSettings::fromJsonObject(QJsonObject json) {

    m_minimun_acceptable_volumetric_weight_isValid = ::OpenAPI::fromJsonValue(m_minimun_acceptable_volumetric_weight, json[QString("minimunAcceptableVolumetricWeight")]);
    m_minimun_acceptable_volumetric_weight_isSet = !json[QString("minimunAcceptableVolumetricWeight")].isNull() && m_minimun_acceptable_volumetric_weight_isValid;

    m_volumetric_factor_isValid = ::OpenAPI::fromJsonValue(m_volumetric_factor, json[QString("volumetricFactor")]);
    m_volumetric_factor_isSet = !json[QString("volumetricFactor")].isNull() && m_volumetric_factor_isValid;
}

QString OAICubicWeightSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICubicWeightSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_minimun_acceptable_volumetric_weight_isSet) {
        obj.insert(QString("minimunAcceptableVolumetricWeight"), ::OpenAPI::toJsonValue(m_minimun_acceptable_volumetric_weight));
    }
    if (m_volumetric_factor_isSet) {
        obj.insert(QString("volumetricFactor"), ::OpenAPI::toJsonValue(m_volumetric_factor));
    }
    return obj;
}

double OAICubicWeightSettings::getMinimunAcceptableVolumetricWeight() const {
    return m_minimun_acceptable_volumetric_weight;
}
void OAICubicWeightSettings::setMinimunAcceptableVolumetricWeight(const double &minimun_acceptable_volumetric_weight) {
    m_minimun_acceptable_volumetric_weight = minimun_acceptable_volumetric_weight;
    m_minimun_acceptable_volumetric_weight_isSet = true;
}

bool OAICubicWeightSettings::is_minimun_acceptable_volumetric_weight_Set() const{
    return m_minimun_acceptable_volumetric_weight_isSet;
}

bool OAICubicWeightSettings::is_minimun_acceptable_volumetric_weight_Valid() const{
    return m_minimun_acceptable_volumetric_weight_isValid;
}

double OAICubicWeightSettings::getVolumetricFactor() const {
    return m_volumetric_factor;
}
void OAICubicWeightSettings::setVolumetricFactor(const double &volumetric_factor) {
    m_volumetric_factor = volumetric_factor;
    m_volumetric_factor_isSet = true;
}

bool OAICubicWeightSettings::is_volumetric_factor_Set() const{
    return m_volumetric_factor_isSet;
}

bool OAICubicWeightSettings::is_volumetric_factor_Valid() const{
    return m_volumetric_factor_isValid;
}

bool OAICubicWeightSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_minimun_acceptable_volumetric_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumetric_factor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICubicWeightSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_minimun_acceptable_volumetric_weight_isValid && m_volumetric_factor_isValid && true;
}

} // namespace OpenAPI
