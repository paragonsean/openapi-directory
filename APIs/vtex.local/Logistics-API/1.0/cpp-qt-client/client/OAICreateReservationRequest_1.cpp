/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateReservationRequest_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateReservationRequest_1::OAICreateReservationRequest_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateReservationRequest_1::OAICreateReservationRequest_1() {
    this->initializeModel();
}

OAICreateReservationRequest_1::~OAICreateReservationRequest_1() {}

void OAICreateReservationRequest_1::initializeModel() {

    m_autorization_expiration_ttl_isSet = false;
    m_autorization_expiration_ttl_isValid = false;

    m_delivery_item_options_isSet = false;
    m_delivery_item_options_isValid = false;

    m_lock_id_isSet = false;
    m_lock_id_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;
}

void OAICreateReservationRequest_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateReservationRequest_1::fromJsonObject(QJsonObject json) {

    m_autorization_expiration_ttl_isValid = ::OpenAPI::fromJsonValue(m_autorization_expiration_ttl, json[QString("autorizationExpirationTTL")]);
    m_autorization_expiration_ttl_isSet = !json[QString("autorizationExpirationTTL")].isNull() && m_autorization_expiration_ttl_isValid;

    m_delivery_item_options_isValid = ::OpenAPI::fromJsonValue(m_delivery_item_options, json[QString("deliveryItemOptions")]);
    m_delivery_item_options_isSet = !json[QString("deliveryItemOptions")].isNull() && m_delivery_item_options_isValid;

    m_lock_id_isValid = ::OpenAPI::fromJsonValue(m_lock_id, json[QString("lockId")]);
    m_lock_id_isSet = !json[QString("lockId")].isNull() && m_lock_id_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;
}

QString OAICreateReservationRequest_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateReservationRequest_1::asJsonObject() const {
    QJsonObject obj;
    if (m_autorization_expiration_ttl_isSet) {
        obj.insert(QString("autorizationExpirationTTL"), ::OpenAPI::toJsonValue(m_autorization_expiration_ttl));
    }
    if (m_delivery_item_options.size() > 0) {
        obj.insert(QString("deliveryItemOptions"), ::OpenAPI::toJsonValue(m_delivery_item_options));
    }
    if (m_lock_id_isSet) {
        obj.insert(QString("lockId"), ::OpenAPI::toJsonValue(m_lock_id));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    return obj;
}

QString OAICreateReservationRequest_1::getAutorizationExpirationTtl() const {
    return m_autorization_expiration_ttl;
}
void OAICreateReservationRequest_1::setAutorizationExpirationTtl(const QString &autorization_expiration_ttl) {
    m_autorization_expiration_ttl = autorization_expiration_ttl;
    m_autorization_expiration_ttl_isSet = true;
}

bool OAICreateReservationRequest_1::is_autorization_expiration_ttl_Set() const{
    return m_autorization_expiration_ttl_isSet;
}

bool OAICreateReservationRequest_1::is_autorization_expiration_ttl_Valid() const{
    return m_autorization_expiration_ttl_isValid;
}

QList<OAIDeliveryItemOption_1> OAICreateReservationRequest_1::getDeliveryItemOptions() const {
    return m_delivery_item_options;
}
void OAICreateReservationRequest_1::setDeliveryItemOptions(const QList<OAIDeliveryItemOption_1> &delivery_item_options) {
    m_delivery_item_options = delivery_item_options;
    m_delivery_item_options_isSet = true;
}

bool OAICreateReservationRequest_1::is_delivery_item_options_Set() const{
    return m_delivery_item_options_isSet;
}

bool OAICreateReservationRequest_1::is_delivery_item_options_Valid() const{
    return m_delivery_item_options_isValid;
}

QString OAICreateReservationRequest_1::getLockId() const {
    return m_lock_id;
}
void OAICreateReservationRequest_1::setLockId(const QString &lock_id) {
    m_lock_id = lock_id;
    m_lock_id_isSet = true;
}

bool OAICreateReservationRequest_1::is_lock_id_Set() const{
    return m_lock_id_isSet;
}

bool OAICreateReservationRequest_1::is_lock_id_Valid() const{
    return m_lock_id_isValid;
}

QString OAICreateReservationRequest_1::getSalesChannel() const {
    return m_sales_channel;
}
void OAICreateReservationRequest_1::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAICreateReservationRequest_1::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAICreateReservationRequest_1::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

bool OAICreateReservationRequest_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autorization_expiration_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_item_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateReservationRequest_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_autorization_expiration_ttl_isValid && m_delivery_item_options_isValid && m_lock_id_isValid && m_sales_channel_isValid && true;
}

} // namespace OpenAPI
