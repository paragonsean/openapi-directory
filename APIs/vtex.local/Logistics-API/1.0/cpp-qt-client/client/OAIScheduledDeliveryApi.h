/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScheduledDeliveryApi_H
#define OAI_OAIScheduledDeliveryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScheduledDeliveryApi : public QObject {
    Q_OBJECT

public:
    OAIScheduledDeliveryApi(const int timeOut = 0);
    ~OAIScheduledDeliveryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  carrier_id QString [required]
    * @param[in]  body QString [required]
    */
    virtual void addBlockedDeliveryWindows(const QString &content_type, const QString &accept, const QString &carrier_id, const QString &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  capacity_type QString [required]
    * @param[in]  shipping_policy_id QString [required]
    * @param[in]  range_start QString [required]
    * @param[in]  range_end QString [required]
    */
    virtual void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGet(const QString &content_type, const QString &accept, const QString &capacity_type, const QString &shipping_policy_id, const QString &range_start, const QString &range_end);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  capacity_type QString [required]
    * @param[in]  shipping_policy_id QString [required]
    * @param[in]  window_day QString [required]
    * @param[in]  window_start_time QString [required]
    * @param[in]  window_end_time QString [required]
    */
    virtual void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGet(const QString &content_type, const QString &accept, const QString &capacity_type, const QString &shipping_policy_id, const QString &window_day, const QString &window_start_time, const QString &window_end_time);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  carrier_id QString [required]
    * @param[in]  body QString [required]
    */
    virtual void removeBlockedDeliveryWindows(const QString &content_type, const QString &accept, const QString &carrier_id, const QString &body);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  carrier_id QString [required]
    */
    virtual void retrieveBlockedDeliveryWindows(const QString &content_type, const QString &accept, const QString &carrier_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addBlockedDeliveryWindowsCallback(OAIHttpRequestWorker *worker);
    void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetCallback(OAIHttpRequestWorker *worker);
    void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetCallback(OAIHttpRequestWorker *worker);
    void removeBlockedDeliveryWindowsCallback(OAIHttpRequestWorker *worker);
    void retrieveBlockedDeliveryWindowsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addBlockedDeliveryWindowsSignal();
    void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetSignal();
    void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetSignal();
    void removeBlockedDeliveryWindowsSignal();
    void retrieveBlockedDeliveryWindowsSignal();


    void addBlockedDeliveryWindowsSignalFull(OAIHttpRequestWorker *worker);
    void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetSignalFull(OAIHttpRequestWorker *worker);
    void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetSignalFull(OAIHttpRequestWorker *worker);
    void removeBlockedDeliveryWindowsSignalFull(OAIHttpRequestWorker *worker);
    void retrieveBlockedDeliveryWindowsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addBlockedDeliveryWindowsSignalError() instead")
    void addBlockedDeliveryWindowsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addBlockedDeliveryWindowsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetSignalError() instead")
    void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetSignalError() instead")
    void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeBlockedDeliveryWindowsSignalError() instead")
    void removeBlockedDeliveryWindowsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeBlockedDeliveryWindowsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveBlockedDeliveryWindowsSignalError() instead")
    void retrieveBlockedDeliveryWindowsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveBlockedDeliveryWindowsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addBlockedDeliveryWindowsSignalErrorFull() instead")
    void addBlockedDeliveryWindowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addBlockedDeliveryWindowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetSignalErrorFull() instead")
    void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetSignalErrorFull() instead")
    void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeBlockedDeliveryWindowsSignalErrorFull() instead")
    void removeBlockedDeliveryWindowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeBlockedDeliveryWindowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveBlockedDeliveryWindowsSignalErrorFull() instead")
    void retrieveBlockedDeliveryWindowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveBlockedDeliveryWindowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
