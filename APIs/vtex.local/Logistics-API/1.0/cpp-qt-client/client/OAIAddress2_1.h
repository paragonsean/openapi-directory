/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAddress2_1.h
 *
 * 
 */

#ifndef OAIAddress2_1_H
#define OAIAddress2_1_H

#include <QJsonObject>

#include "OAICountry_1.h"
#include "OAILocation5_1.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICountry_1;
class OAILocation5_1;

class OAIAddress2_1 : public OAIObject {
public:
    OAIAddress2_1();
    OAIAddress2_1(QString json);
    ~OAIAddress2_1() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCity() const;
    void setCity(const QString &city);
    bool is_city_Set() const;
    bool is_city_Valid() const;

    QString getComplement() const;
    void setComplement(const QString &complement);
    bool is_complement_Set() const;
    bool is_complement_Valid() const;

    OAICountry_1 getCountry() const;
    void setCountry(const OAICountry_1 &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    OAILocation5_1 getLocation() const;
    void setLocation(const OAILocation5_1 &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getNeighborhood() const;
    void setNeighborhood(const QString &neighborhood);
    bool is_neighborhood_Set() const;
    bool is_neighborhood_Valid() const;

    QString getNumber() const;
    void setNumber(const QString &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QString getPostalCode() const;
    void setPostalCode(const QString &postal_code);
    bool is_postal_code_Set() const;
    bool is_postal_code_Valid() const;

    QString getReference() const;
    void setReference(const QString &reference);
    bool is_reference_Set() const;
    bool is_reference_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStreet() const;
    void setStreet(const QString &street);
    bool is_street_Set() const;
    bool is_street_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_city;
    bool m_city_isSet;
    bool m_city_isValid;

    QString m_complement;
    bool m_complement_isSet;
    bool m_complement_isValid;

    OAICountry_1 m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    OAILocation5_1 m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_neighborhood;
    bool m_neighborhood_isSet;
    bool m_neighborhood_isValid;

    QString m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QString m_postal_code;
    bool m_postal_code_isSet;
    bool m_postal_code_isValid;

    QString m_reference;
    bool m_reference_isSet;
    bool m_reference_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_street;
    bool m_street_isSet;
    bool m_street_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAddress2_1)

#endif // OAIAddress2_1_H
