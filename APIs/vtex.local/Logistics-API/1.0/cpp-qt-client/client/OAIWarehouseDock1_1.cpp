/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarehouseDock1_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarehouseDock1_1::OAIWarehouseDock1_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarehouseDock1_1::OAIWarehouseDock1_1() {
    this->initializeModel();
}

OAIWarehouseDock1_1::~OAIWarehouseDock1_1() {}

void OAIWarehouseDock1_1::initializeModel() {

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_dock_id_isSet = false;
    m_dock_id_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAIWarehouseDock1_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarehouseDock1_1::fromJsonObject(QJsonObject json) {

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_dock_id_isValid = ::OpenAPI::fromJsonValue(m_dock_id, json[QString("dockId")]);
    m_dock_id_isSet = !json[QString("dockId")].isNull() && m_dock_id_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAIWarehouseDock1_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarehouseDock1_1::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_dock_id_isSet) {
        obj.insert(QString("dockId"), ::OpenAPI::toJsonValue(m_dock_id));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

double OAIWarehouseDock1_1::getCost() const {
    return m_cost;
}
void OAIWarehouseDock1_1::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIWarehouseDock1_1::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIWarehouseDock1_1::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAIWarehouseDock1_1::getDockId() const {
    return m_dock_id;
}
void OAIWarehouseDock1_1::setDockId(const QString &dock_id) {
    m_dock_id = dock_id;
    m_dock_id_isSet = true;
}

bool OAIWarehouseDock1_1::is_dock_id_Set() const{
    return m_dock_id_isSet;
}

bool OAIWarehouseDock1_1::is_dock_id_Valid() const{
    return m_dock_id_isValid;
}

QString OAIWarehouseDock1_1::getTime() const {
    return m_time;
}
void OAIWarehouseDock1_1::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIWarehouseDock1_1::is_time_Set() const{
    return m_time_isSet;
}

bool OAIWarehouseDock1_1::is_time_Valid() const{
    return m_time_isValid;
}

bool OAIWarehouseDock1_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarehouseDock1_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cost_isValid && m_dock_id_isValid && m_time_isValid && true;
}

} // namespace OpenAPI
