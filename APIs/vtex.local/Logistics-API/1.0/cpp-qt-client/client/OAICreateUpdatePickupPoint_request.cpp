/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUpdatePickupPoint_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUpdatePickupPoint_request::OAICreateUpdatePickupPoint_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUpdatePickupPoint_request::OAICreateUpdatePickupPoint_request() {
    this->initializeModel();
}

OAICreateUpdatePickupPoint_request::~OAICreateUpdatePickupPoint_request() {}

void OAICreateUpdatePickupPoint_request::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_business_hours_isSet = false;
    m_business_hours_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_formatted_address_isSet = false;
    m_formatted_address_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_third_party_pickup_isSet = false;
    m_is_third_party_pickup_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_label_isSet = false;
    m_tags_label_isValid = false;
}

void OAICreateUpdatePickupPoint_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUpdatePickupPoint_request::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_business_hours_isValid = ::OpenAPI::fromJsonValue(m_business_hours, json[QString("businessHours")]);
    m_business_hours_isSet = !json[QString("businessHours")].isNull() && m_business_hours_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_formatted_address_isValid = ::OpenAPI::fromJsonValue(m_formatted_address, json[QString("formatted_address")]);
    m_formatted_address_isSet = !json[QString("formatted_address")].isNull() && m_formatted_address_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_third_party_pickup_isValid = ::OpenAPI::fromJsonValue(m_is_third_party_pickup, json[QString("isThirdPartyPickup")]);
    m_is_third_party_pickup_isSet = !json[QString("isThirdPartyPickup")].isNull() && m_is_third_party_pickup_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_label_isValid = ::OpenAPI::fromJsonValue(m_tags_label, json[QString("tagsLabel")]);
    m_tags_label_isSet = !json[QString("tagsLabel")].isNull() && m_tags_label_isValid;
}

QString OAICreateUpdatePickupPoint_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUpdatePickupPoint_request::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_business_hours.size() > 0) {
        obj.insert(QString("businessHours"), ::OpenAPI::toJsonValue(m_business_hours));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_formatted_address_isSet) {
        obj.insert(QString("formatted_address"), ::OpenAPI::toJsonValue(m_formatted_address));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instructions_isSet) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_third_party_pickup_isSet) {
        obj.insert(QString("isThirdPartyPickup"), ::OpenAPI::toJsonValue(m_is_third_party_pickup));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags_label.size() > 0) {
        obj.insert(QString("tagsLabel"), ::OpenAPI::toJsonValue(m_tags_label));
    }
    return obj;
}

OAICreateUpdatePickupPoint_request_address OAICreateUpdatePickupPoint_request::getAddress() const {
    return m_address;
}
void OAICreateUpdatePickupPoint_request::setAddress(const OAICreateUpdatePickupPoint_request_address &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAICreateUpdatePickupPoint_request::is_address_Set() const{
    return m_address_isSet;
}

bool OAICreateUpdatePickupPoint_request::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAIBusinessHour_1> OAICreateUpdatePickupPoint_request::getBusinessHours() const {
    return m_business_hours;
}
void OAICreateUpdatePickupPoint_request::setBusinessHours(const QList<OAIBusinessHour_1> &business_hours) {
    m_business_hours = business_hours;
    m_business_hours_isSet = true;
}

bool OAICreateUpdatePickupPoint_request::is_business_hours_Set() const{
    return m_business_hours_isSet;
}

bool OAICreateUpdatePickupPoint_request::is_business_hours_Valid() const{
    return m_business_hours_isValid;
}

QString OAICreateUpdatePickupPoint_request::getDescription() const {
    return m_description;
}
void OAICreateUpdatePickupPoint_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateUpdatePickupPoint_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateUpdatePickupPoint_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateUpdatePickupPoint_request::getFormattedAddress() const {
    return m_formatted_address;
}
void OAICreateUpdatePickupPoint_request::setFormattedAddress(const QString &formatted_address) {
    m_formatted_address = formatted_address;
    m_formatted_address_isSet = true;
}

bool OAICreateUpdatePickupPoint_request::is_formatted_address_Set() const{
    return m_formatted_address_isSet;
}

bool OAICreateUpdatePickupPoint_request::is_formatted_address_Valid() const{
    return m_formatted_address_isValid;
}

QString OAICreateUpdatePickupPoint_request::getId() const {
    return m_id;
}
void OAICreateUpdatePickupPoint_request::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateUpdatePickupPoint_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateUpdatePickupPoint_request::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateUpdatePickupPoint_request::getInstructions() const {
    return m_instructions;
}
void OAICreateUpdatePickupPoint_request::setInstructions(const QString &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAICreateUpdatePickupPoint_request::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAICreateUpdatePickupPoint_request::is_instructions_Valid() const{
    return m_instructions_isValid;
}

bool OAICreateUpdatePickupPoint_request::isIsActive() const {
    return m_is_active;
}
void OAICreateUpdatePickupPoint_request::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAICreateUpdatePickupPoint_request::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAICreateUpdatePickupPoint_request::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAICreateUpdatePickupPoint_request::isIsThirdPartyPickup() const {
    return m_is_third_party_pickup;
}
void OAICreateUpdatePickupPoint_request::setIsThirdPartyPickup(const bool &is_third_party_pickup) {
    m_is_third_party_pickup = is_third_party_pickup;
    m_is_third_party_pickup_isSet = true;
}

bool OAICreateUpdatePickupPoint_request::is_is_third_party_pickup_Set() const{
    return m_is_third_party_pickup_isSet;
}

bool OAICreateUpdatePickupPoint_request::is_is_third_party_pickup_Valid() const{
    return m_is_third_party_pickup_isValid;
}

QString OAICreateUpdatePickupPoint_request::getName() const {
    return m_name;
}
void OAICreateUpdatePickupPoint_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateUpdatePickupPoint_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateUpdatePickupPoint_request::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAICreateUpdatePickupPoint_request::getTagsLabel() const {
    return m_tags_label;
}
void OAICreateUpdatePickupPoint_request::setTagsLabel(const QList<QString> &tags_label) {
    m_tags_label = tags_label;
    m_tags_label_isSet = true;
}

bool OAICreateUpdatePickupPoint_request::is_tags_label_Set() const{
    return m_tags_label_isSet;
}

bool OAICreateUpdatePickupPoint_request::is_tags_label_Valid() const{
    return m_tags_label_isValid;
}

bool OAICreateUpdatePickupPoint_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_hours.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_third_party_pickup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_label.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUpdatePickupPoint_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_business_hours_isValid && m_description_isValid && m_formatted_address_isValid && m_id_isValid && m_instructions_isValid && m_is_active_isValid && m_name_isValid && m_tags_label_isValid && true;
}

} // namespace OpenAPI
