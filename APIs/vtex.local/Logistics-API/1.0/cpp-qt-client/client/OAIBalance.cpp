/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBalance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBalance::OAIBalance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBalance::OAIBalance() {
    this->initializeModel();
}

OAIBalance::~OAIBalance() {}

void OAIBalance::initializeModel() {

    m_has_unlimited_quantity_isSet = false;
    m_has_unlimited_quantity_isValid = false;

    m_reserved_quantity_isSet = false;
    m_reserved_quantity_isValid = false;

    m_total_quantity_isSet = false;
    m_total_quantity_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;

    m_warehouse_name_isSet = false;
    m_warehouse_name_isValid = false;
}

void OAIBalance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBalance::fromJsonObject(QJsonObject json) {

    m_has_unlimited_quantity_isValid = ::OpenAPI::fromJsonValue(m_has_unlimited_quantity, json[QString("hasUnlimitedQuantity")]);
    m_has_unlimited_quantity_isSet = !json[QString("hasUnlimitedQuantity")].isNull() && m_has_unlimited_quantity_isValid;

    m_reserved_quantity_isValid = ::OpenAPI::fromJsonValue(m_reserved_quantity, json[QString("reservedQuantity")]);
    m_reserved_quantity_isSet = !json[QString("reservedQuantity")].isNull() && m_reserved_quantity_isValid;

    m_total_quantity_isValid = ::OpenAPI::fromJsonValue(m_total_quantity, json[QString("totalQuantity")]);
    m_total_quantity_isSet = !json[QString("totalQuantity")].isNull() && m_total_quantity_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouseId")]);
    m_warehouse_id_isSet = !json[QString("warehouseId")].isNull() && m_warehouse_id_isValid;

    m_warehouse_name_isValid = ::OpenAPI::fromJsonValue(m_warehouse_name, json[QString("warehouseName")]);
    m_warehouse_name_isSet = !json[QString("warehouseName")].isNull() && m_warehouse_name_isValid;
}

QString OAIBalance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBalance::asJsonObject() const {
    QJsonObject obj;
    if (m_has_unlimited_quantity_isSet) {
        obj.insert(QString("hasUnlimitedQuantity"), ::OpenAPI::toJsonValue(m_has_unlimited_quantity));
    }
    if (m_reserved_quantity_isSet) {
        obj.insert(QString("reservedQuantity"), ::OpenAPI::toJsonValue(m_reserved_quantity));
    }
    if (m_total_quantity_isSet) {
        obj.insert(QString("totalQuantity"), ::OpenAPI::toJsonValue(m_total_quantity));
    }
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouseId"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    if (m_warehouse_name_isSet) {
        obj.insert(QString("warehouseName"), ::OpenAPI::toJsonValue(m_warehouse_name));
    }
    return obj;
}

bool OAIBalance::isHasUnlimitedQuantity() const {
    return m_has_unlimited_quantity;
}
void OAIBalance::setHasUnlimitedQuantity(const bool &has_unlimited_quantity) {
    m_has_unlimited_quantity = has_unlimited_quantity;
    m_has_unlimited_quantity_isSet = true;
}

bool OAIBalance::is_has_unlimited_quantity_Set() const{
    return m_has_unlimited_quantity_isSet;
}

bool OAIBalance::is_has_unlimited_quantity_Valid() const{
    return m_has_unlimited_quantity_isValid;
}

qint32 OAIBalance::getReservedQuantity() const {
    return m_reserved_quantity;
}
void OAIBalance::setReservedQuantity(const qint32 &reserved_quantity) {
    m_reserved_quantity = reserved_quantity;
    m_reserved_quantity_isSet = true;
}

bool OAIBalance::is_reserved_quantity_Set() const{
    return m_reserved_quantity_isSet;
}

bool OAIBalance::is_reserved_quantity_Valid() const{
    return m_reserved_quantity_isValid;
}

qint32 OAIBalance::getTotalQuantity() const {
    return m_total_quantity;
}
void OAIBalance::setTotalQuantity(const qint32 &total_quantity) {
    m_total_quantity = total_quantity;
    m_total_quantity_isSet = true;
}

bool OAIBalance::is_total_quantity_Set() const{
    return m_total_quantity_isSet;
}

bool OAIBalance::is_total_quantity_Valid() const{
    return m_total_quantity_isValid;
}

QString OAIBalance::getWarehouseId() const {
    return m_warehouse_id;
}
void OAIBalance::setWarehouseId(const QString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAIBalance::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAIBalance::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

QString OAIBalance::getWarehouseName() const {
    return m_warehouse_name;
}
void OAIBalance::setWarehouseName(const QString &warehouse_name) {
    m_warehouse_name = warehouse_name;
    m_warehouse_name_isSet = true;
}

bool OAIBalance::is_warehouse_name_Set() const{
    return m_warehouse_name_isSet;
}

bool OAIBalance::is_warehouse_name_Valid() const{
    return m_warehouse_name_isValid;
}

bool OAIBalance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_unlimited_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBalance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_has_unlimited_quantity_isValid && m_reserved_quantity_isValid && m_total_quantity_isValid && m_warehouse_id_isValid && m_warehouse_name_isValid && true;
}

} // namespace OpenAPI
