/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReservationsApi_H
#define OAI_OAIReservationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateReservationRequest_1.h"
#include "OAICreateReservation_200_response.h"
#include "OAIReservationById_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReservationsApi : public QObject {
    Q_OBJECT

public:
    OAIReservationsApi(const int timeOut = 0);
    ~OAIReservationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  reservation_id QString [required]
    */
    virtual void acknowledgmentReservation(const QString &content_type, const QString &accept, const QString &reservation_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  reservation_id QString [required]
    */
    virtual void cancelReservation(const QString &content_type, const QString &accept, const QString &reservation_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  reservation_id QString [required]
    */
    virtual void confirmReservation(const QString &content_type, const QString &accept, const QString &reservation_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_create_reservation_request_1 OAICreateReservationRequest_1 [required]
    */
    virtual void createReservation(const QString &accept, const QString &content_type, const OAICreateReservationRequest_1 &oai_create_reservation_request_1);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  reservation_id QString [required]
    */
    virtual void reservationById(const QString &content_type, const QString &accept, const QString &reservation_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  warehouse_id QString [required]
    * @param[in]  sku_id QString [required]
    */
    virtual void reservationbyWarehouseandSku(const QString &content_type, const QString &accept, const QString &warehouse_id, const QString &sku_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void acknowledgmentReservationCallback(OAIHttpRequestWorker *worker);
    void cancelReservationCallback(OAIHttpRequestWorker *worker);
    void confirmReservationCallback(OAIHttpRequestWorker *worker);
    void createReservationCallback(OAIHttpRequestWorker *worker);
    void reservationByIdCallback(OAIHttpRequestWorker *worker);
    void reservationbyWarehouseandSkuCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void acknowledgmentReservationSignal();
    void cancelReservationSignal();
    void confirmReservationSignal();
    void createReservationSignal(OAICreateReservation_200_response summary);
    void reservationByIdSignal(OAIReservationById_200_response summary);
    void reservationbyWarehouseandSkuSignal();


    void acknowledgmentReservationSignalFull(OAIHttpRequestWorker *worker);
    void cancelReservationSignalFull(OAIHttpRequestWorker *worker);
    void confirmReservationSignalFull(OAIHttpRequestWorker *worker);
    void createReservationSignalFull(OAIHttpRequestWorker *worker, OAICreateReservation_200_response summary);
    void reservationByIdSignalFull(OAIHttpRequestWorker *worker, OAIReservationById_200_response summary);
    void reservationbyWarehouseandSkuSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use acknowledgmentReservationSignalError() instead")
    void acknowledgmentReservationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void acknowledgmentReservationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelReservationSignalError() instead")
    void cancelReservationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelReservationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmReservationSignalError() instead")
    void confirmReservationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void confirmReservationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReservationSignalError() instead")
    void createReservationSignalE(OAICreateReservation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createReservationSignalError(OAICreateReservation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reservationByIdSignalError() instead")
    void reservationByIdSignalE(OAIReservationById_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reservationByIdSignalError(OAIReservationById_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reservationbyWarehouseandSkuSignalError() instead")
    void reservationbyWarehouseandSkuSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reservationbyWarehouseandSkuSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use acknowledgmentReservationSignalErrorFull() instead")
    void acknowledgmentReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acknowledgmentReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelReservationSignalErrorFull() instead")
    void cancelReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmReservationSignalErrorFull() instead")
    void confirmReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReservationSignalErrorFull() instead")
    void createReservationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createReservationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reservationByIdSignalErrorFull() instead")
    void reservationByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reservationByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reservationbyWarehouseandSkuSignalErrorFull() instead")
    void reservationbyWarehouseandSkuSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reservationbyWarehouseandSkuSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
