/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarehouseById_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarehouseById_200_response::OAIWarehouseById_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarehouseById_200_response::OAIWarehouseById_200_response() {
    this->initializeModel();
}

OAIWarehouseById_200_response::~OAIWarehouseById_200_response() {}

void OAIWarehouseById_200_response::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pickup_point_ids_isSet = false;
    m_pickup_point_ids_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_warehouse_docks_isSet = false;
    m_warehouse_docks_isValid = false;
}

void OAIWarehouseById_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarehouseById_200_response::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pickup_point_ids_isValid = ::OpenAPI::fromJsonValue(m_pickup_point_ids, json[QString("pickupPointIds")]);
    m_pickup_point_ids_isSet = !json[QString("pickupPointIds")].isNull() && m_pickup_point_ids_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_warehouse_docks_isValid = ::OpenAPI::fromJsonValue(m_warehouse_docks, json[QString("warehouseDocks")]);
    m_warehouse_docks_isSet = !json[QString("warehouseDocks")].isNull() && m_warehouse_docks_isValid;
}

QString OAIWarehouseById_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarehouseById_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pickup_point_ids.size() > 0) {
        obj.insert(QString("pickupPointIds"), ::OpenAPI::toJsonValue(m_pickup_point_ids));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_warehouse_docks.size() > 0) {
        obj.insert(QString("warehouseDocks"), ::OpenAPI::toJsonValue(m_warehouse_docks));
    }
    return obj;
}

QString OAIWarehouseById_200_response::getId() const {
    return m_id;
}
void OAIWarehouseById_200_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWarehouseById_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWarehouseById_200_response::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIWarehouseById_200_response::isIsActive() const {
    return m_is_active;
}
void OAIWarehouseById_200_response::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIWarehouseById_200_response::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIWarehouseById_200_response::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIWarehouseById_200_response::getName() const {
    return m_name;
}
void OAIWarehouseById_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWarehouseById_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWarehouseById_200_response::is_name_Valid() const{
    return m_name_isValid;
}

QList<QJsonValue> OAIWarehouseById_200_response::getPickupPointIds() const {
    return m_pickup_point_ids;
}
void OAIWarehouseById_200_response::setPickupPointIds(const QList<QJsonValue> &pickup_point_ids) {
    m_pickup_point_ids = pickup_point_ids;
    m_pickup_point_ids_isSet = true;
}

bool OAIWarehouseById_200_response::is_pickup_point_ids_Set() const{
    return m_pickup_point_ids_isSet;
}

bool OAIWarehouseById_200_response::is_pickup_point_ids_Valid() const{
    return m_pickup_point_ids_isValid;
}

qint32 OAIWarehouseById_200_response::getPriority() const {
    return m_priority;
}
void OAIWarehouseById_200_response::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIWarehouseById_200_response::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIWarehouseById_200_response::is_priority_Valid() const{
    return m_priority_isValid;
}

QList<OAIWarehouseDock1_2> OAIWarehouseById_200_response::getWarehouseDocks() const {
    return m_warehouse_docks;
}
void OAIWarehouseById_200_response::setWarehouseDocks(const QList<OAIWarehouseDock1_2> &warehouse_docks) {
    m_warehouse_docks = warehouse_docks;
    m_warehouse_docks_isSet = true;
}

bool OAIWarehouseById_200_response::is_warehouse_docks_Set() const{
    return m_warehouse_docks_isSet;
}

bool OAIWarehouseById_200_response::is_warehouse_docks_Valid() const{
    return m_warehouse_docks_isValid;
}

bool OAIWarehouseById_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_point_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_docks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarehouseById_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
