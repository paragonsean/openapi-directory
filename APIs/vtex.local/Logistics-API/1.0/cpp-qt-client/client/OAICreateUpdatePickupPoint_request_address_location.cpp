/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUpdatePickupPoint_request_address_location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUpdatePickupPoint_request_address_location::OAICreateUpdatePickupPoint_request_address_location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUpdatePickupPoint_request_address_location::OAICreateUpdatePickupPoint_request_address_location() {
    this->initializeModel();
}

OAICreateUpdatePickupPoint_request_address_location::~OAICreateUpdatePickupPoint_request_address_location() {}

void OAICreateUpdatePickupPoint_request_address_location::initializeModel() {

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;
}

void OAICreateUpdatePickupPoint_request_address_location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUpdatePickupPoint_request_address_location::fromJsonObject(QJsonObject json) {

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;
}

QString OAICreateUpdatePickupPoint_request_address_location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUpdatePickupPoint_request_address_location::asJsonObject() const {
    QJsonObject obj;
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    return obj;
}

double OAICreateUpdatePickupPoint_request_address_location::getLatitude() const {
    return m_latitude;
}
void OAICreateUpdatePickupPoint_request_address_location::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAICreateUpdatePickupPoint_request_address_location::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAICreateUpdatePickupPoint_request_address_location::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAICreateUpdatePickupPoint_request_address_location::getLongitude() const {
    return m_longitude;
}
void OAICreateUpdatePickupPoint_request_address_location::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAICreateUpdatePickupPoint_request_address_location::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAICreateUpdatePickupPoint_request_address_location::is_longitude_Valid() const{
    return m_longitude_isValid;
}

bool OAICreateUpdatePickupPoint_request_address_location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUpdatePickupPoint_request_address_location::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_latitude_isValid && m_longitude_isValid && true;
}

} // namespace OpenAPI
