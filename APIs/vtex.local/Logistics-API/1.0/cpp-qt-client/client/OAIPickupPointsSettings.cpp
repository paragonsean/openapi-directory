/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPickupPointsSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPickupPointsSettings::OAIPickupPointsSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPickupPointsSettings::OAIPickupPointsSettings() {
    this->initializeModel();
}

OAIPickupPointsSettings::~OAIPickupPointsSettings() {}

void OAIPickupPointsSettings::initializeModel() {

    m_pickup_point_ids_isSet = false;
    m_pickup_point_ids_isValid = false;

    m_pickup_point_tags_isSet = false;
    m_pickup_point_tags_isValid = false;

    m_sellers_isSet = false;
    m_sellers_isValid = false;
}

void OAIPickupPointsSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPickupPointsSettings::fromJsonObject(QJsonObject json) {

    m_pickup_point_ids_isValid = ::OpenAPI::fromJsonValue(m_pickup_point_ids, json[QString("pickupPointIds")]);
    m_pickup_point_ids_isSet = !json[QString("pickupPointIds")].isNull() && m_pickup_point_ids_isValid;

    m_pickup_point_tags_isValid = ::OpenAPI::fromJsonValue(m_pickup_point_tags, json[QString("pickupPointTags")]);
    m_pickup_point_tags_isSet = !json[QString("pickupPointTags")].isNull() && m_pickup_point_tags_isValid;

    m_sellers_isValid = ::OpenAPI::fromJsonValue(m_sellers, json[QString("sellers")]);
    m_sellers_isSet = !json[QString("sellers")].isNull() && m_sellers_isValid;
}

QString OAIPickupPointsSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPickupPointsSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_pickup_point_ids.size() > 0) {
        obj.insert(QString("pickupPointIds"), ::OpenAPI::toJsonValue(m_pickup_point_ids));
    }
    if (m_pickup_point_tags.size() > 0) {
        obj.insert(QString("pickupPointTags"), ::OpenAPI::toJsonValue(m_pickup_point_tags));
    }
    if (m_sellers.size() > 0) {
        obj.insert(QString("sellers"), ::OpenAPI::toJsonValue(m_sellers));
    }
    return obj;
}

QList<QJsonValue> OAIPickupPointsSettings::getPickupPointIds() const {
    return m_pickup_point_ids;
}
void OAIPickupPointsSettings::setPickupPointIds(const QList<QJsonValue> &pickup_point_ids) {
    m_pickup_point_ids = pickup_point_ids;
    m_pickup_point_ids_isSet = true;
}

bool OAIPickupPointsSettings::is_pickup_point_ids_Set() const{
    return m_pickup_point_ids_isSet;
}

bool OAIPickupPointsSettings::is_pickup_point_ids_Valid() const{
    return m_pickup_point_ids_isValid;
}

QList<QJsonValue> OAIPickupPointsSettings::getPickupPointTags() const {
    return m_pickup_point_tags;
}
void OAIPickupPointsSettings::setPickupPointTags(const QList<QJsonValue> &pickup_point_tags) {
    m_pickup_point_tags = pickup_point_tags;
    m_pickup_point_tags_isSet = true;
}

bool OAIPickupPointsSettings::is_pickup_point_tags_Set() const{
    return m_pickup_point_tags_isSet;
}

bool OAIPickupPointsSettings::is_pickup_point_tags_Valid() const{
    return m_pickup_point_tags_isValid;
}

QList<QJsonValue> OAIPickupPointsSettings::getSellers() const {
    return m_sellers;
}
void OAIPickupPointsSettings::setSellers(const QList<QJsonValue> &sellers) {
    m_sellers = sellers;
    m_sellers_isSet = true;
}

bool OAIPickupPointsSettings::is_sellers_Set() const{
    return m_sellers_isSet;
}

bool OAIPickupPointsSettings::is_sellers_Valid() const{
    return m_sellers_isValid;
}

bool OAIPickupPointsSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pickup_point_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_point_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sellers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPickupPointsSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_pickup_point_ids_isValid && m_pickup_point_tags_isValid && m_sellers_isValid && true;
}

} // namespace OpenAPI
