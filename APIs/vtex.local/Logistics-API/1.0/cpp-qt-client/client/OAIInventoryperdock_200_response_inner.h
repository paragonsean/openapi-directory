/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInventoryperdock_200_response_inner.h
 *
 * 
 */

#ifndef OAIInventoryperdock_200_response_inner_H
#define OAIInventoryperdock_200_response_inner_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInventoryperdock_200_response_inner : public OAIObject {
public:
    OAIInventoryperdock_200_response_inner();
    OAIInventoryperdock_200_response_inner(QString json);
    ~OAIInventoryperdock_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAvailableQuantity() const;
    void setAvailableQuantity(const qint32 &available_quantity);
    bool is_available_quantity_Set() const;
    bool is_available_quantity_Valid() const;

    QString getDateOfSupplyUtc() const;
    void setDateOfSupplyUtc(const QString &date_of_supply_utc);
    bool is_date_of_supply_utc_Set() const;
    bool is_date_of_supply_utc_Valid() const;

    QList<QString> getDeliveryChannel() const;
    void setDeliveryChannel(const QList<QString> &delivery_channel);
    bool is_delivery_channel_Set() const;
    bool is_delivery_channel_Valid() const;

    QString getDockId() const;
    void setDockId(const QString &dock_id);
    bool is_dock_id_Set() const;
    bool is_dock_id_Valid() const;

    bool isIsUnlimited() const;
    void setIsUnlimited(const bool &is_unlimited);
    bool is_is_unlimited_Set() const;
    bool is_is_unlimited_Valid() const;

    bool isKeepSellingAfterExpiration() const;
    void setKeepSellingAfterExpiration(const bool &keep_selling_after_expiration);
    bool is_keep_selling_after_expiration_Set() const;
    bool is_keep_selling_after_expiration_Valid() const;

    qint32 getReservedQuantity() const;
    void setReservedQuantity(const qint32 &reserved_quantity);
    bool is_reserved_quantity_Set() const;
    bool is_reserved_quantity_Valid() const;

    QList<QString> getSalesChannel() const;
    void setSalesChannel(const QList<QString> &sales_channel);
    bool is_sales_channel_Set() const;
    bool is_sales_channel_Valid() const;

    QString getSkuId() const;
    void setSkuId(const QString &sku_id);
    bool is_sku_id_Set() const;
    bool is_sku_id_Valid() const;

    QString getTimeToRefill() const;
    void setTimeToRefill(const QString &time_to_refill);
    bool is_time_to_refill_Set() const;
    bool is_time_to_refill_Valid() const;

    qint32 getTotalQuantity() const;
    void setTotalQuantity(const qint32 &total_quantity);
    bool is_total_quantity_Set() const;
    bool is_total_quantity_Valid() const;

    QString getTransfer() const;
    void setTransfer(const QString &transfer);
    bool is_transfer_Set() const;
    bool is_transfer_Valid() const;

    QString getWarehouseId() const;
    void setWarehouseId(const QString &warehouse_id);
    bool is_warehouse_id_Set() const;
    bool is_warehouse_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_available_quantity;
    bool m_available_quantity_isSet;
    bool m_available_quantity_isValid;

    QString m_date_of_supply_utc;
    bool m_date_of_supply_utc_isSet;
    bool m_date_of_supply_utc_isValid;

    QList<QString> m_delivery_channel;
    bool m_delivery_channel_isSet;
    bool m_delivery_channel_isValid;

    QString m_dock_id;
    bool m_dock_id_isSet;
    bool m_dock_id_isValid;

    bool m_is_unlimited;
    bool m_is_unlimited_isSet;
    bool m_is_unlimited_isValid;

    bool m_keep_selling_after_expiration;
    bool m_keep_selling_after_expiration_isSet;
    bool m_keep_selling_after_expiration_isValid;

    qint32 m_reserved_quantity;
    bool m_reserved_quantity_isSet;
    bool m_reserved_quantity_isValid;

    QList<QString> m_sales_channel;
    bool m_sales_channel_isSet;
    bool m_sales_channel_isValid;

    QString m_sku_id;
    bool m_sku_id_isSet;
    bool m_sku_id_isValid;

    QString m_time_to_refill;
    bool m_time_to_refill_isSet;
    bool m_time_to_refill_isValid;

    qint32 m_total_quantity;
    bool m_total_quantity_isSet;
    bool m_total_quantity_isValid;

    QString m_transfer;
    bool m_transfer_isSet;
    bool m_transfer_isValid;

    QString m_warehouse_id;
    bool m_warehouse_id_isSet;
    bool m_warehouse_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInventoryperdock_200_response_inner)

#endif // OAIInventoryperdock_200_response_inner_H
