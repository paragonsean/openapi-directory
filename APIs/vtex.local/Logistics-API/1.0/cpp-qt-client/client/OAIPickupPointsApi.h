/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPickupPointsApi_H
#define OAI_OAIPickupPointsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateUpdatePickupPoint_request.h"
#include "OAICreate_Update.h"
#include "OAIGetById_1.h"
#include "OAIListAllPickupPpoints_200_response_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPickupPointsApi : public QObject {
    Q_OBJECT

public:
    OAIPickupPointsApi(const int timeOut = 0);
    ~OAIPickupPointsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  pickup_point_id QString [required]
    * @param[in]  oai_create_update_pickup_point_request OAICreateUpdatePickupPoint_request [required]
    */
    virtual void createUpdatePickupPoint(const QString &content_type, const QString &accept, const QString &pickup_point_id, const OAICreateUpdatePickupPoint_request &oai_create_update_pickup_point_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  pickup_point_id QString [required]
    */
    virtual void getById(const QString &content_type, const QString &accept, const QString &pickup_point_id);

    /**
    * @param[in]  page QString [required]
    * @param[in]  page_size QString [required]
    * @param[in]  keyword QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getpaged(const QString &page, const QString &page_size, const QString &keyword, const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void listAllPickupPpoints(const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  pickup_point_id QString [required]
    */
    virtual void r_delete(const QString &content_type, const QString &accept, const QString &pickup_point_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createUpdatePickupPointCallback(OAIHttpRequestWorker *worker);
    void getByIdCallback(OAIHttpRequestWorker *worker);
    void getpagedCallback(OAIHttpRequestWorker *worker);
    void listAllPickupPpointsCallback(OAIHttpRequestWorker *worker);
    void r_deleteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createUpdatePickupPointSignal(OAICreate_Update summary);
    void getByIdSignal(OAIGetById_1 summary);
    void getpagedSignal();
    void listAllPickupPpointsSignal(QList<OAIListAllPickupPpoints_200_response_inner> summary);
    void r_deleteSignal();


    void createUpdatePickupPointSignalFull(OAIHttpRequestWorker *worker, OAICreate_Update summary);
    void getByIdSignalFull(OAIHttpRequestWorker *worker, OAIGetById_1 summary);
    void getpagedSignalFull(OAIHttpRequestWorker *worker);
    void listAllPickupPpointsSignalFull(OAIHttpRequestWorker *worker, QList<OAIListAllPickupPpoints_200_response_inner> summary);
    void r_deleteSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createUpdatePickupPointSignalError() instead")
    void createUpdatePickupPointSignalE(OAICreate_Update summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUpdatePickupPointSignalError(OAICreate_Update summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByIdSignalError() instead")
    void getByIdSignalE(OAIGetById_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getByIdSignalError(OAIGetById_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getpagedSignalError() instead")
    void getpagedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getpagedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllPickupPpointsSignalError() instead")
    void listAllPickupPpointsSignalE(QList<OAIListAllPickupPpoints_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllPickupPpointsSignalError(QList<OAIListAllPickupPpoints_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_deleteSignalError() instead")
    void r_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void r_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createUpdatePickupPointSignalErrorFull() instead")
    void createUpdatePickupPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUpdatePickupPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getByIdSignalErrorFull() instead")
    void getByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getpagedSignalErrorFull() instead")
    void getpagedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getpagedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllPickupPpointsSignalErrorFull() instead")
    void listAllPickupPpointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllPickupPpointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_deleteSignalErrorFull() instead")
    void r_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void r_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
