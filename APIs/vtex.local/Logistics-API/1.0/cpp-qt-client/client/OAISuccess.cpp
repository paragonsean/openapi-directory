/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuccess.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuccess::OAISuccess(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuccess::OAISuccess() {
    this->initializeModel();
}

OAISuccess::~OAISuccess() {}

void OAISuccess::initializeModel() {

    m_available_quantity_isSet = false;
    m_available_quantity_isValid = false;

    m_dispatched_reservations_quantity_isSet = false;
    m_dispatched_reservations_quantity_isValid = false;

    m_is_unlimited_quantity_isSet = false;
    m_is_unlimited_quantity_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_sku_id_isSet = false;
    m_sku_id_isValid = false;

    m_total_reserved_quantity_isSet = false;
    m_total_reserved_quantity_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;
}

void OAISuccess::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuccess::fromJsonObject(QJsonObject json) {

    m_available_quantity_isValid = ::OpenAPI::fromJsonValue(m_available_quantity, json[QString("availableQuantity")]);
    m_available_quantity_isSet = !json[QString("availableQuantity")].isNull() && m_available_quantity_isValid;

    m_dispatched_reservations_quantity_isValid = ::OpenAPI::fromJsonValue(m_dispatched_reservations_quantity, json[QString("dispatchedReservationsQuantity")]);
    m_dispatched_reservations_quantity_isSet = !json[QString("dispatchedReservationsQuantity")].isNull() && m_dispatched_reservations_quantity_isValid;

    m_is_unlimited_quantity_isValid = ::OpenAPI::fromJsonValue(m_is_unlimited_quantity, json[QString("isUnlimitedQuantity")]);
    m_is_unlimited_quantity_isSet = !json[QString("isUnlimitedQuantity")].isNull() && m_is_unlimited_quantity_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_sku_id_isValid = ::OpenAPI::fromJsonValue(m_sku_id, json[QString("skuId")]);
    m_sku_id_isSet = !json[QString("skuId")].isNull() && m_sku_id_isValid;

    m_total_reserved_quantity_isValid = ::OpenAPI::fromJsonValue(m_total_reserved_quantity, json[QString("totalReservedQuantity")]);
    m_total_reserved_quantity_isSet = !json[QString("totalReservedQuantity")].isNull() && m_total_reserved_quantity_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouseId")]);
    m_warehouse_id_isSet = !json[QString("warehouseId")].isNull() && m_warehouse_id_isValid;
}

QString OAISuccess::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuccess::asJsonObject() const {
    QJsonObject obj;
    if (m_available_quantity_isSet) {
        obj.insert(QString("availableQuantity"), ::OpenAPI::toJsonValue(m_available_quantity));
    }
    if (m_dispatched_reservations_quantity_isSet) {
        obj.insert(QString("dispatchedReservationsQuantity"), ::OpenAPI::toJsonValue(m_dispatched_reservations_quantity));
    }
    if (m_is_unlimited_quantity_isSet) {
        obj.insert(QString("isUnlimitedQuantity"), ::OpenAPI::toJsonValue(m_is_unlimited_quantity));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_sku_id_isSet) {
        obj.insert(QString("skuId"), ::OpenAPI::toJsonValue(m_sku_id));
    }
    if (m_total_reserved_quantity_isSet) {
        obj.insert(QString("totalReservedQuantity"), ::OpenAPI::toJsonValue(m_total_reserved_quantity));
    }
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouseId"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    return obj;
}

qint32 OAISuccess::getAvailableQuantity() const {
    return m_available_quantity;
}
void OAISuccess::setAvailableQuantity(const qint32 &available_quantity) {
    m_available_quantity = available_quantity;
    m_available_quantity_isSet = true;
}

bool OAISuccess::is_available_quantity_Set() const{
    return m_available_quantity_isSet;
}

bool OAISuccess::is_available_quantity_Valid() const{
    return m_available_quantity_isValid;
}

qint32 OAISuccess::getDispatchedReservationsQuantity() const {
    return m_dispatched_reservations_quantity;
}
void OAISuccess::setDispatchedReservationsQuantity(const qint32 &dispatched_reservations_quantity) {
    m_dispatched_reservations_quantity = dispatched_reservations_quantity;
    m_dispatched_reservations_quantity_isSet = true;
}

bool OAISuccess::is_dispatched_reservations_quantity_Set() const{
    return m_dispatched_reservations_quantity_isSet;
}

bool OAISuccess::is_dispatched_reservations_quantity_Valid() const{
    return m_dispatched_reservations_quantity_isValid;
}

bool OAISuccess::isIsUnlimitedQuantity() const {
    return m_is_unlimited_quantity;
}
void OAISuccess::setIsUnlimitedQuantity(const bool &is_unlimited_quantity) {
    m_is_unlimited_quantity = is_unlimited_quantity;
    m_is_unlimited_quantity_isSet = true;
}

bool OAISuccess::is_is_unlimited_quantity_Set() const{
    return m_is_unlimited_quantity_isSet;
}

bool OAISuccess::is_is_unlimited_quantity_Valid() const{
    return m_is_unlimited_quantity_isValid;
}

qint32 OAISuccess::getQuantity() const {
    return m_quantity;
}
void OAISuccess::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAISuccess::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAISuccess::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAISuccess::getSkuId() const {
    return m_sku_id;
}
void OAISuccess::setSkuId(const QString &sku_id) {
    m_sku_id = sku_id;
    m_sku_id_isSet = true;
}

bool OAISuccess::is_sku_id_Set() const{
    return m_sku_id_isSet;
}

bool OAISuccess::is_sku_id_Valid() const{
    return m_sku_id_isValid;
}

qint32 OAISuccess::getTotalReservedQuantity() const {
    return m_total_reserved_quantity;
}
void OAISuccess::setTotalReservedQuantity(const qint32 &total_reserved_quantity) {
    m_total_reserved_quantity = total_reserved_quantity;
    m_total_reserved_quantity_isSet = true;
}

bool OAISuccess::is_total_reserved_quantity_Set() const{
    return m_total_reserved_quantity_isSet;
}

bool OAISuccess::is_total_reserved_quantity_Valid() const{
    return m_total_reserved_quantity_isValid;
}

QString OAISuccess::getWarehouseId() const {
    return m_warehouse_id;
}
void OAISuccess::setWarehouseId(const QString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAISuccess::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAISuccess::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

bool OAISuccess::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispatched_reservations_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_unlimited_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_reserved_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuccess::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_available_quantity_isValid && m_dispatched_reservations_quantity_isValid && m_is_unlimited_quantity_isValid && m_quantity_isValid && m_sku_id_isValid && m_total_reserved_quantity_isValid && m_warehouse_id_isValid && true;
}

} // namespace OpenAPI
