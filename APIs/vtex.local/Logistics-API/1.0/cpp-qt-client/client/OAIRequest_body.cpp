/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequest_body.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequest_body::OAIRequest_body(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequest_body::OAIRequest_body() {
    this->initializeModel();
}

OAIRequest_body::~OAIRequest_body() {}

void OAIRequest_body::initializeModel() {

    m_business_hour_settings_isSet = false;
    m_business_hour_settings_isValid = false;

    m_carrier_schedule_isSet = false;
    m_carrier_schedule_isValid = false;

    m_cubic_weight_settings_isSet = false;
    m_cubic_weight_settings_isValid = false;

    m_delivery_schedule_settings_isSet = false;
    m_delivery_schedule_settings_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_max_dimension_isSet = false;
    m_max_dimension_isValid = false;

    m_maximum_value_aceptable_isSet = false;
    m_maximum_value_aceptable_isValid = false;

    m_minimum_value_aceptable_isSet = false;
    m_minimum_value_aceptable_isValid = false;

    m_modal_settings_isSet = false;
    m_modal_settings_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_of_items_per_shipment_isSet = false;
    m_number_of_items_per_shipment_isValid = false;

    m_pickup_points_settings_isSet = false;
    m_pickup_points_settings_isValid = false;

    m_shipping_method_isSet = false;
    m_shipping_method_isValid = false;

    m_weekend_and_holidays_isSet = false;
    m_weekend_and_holidays_isValid = false;
}

void OAIRequest_body::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequest_body::fromJsonObject(QJsonObject json) {

    m_business_hour_settings_isValid = ::OpenAPI::fromJsonValue(m_business_hour_settings, json[QString("businessHourSettings")]);
    m_business_hour_settings_isSet = !json[QString("businessHourSettings")].isNull() && m_business_hour_settings_isValid;

    m_carrier_schedule_isValid = ::OpenAPI::fromJsonValue(m_carrier_schedule, json[QString("carrierSchedule")]);
    m_carrier_schedule_isSet = !json[QString("carrierSchedule")].isNull() && m_carrier_schedule_isValid;

    m_cubic_weight_settings_isValid = ::OpenAPI::fromJsonValue(m_cubic_weight_settings, json[QString("cubicWeightSettings")]);
    m_cubic_weight_settings_isSet = !json[QString("cubicWeightSettings")].isNull() && m_cubic_weight_settings_isValid;

    m_delivery_schedule_settings_isValid = ::OpenAPI::fromJsonValue(m_delivery_schedule_settings, json[QString("deliveryScheduleSettings")]);
    m_delivery_schedule_settings_isSet = !json[QString("deliveryScheduleSettings")].isNull() && m_delivery_schedule_settings_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_max_dimension_isValid = ::OpenAPI::fromJsonValue(m_max_dimension, json[QString("maxDimension")]);
    m_max_dimension_isSet = !json[QString("maxDimension")].isNull() && m_max_dimension_isValid;

    m_maximum_value_aceptable_isValid = ::OpenAPI::fromJsonValue(m_maximum_value_aceptable, json[QString("maximumValueAceptable")]);
    m_maximum_value_aceptable_isSet = !json[QString("maximumValueAceptable")].isNull() && m_maximum_value_aceptable_isValid;

    m_minimum_value_aceptable_isValid = ::OpenAPI::fromJsonValue(m_minimum_value_aceptable, json[QString("minimumValueAceptable")]);
    m_minimum_value_aceptable_isSet = !json[QString("minimumValueAceptable")].isNull() && m_minimum_value_aceptable_isValid;

    m_modal_settings_isValid = ::OpenAPI::fromJsonValue(m_modal_settings, json[QString("modalSettings")]);
    m_modal_settings_isSet = !json[QString("modalSettings")].isNull() && m_modal_settings_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_of_items_per_shipment_isValid = ::OpenAPI::fromJsonValue(m_number_of_items_per_shipment, json[QString("numberOfItemsPerShipment")]);
    m_number_of_items_per_shipment_isSet = !json[QString("numberOfItemsPerShipment")].isNull() && m_number_of_items_per_shipment_isValid;

    m_pickup_points_settings_isValid = ::OpenAPI::fromJsonValue(m_pickup_points_settings, json[QString("pickupPointsSettings")]);
    m_pickup_points_settings_isSet = !json[QString("pickupPointsSettings")].isNull() && m_pickup_points_settings_isValid;

    m_shipping_method_isValid = ::OpenAPI::fromJsonValue(m_shipping_method, json[QString("shippingMethod")]);
    m_shipping_method_isSet = !json[QString("shippingMethod")].isNull() && m_shipping_method_isValid;

    m_weekend_and_holidays_isValid = ::OpenAPI::fromJsonValue(m_weekend_and_holidays, json[QString("weekendAndHolidays")]);
    m_weekend_and_holidays_isSet = !json[QString("weekendAndHolidays")].isNull() && m_weekend_and_holidays_isValid;
}

QString OAIRequest_body::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequest_body::asJsonObject() const {
    QJsonObject obj;
    if (m_business_hour_settings.isSet()) {
        obj.insert(QString("businessHourSettings"), ::OpenAPI::toJsonValue(m_business_hour_settings));
    }
    if (m_carrier_schedule.size() > 0) {
        obj.insert(QString("carrierSchedule"), ::OpenAPI::toJsonValue(m_carrier_schedule));
    }
    if (m_cubic_weight_settings.isSet()) {
        obj.insert(QString("cubicWeightSettings"), ::OpenAPI::toJsonValue(m_cubic_weight_settings));
    }
    if (m_delivery_schedule_settings.isSet()) {
        obj.insert(QString("deliveryScheduleSettings"), ::OpenAPI::toJsonValue(m_delivery_schedule_settings));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_max_dimension.isSet()) {
        obj.insert(QString("maxDimension"), ::OpenAPI::toJsonValue(m_max_dimension));
    }
    if (m_maximum_value_aceptable_isSet) {
        obj.insert(QString("maximumValueAceptable"), ::OpenAPI::toJsonValue(m_maximum_value_aceptable));
    }
    if (m_minimum_value_aceptable_isSet) {
        obj.insert(QString("minimumValueAceptable"), ::OpenAPI::toJsonValue(m_minimum_value_aceptable));
    }
    if (m_modal_settings.isSet()) {
        obj.insert(QString("modalSettings"), ::OpenAPI::toJsonValue(m_modal_settings));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_of_items_per_shipment_isSet) {
        obj.insert(QString("numberOfItemsPerShipment"), ::OpenAPI::toJsonValue(m_number_of_items_per_shipment));
    }
    if (m_pickup_points_settings.isSet()) {
        obj.insert(QString("pickupPointsSettings"), ::OpenAPI::toJsonValue(m_pickup_points_settings));
    }
    if (m_shipping_method_isSet) {
        obj.insert(QString("shippingMethod"), ::OpenAPI::toJsonValue(m_shipping_method));
    }
    if (m_weekend_and_holidays.isSet()) {
        obj.insert(QString("weekendAndHolidays"), ::OpenAPI::toJsonValue(m_weekend_and_holidays));
    }
    return obj;
}

OAIBusinessHourSettings OAIRequest_body::getBusinessHourSettings() const {
    return m_business_hour_settings;
}
void OAIRequest_body::setBusinessHourSettings(const OAIBusinessHourSettings &business_hour_settings) {
    m_business_hour_settings = business_hour_settings;
    m_business_hour_settings_isSet = true;
}

bool OAIRequest_body::is_business_hour_settings_Set() const{
    return m_business_hour_settings_isSet;
}

bool OAIRequest_body::is_business_hour_settings_Valid() const{
    return m_business_hour_settings_isValid;
}

QList<OAICarrierSchedule_inner> OAIRequest_body::getCarrierSchedule() const {
    return m_carrier_schedule;
}
void OAIRequest_body::setCarrierSchedule(const QList<OAICarrierSchedule_inner> &carrier_schedule) {
    m_carrier_schedule = carrier_schedule;
    m_carrier_schedule_isSet = true;
}

bool OAIRequest_body::is_carrier_schedule_Set() const{
    return m_carrier_schedule_isSet;
}

bool OAIRequest_body::is_carrier_schedule_Valid() const{
    return m_carrier_schedule_isValid;
}

OAICubicWeightSettings OAIRequest_body::getCubicWeightSettings() const {
    return m_cubic_weight_settings;
}
void OAIRequest_body::setCubicWeightSettings(const OAICubicWeightSettings &cubic_weight_settings) {
    m_cubic_weight_settings = cubic_weight_settings;
    m_cubic_weight_settings_isSet = true;
}

bool OAIRequest_body::is_cubic_weight_settings_Set() const{
    return m_cubic_weight_settings_isSet;
}

bool OAIRequest_body::is_cubic_weight_settings_Valid() const{
    return m_cubic_weight_settings_isValid;
}

OAIDeliveryScheduleSettings OAIRequest_body::getDeliveryScheduleSettings() const {
    return m_delivery_schedule_settings;
}
void OAIRequest_body::setDeliveryScheduleSettings(const OAIDeliveryScheduleSettings &delivery_schedule_settings) {
    m_delivery_schedule_settings = delivery_schedule_settings;
    m_delivery_schedule_settings_isSet = true;
}

bool OAIRequest_body::is_delivery_schedule_settings_Set() const{
    return m_delivery_schedule_settings_isSet;
}

bool OAIRequest_body::is_delivery_schedule_settings_Valid() const{
    return m_delivery_schedule_settings_isValid;
}

QString OAIRequest_body::getId() const {
    return m_id;
}
void OAIRequest_body::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRequest_body::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRequest_body::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIRequest_body::isIsActive() const {
    return m_is_active;
}
void OAIRequest_body::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIRequest_body::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIRequest_body::is_is_active_Valid() const{
    return m_is_active_isValid;
}

OAIMaxDimension OAIRequest_body::getMaxDimension() const {
    return m_max_dimension;
}
void OAIRequest_body::setMaxDimension(const OAIMaxDimension &max_dimension) {
    m_max_dimension = max_dimension;
    m_max_dimension_isSet = true;
}

bool OAIRequest_body::is_max_dimension_Set() const{
    return m_max_dimension_isSet;
}

bool OAIRequest_body::is_max_dimension_Valid() const{
    return m_max_dimension_isValid;
}

double OAIRequest_body::getMaximumValueAceptable() const {
    return m_maximum_value_aceptable;
}
void OAIRequest_body::setMaximumValueAceptable(const double &maximum_value_aceptable) {
    m_maximum_value_aceptable = maximum_value_aceptable;
    m_maximum_value_aceptable_isSet = true;
}

bool OAIRequest_body::is_maximum_value_aceptable_Set() const{
    return m_maximum_value_aceptable_isSet;
}

bool OAIRequest_body::is_maximum_value_aceptable_Valid() const{
    return m_maximum_value_aceptable_isValid;
}

double OAIRequest_body::getMinimumValueAceptable() const {
    return m_minimum_value_aceptable;
}
void OAIRequest_body::setMinimumValueAceptable(const double &minimum_value_aceptable) {
    m_minimum_value_aceptable = minimum_value_aceptable;
    m_minimum_value_aceptable_isSet = true;
}

bool OAIRequest_body::is_minimum_value_aceptable_Set() const{
    return m_minimum_value_aceptable_isSet;
}

bool OAIRequest_body::is_minimum_value_aceptable_Valid() const{
    return m_minimum_value_aceptable_isValid;
}

OAIModalSettings OAIRequest_body::getModalSettings() const {
    return m_modal_settings;
}
void OAIRequest_body::setModalSettings(const OAIModalSettings &modal_settings) {
    m_modal_settings = modal_settings;
    m_modal_settings_isSet = true;
}

bool OAIRequest_body::is_modal_settings_Set() const{
    return m_modal_settings_isSet;
}

bool OAIRequest_body::is_modal_settings_Valid() const{
    return m_modal_settings_isValid;
}

QString OAIRequest_body::getName() const {
    return m_name;
}
void OAIRequest_body::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRequest_body::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRequest_body::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIRequest_body::getNumberOfItemsPerShipment() const {
    return m_number_of_items_per_shipment;
}
void OAIRequest_body::setNumberOfItemsPerShipment(const qint32 &number_of_items_per_shipment) {
    m_number_of_items_per_shipment = number_of_items_per_shipment;
    m_number_of_items_per_shipment_isSet = true;
}

bool OAIRequest_body::is_number_of_items_per_shipment_Set() const{
    return m_number_of_items_per_shipment_isSet;
}

bool OAIRequest_body::is_number_of_items_per_shipment_Valid() const{
    return m_number_of_items_per_shipment_isValid;
}

OAIPickupPointsSettings OAIRequest_body::getPickupPointsSettings() const {
    return m_pickup_points_settings;
}
void OAIRequest_body::setPickupPointsSettings(const OAIPickupPointsSettings &pickup_points_settings) {
    m_pickup_points_settings = pickup_points_settings;
    m_pickup_points_settings_isSet = true;
}

bool OAIRequest_body::is_pickup_points_settings_Set() const{
    return m_pickup_points_settings_isSet;
}

bool OAIRequest_body::is_pickup_points_settings_Valid() const{
    return m_pickup_points_settings_isValid;
}

QString OAIRequest_body::getShippingMethod() const {
    return m_shipping_method;
}
void OAIRequest_body::setShippingMethod(const QString &shipping_method) {
    m_shipping_method = shipping_method;
    m_shipping_method_isSet = true;
}

bool OAIRequest_body::is_shipping_method_Set() const{
    return m_shipping_method_isSet;
}

bool OAIRequest_body::is_shipping_method_Valid() const{
    return m_shipping_method_isValid;
}

OAIWeekendAndHolidays OAIRequest_body::getWeekendAndHolidays() const {
    return m_weekend_and_holidays;
}
void OAIRequest_body::setWeekendAndHolidays(const OAIWeekendAndHolidays &weekend_and_holidays) {
    m_weekend_and_holidays = weekend_and_holidays;
    m_weekend_and_holidays_isSet = true;
}

bool OAIRequest_body::is_weekend_and_holidays_Set() const{
    return m_weekend_and_holidays_isSet;
}

bool OAIRequest_body::is_weekend_and_holidays_Valid() const{
    return m_weekend_and_holidays_isValid;
}

bool OAIRequest_body::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_hour_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_schedule.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cubic_weight_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_schedule_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_value_aceptable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_value_aceptable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modal_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_items_per_shipment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_points_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekend_and_holidays.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequest_body::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_business_hour_settings_isValid && m_cubic_weight_settings_isValid && m_delivery_schedule_settings_isValid && m_id_isValid && m_is_active_isValid && m_max_dimension_isValid && m_maximum_value_aceptable_isValid && m_minimum_value_aceptable_isValid && m_modal_settings_isValid && m_name_isValid && m_number_of_items_per_shipment_isValid && m_pickup_points_settings_isValid && m_shipping_method_isValid && m_weekend_and_holidays_isValid && true;
}

} // namespace OpenAPI
