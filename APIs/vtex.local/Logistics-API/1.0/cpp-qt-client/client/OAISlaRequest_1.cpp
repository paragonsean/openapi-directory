/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlaRequest_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlaRequest_1::OAISlaRequest_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlaRequest_1::OAISlaRequest_1() {
    this->initializeModel();
}

OAISlaRequest_1::~OAISlaRequest_1() {}

void OAISlaRequest_1::initializeModel() {

    m_delivery_windows_isSet = false;
    m_delivery_windows_isValid = false;

    m_dock_id_isSet = false;
    m_dock_id_isValid = false;

    m_dock_time_isSet = false;
    m_dock_time_isValid = false;

    m_freight_table_id_isSet = false;
    m_freight_table_id_isValid = false;

    m_freight_table_name_isSet = false;
    m_freight_table_name_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_list_price_isSet = false;
    m_list_price_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_pickup_store_info_isSet = false;
    m_pickup_store_info_isValid = false;

    m_promotional_price_isSet = false;
    m_promotional_price_isValid = false;

    m_sla_type_isSet = false;
    m_sla_type_isValid = false;

    m_sla_type_name_isSet = false;
    m_sla_type_name_isValid = false;

    m_time_to_dock_plus_dock_time_isSet = false;
    m_time_to_dock_plus_dock_time_isValid = false;

    m_total_time_isSet = false;
    m_total_time_isValid = false;

    m_transit_time_isSet = false;
    m_transit_time_isValid = false;

    m_ware_house_id_isSet = false;
    m_ware_house_id_isValid = false;

    m_wms_end_point_isSet = false;
    m_wms_end_point_isValid = false;
}

void OAISlaRequest_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlaRequest_1::fromJsonObject(QJsonObject json) {

    m_delivery_windows_isValid = ::OpenAPI::fromJsonValue(m_delivery_windows, json[QString("deliveryWindows")]);
    m_delivery_windows_isSet = !json[QString("deliveryWindows")].isNull() && m_delivery_windows_isValid;

    m_dock_id_isValid = ::OpenAPI::fromJsonValue(m_dock_id, json[QString("dockId")]);
    m_dock_id_isSet = !json[QString("dockId")].isNull() && m_dock_id_isValid;

    m_dock_time_isValid = ::OpenAPI::fromJsonValue(m_dock_time, json[QString("dockTime")]);
    m_dock_time_isSet = !json[QString("dockTime")].isNull() && m_dock_time_isValid;

    m_freight_table_id_isValid = ::OpenAPI::fromJsonValue(m_freight_table_id, json[QString("freightTableId")]);
    m_freight_table_id_isSet = !json[QString("freightTableId")].isNull() && m_freight_table_id_isValid;

    m_freight_table_name_isValid = ::OpenAPI::fromJsonValue(m_freight_table_name, json[QString("freightTableName")]);
    m_freight_table_name_isSet = !json[QString("freightTableName")].isNull() && m_freight_table_name_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_list_price_isValid = ::OpenAPI::fromJsonValue(m_list_price, json[QString("listPrice")]);
    m_list_price_isSet = !json[QString("listPrice")].isNull() && m_list_price_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_pickup_store_info_isValid = ::OpenAPI::fromJsonValue(m_pickup_store_info, json[QString("pickupStoreInfo")]);
    m_pickup_store_info_isSet = !json[QString("pickupStoreInfo")].isNull() && m_pickup_store_info_isValid;

    m_promotional_price_isValid = ::OpenAPI::fromJsonValue(m_promotional_price, json[QString("promotionalPrice")]);
    m_promotional_price_isSet = !json[QString("promotionalPrice")].isNull() && m_promotional_price_isValid;

    m_sla_type_isValid = ::OpenAPI::fromJsonValue(m_sla_type, json[QString("slaType")]);
    m_sla_type_isSet = !json[QString("slaType")].isNull() && m_sla_type_isValid;

    m_sla_type_name_isValid = ::OpenAPI::fromJsonValue(m_sla_type_name, json[QString("slaTypeName")]);
    m_sla_type_name_isSet = !json[QString("slaTypeName")].isNull() && m_sla_type_name_isValid;

    m_time_to_dock_plus_dock_time_isValid = ::OpenAPI::fromJsonValue(m_time_to_dock_plus_dock_time, json[QString("timeToDockPlusDockTime")]);
    m_time_to_dock_plus_dock_time_isSet = !json[QString("timeToDockPlusDockTime")].isNull() && m_time_to_dock_plus_dock_time_isValid;

    m_total_time_isValid = ::OpenAPI::fromJsonValue(m_total_time, json[QString("totalTime")]);
    m_total_time_isSet = !json[QString("totalTime")].isNull() && m_total_time_isValid;

    m_transit_time_isValid = ::OpenAPI::fromJsonValue(m_transit_time, json[QString("transitTime")]);
    m_transit_time_isSet = !json[QString("transitTime")].isNull() && m_transit_time_isValid;

    m_ware_house_id_isValid = ::OpenAPI::fromJsonValue(m_ware_house_id, json[QString("wareHouseId")]);
    m_ware_house_id_isSet = !json[QString("wareHouseId")].isNull() && m_ware_house_id_isValid;

    m_wms_end_point_isValid = ::OpenAPI::fromJsonValue(m_wms_end_point, json[QString("wmsEndPoint")]);
    m_wms_end_point_isSet = !json[QString("wmsEndPoint")].isNull() && m_wms_end_point_isValid;
}

QString OAISlaRequest_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlaRequest_1::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_windows_isSet) {
        obj.insert(QString("deliveryWindows"), ::OpenAPI::toJsonValue(m_delivery_windows));
    }
    if (m_dock_id_isSet) {
        obj.insert(QString("dockId"), ::OpenAPI::toJsonValue(m_dock_id));
    }
    if (m_dock_time_isSet) {
        obj.insert(QString("dockTime"), ::OpenAPI::toJsonValue(m_dock_time));
    }
    if (m_freight_table_id_isSet) {
        obj.insert(QString("freightTableId"), ::OpenAPI::toJsonValue(m_freight_table_id));
    }
    if (m_freight_table_name_isSet) {
        obj.insert(QString("freightTableName"), ::OpenAPI::toJsonValue(m_freight_table_name));
    }
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_list_price_isSet) {
        obj.insert(QString("listPrice"), ::OpenAPI::toJsonValue(m_list_price));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_pickup_store_info_isSet) {
        obj.insert(QString("pickupStoreInfo"), ::OpenAPI::toJsonValue(m_pickup_store_info));
    }
    if (m_promotional_price_isSet) {
        obj.insert(QString("promotionalPrice"), ::OpenAPI::toJsonValue(m_promotional_price));
    }
    if (m_sla_type_isSet) {
        obj.insert(QString("slaType"), ::OpenAPI::toJsonValue(m_sla_type));
    }
    if (m_sla_type_name_isSet) {
        obj.insert(QString("slaTypeName"), ::OpenAPI::toJsonValue(m_sla_type_name));
    }
    if (m_time_to_dock_plus_dock_time_isSet) {
        obj.insert(QString("timeToDockPlusDockTime"), ::OpenAPI::toJsonValue(m_time_to_dock_plus_dock_time));
    }
    if (m_total_time_isSet) {
        obj.insert(QString("totalTime"), ::OpenAPI::toJsonValue(m_total_time));
    }
    if (m_transit_time_isSet) {
        obj.insert(QString("transitTime"), ::OpenAPI::toJsonValue(m_transit_time));
    }
    if (m_ware_house_id_isSet) {
        obj.insert(QString("wareHouseId"), ::OpenAPI::toJsonValue(m_ware_house_id));
    }
    if (m_wms_end_point_isSet) {
        obj.insert(QString("wmsEndPoint"), ::OpenAPI::toJsonValue(m_wms_end_point));
    }
    return obj;
}

QString OAISlaRequest_1::getDeliveryWindows() const {
    return m_delivery_windows;
}
void OAISlaRequest_1::setDeliveryWindows(const QString &delivery_windows) {
    m_delivery_windows = delivery_windows;
    m_delivery_windows_isSet = true;
}

bool OAISlaRequest_1::is_delivery_windows_Set() const{
    return m_delivery_windows_isSet;
}

bool OAISlaRequest_1::is_delivery_windows_Valid() const{
    return m_delivery_windows_isValid;
}

QString OAISlaRequest_1::getDockId() const {
    return m_dock_id;
}
void OAISlaRequest_1::setDockId(const QString &dock_id) {
    m_dock_id = dock_id;
    m_dock_id_isSet = true;
}

bool OAISlaRequest_1::is_dock_id_Set() const{
    return m_dock_id_isSet;
}

bool OAISlaRequest_1::is_dock_id_Valid() const{
    return m_dock_id_isValid;
}

QString OAISlaRequest_1::getDockTime() const {
    return m_dock_time;
}
void OAISlaRequest_1::setDockTime(const QString &dock_time) {
    m_dock_time = dock_time;
    m_dock_time_isSet = true;
}

bool OAISlaRequest_1::is_dock_time_Set() const{
    return m_dock_time_isSet;
}

bool OAISlaRequest_1::is_dock_time_Valid() const{
    return m_dock_time_isValid;
}

QString OAISlaRequest_1::getFreightTableId() const {
    return m_freight_table_id;
}
void OAISlaRequest_1::setFreightTableId(const QString &freight_table_id) {
    m_freight_table_id = freight_table_id;
    m_freight_table_id_isSet = true;
}

bool OAISlaRequest_1::is_freight_table_id_Set() const{
    return m_freight_table_id_isSet;
}

bool OAISlaRequest_1::is_freight_table_id_Valid() const{
    return m_freight_table_id_isValid;
}

QString OAISlaRequest_1::getFreightTableName() const {
    return m_freight_table_name;
}
void OAISlaRequest_1::setFreightTableName(const QString &freight_table_name) {
    m_freight_table_name = freight_table_name;
    m_freight_table_name_isSet = true;
}

bool OAISlaRequest_1::is_freight_table_name_Set() const{
    return m_freight_table_name_isSet;
}

bool OAISlaRequest_1::is_freight_table_name_Valid() const{
    return m_freight_table_name_isValid;
}

OAIItem1_1 OAISlaRequest_1::getItem() const {
    return m_item;
}
void OAISlaRequest_1::setItem(const OAIItem1_1 &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAISlaRequest_1::is_item_Set() const{
    return m_item_isSet;
}

bool OAISlaRequest_1::is_item_Valid() const{
    return m_item_isValid;
}

double OAISlaRequest_1::getListPrice() const {
    return m_list_price;
}
void OAISlaRequest_1::setListPrice(const double &list_price) {
    m_list_price = list_price;
    m_list_price_isSet = true;
}

bool OAISlaRequest_1::is_list_price_Set() const{
    return m_list_price_isSet;
}

bool OAISlaRequest_1::is_list_price_Valid() const{
    return m_list_price_isValid;
}

OAILocation1_1 OAISlaRequest_1::getLocation() const {
    return m_location;
}
void OAISlaRequest_1::setLocation(const OAILocation1_1 &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISlaRequest_1::is_location_Set() const{
    return m_location_isSet;
}

bool OAISlaRequest_1::is_location_Valid() const{
    return m_location_isValid;
}

QString OAISlaRequest_1::getPickupStoreInfo() const {
    return m_pickup_store_info;
}
void OAISlaRequest_1::setPickupStoreInfo(const QString &pickup_store_info) {
    m_pickup_store_info = pickup_store_info;
    m_pickup_store_info_isSet = true;
}

bool OAISlaRequest_1::is_pickup_store_info_Set() const{
    return m_pickup_store_info_isSet;
}

bool OAISlaRequest_1::is_pickup_store_info_Valid() const{
    return m_pickup_store_info_isValid;
}

double OAISlaRequest_1::getPromotionalPrice() const {
    return m_promotional_price;
}
void OAISlaRequest_1::setPromotionalPrice(const double &promotional_price) {
    m_promotional_price = promotional_price;
    m_promotional_price_isSet = true;
}

bool OAISlaRequest_1::is_promotional_price_Set() const{
    return m_promotional_price_isSet;
}

bool OAISlaRequest_1::is_promotional_price_Valid() const{
    return m_promotional_price_isValid;
}

QString OAISlaRequest_1::getSlaType() const {
    return m_sla_type;
}
void OAISlaRequest_1::setSlaType(const QString &sla_type) {
    m_sla_type = sla_type;
    m_sla_type_isSet = true;
}

bool OAISlaRequest_1::is_sla_type_Set() const{
    return m_sla_type_isSet;
}

bool OAISlaRequest_1::is_sla_type_Valid() const{
    return m_sla_type_isValid;
}

QString OAISlaRequest_1::getSlaTypeName() const {
    return m_sla_type_name;
}
void OAISlaRequest_1::setSlaTypeName(const QString &sla_type_name) {
    m_sla_type_name = sla_type_name;
    m_sla_type_name_isSet = true;
}

bool OAISlaRequest_1::is_sla_type_name_Set() const{
    return m_sla_type_name_isSet;
}

bool OAISlaRequest_1::is_sla_type_name_Valid() const{
    return m_sla_type_name_isValid;
}

QString OAISlaRequest_1::getTimeToDockPlusDockTime() const {
    return m_time_to_dock_plus_dock_time;
}
void OAISlaRequest_1::setTimeToDockPlusDockTime(const QString &time_to_dock_plus_dock_time) {
    m_time_to_dock_plus_dock_time = time_to_dock_plus_dock_time;
    m_time_to_dock_plus_dock_time_isSet = true;
}

bool OAISlaRequest_1::is_time_to_dock_plus_dock_time_Set() const{
    return m_time_to_dock_plus_dock_time_isSet;
}

bool OAISlaRequest_1::is_time_to_dock_plus_dock_time_Valid() const{
    return m_time_to_dock_plus_dock_time_isValid;
}

QString OAISlaRequest_1::getTotalTime() const {
    return m_total_time;
}
void OAISlaRequest_1::setTotalTime(const QString &total_time) {
    m_total_time = total_time;
    m_total_time_isSet = true;
}

bool OAISlaRequest_1::is_total_time_Set() const{
    return m_total_time_isSet;
}

bool OAISlaRequest_1::is_total_time_Valid() const{
    return m_total_time_isValid;
}

QString OAISlaRequest_1::getTransitTime() const {
    return m_transit_time;
}
void OAISlaRequest_1::setTransitTime(const QString &transit_time) {
    m_transit_time = transit_time;
    m_transit_time_isSet = true;
}

bool OAISlaRequest_1::is_transit_time_Set() const{
    return m_transit_time_isSet;
}

bool OAISlaRequest_1::is_transit_time_Valid() const{
    return m_transit_time_isValid;
}

QString OAISlaRequest_1::getWareHouseId() const {
    return m_ware_house_id;
}
void OAISlaRequest_1::setWareHouseId(const QString &ware_house_id) {
    m_ware_house_id = ware_house_id;
    m_ware_house_id_isSet = true;
}

bool OAISlaRequest_1::is_ware_house_id_Set() const{
    return m_ware_house_id_isSet;
}

bool OAISlaRequest_1::is_ware_house_id_Valid() const{
    return m_ware_house_id_isValid;
}

QString OAISlaRequest_1::getWmsEndPoint() const {
    return m_wms_end_point;
}
void OAISlaRequest_1::setWmsEndPoint(const QString &wms_end_point) {
    m_wms_end_point = wms_end_point;
    m_wms_end_point_isSet = true;
}

bool OAISlaRequest_1::is_wms_end_point_Set() const{
    return m_wms_end_point_isSet;
}

bool OAISlaRequest_1::is_wms_end_point_Valid() const{
    return m_wms_end_point_isValid;
}

bool OAISlaRequest_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_windows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dock_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_table_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_store_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotional_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sla_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sla_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_dock_plus_dock_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transit_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ware_house_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wms_end_point_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlaRequest_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delivery_windows_isValid && m_dock_id_isValid && m_dock_time_isValid && m_freight_table_id_isValid && m_freight_table_name_isValid && m_item_isValid && m_list_price_isValid && m_location_isValid && m_pickup_store_info_isValid && m_promotional_price_isValid && m_sla_type_isValid && m_sla_type_name_isValid && m_time_to_dock_plus_dock_time_isValid && m_total_time_isValid && m_transit_time_isValid && m_ware_house_id_isValid && m_wms_end_point_isValid && true;
}

} // namespace OpenAPI
