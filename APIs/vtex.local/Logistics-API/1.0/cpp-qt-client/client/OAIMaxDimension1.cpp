/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaxDimension1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaxDimension1::OAIMaxDimension1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaxDimension1::OAIMaxDimension1() {
    this->initializeModel();
}

OAIMaxDimension1::~OAIMaxDimension1() {}

void OAIMaxDimension1::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_max_sum_dimension_isSet = false;
    m_max_sum_dimension_isValid = false;
}

void OAIMaxDimension1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaxDimension1::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_max_sum_dimension_isValid = ::OpenAPI::fromJsonValue(m_max_sum_dimension, json[QString("maxSumDimension")]);
    m_max_sum_dimension_isSet = !json[QString("maxSumDimension")].isNull() && m_max_sum_dimension_isValid;
}

QString OAIMaxDimension1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaxDimension1::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_max_sum_dimension_isSet) {
        obj.insert(QString("maxSumDimension"), ::OpenAPI::toJsonValue(m_max_sum_dimension));
    }
    return obj;
}

QString OAIMaxDimension1::getHeight() const {
    return m_height;
}
void OAIMaxDimension1::setHeight(const QString &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIMaxDimension1::is_height_Set() const{
    return m_height_isSet;
}

bool OAIMaxDimension1::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIMaxDimension1::getLength() const {
    return m_length;
}
void OAIMaxDimension1::setLength(const QString &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIMaxDimension1::is_length_Set() const{
    return m_length_isSet;
}

bool OAIMaxDimension1::is_length_Valid() const{
    return m_length_isValid;
}

QString OAIMaxDimension1::getMaxSumDimension() const {
    return m_max_sum_dimension;
}
void OAIMaxDimension1::setMaxSumDimension(const QString &max_sum_dimension) {
    m_max_sum_dimension = max_sum_dimension;
    m_max_sum_dimension_isSet = true;
}

bool OAIMaxDimension1::is_max_sum_dimension_Set() const{
    return m_max_sum_dimension_isSet;
}

bool OAIMaxDimension1::is_max_sum_dimension_Valid() const{
    return m_max_sum_dimension_isValid;
}

bool OAIMaxDimension1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_sum_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaxDimension1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_height_isValid && m_length_isValid && m_max_sum_dimension_isValid && true;
}

} // namespace OpenAPI
