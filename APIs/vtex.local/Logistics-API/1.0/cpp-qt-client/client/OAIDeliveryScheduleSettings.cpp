/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryScheduleSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryScheduleSettings::OAIDeliveryScheduleSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryScheduleSettings::OAIDeliveryScheduleSettings() {
    this->initializeModel();
}

OAIDeliveryScheduleSettings::~OAIDeliveryScheduleSettings() {}

void OAIDeliveryScheduleSettings::initializeModel() {

    m_day_of_week_for_delivery_isSet = false;
    m_day_of_week_for_delivery_isValid = false;

    m_max_range_delivery_isSet = false;
    m_max_range_delivery_isValid = false;

    m_use_delivery_schedule_isSet = false;
    m_use_delivery_schedule_isValid = false;
}

void OAIDeliveryScheduleSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryScheduleSettings::fromJsonObject(QJsonObject json) {

    m_day_of_week_for_delivery_isValid = ::OpenAPI::fromJsonValue(m_day_of_week_for_delivery, json[QString("dayOfWeekForDelivery")]);
    m_day_of_week_for_delivery_isSet = !json[QString("dayOfWeekForDelivery")].isNull() && m_day_of_week_for_delivery_isValid;

    m_max_range_delivery_isValid = ::OpenAPI::fromJsonValue(m_max_range_delivery, json[QString("maxRangeDelivery")]);
    m_max_range_delivery_isSet = !json[QString("maxRangeDelivery")].isNull() && m_max_range_delivery_isValid;

    m_use_delivery_schedule_isValid = ::OpenAPI::fromJsonValue(m_use_delivery_schedule, json[QString("useDeliverySchedule")]);
    m_use_delivery_schedule_isSet = !json[QString("useDeliverySchedule")].isNull() && m_use_delivery_schedule_isValid;
}

QString OAIDeliveryScheduleSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryScheduleSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_week_for_delivery.size() > 0) {
        obj.insert(QString("dayOfWeekForDelivery"), ::OpenAPI::toJsonValue(m_day_of_week_for_delivery));
    }
    if (m_max_range_delivery_isSet) {
        obj.insert(QString("maxRangeDelivery"), ::OpenAPI::toJsonValue(m_max_range_delivery));
    }
    if (m_use_delivery_schedule_isSet) {
        obj.insert(QString("useDeliverySchedule"), ::OpenAPI::toJsonValue(m_use_delivery_schedule));
    }
    return obj;
}

QList<OAIDayOfWeekForDelivery_inner> OAIDeliveryScheduleSettings::getDayOfWeekForDelivery() const {
    return m_day_of_week_for_delivery;
}
void OAIDeliveryScheduleSettings::setDayOfWeekForDelivery(const QList<OAIDayOfWeekForDelivery_inner> &day_of_week_for_delivery) {
    m_day_of_week_for_delivery = day_of_week_for_delivery;
    m_day_of_week_for_delivery_isSet = true;
}

bool OAIDeliveryScheduleSettings::is_day_of_week_for_delivery_Set() const{
    return m_day_of_week_for_delivery_isSet;
}

bool OAIDeliveryScheduleSettings::is_day_of_week_for_delivery_Valid() const{
    return m_day_of_week_for_delivery_isValid;
}

double OAIDeliveryScheduleSettings::getMaxRangeDelivery() const {
    return m_max_range_delivery;
}
void OAIDeliveryScheduleSettings::setMaxRangeDelivery(const double &max_range_delivery) {
    m_max_range_delivery = max_range_delivery;
    m_max_range_delivery_isSet = true;
}

bool OAIDeliveryScheduleSettings::is_max_range_delivery_Set() const{
    return m_max_range_delivery_isSet;
}

bool OAIDeliveryScheduleSettings::is_max_range_delivery_Valid() const{
    return m_max_range_delivery_isValid;
}

bool OAIDeliveryScheduleSettings::isUseDeliverySchedule() const {
    return m_use_delivery_schedule;
}
void OAIDeliveryScheduleSettings::setUseDeliverySchedule(const bool &use_delivery_schedule) {
    m_use_delivery_schedule = use_delivery_schedule;
    m_use_delivery_schedule_isSet = true;
}

bool OAIDeliveryScheduleSettings::is_use_delivery_schedule_Set() const{
    return m_use_delivery_schedule_isSet;
}

bool OAIDeliveryScheduleSettings::is_use_delivery_schedule_Valid() const{
    return m_use_delivery_schedule_isValid;
}

bool OAIDeliveryScheduleSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_week_for_delivery.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_range_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_delivery_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryScheduleSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_day_of_week_for_delivery_isValid && m_max_range_delivery_isValid && m_use_delivery_schedule_isValid && true;
}

} // namespace OpenAPI
