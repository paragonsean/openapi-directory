/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModalSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModalSettings::OAIModalSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModalSettings::OAIModalSettings() {
    this->initializeModel();
}

OAIModalSettings::~OAIModalSettings() {}

void OAIModalSettings::initializeModel() {

    m_modals_isSet = false;
    m_modals_isValid = false;

    m_use_only_items_with_defined_modal_isSet = false;
    m_use_only_items_with_defined_modal_isValid = false;
}

void OAIModalSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModalSettings::fromJsonObject(QJsonObject json) {

    m_modals_isValid = ::OpenAPI::fromJsonValue(m_modals, json[QString("modals")]);
    m_modals_isSet = !json[QString("modals")].isNull() && m_modals_isValid;

    m_use_only_items_with_defined_modal_isValid = ::OpenAPI::fromJsonValue(m_use_only_items_with_defined_modal, json[QString("useOnlyItemsWithDefinedModal")]);
    m_use_only_items_with_defined_modal_isSet = !json[QString("useOnlyItemsWithDefinedModal")].isNull() && m_use_only_items_with_defined_modal_isValid;
}

QString OAIModalSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModalSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_modals.size() > 0) {
        obj.insert(QString("modals"), ::OpenAPI::toJsonValue(m_modals));
    }
    if (m_use_only_items_with_defined_modal_isSet) {
        obj.insert(QString("useOnlyItemsWithDefinedModal"), ::OpenAPI::toJsonValue(m_use_only_items_with_defined_modal));
    }
    return obj;
}

QList<QJsonValue> OAIModalSettings::getModals() const {
    return m_modals;
}
void OAIModalSettings::setModals(const QList<QJsonValue> &modals) {
    m_modals = modals;
    m_modals_isSet = true;
}

bool OAIModalSettings::is_modals_Set() const{
    return m_modals_isSet;
}

bool OAIModalSettings::is_modals_Valid() const{
    return m_modals_isValid;
}

bool OAIModalSettings::isUseOnlyItemsWithDefinedModal() const {
    return m_use_only_items_with_defined_modal;
}
void OAIModalSettings::setUseOnlyItemsWithDefinedModal(const bool &use_only_items_with_defined_modal) {
    m_use_only_items_with_defined_modal = use_only_items_with_defined_modal;
    m_use_only_items_with_defined_modal_isSet = true;
}

bool OAIModalSettings::is_use_only_items_with_defined_modal_Set() const{
    return m_use_only_items_with_defined_modal_isSet;
}

bool OAIModalSettings::is_use_only_items_with_defined_modal_Valid() const{
    return m_use_only_items_with_defined_modal_isValid;
}

bool OAIModalSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_modals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_only_items_with_defined_modal_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModalSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_modals_isValid && m_use_only_items_with_defined_modal_isValid && true;
}

} // namespace OpenAPI
