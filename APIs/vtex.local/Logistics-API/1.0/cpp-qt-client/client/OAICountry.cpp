/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountry::OAICountry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountry::OAICountry() {
    this->initializeModel();
}

OAICountry::~OAICountry() {}

void OAICountry::initializeModel() {

    m_acronym_isSet = false;
    m_acronym_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICountry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountry::fromJsonObject(QJsonObject json) {

    m_acronym_isValid = ::OpenAPI::fromJsonValue(m_acronym, json[QString("acronym")]);
    m_acronym_isSet = !json[QString("acronym")].isNull() && m_acronym_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICountry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountry::asJsonObject() const {
    QJsonObject obj;
    if (m_acronym_isSet) {
        obj.insert(QString("acronym"), ::OpenAPI::toJsonValue(m_acronym));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAICountry::getAcronym() const {
    return m_acronym;
}
void OAICountry::setAcronym(const QString &acronym) {
    m_acronym = acronym;
    m_acronym_isSet = true;
}

bool OAICountry::is_acronym_Set() const{
    return m_acronym_isSet;
}

bool OAICountry::is_acronym_Valid() const{
    return m_acronym_isValid;
}

QString OAICountry::getName() const {
    return m_name;
}
void OAICountry::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICountry::is_name_Set() const{
    return m_name_isSet;
}

bool OAICountry::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICountry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acronym_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acronym_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
