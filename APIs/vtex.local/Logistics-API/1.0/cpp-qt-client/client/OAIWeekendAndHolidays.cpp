/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWeekendAndHolidays.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWeekendAndHolidays::OAIWeekendAndHolidays(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWeekendAndHolidays::OAIWeekendAndHolidays() {
    this->initializeModel();
}

OAIWeekendAndHolidays::~OAIWeekendAndHolidays() {}

void OAIWeekendAndHolidays::initializeModel() {

    m_holiday_isSet = false;
    m_holiday_isValid = false;

    m_saturday_isSet = false;
    m_saturday_isValid = false;

    m_sunday_isSet = false;
    m_sunday_isValid = false;
}

void OAIWeekendAndHolidays::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWeekendAndHolidays::fromJsonObject(QJsonObject json) {

    m_holiday_isValid = ::OpenAPI::fromJsonValue(m_holiday, json[QString("holiday")]);
    m_holiday_isSet = !json[QString("holiday")].isNull() && m_holiday_isValid;

    m_saturday_isValid = ::OpenAPI::fromJsonValue(m_saturday, json[QString("saturday")]);
    m_saturday_isSet = !json[QString("saturday")].isNull() && m_saturday_isValid;

    m_sunday_isValid = ::OpenAPI::fromJsonValue(m_sunday, json[QString("sunday")]);
    m_sunday_isSet = !json[QString("sunday")].isNull() && m_sunday_isValid;
}

QString OAIWeekendAndHolidays::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWeekendAndHolidays::asJsonObject() const {
    QJsonObject obj;
    if (m_holiday_isSet) {
        obj.insert(QString("holiday"), ::OpenAPI::toJsonValue(m_holiday));
    }
    if (m_saturday_isSet) {
        obj.insert(QString("saturday"), ::OpenAPI::toJsonValue(m_saturday));
    }
    if (m_sunday_isSet) {
        obj.insert(QString("sunday"), ::OpenAPI::toJsonValue(m_sunday));
    }
    return obj;
}

bool OAIWeekendAndHolidays::isHoliday() const {
    return m_holiday;
}
void OAIWeekendAndHolidays::setHoliday(const bool &holiday) {
    m_holiday = holiday;
    m_holiday_isSet = true;
}

bool OAIWeekendAndHolidays::is_holiday_Set() const{
    return m_holiday_isSet;
}

bool OAIWeekendAndHolidays::is_holiday_Valid() const{
    return m_holiday_isValid;
}

bool OAIWeekendAndHolidays::isSaturday() const {
    return m_saturday;
}
void OAIWeekendAndHolidays::setSaturday(const bool &saturday) {
    m_saturday = saturday;
    m_saturday_isSet = true;
}

bool OAIWeekendAndHolidays::is_saturday_Set() const{
    return m_saturday_isSet;
}

bool OAIWeekendAndHolidays::is_saturday_Valid() const{
    return m_saturday_isValid;
}

bool OAIWeekendAndHolidays::isSunday() const {
    return m_sunday;
}
void OAIWeekendAndHolidays::setSunday(const bool &sunday) {
    m_sunday = sunday;
    m_sunday_isSet = true;
}

bool OAIWeekendAndHolidays::is_sunday_Set() const{
    return m_sunday_isSet;
}

bool OAIWeekendAndHolidays::is_sunday_Valid() const{
    return m_sunday_isValid;
}

bool OAIWeekendAndHolidays::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_holiday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saturday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sunday_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWeekendAndHolidays::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_holiday_isValid && m_saturday_isValid && m_sunday_isValid && true;
}

} // namespace OpenAPI
