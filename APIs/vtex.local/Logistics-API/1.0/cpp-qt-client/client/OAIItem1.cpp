/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem1::OAIItem1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem1::OAIItem1() {
    this->initializeModel();
}

OAIItem1::~OAIItem1() {}

void OAIItem1::initializeModel() {

    m_additional_handling_time_isSet = false;
    m_additional_handling_time_isValid = false;

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_group_item_id_isSet = false;
    m_group_item_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kit_item_isSet = false;
    m_kit_item_isValid = false;

    m_modal_isSet = false;
    m_modal_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_unlimited_quantity_isSet = false;
    m_unlimited_quantity_isValid = false;
}

void OAIItem1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem1::fromJsonObject(QJsonObject json) {

    m_additional_handling_time_isValid = ::OpenAPI::fromJsonValue(m_additional_handling_time, json[QString("additionalHandlingTime")]);
    m_additional_handling_time_isSet = !json[QString("additionalHandlingTime")].isNull() && m_additional_handling_time_isValid;

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_group_item_id_isValid = ::OpenAPI::fromJsonValue(m_group_item_id, json[QString("groupItemId")]);
    m_group_item_id_isSet = !json[QString("groupItemId")].isNull() && m_group_item_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kit_item_isValid = ::OpenAPI::fromJsonValue(m_kit_item, json[QString("kitItem")]);
    m_kit_item_isSet = !json[QString("kitItem")].isNull() && m_kit_item_isValid;

    m_modal_isValid = ::OpenAPI::fromJsonValue(m_modal, json[QString("modal")]);
    m_modal_isSet = !json[QString("modal")].isNull() && m_modal_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_unlimited_quantity_isValid = ::OpenAPI::fromJsonValue(m_unlimited_quantity, json[QString("unlimitedQuantity")]);
    m_unlimited_quantity_isSet = !json[QString("unlimitedQuantity")].isNull() && m_unlimited_quantity_isValid;
}

QString OAIItem1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem1::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_handling_time_isSet) {
        obj.insert(QString("additionalHandlingTime"), ::OpenAPI::toJsonValue(m_additional_handling_time));
    }
    if (m_dimension.isSet()) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_group_item_id_isSet) {
        obj.insert(QString("groupItemId"), ::OpenAPI::toJsonValue(m_group_item_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kit_item.size() > 0) {
        obj.insert(QString("kitItem"), ::OpenAPI::toJsonValue(m_kit_item));
    }
    if (m_modal_isSet) {
        obj.insert(QString("modal"), ::OpenAPI::toJsonValue(m_modal));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_unlimited_quantity_isSet) {
        obj.insert(QString("unlimitedQuantity"), ::OpenAPI::toJsonValue(m_unlimited_quantity));
    }
    return obj;
}

QString OAIItem1::getAdditionalHandlingTime() const {
    return m_additional_handling_time;
}
void OAIItem1::setAdditionalHandlingTime(const QString &additional_handling_time) {
    m_additional_handling_time = additional_handling_time;
    m_additional_handling_time_isSet = true;
}

bool OAIItem1::is_additional_handling_time_Set() const{
    return m_additional_handling_time_isSet;
}

bool OAIItem1::is_additional_handling_time_Valid() const{
    return m_additional_handling_time_isValid;
}

OAIDimension1_1 OAIItem1::getDimension() const {
    return m_dimension;
}
void OAIItem1::setDimension(const OAIDimension1_1 &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIItem1::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIItem1::is_dimension_Valid() const{
    return m_dimension_isValid;
}

QString OAIItem1::getGroupItemId() const {
    return m_group_item_id;
}
void OAIItem1::setGroupItemId(const QString &group_item_id) {
    m_group_item_id = group_item_id;
    m_group_item_id_isSet = true;
}

bool OAIItem1::is_group_item_id_Set() const{
    return m_group_item_id_isSet;
}

bool OAIItem1::is_group_item_id_Valid() const{
    return m_group_item_id_isValid;
}

QString OAIItem1::getId() const {
    return m_id;
}
void OAIItem1::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItem1::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItem1::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIItem1::getKitItem() const {
    return m_kit_item;
}
void OAIItem1::setKitItem(const QList<QString> &kit_item) {
    m_kit_item = kit_item;
    m_kit_item_isSet = true;
}

bool OAIItem1::is_kit_item_Set() const{
    return m_kit_item_isSet;
}

bool OAIItem1::is_kit_item_Valid() const{
    return m_kit_item_isValid;
}

QString OAIItem1::getModal() const {
    return m_modal;
}
void OAIItem1::setModal(const QString &modal) {
    m_modal = modal;
    m_modal_isSet = true;
}

bool OAIItem1::is_modal_Set() const{
    return m_modal_isSet;
}

bool OAIItem1::is_modal_Valid() const{
    return m_modal_isValid;
}

double OAIItem1::getPrice() const {
    return m_price;
}
void OAIItem1::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIItem1::is_price_Set() const{
    return m_price_isSet;
}

bool OAIItem1::is_price_Valid() const{
    return m_price_isValid;
}

qint32 OAIItem1::getQuantity() const {
    return m_quantity;
}
void OAIItem1::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIItem1::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIItem1::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIItem1::isUnlimitedQuantity() const {
    return m_unlimited_quantity;
}
void OAIItem1::setUnlimitedQuantity(const bool &unlimited_quantity) {
    m_unlimited_quantity = unlimited_quantity;
    m_unlimited_quantity_isSet = true;
}

bool OAIItem1::is_unlimited_quantity_Set() const{
    return m_unlimited_quantity_isSet;
}

bool OAIItem1::is_unlimited_quantity_Valid() const{
    return m_unlimited_quantity_isValid;
}

bool OAIItem1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_handling_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kit_item.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlimited_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_additional_handling_time_isValid && m_dimension_isValid && m_group_item_id_isValid && m_id_isValid && m_kit_item_isValid && m_modal_isValid && m_price_isValid && m_quantity_isValid && m_unlimited_quantity_isValid && true;
}

} // namespace OpenAPI
