/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBalance_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBalance_1::OAIBalance_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBalance_1::OAIBalance_1() {
    this->initializeModel();
}

OAIBalance_1::~OAIBalance_1() {}

void OAIBalance_1::initializeModel() {

    m_has_unlimited_quantity_isSet = false;
    m_has_unlimited_quantity_isValid = false;

    m_reserved_quantity_isSet = false;
    m_reserved_quantity_isValid = false;

    m_total_quantity_isSet = false;
    m_total_quantity_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;

    m_warehouse_name_isSet = false;
    m_warehouse_name_isValid = false;
}

void OAIBalance_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBalance_1::fromJsonObject(QJsonObject json) {

    m_has_unlimited_quantity_isValid = ::OpenAPI::fromJsonValue(m_has_unlimited_quantity, json[QString("hasUnlimitedQuantity")]);
    m_has_unlimited_quantity_isSet = !json[QString("hasUnlimitedQuantity")].isNull() && m_has_unlimited_quantity_isValid;

    m_reserved_quantity_isValid = ::OpenAPI::fromJsonValue(m_reserved_quantity, json[QString("reservedQuantity")]);
    m_reserved_quantity_isSet = !json[QString("reservedQuantity")].isNull() && m_reserved_quantity_isValid;

    m_total_quantity_isValid = ::OpenAPI::fromJsonValue(m_total_quantity, json[QString("totalQuantity")]);
    m_total_quantity_isSet = !json[QString("totalQuantity")].isNull() && m_total_quantity_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouseId")]);
    m_warehouse_id_isSet = !json[QString("warehouseId")].isNull() && m_warehouse_id_isValid;

    m_warehouse_name_isValid = ::OpenAPI::fromJsonValue(m_warehouse_name, json[QString("warehouseName")]);
    m_warehouse_name_isSet = !json[QString("warehouseName")].isNull() && m_warehouse_name_isValid;
}

QString OAIBalance_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBalance_1::asJsonObject() const {
    QJsonObject obj;
    if (m_has_unlimited_quantity_isSet) {
        obj.insert(QString("hasUnlimitedQuantity"), ::OpenAPI::toJsonValue(m_has_unlimited_quantity));
    }
    if (m_reserved_quantity_isSet) {
        obj.insert(QString("reservedQuantity"), ::OpenAPI::toJsonValue(m_reserved_quantity));
    }
    if (m_total_quantity_isSet) {
        obj.insert(QString("totalQuantity"), ::OpenAPI::toJsonValue(m_total_quantity));
    }
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouseId"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    if (m_warehouse_name_isSet) {
        obj.insert(QString("warehouseName"), ::OpenAPI::toJsonValue(m_warehouse_name));
    }
    return obj;
}

bool OAIBalance_1::isHasUnlimitedQuantity() const {
    return m_has_unlimited_quantity;
}
void OAIBalance_1::setHasUnlimitedQuantity(const bool &has_unlimited_quantity) {
    m_has_unlimited_quantity = has_unlimited_quantity;
    m_has_unlimited_quantity_isSet = true;
}

bool OAIBalance_1::is_has_unlimited_quantity_Set() const{
    return m_has_unlimited_quantity_isSet;
}

bool OAIBalance_1::is_has_unlimited_quantity_Valid() const{
    return m_has_unlimited_quantity_isValid;
}

qint32 OAIBalance_1::getReservedQuantity() const {
    return m_reserved_quantity;
}
void OAIBalance_1::setReservedQuantity(const qint32 &reserved_quantity) {
    m_reserved_quantity = reserved_quantity;
    m_reserved_quantity_isSet = true;
}

bool OAIBalance_1::is_reserved_quantity_Set() const{
    return m_reserved_quantity_isSet;
}

bool OAIBalance_1::is_reserved_quantity_Valid() const{
    return m_reserved_quantity_isValid;
}

qint32 OAIBalance_1::getTotalQuantity() const {
    return m_total_quantity;
}
void OAIBalance_1::setTotalQuantity(const qint32 &total_quantity) {
    m_total_quantity = total_quantity;
    m_total_quantity_isSet = true;
}

bool OAIBalance_1::is_total_quantity_Set() const{
    return m_total_quantity_isSet;
}

bool OAIBalance_1::is_total_quantity_Valid() const{
    return m_total_quantity_isValid;
}

QString OAIBalance_1::getWarehouseId() const {
    return m_warehouse_id;
}
void OAIBalance_1::setWarehouseId(const QString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAIBalance_1::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAIBalance_1::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

QString OAIBalance_1::getWarehouseName() const {
    return m_warehouse_name;
}
void OAIBalance_1::setWarehouseName(const QString &warehouse_name) {
    m_warehouse_name = warehouse_name;
    m_warehouse_name_isSet = true;
}

bool OAIBalance_1::is_warehouse_name_Set() const{
    return m_warehouse_name_isSet;
}

bool OAIBalance_1::is_warehouse_name_Valid() const{
    return m_warehouse_name_isValid;
}

bool OAIBalance_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_unlimited_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBalance_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_has_unlimited_quantity_isValid && m_reserved_quantity_isValid && m_total_quantity_isValid && m_warehouse_id_isValid && m_warehouse_name_isValid && true;
}

} // namespace OpenAPI
