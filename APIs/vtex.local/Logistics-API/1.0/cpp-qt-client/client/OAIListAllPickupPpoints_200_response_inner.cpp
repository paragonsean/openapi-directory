/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAllPickupPpoints_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAllPickupPpoints_200_response_inner::OAIListAllPickupPpoints_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAllPickupPpoints_200_response_inner::OAIListAllPickupPpoints_200_response_inner() {
    this->initializeModel();
}

OAIListAllPickupPpoints_200_response_inner::~OAIListAllPickupPpoints_200_response_inner() {}

void OAIListAllPickupPpoints_200_response_inner::initializeModel() {

    m_account_group_id_isSet = false;
    m_account_group_id_isValid = false;

    m_account_owner_id_isSet = false;
    m_account_owner_id_isValid = false;

    m_account_owner_name_isSet = false;
    m_account_owner_name_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_business_hours_isSet = false;
    m_business_hours_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_formatted_address_isSet = false;
    m_formatted_address_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_third_party_pickup_isSet = false;
    m_is_third_party_pickup_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_original_id_isSet = false;
    m_original_id_isValid = false;

    m_parent_account_name_isSet = false;
    m_parent_account_name_isValid = false;

    m_pickup_holidays_isSet = false;
    m_pickup_holidays_isValid = false;

    m_seller_isSet = false;
    m_seller_isValid = false;

    m_tags_label_isSet = false;
    m_tags_label_isValid = false;
}

void OAIListAllPickupPpoints_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAllPickupPpoints_200_response_inner::fromJsonObject(QJsonObject json) {

    m_account_group_id_isValid = ::OpenAPI::fromJsonValue(m_account_group_id, json[QString("accountGroupId")]);
    m_account_group_id_isSet = !json[QString("accountGroupId")].isNull() && m_account_group_id_isValid;

    m_account_owner_id_isValid = ::OpenAPI::fromJsonValue(m_account_owner_id, json[QString("accountOwnerId")]);
    m_account_owner_id_isSet = !json[QString("accountOwnerId")].isNull() && m_account_owner_id_isValid;

    m_account_owner_name_isValid = ::OpenAPI::fromJsonValue(m_account_owner_name, json[QString("accountOwnerName")]);
    m_account_owner_name_isSet = !json[QString("accountOwnerName")].isNull() && m_account_owner_name_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_business_hours_isValid = ::OpenAPI::fromJsonValue(m_business_hours, json[QString("businessHours")]);
    m_business_hours_isSet = !json[QString("businessHours")].isNull() && m_business_hours_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_formatted_address_isValid = ::OpenAPI::fromJsonValue(m_formatted_address, json[QString("formatted_address")]);
    m_formatted_address_isSet = !json[QString("formatted_address")].isNull() && m_formatted_address_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_third_party_pickup_isValid = ::OpenAPI::fromJsonValue(m_is_third_party_pickup, json[QString("isThirdPartyPickup")]);
    m_is_third_party_pickup_isSet = !json[QString("isThirdPartyPickup")].isNull() && m_is_third_party_pickup_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_original_id_isValid = ::OpenAPI::fromJsonValue(m_original_id, json[QString("originalId")]);
    m_original_id_isSet = !json[QString("originalId")].isNull() && m_original_id_isValid;

    m_parent_account_name_isValid = ::OpenAPI::fromJsonValue(m_parent_account_name, json[QString("parentAccountName")]);
    m_parent_account_name_isSet = !json[QString("parentAccountName")].isNull() && m_parent_account_name_isValid;

    m_pickup_holidays_isValid = ::OpenAPI::fromJsonValue(m_pickup_holidays, json[QString("pickupHolidays")]);
    m_pickup_holidays_isSet = !json[QString("pickupHolidays")].isNull() && m_pickup_holidays_isValid;

    m_seller_isValid = ::OpenAPI::fromJsonValue(m_seller, json[QString("seller")]);
    m_seller_isSet = !json[QString("seller")].isNull() && m_seller_isValid;

    m_tags_label_isValid = ::OpenAPI::fromJsonValue(m_tags_label, json[QString("tagsLabel")]);
    m_tags_label_isSet = !json[QString("tagsLabel")].isNull() && m_tags_label_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAllPickupPpoints_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_account_group_id_isSet) {
        obj.insert(QString("accountGroupId"), ::OpenAPI::toJsonValue(m_account_group_id));
    }
    if (m_account_owner_id_isSet) {
        obj.insert(QString("accountOwnerId"), ::OpenAPI::toJsonValue(m_account_owner_id));
    }
    if (m_account_owner_name_isSet) {
        obj.insert(QString("accountOwnerName"), ::OpenAPI::toJsonValue(m_account_owner_name));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_business_hours.size() > 0) {
        obj.insert(QString("businessHours"), ::OpenAPI::toJsonValue(m_business_hours));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_formatted_address_isSet) {
        obj.insert(QString("formatted_address"), ::OpenAPI::toJsonValue(m_formatted_address));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instructions_isSet) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_third_party_pickup_isSet) {
        obj.insert(QString("isThirdPartyPickup"), ::OpenAPI::toJsonValue(m_is_third_party_pickup));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_original_id_isSet) {
        obj.insert(QString("originalId"), ::OpenAPI::toJsonValue(m_original_id));
    }
    if (m_parent_account_name_isSet) {
        obj.insert(QString("parentAccountName"), ::OpenAPI::toJsonValue(m_parent_account_name));
    }
    if (m_pickup_holidays.size() > 0) {
        obj.insert(QString("pickupHolidays"), ::OpenAPI::toJsonValue(m_pickup_holidays));
    }
    if (m_seller_isSet) {
        obj.insert(QString("seller"), ::OpenAPI::toJsonValue(m_seller));
    }
    if (m_tags_label.size() > 0) {
        obj.insert(QString("tagsLabel"), ::OpenAPI::toJsonValue(m_tags_label));
    }
    return obj;
}

QString OAIListAllPickupPpoints_200_response_inner::getAccountGroupId() const {
    return m_account_group_id;
}
void OAIListAllPickupPpoints_200_response_inner::setAccountGroupId(const QString &account_group_id) {
    m_account_group_id = account_group_id;
    m_account_group_id_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_account_group_id_Set() const{
    return m_account_group_id_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_account_group_id_Valid() const{
    return m_account_group_id_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner::getAccountOwnerId() const {
    return m_account_owner_id;
}
void OAIListAllPickupPpoints_200_response_inner::setAccountOwnerId(const QString &account_owner_id) {
    m_account_owner_id = account_owner_id;
    m_account_owner_id_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_account_owner_id_Set() const{
    return m_account_owner_id_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_account_owner_id_Valid() const{
    return m_account_owner_id_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner::getAccountOwnerName() const {
    return m_account_owner_name;
}
void OAIListAllPickupPpoints_200_response_inner::setAccountOwnerName(const QString &account_owner_name) {
    m_account_owner_name = account_owner_name;
    m_account_owner_name_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_account_owner_name_Set() const{
    return m_account_owner_name_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_account_owner_name_Valid() const{
    return m_account_owner_name_isValid;
}

OAIListAllPickupPpoints_200_response_inner_address OAIListAllPickupPpoints_200_response_inner::getAddress() const {
    return m_address;
}
void OAIListAllPickupPpoints_200_response_inner::setAddress(const OAIListAllPickupPpoints_200_response_inner_address &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_address_Set() const{
    return m_address_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAIListAllPickupPpoints_200_response_inner_businessHours_inner> OAIListAllPickupPpoints_200_response_inner::getBusinessHours() const {
    return m_business_hours;
}
void OAIListAllPickupPpoints_200_response_inner::setBusinessHours(const QList<OAIListAllPickupPpoints_200_response_inner_businessHours_inner> &business_hours) {
    m_business_hours = business_hours;
    m_business_hours_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_business_hours_Set() const{
    return m_business_hours_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_business_hours_Valid() const{
    return m_business_hours_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner::getDescription() const {
    return m_description;
}
void OAIListAllPickupPpoints_200_response_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_description_Valid() const{
    return m_description_isValid;
}

double OAIListAllPickupPpoints_200_response_inner::getDistance() const {
    return m_distance;
}
void OAIListAllPickupPpoints_200_response_inner::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_distance_Valid() const{
    return m_distance_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner::getFormattedAddress() const {
    return m_formatted_address;
}
void OAIListAllPickupPpoints_200_response_inner::setFormattedAddress(const QString &formatted_address) {
    m_formatted_address = formatted_address;
    m_formatted_address_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_formatted_address_Set() const{
    return m_formatted_address_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_formatted_address_Valid() const{
    return m_formatted_address_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner::getId() const {
    return m_id;
}
void OAIListAllPickupPpoints_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner::getInstructions() const {
    return m_instructions;
}
void OAIListAllPickupPpoints_200_response_inner::setInstructions(const QString &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_instructions_Valid() const{
    return m_instructions_isValid;
}

bool OAIListAllPickupPpoints_200_response_inner::isIsActive() const {
    return m_is_active;
}
void OAIListAllPickupPpoints_200_response_inner::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIListAllPickupPpoints_200_response_inner::isIsThirdPartyPickup() const {
    return m_is_third_party_pickup;
}
void OAIListAllPickupPpoints_200_response_inner::setIsThirdPartyPickup(const bool &is_third_party_pickup) {
    m_is_third_party_pickup = is_third_party_pickup;
    m_is_third_party_pickup_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_is_third_party_pickup_Set() const{
    return m_is_third_party_pickup_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_is_third_party_pickup_Valid() const{
    return m_is_third_party_pickup_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner::getName() const {
    return m_name;
}
void OAIListAllPickupPpoints_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner::getOriginalId() const {
    return m_original_id;
}
void OAIListAllPickupPpoints_200_response_inner::setOriginalId(const QString &original_id) {
    m_original_id = original_id;
    m_original_id_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_original_id_Set() const{
    return m_original_id_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_original_id_Valid() const{
    return m_original_id_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner::getParentAccountName() const {
    return m_parent_account_name;
}
void OAIListAllPickupPpoints_200_response_inner::setParentAccountName(const QString &parent_account_name) {
    m_parent_account_name = parent_account_name;
    m_parent_account_name_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_parent_account_name_Set() const{
    return m_parent_account_name_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_parent_account_name_Valid() const{
    return m_parent_account_name_isValid;
}

QList<QString> OAIListAllPickupPpoints_200_response_inner::getPickupHolidays() const {
    return m_pickup_holidays;
}
void OAIListAllPickupPpoints_200_response_inner::setPickupHolidays(const QList<QString> &pickup_holidays) {
    m_pickup_holidays = pickup_holidays;
    m_pickup_holidays_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_pickup_holidays_Set() const{
    return m_pickup_holidays_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_pickup_holidays_Valid() const{
    return m_pickup_holidays_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner::getSeller() const {
    return m_seller;
}
void OAIListAllPickupPpoints_200_response_inner::setSeller(const QString &seller) {
    m_seller = seller;
    m_seller_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_seller_Set() const{
    return m_seller_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_seller_Valid() const{
    return m_seller_isValid;
}

QList<QString> OAIListAllPickupPpoints_200_response_inner::getTagsLabel() const {
    return m_tags_label;
}
void OAIListAllPickupPpoints_200_response_inner::setTagsLabel(const QList<QString> &tags_label) {
    m_tags_label = tags_label;
    m_tags_label_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner::is_tags_label_Set() const{
    return m_tags_label_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner::is_tags_label_Valid() const{
    return m_tags_label_isValid;
}

bool OAIListAllPickupPpoints_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_hours.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_third_party_pickup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_holidays.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_label.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAllPickupPpoints_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
