/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryWindow_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryWindow_1::OAIDeliveryWindow_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryWindow_1::OAIDeliveryWindow_1() {
    this->initializeModel();
}

OAIDeliveryWindow_1::~OAIDeliveryWindow_1() {}

void OAIDeliveryWindow_1::initializeModel() {

    m_end_date_utc_isSet = false;
    m_end_date_utc_isValid = false;

    m_list_price_isSet = false;
    m_list_price_isValid = false;

    m_start_date_utc_isSet = false;
    m_start_date_utc_isValid = false;
}

void OAIDeliveryWindow_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryWindow_1::fromJsonObject(QJsonObject json) {

    m_end_date_utc_isValid = ::OpenAPI::fromJsonValue(m_end_date_utc, json[QString("endDateUtc")]);
    m_end_date_utc_isSet = !json[QString("endDateUtc")].isNull() && m_end_date_utc_isValid;

    m_list_price_isValid = ::OpenAPI::fromJsonValue(m_list_price, json[QString("listPrice")]);
    m_list_price_isSet = !json[QString("listPrice")].isNull() && m_list_price_isValid;

    m_start_date_utc_isValid = ::OpenAPI::fromJsonValue(m_start_date_utc, json[QString("startDateUtc")]);
    m_start_date_utc_isSet = !json[QString("startDateUtc")].isNull() && m_start_date_utc_isValid;
}

QString OAIDeliveryWindow_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryWindow_1::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_utc_isSet) {
        obj.insert(QString("endDateUtc"), ::OpenAPI::toJsonValue(m_end_date_utc));
    }
    if (m_list_price_isSet) {
        obj.insert(QString("listPrice"), ::OpenAPI::toJsonValue(m_list_price));
    }
    if (m_start_date_utc_isSet) {
        obj.insert(QString("startDateUtc"), ::OpenAPI::toJsonValue(m_start_date_utc));
    }
    return obj;
}

QString OAIDeliveryWindow_1::getEndDateUtc() const {
    return m_end_date_utc;
}
void OAIDeliveryWindow_1::setEndDateUtc(const QString &end_date_utc) {
    m_end_date_utc = end_date_utc;
    m_end_date_utc_isSet = true;
}

bool OAIDeliveryWindow_1::is_end_date_utc_Set() const{
    return m_end_date_utc_isSet;
}

bool OAIDeliveryWindow_1::is_end_date_utc_Valid() const{
    return m_end_date_utc_isValid;
}

double OAIDeliveryWindow_1::getListPrice() const {
    return m_list_price;
}
void OAIDeliveryWindow_1::setListPrice(const double &list_price) {
    m_list_price = list_price;
    m_list_price_isSet = true;
}

bool OAIDeliveryWindow_1::is_list_price_Set() const{
    return m_list_price_isSet;
}

bool OAIDeliveryWindow_1::is_list_price_Valid() const{
    return m_list_price_isValid;
}

QString OAIDeliveryWindow_1::getStartDateUtc() const {
    return m_start_date_utc;
}
void OAIDeliveryWindow_1::setStartDateUtc(const QString &start_date_utc) {
    m_start_date_utc = start_date_utc;
    m_start_date_utc_isSet = true;
}

bool OAIDeliveryWindow_1::is_start_date_utc_Set() const{
    return m_start_date_utc_isSet;
}

bool OAIDeliveryWindow_1::is_start_date_utc_Valid() const{
    return m_start_date_utc_isValid;
}

bool OAIDeliveryWindow_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryWindow_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
