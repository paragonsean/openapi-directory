/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryBySku_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryBySku_200_response::OAIInventoryBySku_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryBySku_200_response::OAIInventoryBySku_200_response() {
    this->initializeModel();
}

OAIInventoryBySku_200_response::~OAIInventoryBySku_200_response() {}

void OAIInventoryBySku_200_response::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_sku_id_isSet = false;
    m_sku_id_isValid = false;
}

void OAIInventoryBySku_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryBySku_200_response::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_sku_id_isValid = ::OpenAPI::fromJsonValue(m_sku_id, json[QString("skuId")]);
    m_sku_id_isSet = !json[QString("skuId")].isNull() && m_sku_id_isValid;
}

QString OAIInventoryBySku_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryBySku_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_balance.size() > 0) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_sku_id_isSet) {
        obj.insert(QString("skuId"), ::OpenAPI::toJsonValue(m_sku_id));
    }
    return obj;
}

QList<OAIBalance_1> OAIInventoryBySku_200_response::getBalance() const {
    return m_balance;
}
void OAIInventoryBySku_200_response::setBalance(const QList<OAIBalance_1> &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIInventoryBySku_200_response::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIInventoryBySku_200_response::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAIInventoryBySku_200_response::getSkuId() const {
    return m_sku_id;
}
void OAIInventoryBySku_200_response::setSkuId(const QString &sku_id) {
    m_sku_id = sku_id;
    m_sku_id_isSet = true;
}

bool OAIInventoryBySku_200_response::is_sku_id_Set() const{
    return m_sku_id_isSet;
}

bool OAIInventoryBySku_200_response::is_sku_id_Valid() const{
    return m_sku_id_isValid;
}

bool OAIInventoryBySku_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryBySku_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_balance_isValid && m_sku_id_isValid && true;
}

} // namespace OpenAPI
