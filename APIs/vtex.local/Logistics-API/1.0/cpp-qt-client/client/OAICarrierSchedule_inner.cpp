/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICarrierSchedule_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICarrierSchedule_inner::OAICarrierSchedule_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICarrierSchedule_inner::OAICarrierSchedule_inner() {
    this->initializeModel();
}

OAICarrierSchedule_inner::~OAICarrierSchedule_inner() {}

void OAICarrierSchedule_inner::initializeModel() {

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_time_limit_isSet = false;
    m_time_limit_isValid = false;
}

void OAICarrierSchedule_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICarrierSchedule_inner::fromJsonObject(QJsonObject json) {

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("dayOfWeek")]);
    m_day_of_week_isSet = !json[QString("dayOfWeek")].isNull() && m_day_of_week_isValid;

    m_time_limit_isValid = ::OpenAPI::fromJsonValue(m_time_limit, json[QString("timeLimit")]);
    m_time_limit_isSet = !json[QString("timeLimit")].isNull() && m_time_limit_isValid;
}

QString OAICarrierSchedule_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICarrierSchedule_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_week_isSet) {
        obj.insert(QString("dayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_time_limit_isSet) {
        obj.insert(QString("timeLimit"), ::OpenAPI::toJsonValue(m_time_limit));
    }
    return obj;
}

qint32 OAICarrierSchedule_inner::getDayOfWeek() const {
    return m_day_of_week;
}
void OAICarrierSchedule_inner::setDayOfWeek(const qint32 &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAICarrierSchedule_inner::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAICarrierSchedule_inner::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

QString OAICarrierSchedule_inner::getTimeLimit() const {
    return m_time_limit;
}
void OAICarrierSchedule_inner::setTimeLimit(const QString &time_limit) {
    m_time_limit = time_limit;
    m_time_limit_isSet = true;
}

bool OAICarrierSchedule_inner::is_time_limit_Set() const{
    return m_time_limit_isSet;
}

bool OAICarrierSchedule_inner::is_time_limit_Valid() const{
    return m_time_limit_isValid;
}

bool OAICarrierSchedule_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICarrierSchedule_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
