/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryperdock_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryperdock_200_response_inner::OAIInventoryperdock_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryperdock_200_response_inner::OAIInventoryperdock_200_response_inner() {
    this->initializeModel();
}

OAIInventoryperdock_200_response_inner::~OAIInventoryperdock_200_response_inner() {}

void OAIInventoryperdock_200_response_inner::initializeModel() {

    m_available_quantity_isSet = false;
    m_available_quantity_isValid = false;

    m_date_of_supply_utc_isSet = false;
    m_date_of_supply_utc_isValid = false;

    m_delivery_channel_isSet = false;
    m_delivery_channel_isValid = false;

    m_dock_id_isSet = false;
    m_dock_id_isValid = false;

    m_is_unlimited_isSet = false;
    m_is_unlimited_isValid = false;

    m_keep_selling_after_expiration_isSet = false;
    m_keep_selling_after_expiration_isValid = false;

    m_reserved_quantity_isSet = false;
    m_reserved_quantity_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_sku_id_isSet = false;
    m_sku_id_isValid = false;

    m_time_to_refill_isSet = false;
    m_time_to_refill_isValid = false;

    m_total_quantity_isSet = false;
    m_total_quantity_isValid = false;

    m_transfer_isSet = false;
    m_transfer_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;
}

void OAIInventoryperdock_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryperdock_200_response_inner::fromJsonObject(QJsonObject json) {

    m_available_quantity_isValid = ::OpenAPI::fromJsonValue(m_available_quantity, json[QString("availableQuantity")]);
    m_available_quantity_isSet = !json[QString("availableQuantity")].isNull() && m_available_quantity_isValid;

    m_date_of_supply_utc_isValid = ::OpenAPI::fromJsonValue(m_date_of_supply_utc, json[QString("dateOfSupplyUtc")]);
    m_date_of_supply_utc_isSet = !json[QString("dateOfSupplyUtc")].isNull() && m_date_of_supply_utc_isValid;

    m_delivery_channel_isValid = ::OpenAPI::fromJsonValue(m_delivery_channel, json[QString("deliveryChannel")]);
    m_delivery_channel_isSet = !json[QString("deliveryChannel")].isNull() && m_delivery_channel_isValid;

    m_dock_id_isValid = ::OpenAPI::fromJsonValue(m_dock_id, json[QString("dockId")]);
    m_dock_id_isSet = !json[QString("dockId")].isNull() && m_dock_id_isValid;

    m_is_unlimited_isValid = ::OpenAPI::fromJsonValue(m_is_unlimited, json[QString("isUnlimited")]);
    m_is_unlimited_isSet = !json[QString("isUnlimited")].isNull() && m_is_unlimited_isValid;

    m_keep_selling_after_expiration_isValid = ::OpenAPI::fromJsonValue(m_keep_selling_after_expiration, json[QString("keepSellingAfterExpiration")]);
    m_keep_selling_after_expiration_isSet = !json[QString("keepSellingAfterExpiration")].isNull() && m_keep_selling_after_expiration_isValid;

    m_reserved_quantity_isValid = ::OpenAPI::fromJsonValue(m_reserved_quantity, json[QString("reservedQuantity")]);
    m_reserved_quantity_isSet = !json[QString("reservedQuantity")].isNull() && m_reserved_quantity_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;

    m_sku_id_isValid = ::OpenAPI::fromJsonValue(m_sku_id, json[QString("skuId")]);
    m_sku_id_isSet = !json[QString("skuId")].isNull() && m_sku_id_isValid;

    m_time_to_refill_isValid = ::OpenAPI::fromJsonValue(m_time_to_refill, json[QString("timeToRefill")]);
    m_time_to_refill_isSet = !json[QString("timeToRefill")].isNull() && m_time_to_refill_isValid;

    m_total_quantity_isValid = ::OpenAPI::fromJsonValue(m_total_quantity, json[QString("totalQuantity")]);
    m_total_quantity_isSet = !json[QString("totalQuantity")].isNull() && m_total_quantity_isValid;

    m_transfer_isValid = ::OpenAPI::fromJsonValue(m_transfer, json[QString("transfer")]);
    m_transfer_isSet = !json[QString("transfer")].isNull() && m_transfer_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouseId")]);
    m_warehouse_id_isSet = !json[QString("warehouseId")].isNull() && m_warehouse_id_isValid;
}

QString OAIInventoryperdock_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryperdock_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_available_quantity_isSet) {
        obj.insert(QString("availableQuantity"), ::OpenAPI::toJsonValue(m_available_quantity));
    }
    if (m_date_of_supply_utc_isSet) {
        obj.insert(QString("dateOfSupplyUtc"), ::OpenAPI::toJsonValue(m_date_of_supply_utc));
    }
    if (m_delivery_channel.size() > 0) {
        obj.insert(QString("deliveryChannel"), ::OpenAPI::toJsonValue(m_delivery_channel));
    }
    if (m_dock_id_isSet) {
        obj.insert(QString("dockId"), ::OpenAPI::toJsonValue(m_dock_id));
    }
    if (m_is_unlimited_isSet) {
        obj.insert(QString("isUnlimited"), ::OpenAPI::toJsonValue(m_is_unlimited));
    }
    if (m_keep_selling_after_expiration_isSet) {
        obj.insert(QString("keepSellingAfterExpiration"), ::OpenAPI::toJsonValue(m_keep_selling_after_expiration));
    }
    if (m_reserved_quantity_isSet) {
        obj.insert(QString("reservedQuantity"), ::OpenAPI::toJsonValue(m_reserved_quantity));
    }
    if (m_sales_channel.size() > 0) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_sku_id_isSet) {
        obj.insert(QString("skuId"), ::OpenAPI::toJsonValue(m_sku_id));
    }
    if (m_time_to_refill_isSet) {
        obj.insert(QString("timeToRefill"), ::OpenAPI::toJsonValue(m_time_to_refill));
    }
    if (m_total_quantity_isSet) {
        obj.insert(QString("totalQuantity"), ::OpenAPI::toJsonValue(m_total_quantity));
    }
    if (m_transfer_isSet) {
        obj.insert(QString("transfer"), ::OpenAPI::toJsonValue(m_transfer));
    }
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouseId"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    return obj;
}

qint32 OAIInventoryperdock_200_response_inner::getAvailableQuantity() const {
    return m_available_quantity;
}
void OAIInventoryperdock_200_response_inner::setAvailableQuantity(const qint32 &available_quantity) {
    m_available_quantity = available_quantity;
    m_available_quantity_isSet = true;
}

bool OAIInventoryperdock_200_response_inner::is_available_quantity_Set() const{
    return m_available_quantity_isSet;
}

bool OAIInventoryperdock_200_response_inner::is_available_quantity_Valid() const{
    return m_available_quantity_isValid;
}

QString OAIInventoryperdock_200_response_inner::getDateOfSupplyUtc() const {
    return m_date_of_supply_utc;
}
void OAIInventoryperdock_200_response_inner::setDateOfSupplyUtc(const QString &date_of_supply_utc) {
    m_date_of_supply_utc = date_of_supply_utc;
    m_date_of_supply_utc_isSet = true;
}

bool OAIInventoryperdock_200_response_inner::is_date_of_supply_utc_Set() const{
    return m_date_of_supply_utc_isSet;
}

bool OAIInventoryperdock_200_response_inner::is_date_of_supply_utc_Valid() const{
    return m_date_of_supply_utc_isValid;
}

QList<QString> OAIInventoryperdock_200_response_inner::getDeliveryChannel() const {
    return m_delivery_channel;
}
void OAIInventoryperdock_200_response_inner::setDeliveryChannel(const QList<QString> &delivery_channel) {
    m_delivery_channel = delivery_channel;
    m_delivery_channel_isSet = true;
}

bool OAIInventoryperdock_200_response_inner::is_delivery_channel_Set() const{
    return m_delivery_channel_isSet;
}

bool OAIInventoryperdock_200_response_inner::is_delivery_channel_Valid() const{
    return m_delivery_channel_isValid;
}

QString OAIInventoryperdock_200_response_inner::getDockId() const {
    return m_dock_id;
}
void OAIInventoryperdock_200_response_inner::setDockId(const QString &dock_id) {
    m_dock_id = dock_id;
    m_dock_id_isSet = true;
}

bool OAIInventoryperdock_200_response_inner::is_dock_id_Set() const{
    return m_dock_id_isSet;
}

bool OAIInventoryperdock_200_response_inner::is_dock_id_Valid() const{
    return m_dock_id_isValid;
}

bool OAIInventoryperdock_200_response_inner::isIsUnlimited() const {
    return m_is_unlimited;
}
void OAIInventoryperdock_200_response_inner::setIsUnlimited(const bool &is_unlimited) {
    m_is_unlimited = is_unlimited;
    m_is_unlimited_isSet = true;
}

bool OAIInventoryperdock_200_response_inner::is_is_unlimited_Set() const{
    return m_is_unlimited_isSet;
}

bool OAIInventoryperdock_200_response_inner::is_is_unlimited_Valid() const{
    return m_is_unlimited_isValid;
}

bool OAIInventoryperdock_200_response_inner::isKeepSellingAfterExpiration() const {
    return m_keep_selling_after_expiration;
}
void OAIInventoryperdock_200_response_inner::setKeepSellingAfterExpiration(const bool &keep_selling_after_expiration) {
    m_keep_selling_after_expiration = keep_selling_after_expiration;
    m_keep_selling_after_expiration_isSet = true;
}

bool OAIInventoryperdock_200_response_inner::is_keep_selling_after_expiration_Set() const{
    return m_keep_selling_after_expiration_isSet;
}

bool OAIInventoryperdock_200_response_inner::is_keep_selling_after_expiration_Valid() const{
    return m_keep_selling_after_expiration_isValid;
}

qint32 OAIInventoryperdock_200_response_inner::getReservedQuantity() const {
    return m_reserved_quantity;
}
void OAIInventoryperdock_200_response_inner::setReservedQuantity(const qint32 &reserved_quantity) {
    m_reserved_quantity = reserved_quantity;
    m_reserved_quantity_isSet = true;
}

bool OAIInventoryperdock_200_response_inner::is_reserved_quantity_Set() const{
    return m_reserved_quantity_isSet;
}

bool OAIInventoryperdock_200_response_inner::is_reserved_quantity_Valid() const{
    return m_reserved_quantity_isValid;
}

QList<QString> OAIInventoryperdock_200_response_inner::getSalesChannel() const {
    return m_sales_channel;
}
void OAIInventoryperdock_200_response_inner::setSalesChannel(const QList<QString> &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAIInventoryperdock_200_response_inner::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAIInventoryperdock_200_response_inner::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

QString OAIInventoryperdock_200_response_inner::getSkuId() const {
    return m_sku_id;
}
void OAIInventoryperdock_200_response_inner::setSkuId(const QString &sku_id) {
    m_sku_id = sku_id;
    m_sku_id_isSet = true;
}

bool OAIInventoryperdock_200_response_inner::is_sku_id_Set() const{
    return m_sku_id_isSet;
}

bool OAIInventoryperdock_200_response_inner::is_sku_id_Valid() const{
    return m_sku_id_isValid;
}

QString OAIInventoryperdock_200_response_inner::getTimeToRefill() const {
    return m_time_to_refill;
}
void OAIInventoryperdock_200_response_inner::setTimeToRefill(const QString &time_to_refill) {
    m_time_to_refill = time_to_refill;
    m_time_to_refill_isSet = true;
}

bool OAIInventoryperdock_200_response_inner::is_time_to_refill_Set() const{
    return m_time_to_refill_isSet;
}

bool OAIInventoryperdock_200_response_inner::is_time_to_refill_Valid() const{
    return m_time_to_refill_isValid;
}

qint32 OAIInventoryperdock_200_response_inner::getTotalQuantity() const {
    return m_total_quantity;
}
void OAIInventoryperdock_200_response_inner::setTotalQuantity(const qint32 &total_quantity) {
    m_total_quantity = total_quantity;
    m_total_quantity_isSet = true;
}

bool OAIInventoryperdock_200_response_inner::is_total_quantity_Set() const{
    return m_total_quantity_isSet;
}

bool OAIInventoryperdock_200_response_inner::is_total_quantity_Valid() const{
    return m_total_quantity_isValid;
}

QString OAIInventoryperdock_200_response_inner::getTransfer() const {
    return m_transfer;
}
void OAIInventoryperdock_200_response_inner::setTransfer(const QString &transfer) {
    m_transfer = transfer;
    m_transfer_isSet = true;
}

bool OAIInventoryperdock_200_response_inner::is_transfer_Set() const{
    return m_transfer_isSet;
}

bool OAIInventoryperdock_200_response_inner::is_transfer_Valid() const{
    return m_transfer_isValid;
}

QString OAIInventoryperdock_200_response_inner::getWarehouseId() const {
    return m_warehouse_id;
}
void OAIInventoryperdock_200_response_inner::setWarehouseId(const QString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAIInventoryperdock_200_response_inner::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAIInventoryperdock_200_response_inner::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

bool OAIInventoryperdock_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_supply_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_channel.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_unlimited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_selling_after_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_refill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryperdock_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
