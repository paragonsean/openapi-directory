/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimension_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimension_1::OAIDimension_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimension_1::OAIDimension_1() {
    this->initializeModel();
}

OAIDimension_1::~OAIDimension_1() {}

void OAIDimension_1::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIDimension_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimension_1::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIDimension_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimension_1::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAIDimension_1::getHeight() const {
    return m_height;
}
void OAIDimension_1::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIDimension_1::is_height_Set() const{
    return m_height_isSet;
}

bool OAIDimension_1::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIDimension_1::getLength() const {
    return m_length;
}
void OAIDimension_1::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIDimension_1::is_length_Set() const{
    return m_length_isSet;
}

bool OAIDimension_1::is_length_Valid() const{
    return m_length_isValid;
}

qint32 OAIDimension_1::getWeight() const {
    return m_weight;
}
void OAIDimension_1::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIDimension_1::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIDimension_1::is_weight_Valid() const{
    return m_weight_isValid;
}

qint32 OAIDimension_1::getWidth() const {
    return m_width;
}
void OAIDimension_1::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIDimension_1::is_width_Set() const{
    return m_width_isSet;
}

bool OAIDimension_1::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIDimension_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimension_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_height_isValid && m_length_isValid && m_weight_isValid && m_width_isValid && true;
}

} // namespace OpenAPI
