/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateInventoryBySkuandWarehouseRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateInventoryBySkuandWarehouseRequest::OAIUpdateInventoryBySkuandWarehouseRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateInventoryBySkuandWarehouseRequest::OAIUpdateInventoryBySkuandWarehouseRequest() {
    this->initializeModel();
}

OAIUpdateInventoryBySkuandWarehouseRequest::~OAIUpdateInventoryBySkuandWarehouseRequest() {}

void OAIUpdateInventoryBySkuandWarehouseRequest::initializeModel() {

    m_date_utc_on_balance_system_isSet = false;
    m_date_utc_on_balance_system_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_unlimited_quantity_isSet = false;
    m_unlimited_quantity_isValid = false;
}

void OAIUpdateInventoryBySkuandWarehouseRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateInventoryBySkuandWarehouseRequest::fromJsonObject(QJsonObject json) {

    m_date_utc_on_balance_system_isValid = ::OpenAPI::fromJsonValue(m_date_utc_on_balance_system, json[QString("dateUtcOnBalanceSystem")]);
    m_date_utc_on_balance_system_isSet = !json[QString("dateUtcOnBalanceSystem")].isNull() && m_date_utc_on_balance_system_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_unlimited_quantity_isValid = ::OpenAPI::fromJsonValue(m_unlimited_quantity, json[QString("unlimitedQuantity")]);
    m_unlimited_quantity_isSet = !json[QString("unlimitedQuantity")].isNull() && m_unlimited_quantity_isValid;
}

QString OAIUpdateInventoryBySkuandWarehouseRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateInventoryBySkuandWarehouseRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_date_utc_on_balance_system_isSet) {
        obj.insert(QString("dateUtcOnBalanceSystem"), ::OpenAPI::toJsonValue(m_date_utc_on_balance_system));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_unlimited_quantity_isSet) {
        obj.insert(QString("unlimitedQuantity"), ::OpenAPI::toJsonValue(m_unlimited_quantity));
    }
    return obj;
}

QString OAIUpdateInventoryBySkuandWarehouseRequest::getDateUtcOnBalanceSystem() const {
    return m_date_utc_on_balance_system;
}
void OAIUpdateInventoryBySkuandWarehouseRequest::setDateUtcOnBalanceSystem(const QString &date_utc_on_balance_system) {
    m_date_utc_on_balance_system = date_utc_on_balance_system;
    m_date_utc_on_balance_system_isSet = true;
}

bool OAIUpdateInventoryBySkuandWarehouseRequest::is_date_utc_on_balance_system_Set() const{
    return m_date_utc_on_balance_system_isSet;
}

bool OAIUpdateInventoryBySkuandWarehouseRequest::is_date_utc_on_balance_system_Valid() const{
    return m_date_utc_on_balance_system_isValid;
}

qint32 OAIUpdateInventoryBySkuandWarehouseRequest::getQuantity() const {
    return m_quantity;
}
void OAIUpdateInventoryBySkuandWarehouseRequest::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIUpdateInventoryBySkuandWarehouseRequest::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIUpdateInventoryBySkuandWarehouseRequest::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIUpdateInventoryBySkuandWarehouseRequest::isUnlimitedQuantity() const {
    return m_unlimited_quantity;
}
void OAIUpdateInventoryBySkuandWarehouseRequest::setUnlimitedQuantity(const bool &unlimited_quantity) {
    m_unlimited_quantity = unlimited_quantity;
    m_unlimited_quantity_isSet = true;
}

bool OAIUpdateInventoryBySkuandWarehouseRequest::is_unlimited_quantity_Set() const{
    return m_unlimited_quantity_isSet;
}

bool OAIUpdateInventoryBySkuandWarehouseRequest::is_unlimited_quantity_Valid() const{
    return m_unlimited_quantity_isValid;
}

bool OAIUpdateInventoryBySkuandWarehouseRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_utc_on_balance_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlimited_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateInventoryBySkuandWarehouseRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_utc_on_balance_system_isValid && m_quantity_isValid && m_unlimited_quantity_isValid && true;
}

} // namespace OpenAPI
