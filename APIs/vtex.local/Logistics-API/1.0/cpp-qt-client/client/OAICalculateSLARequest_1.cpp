/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateSLARequest_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateSLARequest_1::OAICalculateSLARequest_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateSLARequest_1::OAICalculateSLARequest_1() {
    this->initializeModel();
}

OAICalculateSLARequest_1::~OAICalculateSLARequest_1() {}

void OAICalculateSLARequest_1::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;
}

void OAICalculateSLARequest_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateSLARequest_1::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;
}

QString OAICalculateSLARequest_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateSLARequest_1::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    return obj;
}

QList<OAIItem3_1> OAICalculateSLARequest_1::getItems() const {
    return m_items;
}
void OAICalculateSLARequest_1::setItems(const QList<OAIItem3_1> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAICalculateSLARequest_1::is_items_Set() const{
    return m_items_isSet;
}

bool OAICalculateSLARequest_1::is_items_Valid() const{
    return m_items_isValid;
}

OAILocation3_1 OAICalculateSLARequest_1::getLocation() const {
    return m_location;
}
void OAICalculateSLARequest_1::setLocation(const OAILocation3_1 &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICalculateSLARequest_1::is_location_Set() const{
    return m_location_isSet;
}

bool OAICalculateSLARequest_1::is_location_Valid() const{
    return m_location_isValid;
}

QString OAICalculateSLARequest_1::getSalesChannel() const {
    return m_sales_channel;
}
void OAICalculateSLARequest_1::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAICalculateSLARequest_1::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAICalculateSLARequest_1::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

bool OAICalculateSLARequest_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateSLARequest_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_items_isValid && m_location_isValid && m_sales_channel_isValid && true;
}

} // namespace OpenAPI
