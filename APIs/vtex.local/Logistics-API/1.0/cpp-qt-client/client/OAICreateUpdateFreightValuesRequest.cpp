/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUpdateFreightValuesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUpdateFreightValuesRequest::OAICreateUpdateFreightValuesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUpdateFreightValuesRequest::OAICreateUpdateFreightValuesRequest() {
    this->initializeModel();
}

OAICreateUpdateFreightValuesRequest::~OAICreateUpdateFreightValuesRequest() {}

void OAICreateUpdateFreightValuesRequest::initializeModel() {

    m_absolute_money_cost_isSet = false;
    m_absolute_money_cost_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_max_volume_isSet = false;
    m_max_volume_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_polygon_isSet = false;
    m_polygon_isValid = false;

    m_price_percent_isSet = false;
    m_price_percent_isValid = false;

    m_price_percent_by_weight_isSet = false;
    m_price_percent_by_weight_isValid = false;

    m_time_cost_isSet = false;
    m_time_cost_isValid = false;

    m_weight_end_isSet = false;
    m_weight_end_isValid = false;

    m_weight_start_isSet = false;
    m_weight_start_isValid = false;

    m_zip_code_end_isSet = false;
    m_zip_code_end_isValid = false;

    m_zip_code_start_isSet = false;
    m_zip_code_start_isValid = false;
}

void OAICreateUpdateFreightValuesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUpdateFreightValuesRequest::fromJsonObject(QJsonObject json) {

    m_absolute_money_cost_isValid = ::OpenAPI::fromJsonValue(m_absolute_money_cost, json[QString("absoluteMoneyCost")]);
    m_absolute_money_cost_isSet = !json[QString("absoluteMoneyCost")].isNull() && m_absolute_money_cost_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_max_volume_isValid = ::OpenAPI::fromJsonValue(m_max_volume, json[QString("maxVolume")]);
    m_max_volume_isSet = !json[QString("maxVolume")].isNull() && m_max_volume_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;

    m_polygon_isValid = ::OpenAPI::fromJsonValue(m_polygon, json[QString("polygon")]);
    m_polygon_isSet = !json[QString("polygon")].isNull() && m_polygon_isValid;

    m_price_percent_isValid = ::OpenAPI::fromJsonValue(m_price_percent, json[QString("pricePercent")]);
    m_price_percent_isSet = !json[QString("pricePercent")].isNull() && m_price_percent_isValid;

    m_price_percent_by_weight_isValid = ::OpenAPI::fromJsonValue(m_price_percent_by_weight, json[QString("pricePercentByWeight")]);
    m_price_percent_by_weight_isSet = !json[QString("pricePercentByWeight")].isNull() && m_price_percent_by_weight_isValid;

    m_time_cost_isValid = ::OpenAPI::fromJsonValue(m_time_cost, json[QString("timeCost")]);
    m_time_cost_isSet = !json[QString("timeCost")].isNull() && m_time_cost_isValid;

    m_weight_end_isValid = ::OpenAPI::fromJsonValue(m_weight_end, json[QString("weightEnd")]);
    m_weight_end_isSet = !json[QString("weightEnd")].isNull() && m_weight_end_isValid;

    m_weight_start_isValid = ::OpenAPI::fromJsonValue(m_weight_start, json[QString("weightStart")]);
    m_weight_start_isSet = !json[QString("weightStart")].isNull() && m_weight_start_isValid;

    m_zip_code_end_isValid = ::OpenAPI::fromJsonValue(m_zip_code_end, json[QString("zipCodeEnd")]);
    m_zip_code_end_isSet = !json[QString("zipCodeEnd")].isNull() && m_zip_code_end_isValid;

    m_zip_code_start_isValid = ::OpenAPI::fromJsonValue(m_zip_code_start, json[QString("zipCodeStart")]);
    m_zip_code_start_isSet = !json[QString("zipCodeStart")].isNull() && m_zip_code_start_isValid;
}

QString OAICreateUpdateFreightValuesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUpdateFreightValuesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_absolute_money_cost_isSet) {
        obj.insert(QString("absoluteMoneyCost"), ::OpenAPI::toJsonValue(m_absolute_money_cost));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_max_volume_isSet) {
        obj.insert(QString("maxVolume"), ::OpenAPI::toJsonValue(m_max_volume));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_polygon_isSet) {
        obj.insert(QString("polygon"), ::OpenAPI::toJsonValue(m_polygon));
    }
    if (m_price_percent_isSet) {
        obj.insert(QString("pricePercent"), ::OpenAPI::toJsonValue(m_price_percent));
    }
    if (m_price_percent_by_weight_isSet) {
        obj.insert(QString("pricePercentByWeight"), ::OpenAPI::toJsonValue(m_price_percent_by_weight));
    }
    if (m_time_cost_isSet) {
        obj.insert(QString("timeCost"), ::OpenAPI::toJsonValue(m_time_cost));
    }
    if (m_weight_end_isSet) {
        obj.insert(QString("weightEnd"), ::OpenAPI::toJsonValue(m_weight_end));
    }
    if (m_weight_start_isSet) {
        obj.insert(QString("weightStart"), ::OpenAPI::toJsonValue(m_weight_start));
    }
    if (m_zip_code_end_isSet) {
        obj.insert(QString("zipCodeEnd"), ::OpenAPI::toJsonValue(m_zip_code_end));
    }
    if (m_zip_code_start_isSet) {
        obj.insert(QString("zipCodeStart"), ::OpenAPI::toJsonValue(m_zip_code_start));
    }
    return obj;
}

QString OAICreateUpdateFreightValuesRequest::getAbsoluteMoneyCost() const {
    return m_absolute_money_cost;
}
void OAICreateUpdateFreightValuesRequest::setAbsoluteMoneyCost(const QString &absolute_money_cost) {
    m_absolute_money_cost = absolute_money_cost;
    m_absolute_money_cost_isSet = true;
}

bool OAICreateUpdateFreightValuesRequest::is_absolute_money_cost_Set() const{
    return m_absolute_money_cost_isSet;
}

bool OAICreateUpdateFreightValuesRequest::is_absolute_money_cost_Valid() const{
    return m_absolute_money_cost_isValid;
}

QString OAICreateUpdateFreightValuesRequest::getCountry() const {
    return m_country;
}
void OAICreateUpdateFreightValuesRequest::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICreateUpdateFreightValuesRequest::is_country_Set() const{
    return m_country_isSet;
}

bool OAICreateUpdateFreightValuesRequest::is_country_Valid() const{
    return m_country_isValid;
}

qint32 OAICreateUpdateFreightValuesRequest::getMaxVolume() const {
    return m_max_volume;
}
void OAICreateUpdateFreightValuesRequest::setMaxVolume(const qint32 &max_volume) {
    m_max_volume = max_volume;
    m_max_volume_isSet = true;
}

bool OAICreateUpdateFreightValuesRequest::is_max_volume_Set() const{
    return m_max_volume_isSet;
}

bool OAICreateUpdateFreightValuesRequest::is_max_volume_Valid() const{
    return m_max_volume_isValid;
}

qint32 OAICreateUpdateFreightValuesRequest::getOperationType() const {
    return m_operation_type;
}
void OAICreateUpdateFreightValuesRequest::setOperationType(const qint32 &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAICreateUpdateFreightValuesRequest::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAICreateUpdateFreightValuesRequest::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

QString OAICreateUpdateFreightValuesRequest::getPolygon() const {
    return m_polygon;
}
void OAICreateUpdateFreightValuesRequest::setPolygon(const QString &polygon) {
    m_polygon = polygon;
    m_polygon_isSet = true;
}

bool OAICreateUpdateFreightValuesRequest::is_polygon_Set() const{
    return m_polygon_isSet;
}

bool OAICreateUpdateFreightValuesRequest::is_polygon_Valid() const{
    return m_polygon_isValid;
}

qint32 OAICreateUpdateFreightValuesRequest::getPricePercent() const {
    return m_price_percent;
}
void OAICreateUpdateFreightValuesRequest::setPricePercent(const qint32 &price_percent) {
    m_price_percent = price_percent;
    m_price_percent_isSet = true;
}

bool OAICreateUpdateFreightValuesRequest::is_price_percent_Set() const{
    return m_price_percent_isSet;
}

bool OAICreateUpdateFreightValuesRequest::is_price_percent_Valid() const{
    return m_price_percent_isValid;
}

qint32 OAICreateUpdateFreightValuesRequest::getPricePercentByWeight() const {
    return m_price_percent_by_weight;
}
void OAICreateUpdateFreightValuesRequest::setPricePercentByWeight(const qint32 &price_percent_by_weight) {
    m_price_percent_by_weight = price_percent_by_weight;
    m_price_percent_by_weight_isSet = true;
}

bool OAICreateUpdateFreightValuesRequest::is_price_percent_by_weight_Set() const{
    return m_price_percent_by_weight_isSet;
}

bool OAICreateUpdateFreightValuesRequest::is_price_percent_by_weight_Valid() const{
    return m_price_percent_by_weight_isValid;
}

QString OAICreateUpdateFreightValuesRequest::getTimeCost() const {
    return m_time_cost;
}
void OAICreateUpdateFreightValuesRequest::setTimeCost(const QString &time_cost) {
    m_time_cost = time_cost;
    m_time_cost_isSet = true;
}

bool OAICreateUpdateFreightValuesRequest::is_time_cost_Set() const{
    return m_time_cost_isSet;
}

bool OAICreateUpdateFreightValuesRequest::is_time_cost_Valid() const{
    return m_time_cost_isValid;
}

qint32 OAICreateUpdateFreightValuesRequest::getWeightEnd() const {
    return m_weight_end;
}
void OAICreateUpdateFreightValuesRequest::setWeightEnd(const qint32 &weight_end) {
    m_weight_end = weight_end;
    m_weight_end_isSet = true;
}

bool OAICreateUpdateFreightValuesRequest::is_weight_end_Set() const{
    return m_weight_end_isSet;
}

bool OAICreateUpdateFreightValuesRequest::is_weight_end_Valid() const{
    return m_weight_end_isValid;
}

qint32 OAICreateUpdateFreightValuesRequest::getWeightStart() const {
    return m_weight_start;
}
void OAICreateUpdateFreightValuesRequest::setWeightStart(const qint32 &weight_start) {
    m_weight_start = weight_start;
    m_weight_start_isSet = true;
}

bool OAICreateUpdateFreightValuesRequest::is_weight_start_Set() const{
    return m_weight_start_isSet;
}

bool OAICreateUpdateFreightValuesRequest::is_weight_start_Valid() const{
    return m_weight_start_isValid;
}

QString OAICreateUpdateFreightValuesRequest::getZipCodeEnd() const {
    return m_zip_code_end;
}
void OAICreateUpdateFreightValuesRequest::setZipCodeEnd(const QString &zip_code_end) {
    m_zip_code_end = zip_code_end;
    m_zip_code_end_isSet = true;
}

bool OAICreateUpdateFreightValuesRequest::is_zip_code_end_Set() const{
    return m_zip_code_end_isSet;
}

bool OAICreateUpdateFreightValuesRequest::is_zip_code_end_Valid() const{
    return m_zip_code_end_isValid;
}

QString OAICreateUpdateFreightValuesRequest::getZipCodeStart() const {
    return m_zip_code_start;
}
void OAICreateUpdateFreightValuesRequest::setZipCodeStart(const QString &zip_code_start) {
    m_zip_code_start = zip_code_start;
    m_zip_code_start_isSet = true;
}

bool OAICreateUpdateFreightValuesRequest::is_zip_code_start_Set() const{
    return m_zip_code_start_isSet;
}

bool OAICreateUpdateFreightValuesRequest::is_zip_code_start_Valid() const{
    return m_zip_code_start_isValid;
}

bool OAICreateUpdateFreightValuesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absolute_money_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_polygon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_percent_by_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUpdateFreightValuesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_absolute_money_cost_isValid && m_country_isValid && m_max_volume_isValid && m_operation_type_isValid && m_polygon_isValid && m_price_percent_isValid && m_price_percent_by_weight_isValid && m_time_cost_isValid && m_weight_end_isValid && m_weight_start_isValid && m_zip_code_end_isValid && m_zip_code_start_isValid && true;
}

} // namespace OpenAPI
