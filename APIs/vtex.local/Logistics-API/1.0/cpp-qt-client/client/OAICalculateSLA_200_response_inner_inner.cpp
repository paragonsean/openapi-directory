/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateSLA_200_response_inner_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateSLA_200_response_inner_inner::OAICalculateSLA_200_response_inner_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateSLA_200_response_inner_inner::OAICalculateSLA_200_response_inner_inner() {
    this->initializeModel();
}

OAICalculateSLA_200_response_inner_inner::~OAICalculateSLA_200_response_inner_inner() {}

void OAICalculateSLA_200_response_inner_inner::initializeModel() {

    m_aditional_time_blocked_days_isSet = false;
    m_aditional_time_blocked_days_isValid = false;

    m_availability_quantity_isSet = false;
    m_availability_quantity_isValid = false;

    m_carrier_schedule_isSet = false;
    m_carrier_schedule_isValid = false;

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;

    m_delivery_on_weekends_isSet = false;
    m_delivery_on_weekends_isValid = false;

    m_delivery_windows_isSet = false;
    m_delivery_windows_isValid = false;

    m_dock_id_isSet = false;
    m_dock_id_isValid = false;

    m_dock_time_isSet = false;
    m_dock_time_isValid = false;

    m_freight_table_id_isSet = false;
    m_freight_table_id_isValid = false;

    m_freight_table_name_isSet = false;
    m_freight_table_name_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_list_price_isSet = false;
    m_list_price_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_pickup_store_info_isSet = false;
    m_pickup_store_info_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_restricted_freight_isSet = false;
    m_restricted_freight_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_sla_type_isSet = false;
    m_sla_type_isValid = false;

    m_sla_type_name_isSet = false;
    m_sla_type_name_isValid = false;

    m_time_to_dock_plus_dock_time_isSet = false;
    m_time_to_dock_plus_dock_time_isValid = false;

    m_total_time_isSet = false;
    m_total_time_isValid = false;

    m_transit_time_isSet = false;
    m_transit_time_isValid = false;

    m_ware_house_id_isSet = false;
    m_ware_house_id_isValid = false;
}

void OAICalculateSLA_200_response_inner_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateSLA_200_response_inner_inner::fromJsonObject(QJsonObject json) {

    m_aditional_time_blocked_days_isValid = ::OpenAPI::fromJsonValue(m_aditional_time_blocked_days, json[QString("aditionalTimeBlockedDays")]);
    m_aditional_time_blocked_days_isSet = !json[QString("aditionalTimeBlockedDays")].isNull() && m_aditional_time_blocked_days_isValid;

    m_availability_quantity_isValid = ::OpenAPI::fromJsonValue(m_availability_quantity, json[QString("availabilityQuantity")]);
    m_availability_quantity_isSet = !json[QString("availabilityQuantity")].isNull() && m_availability_quantity_isValid;

    m_carrier_schedule_isValid = ::OpenAPI::fromJsonValue(m_carrier_schedule, json[QString("carrierSchedule")]);
    m_carrier_schedule_isSet = !json[QString("carrierSchedule")].isNull() && m_carrier_schedule_isValid;

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("coordinates")]);
    m_coordinates_isSet = !json[QString("coordinates")].isNull() && m_coordinates_isValid;

    m_delivery_on_weekends_isValid = ::OpenAPI::fromJsonValue(m_delivery_on_weekends, json[QString("deliveryOnWeekends")]);
    m_delivery_on_weekends_isSet = !json[QString("deliveryOnWeekends")].isNull() && m_delivery_on_weekends_isValid;

    m_delivery_windows_isValid = ::OpenAPI::fromJsonValue(m_delivery_windows, json[QString("deliveryWindows")]);
    m_delivery_windows_isSet = !json[QString("deliveryWindows")].isNull() && m_delivery_windows_isValid;

    m_dock_id_isValid = ::OpenAPI::fromJsonValue(m_dock_id, json[QString("dockId")]);
    m_dock_id_isSet = !json[QString("dockId")].isNull() && m_dock_id_isValid;

    m_dock_time_isValid = ::OpenAPI::fromJsonValue(m_dock_time, json[QString("dockTime")]);
    m_dock_time_isSet = !json[QString("dockTime")].isNull() && m_dock_time_isValid;

    m_freight_table_id_isValid = ::OpenAPI::fromJsonValue(m_freight_table_id, json[QString("freightTableId")]);
    m_freight_table_id_isSet = !json[QString("freightTableId")].isNull() && m_freight_table_id_isValid;

    m_freight_table_name_isValid = ::OpenAPI::fromJsonValue(m_freight_table_name, json[QString("freightTableName")]);
    m_freight_table_name_isSet = !json[QString("freightTableName")].isNull() && m_freight_table_name_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_list_price_isValid = ::OpenAPI::fromJsonValue(m_list_price, json[QString("listPrice")]);
    m_list_price_isSet = !json[QString("listPrice")].isNull() && m_list_price_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_pickup_store_info_isValid = ::OpenAPI::fromJsonValue(m_pickup_store_info, json[QString("pickupStoreInfo")]);
    m_pickup_store_info_isSet = !json[QString("pickupStoreInfo")].isNull() && m_pickup_store_info_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_restricted_freight_isValid = ::OpenAPI::fromJsonValue(m_restricted_freight, json[QString("restrictedFreight")]);
    m_restricted_freight_isSet = !json[QString("restrictedFreight")].isNull() && m_restricted_freight_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;

    m_sla_type_isValid = ::OpenAPI::fromJsonValue(m_sla_type, json[QString("slaType")]);
    m_sla_type_isSet = !json[QString("slaType")].isNull() && m_sla_type_isValid;

    m_sla_type_name_isValid = ::OpenAPI::fromJsonValue(m_sla_type_name, json[QString("slaTypeName")]);
    m_sla_type_name_isSet = !json[QString("slaTypeName")].isNull() && m_sla_type_name_isValid;

    m_time_to_dock_plus_dock_time_isValid = ::OpenAPI::fromJsonValue(m_time_to_dock_plus_dock_time, json[QString("timeToDockPlusDockTime")]);
    m_time_to_dock_plus_dock_time_isSet = !json[QString("timeToDockPlusDockTime")].isNull() && m_time_to_dock_plus_dock_time_isValid;

    m_total_time_isValid = ::OpenAPI::fromJsonValue(m_total_time, json[QString("totalTime")]);
    m_total_time_isSet = !json[QString("totalTime")].isNull() && m_total_time_isValid;

    m_transit_time_isValid = ::OpenAPI::fromJsonValue(m_transit_time, json[QString("transitTime")]);
    m_transit_time_isSet = !json[QString("transitTime")].isNull() && m_transit_time_isValid;

    m_ware_house_id_isValid = ::OpenAPI::fromJsonValue(m_ware_house_id, json[QString("wareHouseId")]);
    m_ware_house_id_isSet = !json[QString("wareHouseId")].isNull() && m_ware_house_id_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateSLA_200_response_inner_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_aditional_time_blocked_days_isSet) {
        obj.insert(QString("aditionalTimeBlockedDays"), ::OpenAPI::toJsonValue(m_aditional_time_blocked_days));
    }
    if (m_availability_quantity_isSet) {
        obj.insert(QString("availabilityQuantity"), ::OpenAPI::toJsonValue(m_availability_quantity));
    }
    if (m_carrier_schedule.size() > 0) {
        obj.insert(QString("carrierSchedule"), ::OpenAPI::toJsonValue(m_carrier_schedule));
    }
    if (m_coordinates_isSet) {
        obj.insert(QString("coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    if (m_delivery_on_weekends_isSet) {
        obj.insert(QString("deliveryOnWeekends"), ::OpenAPI::toJsonValue(m_delivery_on_weekends));
    }
    if (m_delivery_windows.size() > 0) {
        obj.insert(QString("deliveryWindows"), ::OpenAPI::toJsonValue(m_delivery_windows));
    }
    if (m_dock_id_isSet) {
        obj.insert(QString("dockId"), ::OpenAPI::toJsonValue(m_dock_id));
    }
    if (m_dock_time_isSet) {
        obj.insert(QString("dockTime"), ::OpenAPI::toJsonValue(m_dock_time));
    }
    if (m_freight_table_id_isSet) {
        obj.insert(QString("freightTableId"), ::OpenAPI::toJsonValue(m_freight_table_id));
    }
    if (m_freight_table_name_isSet) {
        obj.insert(QString("freightTableName"), ::OpenAPI::toJsonValue(m_freight_table_name));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_list_price_isSet) {
        obj.insert(QString("listPrice"), ::OpenAPI::toJsonValue(m_list_price));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_pickup_store_info_isSet) {
        obj.insert(QString("pickupStoreInfo"), ::OpenAPI::toJsonValue(m_pickup_store_info));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_restricted_freight_isSet) {
        obj.insert(QString("restrictedFreight"), ::OpenAPI::toJsonValue(m_restricted_freight));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_sla_type_isSet) {
        obj.insert(QString("slaType"), ::OpenAPI::toJsonValue(m_sla_type));
    }
    if (m_sla_type_name_isSet) {
        obj.insert(QString("slaTypeName"), ::OpenAPI::toJsonValue(m_sla_type_name));
    }
    if (m_time_to_dock_plus_dock_time_isSet) {
        obj.insert(QString("timeToDockPlusDockTime"), ::OpenAPI::toJsonValue(m_time_to_dock_plus_dock_time));
    }
    if (m_total_time_isSet) {
        obj.insert(QString("totalTime"), ::OpenAPI::toJsonValue(m_total_time));
    }
    if (m_transit_time_isSet) {
        obj.insert(QString("transitTime"), ::OpenAPI::toJsonValue(m_transit_time));
    }
    if (m_ware_house_id_isSet) {
        obj.insert(QString("wareHouseId"), ::OpenAPI::toJsonValue(m_ware_house_id));
    }
    return obj;
}

QString OAICalculateSLA_200_response_inner_inner::getAditionalTimeBlockedDays() const {
    return m_aditional_time_blocked_days;
}
void OAICalculateSLA_200_response_inner_inner::setAditionalTimeBlockedDays(const QString &aditional_time_blocked_days) {
    m_aditional_time_blocked_days = aditional_time_blocked_days;
    m_aditional_time_blocked_days_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_aditional_time_blocked_days_Set() const{
    return m_aditional_time_blocked_days_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_aditional_time_blocked_days_Valid() const{
    return m_aditional_time_blocked_days_isValid;
}

qint32 OAICalculateSLA_200_response_inner_inner::getAvailabilityQuantity() const {
    return m_availability_quantity;
}
void OAICalculateSLA_200_response_inner_inner::setAvailabilityQuantity(const qint32 &availability_quantity) {
    m_availability_quantity = availability_quantity;
    m_availability_quantity_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_availability_quantity_Set() const{
    return m_availability_quantity_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_availability_quantity_Valid() const{
    return m_availability_quantity_isValid;
}

QList<QString> OAICalculateSLA_200_response_inner_inner::getCarrierSchedule() const {
    return m_carrier_schedule;
}
void OAICalculateSLA_200_response_inner_inner::setCarrierSchedule(const QList<QString> &carrier_schedule) {
    m_carrier_schedule = carrier_schedule;
    m_carrier_schedule_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_carrier_schedule_Set() const{
    return m_carrier_schedule_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_carrier_schedule_Valid() const{
    return m_carrier_schedule_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getCoordinates() const {
    return m_coordinates;
}
void OAICalculateSLA_200_response_inner_inner::setCoordinates(const QString &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

bool OAICalculateSLA_200_response_inner_inner::isDeliveryOnWeekends() const {
    return m_delivery_on_weekends;
}
void OAICalculateSLA_200_response_inner_inner::setDeliveryOnWeekends(const bool &delivery_on_weekends) {
    m_delivery_on_weekends = delivery_on_weekends;
    m_delivery_on_weekends_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_delivery_on_weekends_Set() const{
    return m_delivery_on_weekends_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_delivery_on_weekends_Valid() const{
    return m_delivery_on_weekends_isValid;
}

QList<OAIDeliveryWindow_1> OAICalculateSLA_200_response_inner_inner::getDeliveryWindows() const {
    return m_delivery_windows;
}
void OAICalculateSLA_200_response_inner_inner::setDeliveryWindows(const QList<OAIDeliveryWindow_1> &delivery_windows) {
    m_delivery_windows = delivery_windows;
    m_delivery_windows_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_delivery_windows_Set() const{
    return m_delivery_windows_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_delivery_windows_Valid() const{
    return m_delivery_windows_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getDockId() const {
    return m_dock_id;
}
void OAICalculateSLA_200_response_inner_inner::setDockId(const QString &dock_id) {
    m_dock_id = dock_id;
    m_dock_id_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_dock_id_Set() const{
    return m_dock_id_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_dock_id_Valid() const{
    return m_dock_id_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getDockTime() const {
    return m_dock_time;
}
void OAICalculateSLA_200_response_inner_inner::setDockTime(const QString &dock_time) {
    m_dock_time = dock_time;
    m_dock_time_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_dock_time_Set() const{
    return m_dock_time_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_dock_time_Valid() const{
    return m_dock_time_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getFreightTableId() const {
    return m_freight_table_id;
}
void OAICalculateSLA_200_response_inner_inner::setFreightTableId(const QString &freight_table_id) {
    m_freight_table_id = freight_table_id;
    m_freight_table_id_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_freight_table_id_Set() const{
    return m_freight_table_id_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_freight_table_id_Valid() const{
    return m_freight_table_id_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getFreightTableName() const {
    return m_freight_table_name;
}
void OAICalculateSLA_200_response_inner_inner::setFreightTableName(const QString &freight_table_name) {
    m_freight_table_name = freight_table_name;
    m_freight_table_name_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_freight_table_name_Set() const{
    return m_freight_table_name_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_freight_table_name_Valid() const{
    return m_freight_table_name_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getItemId() const {
    return m_item_id;
}
void OAICalculateSLA_200_response_inner_inner::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_item_id_Valid() const{
    return m_item_id_isValid;
}

double OAICalculateSLA_200_response_inner_inner::getListPrice() const {
    return m_list_price;
}
void OAICalculateSLA_200_response_inner_inner::setListPrice(const double &list_price) {
    m_list_price = list_price;
    m_list_price_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_list_price_Set() const{
    return m_list_price_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_list_price_Valid() const{
    return m_list_price_isValid;
}

OAILocation1_1 OAICalculateSLA_200_response_inner_inner::getLocation() const {
    return m_location;
}
void OAICalculateSLA_200_response_inner_inner::setLocation(const OAILocation1_1 &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_location_Set() const{
    return m_location_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_location_Valid() const{
    return m_location_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getPickupStoreInfo() const {
    return m_pickup_store_info;
}
void OAICalculateSLA_200_response_inner_inner::setPickupStoreInfo(const QString &pickup_store_info) {
    m_pickup_store_info = pickup_store_info;
    m_pickup_store_info_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_pickup_store_info_Set() const{
    return m_pickup_store_info_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_pickup_store_info_Valid() const{
    return m_pickup_store_info_isValid;
}

qint32 OAICalculateSLA_200_response_inner_inner::getQuantity() const {
    return m_quantity;
}
void OAICalculateSLA_200_response_inner_inner::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getRestrictedFreight() const {
    return m_restricted_freight;
}
void OAICalculateSLA_200_response_inner_inner::setRestrictedFreight(const QString &restricted_freight) {
    m_restricted_freight = restricted_freight;
    m_restricted_freight_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_restricted_freight_Set() const{
    return m_restricted_freight_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_restricted_freight_Valid() const{
    return m_restricted_freight_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getSalesChannel() const {
    return m_sales_channel;
}
void OAICalculateSLA_200_response_inner_inner::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getSlaType() const {
    return m_sla_type;
}
void OAICalculateSLA_200_response_inner_inner::setSlaType(const QString &sla_type) {
    m_sla_type = sla_type;
    m_sla_type_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_sla_type_Set() const{
    return m_sla_type_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_sla_type_Valid() const{
    return m_sla_type_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getSlaTypeName() const {
    return m_sla_type_name;
}
void OAICalculateSLA_200_response_inner_inner::setSlaTypeName(const QString &sla_type_name) {
    m_sla_type_name = sla_type_name;
    m_sla_type_name_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_sla_type_name_Set() const{
    return m_sla_type_name_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_sla_type_name_Valid() const{
    return m_sla_type_name_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getTimeToDockPlusDockTime() const {
    return m_time_to_dock_plus_dock_time;
}
void OAICalculateSLA_200_response_inner_inner::setTimeToDockPlusDockTime(const QString &time_to_dock_plus_dock_time) {
    m_time_to_dock_plus_dock_time = time_to_dock_plus_dock_time;
    m_time_to_dock_plus_dock_time_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_time_to_dock_plus_dock_time_Set() const{
    return m_time_to_dock_plus_dock_time_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_time_to_dock_plus_dock_time_Valid() const{
    return m_time_to_dock_plus_dock_time_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getTotalTime() const {
    return m_total_time;
}
void OAICalculateSLA_200_response_inner_inner::setTotalTime(const QString &total_time) {
    m_total_time = total_time;
    m_total_time_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_total_time_Set() const{
    return m_total_time_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_total_time_Valid() const{
    return m_total_time_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getTransitTime() const {
    return m_transit_time;
}
void OAICalculateSLA_200_response_inner_inner::setTransitTime(const QString &transit_time) {
    m_transit_time = transit_time;
    m_transit_time_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_transit_time_Set() const{
    return m_transit_time_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_transit_time_Valid() const{
    return m_transit_time_isValid;
}

QString OAICalculateSLA_200_response_inner_inner::getWareHouseId() const {
    return m_ware_house_id;
}
void OAICalculateSLA_200_response_inner_inner::setWareHouseId(const QString &ware_house_id) {
    m_ware_house_id = ware_house_id;
    m_ware_house_id_isSet = true;
}

bool OAICalculateSLA_200_response_inner_inner::is_ware_house_id_Set() const{
    return m_ware_house_id_isSet;
}

bool OAICalculateSLA_200_response_inner_inner::is_ware_house_id_Valid() const{
    return m_ware_house_id_isValid;
}

bool OAICalculateSLA_200_response_inner_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aditional_time_blocked_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_schedule.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_on_weekends_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_windows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dock_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_table_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_store_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_freight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sla_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sla_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_dock_plus_dock_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transit_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ware_house_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateSLA_200_response_inner_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aditional_time_blocked_days_isValid && m_availability_quantity_isValid && m_carrier_schedule_isValid && m_coordinates_isValid && m_delivery_on_weekends_isValid && m_delivery_windows_isValid && m_dock_id_isValid && m_dock_time_isValid && m_freight_table_id_isValid && m_freight_table_name_isValid && m_item_id_isValid && m_list_price_isValid && m_location_isValid && m_pickup_store_info_isValid && m_quantity_isValid && m_restricted_freight_isValid && m_sales_channel_isValid && m_sla_type_isValid && m_sla_type_name_isValid && m_time_to_dock_plus_dock_time_isValid && m_total_time_isValid && m_transit_time_isValid && m_ware_house_id_isValid && true;
}

} // namespace OpenAPI
