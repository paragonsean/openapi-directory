/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryItemOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryItemOption::OAIDeliveryItemOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryItemOption::OAIDeliveryItemOption() {
    this->initializeModel();
}

OAIDeliveryItemOption::~OAIDeliveryItemOption() {}

void OAIDeliveryItemOption::initializeModel() {

    m_aditional_time_blocked_days_isSet = false;
    m_aditional_time_blocked_days_isValid = false;

    m_delivery_windows_isSet = false;
    m_delivery_windows_isValid = false;

    m_dock_id_isSet = false;
    m_dock_id_isValid = false;

    m_dock_time_isSet = false;
    m_dock_time_isValid = false;

    m_item_isSet = false;
    m_item_isValid = false;

    m_list_price_isSet = false;
    m_list_price_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_promotional_price_isSet = false;
    m_promotional_price_isValid = false;

    m_sla_type_isSet = false;
    m_sla_type_isValid = false;

    m_sla_type_name_isSet = false;
    m_sla_type_name_isValid = false;

    m_time_to_dock_plus_dock_time_isSet = false;
    m_time_to_dock_plus_dock_time_isValid = false;

    m_total_time_isSet = false;
    m_total_time_isValid = false;

    m_transit_time_isSet = false;
    m_transit_time_isValid = false;

    m_ware_house_id_isSet = false;
    m_ware_house_id_isValid = false;
}

void OAIDeliveryItemOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryItemOption::fromJsonObject(QJsonObject json) {

    m_aditional_time_blocked_days_isValid = ::OpenAPI::fromJsonValue(m_aditional_time_blocked_days, json[QString("aditionalTimeBlockedDays")]);
    m_aditional_time_blocked_days_isSet = !json[QString("aditionalTimeBlockedDays")].isNull() && m_aditional_time_blocked_days_isValid;

    m_delivery_windows_isValid = ::OpenAPI::fromJsonValue(m_delivery_windows, json[QString("deliveryWindows")]);
    m_delivery_windows_isSet = !json[QString("deliveryWindows")].isNull() && m_delivery_windows_isValid;

    m_dock_id_isValid = ::OpenAPI::fromJsonValue(m_dock_id, json[QString("dockId")]);
    m_dock_id_isSet = !json[QString("dockId")].isNull() && m_dock_id_isValid;

    m_dock_time_isValid = ::OpenAPI::fromJsonValue(m_dock_time, json[QString("dockTime")]);
    m_dock_time_isSet = !json[QString("dockTime")].isNull() && m_dock_time_isValid;

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_list_price_isValid = ::OpenAPI::fromJsonValue(m_list_price, json[QString("listPrice")]);
    m_list_price_isSet = !json[QString("listPrice")].isNull() && m_list_price_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_promotional_price_isValid = ::OpenAPI::fromJsonValue(m_promotional_price, json[QString("promotionalPrice")]);
    m_promotional_price_isSet = !json[QString("promotionalPrice")].isNull() && m_promotional_price_isValid;

    m_sla_type_isValid = ::OpenAPI::fromJsonValue(m_sla_type, json[QString("slaType")]);
    m_sla_type_isSet = !json[QString("slaType")].isNull() && m_sla_type_isValid;

    m_sla_type_name_isValid = ::OpenAPI::fromJsonValue(m_sla_type_name, json[QString("slaTypeName")]);
    m_sla_type_name_isSet = !json[QString("slaTypeName")].isNull() && m_sla_type_name_isValid;

    m_time_to_dock_plus_dock_time_isValid = ::OpenAPI::fromJsonValue(m_time_to_dock_plus_dock_time, json[QString("timeToDockPlusDockTime")]);
    m_time_to_dock_plus_dock_time_isSet = !json[QString("timeToDockPlusDockTime")].isNull() && m_time_to_dock_plus_dock_time_isValid;

    m_total_time_isValid = ::OpenAPI::fromJsonValue(m_total_time, json[QString("totalTime")]);
    m_total_time_isSet = !json[QString("totalTime")].isNull() && m_total_time_isValid;

    m_transit_time_isValid = ::OpenAPI::fromJsonValue(m_transit_time, json[QString("transitTime")]);
    m_transit_time_isSet = !json[QString("transitTime")].isNull() && m_transit_time_isValid;

    m_ware_house_id_isValid = ::OpenAPI::fromJsonValue(m_ware_house_id, json[QString("wareHouseId")]);
    m_ware_house_id_isSet = !json[QString("wareHouseId")].isNull() && m_ware_house_id_isValid;
}

QString OAIDeliveryItemOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryItemOption::asJsonObject() const {
    QJsonObject obj;
    if (m_aditional_time_blocked_days_isSet) {
        obj.insert(QString("aditionalTimeBlockedDays"), ::OpenAPI::toJsonValue(m_aditional_time_blocked_days));
    }
    if (m_delivery_windows.size() > 0) {
        obj.insert(QString("deliveryWindows"), ::OpenAPI::toJsonValue(m_delivery_windows));
    }
    if (m_dock_id_isSet) {
        obj.insert(QString("dockId"), ::OpenAPI::toJsonValue(m_dock_id));
    }
    if (m_dock_time_isSet) {
        obj.insert(QString("dockTime"), ::OpenAPI::toJsonValue(m_dock_time));
    }
    if (m_item.isSet()) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_list_price_isSet) {
        obj.insert(QString("listPrice"), ::OpenAPI::toJsonValue(m_list_price));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_promotional_price_isSet) {
        obj.insert(QString("promotionalPrice"), ::OpenAPI::toJsonValue(m_promotional_price));
    }
    if (m_sla_type_isSet) {
        obj.insert(QString("slaType"), ::OpenAPI::toJsonValue(m_sla_type));
    }
    if (m_sla_type_name_isSet) {
        obj.insert(QString("slaTypeName"), ::OpenAPI::toJsonValue(m_sla_type_name));
    }
    if (m_time_to_dock_plus_dock_time_isSet) {
        obj.insert(QString("timeToDockPlusDockTime"), ::OpenAPI::toJsonValue(m_time_to_dock_plus_dock_time));
    }
    if (m_total_time_isSet) {
        obj.insert(QString("totalTime"), ::OpenAPI::toJsonValue(m_total_time));
    }
    if (m_transit_time_isSet) {
        obj.insert(QString("transitTime"), ::OpenAPI::toJsonValue(m_transit_time));
    }
    if (m_ware_house_id_isSet) {
        obj.insert(QString("wareHouseId"), ::OpenAPI::toJsonValue(m_ware_house_id));
    }
    return obj;
}

QString OAIDeliveryItemOption::getAditionalTimeBlockedDays() const {
    return m_aditional_time_blocked_days;
}
void OAIDeliveryItemOption::setAditionalTimeBlockedDays(const QString &aditional_time_blocked_days) {
    m_aditional_time_blocked_days = aditional_time_blocked_days;
    m_aditional_time_blocked_days_isSet = true;
}

bool OAIDeliveryItemOption::is_aditional_time_blocked_days_Set() const{
    return m_aditional_time_blocked_days_isSet;
}

bool OAIDeliveryItemOption::is_aditional_time_blocked_days_Valid() const{
    return m_aditional_time_blocked_days_isValid;
}

QList<QString> OAIDeliveryItemOption::getDeliveryWindows() const {
    return m_delivery_windows;
}
void OAIDeliveryItemOption::setDeliveryWindows(const QList<QString> &delivery_windows) {
    m_delivery_windows = delivery_windows;
    m_delivery_windows_isSet = true;
}

bool OAIDeliveryItemOption::is_delivery_windows_Set() const{
    return m_delivery_windows_isSet;
}

bool OAIDeliveryItemOption::is_delivery_windows_Valid() const{
    return m_delivery_windows_isValid;
}

QString OAIDeliveryItemOption::getDockId() const {
    return m_dock_id;
}
void OAIDeliveryItemOption::setDockId(const QString &dock_id) {
    m_dock_id = dock_id;
    m_dock_id_isSet = true;
}

bool OAIDeliveryItemOption::is_dock_id_Set() const{
    return m_dock_id_isSet;
}

bool OAIDeliveryItemOption::is_dock_id_Valid() const{
    return m_dock_id_isValid;
}

QString OAIDeliveryItemOption::getDockTime() const {
    return m_dock_time;
}
void OAIDeliveryItemOption::setDockTime(const QString &dock_time) {
    m_dock_time = dock_time;
    m_dock_time_isSet = true;
}

bool OAIDeliveryItemOption::is_dock_time_Set() const{
    return m_dock_time_isSet;
}

bool OAIDeliveryItemOption::is_dock_time_Valid() const{
    return m_dock_time_isValid;
}

OAIItem_1 OAIDeliveryItemOption::getItem() const {
    return m_item;
}
void OAIDeliveryItemOption::setItem(const OAIItem_1 &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIDeliveryItemOption::is_item_Set() const{
    return m_item_isSet;
}

bool OAIDeliveryItemOption::is_item_Valid() const{
    return m_item_isValid;
}

double OAIDeliveryItemOption::getListPrice() const {
    return m_list_price;
}
void OAIDeliveryItemOption::setListPrice(const double &list_price) {
    m_list_price = list_price;
    m_list_price_isSet = true;
}

bool OAIDeliveryItemOption::is_list_price_Set() const{
    return m_list_price_isSet;
}

bool OAIDeliveryItemOption::is_list_price_Valid() const{
    return m_list_price_isValid;
}

OAILocation_1 OAIDeliveryItemOption::getLocation() const {
    return m_location;
}
void OAIDeliveryItemOption::setLocation(const OAILocation_1 &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIDeliveryItemOption::is_location_Set() const{
    return m_location_isSet;
}

bool OAIDeliveryItemOption::is_location_Valid() const{
    return m_location_isValid;
}

double OAIDeliveryItemOption::getPromotionalPrice() const {
    return m_promotional_price;
}
void OAIDeliveryItemOption::setPromotionalPrice(const double &promotional_price) {
    m_promotional_price = promotional_price;
    m_promotional_price_isSet = true;
}

bool OAIDeliveryItemOption::is_promotional_price_Set() const{
    return m_promotional_price_isSet;
}

bool OAIDeliveryItemOption::is_promotional_price_Valid() const{
    return m_promotional_price_isValid;
}

QString OAIDeliveryItemOption::getSlaType() const {
    return m_sla_type;
}
void OAIDeliveryItemOption::setSlaType(const QString &sla_type) {
    m_sla_type = sla_type;
    m_sla_type_isSet = true;
}

bool OAIDeliveryItemOption::is_sla_type_Set() const{
    return m_sla_type_isSet;
}

bool OAIDeliveryItemOption::is_sla_type_Valid() const{
    return m_sla_type_isValid;
}

QString OAIDeliveryItemOption::getSlaTypeName() const {
    return m_sla_type_name;
}
void OAIDeliveryItemOption::setSlaTypeName(const QString &sla_type_name) {
    m_sla_type_name = sla_type_name;
    m_sla_type_name_isSet = true;
}

bool OAIDeliveryItemOption::is_sla_type_name_Set() const{
    return m_sla_type_name_isSet;
}

bool OAIDeliveryItemOption::is_sla_type_name_Valid() const{
    return m_sla_type_name_isValid;
}

QString OAIDeliveryItemOption::getTimeToDockPlusDockTime() const {
    return m_time_to_dock_plus_dock_time;
}
void OAIDeliveryItemOption::setTimeToDockPlusDockTime(const QString &time_to_dock_plus_dock_time) {
    m_time_to_dock_plus_dock_time = time_to_dock_plus_dock_time;
    m_time_to_dock_plus_dock_time_isSet = true;
}

bool OAIDeliveryItemOption::is_time_to_dock_plus_dock_time_Set() const{
    return m_time_to_dock_plus_dock_time_isSet;
}

bool OAIDeliveryItemOption::is_time_to_dock_plus_dock_time_Valid() const{
    return m_time_to_dock_plus_dock_time_isValid;
}

QString OAIDeliveryItemOption::getTotalTime() const {
    return m_total_time;
}
void OAIDeliveryItemOption::setTotalTime(const QString &total_time) {
    m_total_time = total_time;
    m_total_time_isSet = true;
}

bool OAIDeliveryItemOption::is_total_time_Set() const{
    return m_total_time_isSet;
}

bool OAIDeliveryItemOption::is_total_time_Valid() const{
    return m_total_time_isValid;
}

QString OAIDeliveryItemOption::getTransitTime() const {
    return m_transit_time;
}
void OAIDeliveryItemOption::setTransitTime(const QString &transit_time) {
    m_transit_time = transit_time;
    m_transit_time_isSet = true;
}

bool OAIDeliveryItemOption::is_transit_time_Set() const{
    return m_transit_time_isSet;
}

bool OAIDeliveryItemOption::is_transit_time_Valid() const{
    return m_transit_time_isValid;
}

QString OAIDeliveryItemOption::getWareHouseId() const {
    return m_ware_house_id;
}
void OAIDeliveryItemOption::setWareHouseId(const QString &ware_house_id) {
    m_ware_house_id = ware_house_id;
    m_ware_house_id_isSet = true;
}

bool OAIDeliveryItemOption::is_ware_house_id_Set() const{
    return m_ware_house_id_isSet;
}

bool OAIDeliveryItemOption::is_ware_house_id_Valid() const{
    return m_ware_house_id_isValid;
}

bool OAIDeliveryItemOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aditional_time_blocked_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_windows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dock_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotional_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sla_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sla_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_dock_plus_dock_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transit_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ware_house_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryItemOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aditional_time_blocked_days_isValid && m_delivery_windows_isValid && m_dock_id_isValid && m_dock_time_isValid && m_item_isValid && m_list_price_isValid && m_location_isValid && m_promotional_price_isValid && m_sla_type_isValid && m_sla_type_name_isValid && m_time_to_dock_plus_dock_time_isValid && m_total_time_isValid && m_transit_time_isValid && m_ware_house_id_isValid && true;
}

} // namespace OpenAPI
