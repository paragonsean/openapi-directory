/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_in_store_isSet = false;
    m_in_store_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_in_store_isValid = ::OpenAPI::fromJsonValue(m_in_store, json[QString("inStore")]);
    m_in_store_isSet = !json[QString("inStore")].isNull() && m_in_store_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zipCode")]);
    m_zip_code_isSet = !json[QString("zipCode")].isNull() && m_zip_code_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_in_store.isSet()) {
        obj.insert(QString("inStore"), ::OpenAPI::toJsonValue(m_in_store));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAILocation::getCountry() const {
    return m_country;
}
void OAILocation::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILocation::is_country_Set() const{
    return m_country_isSet;
}

bool OAILocation::is_country_Valid() const{
    return m_country_isValid;
}

OAIInStore_1 OAILocation::getInStore() const {
    return m_in_store;
}
void OAILocation::setInStore(const OAIInStore_1 &in_store) {
    m_in_store = in_store;
    m_in_store_isSet = true;
}

bool OAILocation::is_in_store_Set() const{
    return m_in_store_isSet;
}

bool OAILocation::is_in_store_Valid() const{
    return m_in_store_isValid;
}

QString OAILocation::getZipCode() const {
    return m_zip_code;
}
void OAILocation::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAILocation::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAILocation::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_store.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_in_store_isValid && m_zip_code_isValid && true;
}

} // namespace OpenAPI
