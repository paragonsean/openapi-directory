/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMaxDimension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMaxDimension::OAIMaxDimension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMaxDimension::OAIMaxDimension() {
    this->initializeModel();
}

OAIMaxDimension::~OAIMaxDimension() {}

void OAIMaxDimension::initializeModel() {

    m_largest_measure_isSet = false;
    m_largest_measure_isValid = false;

    m_max_measure_sum_isSet = false;
    m_max_measure_sum_isValid = false;
}

void OAIMaxDimension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMaxDimension::fromJsonObject(QJsonObject json) {

    m_largest_measure_isValid = ::OpenAPI::fromJsonValue(m_largest_measure, json[QString("largestMeasure")]);
    m_largest_measure_isSet = !json[QString("largestMeasure")].isNull() && m_largest_measure_isValid;

    m_max_measure_sum_isValid = ::OpenAPI::fromJsonValue(m_max_measure_sum, json[QString("maxMeasureSum")]);
    m_max_measure_sum_isSet = !json[QString("maxMeasureSum")].isNull() && m_max_measure_sum_isValid;
}

QString OAIMaxDimension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMaxDimension::asJsonObject() const {
    QJsonObject obj;
    if (m_largest_measure_isSet) {
        obj.insert(QString("largestMeasure"), ::OpenAPI::toJsonValue(m_largest_measure));
    }
    if (m_max_measure_sum_isSet) {
        obj.insert(QString("maxMeasureSum"), ::OpenAPI::toJsonValue(m_max_measure_sum));
    }
    return obj;
}

double OAIMaxDimension::getLargestMeasure() const {
    return m_largest_measure;
}
void OAIMaxDimension::setLargestMeasure(const double &largest_measure) {
    m_largest_measure = largest_measure;
    m_largest_measure_isSet = true;
}

bool OAIMaxDimension::is_largest_measure_Set() const{
    return m_largest_measure_isSet;
}

bool OAIMaxDimension::is_largest_measure_Valid() const{
    return m_largest_measure_isValid;
}

double OAIMaxDimension::getMaxMeasureSum() const {
    return m_max_measure_sum;
}
void OAIMaxDimension::setMaxMeasureSum(const double &max_measure_sum) {
    m_max_measure_sum = max_measure_sum;
    m_max_measure_sum_isSet = true;
}

bool OAIMaxDimension::is_max_measure_sum_Set() const{
    return m_max_measure_sum_isSet;
}

bool OAIMaxDimension::is_max_measure_sum_Valid() const{
    return m_max_measure_sum_isValid;
}

bool OAIMaxDimension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_largest_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_measure_sum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMaxDimension::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_largest_measure_isValid && m_max_measure_sum_isValid && true;
}

} // namespace OpenAPI
