/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISaveSupplyLot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISaveSupplyLot::OAISaveSupplyLot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISaveSupplyLot::OAISaveSupplyLot() {
    this->initializeModel();
}

OAISaveSupplyLot::~OAISaveSupplyLot() {}

void OAISaveSupplyLot::initializeModel() {

    m_date_of_supply_utc_isSet = false;
    m_date_of_supply_utc_isValid = false;

    m_keep_selling_after_expiration_isSet = false;
    m_keep_selling_after_expiration_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;
}

void OAISaveSupplyLot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISaveSupplyLot::fromJsonObject(QJsonObject json) {

    m_date_of_supply_utc_isValid = ::OpenAPI::fromJsonValue(m_date_of_supply_utc, json[QString("dateOfSupplyUtc")]);
    m_date_of_supply_utc_isSet = !json[QString("dateOfSupplyUtc")].isNull() && m_date_of_supply_utc_isValid;

    m_keep_selling_after_expiration_isValid = ::OpenAPI::fromJsonValue(m_keep_selling_after_expiration, json[QString("keepSellingAfterExpiration")]);
    m_keep_selling_after_expiration_isSet = !json[QString("keepSellingAfterExpiration")].isNull() && m_keep_selling_after_expiration_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;
}

QString OAISaveSupplyLot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISaveSupplyLot::asJsonObject() const {
    QJsonObject obj;
    if (m_date_of_supply_utc_isSet) {
        obj.insert(QString("dateOfSupplyUtc"), ::OpenAPI::toJsonValue(m_date_of_supply_utc));
    }
    if (m_keep_selling_after_expiration_isSet) {
        obj.insert(QString("keepSellingAfterExpiration"), ::OpenAPI::toJsonValue(m_keep_selling_after_expiration));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    return obj;
}

QString OAISaveSupplyLot::getDateOfSupplyUtc() const {
    return m_date_of_supply_utc;
}
void OAISaveSupplyLot::setDateOfSupplyUtc(const QString &date_of_supply_utc) {
    m_date_of_supply_utc = date_of_supply_utc;
    m_date_of_supply_utc_isSet = true;
}

bool OAISaveSupplyLot::is_date_of_supply_utc_Set() const{
    return m_date_of_supply_utc_isSet;
}

bool OAISaveSupplyLot::is_date_of_supply_utc_Valid() const{
    return m_date_of_supply_utc_isValid;
}

bool OAISaveSupplyLot::isKeepSellingAfterExpiration() const {
    return m_keep_selling_after_expiration;
}
void OAISaveSupplyLot::setKeepSellingAfterExpiration(const bool &keep_selling_after_expiration) {
    m_keep_selling_after_expiration = keep_selling_after_expiration;
    m_keep_selling_after_expiration_isSet = true;
}

bool OAISaveSupplyLot::is_keep_selling_after_expiration_Set() const{
    return m_keep_selling_after_expiration_isSet;
}

bool OAISaveSupplyLot::is_keep_selling_after_expiration_Valid() const{
    return m_keep_selling_after_expiration_isValid;
}

double OAISaveSupplyLot::getQuantity() const {
    return m_quantity;
}
void OAISaveSupplyLot::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAISaveSupplyLot::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAISaveSupplyLot::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAISaveSupplyLot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_of_supply_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_selling_after_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISaveSupplyLot::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_of_supply_utc_isValid && m_keep_selling_after_expiration_isValid && m_quantity_isValid && true;
}

} // namespace OpenAPI
