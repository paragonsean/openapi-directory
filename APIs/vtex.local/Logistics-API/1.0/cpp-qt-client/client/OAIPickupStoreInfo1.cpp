/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPickupStoreInfo1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPickupStoreInfo1::OAIPickupStoreInfo1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPickupStoreInfo1::OAIPickupStoreInfo1() {
    this->initializeModel();
}

OAIPickupStoreInfo1::~OAIPickupStoreInfo1() {}

void OAIPickupStoreInfo1::initializeModel() {

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_dock_id_isSet = false;
    m_dock_id_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_is_pickup_store_isSet = false;
    m_is_pickup_store_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;
}

void OAIPickupStoreInfo1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPickupStoreInfo1::fromJsonObject(QJsonObject json) {

    m_additional_info_isValid = ::OpenAPI::fromJsonValue(m_additional_info, json[QString("additionalInfo")]);
    m_additional_info_isSet = !json[QString("additionalInfo")].isNull() && m_additional_info_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_dock_id_isValid = ::OpenAPI::fromJsonValue(m_dock_id, json[QString("dockId")]);
    m_dock_id_isSet = !json[QString("dockId")].isNull() && m_dock_id_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_is_pickup_store_isValid = ::OpenAPI::fromJsonValue(m_is_pickup_store, json[QString("isPickupStore")]);
    m_is_pickup_store_isSet = !json[QString("isPickupStore")].isNull() && m_is_pickup_store_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("storeId")]);
    m_store_id_isSet = !json[QString("storeId")].isNull() && m_store_id_isValid;
}

QString OAIPickupStoreInfo1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPickupStoreInfo1::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_info_isSet) {
        obj.insert(QString("additionalInfo"), ::OpenAPI::toJsonValue(m_additional_info));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_dock_id_isSet) {
        obj.insert(QString("dockId"), ::OpenAPI::toJsonValue(m_dock_id));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_is_pickup_store_isSet) {
        obj.insert(QString("isPickupStore"), ::OpenAPI::toJsonValue(m_is_pickup_store));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("storeId"), ::OpenAPI::toJsonValue(m_store_id));
    }
    return obj;
}

QString OAIPickupStoreInfo1::getAdditionalInfo() const {
    return m_additional_info;
}
void OAIPickupStoreInfo1::setAdditionalInfo(const QString &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAIPickupStoreInfo1::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAIPickupStoreInfo1::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

QString OAIPickupStoreInfo1::getAddress() const {
    return m_address;
}
void OAIPickupStoreInfo1::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPickupStoreInfo1::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPickupStoreInfo1::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIPickupStoreInfo1::getDockId() const {
    return m_dock_id;
}
void OAIPickupStoreInfo1::setDockId(const QString &dock_id) {
    m_dock_id = dock_id;
    m_dock_id_isSet = true;
}

bool OAIPickupStoreInfo1::is_dock_id_Set() const{
    return m_dock_id_isSet;
}

bool OAIPickupStoreInfo1::is_dock_id_Valid() const{
    return m_dock_id_isValid;
}

QString OAIPickupStoreInfo1::getFriendlyName() const {
    return m_friendly_name;
}
void OAIPickupStoreInfo1::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIPickupStoreInfo1::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIPickupStoreInfo1::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

bool OAIPickupStoreInfo1::isIsPickupStore() const {
    return m_is_pickup_store;
}
void OAIPickupStoreInfo1::setIsPickupStore(const bool &is_pickup_store) {
    m_is_pickup_store = is_pickup_store;
    m_is_pickup_store_isSet = true;
}

bool OAIPickupStoreInfo1::is_is_pickup_store_Set() const{
    return m_is_pickup_store_isSet;
}

bool OAIPickupStoreInfo1::is_is_pickup_store_Valid() const{
    return m_is_pickup_store_isValid;
}

QString OAIPickupStoreInfo1::getStoreId() const {
    return m_store_id;
}
void OAIPickupStoreInfo1::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIPickupStoreInfo1::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIPickupStoreInfo1::is_store_id_Valid() const{
    return m_store_id_isValid;
}

bool OAIPickupStoreInfo1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pickup_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPickupStoreInfo1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_additional_info_isValid && m_address_isValid && m_dock_id_isValid && m_friendly_name_isValid && m_is_pickup_store_isValid && m_store_id_isValid && true;
}

} // namespace OpenAPI
