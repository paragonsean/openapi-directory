/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISuccess.h
 *
 * 
 */

#ifndef OAISuccess_H
#define OAISuccess_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISuccess : public OAIObject {
public:
    OAISuccess();
    OAISuccess(QString json);
    ~OAISuccess() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAvailableQuantity() const;
    void setAvailableQuantity(const qint32 &available_quantity);
    bool is_available_quantity_Set() const;
    bool is_available_quantity_Valid() const;

    qint32 getDispatchedReservationsQuantity() const;
    void setDispatchedReservationsQuantity(const qint32 &dispatched_reservations_quantity);
    bool is_dispatched_reservations_quantity_Set() const;
    bool is_dispatched_reservations_quantity_Valid() const;

    bool isIsUnlimitedQuantity() const;
    void setIsUnlimitedQuantity(const bool &is_unlimited_quantity);
    bool is_is_unlimited_quantity_Set() const;
    bool is_is_unlimited_quantity_Valid() const;

    qint32 getQuantity() const;
    void setQuantity(const qint32 &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    QString getSkuId() const;
    void setSkuId(const QString &sku_id);
    bool is_sku_id_Set() const;
    bool is_sku_id_Valid() const;

    qint32 getTotalReservedQuantity() const;
    void setTotalReservedQuantity(const qint32 &total_reserved_quantity);
    bool is_total_reserved_quantity_Set() const;
    bool is_total_reserved_quantity_Valid() const;

    QString getWarehouseId() const;
    void setWarehouseId(const QString &warehouse_id);
    bool is_warehouse_id_Set() const;
    bool is_warehouse_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_available_quantity;
    bool m_available_quantity_isSet;
    bool m_available_quantity_isValid;

    qint32 m_dispatched_reservations_quantity;
    bool m_dispatched_reservations_quantity_isSet;
    bool m_dispatched_reservations_quantity_isValid;

    bool m_is_unlimited_quantity;
    bool m_is_unlimited_quantity_isSet;
    bool m_is_unlimited_quantity_isValid;

    qint32 m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    QString m_sku_id;
    bool m_sku_id_isSet;
    bool m_sku_id_isValid;

    qint32 m_total_reserved_quantity;
    bool m_total_reserved_quantity_isSet;
    bool m_total_reserved_quantity_isValid;

    QString m_warehouse_id;
    bool m_warehouse_id_isSet;
    bool m_warehouse_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISuccess)

#endif // OAISuccess_H
