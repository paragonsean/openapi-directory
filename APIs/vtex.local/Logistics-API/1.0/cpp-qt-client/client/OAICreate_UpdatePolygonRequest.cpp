/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreate_UpdatePolygonRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreate_UpdatePolygonRequest::OAICreate_UpdatePolygonRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreate_UpdatePolygonRequest::OAICreate_UpdatePolygonRequest() {
    this->initializeModel();
}

OAICreate_UpdatePolygonRequest::~OAICreate_UpdatePolygonRequest() {}

void OAICreate_UpdatePolygonRequest::initializeModel() {

    m_geo_shape_isSet = false;
    m_geo_shape_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICreate_UpdatePolygonRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreate_UpdatePolygonRequest::fromJsonObject(QJsonObject json) {

    m_geo_shape_isValid = ::OpenAPI::fromJsonValue(m_geo_shape, json[QString("geoShape")]);
    m_geo_shape_isSet = !json[QString("geoShape")].isNull() && m_geo_shape_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICreate_UpdatePolygonRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreate_UpdatePolygonRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_geo_shape.isSet()) {
        obj.insert(QString("geoShape"), ::OpenAPI::toJsonValue(m_geo_shape));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIGeoShape_1 OAICreate_UpdatePolygonRequest::getGeoShape() const {
    return m_geo_shape;
}
void OAICreate_UpdatePolygonRequest::setGeoShape(const OAIGeoShape_1 &geo_shape) {
    m_geo_shape = geo_shape;
    m_geo_shape_isSet = true;
}

bool OAICreate_UpdatePolygonRequest::is_geo_shape_Set() const{
    return m_geo_shape_isSet;
}

bool OAICreate_UpdatePolygonRequest::is_geo_shape_Valid() const{
    return m_geo_shape_isValid;
}

QString OAICreate_UpdatePolygonRequest::getName() const {
    return m_name;
}
void OAICreate_UpdatePolygonRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreate_UpdatePolygonRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreate_UpdatePolygonRequest::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreate_UpdatePolygonRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_geo_shape.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreate_UpdatePolygonRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_geo_shape_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
