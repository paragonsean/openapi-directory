/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInStore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInStore::OAIInStore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInStore::OAIInStore() {
    this->initializeModel();
}

OAIInStore::~OAIInStore() {}

void OAIInStore::initializeModel() {

    m_is_checked_in_isSet = false;
    m_is_checked_in_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;
}

void OAIInStore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInStore::fromJsonObject(QJsonObject json) {

    m_is_checked_in_isValid = ::OpenAPI::fromJsonValue(m_is_checked_in, json[QString("IsCheckedIn")]);
    m_is_checked_in_isSet = !json[QString("IsCheckedIn")].isNull() && m_is_checked_in_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("StoreId")]);
    m_store_id_isSet = !json[QString("StoreId")].isNull() && m_store_id_isValid;
}

QString OAIInStore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInStore::asJsonObject() const {
    QJsonObject obj;
    if (m_is_checked_in_isSet) {
        obj.insert(QString("IsCheckedIn"), ::OpenAPI::toJsonValue(m_is_checked_in));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("StoreId"), ::OpenAPI::toJsonValue(m_store_id));
    }
    return obj;
}

bool OAIInStore::isIsCheckedIn() const {
    return m_is_checked_in;
}
void OAIInStore::setIsCheckedIn(const bool &is_checked_in) {
    m_is_checked_in = is_checked_in;
    m_is_checked_in_isSet = true;
}

bool OAIInStore::is_is_checked_in_Set() const{
    return m_is_checked_in_isSet;
}

bool OAIInStore::is_is_checked_in_Valid() const{
    return m_is_checked_in_isValid;
}

QString OAIInStore::getStoreId() const {
    return m_store_id;
}
void OAIInStore::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIInStore::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIInStore::is_store_id_Valid() const{
    return m_store_id_isValid;
}

bool OAIInStore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_checked_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInStore::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_checked_in_isValid && m_store_id_isValid && true;
}

} // namespace OpenAPI
