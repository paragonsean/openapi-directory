/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFreightValuesApi_H
#define OAI_OAIFreightValuesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreate_UpdateFreightValuesRequest.h"
#include "OAIFreightValues_200_response_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFreightValuesApi : public QObject {
    Q_OBJECT

public:
    OAIFreightValuesApi(const int timeOut = 0);
    ~OAIFreightValuesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  carrier_id QString [required]
    * @param[in]  oai_create_update_freight_values_request QList<OAICreate_UpdateFreightValuesRequest> [required]
    */
    virtual void create_UpdateFreightValues(const QString &content_type, const QString &accept, const QString &carrier_id, const QList<OAICreate_UpdateFreightValuesRequest> &oai_create_update_freight_values_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  carrier_id QString [required]
    * @param[in]  cep QString [required]
    */
    virtual void freightValues(const QString &content_type, const QString &accept, const QString &carrier_id, const QString &cep);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void create_UpdateFreightValuesCallback(OAIHttpRequestWorker *worker);
    void freightValuesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void create_UpdateFreightValuesSignal();
    void freightValuesSignal(QList<OAIFreightValues_200_response_inner> summary);


    void create_UpdateFreightValuesSignalFull(OAIHttpRequestWorker *worker);
    void freightValuesSignalFull(OAIHttpRequestWorker *worker, QList<OAIFreightValues_200_response_inner> summary);

    Q_DECL_DEPRECATED_X("Use create_UpdateFreightValuesSignalError() instead")
    void create_UpdateFreightValuesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void create_UpdateFreightValuesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use freightValuesSignalError() instead")
    void freightValuesSignalE(QList<OAIFreightValues_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void freightValuesSignalError(QList<OAIFreightValues_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use create_UpdateFreightValuesSignalErrorFull() instead")
    void create_UpdateFreightValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void create_UpdateFreightValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use freightValuesSignalErrorFull() instead")
    void freightValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void freightValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
