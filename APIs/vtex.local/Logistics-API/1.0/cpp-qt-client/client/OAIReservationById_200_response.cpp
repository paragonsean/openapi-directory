/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservationById_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservationById_200_response::OAIReservationById_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservationById_200_response::OAIReservationById_200_response() {
    this->initializeModel();
}

OAIReservationById_200_response::~OAIReservationById_200_response() {}

void OAIReservationById_200_response::initializeModel() {

    m_authorized_date_utc_isSet = false;
    m_authorized_date_utc_isValid = false;

    m_canceled_date_utc_isSet = false;
    m_canceled_date_utc_isValid = false;

    m_confirmed_date_utc_isSet = false;
    m_confirmed_date_utc_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_is_sucess_isSet = false;
    m_is_sucess_isValid = false;

    m_last_update_date_utc_isSet = false;
    m_last_update_date_utc_isValid = false;

    m_lock_id_isSet = false;
    m_lock_id_isValid = false;

    m_maximum_confirmation_date_utc_isSet = false;
    m_maximum_confirmation_date_utc_isValid = false;

    m_pickup_point_item_options_isSet = false;
    m_pickup_point_item_options_isValid = false;

    m_reservation_date_utc_isSet = false;
    m_reservation_date_utc_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_sla_request_isSet = false;
    m_sla_request_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIReservationById_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservationById_200_response::fromJsonObject(QJsonObject json) {

    m_authorized_date_utc_isValid = ::OpenAPI::fromJsonValue(m_authorized_date_utc, json[QString("AuthorizedDateUtc")]);
    m_authorized_date_utc_isSet = !json[QString("AuthorizedDateUtc")].isNull() && m_authorized_date_utc_isValid;

    m_canceled_date_utc_isValid = ::OpenAPI::fromJsonValue(m_canceled_date_utc, json[QString("CanceledDateUtc")]);
    m_canceled_date_utc_isSet = !json[QString("CanceledDateUtc")].isNull() && m_canceled_date_utc_isValid;

    m_confirmed_date_utc_isValid = ::OpenAPI::fromJsonValue(m_confirmed_date_utc, json[QString("ConfirmedDateUtc")]);
    m_confirmed_date_utc_isSet = !json[QString("ConfirmedDateUtc")].isNull() && m_confirmed_date_utc_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_is_sucess_isValid = ::OpenAPI::fromJsonValue(m_is_sucess, json[QString("IsSucess")]);
    m_is_sucess_isSet = !json[QString("IsSucess")].isNull() && m_is_sucess_isValid;

    m_last_update_date_utc_isValid = ::OpenAPI::fromJsonValue(m_last_update_date_utc, json[QString("LastUpdateDateUtc")]);
    m_last_update_date_utc_isSet = !json[QString("LastUpdateDateUtc")].isNull() && m_last_update_date_utc_isValid;

    m_lock_id_isValid = ::OpenAPI::fromJsonValue(m_lock_id, json[QString("LockId")]);
    m_lock_id_isSet = !json[QString("LockId")].isNull() && m_lock_id_isValid;

    m_maximum_confirmation_date_utc_isValid = ::OpenAPI::fromJsonValue(m_maximum_confirmation_date_utc, json[QString("MaximumConfirmationDateUtc")]);
    m_maximum_confirmation_date_utc_isSet = !json[QString("MaximumConfirmationDateUtc")].isNull() && m_maximum_confirmation_date_utc_isValid;

    m_pickup_point_item_options_isValid = ::OpenAPI::fromJsonValue(m_pickup_point_item_options, json[QString("PickupPointItemOptions")]);
    m_pickup_point_item_options_isSet = !json[QString("PickupPointItemOptions")].isNull() && m_pickup_point_item_options_isValid;

    m_reservation_date_utc_isValid = ::OpenAPI::fromJsonValue(m_reservation_date_utc, json[QString("ReservationDateUtc")]);
    m_reservation_date_utc_isSet = !json[QString("ReservationDateUtc")].isNull() && m_reservation_date_utc_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("SalesChannel")]);
    m_sales_channel_isSet = !json[QString("SalesChannel")].isNull() && m_sales_channel_isValid;

    m_sla_request_isValid = ::OpenAPI::fromJsonValue(m_sla_request, json[QString("SlaRequest")]);
    m_sla_request_isSet = !json[QString("SlaRequest")].isNull() && m_sla_request_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIReservationById_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservationById_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_authorized_date_utc_isSet) {
        obj.insert(QString("AuthorizedDateUtc"), ::OpenAPI::toJsonValue(m_authorized_date_utc));
    }
    if (m_canceled_date_utc_isSet) {
        obj.insert(QString("CanceledDateUtc"), ::OpenAPI::toJsonValue(m_canceled_date_utc));
    }
    if (m_confirmed_date_utc_isSet) {
        obj.insert(QString("ConfirmedDateUtc"), ::OpenAPI::toJsonValue(m_confirmed_date_utc));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_is_sucess_isSet) {
        obj.insert(QString("IsSucess"), ::OpenAPI::toJsonValue(m_is_sucess));
    }
    if (m_last_update_date_utc_isSet) {
        obj.insert(QString("LastUpdateDateUtc"), ::OpenAPI::toJsonValue(m_last_update_date_utc));
    }
    if (m_lock_id_isSet) {
        obj.insert(QString("LockId"), ::OpenAPI::toJsonValue(m_lock_id));
    }
    if (m_maximum_confirmation_date_utc_isSet) {
        obj.insert(QString("MaximumConfirmationDateUtc"), ::OpenAPI::toJsonValue(m_maximum_confirmation_date_utc));
    }
    if (m_pickup_point_item_options_isSet) {
        obj.insert(QString("PickupPointItemOptions"), ::OpenAPI::toJsonValue(m_pickup_point_item_options));
    }
    if (m_reservation_date_utc_isSet) {
        obj.insert(QString("ReservationDateUtc"), ::OpenAPI::toJsonValue(m_reservation_date_utc));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("SalesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_sla_request.size() > 0) {
        obj.insert(QString("SlaRequest"), ::OpenAPI::toJsonValue(m_sla_request));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIReservationById_200_response::getAuthorizedDateUtc() const {
    return m_authorized_date_utc;
}
void OAIReservationById_200_response::setAuthorizedDateUtc(const QString &authorized_date_utc) {
    m_authorized_date_utc = authorized_date_utc;
    m_authorized_date_utc_isSet = true;
}

bool OAIReservationById_200_response::is_authorized_date_utc_Set() const{
    return m_authorized_date_utc_isSet;
}

bool OAIReservationById_200_response::is_authorized_date_utc_Valid() const{
    return m_authorized_date_utc_isValid;
}

QString OAIReservationById_200_response::getCanceledDateUtc() const {
    return m_canceled_date_utc;
}
void OAIReservationById_200_response::setCanceledDateUtc(const QString &canceled_date_utc) {
    m_canceled_date_utc = canceled_date_utc;
    m_canceled_date_utc_isSet = true;
}

bool OAIReservationById_200_response::is_canceled_date_utc_Set() const{
    return m_canceled_date_utc_isSet;
}

bool OAIReservationById_200_response::is_canceled_date_utc_Valid() const{
    return m_canceled_date_utc_isValid;
}

QString OAIReservationById_200_response::getConfirmedDateUtc() const {
    return m_confirmed_date_utc;
}
void OAIReservationById_200_response::setConfirmedDateUtc(const QString &confirmed_date_utc) {
    m_confirmed_date_utc = confirmed_date_utc;
    m_confirmed_date_utc_isSet = true;
}

bool OAIReservationById_200_response::is_confirmed_date_utc_Set() const{
    return m_confirmed_date_utc_isSet;
}

bool OAIReservationById_200_response::is_confirmed_date_utc_Valid() const{
    return m_confirmed_date_utc_isValid;
}

QList<QString> OAIReservationById_200_response::getErrors() const {
    return m_errors;
}
void OAIReservationById_200_response::setErrors(const QList<QString> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIReservationById_200_response::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIReservationById_200_response::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAIReservationById_200_response::isIsSucess() const {
    return m_is_sucess;
}
void OAIReservationById_200_response::setIsSucess(const bool &is_sucess) {
    m_is_sucess = is_sucess;
    m_is_sucess_isSet = true;
}

bool OAIReservationById_200_response::is_is_sucess_Set() const{
    return m_is_sucess_isSet;
}

bool OAIReservationById_200_response::is_is_sucess_Valid() const{
    return m_is_sucess_isValid;
}

QString OAIReservationById_200_response::getLastUpdateDateUtc() const {
    return m_last_update_date_utc;
}
void OAIReservationById_200_response::setLastUpdateDateUtc(const QString &last_update_date_utc) {
    m_last_update_date_utc = last_update_date_utc;
    m_last_update_date_utc_isSet = true;
}

bool OAIReservationById_200_response::is_last_update_date_utc_Set() const{
    return m_last_update_date_utc_isSet;
}

bool OAIReservationById_200_response::is_last_update_date_utc_Valid() const{
    return m_last_update_date_utc_isValid;
}

QString OAIReservationById_200_response::getLockId() const {
    return m_lock_id;
}
void OAIReservationById_200_response::setLockId(const QString &lock_id) {
    m_lock_id = lock_id;
    m_lock_id_isSet = true;
}

bool OAIReservationById_200_response::is_lock_id_Set() const{
    return m_lock_id_isSet;
}

bool OAIReservationById_200_response::is_lock_id_Valid() const{
    return m_lock_id_isValid;
}

QString OAIReservationById_200_response::getMaximumConfirmationDateUtc() const {
    return m_maximum_confirmation_date_utc;
}
void OAIReservationById_200_response::setMaximumConfirmationDateUtc(const QString &maximum_confirmation_date_utc) {
    m_maximum_confirmation_date_utc = maximum_confirmation_date_utc;
    m_maximum_confirmation_date_utc_isSet = true;
}

bool OAIReservationById_200_response::is_maximum_confirmation_date_utc_Set() const{
    return m_maximum_confirmation_date_utc_isSet;
}

bool OAIReservationById_200_response::is_maximum_confirmation_date_utc_Valid() const{
    return m_maximum_confirmation_date_utc_isValid;
}

QString OAIReservationById_200_response::getPickupPointItemOptions() const {
    return m_pickup_point_item_options;
}
void OAIReservationById_200_response::setPickupPointItemOptions(const QString &pickup_point_item_options) {
    m_pickup_point_item_options = pickup_point_item_options;
    m_pickup_point_item_options_isSet = true;
}

bool OAIReservationById_200_response::is_pickup_point_item_options_Set() const{
    return m_pickup_point_item_options_isSet;
}

bool OAIReservationById_200_response::is_pickup_point_item_options_Valid() const{
    return m_pickup_point_item_options_isValid;
}

QString OAIReservationById_200_response::getReservationDateUtc() const {
    return m_reservation_date_utc;
}
void OAIReservationById_200_response::setReservationDateUtc(const QString &reservation_date_utc) {
    m_reservation_date_utc = reservation_date_utc;
    m_reservation_date_utc_isSet = true;
}

bool OAIReservationById_200_response::is_reservation_date_utc_Set() const{
    return m_reservation_date_utc_isSet;
}

bool OAIReservationById_200_response::is_reservation_date_utc_Valid() const{
    return m_reservation_date_utc_isValid;
}

QString OAIReservationById_200_response::getSalesChannel() const {
    return m_sales_channel;
}
void OAIReservationById_200_response::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAIReservationById_200_response::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAIReservationById_200_response::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

QList<OAIReservationById_200_response_SlaRequest_inner> OAIReservationById_200_response::getSlaRequest() const {
    return m_sla_request;
}
void OAIReservationById_200_response::setSlaRequest(const QList<OAIReservationById_200_response_SlaRequest_inner> &sla_request) {
    m_sla_request = sla_request;
    m_sla_request_isSet = true;
}

bool OAIReservationById_200_response::is_sla_request_Set() const{
    return m_sla_request_isSet;
}

bool OAIReservationById_200_response::is_sla_request_Valid() const{
    return m_sla_request_isValid;
}

qint32 OAIReservationById_200_response::getStatus() const {
    return m_status;
}
void OAIReservationById_200_response::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReservationById_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReservationById_200_response::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIReservationById_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorized_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmed_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sucess_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_confirmation_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_point_item_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sla_request.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservationById_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
