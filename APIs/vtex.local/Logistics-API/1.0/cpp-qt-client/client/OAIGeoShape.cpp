/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoShape.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoShape::OAIGeoShape(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoShape::OAIGeoShape() {
    this->initializeModel();
}

OAIGeoShape::~OAIGeoShape() {}

void OAIGeoShape::initializeModel() {

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;
}

void OAIGeoShape::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoShape::fromJsonObject(QJsonObject json) {

    if(json["coordinates"].isArray()){
        auto arr = json["coordinates"].toArray();
        m_coordinates_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<double> item;
                m_coordinates_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_coordinates_isSet = !jval.isNull() && m_coordinates_isValid;
                m_coordinates.push_back(item);
            }
        }
    }
}

QString OAIGeoShape::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoShape::asJsonObject() const {
    QJsonObject obj;
    if (m_coordinates.size() > 0) {
        
        obj.insert(QString("coordinates"), toJsonValue(m_coordinates));
    }
    return obj;
}

QList<QList<double>> OAIGeoShape::getCoordinates() const {
    return m_coordinates;
}
void OAIGeoShape::setCoordinates(const QList<QList<double>> &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAIGeoShape::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAIGeoShape::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

bool OAIGeoShape::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coordinates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoShape::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_coordinates_isValid && true;
}

} // namespace OpenAPI
