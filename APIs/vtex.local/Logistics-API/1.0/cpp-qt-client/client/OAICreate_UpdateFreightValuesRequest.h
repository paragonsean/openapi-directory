/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreate_UpdateFreightValuesRequest.h
 *
 * 
 */

#ifndef OAICreate_UpdateFreightValuesRequest_H
#define OAICreate_UpdateFreightValuesRequest_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreate_UpdateFreightValuesRequest : public OAIObject {
public:
    OAICreate_UpdateFreightValuesRequest();
    OAICreate_UpdateFreightValuesRequest(QString json);
    ~OAICreate_UpdateFreightValuesRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAbsoluteMoneyCost() const;
    void setAbsoluteMoneyCost(const QString &absolute_money_cost);
    bool is_absolute_money_cost_Set() const;
    bool is_absolute_money_cost_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    qint32 getMaxVolume() const;
    void setMaxVolume(const qint32 &max_volume);
    bool is_max_volume_Set() const;
    bool is_max_volume_Valid() const;

    qint32 getOperationType() const;
    void setOperationType(const qint32 &operation_type);
    bool is_operation_type_Set() const;
    bool is_operation_type_Valid() const;

    QString getPolygon() const;
    void setPolygon(const QString &polygon);
    bool is_polygon_Set() const;
    bool is_polygon_Valid() const;

    qint32 getPricePercent() const;
    void setPricePercent(const qint32 &price_percent);
    bool is_price_percent_Set() const;
    bool is_price_percent_Valid() const;

    qint32 getPricePercentByWeight() const;
    void setPricePercentByWeight(const qint32 &price_percent_by_weight);
    bool is_price_percent_by_weight_Set() const;
    bool is_price_percent_by_weight_Valid() const;

    QString getTimeCost() const;
    void setTimeCost(const QString &time_cost);
    bool is_time_cost_Set() const;
    bool is_time_cost_Valid() const;

    qint32 getWeightEnd() const;
    void setWeightEnd(const qint32 &weight_end);
    bool is_weight_end_Set() const;
    bool is_weight_end_Valid() const;

    qint32 getWeightStart() const;
    void setWeightStart(const qint32 &weight_start);
    bool is_weight_start_Set() const;
    bool is_weight_start_Valid() const;

    QString getZipCodeEnd() const;
    void setZipCodeEnd(const QString &zip_code_end);
    bool is_zip_code_end_Set() const;
    bool is_zip_code_end_Valid() const;

    QString getZipCodeStart() const;
    void setZipCodeStart(const QString &zip_code_start);
    bool is_zip_code_start_Set() const;
    bool is_zip_code_start_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_absolute_money_cost;
    bool m_absolute_money_cost_isSet;
    bool m_absolute_money_cost_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    qint32 m_max_volume;
    bool m_max_volume_isSet;
    bool m_max_volume_isValid;

    qint32 m_operation_type;
    bool m_operation_type_isSet;
    bool m_operation_type_isValid;

    QString m_polygon;
    bool m_polygon_isSet;
    bool m_polygon_isValid;

    qint32 m_price_percent;
    bool m_price_percent_isSet;
    bool m_price_percent_isValid;

    qint32 m_price_percent_by_weight;
    bool m_price_percent_by_weight_isSet;
    bool m_price_percent_by_weight_isValid;

    QString m_time_cost;
    bool m_time_cost_isSet;
    bool m_time_cost_isValid;

    qint32 m_weight_end;
    bool m_weight_end_isSet;
    bool m_weight_end_isValid;

    qint32 m_weight_start;
    bool m_weight_start_isSet;
    bool m_weight_start_isValid;

    QString m_zip_code_end;
    bool m_zip_code_end_isSet;
    bool m_zip_code_end_isValid;

    QString m_zip_code_start;
    bool m_zip_code_start_isSet;
    bool m_zip_code_start_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreate_UpdateFreightValuesRequest)

#endif // OAICreate_UpdateFreightValuesRequest_H
