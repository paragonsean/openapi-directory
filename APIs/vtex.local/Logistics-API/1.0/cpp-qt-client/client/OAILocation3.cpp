/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation3::OAILocation3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation3::OAILocation3() {
    this->initializeModel();
}

OAILocation3::~OAILocation3() {}

void OAILocation3::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_point_isSet = false;
    m_point_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAILocation3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation3::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_point_isValid = ::OpenAPI::fromJsonValue(m_point, json[QString("point")]);
    m_point_isSet = !json[QString("point")].isNull() && m_point_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zipCode")]);
    m_zip_code_isSet = !json[QString("zipCode")].isNull() && m_zip_code_isValid;
}

QString OAILocation3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation3::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_point.size() > 0) {
        obj.insert(QString("point"), ::OpenAPI::toJsonValue(m_point));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAILocation3::getCountry() const {
    return m_country;
}
void OAILocation3::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILocation3::is_country_Set() const{
    return m_country_isSet;
}

bool OAILocation3::is_country_Valid() const{
    return m_country_isValid;
}

QList<double> OAILocation3::getPoint() const {
    return m_point;
}
void OAILocation3::setPoint(const QList<double> &point) {
    m_point = point;
    m_point_isSet = true;
}

bool OAILocation3::is_point_Set() const{
    return m_point_isSet;
}

bool OAILocation3::is_point_Valid() const{
    return m_point_isValid;
}

QString OAILocation3::getZipCode() const {
    return m_zip_code;
}
void OAILocation3::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAILocation3::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAILocation3::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAILocation3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation3::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_point_isValid && m_zip_code_isValid && true;
}

} // namespace OpenAPI
