/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarehouseDock_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarehouseDock_1::OAIWarehouseDock_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarehouseDock_1::OAIWarehouseDock_1() {
    this->initializeModel();
}

OAIWarehouseDock_1::~OAIWarehouseDock_1() {}

void OAIWarehouseDock_1::initializeModel() {

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_cost_to_display_isSet = false;
    m_cost_to_display_isValid = false;

    m_dock_id_isSet = false;
    m_dock_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_translate_days_isSet = false;
    m_translate_days_isValid = false;
}

void OAIWarehouseDock_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarehouseDock_1::fromJsonObject(QJsonObject json) {

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_cost_to_display_isValid = ::OpenAPI::fromJsonValue(m_cost_to_display, json[QString("costToDisplay")]);
    m_cost_to_display_isSet = !json[QString("costToDisplay")].isNull() && m_cost_to_display_isValid;

    m_dock_id_isValid = ::OpenAPI::fromJsonValue(m_dock_id, json[QString("dockId")]);
    m_dock_id_isSet = !json[QString("dockId")].isNull() && m_dock_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_translate_days_isValid = ::OpenAPI::fromJsonValue(m_translate_days, json[QString("translateDays")]);
    m_translate_days_isSet = !json[QString("translateDays")].isNull() && m_translate_days_isValid;
}

QString OAIWarehouseDock_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarehouseDock_1::asJsonObject() const {
    QJsonObject obj;
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_cost_to_display_isSet) {
        obj.insert(QString("costToDisplay"), ::OpenAPI::toJsonValue(m_cost_to_display));
    }
    if (m_dock_id_isSet) {
        obj.insert(QString("dockId"), ::OpenAPI::toJsonValue(m_dock_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_translate_days_isSet) {
        obj.insert(QString("translateDays"), ::OpenAPI::toJsonValue(m_translate_days));
    }
    return obj;
}

QString OAIWarehouseDock_1::getCost() const {
    return m_cost;
}
void OAIWarehouseDock_1::setCost(const QString &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIWarehouseDock_1::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIWarehouseDock_1::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAIWarehouseDock_1::getCostToDisplay() const {
    return m_cost_to_display;
}
void OAIWarehouseDock_1::setCostToDisplay(const QString &cost_to_display) {
    m_cost_to_display = cost_to_display;
    m_cost_to_display_isSet = true;
}

bool OAIWarehouseDock_1::is_cost_to_display_Set() const{
    return m_cost_to_display_isSet;
}

bool OAIWarehouseDock_1::is_cost_to_display_Valid() const{
    return m_cost_to_display_isValid;
}

QString OAIWarehouseDock_1::getDockId() const {
    return m_dock_id;
}
void OAIWarehouseDock_1::setDockId(const QString &dock_id) {
    m_dock_id = dock_id;
    m_dock_id_isSet = true;
}

bool OAIWarehouseDock_1::is_dock_id_Set() const{
    return m_dock_id_isSet;
}

bool OAIWarehouseDock_1::is_dock_id_Valid() const{
    return m_dock_id_isValid;
}

QString OAIWarehouseDock_1::getName() const {
    return m_name;
}
void OAIWarehouseDock_1::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWarehouseDock_1::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWarehouseDock_1::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWarehouseDock_1::getTime() const {
    return m_time;
}
void OAIWarehouseDock_1::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIWarehouseDock_1::is_time_Set() const{
    return m_time_isSet;
}

bool OAIWarehouseDock_1::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIWarehouseDock_1::getTranslateDays() const {
    return m_translate_days;
}
void OAIWarehouseDock_1::setTranslateDays(const QString &translate_days) {
    m_translate_days = translate_days;
    m_translate_days_isSet = true;
}

bool OAIWarehouseDock_1::is_translate_days_Set() const{
    return m_translate_days_isSet;
}

bool OAIWarehouseDock_1::is_translate_days_Valid() const{
    return m_translate_days_isValid;
}

bool OAIWarehouseDock_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_to_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translate_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarehouseDock_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cost_isValid && m_cost_to_display_isValid && m_dock_id_isValid && m_name_isValid && m_time_isValid && m_translate_days_isValid && true;
}

} // namespace OpenAPI
