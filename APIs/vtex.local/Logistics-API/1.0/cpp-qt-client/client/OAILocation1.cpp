/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation1::OAILocation1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation1::OAILocation1() {
    this->initializeModel();
}

OAILocation1::~OAILocation1() {}

void OAILocation1::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_delivery_point_id_isSet = false;
    m_delivery_point_id_isValid = false;

    m_in_store_isSet = false;
    m_in_store_isValid = false;

    m_point_isSet = false;
    m_point_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAILocation1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation1::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_delivery_point_id_isValid = ::OpenAPI::fromJsonValue(m_delivery_point_id, json[QString("deliveryPointId")]);
    m_delivery_point_id_isSet = !json[QString("deliveryPointId")].isNull() && m_delivery_point_id_isValid;

    m_in_store_isValid = ::OpenAPI::fromJsonValue(m_in_store, json[QString("inStore")]);
    m_in_store_isSet = !json[QString("inStore")].isNull() && m_in_store_isValid;

    m_point_isValid = ::OpenAPI::fromJsonValue(m_point, json[QString("point")]);
    m_point_isSet = !json[QString("point")].isNull() && m_point_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zipCode")]);
    m_zip_code_isSet = !json[QString("zipCode")].isNull() && m_zip_code_isValid;
}

QString OAILocation1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation1::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_delivery_point_id_isSet) {
        obj.insert(QString("deliveryPointId"), ::OpenAPI::toJsonValue(m_delivery_point_id));
    }
    if (m_in_store.isSet()) {
        obj.insert(QString("inStore"), ::OpenAPI::toJsonValue(m_in_store));
    }
    if (m_point_isSet) {
        obj.insert(QString("point"), ::OpenAPI::toJsonValue(m_point));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAILocation1::getCountry() const {
    return m_country;
}
void OAILocation1::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILocation1::is_country_Set() const{
    return m_country_isSet;
}

bool OAILocation1::is_country_Valid() const{
    return m_country_isValid;
}

QString OAILocation1::getDeliveryPointId() const {
    return m_delivery_point_id;
}
void OAILocation1::setDeliveryPointId(const QString &delivery_point_id) {
    m_delivery_point_id = delivery_point_id;
    m_delivery_point_id_isSet = true;
}

bool OAILocation1::is_delivery_point_id_Set() const{
    return m_delivery_point_id_isSet;
}

bool OAILocation1::is_delivery_point_id_Valid() const{
    return m_delivery_point_id_isValid;
}

OAIInStore1_1 OAILocation1::getInStore() const {
    return m_in_store;
}
void OAILocation1::setInStore(const OAIInStore1_1 &in_store) {
    m_in_store = in_store;
    m_in_store_isSet = true;
}

bool OAILocation1::is_in_store_Set() const{
    return m_in_store_isSet;
}

bool OAILocation1::is_in_store_Valid() const{
    return m_in_store_isValid;
}

QString OAILocation1::getPoint() const {
    return m_point;
}
void OAILocation1::setPoint(const QString &point) {
    m_point = point;
    m_point_isSet = true;
}

bool OAILocation1::is_point_Set() const{
    return m_point_isSet;
}

bool OAILocation1::is_point_Valid() const{
    return m_point_isValid;
}

QString OAILocation1::getZipCode() const {
    return m_zip_code;
}
void OAILocation1::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAILocation1::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAILocation1::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAILocation1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_store.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_delivery_point_id_isValid && m_in_store_isValid && m_point_isValid && m_zip_code_isValid && true;
}

} // namespace OpenAPI
