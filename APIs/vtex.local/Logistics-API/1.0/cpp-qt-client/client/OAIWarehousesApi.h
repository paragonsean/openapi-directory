/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWarehousesApi_H
#define OAI_OAIWarehousesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAllWarehouses_200_response_inner.h"
#include "OAICreate_UpdateWarehouseRequest.h"
#include "OAIWarehouseById_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWarehousesApi : public QObject {
    Q_OBJECT

public:
    OAIWarehousesApi(const int timeOut = 0);
    ~OAIWarehousesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  warehouse_id QString [required]
    */
    virtual void activateWarehouse(const QString &content_type, const QString &accept, const QString &warehouse_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void allWarehouses(const QString &content_type, const QString &accept);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_create_update_warehouse_request OAICreate_UpdateWarehouseRequest [required]
    */
    virtual void create_UpdateWarehouse(const QString &accept, const QString &content_type, const OAICreate_UpdateWarehouseRequest &oai_create_update_warehouse_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  warehouse_id QString [required]
    */
    virtual void deactivateWarehouse(const QString &content_type, const QString &accept, const QString &warehouse_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  warehouse_id QString [required]
    */
    virtual void removeWarehouse(const QString &content_type, const QString &accept, const QString &warehouse_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  warehouse_id QString [required]
    */
    virtual void warehouseById(const QString &content_type, const QString &accept, const QString &warehouse_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activateWarehouseCallback(OAIHttpRequestWorker *worker);
    void allWarehousesCallback(OAIHttpRequestWorker *worker);
    void create_UpdateWarehouseCallback(OAIHttpRequestWorker *worker);
    void deactivateWarehouseCallback(OAIHttpRequestWorker *worker);
    void removeWarehouseCallback(OAIHttpRequestWorker *worker);
    void warehouseByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activateWarehouseSignal();
    void allWarehousesSignal(QList<OAIAllWarehouses_200_response_inner> summary);
    void create_UpdateWarehouseSignal();
    void deactivateWarehouseSignal();
    void removeWarehouseSignal();
    void warehouseByIdSignal(OAIWarehouseById_200_response summary);


    void activateWarehouseSignalFull(OAIHttpRequestWorker *worker);
    void allWarehousesSignalFull(OAIHttpRequestWorker *worker, QList<OAIAllWarehouses_200_response_inner> summary);
    void create_UpdateWarehouseSignalFull(OAIHttpRequestWorker *worker);
    void deactivateWarehouseSignalFull(OAIHttpRequestWorker *worker);
    void removeWarehouseSignalFull(OAIHttpRequestWorker *worker);
    void warehouseByIdSignalFull(OAIHttpRequestWorker *worker, OAIWarehouseById_200_response summary);

    Q_DECL_DEPRECATED_X("Use activateWarehouseSignalError() instead")
    void activateWarehouseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activateWarehouseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allWarehousesSignalError() instead")
    void allWarehousesSignalE(QList<OAIAllWarehouses_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allWarehousesSignalError(QList<OAIAllWarehouses_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use create_UpdateWarehouseSignalError() instead")
    void create_UpdateWarehouseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void create_UpdateWarehouseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateWarehouseSignalError() instead")
    void deactivateWarehouseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateWarehouseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeWarehouseSignalError() instead")
    void removeWarehouseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeWarehouseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use warehouseByIdSignalError() instead")
    void warehouseByIdSignalE(OAIWarehouseById_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void warehouseByIdSignalError(OAIWarehouseById_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activateWarehouseSignalErrorFull() instead")
    void activateWarehouseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activateWarehouseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allWarehousesSignalErrorFull() instead")
    void allWarehousesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allWarehousesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use create_UpdateWarehouseSignalErrorFull() instead")
    void create_UpdateWarehouseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void create_UpdateWarehouseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateWarehouseSignalErrorFull() instead")
    void deactivateWarehouseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateWarehouseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeWarehouseSignalErrorFull() instead")
    void removeWarehouseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeWarehouseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use warehouseByIdSignalErrorFull() instead")
    void warehouseByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void warehouseByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
