/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAllPickupPpoints_200_response_inner_address.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAllPickupPpoints_200_response_inner_address::OAIListAllPickupPpoints_200_response_inner_address(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAllPickupPpoints_200_response_inner_address::OAIListAllPickupPpoints_200_response_inner_address() {
    this->initializeModel();
}

OAIListAllPickupPpoints_200_response_inner_address::~OAIListAllPickupPpoints_200_response_inner_address() {}

void OAIListAllPickupPpoints_200_response_inner_address::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_complement_isSet = false;
    m_complement_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_neighborhood_isSet = false;
    m_neighborhood_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;
}

void OAIListAllPickupPpoints_200_response_inner_address::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAllPickupPpoints_200_response_inner_address::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_complement_isValid = ::OpenAPI::fromJsonValue(m_complement, json[QString("complement")]);
    m_complement_isSet = !json[QString("complement")].isNull() && m_complement_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_neighborhood_isValid = ::OpenAPI::fromJsonValue(m_neighborhood, json[QString("neighborhood")]);
    m_neighborhood_isSet = !json[QString("neighborhood")].isNull() && m_neighborhood_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner_address::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAllPickupPpoints_200_response_inner_address::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_complement_isSet) {
        obj.insert(QString("complement"), ::OpenAPI::toJsonValue(m_complement));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_neighborhood_isSet) {
        obj.insert(QString("neighborhood"), ::OpenAPI::toJsonValue(m_neighborhood));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    return obj;
}

QString OAIListAllPickupPpoints_200_response_inner_address::getCity() const {
    return m_city;
}
void OAIListAllPickupPpoints_200_response_inner_address::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_city_Set() const{
    return m_city_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner_address::getComplement() const {
    return m_complement;
}
void OAIListAllPickupPpoints_200_response_inner_address::setComplement(const QString &complement) {
    m_complement = complement;
    m_complement_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_complement_Set() const{
    return m_complement_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_complement_Valid() const{
    return m_complement_isValid;
}

OAIListAllPickupPpoints_200_response_inner_address_country OAIListAllPickupPpoints_200_response_inner_address::getCountry() const {
    return m_country;
}
void OAIListAllPickupPpoints_200_response_inner_address::setCountry(const OAIListAllPickupPpoints_200_response_inner_address_country &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_country_Set() const{
    return m_country_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_country_Valid() const{
    return m_country_isValid;
}

OAIListAllPickupPpoints_200_response_inner_address_location OAIListAllPickupPpoints_200_response_inner_address::getLocation() const {
    return m_location;
}
void OAIListAllPickupPpoints_200_response_inner_address::setLocation(const OAIListAllPickupPpoints_200_response_inner_address_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_location_Set() const{
    return m_location_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner_address::getNeighborhood() const {
    return m_neighborhood;
}
void OAIListAllPickupPpoints_200_response_inner_address::setNeighborhood(const QString &neighborhood) {
    m_neighborhood = neighborhood;
    m_neighborhood_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_neighborhood_Set() const{
    return m_neighborhood_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_neighborhood_Valid() const{
    return m_neighborhood_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner_address::getNumber() const {
    return m_number;
}
void OAIListAllPickupPpoints_200_response_inner_address::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_number_Set() const{
    return m_number_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner_address::getPostalCode() const {
    return m_postal_code;
}
void OAIListAllPickupPpoints_200_response_inner_address::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner_address::getState() const {
    return m_state;
}
void OAIListAllPickupPpoints_200_response_inner_address::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_state_Set() const{
    return m_state_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner_address::getStreet() const {
    return m_street;
}
void OAIListAllPickupPpoints_200_response_inner_address::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_street_Set() const{
    return m_street_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner_address::is_street_Valid() const{
    return m_street_isValid;
}

bool OAIListAllPickupPpoints_200_response_inner_address::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighborhood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAllPickupPpoints_200_response_inner_address::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
