/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequest_body_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequest_body_1::OAIRequest_body_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequest_body_1::OAIRequest_body_1() {
    this->initializeModel();
}

OAIRequest_body_1::~OAIRequest_body_1() {}

void OAIRequest_body_1::initializeModel() {

    m_delivery_on_weekends_isSet = false;
    m_delivery_on_weekends_isValid = false;

    m_delivery_schedule_settings_isSet = false;
    m_delivery_schedule_settings_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_max_dimension_isSet = false;
    m_max_dimension_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_shipping_method_isSet = false;
    m_shipping_method_isValid = false;
}

void OAIRequest_body_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequest_body_1::fromJsonObject(QJsonObject json) {

    m_delivery_on_weekends_isValid = ::OpenAPI::fromJsonValue(m_delivery_on_weekends, json[QString("deliveryOnWeekends")]);
    m_delivery_on_weekends_isSet = !json[QString("deliveryOnWeekends")].isNull() && m_delivery_on_weekends_isValid;

    m_delivery_schedule_settings_isValid = ::OpenAPI::fromJsonValue(m_delivery_schedule_settings, json[QString("deliveryScheduleSettings")]);
    m_delivery_schedule_settings_isSet = !json[QString("deliveryScheduleSettings")].isNull() && m_delivery_schedule_settings_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_max_dimension_isValid = ::OpenAPI::fromJsonValue(m_max_dimension, json[QString("maxDimension")]);
    m_max_dimension_isSet = !json[QString("maxDimension")].isNull() && m_max_dimension_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_shipping_method_isValid = ::OpenAPI::fromJsonValue(m_shipping_method, json[QString("shippingMethod")]);
    m_shipping_method_isSet = !json[QString("shippingMethod")].isNull() && m_shipping_method_isValid;
}

QString OAIRequest_body_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequest_body_1::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_on_weekends_isSet) {
        obj.insert(QString("deliveryOnWeekends"), ::OpenAPI::toJsonValue(m_delivery_on_weekends));
    }
    if (m_delivery_schedule_settings.isSet()) {
        obj.insert(QString("deliveryScheduleSettings"), ::OpenAPI::toJsonValue(m_delivery_schedule_settings));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_max_dimension.isSet()) {
        obj.insert(QString("maxDimension"), ::OpenAPI::toJsonValue(m_max_dimension));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_shipping_method_isSet) {
        obj.insert(QString("shippingMethod"), ::OpenAPI::toJsonValue(m_shipping_method));
    }
    return obj;
}

bool OAIRequest_body_1::isDeliveryOnWeekends() const {
    return m_delivery_on_weekends;
}
void OAIRequest_body_1::setDeliveryOnWeekends(const bool &delivery_on_weekends) {
    m_delivery_on_weekends = delivery_on_weekends;
    m_delivery_on_weekends_isSet = true;
}

bool OAIRequest_body_1::is_delivery_on_weekends_Set() const{
    return m_delivery_on_weekends_isSet;
}

bool OAIRequest_body_1::is_delivery_on_weekends_Valid() const{
    return m_delivery_on_weekends_isValid;
}

OAIRequest_body_1_deliveryScheduleSettings OAIRequest_body_1::getDeliveryScheduleSettings() const {
    return m_delivery_schedule_settings;
}
void OAIRequest_body_1::setDeliveryScheduleSettings(const OAIRequest_body_1_deliveryScheduleSettings &delivery_schedule_settings) {
    m_delivery_schedule_settings = delivery_schedule_settings;
    m_delivery_schedule_settings_isSet = true;
}

bool OAIRequest_body_1::is_delivery_schedule_settings_Set() const{
    return m_delivery_schedule_settings_isSet;
}

bool OAIRequest_body_1::is_delivery_schedule_settings_Valid() const{
    return m_delivery_schedule_settings_isValid;
}

bool OAIRequest_body_1::isIsActive() const {
    return m_is_active;
}
void OAIRequest_body_1::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIRequest_body_1::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIRequest_body_1::is_is_active_Valid() const{
    return m_is_active_isValid;
}

OAIMaxDimension_1 OAIRequest_body_1::getMaxDimension() const {
    return m_max_dimension;
}
void OAIRequest_body_1::setMaxDimension(const OAIMaxDimension_1 &max_dimension) {
    m_max_dimension = max_dimension;
    m_max_dimension_isSet = true;
}

bool OAIRequest_body_1::is_max_dimension_Set() const{
    return m_max_dimension_isSet;
}

bool OAIRequest_body_1::is_max_dimension_Valid() const{
    return m_max_dimension_isValid;
}

QString OAIRequest_body_1::getName() const {
    return m_name;
}
void OAIRequest_body_1::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRequest_body_1::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRequest_body_1::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRequest_body_1::getShippingMethod() const {
    return m_shipping_method;
}
void OAIRequest_body_1::setShippingMethod(const QString &shipping_method) {
    m_shipping_method = shipping_method;
    m_shipping_method_isSet = true;
}

bool OAIRequest_body_1::is_shipping_method_Set() const{
    return m_shipping_method_isSet;
}

bool OAIRequest_body_1::is_shipping_method_Valid() const{
    return m_shipping_method_isValid;
}

bool OAIRequest_body_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_on_weekends_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_schedule_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequest_body_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delivery_on_weekends_isValid && m_is_active_isValid && m_max_dimension_isValid && m_name_isValid && m_shipping_method_isValid && true;
}

} // namespace OpenAPI
