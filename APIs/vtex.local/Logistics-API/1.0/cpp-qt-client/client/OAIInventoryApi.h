/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInventoryApi_H
#define OAI_OAIInventoryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetinventorywithdispatchedreservations_200_response_inner.h"
#include "OAIInventoryBySku_200_response.h"
#include "OAIInventoryperdock_200_response_inner.h"
#include "OAISaveSupplyLot.h"
#include "OAIUpdateInventoryBySkuandWarehouseRequest_1.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInventoryApi : public QObject {
    Q_OBJECT

public:
    OAIInventoryApi(const int timeOut = 0);
    ~OAIInventoryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  sku_id QString [required]
    * @param[in]  warehouse_id QString [required]
    */
    virtual void getSupplyLots(const QString &accept, const QString &content_type, const QString &sku_id, const QString &warehouse_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  warehouse_id QString [required]
    */
    virtual void getinventorywithdispatchedreservations(const QString &content_type, const QString &accept, const QString &item_id, const QString &warehouse_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  sku_id QString [required]
    */
    virtual void inventoryBySku(const QString &content_type, const QString &accept, const QString &sku_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  sku_id QString [required]
    * @param[in]  dock_id QString [required]
    */
    virtual void inventoryperdock(const QString &content_type, const QString &accept, const QString &sku_id, const QString &dock_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  sku_id QString [required]
    * @param[in]  dock_id QString [required]
    * @param[in]  warehouse_id QString [required]
    */
    virtual void inventoryperdockandwarehouse(const QString &content_type, const QString &accept, const QString &sku_id, const QString &dock_id, const QString &warehouse_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  sku_id QString [required]
    * @param[in]  warehouse_id QString [required]
    */
    virtual void inventoryperwarehouse(const QString &content_type, const QString &accept, const QString &sku_id, const QString &warehouse_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  sku_id QString [required]
    * @param[in]  warehouse_id QString [required]
    * @param[in]  supply_lot_id QString [required]
    * @param[in]  oai_save_supply_lot OAISaveSupplyLot [required]
    */
    virtual void saveSupplyLot(const QString &accept, const QString &content_type, const QString &sku_id, const QString &warehouse_id, const QString &supply_lot_id, const OAISaveSupplyLot &oai_save_supply_lot);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  sku_id QString [required]
    * @param[in]  warehouse_id QString [required]
    * @param[in]  supply_lot_id QString [required]
    */
    virtual void transferSupplyLot(const QString &accept, const QString &content_type, const QString &sku_id, const QString &warehouse_id, const QString &supply_lot_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  sku_id QString [required]
    * @param[in]  warehouse_id QString [required]
    * @param[in]  oai_update_inventory_by_skuand_warehouse_request_1 OAIUpdateInventoryBySkuandWarehouseRequest_1 [required]
    */
    virtual void updateInventoryBySkuandWarehouse(const QString &accept, const QString &content_type, const QString &sku_id, const QString &warehouse_id, const OAIUpdateInventoryBySkuandWarehouseRequest_1 &oai_update_inventory_by_skuand_warehouse_request_1);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getSupplyLotsCallback(OAIHttpRequestWorker *worker);
    void getinventorywithdispatchedreservationsCallback(OAIHttpRequestWorker *worker);
    void inventoryBySkuCallback(OAIHttpRequestWorker *worker);
    void inventoryperdockCallback(OAIHttpRequestWorker *worker);
    void inventoryperdockandwarehouseCallback(OAIHttpRequestWorker *worker);
    void inventoryperwarehouseCallback(OAIHttpRequestWorker *worker);
    void saveSupplyLotCallback(OAIHttpRequestWorker *worker);
    void transferSupplyLotCallback(OAIHttpRequestWorker *worker);
    void updateInventoryBySkuandWarehouseCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getSupplyLotsSignal();
    void getinventorywithdispatchedreservationsSignal(QList<OAIGetinventorywithdispatchedreservations_200_response_inner> summary);
    void inventoryBySkuSignal(OAIInventoryBySku_200_response summary);
    void inventoryperdockSignal(QList<OAIInventoryperdock_200_response_inner> summary);
    void inventoryperdockandwarehouseSignal(QList<OAIInventoryperdock_200_response_inner> summary);
    void inventoryperwarehouseSignal(QList<OAIInventoryperdock_200_response_inner> summary);
    void saveSupplyLotSignal();
    void transferSupplyLotSignal();
    void updateInventoryBySkuandWarehouseSignal();


    void getSupplyLotsSignalFull(OAIHttpRequestWorker *worker);
    void getinventorywithdispatchedreservationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetinventorywithdispatchedreservations_200_response_inner> summary);
    void inventoryBySkuSignalFull(OAIHttpRequestWorker *worker, OAIInventoryBySku_200_response summary);
    void inventoryperdockSignalFull(OAIHttpRequestWorker *worker, QList<OAIInventoryperdock_200_response_inner> summary);
    void inventoryperdockandwarehouseSignalFull(OAIHttpRequestWorker *worker, QList<OAIInventoryperdock_200_response_inner> summary);
    void inventoryperwarehouseSignalFull(OAIHttpRequestWorker *worker, QList<OAIInventoryperdock_200_response_inner> summary);
    void saveSupplyLotSignalFull(OAIHttpRequestWorker *worker);
    void transferSupplyLotSignalFull(OAIHttpRequestWorker *worker);
    void updateInventoryBySkuandWarehouseSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getSupplyLotsSignalError() instead")
    void getSupplyLotsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSupplyLotsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getinventorywithdispatchedreservationsSignalError() instead")
    void getinventorywithdispatchedreservationsSignalE(QList<OAIGetinventorywithdispatchedreservations_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getinventorywithdispatchedreservationsSignalError(QList<OAIGetinventorywithdispatchedreservations_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryBySkuSignalError() instead")
    void inventoryBySkuSignalE(OAIInventoryBySku_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryBySkuSignalError(OAIInventoryBySku_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryperdockSignalError() instead")
    void inventoryperdockSignalE(QList<OAIInventoryperdock_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryperdockSignalError(QList<OAIInventoryperdock_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryperdockandwarehouseSignalError() instead")
    void inventoryperdockandwarehouseSignalE(QList<OAIInventoryperdock_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryperdockandwarehouseSignalError(QList<OAIInventoryperdock_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryperwarehouseSignalError() instead")
    void inventoryperwarehouseSignalE(QList<OAIInventoryperdock_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryperwarehouseSignalError(QList<OAIInventoryperdock_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveSupplyLotSignalError() instead")
    void saveSupplyLotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void saveSupplyLotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferSupplyLotSignalError() instead")
    void transferSupplyLotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transferSupplyLotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInventoryBySkuandWarehouseSignalError() instead")
    void updateInventoryBySkuandWarehouseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateInventoryBySkuandWarehouseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getSupplyLotsSignalErrorFull() instead")
    void getSupplyLotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSupplyLotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getinventorywithdispatchedreservationsSignalErrorFull() instead")
    void getinventorywithdispatchedreservationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getinventorywithdispatchedreservationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryBySkuSignalErrorFull() instead")
    void inventoryBySkuSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryBySkuSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryperdockSignalErrorFull() instead")
    void inventoryperdockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryperdockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryperdockandwarehouseSignalErrorFull() instead")
    void inventoryperdockandwarehouseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryperdockandwarehouseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inventoryperwarehouseSignalErrorFull() instead")
    void inventoryperwarehouseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inventoryperwarehouseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use saveSupplyLotSignalErrorFull() instead")
    void saveSupplyLotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void saveSupplyLotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferSupplyLotSignalErrorFull() instead")
    void transferSupplyLotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferSupplyLotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInventoryBySkuandWarehouseSignalErrorFull() instead")
    void updateInventoryBySkuandWarehouseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInventoryBySkuandWarehouseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
