/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAllPickupPpoints_200_response_inner_businessHours_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAllPickupPpoints_200_response_inner_businessHours_inner::OAIListAllPickupPpoints_200_response_inner_businessHours_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAllPickupPpoints_200_response_inner_businessHours_inner::OAIListAllPickupPpoints_200_response_inner_businessHours_inner() {
    this->initializeModel();
}

OAIListAllPickupPpoints_200_response_inner_businessHours_inner::~OAIListAllPickupPpoints_200_response_inner_businessHours_inner() {}

void OAIListAllPickupPpoints_200_response_inner_businessHours_inner::initializeModel() {

    m_closing_time_isSet = false;
    m_closing_time_isValid = false;

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_opening_time_isSet = false;
    m_opening_time_isValid = false;
}

void OAIListAllPickupPpoints_200_response_inner_businessHours_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAllPickupPpoints_200_response_inner_businessHours_inner::fromJsonObject(QJsonObject json) {

    m_closing_time_isValid = ::OpenAPI::fromJsonValue(m_closing_time, json[QString("closingTime")]);
    m_closing_time_isSet = !json[QString("closingTime")].isNull() && m_closing_time_isValid;

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("dayOfWeek")]);
    m_day_of_week_isSet = !json[QString("dayOfWeek")].isNull() && m_day_of_week_isValid;

    m_opening_time_isValid = ::OpenAPI::fromJsonValue(m_opening_time, json[QString("openingTime")]);
    m_opening_time_isSet = !json[QString("openingTime")].isNull() && m_opening_time_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner_businessHours_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAllPickupPpoints_200_response_inner_businessHours_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_closing_time_isSet) {
        obj.insert(QString("closingTime"), ::OpenAPI::toJsonValue(m_closing_time));
    }
    if (m_day_of_week_isSet) {
        obj.insert(QString("dayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_opening_time_isSet) {
        obj.insert(QString("openingTime"), ::OpenAPI::toJsonValue(m_opening_time));
    }
    return obj;
}

QString OAIListAllPickupPpoints_200_response_inner_businessHours_inner::getClosingTime() const {
    return m_closing_time;
}
void OAIListAllPickupPpoints_200_response_inner_businessHours_inner::setClosingTime(const QString &closing_time) {
    m_closing_time = closing_time;
    m_closing_time_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner_businessHours_inner::is_closing_time_Set() const{
    return m_closing_time_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner_businessHours_inner::is_closing_time_Valid() const{
    return m_closing_time_isValid;
}

qint32 OAIListAllPickupPpoints_200_response_inner_businessHours_inner::getDayOfWeek() const {
    return m_day_of_week;
}
void OAIListAllPickupPpoints_200_response_inner_businessHours_inner::setDayOfWeek(const qint32 &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner_businessHours_inner::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner_businessHours_inner::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

QString OAIListAllPickupPpoints_200_response_inner_businessHours_inner::getOpeningTime() const {
    return m_opening_time;
}
void OAIListAllPickupPpoints_200_response_inner_businessHours_inner::setOpeningTime(const QString &opening_time) {
    m_opening_time = opening_time;
    m_opening_time_isSet = true;
}

bool OAIListAllPickupPpoints_200_response_inner_businessHours_inner::is_opening_time_Set() const{
    return m_opening_time_isSet;
}

bool OAIListAllPickupPpoints_200_response_inner_businessHours_inner::is_opening_time_Valid() const{
    return m_opening_time_isValid;
}

bool OAIListAllPickupPpoints_200_response_inner_businessHours_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closing_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opening_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAllPickupPpoints_200_response_inner_businessHours_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
