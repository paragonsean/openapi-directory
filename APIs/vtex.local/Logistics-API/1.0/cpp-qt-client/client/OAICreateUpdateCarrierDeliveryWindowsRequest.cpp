/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUpdateCarrierDeliveryWindowsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUpdateCarrierDeliveryWindowsRequest::OAICreateUpdateCarrierDeliveryWindowsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUpdateCarrierDeliveryWindowsRequest::OAICreateUpdateCarrierDeliveryWindowsRequest() {
    this->initializeModel();
}

OAICreateUpdateCarrierDeliveryWindowsRequest::~OAICreateUpdateCarrierDeliveryWindowsRequest() {}

void OAICreateUpdateCarrierDeliveryWindowsRequest::initializeModel() {

    m_carrier_schedule_isSet = false;
    m_carrier_schedule_isValid = false;

    m_day_of_week_for_delivery_isSet = false;
    m_day_of_week_for_delivery_isValid = false;

    m_delivery_on_weekends_isSet = false;
    m_delivery_on_weekends_isValid = false;

    m_factor_cubic_weight_isSet = false;
    m_factor_cubic_weight_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_max_dimension_isSet = false;
    m_max_dimension_isValid = false;

    m_max_range_delivery_isSet = false;
    m_max_range_delivery_isValid = false;

    m_minimun_cubic_weight_isSet = false;
    m_minimun_cubic_weight_isValid = false;

    m_modals_isSet = false;
    m_modals_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_of_items_per_shipment_isSet = false;
    m_number_of_items_per_shipment_isValid = false;

    m_only_items_with_defined_modal_isSet = false;
    m_only_items_with_defined_modal_isValid = false;

    m_scheduled_delivery_isSet = false;
    m_scheduled_delivery_isValid = false;

    m_sla_type_isSet = false;
    m_sla_type_isValid = false;
}

void OAICreateUpdateCarrierDeliveryWindowsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUpdateCarrierDeliveryWindowsRequest::fromJsonObject(QJsonObject json) {

    m_carrier_schedule_isValid = ::OpenAPI::fromJsonValue(m_carrier_schedule, json[QString("carrierSchedule")]);
    m_carrier_schedule_isSet = !json[QString("carrierSchedule")].isNull() && m_carrier_schedule_isValid;

    m_day_of_week_for_delivery_isValid = ::OpenAPI::fromJsonValue(m_day_of_week_for_delivery, json[QString("dayOfWeekForDelivery")]);
    m_day_of_week_for_delivery_isSet = !json[QString("dayOfWeekForDelivery")].isNull() && m_day_of_week_for_delivery_isValid;

    m_delivery_on_weekends_isValid = ::OpenAPI::fromJsonValue(m_delivery_on_weekends, json[QString("deliveryOnWeekends")]);
    m_delivery_on_weekends_isSet = !json[QString("deliveryOnWeekends")].isNull() && m_delivery_on_weekends_isValid;

    m_factor_cubic_weight_isValid = ::OpenAPI::fromJsonValue(m_factor_cubic_weight, json[QString("factorCubicWeight")]);
    m_factor_cubic_weight_isSet = !json[QString("factorCubicWeight")].isNull() && m_factor_cubic_weight_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_max_dimension_isValid = ::OpenAPI::fromJsonValue(m_max_dimension, json[QString("maxDimension")]);
    m_max_dimension_isSet = !json[QString("maxDimension")].isNull() && m_max_dimension_isValid;

    m_max_range_delivery_isValid = ::OpenAPI::fromJsonValue(m_max_range_delivery, json[QString("maxRangeDelivery")]);
    m_max_range_delivery_isSet = !json[QString("maxRangeDelivery")].isNull() && m_max_range_delivery_isValid;

    m_minimun_cubic_weight_isValid = ::OpenAPI::fromJsonValue(m_minimun_cubic_weight, json[QString("minimunCubicWeight")]);
    m_minimun_cubic_weight_isSet = !json[QString("minimunCubicWeight")].isNull() && m_minimun_cubic_weight_isValid;

    m_modals_isValid = ::OpenAPI::fromJsonValue(m_modals, json[QString("modals")]);
    m_modals_isSet = !json[QString("modals")].isNull() && m_modals_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_of_items_per_shipment_isValid = ::OpenAPI::fromJsonValue(m_number_of_items_per_shipment, json[QString("numberOfItemsPerShipment")]);
    m_number_of_items_per_shipment_isSet = !json[QString("numberOfItemsPerShipment")].isNull() && m_number_of_items_per_shipment_isValid;

    m_only_items_with_defined_modal_isValid = ::OpenAPI::fromJsonValue(m_only_items_with_defined_modal, json[QString("onlyItemsWithDefinedModal")]);
    m_only_items_with_defined_modal_isSet = !json[QString("onlyItemsWithDefinedModal")].isNull() && m_only_items_with_defined_modal_isValid;

    m_scheduled_delivery_isValid = ::OpenAPI::fromJsonValue(m_scheduled_delivery, json[QString("scheduledDelivery")]);
    m_scheduled_delivery_isSet = !json[QString("scheduledDelivery")].isNull() && m_scheduled_delivery_isValid;

    m_sla_type_isValid = ::OpenAPI::fromJsonValue(m_sla_type, json[QString("slaType")]);
    m_sla_type_isSet = !json[QString("slaType")].isNull() && m_sla_type_isValid;
}

QString OAICreateUpdateCarrierDeliveryWindowsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUpdateCarrierDeliveryWindowsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_carrier_schedule.size() > 0) {
        obj.insert(QString("carrierSchedule"), ::OpenAPI::toJsonValue(m_carrier_schedule));
    }
    if (m_day_of_week_for_delivery.size() > 0) {
        obj.insert(QString("dayOfWeekForDelivery"), ::OpenAPI::toJsonValue(m_day_of_week_for_delivery));
    }
    if (m_delivery_on_weekends_isSet) {
        obj.insert(QString("deliveryOnWeekends"), ::OpenAPI::toJsonValue(m_delivery_on_weekends));
    }
    if (m_factor_cubic_weight_isSet) {
        obj.insert(QString("factorCubicWeight"), ::OpenAPI::toJsonValue(m_factor_cubic_weight));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_max_dimension.isSet()) {
        obj.insert(QString("maxDimension"), ::OpenAPI::toJsonValue(m_max_dimension));
    }
    if (m_max_range_delivery_isSet) {
        obj.insert(QString("maxRangeDelivery"), ::OpenAPI::toJsonValue(m_max_range_delivery));
    }
    if (m_minimun_cubic_weight_isSet) {
        obj.insert(QString("minimunCubicWeight"), ::OpenAPI::toJsonValue(m_minimun_cubic_weight));
    }
    if (m_modals.size() > 0) {
        obj.insert(QString("modals"), ::OpenAPI::toJsonValue(m_modals));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_of_items_per_shipment_isSet) {
        obj.insert(QString("numberOfItemsPerShipment"), ::OpenAPI::toJsonValue(m_number_of_items_per_shipment));
    }
    if (m_only_items_with_defined_modal_isSet) {
        obj.insert(QString("onlyItemsWithDefinedModal"), ::OpenAPI::toJsonValue(m_only_items_with_defined_modal));
    }
    if (m_scheduled_delivery_isSet) {
        obj.insert(QString("scheduledDelivery"), ::OpenAPI::toJsonValue(m_scheduled_delivery));
    }
    if (m_sla_type_isSet) {
        obj.insert(QString("slaType"), ::OpenAPI::toJsonValue(m_sla_type));
    }
    return obj;
}

QList<QString> OAICreateUpdateCarrierDeliveryWindowsRequest::getCarrierSchedule() const {
    return m_carrier_schedule;
}
void OAICreateUpdateCarrierDeliveryWindowsRequest::setCarrierSchedule(const QList<QString> &carrier_schedule) {
    m_carrier_schedule = carrier_schedule;
    m_carrier_schedule_isSet = true;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_carrier_schedule_Set() const{
    return m_carrier_schedule_isSet;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_carrier_schedule_Valid() const{
    return m_carrier_schedule_isValid;
}

QList<OAIDayOfWeekForDelivery_inner> OAICreateUpdateCarrierDeliveryWindowsRequest::getDayOfWeekForDelivery() const {
    return m_day_of_week_for_delivery;
}
void OAICreateUpdateCarrierDeliveryWindowsRequest::setDayOfWeekForDelivery(const QList<OAIDayOfWeekForDelivery_inner> &day_of_week_for_delivery) {
    m_day_of_week_for_delivery = day_of_week_for_delivery;
    m_day_of_week_for_delivery_isSet = true;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_day_of_week_for_delivery_Set() const{
    return m_day_of_week_for_delivery_isSet;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_day_of_week_for_delivery_Valid() const{
    return m_day_of_week_for_delivery_isValid;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::isDeliveryOnWeekends() const {
    return m_delivery_on_weekends;
}
void OAICreateUpdateCarrierDeliveryWindowsRequest::setDeliveryOnWeekends(const bool &delivery_on_weekends) {
    m_delivery_on_weekends = delivery_on_weekends;
    m_delivery_on_weekends_isSet = true;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_delivery_on_weekends_Set() const{
    return m_delivery_on_weekends_isSet;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_delivery_on_weekends_Valid() const{
    return m_delivery_on_weekends_isValid;
}

QString OAICreateUpdateCarrierDeliveryWindowsRequest::getFactorCubicWeight() const {
    return m_factor_cubic_weight;
}
void OAICreateUpdateCarrierDeliveryWindowsRequest::setFactorCubicWeight(const QString &factor_cubic_weight) {
    m_factor_cubic_weight = factor_cubic_weight;
    m_factor_cubic_weight_isSet = true;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_factor_cubic_weight_Set() const{
    return m_factor_cubic_weight_isSet;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_factor_cubic_weight_Valid() const{
    return m_factor_cubic_weight_isValid;
}

QString OAICreateUpdateCarrierDeliveryWindowsRequest::getId() const {
    return m_id;
}
void OAICreateUpdateCarrierDeliveryWindowsRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_id_Valid() const{
    return m_id_isValid;
}

OAIMaxDimension1_1 OAICreateUpdateCarrierDeliveryWindowsRequest::getMaxDimension() const {
    return m_max_dimension;
}
void OAICreateUpdateCarrierDeliveryWindowsRequest::setMaxDimension(const OAIMaxDimension1_1 &max_dimension) {
    m_max_dimension = max_dimension;
    m_max_dimension_isSet = true;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_max_dimension_Set() const{
    return m_max_dimension_isSet;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_max_dimension_Valid() const{
    return m_max_dimension_isValid;
}

qint32 OAICreateUpdateCarrierDeliveryWindowsRequest::getMaxRangeDelivery() const {
    return m_max_range_delivery;
}
void OAICreateUpdateCarrierDeliveryWindowsRequest::setMaxRangeDelivery(const qint32 &max_range_delivery) {
    m_max_range_delivery = max_range_delivery;
    m_max_range_delivery_isSet = true;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_max_range_delivery_Set() const{
    return m_max_range_delivery_isSet;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_max_range_delivery_Valid() const{
    return m_max_range_delivery_isValid;
}

QString OAICreateUpdateCarrierDeliveryWindowsRequest::getMinimunCubicWeight() const {
    return m_minimun_cubic_weight;
}
void OAICreateUpdateCarrierDeliveryWindowsRequest::setMinimunCubicWeight(const QString &minimun_cubic_weight) {
    m_minimun_cubic_weight = minimun_cubic_weight;
    m_minimun_cubic_weight_isSet = true;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_minimun_cubic_weight_Set() const{
    return m_minimun_cubic_weight_isSet;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_minimun_cubic_weight_Valid() const{
    return m_minimun_cubic_weight_isValid;
}

QList<QString> OAICreateUpdateCarrierDeliveryWindowsRequest::getModals() const {
    return m_modals;
}
void OAICreateUpdateCarrierDeliveryWindowsRequest::setModals(const QList<QString> &modals) {
    m_modals = modals;
    m_modals_isSet = true;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_modals_Set() const{
    return m_modals_isSet;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_modals_Valid() const{
    return m_modals_isValid;
}

QString OAICreateUpdateCarrierDeliveryWindowsRequest::getName() const {
    return m_name;
}
void OAICreateUpdateCarrierDeliveryWindowsRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateUpdateCarrierDeliveryWindowsRequest::getNumberOfItemsPerShipment() const {
    return m_number_of_items_per_shipment;
}
void OAICreateUpdateCarrierDeliveryWindowsRequest::setNumberOfItemsPerShipment(const QString &number_of_items_per_shipment) {
    m_number_of_items_per_shipment = number_of_items_per_shipment;
    m_number_of_items_per_shipment_isSet = true;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_number_of_items_per_shipment_Set() const{
    return m_number_of_items_per_shipment_isSet;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_number_of_items_per_shipment_Valid() const{
    return m_number_of_items_per_shipment_isValid;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::isOnlyItemsWithDefinedModal() const {
    return m_only_items_with_defined_modal;
}
void OAICreateUpdateCarrierDeliveryWindowsRequest::setOnlyItemsWithDefinedModal(const bool &only_items_with_defined_modal) {
    m_only_items_with_defined_modal = only_items_with_defined_modal;
    m_only_items_with_defined_modal_isSet = true;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_only_items_with_defined_modal_Set() const{
    return m_only_items_with_defined_modal_isSet;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_only_items_with_defined_modal_Valid() const{
    return m_only_items_with_defined_modal_isValid;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::isScheduledDelivery() const {
    return m_scheduled_delivery;
}
void OAICreateUpdateCarrierDeliveryWindowsRequest::setScheduledDelivery(const bool &scheduled_delivery) {
    m_scheduled_delivery = scheduled_delivery;
    m_scheduled_delivery_isSet = true;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_scheduled_delivery_Set() const{
    return m_scheduled_delivery_isSet;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_scheduled_delivery_Valid() const{
    return m_scheduled_delivery_isValid;
}

QString OAICreateUpdateCarrierDeliveryWindowsRequest::getSlaType() const {
    return m_sla_type;
}
void OAICreateUpdateCarrierDeliveryWindowsRequest::setSlaType(const QString &sla_type) {
    m_sla_type = sla_type;
    m_sla_type_isSet = true;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_sla_type_Set() const{
    return m_sla_type_isSet;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::is_sla_type_Valid() const{
    return m_sla_type_isValid;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_carrier_schedule.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_week_for_delivery.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_on_weekends_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_factor_cubic_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_range_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimun_cubic_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_items_per_shipment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_items_with_defined_modal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_delivery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sla_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUpdateCarrierDeliveryWindowsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_carrier_schedule_isValid && m_day_of_week_for_delivery_isValid && m_delivery_on_weekends_isValid && m_factor_cubic_weight_isValid && m_id_isValid && m_max_dimension_isValid && m_max_range_delivery_isValid && m_minimun_cubic_weight_isValid && m_modals_isValid && m_name_isValid && m_number_of_items_per_shipment_isValid && m_only_items_with_defined_modal_isValid && m_scheduled_delivery_isValid && m_sla_type_isValid && true;
}

} // namespace OpenAPI
