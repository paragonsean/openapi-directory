/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorbytoomanyactivereservations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorbytoomanyactivereservations::OAIErrorbytoomanyactivereservations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorbytoomanyactivereservations::OAIErrorbytoomanyactivereservations() {
    this->initializeModel();
}

OAIErrorbytoomanyactivereservations::~OAIErrorbytoomanyactivereservations() {}

void OAIErrorbytoomanyactivereservations::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAIErrorbytoomanyactivereservations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorbytoomanyactivereservations::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;
}

QString OAIErrorbytoomanyactivereservations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorbytoomanyactivereservations::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

OAIError_1 OAIErrorbytoomanyactivereservations::getError() const {
    return m_error;
}
void OAIErrorbytoomanyactivereservations::setError(const OAIError_1 &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIErrorbytoomanyactivereservations::is_error_Set() const{
    return m_error_isSet;
}

bool OAIErrorbytoomanyactivereservations::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIErrorbytoomanyactivereservations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorbytoomanyactivereservations::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_isValid && true;
}

} // namespace OpenAPI
