/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetById_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetById_1::OAIGetById_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetById_1::OAIGetById_1() {
    this->initializeModel();
}

OAIGetById_1::~OAIGetById_1() {}

void OAIGetById_1::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_business_hours_isSet = false;
    m_business_hours_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_formatted_address_isSet = false;
    m_formatted_address_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;
}

void OAIGetById_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetById_1::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_business_hours_isValid = ::OpenAPI::fromJsonValue(m_business_hours, json[QString("businessHours")]);
    m_business_hours_isSet = !json[QString("businessHours")].isNull() && m_business_hours_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_formatted_address_isValid = ::OpenAPI::fromJsonValue(m_formatted_address, json[QString("formatted_address")]);
    m_formatted_address_isSet = !json[QString("formatted_address")].isNull() && m_formatted_address_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouseId")]);
    m_warehouse_id_isSet = !json[QString("warehouseId")].isNull() && m_warehouse_id_isValid;
}

QString OAIGetById_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetById_1::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_business_hours.size() > 0) {
        obj.insert(QString("businessHours"), ::OpenAPI::toJsonValue(m_business_hours));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_formatted_address_isSet) {
        obj.insert(QString("formatted_address"), ::OpenAPI::toJsonValue(m_formatted_address));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instructions_isSet) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouseId"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    return obj;
}

OAIAddress4_1 OAIGetById_1::getAddress() const {
    return m_address;
}
void OAIGetById_1::setAddress(const OAIAddress4_1 &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIGetById_1::is_address_Set() const{
    return m_address_isSet;
}

bool OAIGetById_1::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAIBusinessHour_1> OAIGetById_1::getBusinessHours() const {
    return m_business_hours;
}
void OAIGetById_1::setBusinessHours(const QList<OAIBusinessHour_1> &business_hours) {
    m_business_hours = business_hours;
    m_business_hours_isSet = true;
}

bool OAIGetById_1::is_business_hours_Set() const{
    return m_business_hours_isSet;
}

bool OAIGetById_1::is_business_hours_Valid() const{
    return m_business_hours_isValid;
}

QString OAIGetById_1::getDescription() const {
    return m_description;
}
void OAIGetById_1::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetById_1::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetById_1::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGetById_1::getFormattedAddress() const {
    return m_formatted_address;
}
void OAIGetById_1::setFormattedAddress(const QString &formatted_address) {
    m_formatted_address = formatted_address;
    m_formatted_address_isSet = true;
}

bool OAIGetById_1::is_formatted_address_Set() const{
    return m_formatted_address_isSet;
}

bool OAIGetById_1::is_formatted_address_Valid() const{
    return m_formatted_address_isValid;
}

QString OAIGetById_1::getId() const {
    return m_id;
}
void OAIGetById_1::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetById_1::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetById_1::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetById_1::getInstructions() const {
    return m_instructions;
}
void OAIGetById_1::setInstructions(const QString &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAIGetById_1::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAIGetById_1::is_instructions_Valid() const{
    return m_instructions_isValid;
}

bool OAIGetById_1::isIsActive() const {
    return m_is_active;
}
void OAIGetById_1::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIGetById_1::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIGetById_1::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIGetById_1::getName() const {
    return m_name;
}
void OAIGetById_1::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetById_1::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetById_1::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetById_1::getWarehouseId() const {
    return m_warehouse_id;
}
void OAIGetById_1::setWarehouseId(const QString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAIGetById_1::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAIGetById_1::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

bool OAIGetById_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_hours.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetById_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_business_hours_isValid && m_description_isValid && m_formatted_address_isValid && m_id_isValid && m_instructions_isValid && m_is_active_isValid && m_name_isValid && m_warehouse_id_isValid && true;
}

} // namespace OpenAPI
