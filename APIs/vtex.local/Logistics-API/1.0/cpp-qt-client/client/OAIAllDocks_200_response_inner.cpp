/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllDocks_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllDocks_200_response_inner::OAIAllDocks_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllDocks_200_response_inner::OAIAllDocks_200_response_inner() {
    this->initializeModel();
}

OAIAllDocks_200_response_inner::~OAIAllDocks_200_response_inner() {}

void OAIAllDocks_200_response_inner::initializeModel() {

    m_dock_time_fake_isSet = false;
    m_dock_time_fake_isValid = false;

    m_freight_table_ids_isSet = false;
    m_freight_table_ids_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pickup_store_info_isSet = false;
    m_pickup_store_info_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_sales_channels_isSet = false;
    m_sales_channels_isValid = false;

    m_time_fake_overhead_isSet = false;
    m_time_fake_overhead_isValid = false;

    m_wms_end_point_isSet = false;
    m_wms_end_point_isValid = false;
}

void OAIAllDocks_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllDocks_200_response_inner::fromJsonObject(QJsonObject json) {

    m_dock_time_fake_isValid = ::OpenAPI::fromJsonValue(m_dock_time_fake, json[QString("dockTimeFake")]);
    m_dock_time_fake_isSet = !json[QString("dockTimeFake")].isNull() && m_dock_time_fake_isValid;

    m_freight_table_ids_isValid = ::OpenAPI::fromJsonValue(m_freight_table_ids, json[QString("freightTableIds")]);
    m_freight_table_ids_isSet = !json[QString("freightTableIds")].isNull() && m_freight_table_ids_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pickup_store_info_isValid = ::OpenAPI::fromJsonValue(m_pickup_store_info, json[QString("pickupStoreInfo")]);
    m_pickup_store_info_isSet = !json[QString("pickupStoreInfo")].isNull() && m_pickup_store_info_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;

    m_sales_channels_isValid = ::OpenAPI::fromJsonValue(m_sales_channels, json[QString("salesChannels")]);
    m_sales_channels_isSet = !json[QString("salesChannels")].isNull() && m_sales_channels_isValid;

    m_time_fake_overhead_isValid = ::OpenAPI::fromJsonValue(m_time_fake_overhead, json[QString("timeFakeOverhead")]);
    m_time_fake_overhead_isSet = !json[QString("timeFakeOverhead")].isNull() && m_time_fake_overhead_isValid;

    m_wms_end_point_isValid = ::OpenAPI::fromJsonValue(m_wms_end_point, json[QString("wmsEndPoint")]);
    m_wms_end_point_isSet = !json[QString("wmsEndPoint")].isNull() && m_wms_end_point_isValid;
}

QString OAIAllDocks_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllDocks_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_dock_time_fake_isSet) {
        obj.insert(QString("dockTimeFake"), ::OpenAPI::toJsonValue(m_dock_time_fake));
    }
    if (m_freight_table_ids.size() > 0) {
        obj.insert(QString("freightTableIds"), ::OpenAPI::toJsonValue(m_freight_table_ids));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pickup_store_info.isSet()) {
        obj.insert(QString("pickupStoreInfo"), ::OpenAPI::toJsonValue(m_pickup_store_info));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_sales_channels.size() > 0) {
        obj.insert(QString("salesChannels"), ::OpenAPI::toJsonValue(m_sales_channels));
    }
    if (m_time_fake_overhead_isSet) {
        obj.insert(QString("timeFakeOverhead"), ::OpenAPI::toJsonValue(m_time_fake_overhead));
    }
    if (m_wms_end_point_isSet) {
        obj.insert(QString("wmsEndPoint"), ::OpenAPI::toJsonValue(m_wms_end_point));
    }
    return obj;
}

QString OAIAllDocks_200_response_inner::getDockTimeFake() const {
    return m_dock_time_fake;
}
void OAIAllDocks_200_response_inner::setDockTimeFake(const QString &dock_time_fake) {
    m_dock_time_fake = dock_time_fake;
    m_dock_time_fake_isSet = true;
}

bool OAIAllDocks_200_response_inner::is_dock_time_fake_Set() const{
    return m_dock_time_fake_isSet;
}

bool OAIAllDocks_200_response_inner::is_dock_time_fake_Valid() const{
    return m_dock_time_fake_isValid;
}

QList<QString> OAIAllDocks_200_response_inner::getFreightTableIds() const {
    return m_freight_table_ids;
}
void OAIAllDocks_200_response_inner::setFreightTableIds(const QList<QString> &freight_table_ids) {
    m_freight_table_ids = freight_table_ids;
    m_freight_table_ids_isSet = true;
}

bool OAIAllDocks_200_response_inner::is_freight_table_ids_Set() const{
    return m_freight_table_ids_isSet;
}

bool OAIAllDocks_200_response_inner::is_freight_table_ids_Valid() const{
    return m_freight_table_ids_isValid;
}

QString OAIAllDocks_200_response_inner::getId() const {
    return m_id;
}
void OAIAllDocks_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAllDocks_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAllDocks_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAllDocks_200_response_inner::getName() const {
    return m_name;
}
void OAIAllDocks_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAllDocks_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAllDocks_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

OAIPickupStoreInfo1_1 OAIAllDocks_200_response_inner::getPickupStoreInfo() const {
    return m_pickup_store_info;
}
void OAIAllDocks_200_response_inner::setPickupStoreInfo(const OAIPickupStoreInfo1_1 &pickup_store_info) {
    m_pickup_store_info = pickup_store_info;
    m_pickup_store_info_isSet = true;
}

bool OAIAllDocks_200_response_inner::is_pickup_store_info_Set() const{
    return m_pickup_store_info_isSet;
}

bool OAIAllDocks_200_response_inner::is_pickup_store_info_Valid() const{
    return m_pickup_store_info_isValid;
}

qint32 OAIAllDocks_200_response_inner::getPriority() const {
    return m_priority;
}
void OAIAllDocks_200_response_inner::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIAllDocks_200_response_inner::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIAllDocks_200_response_inner::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIAllDocks_200_response_inner::getSalesChannel() const {
    return m_sales_channel;
}
void OAIAllDocks_200_response_inner::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAIAllDocks_200_response_inner::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAIAllDocks_200_response_inner::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

QList<QString> OAIAllDocks_200_response_inner::getSalesChannels() const {
    return m_sales_channels;
}
void OAIAllDocks_200_response_inner::setSalesChannels(const QList<QString> &sales_channels) {
    m_sales_channels = sales_channels;
    m_sales_channels_isSet = true;
}

bool OAIAllDocks_200_response_inner::is_sales_channels_Set() const{
    return m_sales_channels_isSet;
}

bool OAIAllDocks_200_response_inner::is_sales_channels_Valid() const{
    return m_sales_channels_isValid;
}

QString OAIAllDocks_200_response_inner::getTimeFakeOverhead() const {
    return m_time_fake_overhead;
}
void OAIAllDocks_200_response_inner::setTimeFakeOverhead(const QString &time_fake_overhead) {
    m_time_fake_overhead = time_fake_overhead;
    m_time_fake_overhead_isSet = true;
}

bool OAIAllDocks_200_response_inner::is_time_fake_overhead_Set() const{
    return m_time_fake_overhead_isSet;
}

bool OAIAllDocks_200_response_inner::is_time_fake_overhead_Valid() const{
    return m_time_fake_overhead_isValid;
}

QString OAIAllDocks_200_response_inner::getWmsEndPoint() const {
    return m_wms_end_point;
}
void OAIAllDocks_200_response_inner::setWmsEndPoint(const QString &wms_end_point) {
    m_wms_end_point = wms_end_point;
    m_wms_end_point_isSet = true;
}

bool OAIAllDocks_200_response_inner::is_wms_end_point_Set() const{
    return m_wms_end_point_isSet;
}

bool OAIAllDocks_200_response_inner::is_wms_end_point_Valid() const{
    return m_wms_end_point_isValid;
}

bool OAIAllDocks_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dock_time_fake_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_table_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_store_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_fake_overhead_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wms_end_point_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllDocks_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dock_time_fake_isValid && m_freight_table_ids_isValid && m_id_isValid && m_name_isValid && m_pickup_store_info_isValid && m_priority_isValid && m_sales_channel_isValid && m_sales_channels_isValid && m_time_fake_overhead_isValid && m_wms_end_point_isValid && true;
}

} // namespace OpenAPI
