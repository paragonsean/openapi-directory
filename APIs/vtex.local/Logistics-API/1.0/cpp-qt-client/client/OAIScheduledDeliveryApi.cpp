/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledDeliveryApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIScheduledDeliveryApi::OAIScheduledDeliveryApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIScheduledDeliveryApi::~OAIScheduledDeliveryApi() {
}

void OAIScheduledDeliveryApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://vtex.local"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://{accountName}.{environment}.com.br"),
    "VTEX server URL.",
    QMap<QString, OAIServerVariable>{ 
    {"accountName", OAIServerVariable("Name of the VTEX account. Used as part of the URL.","{accountName}",
    QSet<QString>{ {"{accountName}"} })},
    
    {"environment", OAIServerVariable("Environment to use. Used as part of the URL.","{environment}",
    QSet<QString>{ {"{environment}"} })}, }));
    
    _serverConfigs.insert("addBlockedDeliveryWindows", defaultConf);
    _serverIndices.insert("addBlockedDeliveryWindows", 0);
    _serverConfigs.insert("apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGet", defaultConf);
    _serverIndices.insert("apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGet", 0);
    _serverConfigs.insert("apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGet", defaultConf);
    _serverIndices.insert("apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGet", 0);
    _serverConfigs.insert("removeBlockedDeliveryWindows", defaultConf);
    _serverIndices.insert("removeBlockedDeliveryWindows", 0);
    _serverConfigs.insert("retrieveBlockedDeliveryWindows", defaultConf);
    _serverIndices.insert("retrieveBlockedDeliveryWindows", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIScheduledDeliveryApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIScheduledDeliveryApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIScheduledDeliveryApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIScheduledDeliveryApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIScheduledDeliveryApi::setUsername(const QString &username) {
    _username = username;
}

void OAIScheduledDeliveryApi::setPassword(const QString &password) {
    _password = password;
}


void OAIScheduledDeliveryApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIScheduledDeliveryApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIScheduledDeliveryApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIScheduledDeliveryApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIScheduledDeliveryApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIScheduledDeliveryApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIScheduledDeliveryApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIScheduledDeliveryApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIScheduledDeliveryApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIScheduledDeliveryApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIScheduledDeliveryApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIScheduledDeliveryApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIScheduledDeliveryApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIScheduledDeliveryApi::addBlockedDeliveryWindows(const QString &content_type, const QString &accept, const QString &carrier_id, const QString &body) {
    QString fullPath = QString(_serverConfigs["addBlockedDeliveryWindows"][_serverIndices.value("addBlockedDeliveryWindows")].URL()+"/api/logistics/pvt/configuration/carriers/{carrierId}/adddayofweekblocked");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString carrier_idPathParam("{");
        carrier_idPathParam.append("carrierId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "carrierId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"carrierId"+pathSuffix : pathPrefix;
        fullPath.replace(carrier_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(carrier_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        QByteArray output = body.toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScheduledDeliveryApi::addBlockedDeliveryWindowsCallback);
    connect(this, &OAIScheduledDeliveryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScheduledDeliveryApi::addBlockedDeliveryWindowsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT addBlockedDeliveryWindowsSignal();
        Q_EMIT addBlockedDeliveryWindowsSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT addBlockedDeliveryWindowsSignalE(error_type, error_str);
        Q_EMIT addBlockedDeliveryWindowsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT addBlockedDeliveryWindowsSignalError(error_type, error_str);
        Q_EMIT addBlockedDeliveryWindowsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScheduledDeliveryApi::apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGet(const QString &content_type, const QString &accept, const QString &capacity_type, const QString &shipping_policy_id, const QString &range_start, const QString &range_end) {
    QString fullPath = QString(_serverConfigs["apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGet"][_serverIndices.value("apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGet")].URL()+"/api/logistics-capacity/resources/carrier@{capacityType}@{shippingPolicyId}/time-frames");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString capacity_typePathParam("{");
        capacity_typePathParam.append("capacityType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "capacityType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"capacityType"+pathSuffix : pathPrefix;
        fullPath.replace(capacity_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(capacity_type)));
    }
    
    {
        QString shipping_policy_idPathParam("{");
        shipping_policy_idPathParam.append("shippingPolicyId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "shippingPolicyId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"shippingPolicyId"+pathSuffix : pathPrefix;
        fullPath.replace(shipping_policy_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(shipping_policy_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "rangeStart", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("rangeStart")).append(querySuffix).append(QUrl::toPercentEncoding(range_start));
    }
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "rangeEnd", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("rangeEnd")).append(querySuffix).append(QUrl::toPercentEncoding(range_end));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScheduledDeliveryApi::apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetCallback);
    connect(this, &OAIScheduledDeliveryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScheduledDeliveryApi::apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetSignal();
        Q_EMIT apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetSignalE(error_type, error_str);
        Q_EMIT apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetSignalError(error_type, error_str);
        Q_EMIT apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScheduledDeliveryApi::apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGet(const QString &content_type, const QString &accept, const QString &capacity_type, const QString &shipping_policy_id, const QString &window_day, const QString &window_start_time, const QString &window_end_time) {
    QString fullPath = QString(_serverConfigs["apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGet"][_serverIndices.value("apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGet")].URL()+"/api/logistics-capacity/resources/carrier@{capacityType}@{shippingPolicyId}/time-frames/{windowDay}F{windowStartTime}T{windowEndTime}");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString capacity_typePathParam("{");
        capacity_typePathParam.append("capacityType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "capacityType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"capacityType"+pathSuffix : pathPrefix;
        fullPath.replace(capacity_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(capacity_type)));
    }
    
    {
        QString shipping_policy_idPathParam("{");
        shipping_policy_idPathParam.append("shippingPolicyId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "shippingPolicyId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"shippingPolicyId"+pathSuffix : pathPrefix;
        fullPath.replace(shipping_policy_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(shipping_policy_id)));
    }
    
    {
        QString window_dayPathParam("{");
        window_dayPathParam.append("windowDay").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "windowDay", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"windowDay"+pathSuffix : pathPrefix;
        fullPath.replace(window_dayPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(window_day)));
    }
    
    {
        QString window_start_timePathParam("{");
        window_start_timePathParam.append("windowStartTime").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "windowStartTime", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"windowStartTime"+pathSuffix : pathPrefix;
        fullPath.replace(window_start_timePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(window_start_time)));
    }
    
    {
        QString window_end_timePathParam("{");
        window_end_timePathParam.append("windowEndTime").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "windowEndTime", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"windowEndTime"+pathSuffix : pathPrefix;
        fullPath.replace(window_end_timePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(window_end_time)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScheduledDeliveryApi::apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetCallback);
    connect(this, &OAIScheduledDeliveryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScheduledDeliveryApi::apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetSignal();
        Q_EMIT apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetSignalE(error_type, error_str);
        Q_EMIT apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetSignalError(error_type, error_str);
        Q_EMIT apiLogisticsCapacityResourcesCarriercapacityTypeshippingPolicyIdTimeFramesWindowDayFwindowStartTimeTwindowEndTimeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScheduledDeliveryApi::removeBlockedDeliveryWindows(const QString &content_type, const QString &accept, const QString &carrier_id, const QString &body) {
    QString fullPath = QString(_serverConfigs["removeBlockedDeliveryWindows"][_serverIndices.value("removeBlockedDeliveryWindows")].URL()+"/api/logistics/pvt/configuration/carriers/{carrierId}/removedayofweekblocked");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString carrier_idPathParam("{");
        carrier_idPathParam.append("carrierId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "carrierId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"carrierId"+pathSuffix : pathPrefix;
        fullPath.replace(carrier_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(carrier_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        QByteArray output = body.toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScheduledDeliveryApi::removeBlockedDeliveryWindowsCallback);
    connect(this, &OAIScheduledDeliveryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScheduledDeliveryApi::removeBlockedDeliveryWindowsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT removeBlockedDeliveryWindowsSignal();
        Q_EMIT removeBlockedDeliveryWindowsSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT removeBlockedDeliveryWindowsSignalE(error_type, error_str);
        Q_EMIT removeBlockedDeliveryWindowsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT removeBlockedDeliveryWindowsSignalError(error_type, error_str);
        Q_EMIT removeBlockedDeliveryWindowsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScheduledDeliveryApi::retrieveBlockedDeliveryWindows(const QString &content_type, const QString &accept, const QString &carrier_id) {
    QString fullPath = QString(_serverConfigs["retrieveBlockedDeliveryWindows"][_serverIndices.value("retrieveBlockedDeliveryWindows")].URL()+"/api/logistics/pvt/configuration/carriers/{carrierId}/getdayofweekblocked");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString carrier_idPathParam("{");
        carrier_idPathParam.append("carrierId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "carrierId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"carrierId"+pathSuffix : pathPrefix;
        fullPath.replace(carrier_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(carrier_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIScheduledDeliveryApi::retrieveBlockedDeliveryWindowsCallback);
    connect(this, &OAIScheduledDeliveryApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIScheduledDeliveryApi::retrieveBlockedDeliveryWindowsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT retrieveBlockedDeliveryWindowsSignal();
        Q_EMIT retrieveBlockedDeliveryWindowsSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT retrieveBlockedDeliveryWindowsSignalE(error_type, error_str);
        Q_EMIT retrieveBlockedDeliveryWindowsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT retrieveBlockedDeliveryWindowsSignalError(error_type, error_str);
        Q_EMIT retrieveBlockedDeliveryWindowsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIScheduledDeliveryApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
