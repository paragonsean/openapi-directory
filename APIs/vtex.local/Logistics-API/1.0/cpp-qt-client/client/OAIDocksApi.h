/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDocksApi_H
#define OAI_OAIDocksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAllDocks_200_response_inner.h"
#include "OAICreate_UpdateDockRequest.h"
#include "OAIDockById_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDocksApi : public QObject {
    Q_OBJECT

public:
    OAIDocksApi(const int timeOut = 0);
    ~OAIDocksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  dock_id QString [required]
    */
    virtual void activateDock(const QString &content_type, const QString &accept, const QString &dock_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void allDocks(const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_create_update_dock_request OAICreate_UpdateDockRequest [required]
    */
    virtual void create_UpdateDock(const QString &content_type, const QString &accept, const OAICreate_UpdateDockRequest &oai_create_update_dock_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  dock_id QString [required]
    */
    virtual void deactivateDock(const QString &content_type, const QString &accept, const QString &dock_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  dock_id QString [required]
    */
    virtual void dock(const QString &content_type, const QString &accept, const QString &dock_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  dock_id QString [required]
    */
    virtual void dockById(const QString &content_type, const QString &accept, const QString &dock_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activateDockCallback(OAIHttpRequestWorker *worker);
    void allDocksCallback(OAIHttpRequestWorker *worker);
    void create_UpdateDockCallback(OAIHttpRequestWorker *worker);
    void deactivateDockCallback(OAIHttpRequestWorker *worker);
    void dockCallback(OAIHttpRequestWorker *worker);
    void dockByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activateDockSignal();
    void allDocksSignal(QList<OAIAllDocks_200_response_inner> summary);
    void create_UpdateDockSignal();
    void deactivateDockSignal();
    void dockSignal();
    void dockByIdSignal(OAIDockById_200_response summary);


    void activateDockSignalFull(OAIHttpRequestWorker *worker);
    void allDocksSignalFull(OAIHttpRequestWorker *worker, QList<OAIAllDocks_200_response_inner> summary);
    void create_UpdateDockSignalFull(OAIHttpRequestWorker *worker);
    void deactivateDockSignalFull(OAIHttpRequestWorker *worker);
    void dockSignalFull(OAIHttpRequestWorker *worker);
    void dockByIdSignalFull(OAIHttpRequestWorker *worker, OAIDockById_200_response summary);

    Q_DECL_DEPRECATED_X("Use activateDockSignalError() instead")
    void activateDockSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activateDockSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allDocksSignalError() instead")
    void allDocksSignalE(QList<OAIAllDocks_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allDocksSignalError(QList<OAIAllDocks_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use create_UpdateDockSignalError() instead")
    void create_UpdateDockSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void create_UpdateDockSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateDockSignalError() instead")
    void deactivateDockSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateDockSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dockSignalError() instead")
    void dockSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dockSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dockByIdSignalError() instead")
    void dockByIdSignalE(OAIDockById_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dockByIdSignalError(OAIDockById_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activateDockSignalErrorFull() instead")
    void activateDockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activateDockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allDocksSignalErrorFull() instead")
    void allDocksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allDocksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use create_UpdateDockSignalErrorFull() instead")
    void create_UpdateDockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void create_UpdateDockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateDockSignalErrorFull() instead")
    void deactivateDockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateDockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dockSignalErrorFull() instead")
    void dockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dockByIdSignalErrorFull() instead")
    void dockByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dockByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
