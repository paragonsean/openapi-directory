/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Country1 from './Country1';
import Location51 from './Location51';

/**
 * The Address41 model module.
 * @module model/Address41
 * @version 1.0
 */
class Address41 {
    /**
     * Constructs a new <code>Address41</code>.
     * @alias module:model/Address41
     * @param city {String} 
     * @param complement {String} 
     * @param country {module:model/Country1} 
     * @param location {module:model/Location51} 
     * @param neighborhood {String} 
     * @param number {String} 
     * @param postalCode {String} 
     * @param state {String} 
     * @param street {String} 
     */
    constructor(city, complement, country, location, neighborhood, number, postalCode, state, street) { 
        
        Address41.initialize(this, city, complement, country, location, neighborhood, number, postalCode, state, street);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, city, complement, country, location, neighborhood, number, postalCode, state, street) { 
        obj['city'] = city;
        obj['complement'] = complement;
        obj['country'] = country;
        obj['location'] = location;
        obj['neighborhood'] = neighborhood;
        obj['number'] = number;
        obj['postalCode'] = postalCode;
        obj['state'] = state;
        obj['street'] = street;
    }

    /**
     * Constructs a <code>Address41</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Address41} obj Optional instance to populate.
     * @return {module:model/Address41} The populated <code>Address41</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Address41();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('complement')) {
                obj['complement'] = ApiClient.convertToType(data['complement'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = Country1.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location51.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('neighborhood')) {
                obj['neighborhood'] = ApiClient.convertToType(data['neighborhood'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Address41</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Address41</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Address41.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['complement'] && !(typeof data['complement'] === 'string' || data['complement'] instanceof String)) {
            throw new Error("Expected the field `complement` to be a primitive type in the JSON string but got " + data['complement']);
        }
        // validate the optional field `country`
        if (data['country']) { // data not null
          Country1.validateJSON(data['country']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location51.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['neighborhood'] && !(typeof data['neighborhood'] === 'string' || data['neighborhood'] instanceof String)) {
            throw new Error("Expected the field `neighborhood` to be a primitive type in the JSON string but got " + data['neighborhood']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }

        return true;
    }


}

Address41.RequiredProperties = ["city", "complement", "country", "location", "neighborhood", "number", "postalCode", "state", "street"];

/**
 * @member {String} city
 */
Address41.prototype['city'] = undefined;

/**
 * @member {String} complement
 */
Address41.prototype['complement'] = undefined;

/**
 * @member {module:model/Country1} country
 */
Address41.prototype['country'] = undefined;

/**
 * @member {module:model/Location51} location
 */
Address41.prototype['location'] = undefined;

/**
 * @member {String} neighborhood
 */
Address41.prototype['neighborhood'] = undefined;

/**
 * @member {String} number
 */
Address41.prototype['number'] = undefined;

/**
 * @member {String} postalCode
 */
Address41.prototype['postalCode'] = undefined;

/**
 * @member {String} state
 */
Address41.prototype['state'] = undefined;

/**
 * @member {String} street
 */
Address41.prototype['street'] = undefined;






export default Address41;

