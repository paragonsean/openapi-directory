/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateUpdateFreightValuesRequest model module.
 * @module model/CreateUpdateFreightValuesRequest
 * @version 1.0
 */
class CreateUpdateFreightValuesRequest {
    /**
     * Constructs a new <code>CreateUpdateFreightValuesRequest</code>.
     * @alias module:model/CreateUpdateFreightValuesRequest
     * @param absoluteMoneyCost {String} Fixed shipping cost to be charged in a decimal number.
     * @param country {String} Three letter ISO code for the country where the delivery will take place.
     * @param maxVolume {Number} Maximum volume that can be transported by the carrier in cm³.
     * @param operationType {Number} Indicates desired action for the object. Possible values are `1` (Insert), `2` (Update) or `3`(Delete).
     * @param polygon {String} Polygon ID, according to the [geolocation](https://help.vtex.com/en/tutorial/registering-geolocation/) feature.
     * @param pricePercent {Number} [Price-based additional shipping charge](https://help.vtex.com/en/tutorial/additional-shipping-costs--2vqGwMn0LabkOHY6zSHYNV), calculated based on the total price of the order, in decimal number. You must fill in this field with a percentage value. For example, for an additional charge of 10%, fill in the table with 10.
     * @param pricePercentByWeight {Number} [Weight-based additional shipping charge](https://help.vtex.com/en/tutorial/additional-shipping-costs--2vqGwMn0LabkOHY6zSHYNV), calculated based on the total weight of the order.
     * @param timeCost {String} Delivery time frame informed by the carrier, in the format DD.HH:MM:SS.
     * @param weightEnd {Number} Maximum weight allowed.
     * @param weightStart {Number} Minimum weight allowed
     * @param zipCodeEnd {String} End of postal code interval.
     * @param zipCodeStart {String} Start of postal code interval.
     */
    constructor(absoluteMoneyCost, country, maxVolume, operationType, polygon, pricePercent, pricePercentByWeight, timeCost, weightEnd, weightStart, zipCodeEnd, zipCodeStart) { 
        
        CreateUpdateFreightValuesRequest.initialize(this, absoluteMoneyCost, country, maxVolume, operationType, polygon, pricePercent, pricePercentByWeight, timeCost, weightEnd, weightStart, zipCodeEnd, zipCodeStart);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, absoluteMoneyCost, country, maxVolume, operationType, polygon, pricePercent, pricePercentByWeight, timeCost, weightEnd, weightStart, zipCodeEnd, zipCodeStart) { 
        obj['absoluteMoneyCost'] = absoluteMoneyCost;
        obj['country'] = country;
        obj['maxVolume'] = maxVolume;
        obj['operationType'] = operationType;
        obj['polygon'] = polygon;
        obj['pricePercent'] = pricePercent;
        obj['pricePercentByWeight'] = pricePercentByWeight;
        obj['timeCost'] = timeCost;
        obj['weightEnd'] = weightEnd;
        obj['weightStart'] = weightStart;
        obj['zipCodeEnd'] = zipCodeEnd;
        obj['zipCodeStart'] = zipCodeStart;
    }

    /**
     * Constructs a <code>CreateUpdateFreightValuesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateUpdateFreightValuesRequest} obj Optional instance to populate.
     * @return {module:model/CreateUpdateFreightValuesRequest} The populated <code>CreateUpdateFreightValuesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateUpdateFreightValuesRequest();

            if (data.hasOwnProperty('absoluteMoneyCost')) {
                obj['absoluteMoneyCost'] = ApiClient.convertToType(data['absoluteMoneyCost'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('maxVolume')) {
                obj['maxVolume'] = ApiClient.convertToType(data['maxVolume'], 'Number');
            }
            if (data.hasOwnProperty('operationType')) {
                obj['operationType'] = ApiClient.convertToType(data['operationType'], 'Number');
            }
            if (data.hasOwnProperty('polygon')) {
                obj['polygon'] = ApiClient.convertToType(data['polygon'], 'String');
            }
            if (data.hasOwnProperty('pricePercent')) {
                obj['pricePercent'] = ApiClient.convertToType(data['pricePercent'], 'Number');
            }
            if (data.hasOwnProperty('pricePercentByWeight')) {
                obj['pricePercentByWeight'] = ApiClient.convertToType(data['pricePercentByWeight'], 'Number');
            }
            if (data.hasOwnProperty('timeCost')) {
                obj['timeCost'] = ApiClient.convertToType(data['timeCost'], 'String');
            }
            if (data.hasOwnProperty('weightEnd')) {
                obj['weightEnd'] = ApiClient.convertToType(data['weightEnd'], 'Number');
            }
            if (data.hasOwnProperty('weightStart')) {
                obj['weightStart'] = ApiClient.convertToType(data['weightStart'], 'Number');
            }
            if (data.hasOwnProperty('zipCodeEnd')) {
                obj['zipCodeEnd'] = ApiClient.convertToType(data['zipCodeEnd'], 'String');
            }
            if (data.hasOwnProperty('zipCodeStart')) {
                obj['zipCodeStart'] = ApiClient.convertToType(data['zipCodeStart'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateUpdateFreightValuesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateUpdateFreightValuesRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateUpdateFreightValuesRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['absoluteMoneyCost'] && !(typeof data['absoluteMoneyCost'] === 'string' || data['absoluteMoneyCost'] instanceof String)) {
            throw new Error("Expected the field `absoluteMoneyCost` to be a primitive type in the JSON string but got " + data['absoluteMoneyCost']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['polygon'] && !(typeof data['polygon'] === 'string' || data['polygon'] instanceof String)) {
            throw new Error("Expected the field `polygon` to be a primitive type in the JSON string but got " + data['polygon']);
        }
        // ensure the json data is a string
        if (data['timeCost'] && !(typeof data['timeCost'] === 'string' || data['timeCost'] instanceof String)) {
            throw new Error("Expected the field `timeCost` to be a primitive type in the JSON string but got " + data['timeCost']);
        }
        // ensure the json data is a string
        if (data['zipCodeEnd'] && !(typeof data['zipCodeEnd'] === 'string' || data['zipCodeEnd'] instanceof String)) {
            throw new Error("Expected the field `zipCodeEnd` to be a primitive type in the JSON string but got " + data['zipCodeEnd']);
        }
        // ensure the json data is a string
        if (data['zipCodeStart'] && !(typeof data['zipCodeStart'] === 'string' || data['zipCodeStart'] instanceof String)) {
            throw new Error("Expected the field `zipCodeStart` to be a primitive type in the JSON string but got " + data['zipCodeStart']);
        }

        return true;
    }


}

CreateUpdateFreightValuesRequest.RequiredProperties = ["absoluteMoneyCost", "country", "maxVolume", "operationType", "polygon", "pricePercent", "pricePercentByWeight", "timeCost", "weightEnd", "weightStart", "zipCodeEnd", "zipCodeStart"];

/**
 * Fixed shipping cost to be charged in a decimal number.
 * @member {String} absoluteMoneyCost
 */
CreateUpdateFreightValuesRequest.prototype['absoluteMoneyCost'] = undefined;

/**
 * Three letter ISO code for the country where the delivery will take place.
 * @member {String} country
 */
CreateUpdateFreightValuesRequest.prototype['country'] = undefined;

/**
 * Maximum volume that can be transported by the carrier in cm³.
 * @member {Number} maxVolume
 */
CreateUpdateFreightValuesRequest.prototype['maxVolume'] = undefined;

/**
 * Indicates desired action for the object. Possible values are `1` (Insert), `2` (Update) or `3`(Delete).
 * @member {Number} operationType
 */
CreateUpdateFreightValuesRequest.prototype['operationType'] = undefined;

/**
 * Polygon ID, according to the [geolocation](https://help.vtex.com/en/tutorial/registering-geolocation/) feature.
 * @member {String} polygon
 */
CreateUpdateFreightValuesRequest.prototype['polygon'] = undefined;

/**
 * [Price-based additional shipping charge](https://help.vtex.com/en/tutorial/additional-shipping-costs--2vqGwMn0LabkOHY6zSHYNV), calculated based on the total price of the order, in decimal number. You must fill in this field with a percentage value. For example, for an additional charge of 10%, fill in the table with 10.
 * @member {Number} pricePercent
 */
CreateUpdateFreightValuesRequest.prototype['pricePercent'] = undefined;

/**
 * [Weight-based additional shipping charge](https://help.vtex.com/en/tutorial/additional-shipping-costs--2vqGwMn0LabkOHY6zSHYNV), calculated based on the total weight of the order.
 * @member {Number} pricePercentByWeight
 */
CreateUpdateFreightValuesRequest.prototype['pricePercentByWeight'] = undefined;

/**
 * Delivery time frame informed by the carrier, in the format DD.HH:MM:SS.
 * @member {String} timeCost
 */
CreateUpdateFreightValuesRequest.prototype['timeCost'] = undefined;

/**
 * Maximum weight allowed.
 * @member {Number} weightEnd
 */
CreateUpdateFreightValuesRequest.prototype['weightEnd'] = undefined;

/**
 * Minimum weight allowed
 * @member {Number} weightStart
 */
CreateUpdateFreightValuesRequest.prototype['weightStart'] = undefined;

/**
 * End of postal code interval.
 * @member {String} zipCodeEnd
 */
CreateUpdateFreightValuesRequest.prototype['zipCodeEnd'] = undefined;

/**
 * Start of postal code interval.
 * @member {String} zipCodeStart
 */
CreateUpdateFreightValuesRequest.prototype['zipCodeStart'] = undefined;






export default CreateUpdateFreightValuesRequest;

