/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BusinessHourSettings from './BusinessHourSettings';
import CarrierScheduleInner from './CarrierScheduleInner';
import CubicWeightSettings from './CubicWeightSettings';
import DeliveryScheduleSettings from './DeliveryScheduleSettings';
import MaxDimension from './MaxDimension';
import ModalSettings from './ModalSettings';
import PickupPointsSettings from './PickupPointsSettings';
import WeekendAndHolidays from './WeekendAndHolidays';

/**
 * The RequestBody model module.
 * @module model/RequestBody
 * @version 1.0
 */
class RequestBody {
    /**
     * Constructs a new <code>RequestBody</code>.
     * @alias module:model/RequestBody
     * @param businessHourSettings {module:model/BusinessHourSettings} 
     * @param cubicWeightSettings {module:model/CubicWeightSettings} 
     * @param deliveryScheduleSettings {module:model/DeliveryScheduleSettings} 
     * @param id {String} ID of the shipping policy.
     * @param isActive {Boolean} Indicates whether shipping policy is active or not.
     * @param maxDimension {module:model/MaxDimension} 
     * @param maximumValueAceptable {Number} Maximum value accepted by the carrier, to realize the shipping.
     * @param minimumValueAceptable {Number} Minimum value accepted by the carrier, to realize the shipping.
     * @param modalSettings {module:model/ModalSettings} 
     * @param name {String} Name of the shipping policy.
     * @param numberOfItemsPerShipment {Number} Capacity of your store's logistics of shipment, determines number of items permitted per shipment.
     * @param pickupPointsSettings {module:model/PickupPointsSettings} 
     * @param shippingMethod {String} Type of shipping available for this shipping policy (carrier). Options shown on freight simulation
     * @param weekendAndHolidays {module:model/WeekendAndHolidays} 
     */
    constructor(businessHourSettings, cubicWeightSettings, deliveryScheduleSettings, id, isActive, maxDimension, maximumValueAceptable, minimumValueAceptable, modalSettings, name, numberOfItemsPerShipment, pickupPointsSettings, shippingMethod, weekendAndHolidays) { 
        
        RequestBody.initialize(this, businessHourSettings, cubicWeightSettings, deliveryScheduleSettings, id, isActive, maxDimension, maximumValueAceptable, minimumValueAceptable, modalSettings, name, numberOfItemsPerShipment, pickupPointsSettings, shippingMethod, weekendAndHolidays);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, businessHourSettings, cubicWeightSettings, deliveryScheduleSettings, id, isActive, maxDimension, maximumValueAceptable, minimumValueAceptable, modalSettings, name, numberOfItemsPerShipment, pickupPointsSettings, shippingMethod, weekendAndHolidays) { 
        obj['businessHourSettings'] = businessHourSettings;
        obj['cubicWeightSettings'] = cubicWeightSettings;
        obj['deliveryScheduleSettings'] = deliveryScheduleSettings;
        obj['id'] = id;
        obj['isActive'] = isActive;
        obj['maxDimension'] = maxDimension;
        obj['maximumValueAceptable'] = maximumValueAceptable;
        obj['minimumValueAceptable'] = minimumValueAceptable;
        obj['modalSettings'] = modalSettings;
        obj['name'] = name;
        obj['numberOfItemsPerShipment'] = numberOfItemsPerShipment;
        obj['pickupPointsSettings'] = pickupPointsSettings;
        obj['shippingMethod'] = shippingMethod;
        obj['weekendAndHolidays'] = weekendAndHolidays;
    }

    /**
     * Constructs a <code>RequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RequestBody} obj Optional instance to populate.
     * @return {module:model/RequestBody} The populated <code>RequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RequestBody();

            if (data.hasOwnProperty('businessHourSettings')) {
                obj['businessHourSettings'] = BusinessHourSettings.constructFromObject(data['businessHourSettings']);
            }
            if (data.hasOwnProperty('carrierSchedule')) {
                obj['carrierSchedule'] = ApiClient.convertToType(data['carrierSchedule'], [CarrierScheduleInner]);
            }
            if (data.hasOwnProperty('cubicWeightSettings')) {
                obj['cubicWeightSettings'] = CubicWeightSettings.constructFromObject(data['cubicWeightSettings']);
            }
            if (data.hasOwnProperty('deliveryScheduleSettings')) {
                obj['deliveryScheduleSettings'] = DeliveryScheduleSettings.constructFromObject(data['deliveryScheduleSettings']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('maxDimension')) {
                obj['maxDimension'] = MaxDimension.constructFromObject(data['maxDimension']);
            }
            if (data.hasOwnProperty('maximumValueAceptable')) {
                obj['maximumValueAceptable'] = ApiClient.convertToType(data['maximumValueAceptable'], 'Number');
            }
            if (data.hasOwnProperty('minimumValueAceptable')) {
                obj['minimumValueAceptable'] = ApiClient.convertToType(data['minimumValueAceptable'], 'Number');
            }
            if (data.hasOwnProperty('modalSettings')) {
                obj['modalSettings'] = ModalSettings.constructFromObject(data['modalSettings']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('numberOfItemsPerShipment')) {
                obj['numberOfItemsPerShipment'] = ApiClient.convertToType(data['numberOfItemsPerShipment'], 'Number');
            }
            if (data.hasOwnProperty('pickupPointsSettings')) {
                obj['pickupPointsSettings'] = PickupPointsSettings.constructFromObject(data['pickupPointsSettings']);
            }
            if (data.hasOwnProperty('shippingMethod')) {
                obj['shippingMethod'] = ApiClient.convertToType(data['shippingMethod'], 'String');
            }
            if (data.hasOwnProperty('weekendAndHolidays')) {
                obj['weekendAndHolidays'] = WeekendAndHolidays.constructFromObject(data['weekendAndHolidays']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RequestBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RequestBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RequestBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `businessHourSettings`
        if (data['businessHourSettings']) { // data not null
          BusinessHourSettings.validateJSON(data['businessHourSettings']);
        }
        if (data['carrierSchedule']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['carrierSchedule'])) {
                throw new Error("Expected the field `carrierSchedule` to be an array in the JSON data but got " + data['carrierSchedule']);
            }
            // validate the optional field `carrierSchedule` (array)
            for (const item of data['carrierSchedule']) {
                CarrierScheduleInner.validateJSON(item);
            };
        }
        // validate the optional field `cubicWeightSettings`
        if (data['cubicWeightSettings']) { // data not null
          CubicWeightSettings.validateJSON(data['cubicWeightSettings']);
        }
        // validate the optional field `deliveryScheduleSettings`
        if (data['deliveryScheduleSettings']) { // data not null
          DeliveryScheduleSettings.validateJSON(data['deliveryScheduleSettings']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `maxDimension`
        if (data['maxDimension']) { // data not null
          MaxDimension.validateJSON(data['maxDimension']);
        }
        // validate the optional field `modalSettings`
        if (data['modalSettings']) { // data not null
          ModalSettings.validateJSON(data['modalSettings']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `pickupPointsSettings`
        if (data['pickupPointsSettings']) { // data not null
          PickupPointsSettings.validateJSON(data['pickupPointsSettings']);
        }
        // ensure the json data is a string
        if (data['shippingMethod'] && !(typeof data['shippingMethod'] === 'string' || data['shippingMethod'] instanceof String)) {
            throw new Error("Expected the field `shippingMethod` to be a primitive type in the JSON string but got " + data['shippingMethod']);
        }
        // validate the optional field `weekendAndHolidays`
        if (data['weekendAndHolidays']) { // data not null
          WeekendAndHolidays.validateJSON(data['weekendAndHolidays']);
        }

        return true;
    }


}

RequestBody.RequiredProperties = ["businessHourSettings", "cubicWeightSettings", "deliveryScheduleSettings", "id", "isActive", "maxDimension", "maximumValueAceptable", "minimumValueAceptable", "modalSettings", "name", "numberOfItemsPerShipment", "pickupPointsSettings", "shippingMethod", "weekendAndHolidays"];

/**
 * @member {module:model/BusinessHourSettings} businessHourSettings
 */
RequestBody.prototype['businessHourSettings'] = undefined;

/**
 * Schedule sent by the carrier, to configure Shipping policy
 * @member {Array.<module:model/CarrierScheduleInner>} carrierSchedule
 */
RequestBody.prototype['carrierSchedule'] = undefined;

/**
 * @member {module:model/CubicWeightSettings} cubicWeightSettings
 */
RequestBody.prototype['cubicWeightSettings'] = undefined;

/**
 * @member {module:model/DeliveryScheduleSettings} deliveryScheduleSettings
 */
RequestBody.prototype['deliveryScheduleSettings'] = undefined;

/**
 * ID of the shipping policy.
 * @member {String} id
 */
RequestBody.prototype['id'] = undefined;

/**
 * Indicates whether shipping policy is active or not.
 * @member {Boolean} isActive
 */
RequestBody.prototype['isActive'] = undefined;

/**
 * @member {module:model/MaxDimension} maxDimension
 */
RequestBody.prototype['maxDimension'] = undefined;

/**
 * Maximum value accepted by the carrier, to realize the shipping.
 * @member {Number} maximumValueAceptable
 */
RequestBody.prototype['maximumValueAceptable'] = undefined;

/**
 * Minimum value accepted by the carrier, to realize the shipping.
 * @member {Number} minimumValueAceptable
 */
RequestBody.prototype['minimumValueAceptable'] = undefined;

/**
 * @member {module:model/ModalSettings} modalSettings
 */
RequestBody.prototype['modalSettings'] = undefined;

/**
 * Name of the shipping policy.
 * @member {String} name
 */
RequestBody.prototype['name'] = undefined;

/**
 * Capacity of your store's logistics of shipment, determines number of items permitted per shipment.
 * @member {Number} numberOfItemsPerShipment
 */
RequestBody.prototype['numberOfItemsPerShipment'] = undefined;

/**
 * @member {module:model/PickupPointsSettings} pickupPointsSettings
 */
RequestBody.prototype['pickupPointsSettings'] = undefined;

/**
 * Type of shipping available for this shipping policy (carrier). Options shown on freight simulation
 * @member {String} shippingMethod
 */
RequestBody.prototype['shippingMethod'] = undefined;

/**
 * @member {module:model/WeekendAndHolidays} weekendAndHolidays
 */
RequestBody.prototype['weekendAndHolidays'] = undefined;






export default RequestBody;

