/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReservationById200ResponseSlaRequestInner from './ReservationById200ResponseSlaRequestInner';

/**
 * The ReservationById200Response model module.
 * @module model/ReservationById200Response
 * @version 1.0
 */
class ReservationById200Response {
    /**
     * Constructs a new <code>ReservationById200Response</code>.
     * @alias module:model/ReservationById200Response
     */
    constructor() { 
        
        ReservationById200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReservationById200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReservationById200Response} obj Optional instance to populate.
     * @return {module:model/ReservationById200Response} The populated <code>ReservationById200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReservationById200Response();

            if (data.hasOwnProperty('AuthorizedDateUtc')) {
                obj['AuthorizedDateUtc'] = ApiClient.convertToType(data['AuthorizedDateUtc'], 'String');
            }
            if (data.hasOwnProperty('CanceledDateUtc')) {
                obj['CanceledDateUtc'] = ApiClient.convertToType(data['CanceledDateUtc'], 'String');
            }
            if (data.hasOwnProperty('ConfirmedDateUtc')) {
                obj['ConfirmedDateUtc'] = ApiClient.convertToType(data['ConfirmedDateUtc'], 'String');
            }
            if (data.hasOwnProperty('Errors')) {
                obj['Errors'] = ApiClient.convertToType(data['Errors'], ['String']);
            }
            if (data.hasOwnProperty('IsSucess')) {
                obj['IsSucess'] = ApiClient.convertToType(data['IsSucess'], 'Boolean');
            }
            if (data.hasOwnProperty('LastUpdateDateUtc')) {
                obj['LastUpdateDateUtc'] = ApiClient.convertToType(data['LastUpdateDateUtc'], 'String');
            }
            if (data.hasOwnProperty('LockId')) {
                obj['LockId'] = ApiClient.convertToType(data['LockId'], 'String');
            }
            if (data.hasOwnProperty('MaximumConfirmationDateUtc')) {
                obj['MaximumConfirmationDateUtc'] = ApiClient.convertToType(data['MaximumConfirmationDateUtc'], 'String');
            }
            if (data.hasOwnProperty('PickupPointItemOptions')) {
                obj['PickupPointItemOptions'] = ApiClient.convertToType(data['PickupPointItemOptions'], 'String');
            }
            if (data.hasOwnProperty('ReservationDateUtc')) {
                obj['ReservationDateUtc'] = ApiClient.convertToType(data['ReservationDateUtc'], 'String');
            }
            if (data.hasOwnProperty('SalesChannel')) {
                obj['SalesChannel'] = ApiClient.convertToType(data['SalesChannel'], 'String');
            }
            if (data.hasOwnProperty('SlaRequest')) {
                obj['SlaRequest'] = ApiClient.convertToType(data['SlaRequest'], [ReservationById200ResponseSlaRequestInner]);
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReservationById200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReservationById200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AuthorizedDateUtc'] && !(typeof data['AuthorizedDateUtc'] === 'string' || data['AuthorizedDateUtc'] instanceof String)) {
            throw new Error("Expected the field `AuthorizedDateUtc` to be a primitive type in the JSON string but got " + data['AuthorizedDateUtc']);
        }
        // ensure the json data is a string
        if (data['CanceledDateUtc'] && !(typeof data['CanceledDateUtc'] === 'string' || data['CanceledDateUtc'] instanceof String)) {
            throw new Error("Expected the field `CanceledDateUtc` to be a primitive type in the JSON string but got " + data['CanceledDateUtc']);
        }
        // ensure the json data is a string
        if (data['ConfirmedDateUtc'] && !(typeof data['ConfirmedDateUtc'] === 'string' || data['ConfirmedDateUtc'] instanceof String)) {
            throw new Error("Expected the field `ConfirmedDateUtc` to be a primitive type in the JSON string but got " + data['ConfirmedDateUtc']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Errors'])) {
            throw new Error("Expected the field `Errors` to be an array in the JSON data but got " + data['Errors']);
        }
        // ensure the json data is a string
        if (data['LastUpdateDateUtc'] && !(typeof data['LastUpdateDateUtc'] === 'string' || data['LastUpdateDateUtc'] instanceof String)) {
            throw new Error("Expected the field `LastUpdateDateUtc` to be a primitive type in the JSON string but got " + data['LastUpdateDateUtc']);
        }
        // ensure the json data is a string
        if (data['LockId'] && !(typeof data['LockId'] === 'string' || data['LockId'] instanceof String)) {
            throw new Error("Expected the field `LockId` to be a primitive type in the JSON string but got " + data['LockId']);
        }
        // ensure the json data is a string
        if (data['MaximumConfirmationDateUtc'] && !(typeof data['MaximumConfirmationDateUtc'] === 'string' || data['MaximumConfirmationDateUtc'] instanceof String)) {
            throw new Error("Expected the field `MaximumConfirmationDateUtc` to be a primitive type in the JSON string but got " + data['MaximumConfirmationDateUtc']);
        }
        // ensure the json data is a string
        if (data['PickupPointItemOptions'] && !(typeof data['PickupPointItemOptions'] === 'string' || data['PickupPointItemOptions'] instanceof String)) {
            throw new Error("Expected the field `PickupPointItemOptions` to be a primitive type in the JSON string but got " + data['PickupPointItemOptions']);
        }
        // ensure the json data is a string
        if (data['ReservationDateUtc'] && !(typeof data['ReservationDateUtc'] === 'string' || data['ReservationDateUtc'] instanceof String)) {
            throw new Error("Expected the field `ReservationDateUtc` to be a primitive type in the JSON string but got " + data['ReservationDateUtc']);
        }
        // ensure the json data is a string
        if (data['SalesChannel'] && !(typeof data['SalesChannel'] === 'string' || data['SalesChannel'] instanceof String)) {
            throw new Error("Expected the field `SalesChannel` to be a primitive type in the JSON string but got " + data['SalesChannel']);
        }
        if (data['SlaRequest']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SlaRequest'])) {
                throw new Error("Expected the field `SlaRequest` to be an array in the JSON data but got " + data['SlaRequest']);
            }
            // validate the optional field `SlaRequest` (array)
            for (const item of data['SlaRequest']) {
                ReservationById200ResponseSlaRequestInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Authorized date in UTC.
 * @member {String} AuthorizedDateUtc
 */
ReservationById200Response.prototype['AuthorizedDateUtc'] = undefined;

/**
 * Canceled date in UTC.
 * @member {String} CanceledDateUtc
 */
ReservationById200Response.prototype['CanceledDateUtc'] = undefined;

/**
 * Confirmed date in UTC.
 * @member {String} ConfirmedDateUtc
 */
ReservationById200Response.prototype['ConfirmedDateUtc'] = undefined;

/**
 * Information on errors, if there are any.
 * @member {Array.<String>} Errors
 */
ReservationById200Response.prototype['Errors'] = undefined;

/**
 * @member {Boolean} IsSucess
 */
ReservationById200Response.prototype['IsSucess'] = undefined;

/**
 * Date of the last update in UTC.
 * @member {String} LastUpdateDateUtc
 */
ReservationById200Response.prototype['LastUpdateDateUtc'] = undefined;

/**
 * Lock ID.
 * @member {String} LockId
 */
ReservationById200Response.prototype['LockId'] = undefined;

/**
 * Maximum confirmation date in UTC.
 * @member {String} MaximumConfirmationDateUtc
 */
ReservationById200Response.prototype['MaximumConfirmationDateUtc'] = undefined;

/**
 * Pickup point item options.
 * @member {String} PickupPointItemOptions
 */
ReservationById200Response.prototype['PickupPointItemOptions'] = undefined;

/**
 * Reservation date in UTC.
 * @member {String} ReservationDateUtc
 */
ReservationById200Response.prototype['ReservationDateUtc'] = undefined;

/**
 * Sales channel.
 * @member {String} SalesChannel
 */
ReservationById200Response.prototype['SalesChannel'] = undefined;

/**
 * Information on SLA request.
 * @member {Array.<module:model/ReservationById200ResponseSlaRequestInner>} SlaRequest
 */
ReservationById200Response.prototype['SlaRequest'] = undefined;

/**
 * Reservation status, being:  `0`: `NotCommitted`  `1`: `Authorized`  `2`: `Confirmed`  `3`: `Canceled_AbortedCommitted`  `4`: `Canceled_AuthorizationExpired`  `5`: `Canceled_Manually`
 * @member {Number} Status
 */
ReservationById200Response.prototype['Status'] = undefined;






export default ReservationById200Response;

