/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ModalSettings model module.
 * @module model/ModalSettings
 * @version 1.0
 */
class ModalSettings {
    /**
     * Constructs a new <code>ModalSettings</code>.
     * Configurations for the [modal](https://help.vtex.com/en/tutorial/how-does-the-modal-work--tutorials_125), which is the attachement of a specific product to a carrier specialized in delivering that type of product.
     * @alias module:model/ModalSettings
     * @param modals {Array.<Object>} Type of special freight.
     * @param useOnlyItemsWithDefinedModal {Boolean} When set as `true`, the modal's configurations will apply only for items with a defined modal.
     */
    constructor(modals, useOnlyItemsWithDefinedModal) { 
        
        ModalSettings.initialize(this, modals, useOnlyItemsWithDefinedModal);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, modals, useOnlyItemsWithDefinedModal) { 
        obj['modals'] = modals;
        obj['useOnlyItemsWithDefinedModal'] = useOnlyItemsWithDefinedModal;
    }

    /**
     * Constructs a <code>ModalSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModalSettings} obj Optional instance to populate.
     * @return {module:model/ModalSettings} The populated <code>ModalSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModalSettings();

            if (data.hasOwnProperty('modals')) {
                obj['modals'] = ApiClient.convertToType(data['modals'], [Object]);
            }
            if (data.hasOwnProperty('useOnlyItemsWithDefinedModal')) {
                obj['useOnlyItemsWithDefinedModal'] = ApiClient.convertToType(data['useOnlyItemsWithDefinedModal'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModalSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModalSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ModalSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['modals'])) {
            throw new Error("Expected the field `modals` to be an array in the JSON data but got " + data['modals']);
        }

        return true;
    }


}

ModalSettings.RequiredProperties = ["modals", "useOnlyItemsWithDefinedModal"];

/**
 * Type of special freight.
 * @member {Array.<Object>} modals
 */
ModalSettings.prototype['modals'] = undefined;

/**
 * When set as `true`, the modal's configurations will apply only for items with a defined modal.
 * @member {Boolean} useOnlyItemsWithDefinedModal
 */
ModalSettings.prototype['useOnlyItemsWithDefinedModal'] = undefined;






export default ModalSettings;

