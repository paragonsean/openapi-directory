/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUpdate from '../model/CreateUpdate';
import CreateUpdatePickupPointRequest from '../model/CreateUpdatePickupPointRequest';
import GetById1 from '../model/GetById1';
import ListAllPickupPpoints200ResponseInner from '../model/ListAllPickupPpoints200ResponseInner';

/**
* PickupPoints service.
* @module api/PickupPointsApi
* @version 1.0
*/
export default class PickupPointsApi {

    /**
    * Constructs a new PickupPointsApi. 
    * @alias module:api/PickupPointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/PickupPointsApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Pickup Point
     * Deletes a given pickup point for your store, by pickup point ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} pickupPointId 
     * @param {module:api/PickupPointsApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    callDelete(contentType, accept, pickupPointId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling callDelete");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling callDelete");
      }
      // verify the required parameter 'pickupPointId' is set
      if (pickupPointId === undefined || pickupPointId === null) {
        throw new Error("Missing the required parameter 'pickupPointId' when calling callDelete");
      }

      let pathParams = {
        'pickupPointId': pickupPointId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/pickuppoints/{pickupPointId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUpdatePickupPoint operation.
     * @callback module:api/PickupPointsApi~createUpdatePickupPointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create/Update Pickup Point
     * Creates or updates [pickup points](https://help.vtex.com/en/subcategory/pickup-points--1c5Btie9ou2Gg2iUo0ggqM#) in your store by Pickup Point ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} pickupPointId Pickup Point ID. Cannot contain spaces.
     * @param {module:model/CreateUpdatePickupPointRequest} createUpdatePickupPointRequest 
     * @param {module:api/PickupPointsApi~createUpdatePickupPointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUpdate}
     */
    createUpdatePickupPoint(contentType, accept, pickupPointId, createUpdatePickupPointRequest, callback) {
      let postBody = createUpdatePickupPointRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createUpdatePickupPoint");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createUpdatePickupPoint");
      }
      // verify the required parameter 'pickupPointId' is set
      if (pickupPointId === undefined || pickupPointId === null) {
        throw new Error("Missing the required parameter 'pickupPointId' when calling createUpdatePickupPoint");
      }
      // verify the required parameter 'createUpdatePickupPointRequest' is set
      if (createUpdatePickupPointRequest === undefined || createUpdatePickupPointRequest === null) {
        throw new Error("Missing the required parameter 'createUpdatePickupPointRequest' when calling createUpdatePickupPoint");
      }

      let pathParams = {
        'pickupPointId': pickupPointId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = CreateUpdate;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/pickuppoints/{pickupPointId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getById operation.
     * @callback module:api/PickupPointsApi~getByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetById1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Pickup Point By ID
     * Lists your store's pickup points while searching by ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} pickupPointId 
     * @param {module:api/PickupPointsApi~getByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetById1}
     */
    getById(contentType, accept, pickupPointId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getById");
      }
      // verify the required parameter 'pickupPointId' is set
      if (pickupPointId === undefined || pickupPointId === null) {
        throw new Error("Missing the required parameter 'pickupPointId' when calling getById");
      }

      let pathParams = {
        'pickupPointId': pickupPointId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = GetById1;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/pickuppoints/{pickupPointId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getpaged operation.
     * @callback module:api/PickupPointsApi~getpagedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List paged Pickup Points
     * Lists paged pickup points in your store.
     * @param {String} page 
     * @param {String} pageSize 
     * @param {String} keyword 
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:api/PickupPointsApi~getpagedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getpaged(page, pageSize, keyword, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getpaged");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling getpaged");
      }
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling getpaged");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getpaged");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getpaged");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': page,
        'pageSize': pageSize,
        'keyword': keyword
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/pickuppoints/_search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllPickupPpoints operation.
     * @callback module:api/PickupPointsApi~listAllPickupPpointsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ListAllPickupPpoints200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all pickup points
     * Lists all of your store's pickup points.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:api/PickupPointsApi~listAllPickupPpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ListAllPickupPpoints200ResponseInner>}
     */
    listAllPickupPpoints(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listAllPickupPpoints");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling listAllPickupPpoints");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [ListAllPickupPpoints200ResponseInner];
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/pickuppoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
