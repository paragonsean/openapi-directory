/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Getinventorywithdispatchedreservations200ResponseInner from '../model/Getinventorywithdispatchedreservations200ResponseInner';
import InventoryBySku200Response from '../model/InventoryBySku200Response';
import Inventoryperdock200ResponseInner from '../model/Inventoryperdock200ResponseInner';
import SaveSupplyLot from '../model/SaveSupplyLot';
import UpdateInventoryBySkuandWarehouseRequest1 from '../model/UpdateInventoryBySkuandWarehouseRequest1';

/**
* Inventory service.
* @module api/InventoryApi
* @version 1.0
*/
export default class InventoryApi {

    /**
    * Constructs a new InventoryApi. 
    * @alias module:api/InventoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSupplyLots operation.
     * @callback module:api/InventoryApi~getSupplyLotsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List supply lots
     * Returns a list of the supply lots of an SKU in a specific warehouse.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {String} skuId ID of the SKU.
     * @param {String} warehouseId ID of the warehouse where the SKU is located.
     * @param {module:api/InventoryApi~getSupplyLotsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSupplyLots(accept, contentType, skuId, warehouseId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getSupplyLots");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getSupplyLots");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling getSupplyLots");
      }
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling getSupplyLots");
      }

      let pathParams = {
        'skuId': skuId,
        'warehouseId': warehouseId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}/supplyLots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getinventorywithdispatchedreservations operation.
     * @callback module:api/InventoryApi~getinventorywithdispatchedreservationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Getinventorywithdispatchedreservations200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List inventory with dispatched reservations
     * Lists inventory with dispatched reservations. When the number of active reservations is more than 2000 the return is an error with status code 400 (BadRequest) and the message: Too many active reservations.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} itemId 
     * @param {String} warehouseId 
     * @param {module:api/InventoryApi~getinventorywithdispatchedreservationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Getinventorywithdispatchedreservations200ResponseInner>}
     */
    getinventorywithdispatchedreservations(contentType, accept, itemId, warehouseId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getinventorywithdispatchedreservations");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getinventorywithdispatchedreservations");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getinventorywithdispatchedreservations");
      }
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling getinventorywithdispatchedreservations");
      }

      let pathParams = {
        'itemId': itemId,
        'warehouseId': warehouseId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Getinventorywithdispatchedreservations200ResponseInner];
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/items/{itemId}/warehouses/{warehouseId}/dispatched', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inventoryBySku operation.
     * @callback module:api/InventoryApi~inventoryBySkuCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InventoryBySku200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List inventory by SKU
     * Lists your store's inventory by SKU ID
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} skuId 
     * @param {module:api/InventoryApi~inventoryBySkuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InventoryBySku200Response}
     */
    inventoryBySku(contentType, accept, skuId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling inventoryBySku");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling inventoryBySku");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling inventoryBySku");
      }

      let pathParams = {
        'skuId': skuId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = InventoryBySku200Response;
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/skus/{skuId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inventoryperdock operation.
     * @callback module:api/InventoryApi~inventoryperdockCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Inventoryperdock200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List inventory per dock
     * Lists inventory information per dock set up in your store.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} skuId 
     * @param {String} dockId 
     * @param {module:api/InventoryApi~inventoryperdockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Inventoryperdock200ResponseInner>}
     */
    inventoryperdock(contentType, accept, skuId, dockId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling inventoryperdock");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling inventoryperdock");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling inventoryperdock");
      }
      // verify the required parameter 'dockId' is set
      if (dockId === undefined || dockId === null) {
        throw new Error("Missing the required parameter 'dockId' when calling inventoryperdock");
      }

      let pathParams = {
        'skuId': skuId,
        'dockId': dockId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Inventoryperdock200ResponseInner];
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/items/{skuId}/docks/{dockId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inventoryperdockandwarehouse operation.
     * @callback module:api/InventoryApi~inventoryperdockandwarehouseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Inventoryperdock200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List inventory per dock and warehouse
     * Lists information of inventory per dock and warehouse.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} skuId 
     * @param {String} dockId 
     * @param {String} warehouseId 
     * @param {module:api/InventoryApi~inventoryperdockandwarehouseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Inventoryperdock200ResponseInner>}
     */
    inventoryperdockandwarehouse(contentType, accept, skuId, dockId, warehouseId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling inventoryperdockandwarehouse");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling inventoryperdockandwarehouse");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling inventoryperdockandwarehouse");
      }
      // verify the required parameter 'dockId' is set
      if (dockId === undefined || dockId === null) {
        throw new Error("Missing the required parameter 'dockId' when calling inventoryperdockandwarehouse");
      }
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling inventoryperdockandwarehouse");
      }

      let pathParams = {
        'skuId': skuId,
        'dockId': dockId,
        'warehouseId': warehouseId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Inventoryperdock200ResponseInner];
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/items/{skuId}/docks/{dockId}/warehouses/{warehouseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inventoryperwarehouse operation.
     * @callback module:api/InventoryApi~inventoryperwarehouseCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Inventoryperdock200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List inventory per warehouse
     * Lists inventory information per warehouse on your store.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} skuId 
     * @param {String} warehouseId 
     * @param {module:api/InventoryApi~inventoryperwarehouseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Inventoryperdock200ResponseInner>}
     */
    inventoryperwarehouse(contentType, accept, skuId, warehouseId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling inventoryperwarehouse");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling inventoryperwarehouse");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling inventoryperwarehouse");
      }
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling inventoryperwarehouse");
      }

      let pathParams = {
        'skuId': skuId,
        'warehouseId': warehouseId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Inventoryperdock200ResponseInner];
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveSupplyLot operation.
     * @callback module:api/InventoryApi~saveSupplyLotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save supply lot
     * Creates a new Supply Lot. A Supply Lot lets the store sell products that are not currently available in stock but whose arrival is already scheduled.  Check out our [documentation](https://help.vtex.com/en/tutorial/setting-up-future-inventory--UMSGjooqRfkRbeoh94kS4) about this feature.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} contentType Type of the content being sent
     * @param {String} skuId ID of the SKU whose availability is being scheduled.
     * @param {String} warehouseId ID of the warehouse where the SKU will arrive.
     * @param {String} supplyLotId ID of the Supply Lot in which the SKU's scheduling should be considered.
     * @param {module:model/SaveSupplyLot} saveSupplyLot 
     * @param {module:api/InventoryApi~saveSupplyLotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    saveSupplyLot(accept, contentType, skuId, warehouseId, supplyLotId, saveSupplyLot, callback) {
      let postBody = saveSupplyLot;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling saveSupplyLot");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling saveSupplyLot");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling saveSupplyLot");
      }
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling saveSupplyLot");
      }
      // verify the required parameter 'supplyLotId' is set
      if (supplyLotId === undefined || supplyLotId === null) {
        throw new Error("Missing the required parameter 'supplyLotId' when calling saveSupplyLot");
      }
      // verify the required parameter 'saveSupplyLot' is set
      if (saveSupplyLot === undefined || saveSupplyLot === null) {
        throw new Error("Missing the required parameter 'saveSupplyLot' when calling saveSupplyLot");
      }

      let pathParams = {
        'skuId': skuId,
        'warehouseId': warehouseId,
        'supplyLotId': supplyLotId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}/supplyLots/{supplyLotId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferSupplyLot operation.
     * @callback module:api/InventoryApi~transferSupplyLotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer supply lot
     * Transfers an SKU from a Supply Lot to the currently available inventory.  Check out how this transfer works in further detail by reading our [documentation](https://help.vtex.com/pt/tutorial/configurar-estoque-futuro--UMSGjooqRfkRbeoh94kS4) about this feature.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} contentType Type of the content being sent
     * @param {String} skuId ID of the SKU.
     * @param {String} warehouseId ID of the warehouse where the SKU is located.
     * @param {String} supplyLotId ID of the Supply Lot in which the SKU is currently located and from where it will be transfered.
     * @param {module:api/InventoryApi~transferSupplyLotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    transferSupplyLot(accept, contentType, skuId, warehouseId, supplyLotId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling transferSupplyLot");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling transferSupplyLot");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling transferSupplyLot");
      }
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling transferSupplyLot");
      }
      // verify the required parameter 'supplyLotId' is set
      if (supplyLotId === undefined || supplyLotId === null) {
        throw new Error("Missing the required parameter 'supplyLotId' when calling transferSupplyLot");
      }

      let pathParams = {
        'skuId': skuId,
        'warehouseId': warehouseId,
        'supplyLotId': supplyLotId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/items/{skuId}/warehouses/{warehouseId}/supplyLots/{supplyLotId}/transfer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInventoryBySkuandWarehouse operation.
     * @callback module:api/InventoryApi~updateInventoryBySkuandWarehouseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update inventory by SKU and warehouse
     * Updates inventory for a given SKU and warehouse.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {String} skuId 
     * @param {String} warehouseId 
     * @param {module:model/UpdateInventoryBySkuandWarehouseRequest1} updateInventoryBySkuandWarehouseRequest1 
     * @param {module:api/InventoryApi~updateInventoryBySkuandWarehouseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateInventoryBySkuandWarehouse(accept, contentType, skuId, warehouseId, updateInventoryBySkuandWarehouseRequest1, callback) {
      let postBody = updateInventoryBySkuandWarehouseRequest1;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updateInventoryBySkuandWarehouse");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateInventoryBySkuandWarehouse");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling updateInventoryBySkuandWarehouse");
      }
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling updateInventoryBySkuandWarehouse");
      }
      // verify the required parameter 'updateInventoryBySkuandWarehouseRequest1' is set
      if (updateInventoryBySkuandWarehouseRequest1 === undefined || updateInventoryBySkuandWarehouseRequest1 === null) {
        throw new Error("Missing the required parameter 'updateInventoryBySkuandWarehouseRequest1' when calling updateInventoryBySkuandWarehouse");
      }

      let pathParams = {
        'skuId': skuId,
        'warehouseId': warehouseId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/skus/{skuId}/warehouses/{warehouseId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
