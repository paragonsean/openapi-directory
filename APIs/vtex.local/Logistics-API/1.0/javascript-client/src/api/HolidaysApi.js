/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUpdateHolidayRequest from '../model/CreateUpdateHolidayRequest';

/**
* Holidays service.
* @module api/HolidaysApi
* @version 1.0
*/
export default class HolidaysApi {

    /**
    * Constructs a new HolidaysApi. 
    * @alias module:api/HolidaysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the allHolidays operation.
     * @callback module:api/HolidaysApi~allHolidaysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all holidays
     * Lists information of all holidays.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:api/HolidaysApi~allHolidaysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    allHolidays(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling allHolidays");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling allHolidays");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/holidays', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUpdateHoliday operation.
     * @callback module:api/HolidaysApi~createUpdateHolidayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create/update holiday
     * Creates or updates holidays through holiday ID.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} contentType Type of the content being sent
     * @param {String} holidayId 
     * @param {module:model/CreateUpdateHolidayRequest} createUpdateHolidayRequest 
     * @param {module:api/HolidaysApi~createUpdateHolidayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createUpdateHoliday(accept, contentType, holidayId, createUpdateHolidayRequest, callback) {
      let postBody = createUpdateHolidayRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createUpdateHoliday");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createUpdateHoliday");
      }
      // verify the required parameter 'holidayId' is set
      if (holidayId === undefined || holidayId === null) {
        throw new Error("Missing the required parameter 'holidayId' when calling createUpdateHoliday");
      }
      // verify the required parameter 'createUpdateHolidayRequest' is set
      if (createUpdateHolidayRequest === undefined || createUpdateHolidayRequest === null) {
        throw new Error("Missing the required parameter 'createUpdateHolidayRequest' when calling createUpdateHoliday");
      }

      let pathParams = {
        'holidayId': holidayId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/holidays/{holidayId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the holiday operation.
     * @callback module:api/HolidaysApi~holidayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete holiday
     * Deletes given holidays set up in your store.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} holidayId 
     * @param {module:api/HolidaysApi~holidayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    holiday(contentType, accept, holidayId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling holiday");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling holiday");
      }
      // verify the required parameter 'holidayId' is set
      if (holidayId === undefined || holidayId === null) {
        throw new Error("Missing the required parameter 'holidayId' when calling holiday");
      }

      let pathParams = {
        'holidayId': holidayId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/holidays/{holidayId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the holidayById operation.
     * @callback module:api/HolidaysApi~holidayByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List holiday by ID
     * Lists holiday's information by holiday ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} holidayId 
     * @param {module:api/HolidaysApi~holidayByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    holidayById(contentType, accept, holidayId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling holidayById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling holidayById");
      }
      // verify the required parameter 'holidayId' is set
      if (holidayId === undefined || holidayId === null) {
        throw new Error("Missing the required parameter 'holidayId' when calling holidayById");
      }

      let pathParams = {
        'holidayId': holidayId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/holidays/{holidayId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
