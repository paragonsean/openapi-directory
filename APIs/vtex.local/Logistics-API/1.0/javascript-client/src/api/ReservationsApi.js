/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateReservation200Response from '../model/CreateReservation200Response';
import CreateReservationRequest1 from '../model/CreateReservationRequest1';
import ReservationById200Response from '../model/ReservationById200Response';

/**
* Reservations service.
* @module api/ReservationsApi
* @version 1.0
*/
export default class ReservationsApi {

    /**
    * Constructs a new ReservationsApi. 
    * @alias module:api/ReservationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acknowledgmentReservation operation.
     * @callback module:api/ReservationsApi~acknowledgmentReservationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowledgment reservation
     * Acknowledges reservations made by reservation ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} reservationId 
     * @param {module:api/ReservationsApi~acknowledgmentReservationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    acknowledgmentReservation(contentType, accept, reservationId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling acknowledgmentReservation");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling acknowledgmentReservation");
      }
      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling acknowledgmentReservation");
      }

      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/reservations/{reservationId}/acknowledge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelReservation operation.
     * @callback module:api/ReservationsApi~cancelReservationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel reservation
     * Cancels reservation by reservation ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} reservationId 
     * @param {module:api/ReservationsApi~cancelReservationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelReservation(contentType, accept, reservationId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling cancelReservation");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling cancelReservation");
      }
      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling cancelReservation");
      }

      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/reservations/{reservationId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmReservation operation.
     * @callback module:api/ReservationsApi~confirmReservationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm reservation
     * Confirms reservation by reservation ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} reservationId 
     * @param {module:api/ReservationsApi~confirmReservationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    confirmReservation(contentType, accept, reservationId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling confirmReservation");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling confirmReservation");
      }
      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling confirmReservation");
      }

      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/reservations/{reservationId}/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReservation operation.
     * @callback module:api/ReservationsApi~createReservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateReservation200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create reservation
     * Creates [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92).
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {module:model/CreateReservationRequest1} createReservationRequest1 
     * @param {module:api/ReservationsApi~createReservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateReservation200Response}
     */
    createReservation(accept, contentType, createReservationRequest1, callback) {
      let postBody = createReservationRequest1;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createReservation");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createReservation");
      }
      // verify the required parameter 'createReservationRequest1' is set
      if (createReservationRequest1 === undefined || createReservationRequest1 === null) {
        throw new Error("Missing the required parameter 'createReservationRequest1' when calling createReservation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = CreateReservation200Response;
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/reservations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reservationById operation.
     * @callback module:api/ReservationsApi~reservationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReservationById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reservation by ID
     * Lists reservation's information by ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} reservationId 
     * @param {module:api/ReservationsApi~reservationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReservationById200Response}
     */
    reservationById(contentType, accept, reservationId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling reservationById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling reservationById");
      }
      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling reservationById");
      }

      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = ReservationById200Response;
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/reservations/{reservationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reservationbyWarehouseandSku operation.
     * @callback module:api/ReservationsApi~reservationbyWarehouseandSkuCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List reservation by warehouse and SKU
     * Lists reservations in your store, by searching through warehouse and SKU.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} warehouseId 
     * @param {String} skuId 
     * @param {module:api/ReservationsApi~reservationbyWarehouseandSkuCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reservationbyWarehouseandSku(contentType, accept, warehouseId, skuId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling reservationbyWarehouseandSku");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling reservationbyWarehouseandSku");
      }
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling reservationbyWarehouseandSku");
      }
      // verify the required parameter 'skuId' is set
      if (skuId === undefined || skuId === null) {
        throw new Error("Missing the required parameter 'skuId' when calling reservationbyWarehouseandSku");
      }

      let pathParams = {
        'warehouseId': warehouseId,
        'skuId': skuId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/inventory/reservations/{warehouseId}/{skuId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
