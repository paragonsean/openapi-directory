/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUpdatePolygonRequest from '../model/CreateUpdatePolygonRequest';

/**
* Polygons service.
* @module api/PolygonsApi
* @version 1.0
*/
export default class PolygonsApi {

    /**
    * Constructs a new PolygonsApi. 
    * @alias module:api/PolygonsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUpdatePolygon operation.
     * @callback module:api/PolygonsApi~createUpdatePolygonCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create/update polygon
     * Creates or updates your store's polygons by geoshape coordinates and polygon name.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:model/CreateUpdatePolygonRequest} createUpdatePolygonRequest 
     * @param {module:api/PolygonsApi~createUpdatePolygonCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createUpdatePolygon(contentType, accept, createUpdatePolygonRequest, callback) {
      let postBody = createUpdatePolygonRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createUpdatePolygon");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createUpdatePolygon");
      }
      // verify the required parameter 'createUpdatePolygonRequest' is set
      if (createUpdatePolygonRequest === undefined || createUpdatePolygonRequest === null) {
        throw new Error("Missing the required parameter 'createUpdatePolygonRequest' when calling createUpdatePolygon");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/geoshape', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePolygon operation.
     * @callback module:api/PolygonsApi~deletePolygonCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete polygon
     * Deletes polygon set up in your store, by polygon name.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} polygonName 
     * @param {module:api/PolygonsApi~deletePolygonCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePolygon(contentType, accept, polygonName, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deletePolygon");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deletePolygon");
      }
      // verify the required parameter 'polygonName' is set
      if (polygonName === undefined || polygonName === null) {
        throw new Error("Missing the required parameter 'polygonName' when calling deletePolygon");
      }

      let pathParams = {
        'polygonName': polygonName
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/geoshape/{polygonName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pagedPolygons operation.
     * @callback module:api/PolygonsApi~pagedPolygonsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List paged polygons
     * Lists stored polygons.
     * @param {String} page 
     * @param {String} perPage 
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:api/PolygonsApi~pagedPolygonsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pagedPolygons(page, perPage, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling pagedPolygons");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling pagedPolygons");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling pagedPolygons");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling pagedPolygons");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': page,
        'perPage': perPage
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/geoshape', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the polygonbyId operation.
     * @callback module:api/PolygonsApi~polygonbyIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List polygon by ID
     * Lists your store's polygons by searching through polygon name
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} polygonName 
     * @param {module:api/PolygonsApi~polygonbyIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    polygonbyId(contentType, accept, polygonName, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling polygonbyId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling polygonbyId");
      }
      // verify the required parameter 'polygonName' is set
      if (polygonName === undefined || polygonName === null) {
        throw new Error("Missing the required parameter 'polygonName' when calling polygonbyId");
      }

      let pathParams = {
        'polygonName': polygonName
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/geoshape/{polygonName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
