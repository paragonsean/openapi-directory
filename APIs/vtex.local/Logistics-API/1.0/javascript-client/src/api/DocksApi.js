/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AllDocks200ResponseInner from '../model/AllDocks200ResponseInner';
import CreateUpdateDockRequest from '../model/CreateUpdateDockRequest';
import DockById200Response from '../model/DockById200Response';

/**
* Docks service.
* @module api/DocksApi
* @version 1.0
*/
export default class DocksApi {

    /**
    * Constructs a new DocksApi. 
    * @alias module:api/DocksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateDock operation.
     * @callback module:api/DocksApi~activateDockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate dock
     * Activates dock through dock ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} dockId 
     * @param {module:api/DocksApi~activateDockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activateDock(contentType, accept, dockId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling activateDock");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling activateDock");
      }
      // verify the required parameter 'dockId' is set
      if (dockId === undefined || dockId === null) {
        throw new Error("Missing the required parameter 'dockId' when calling activateDock");
      }

      let pathParams = {
        'dockId': dockId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/docks/{dockId}/activation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allDocks operation.
     * @callback module:api/DocksApi~allDocksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AllDocks200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all  docks
     * Informs a list of all docks.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:api/DocksApi~allDocksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AllDocks200ResponseInner>}
     */
    allDocks(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling allDocks");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling allDocks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [AllDocks200ResponseInner];
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/docks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUpdateDock operation.
     * @callback module:api/DocksApi~createUpdateDockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create/update dock
     * Creates or updates docks to be used in your logistic operation.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:model/CreateUpdateDockRequest} createUpdateDockRequest 
     * @param {module:api/DocksApi~createUpdateDockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createUpdateDock(contentType, accept, createUpdateDockRequest, callback) {
      let postBody = createUpdateDockRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createUpdateDock");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createUpdateDock");
      }
      // verify the required parameter 'createUpdateDockRequest' is set
      if (createUpdateDockRequest === undefined || createUpdateDockRequest === null) {
        throw new Error("Missing the required parameter 'createUpdateDockRequest' when calling createUpdateDock");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/docks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateDock operation.
     * @callback module:api/DocksApi~deactivateDockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate dock
     * Deactivate dock by dock ID
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} dockId 
     * @param {module:api/DocksApi~deactivateDockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deactivateDock(contentType, accept, dockId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deactivateDock");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deactivateDock");
      }
      // verify the required parameter 'dockId' is set
      if (dockId === undefined || dockId === null) {
        throw new Error("Missing the required parameter 'dockId' when calling deactivateDock");
      }

      let pathParams = {
        'dockId': dockId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/docks/{dockId}/deactivation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dock operation.
     * @callback module:api/DocksApi~dockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete dock
     * Deletes dock by dock ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} dockId 
     * @param {module:api/DocksApi~dockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dock(contentType, accept, dockId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling dock");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling dock");
      }
      // verify the required parameter 'dockId' is set
      if (dockId === undefined || dockId === null) {
        throw new Error("Missing the required parameter 'dockId' when calling dock");
      }

      let pathParams = {
        'dockId': dockId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/docks/{dockId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dockById operation.
     * @callback module:api/DocksApi~dockByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DockById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List dock by ID
     * Informs a given dock's information, searching by dock ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} dockId 
     * @param {module:api/DocksApi~dockByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DockById200Response}
     */
    dockById(contentType, accept, dockId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling dockById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling dockById");
      }
      // verify the required parameter 'dockId' is set
      if (dockId === undefined || dockId === null) {
        throw new Error("Missing the required parameter 'dockId' when calling dockById");
      }

      let pathParams = {
        'dockId': dockId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = DockById200Response;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/docks/{dockId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
