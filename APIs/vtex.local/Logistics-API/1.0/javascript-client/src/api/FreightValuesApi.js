/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUpdateFreightValuesRequest from '../model/CreateUpdateFreightValuesRequest';
import FreightValues200ResponseInner from '../model/FreightValues200ResponseInner';

/**
* FreightValues service.
* @module api/FreightValuesApi
* @version 1.0
*/
export default class FreightValuesApi {

    /**
    * Constructs a new FreightValuesApi. 
    * @alias module:api/FreightValuesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUpdateFreightValues operation.
     * @callback module:api/FreightValuesApi~createUpdateFreightValuesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create/update freight values
     * Creates or updates the freight values of your store's carriers. Learn more in [Shipping rate template](https://help.vtex.com/en/tutorial/planilha-de-frete--tutorials_127#).
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} carrierId 
     * @param {Array.<module:model/CreateUpdateFreightValuesRequest>} createUpdateFreightValuesRequest 
     * @param {module:api/FreightValuesApi~createUpdateFreightValuesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createUpdateFreightValues(contentType, accept, carrierId, createUpdateFreightValuesRequest, callback) {
      let postBody = createUpdateFreightValuesRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createUpdateFreightValues");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createUpdateFreightValues");
      }
      // verify the required parameter 'carrierId' is set
      if (carrierId === undefined || carrierId === null) {
        throw new Error("Missing the required parameter 'carrierId' when calling createUpdateFreightValues");
      }
      // verify the required parameter 'createUpdateFreightValuesRequest' is set
      if (createUpdateFreightValuesRequest === undefined || createUpdateFreightValuesRequest === null) {
        throw new Error("Missing the required parameter 'createUpdateFreightValuesRequest' when calling createUpdateFreightValues");
      }

      let pathParams = {
        'carrierId': carrierId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/freights/{carrierId}/values/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the freightValues operation.
     * @callback module:api/FreightValuesApi~freightValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FreightValues200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List freight values
     * Lists freight values apointed to your store's carriers, searching by carrier ID and postal code (`cep`).
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} carrierId Carrier ID
     * @param {String} cep Postal code.
     * @param {module:api/FreightValuesApi~freightValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FreightValues200ResponseInner>}
     */
    freightValues(contentType, accept, carrierId, cep, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling freightValues");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling freightValues");
      }
      // verify the required parameter 'carrierId' is set
      if (carrierId === undefined || carrierId === null) {
        throw new Error("Missing the required parameter 'carrierId' when calling freightValues");
      }
      // verify the required parameter 'cep' is set
      if (cep === undefined || cep === null) {
        throw new Error("Missing the required parameter 'cep' when calling freightValues");
      }

      let pathParams = {
        'carrierId': carrierId,
        'cep': cep
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [FreightValues200ResponseInner];
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/freights/{carrierId}/{cep}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
