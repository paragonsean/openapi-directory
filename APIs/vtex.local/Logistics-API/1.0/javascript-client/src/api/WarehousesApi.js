/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AllWarehouses200ResponseInner from '../model/AllWarehouses200ResponseInner';
import CreateUpdateWarehouseRequest from '../model/CreateUpdateWarehouseRequest';
import WarehouseById200Response from '../model/WarehouseById200Response';

/**
* Warehouses service.
* @module api/WarehousesApi
* @version 1.0
*/
export default class WarehousesApi {

    /**
    * Constructs a new WarehousesApi. 
    * @alias module:api/WarehousesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the activateWarehouse operation.
     * @callback module:api/WarehousesApi~activateWarehouseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate warehouse
     * Activates a given warehouse, by warehouse ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} warehouseId 
     * @param {module:api/WarehousesApi~activateWarehouseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activateWarehouse(contentType, accept, warehouseId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling activateWarehouse");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling activateWarehouse");
      }
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling activateWarehouse");
      }

      let pathParams = {
        'warehouseId': warehouseId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/warehouses/{warehouseId}/activation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allWarehouses operation.
     * @callback module:api/WarehousesApi~allWarehousesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AllWarehouses200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all warehouses
     * Lists information about all warehouses set up in your store.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:api/WarehousesApi~allWarehousesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AllWarehouses200ResponseInner>}
     */
    allWarehouses(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling allWarehouses");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling allWarehouses");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [AllWarehouses200ResponseInner];
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/warehouses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUpdateWarehouse operation.
     * @callback module:api/WarehousesApi~createUpdateWarehouseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create/update warehouse
     * Creates or updates your store's warehouses
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} contentType Type of the content being sent
     * @param {module:model/CreateUpdateWarehouseRequest} createUpdateWarehouseRequest 
     * @param {module:api/WarehousesApi~createUpdateWarehouseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createUpdateWarehouse(accept, contentType, createUpdateWarehouseRequest, callback) {
      let postBody = createUpdateWarehouseRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createUpdateWarehouse");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createUpdateWarehouse");
      }
      // verify the required parameter 'createUpdateWarehouseRequest' is set
      if (createUpdateWarehouseRequest === undefined || createUpdateWarehouseRequest === null) {
        throw new Error("Missing the required parameter 'createUpdateWarehouseRequest' when calling createUpdateWarehouse");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json; charset=utf-8'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/warehouses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateWarehouse operation.
     * @callback module:api/WarehousesApi~deactivateWarehouseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate warehouse
     * Deactivates a given warehouse by warehouse ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} warehouseId 
     * @param {module:api/WarehousesApi~deactivateWarehouseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deactivateWarehouse(contentType, accept, warehouseId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deactivateWarehouse");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deactivateWarehouse");
      }
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling deactivateWarehouse");
      }

      let pathParams = {
        'warehouseId': warehouseId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/warehouses/{warehouseId}/deactivation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeWarehouse operation.
     * @callback module:api/WarehousesApi~removeWarehouseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove warehouse
     * Deletes given warehouse by warehouse ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} warehouseId 
     * @param {module:api/WarehousesApi~removeWarehouseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeWarehouse(contentType, accept, warehouseId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling removeWarehouse");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling removeWarehouse");
      }
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling removeWarehouse");
      }

      let pathParams = {
        'warehouseId': warehouseId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/warehouses/{warehouseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the warehouseById operation.
     * @callback module:api/WarehousesApi~warehouseByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WarehouseById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List warehouse by ID
     * Lists the information of a given warehouse, searching by warehouse ID.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} warehouseId 
     * @param {module:api/WarehousesApi~warehouseByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WarehouseById200Response}
     */
    warehouseById(contentType, accept, warehouseId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling warehouseById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling warehouseById");
      }
      // verify the required parameter 'warehouseId' is set
      if (warehouseId === undefined || warehouseId === null) {
        throw new Error("Missing the required parameter 'warehouseId' when calling warehouseById");
      }

      let pathParams = {
        'warehouseId': warehouseId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = WarehouseById200Response;
      return this.apiClient.callApi(
        '/api/logistics/pvt/configuration/warehouses/{warehouseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
