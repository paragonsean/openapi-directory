/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogisticsApi);
  }
}(this, function(expect, LogisticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReservationById200ResponseSlaRequestInner', function() {
    it('should create an instance of ReservationById200ResponseSlaRequestInner', function() {
      // uncomment below and update the code to test ReservationById200ResponseSlaRequestInner
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be.a(LogisticsApi.ReservationById200ResponseSlaRequestInner);
    });

    it('should have the property deliveryWindows (base name: "deliveryWindows")', function() {
      // uncomment below and update the code to test the property deliveryWindows
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property dockId (base name: "dockId")', function() {
      // uncomment below and update the code to test the property dockId
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property dockTime (base name: "dockTime")', function() {
      // uncomment below and update the code to test the property dockTime
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property freightTableId (base name: "freightTableId")', function() {
      // uncomment below and update the code to test the property freightTableId
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property freightTableName (base name: "freightTableName")', function() {
      // uncomment below and update the code to test the property freightTableName
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property item (base name: "item")', function() {
      // uncomment below and update the code to test the property item
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property listPrice (base name: "listPrice")', function() {
      // uncomment below and update the code to test the property listPrice
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property pickupStoreInfo (base name: "pickupStoreInfo")', function() {
      // uncomment below and update the code to test the property pickupStoreInfo
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property promotionalPrice (base name: "promotionalPrice")', function() {
      // uncomment below and update the code to test the property promotionalPrice
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property slaType (base name: "slaType")', function() {
      // uncomment below and update the code to test the property slaType
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property slaTypeName (base name: "slaTypeName")', function() {
      // uncomment below and update the code to test the property slaTypeName
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property timeToDockPlusDockTime (base name: "timeToDockPlusDockTime")', function() {
      // uncomment below and update the code to test the property timeToDockPlusDockTime
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property totalTime (base name: "totalTime")', function() {
      // uncomment below and update the code to test the property totalTime
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property transitTime (base name: "transitTime")', function() {
      // uncomment below and update the code to test the property transitTime
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property wareHouseId (base name: "wareHouseId")', function() {
      // uncomment below and update the code to test the property wareHouseId
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

    it('should have the property wmsEndPoint (base name: "wmsEndPoint")', function() {
      // uncomment below and update the code to test the property wmsEndPoint
      //var instance = new LogisticsApi.ReservationById200ResponseSlaRequestInner();
      //expect(instance).to.be();
    });

  });

}));
