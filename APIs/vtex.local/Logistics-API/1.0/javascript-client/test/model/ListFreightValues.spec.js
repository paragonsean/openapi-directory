/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogisticsApi);
  }
}(this, function(expect, LogisticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogisticsApi.ListFreightValues();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ListFreightValues', function() {
    it('should create an instance of ListFreightValues', function() {
      // uncomment below and update the code to test ListFreightValues
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be.a(LogisticsApi.ListFreightValues);
    });

    it('should have the property absoluteMoneyCost (base name: "absoluteMoneyCost")', function() {
      // uncomment below and update the code to test the property absoluteMoneyCost
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be();
    });

    it('should have the property maxVolume (base name: "maxVolume")', function() {
      // uncomment below and update the code to test the property maxVolume
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be();
    });

    it('should have the property minimumValueInsurance (base name: "minimumValueInsurance")', function() {
      // uncomment below and update the code to test the property minimumValueInsurance
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be();
    });

    it('should have the property operationType (base name: "operationType")', function() {
      // uncomment below and update the code to test the property operationType
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be();
    });

    it('should have the property polygon (base name: "polygon")', function() {
      // uncomment below and update the code to test the property polygon
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be();
    });

    it('should have the property pricePercent (base name: "pricePercent")', function() {
      // uncomment below and update the code to test the property pricePercent
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be();
    });

    it('should have the property pricePercentByWeight (base name: "pricePercentByWeight")', function() {
      // uncomment below and update the code to test the property pricePercentByWeight
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be();
    });

    it('should have the property restrictedFreights (base name: "restrictedFreights")', function() {
      // uncomment below and update the code to test the property restrictedFreights
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be();
    });

    it('should have the property timeCost (base name: "timeCost")', function() {
      // uncomment below and update the code to test the property timeCost
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be();
    });

    it('should have the property weightEnd (base name: "weightEnd")', function() {
      // uncomment below and update the code to test the property weightEnd
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be();
    });

    it('should have the property weightStart (base name: "weightStart")', function() {
      // uncomment below and update the code to test the property weightStart
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be();
    });

    it('should have the property zipCodeEnd (base name: "zipCodeEnd")', function() {
      // uncomment below and update the code to test the property zipCodeEnd
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be();
    });

    it('should have the property zipCodeStart (base name: "zipCodeStart")', function() {
      // uncomment below and update the code to test the property zipCodeStart
      //var instance = new LogisticsApi.ListFreightValues();
      //expect(instance).to.be();
    });

  });

}));
