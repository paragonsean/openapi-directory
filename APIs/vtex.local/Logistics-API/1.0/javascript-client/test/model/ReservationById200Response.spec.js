/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogisticsApi);
  }
}(this, function(expect, LogisticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogisticsApi.ReservationById200Response();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReservationById200Response', function() {
    it('should create an instance of ReservationById200Response', function() {
      // uncomment below and update the code to test ReservationById200Response
      //var instance = new LogisticsApi.ReservationById200Response();
      //expect(instance).to.be.a(LogisticsApi.ReservationById200Response);
    });

    it('should have the property authorizedDateUtc (base name: "AuthorizedDateUtc")', function() {
      // uncomment below and update the code to test the property authorizedDateUtc
      //var instance = new LogisticsApi.ReservationById200Response();
      //expect(instance).to.be();
    });

    it('should have the property canceledDateUtc (base name: "CanceledDateUtc")', function() {
      // uncomment below and update the code to test the property canceledDateUtc
      //var instance = new LogisticsApi.ReservationById200Response();
      //expect(instance).to.be();
    });

    it('should have the property confirmedDateUtc (base name: "ConfirmedDateUtc")', function() {
      // uncomment below and update the code to test the property confirmedDateUtc
      //var instance = new LogisticsApi.ReservationById200Response();
      //expect(instance).to.be();
    });

    it('should have the property errors (base name: "Errors")', function() {
      // uncomment below and update the code to test the property errors
      //var instance = new LogisticsApi.ReservationById200Response();
      //expect(instance).to.be();
    });

    it('should have the property isSucess (base name: "IsSucess")', function() {
      // uncomment below and update the code to test the property isSucess
      //var instance = new LogisticsApi.ReservationById200Response();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdateDateUtc (base name: "LastUpdateDateUtc")', function() {
      // uncomment below and update the code to test the property lastUpdateDateUtc
      //var instance = new LogisticsApi.ReservationById200Response();
      //expect(instance).to.be();
    });

    it('should have the property lockId (base name: "LockId")', function() {
      // uncomment below and update the code to test the property lockId
      //var instance = new LogisticsApi.ReservationById200Response();
      //expect(instance).to.be();
    });

    it('should have the property maximumConfirmationDateUtc (base name: "MaximumConfirmationDateUtc")', function() {
      // uncomment below and update the code to test the property maximumConfirmationDateUtc
      //var instance = new LogisticsApi.ReservationById200Response();
      //expect(instance).to.be();
    });

    it('should have the property pickupPointItemOptions (base name: "PickupPointItemOptions")', function() {
      // uncomment below and update the code to test the property pickupPointItemOptions
      //var instance = new LogisticsApi.ReservationById200Response();
      //expect(instance).to.be();
    });

    it('should have the property reservationDateUtc (base name: "ReservationDateUtc")', function() {
      // uncomment below and update the code to test the property reservationDateUtc
      //var instance = new LogisticsApi.ReservationById200Response();
      //expect(instance).to.be();
    });

    it('should have the property salesChannel (base name: "SalesChannel")', function() {
      // uncomment below and update the code to test the property salesChannel
      //var instance = new LogisticsApi.ReservationById200Response();
      //expect(instance).to.be();
    });

    it('should have the property slaRequest (base name: "SlaRequest")', function() {
      // uncomment below and update the code to test the property slaRequest
      //var instance = new LogisticsApi.ReservationById200Response();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new LogisticsApi.ReservationById200Response();
      //expect(instance).to.be();
    });

  });

}));
