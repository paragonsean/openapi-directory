/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogisticsApi);
  }
}(this, function(expect, LogisticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogisticsApi.RequestBody1();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RequestBody1', function() {
    it('should create an instance of RequestBody1', function() {
      // uncomment below and update the code to test RequestBody1
      //var instance = new LogisticsApi.RequestBody1();
      //expect(instance).to.be.a(LogisticsApi.RequestBody1);
    });

    it('should have the property deliveryOnWeekends (base name: "deliveryOnWeekends")', function() {
      // uncomment below and update the code to test the property deliveryOnWeekends
      //var instance = new LogisticsApi.RequestBody1();
      //expect(instance).to.be();
    });

    it('should have the property deliveryScheduleSettings (base name: "deliveryScheduleSettings")', function() {
      // uncomment below and update the code to test the property deliveryScheduleSettings
      //var instance = new LogisticsApi.RequestBody1();
      //expect(instance).to.be();
    });

    it('should have the property isActive (base name: "isActive")', function() {
      // uncomment below and update the code to test the property isActive
      //var instance = new LogisticsApi.RequestBody1();
      //expect(instance).to.be();
    });

    it('should have the property maxDimension (base name: "maxDimension")', function() {
      // uncomment below and update the code to test the property maxDimension
      //var instance = new LogisticsApi.RequestBody1();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new LogisticsApi.RequestBody1();
      //expect(instance).to.be();
    });

    it('should have the property shippingMethod (base name: "shippingMethod")', function() {
      // uncomment below and update the code to test the property shippingMethod
      //var instance = new LogisticsApi.RequestBody1();
      //expect(instance).to.be();
    });

  });

}));
