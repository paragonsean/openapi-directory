/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogisticsApi);
  }
}(this, function(expect, LogisticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogisticsApi.AllDocks200ResponseInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AllDocks200ResponseInner', function() {
    it('should create an instance of AllDocks200ResponseInner', function() {
      // uncomment below and update the code to test AllDocks200ResponseInner
      //var instance = new LogisticsApi.AllDocks200ResponseInner();
      //expect(instance).to.be.a(LogisticsApi.AllDocks200ResponseInner);
    });

    it('should have the property dockTimeFake (base name: "dockTimeFake")', function() {
      // uncomment below and update the code to test the property dockTimeFake
      //var instance = new LogisticsApi.AllDocks200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property freightTableIds (base name: "freightTableIds")', function() {
      // uncomment below and update the code to test the property freightTableIds
      //var instance = new LogisticsApi.AllDocks200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new LogisticsApi.AllDocks200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new LogisticsApi.AllDocks200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property pickupStoreInfo (base name: "pickupStoreInfo")', function() {
      // uncomment below and update the code to test the property pickupStoreInfo
      //var instance = new LogisticsApi.AllDocks200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property priority (base name: "priority")', function() {
      // uncomment below and update the code to test the property priority
      //var instance = new LogisticsApi.AllDocks200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property salesChannel (base name: "salesChannel")', function() {
      // uncomment below and update the code to test the property salesChannel
      //var instance = new LogisticsApi.AllDocks200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property salesChannels (base name: "salesChannels")', function() {
      // uncomment below and update the code to test the property salesChannels
      //var instance = new LogisticsApi.AllDocks200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property timeFakeOverhead (base name: "timeFakeOverhead")', function() {
      // uncomment below and update the code to test the property timeFakeOverhead
      //var instance = new LogisticsApi.AllDocks200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property wmsEndPoint (base name: "wmsEndPoint")', function() {
      // uncomment below and update the code to test the property wmsEndPoint
      //var instance = new LogisticsApi.AllDocks200ResponseInner();
      //expect(instance).to.be();
    });

  });

}));
