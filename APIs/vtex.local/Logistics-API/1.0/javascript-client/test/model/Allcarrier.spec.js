/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogisticsApi);
  }
}(this, function(expect, LogisticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogisticsApi.Allcarrier();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Allcarrier', function() {
    it('should create an instance of Allcarrier', function() {
      // uncomment below and update the code to test Allcarrier
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be.a(LogisticsApi.Allcarrier);
    });

    it('should have the property carrierSchedule (base name: "carrierSchedule")', function() {
      // uncomment below and update the code to test the property carrierSchedule
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property dayOfWeekBlockeds (base name: "dayOfWeekBlockeds")', function() {
      // uncomment below and update the code to test the property dayOfWeekBlockeds
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property dayOfWeekForDelivery (base name: "dayOfWeekForDelivery")', function() {
      // uncomment below and update the code to test the property dayOfWeekForDelivery
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property deliveryOnWeekends (base name: "deliveryOnWeekends")', function() {
      // uncomment below and update the code to test the property deliveryOnWeekends
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property exclusiveToDeliveryPoints (base name: "exclusiveToDeliveryPoints")', function() {
      // uncomment below and update the code to test the property exclusiveToDeliveryPoints
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property factorCubicWeight (base name: "factorCubicWeight")', function() {
      // uncomment below and update the code to test the property factorCubicWeight
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property freightTableProcessStatus (base name: "freightTableProcessStatus")', function() {
      // uncomment below and update the code to test the property freightTableProcessStatus
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property freightTableValueError (base name: "freightTableValueError")', function() {
      // uncomment below and update the code to test the property freightTableValueError
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property freightValue (base name: "freightValue")', function() {
      // uncomment below and update the code to test the property freightValue
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property isPolygon (base name: "isPolygon")', function() {
      // uncomment below and update the code to test the property isPolygon
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property maxDimension (base name: "maxDimension")', function() {
      // uncomment below and update the code to test the property maxDimension
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property maxRangeDelivery (base name: "maxRangeDelivery")', function() {
      // uncomment below and update the code to test the property maxRangeDelivery
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property minimunCubicWeight (base name: "minimunCubicWeight")', function() {
      // uncomment below and update the code to test the property minimunCubicWeight
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property modals (base name: "modals")', function() {
      // uncomment below and update the code to test the property modals
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property numberOfItemsPerShipment (base name: "numberOfItemsPerShipment")', function() {
      // uncomment below and update the code to test the property numberOfItemsPerShipment
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property onlyItemsWithDefinedModal (base name: "onlyItemsWithDefinedModal")', function() {
      // uncomment below and update the code to test the property onlyItemsWithDefinedModal
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property scheduledDelivery (base name: "scheduledDelivery")', function() {
      // uncomment below and update the code to test the property scheduledDelivery
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

    it('should have the property slaType (base name: "slaType")', function() {
      // uncomment below and update the code to test the property slaType
      //var instance = new LogisticsApi.Allcarrier();
      //expect(instance).to.be();
    });

  });

}));
