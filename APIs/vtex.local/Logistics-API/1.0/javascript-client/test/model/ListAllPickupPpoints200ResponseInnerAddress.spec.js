/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogisticsApi);
  }
}(this, function(expect, LogisticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogisticsApi.ListAllPickupPpoints200ResponseInnerAddress();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ListAllPickupPpoints200ResponseInnerAddress', function() {
    it('should create an instance of ListAllPickupPpoints200ResponseInnerAddress', function() {
      // uncomment below and update the code to test ListAllPickupPpoints200ResponseInnerAddress
      //var instance = new LogisticsApi.ListAllPickupPpoints200ResponseInnerAddress();
      //expect(instance).to.be.a(LogisticsApi.ListAllPickupPpoints200ResponseInnerAddress);
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instance = new LogisticsApi.ListAllPickupPpoints200ResponseInnerAddress();
      //expect(instance).to.be();
    });

    it('should have the property complement (base name: "complement")', function() {
      // uncomment below and update the code to test the property complement
      //var instance = new LogisticsApi.ListAllPickupPpoints200ResponseInnerAddress();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new LogisticsApi.ListAllPickupPpoints200ResponseInnerAddress();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new LogisticsApi.ListAllPickupPpoints200ResponseInnerAddress();
      //expect(instance).to.be();
    });

    it('should have the property neighborhood (base name: "neighborhood")', function() {
      // uncomment below and update the code to test the property neighborhood
      //var instance = new LogisticsApi.ListAllPickupPpoints200ResponseInnerAddress();
      //expect(instance).to.be();
    });

    it('should have the property number (base name: "number")', function() {
      // uncomment below and update the code to test the property number
      //var instance = new LogisticsApi.ListAllPickupPpoints200ResponseInnerAddress();
      //expect(instance).to.be();
    });

    it('should have the property postalCode (base name: "postalCode")', function() {
      // uncomment below and update the code to test the property postalCode
      //var instance = new LogisticsApi.ListAllPickupPpoints200ResponseInnerAddress();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new LogisticsApi.ListAllPickupPpoints200ResponseInnerAddress();
      //expect(instance).to.be();
    });

    it('should have the property street (base name: "street")', function() {
      // uncomment below and update the code to test the property street
      //var instance = new LogisticsApi.ListAllPickupPpoints200ResponseInnerAddress();
      //expect(instance).to.be();
    });

  });

}));
