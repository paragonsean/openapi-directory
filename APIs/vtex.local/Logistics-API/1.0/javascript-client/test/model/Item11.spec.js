/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogisticsApi);
  }
}(this, function(expect, LogisticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogisticsApi.Item11();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Item11', function() {
    it('should create an instance of Item11', function() {
      // uncomment below and update the code to test Item11
      //var instance = new LogisticsApi.Item11();
      //expect(instance).to.be.a(LogisticsApi.Item11);
    });

    it('should have the property additionalHandlingTime (base name: "additionalHandlingTime")', function() {
      // uncomment below and update the code to test the property additionalHandlingTime
      //var instance = new LogisticsApi.Item11();
      //expect(instance).to.be();
    });

    it('should have the property dimension (base name: "dimension")', function() {
      // uncomment below and update the code to test the property dimension
      //var instance = new LogisticsApi.Item11();
      //expect(instance).to.be();
    });

    it('should have the property groupItemId (base name: "groupItemId")', function() {
      // uncomment below and update the code to test the property groupItemId
      //var instance = new LogisticsApi.Item11();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new LogisticsApi.Item11();
      //expect(instance).to.be();
    });

    it('should have the property kitItem (base name: "kitItem")', function() {
      // uncomment below and update the code to test the property kitItem
      //var instance = new LogisticsApi.Item11();
      //expect(instance).to.be();
    });

    it('should have the property modal (base name: "modal")', function() {
      // uncomment below and update the code to test the property modal
      //var instance = new LogisticsApi.Item11();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instance = new LogisticsApi.Item11();
      //expect(instance).to.be();
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instance = new LogisticsApi.Item11();
      //expect(instance).to.be();
    });

    it('should have the property unlimitedQuantity (base name: "unlimitedQuantity")', function() {
      // uncomment below and update the code to test the property unlimitedQuantity
      //var instance = new LogisticsApi.Item11();
      //expect(instance).to.be();
    });

  });

}));
