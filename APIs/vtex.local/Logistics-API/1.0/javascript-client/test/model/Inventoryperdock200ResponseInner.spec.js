/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogisticsApi);
  }
}(this, function(expect, LogisticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogisticsApi.Inventoryperdock200ResponseInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Inventoryperdock200ResponseInner', function() {
    it('should create an instance of Inventoryperdock200ResponseInner', function() {
      // uncomment below and update the code to test Inventoryperdock200ResponseInner
      //var instance = new LogisticsApi.Inventoryperdock200ResponseInner();
      //expect(instance).to.be.a(LogisticsApi.Inventoryperdock200ResponseInner);
    });

    it('should have the property availableQuantity (base name: "availableQuantity")', function() {
      // uncomment below and update the code to test the property availableQuantity
      //var instance = new LogisticsApi.Inventoryperdock200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property dateOfSupplyUtc (base name: "dateOfSupplyUtc")', function() {
      // uncomment below and update the code to test the property dateOfSupplyUtc
      //var instance = new LogisticsApi.Inventoryperdock200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property deliveryChannel (base name: "deliveryChannel")', function() {
      // uncomment below and update the code to test the property deliveryChannel
      //var instance = new LogisticsApi.Inventoryperdock200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property dockId (base name: "dockId")', function() {
      // uncomment below and update the code to test the property dockId
      //var instance = new LogisticsApi.Inventoryperdock200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property isUnlimited (base name: "isUnlimited")', function() {
      // uncomment below and update the code to test the property isUnlimited
      //var instance = new LogisticsApi.Inventoryperdock200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property keepSellingAfterExpiration (base name: "keepSellingAfterExpiration")', function() {
      // uncomment below and update the code to test the property keepSellingAfterExpiration
      //var instance = new LogisticsApi.Inventoryperdock200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property reservedQuantity (base name: "reservedQuantity")', function() {
      // uncomment below and update the code to test the property reservedQuantity
      //var instance = new LogisticsApi.Inventoryperdock200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property salesChannel (base name: "salesChannel")', function() {
      // uncomment below and update the code to test the property salesChannel
      //var instance = new LogisticsApi.Inventoryperdock200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property skuId (base name: "skuId")', function() {
      // uncomment below and update the code to test the property skuId
      //var instance = new LogisticsApi.Inventoryperdock200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property timeToRefill (base name: "timeToRefill")', function() {
      // uncomment below and update the code to test the property timeToRefill
      //var instance = new LogisticsApi.Inventoryperdock200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property totalQuantity (base name: "totalQuantity")', function() {
      // uncomment below and update the code to test the property totalQuantity
      //var instance = new LogisticsApi.Inventoryperdock200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property transfer (base name: "transfer")', function() {
      // uncomment below and update the code to test the property transfer
      //var instance = new LogisticsApi.Inventoryperdock200ResponseInner();
      //expect(instance).to.be();
    });

    it('should have the property warehouseId (base name: "warehouseId")', function() {
      // uncomment below and update the code to test the property warehouseId
      //var instance = new LogisticsApi.Inventoryperdock200ResponseInner();
      //expect(instance).to.be();
    });

  });

}));
