/**
 * Logistics API
 *     >Check the [Fulfillment onboarding guide](https://developers.vtex.com/docs/guides/fulfillment). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about fulfillment and is organized by focusing on the developer's journey.    Logistics or fulfillment is the module responsible for shipping calculation and inventory management.     The variable `{{environment}}` can be filled with `vtexcommercestable` or `vtexcommercebeta`, depending on the environment you want to test.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogisticsApi);
  }
}(this, function(expect, LogisticsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogisticsApi.InventoryApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InventoryApi', function() {
    describe('getSupplyLots', function() {
      it('should call getSupplyLots successfully', function(done) {
        //uncomment below and update the code to test getSupplyLots
        //instance.getSupplyLots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getinventorywithdispatchedreservations', function() {
      it('should call getinventorywithdispatchedreservations successfully', function(done) {
        //uncomment below and update the code to test getinventorywithdispatchedreservations
        //instance.getinventorywithdispatchedreservations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inventoryBySku', function() {
      it('should call inventoryBySku successfully', function(done) {
        //uncomment below and update the code to test inventoryBySku
        //instance.inventoryBySku(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inventoryperdock', function() {
      it('should call inventoryperdock successfully', function(done) {
        //uncomment below and update the code to test inventoryperdock
        //instance.inventoryperdock(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inventoryperdockandwarehouse', function() {
      it('should call inventoryperdockandwarehouse successfully', function(done) {
        //uncomment below and update the code to test inventoryperdockandwarehouse
        //instance.inventoryperdockandwarehouse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inventoryperwarehouse', function() {
      it('should call inventoryperwarehouse successfully', function(done) {
        //uncomment below and update the code to test inventoryperwarehouse
        //instance.inventoryperwarehouse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveSupplyLot', function() {
      it('should call saveSupplyLot successfully', function(done) {
        //uncomment below and update the code to test saveSupplyLot
        //instance.saveSupplyLot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('transferSupplyLot', function() {
      it('should call transferSupplyLot successfully', function(done) {
        //uncomment below and update the code to test transferSupplyLot
        //instance.transferSupplyLot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInventoryBySkuandWarehouse', function() {
      it('should call updateInventoryBySkuandWarehouse successfully', function(done) {
        //uncomment below and update the code to test updateInventoryBySkuandWarehouse
        //instance.updateInventoryBySkuandWarehouse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
