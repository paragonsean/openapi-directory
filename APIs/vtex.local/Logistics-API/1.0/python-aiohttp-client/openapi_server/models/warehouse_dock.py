# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WarehouseDock(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: str=None, cost_to_display: str=None, dock_id: str=None, name: str=None, time: str=None, translate_days: str=None):
        """WarehouseDock - a model defined in OpenAPI

        :param cost: The cost of this WarehouseDock.
        :param cost_to_display: The cost_to_display of this WarehouseDock.
        :param dock_id: The dock_id of this WarehouseDock.
        :param name: The name of this WarehouseDock.
        :param time: The time of this WarehouseDock.
        :param translate_days: The translate_days of this WarehouseDock.
        """
        self.openapi_types = {
            'cost': str,
            'cost_to_display': str,
            'dock_id': str,
            'name': str,
            'time': str,
            'translate_days': str
        }

        self.attribute_map = {
            'cost': 'cost',
            'cost_to_display': 'costToDisplay',
            'dock_id': 'dockId',
            'name': 'name',
            'time': 'time',
            'translate_days': 'translateDays'
        }

        self._cost = cost
        self._cost_to_display = cost_to_display
        self._dock_id = dock_id
        self._name = name
        self._time = time
        self._translate_days = translate_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WarehouseDock':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WarehouseDock of this WarehouseDock.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this WarehouseDock.


        :return: The cost of this WarehouseDock.
        :rtype: str
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this WarehouseDock.


        :param cost: The cost of this WarehouseDock.
        :type cost: str
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def cost_to_display(self):
        """Gets the cost_to_display of this WarehouseDock.


        :return: The cost_to_display of this WarehouseDock.
        :rtype: str
        """
        return self._cost_to_display

    @cost_to_display.setter
    def cost_to_display(self, cost_to_display):
        """Sets the cost_to_display of this WarehouseDock.


        :param cost_to_display: The cost_to_display of this WarehouseDock.
        :type cost_to_display: str
        """
        if cost_to_display is None:
            raise ValueError("Invalid value for `cost_to_display`, must not be `None`")

        self._cost_to_display = cost_to_display

    @property
    def dock_id(self):
        """Gets the dock_id of this WarehouseDock.


        :return: The dock_id of this WarehouseDock.
        :rtype: str
        """
        return self._dock_id

    @dock_id.setter
    def dock_id(self, dock_id):
        """Sets the dock_id of this WarehouseDock.


        :param dock_id: The dock_id of this WarehouseDock.
        :type dock_id: str
        """
        if dock_id is None:
            raise ValueError("Invalid value for `dock_id`, must not be `None`")

        self._dock_id = dock_id

    @property
    def name(self):
        """Gets the name of this WarehouseDock.


        :return: The name of this WarehouseDock.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WarehouseDock.


        :param name: The name of this WarehouseDock.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def time(self):
        """Gets the time of this WarehouseDock.


        :return: The time of this WarehouseDock.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this WarehouseDock.


        :param time: The time of this WarehouseDock.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time

    @property
    def translate_days(self):
        """Gets the translate_days of this WarehouseDock.


        :return: The translate_days of this WarehouseDock.
        :rtype: str
        """
        return self._translate_days

    @translate_days.setter
    def translate_days(self, translate_days):
        """Sets the translate_days of this WarehouseDock.


        :param translate_days: The translate_days of this WarehouseDock.
        :type translate_days: str
        """
        if translate_days is None:
            raise ValueError("Invalid value for `translate_days`, must not be `None`")

        self._translate_days = translate_days
