# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateInventoryBySkuandWarehouseRequest1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_utc_on_balance_system: str=None, quantity: int=None, time_to_refill__deprecated: str=None, unlimited_quantity: bool=None):
        """UpdateInventoryBySkuandWarehouseRequest1 - a model defined in OpenAPI

        :param date_utc_on_balance_system: The date_utc_on_balance_system of this UpdateInventoryBySkuandWarehouseRequest1.
        :param quantity: The quantity of this UpdateInventoryBySkuandWarehouseRequest1.
        :param time_to_refill__deprecated: The time_to_refill__deprecated of this UpdateInventoryBySkuandWarehouseRequest1.
        :param unlimited_quantity: The unlimited_quantity of this UpdateInventoryBySkuandWarehouseRequest1.
        """
        self.openapi_types = {
            'date_utc_on_balance_system': str,
            'quantity': int,
            'time_to_refill__deprecated': str,
            'unlimited_quantity': bool
        }

        self.attribute_map = {
            'date_utc_on_balance_system': 'dateUtcOnBalanceSystem',
            'quantity': 'quantity',
            'time_to_refill__deprecated': 'timeToRefill (deprecated)',
            'unlimited_quantity': 'unlimitedQuantity'
        }

        self._date_utc_on_balance_system = date_utc_on_balance_system
        self._quantity = quantity
        self._time_to_refill__deprecated = time_to_refill__deprecated
        self._unlimited_quantity = unlimited_quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateInventoryBySkuandWarehouseRequest1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateInventoryBySkuandWarehouseRequest_1 of this UpdateInventoryBySkuandWarehouseRequest1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_utc_on_balance_system(self):
        """Gets the date_utc_on_balance_system of this UpdateInventoryBySkuandWarehouseRequest1.

        Defines the corresponding moment to the informed warehouse. It is useful due to the liberation of handling order reservations.     When requested as `null`, this value will be the date/time of the request. Its format is `DateTimeOffset`, as in `yyyy-mm-dd-Thh:mm:ss`. For example: `2022-03-15T00:52:16`.

        :return: The date_utc_on_balance_system of this UpdateInventoryBySkuandWarehouseRequest1.
        :rtype: str
        """
        return self._date_utc_on_balance_system

    @date_utc_on_balance_system.setter
    def date_utc_on_balance_system(self, date_utc_on_balance_system):
        """Sets the date_utc_on_balance_system of this UpdateInventoryBySkuandWarehouseRequest1.

        Defines the corresponding moment to the informed warehouse. It is useful due to the liberation of handling order reservations.     When requested as `null`, this value will be the date/time of the request. Its format is `DateTimeOffset`, as in `yyyy-mm-dd-Thh:mm:ss`. For example: `2022-03-15T00:52:16`.

        :param date_utc_on_balance_system: The date_utc_on_balance_system of this UpdateInventoryBySkuandWarehouseRequest1.
        :type date_utc_on_balance_system: str
        """

        self._date_utc_on_balance_system = date_utc_on_balance_system

    @property
    def quantity(self):
        """Gets the quantity of this UpdateInventoryBySkuandWarehouseRequest1.


        :return: The quantity of this UpdateInventoryBySkuandWarehouseRequest1.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this UpdateInventoryBySkuandWarehouseRequest1.


        :param quantity: The quantity of this UpdateInventoryBySkuandWarehouseRequest1.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def time_to_refill__deprecated(self):
        """Gets the time_to_refill__deprecated of this UpdateInventoryBySkuandWarehouseRequest1.


        :return: The time_to_refill__deprecated of this UpdateInventoryBySkuandWarehouseRequest1.
        :rtype: str
        """
        return self._time_to_refill__deprecated

    @time_to_refill__deprecated.setter
    def time_to_refill__deprecated(self, time_to_refill__deprecated):
        """Sets the time_to_refill__deprecated of this UpdateInventoryBySkuandWarehouseRequest1.


        :param time_to_refill__deprecated: The time_to_refill__deprecated of this UpdateInventoryBySkuandWarehouseRequest1.
        :type time_to_refill__deprecated: str
        """
        if time_to_refill__deprecated is None:
            raise ValueError("Invalid value for `time_to_refill__deprecated`, must not be `None`")

        self._time_to_refill__deprecated = time_to_refill__deprecated

    @property
    def unlimited_quantity(self):
        """Gets the unlimited_quantity of this UpdateInventoryBySkuandWarehouseRequest1.


        :return: The unlimited_quantity of this UpdateInventoryBySkuandWarehouseRequest1.
        :rtype: bool
        """
        return self._unlimited_quantity

    @unlimited_quantity.setter
    def unlimited_quantity(self, unlimited_quantity):
        """Sets the unlimited_quantity of this UpdateInventoryBySkuandWarehouseRequest1.


        :param unlimited_quantity: The unlimited_quantity of this UpdateInventoryBySkuandWarehouseRequest1.
        :type unlimited_quantity: bool
        """
        if unlimited_quantity is None:
            raise ValueError("Invalid value for `unlimited_quantity`, must not be `None`")

        self._unlimited_quantity = unlimited_quantity
