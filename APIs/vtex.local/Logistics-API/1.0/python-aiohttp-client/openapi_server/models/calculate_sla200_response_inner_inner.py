# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delivery_window1 import DeliveryWindow1
from openapi_server.models.location11 import Location11
from openapi_server import util


class CalculateSLA200ResponseInnerInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aditional_time_blocked_days: str=None, availability_quantity: int=None, carrier_schedule: List[str]=None, coordinates: str=None, delivery_on_weekends: bool=None, delivery_windows: List[DeliveryWindow1]=None, dock_id: str=None, dock_time: str=None, freight_table_id: str=None, freight_table_name: str=None, item_id: str=None, list_price: float=None, location: Location11=None, pickup_store_info: str=None, quantity: int=None, restricted_freight: str=None, sales_channel: str=None, sla_type: str=None, sla_type_name: str=None, time_to_dock_plus_dock_time: str=None, total_time: str=None, transit_time: str=None, ware_house_id: str=None):
        """CalculateSLA200ResponseInnerInner - a model defined in OpenAPI

        :param aditional_time_blocked_days: The aditional_time_blocked_days of this CalculateSLA200ResponseInnerInner.
        :param availability_quantity: The availability_quantity of this CalculateSLA200ResponseInnerInner.
        :param carrier_schedule: The carrier_schedule of this CalculateSLA200ResponseInnerInner.
        :param coordinates: The coordinates of this CalculateSLA200ResponseInnerInner.
        :param delivery_on_weekends: The delivery_on_weekends of this CalculateSLA200ResponseInnerInner.
        :param delivery_windows: The delivery_windows of this CalculateSLA200ResponseInnerInner.
        :param dock_id: The dock_id of this CalculateSLA200ResponseInnerInner.
        :param dock_time: The dock_time of this CalculateSLA200ResponseInnerInner.
        :param freight_table_id: The freight_table_id of this CalculateSLA200ResponseInnerInner.
        :param freight_table_name: The freight_table_name of this CalculateSLA200ResponseInnerInner.
        :param item_id: The item_id of this CalculateSLA200ResponseInnerInner.
        :param list_price: The list_price of this CalculateSLA200ResponseInnerInner.
        :param location: The location of this CalculateSLA200ResponseInnerInner.
        :param pickup_store_info: The pickup_store_info of this CalculateSLA200ResponseInnerInner.
        :param quantity: The quantity of this CalculateSLA200ResponseInnerInner.
        :param restricted_freight: The restricted_freight of this CalculateSLA200ResponseInnerInner.
        :param sales_channel: The sales_channel of this CalculateSLA200ResponseInnerInner.
        :param sla_type: The sla_type of this CalculateSLA200ResponseInnerInner.
        :param sla_type_name: The sla_type_name of this CalculateSLA200ResponseInnerInner.
        :param time_to_dock_plus_dock_time: The time_to_dock_plus_dock_time of this CalculateSLA200ResponseInnerInner.
        :param total_time: The total_time of this CalculateSLA200ResponseInnerInner.
        :param transit_time: The transit_time of this CalculateSLA200ResponseInnerInner.
        :param ware_house_id: The ware_house_id of this CalculateSLA200ResponseInnerInner.
        """
        self.openapi_types = {
            'aditional_time_blocked_days': str,
            'availability_quantity': int,
            'carrier_schedule': List[str],
            'coordinates': str,
            'delivery_on_weekends': bool,
            'delivery_windows': List[DeliveryWindow1],
            'dock_id': str,
            'dock_time': str,
            'freight_table_id': str,
            'freight_table_name': str,
            'item_id': str,
            'list_price': float,
            'location': Location11,
            'pickup_store_info': str,
            'quantity': int,
            'restricted_freight': str,
            'sales_channel': str,
            'sla_type': str,
            'sla_type_name': str,
            'time_to_dock_plus_dock_time': str,
            'total_time': str,
            'transit_time': str,
            'ware_house_id': str
        }

        self.attribute_map = {
            'aditional_time_blocked_days': 'aditionalTimeBlockedDays',
            'availability_quantity': 'availabilityQuantity',
            'carrier_schedule': 'carrierSchedule',
            'coordinates': 'coordinates',
            'delivery_on_weekends': 'deliveryOnWeekends',
            'delivery_windows': 'deliveryWindows',
            'dock_id': 'dockId',
            'dock_time': 'dockTime',
            'freight_table_id': 'freightTableId',
            'freight_table_name': 'freightTableName',
            'item_id': 'itemId',
            'list_price': 'listPrice',
            'location': 'location',
            'pickup_store_info': 'pickupStoreInfo',
            'quantity': 'quantity',
            'restricted_freight': 'restrictedFreight',
            'sales_channel': 'salesChannel',
            'sla_type': 'slaType',
            'sla_type_name': 'slaTypeName',
            'time_to_dock_plus_dock_time': 'timeToDockPlusDockTime',
            'total_time': 'totalTime',
            'transit_time': 'transitTime',
            'ware_house_id': 'wareHouseId'
        }

        self._aditional_time_blocked_days = aditional_time_blocked_days
        self._availability_quantity = availability_quantity
        self._carrier_schedule = carrier_schedule
        self._coordinates = coordinates
        self._delivery_on_weekends = delivery_on_weekends
        self._delivery_windows = delivery_windows
        self._dock_id = dock_id
        self._dock_time = dock_time
        self._freight_table_id = freight_table_id
        self._freight_table_name = freight_table_name
        self._item_id = item_id
        self._list_price = list_price
        self._location = location
        self._pickup_store_info = pickup_store_info
        self._quantity = quantity
        self._restricted_freight = restricted_freight
        self._sales_channel = sales_channel
        self._sla_type = sla_type
        self._sla_type_name = sla_type_name
        self._time_to_dock_plus_dock_time = time_to_dock_plus_dock_time
        self._total_time = total_time
        self._transit_time = transit_time
        self._ware_house_id = ware_house_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateSLA200ResponseInnerInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculateSLA_200_response_inner_inner of this CalculateSLA200ResponseInnerInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aditional_time_blocked_days(self):
        """Gets the aditional_time_blocked_days of this CalculateSLA200ResponseInnerInner.


        :return: The aditional_time_blocked_days of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._aditional_time_blocked_days

    @aditional_time_blocked_days.setter
    def aditional_time_blocked_days(self, aditional_time_blocked_days):
        """Sets the aditional_time_blocked_days of this CalculateSLA200ResponseInnerInner.


        :param aditional_time_blocked_days: The aditional_time_blocked_days of this CalculateSLA200ResponseInnerInner.
        :type aditional_time_blocked_days: str
        """
        if aditional_time_blocked_days is None:
            raise ValueError("Invalid value for `aditional_time_blocked_days`, must not be `None`")

        self._aditional_time_blocked_days = aditional_time_blocked_days

    @property
    def availability_quantity(self):
        """Gets the availability_quantity of this CalculateSLA200ResponseInnerInner.


        :return: The availability_quantity of this CalculateSLA200ResponseInnerInner.
        :rtype: int
        """
        return self._availability_quantity

    @availability_quantity.setter
    def availability_quantity(self, availability_quantity):
        """Sets the availability_quantity of this CalculateSLA200ResponseInnerInner.


        :param availability_quantity: The availability_quantity of this CalculateSLA200ResponseInnerInner.
        :type availability_quantity: int
        """
        if availability_quantity is None:
            raise ValueError("Invalid value for `availability_quantity`, must not be `None`")

        self._availability_quantity = availability_quantity

    @property
    def carrier_schedule(self):
        """Gets the carrier_schedule of this CalculateSLA200ResponseInnerInner.

        

        :return: The carrier_schedule of this CalculateSLA200ResponseInnerInner.
        :rtype: List[str]
        """
        return self._carrier_schedule

    @carrier_schedule.setter
    def carrier_schedule(self, carrier_schedule):
        """Sets the carrier_schedule of this CalculateSLA200ResponseInnerInner.

        

        :param carrier_schedule: The carrier_schedule of this CalculateSLA200ResponseInnerInner.
        :type carrier_schedule: List[str]
        """
        if carrier_schedule is None:
            raise ValueError("Invalid value for `carrier_schedule`, must not be `None`")

        self._carrier_schedule = carrier_schedule

    @property
    def coordinates(self):
        """Gets the coordinates of this CalculateSLA200ResponseInnerInner.


        :return: The coordinates of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this CalculateSLA200ResponseInnerInner.


        :param coordinates: The coordinates of this CalculateSLA200ResponseInnerInner.
        :type coordinates: str
        """
        if coordinates is None:
            raise ValueError("Invalid value for `coordinates`, must not be `None`")

        self._coordinates = coordinates

    @property
    def delivery_on_weekends(self):
        """Gets the delivery_on_weekends of this CalculateSLA200ResponseInnerInner.


        :return: The delivery_on_weekends of this CalculateSLA200ResponseInnerInner.
        :rtype: bool
        """
        return self._delivery_on_weekends

    @delivery_on_weekends.setter
    def delivery_on_weekends(self, delivery_on_weekends):
        """Sets the delivery_on_weekends of this CalculateSLA200ResponseInnerInner.


        :param delivery_on_weekends: The delivery_on_weekends of this CalculateSLA200ResponseInnerInner.
        :type delivery_on_weekends: bool
        """
        if delivery_on_weekends is None:
            raise ValueError("Invalid value for `delivery_on_weekends`, must not be `None`")

        self._delivery_on_weekends = delivery_on_weekends

    @property
    def delivery_windows(self):
        """Gets the delivery_windows of this CalculateSLA200ResponseInnerInner.

        

        :return: The delivery_windows of this CalculateSLA200ResponseInnerInner.
        :rtype: List[DeliveryWindow1]
        """
        return self._delivery_windows

    @delivery_windows.setter
    def delivery_windows(self, delivery_windows):
        """Sets the delivery_windows of this CalculateSLA200ResponseInnerInner.

        

        :param delivery_windows: The delivery_windows of this CalculateSLA200ResponseInnerInner.
        :type delivery_windows: List[DeliveryWindow1]
        """
        if delivery_windows is None:
            raise ValueError("Invalid value for `delivery_windows`, must not be `None`")

        self._delivery_windows = delivery_windows

    @property
    def dock_id(self):
        """Gets the dock_id of this CalculateSLA200ResponseInnerInner.


        :return: The dock_id of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._dock_id

    @dock_id.setter
    def dock_id(self, dock_id):
        """Sets the dock_id of this CalculateSLA200ResponseInnerInner.


        :param dock_id: The dock_id of this CalculateSLA200ResponseInnerInner.
        :type dock_id: str
        """
        if dock_id is None:
            raise ValueError("Invalid value for `dock_id`, must not be `None`")

        self._dock_id = dock_id

    @property
    def dock_time(self):
        """Gets the dock_time of this CalculateSLA200ResponseInnerInner.


        :return: The dock_time of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._dock_time

    @dock_time.setter
    def dock_time(self, dock_time):
        """Sets the dock_time of this CalculateSLA200ResponseInnerInner.


        :param dock_time: The dock_time of this CalculateSLA200ResponseInnerInner.
        :type dock_time: str
        """
        if dock_time is None:
            raise ValueError("Invalid value for `dock_time`, must not be `None`")

        self._dock_time = dock_time

    @property
    def freight_table_id(self):
        """Gets the freight_table_id of this CalculateSLA200ResponseInnerInner.


        :return: The freight_table_id of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._freight_table_id

    @freight_table_id.setter
    def freight_table_id(self, freight_table_id):
        """Sets the freight_table_id of this CalculateSLA200ResponseInnerInner.


        :param freight_table_id: The freight_table_id of this CalculateSLA200ResponseInnerInner.
        :type freight_table_id: str
        """
        if freight_table_id is None:
            raise ValueError("Invalid value for `freight_table_id`, must not be `None`")

        self._freight_table_id = freight_table_id

    @property
    def freight_table_name(self):
        """Gets the freight_table_name of this CalculateSLA200ResponseInnerInner.


        :return: The freight_table_name of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._freight_table_name

    @freight_table_name.setter
    def freight_table_name(self, freight_table_name):
        """Sets the freight_table_name of this CalculateSLA200ResponseInnerInner.


        :param freight_table_name: The freight_table_name of this CalculateSLA200ResponseInnerInner.
        :type freight_table_name: str
        """
        if freight_table_name is None:
            raise ValueError("Invalid value for `freight_table_name`, must not be `None`")

        self._freight_table_name = freight_table_name

    @property
    def item_id(self):
        """Gets the item_id of this CalculateSLA200ResponseInnerInner.


        :return: The item_id of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this CalculateSLA200ResponseInnerInner.


        :param item_id: The item_id of this CalculateSLA200ResponseInnerInner.
        :type item_id: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id

    @property
    def list_price(self):
        """Gets the list_price of this CalculateSLA200ResponseInnerInner.


        :return: The list_price of this CalculateSLA200ResponseInnerInner.
        :rtype: float
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this CalculateSLA200ResponseInnerInner.


        :param list_price: The list_price of this CalculateSLA200ResponseInnerInner.
        :type list_price: float
        """
        if list_price is None:
            raise ValueError("Invalid value for `list_price`, must not be `None`")

        self._list_price = list_price

    @property
    def location(self):
        """Gets the location of this CalculateSLA200ResponseInnerInner.


        :return: The location of this CalculateSLA200ResponseInnerInner.
        :rtype: Location11
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CalculateSLA200ResponseInnerInner.


        :param location: The location of this CalculateSLA200ResponseInnerInner.
        :type location: Location11
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def pickup_store_info(self):
        """Gets the pickup_store_info of this CalculateSLA200ResponseInnerInner.


        :return: The pickup_store_info of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._pickup_store_info

    @pickup_store_info.setter
    def pickup_store_info(self, pickup_store_info):
        """Sets the pickup_store_info of this CalculateSLA200ResponseInnerInner.


        :param pickup_store_info: The pickup_store_info of this CalculateSLA200ResponseInnerInner.
        :type pickup_store_info: str
        """
        if pickup_store_info is None:
            raise ValueError("Invalid value for `pickup_store_info`, must not be `None`")

        self._pickup_store_info = pickup_store_info

    @property
    def quantity(self):
        """Gets the quantity of this CalculateSLA200ResponseInnerInner.


        :return: The quantity of this CalculateSLA200ResponseInnerInner.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CalculateSLA200ResponseInnerInner.


        :param quantity: The quantity of this CalculateSLA200ResponseInnerInner.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def restricted_freight(self):
        """Gets the restricted_freight of this CalculateSLA200ResponseInnerInner.


        :return: The restricted_freight of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._restricted_freight

    @restricted_freight.setter
    def restricted_freight(self, restricted_freight):
        """Sets the restricted_freight of this CalculateSLA200ResponseInnerInner.


        :param restricted_freight: The restricted_freight of this CalculateSLA200ResponseInnerInner.
        :type restricted_freight: str
        """
        if restricted_freight is None:
            raise ValueError("Invalid value for `restricted_freight`, must not be `None`")

        self._restricted_freight = restricted_freight

    @property
    def sales_channel(self):
        """Gets the sales_channel of this CalculateSLA200ResponseInnerInner.


        :return: The sales_channel of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this CalculateSLA200ResponseInnerInner.


        :param sales_channel: The sales_channel of this CalculateSLA200ResponseInnerInner.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel

    @property
    def sla_type(self):
        """Gets the sla_type of this CalculateSLA200ResponseInnerInner.


        :return: The sla_type of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._sla_type

    @sla_type.setter
    def sla_type(self, sla_type):
        """Sets the sla_type of this CalculateSLA200ResponseInnerInner.


        :param sla_type: The sla_type of this CalculateSLA200ResponseInnerInner.
        :type sla_type: str
        """
        if sla_type is None:
            raise ValueError("Invalid value for `sla_type`, must not be `None`")

        self._sla_type = sla_type

    @property
    def sla_type_name(self):
        """Gets the sla_type_name of this CalculateSLA200ResponseInnerInner.


        :return: The sla_type_name of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._sla_type_name

    @sla_type_name.setter
    def sla_type_name(self, sla_type_name):
        """Sets the sla_type_name of this CalculateSLA200ResponseInnerInner.


        :param sla_type_name: The sla_type_name of this CalculateSLA200ResponseInnerInner.
        :type sla_type_name: str
        """
        if sla_type_name is None:
            raise ValueError("Invalid value for `sla_type_name`, must not be `None`")

        self._sla_type_name = sla_type_name

    @property
    def time_to_dock_plus_dock_time(self):
        """Gets the time_to_dock_plus_dock_time of this CalculateSLA200ResponseInnerInner.


        :return: The time_to_dock_plus_dock_time of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._time_to_dock_plus_dock_time

    @time_to_dock_plus_dock_time.setter
    def time_to_dock_plus_dock_time(self, time_to_dock_plus_dock_time):
        """Sets the time_to_dock_plus_dock_time of this CalculateSLA200ResponseInnerInner.


        :param time_to_dock_plus_dock_time: The time_to_dock_plus_dock_time of this CalculateSLA200ResponseInnerInner.
        :type time_to_dock_plus_dock_time: str
        """
        if time_to_dock_plus_dock_time is None:
            raise ValueError("Invalid value for `time_to_dock_plus_dock_time`, must not be `None`")

        self._time_to_dock_plus_dock_time = time_to_dock_plus_dock_time

    @property
    def total_time(self):
        """Gets the total_time of this CalculateSLA200ResponseInnerInner.


        :return: The total_time of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """Sets the total_time of this CalculateSLA200ResponseInnerInner.


        :param total_time: The total_time of this CalculateSLA200ResponseInnerInner.
        :type total_time: str
        """
        if total_time is None:
            raise ValueError("Invalid value for `total_time`, must not be `None`")

        self._total_time = total_time

    @property
    def transit_time(self):
        """Gets the transit_time of this CalculateSLA200ResponseInnerInner.


        :return: The transit_time of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._transit_time

    @transit_time.setter
    def transit_time(self, transit_time):
        """Sets the transit_time of this CalculateSLA200ResponseInnerInner.


        :param transit_time: The transit_time of this CalculateSLA200ResponseInnerInner.
        :type transit_time: str
        """
        if transit_time is None:
            raise ValueError("Invalid value for `transit_time`, must not be `None`")

        self._transit_time = transit_time

    @property
    def ware_house_id(self):
        """Gets the ware_house_id of this CalculateSLA200ResponseInnerInner.


        :return: The ware_house_id of this CalculateSLA200ResponseInnerInner.
        :rtype: str
        """
        return self._ware_house_id

    @ware_house_id.setter
    def ware_house_id(self, ware_house_id):
        """Sets the ware_house_id of this CalculateSLA200ResponseInnerInner.


        :param ware_house_id: The ware_house_id of this CalculateSLA200ResponseInnerInner.
        :type ware_house_id: str
        """
        if ware_house_id is None:
            raise ValueError("Invalid value for `ware_house_id`, must not be `None`")

        self._ware_house_id = ware_house_id
