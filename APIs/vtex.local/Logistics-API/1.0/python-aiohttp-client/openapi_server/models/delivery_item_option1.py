# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item1 import Item1
from openapi_server.models.location1 import Location1
from openapi_server import util


class DeliveryItemOption1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aditional_time_blocked_days: str=None, delivery_windows: List[str]=None, dock_id: str=None, dock_time: str=None, item: Item1=None, list_price: float=None, location: Location1=None, promotional_price: float=None, sla_type: str=None, sla_type_name: str=None, time_to_dock_plus_dock_time: str=None, total_time: str=None, transit_time: str=None, ware_house_id: str=None):
        """DeliveryItemOption1 - a model defined in OpenAPI

        :param aditional_time_blocked_days: The aditional_time_blocked_days of this DeliveryItemOption1.
        :param delivery_windows: The delivery_windows of this DeliveryItemOption1.
        :param dock_id: The dock_id of this DeliveryItemOption1.
        :param dock_time: The dock_time of this DeliveryItemOption1.
        :param item: The item of this DeliveryItemOption1.
        :param list_price: The list_price of this DeliveryItemOption1.
        :param location: The location of this DeliveryItemOption1.
        :param promotional_price: The promotional_price of this DeliveryItemOption1.
        :param sla_type: The sla_type of this DeliveryItemOption1.
        :param sla_type_name: The sla_type_name of this DeliveryItemOption1.
        :param time_to_dock_plus_dock_time: The time_to_dock_plus_dock_time of this DeliveryItemOption1.
        :param total_time: The total_time of this DeliveryItemOption1.
        :param transit_time: The transit_time of this DeliveryItemOption1.
        :param ware_house_id: The ware_house_id of this DeliveryItemOption1.
        """
        self.openapi_types = {
            'aditional_time_blocked_days': str,
            'delivery_windows': List[str],
            'dock_id': str,
            'dock_time': str,
            'item': Item1,
            'list_price': float,
            'location': Location1,
            'promotional_price': float,
            'sla_type': str,
            'sla_type_name': str,
            'time_to_dock_plus_dock_time': str,
            'total_time': str,
            'transit_time': str,
            'ware_house_id': str
        }

        self.attribute_map = {
            'aditional_time_blocked_days': 'aditionalTimeBlockedDays',
            'delivery_windows': 'deliveryWindows',
            'dock_id': 'dockId',
            'dock_time': 'dockTime',
            'item': 'item',
            'list_price': 'listPrice',
            'location': 'location',
            'promotional_price': 'promotionalPrice',
            'sla_type': 'slaType',
            'sla_type_name': 'slaTypeName',
            'time_to_dock_plus_dock_time': 'timeToDockPlusDockTime',
            'total_time': 'totalTime',
            'transit_time': 'transitTime',
            'ware_house_id': 'wareHouseId'
        }

        self._aditional_time_blocked_days = aditional_time_blocked_days
        self._delivery_windows = delivery_windows
        self._dock_id = dock_id
        self._dock_time = dock_time
        self._item = item
        self._list_price = list_price
        self._location = location
        self._promotional_price = promotional_price
        self._sla_type = sla_type
        self._sla_type_name = sla_type_name
        self._time_to_dock_plus_dock_time = time_to_dock_plus_dock_time
        self._total_time = total_time
        self._transit_time = transit_time
        self._ware_house_id = ware_house_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryItemOption1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryItemOption_1 of this DeliveryItemOption1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aditional_time_blocked_days(self):
        """Gets the aditional_time_blocked_days of this DeliveryItemOption1.


        :return: The aditional_time_blocked_days of this DeliveryItemOption1.
        :rtype: str
        """
        return self._aditional_time_blocked_days

    @aditional_time_blocked_days.setter
    def aditional_time_blocked_days(self, aditional_time_blocked_days):
        """Sets the aditional_time_blocked_days of this DeliveryItemOption1.


        :param aditional_time_blocked_days: The aditional_time_blocked_days of this DeliveryItemOption1.
        :type aditional_time_blocked_days: str
        """
        if aditional_time_blocked_days is None:
            raise ValueError("Invalid value for `aditional_time_blocked_days`, must not be `None`")

        self._aditional_time_blocked_days = aditional_time_blocked_days

    @property
    def delivery_windows(self):
        """Gets the delivery_windows of this DeliveryItemOption1.

        

        :return: The delivery_windows of this DeliveryItemOption1.
        :rtype: List[str]
        """
        return self._delivery_windows

    @delivery_windows.setter
    def delivery_windows(self, delivery_windows):
        """Sets the delivery_windows of this DeliveryItemOption1.

        

        :param delivery_windows: The delivery_windows of this DeliveryItemOption1.
        :type delivery_windows: List[str]
        """
        if delivery_windows is None:
            raise ValueError("Invalid value for `delivery_windows`, must not be `None`")

        self._delivery_windows = delivery_windows

    @property
    def dock_id(self):
        """Gets the dock_id of this DeliveryItemOption1.


        :return: The dock_id of this DeliveryItemOption1.
        :rtype: str
        """
        return self._dock_id

    @dock_id.setter
    def dock_id(self, dock_id):
        """Sets the dock_id of this DeliveryItemOption1.


        :param dock_id: The dock_id of this DeliveryItemOption1.
        :type dock_id: str
        """
        if dock_id is None:
            raise ValueError("Invalid value for `dock_id`, must not be `None`")

        self._dock_id = dock_id

    @property
    def dock_time(self):
        """Gets the dock_time of this DeliveryItemOption1.


        :return: The dock_time of this DeliveryItemOption1.
        :rtype: str
        """
        return self._dock_time

    @dock_time.setter
    def dock_time(self, dock_time):
        """Sets the dock_time of this DeliveryItemOption1.


        :param dock_time: The dock_time of this DeliveryItemOption1.
        :type dock_time: str
        """
        if dock_time is None:
            raise ValueError("Invalid value for `dock_time`, must not be `None`")

        self._dock_time = dock_time

    @property
    def item(self):
        """Gets the item of this DeliveryItemOption1.


        :return: The item of this DeliveryItemOption1.
        :rtype: Item1
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this DeliveryItemOption1.


        :param item: The item of this DeliveryItemOption1.
        :type item: Item1
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")

        self._item = item

    @property
    def list_price(self):
        """Gets the list_price of this DeliveryItemOption1.


        :return: The list_price of this DeliveryItemOption1.
        :rtype: float
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this DeliveryItemOption1.


        :param list_price: The list_price of this DeliveryItemOption1.
        :type list_price: float
        """
        if list_price is None:
            raise ValueError("Invalid value for `list_price`, must not be `None`")

        self._list_price = list_price

    @property
    def location(self):
        """Gets the location of this DeliveryItemOption1.


        :return: The location of this DeliveryItemOption1.
        :rtype: Location1
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DeliveryItemOption1.


        :param location: The location of this DeliveryItemOption1.
        :type location: Location1
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def promotional_price(self):
        """Gets the promotional_price of this DeliveryItemOption1.


        :return: The promotional_price of this DeliveryItemOption1.
        :rtype: float
        """
        return self._promotional_price

    @promotional_price.setter
    def promotional_price(self, promotional_price):
        """Sets the promotional_price of this DeliveryItemOption1.


        :param promotional_price: The promotional_price of this DeliveryItemOption1.
        :type promotional_price: float
        """
        if promotional_price is None:
            raise ValueError("Invalid value for `promotional_price`, must not be `None`")

        self._promotional_price = promotional_price

    @property
    def sla_type(self):
        """Gets the sla_type of this DeliveryItemOption1.


        :return: The sla_type of this DeliveryItemOption1.
        :rtype: str
        """
        return self._sla_type

    @sla_type.setter
    def sla_type(self, sla_type):
        """Sets the sla_type of this DeliveryItemOption1.


        :param sla_type: The sla_type of this DeliveryItemOption1.
        :type sla_type: str
        """
        if sla_type is None:
            raise ValueError("Invalid value for `sla_type`, must not be `None`")

        self._sla_type = sla_type

    @property
    def sla_type_name(self):
        """Gets the sla_type_name of this DeliveryItemOption1.


        :return: The sla_type_name of this DeliveryItemOption1.
        :rtype: str
        """
        return self._sla_type_name

    @sla_type_name.setter
    def sla_type_name(self, sla_type_name):
        """Sets the sla_type_name of this DeliveryItemOption1.


        :param sla_type_name: The sla_type_name of this DeliveryItemOption1.
        :type sla_type_name: str
        """
        if sla_type_name is None:
            raise ValueError("Invalid value for `sla_type_name`, must not be `None`")

        self._sla_type_name = sla_type_name

    @property
    def time_to_dock_plus_dock_time(self):
        """Gets the time_to_dock_plus_dock_time of this DeliveryItemOption1.


        :return: The time_to_dock_plus_dock_time of this DeliveryItemOption1.
        :rtype: str
        """
        return self._time_to_dock_plus_dock_time

    @time_to_dock_plus_dock_time.setter
    def time_to_dock_plus_dock_time(self, time_to_dock_plus_dock_time):
        """Sets the time_to_dock_plus_dock_time of this DeliveryItemOption1.


        :param time_to_dock_plus_dock_time: The time_to_dock_plus_dock_time of this DeliveryItemOption1.
        :type time_to_dock_plus_dock_time: str
        """
        if time_to_dock_plus_dock_time is None:
            raise ValueError("Invalid value for `time_to_dock_plus_dock_time`, must not be `None`")

        self._time_to_dock_plus_dock_time = time_to_dock_plus_dock_time

    @property
    def total_time(self):
        """Gets the total_time of this DeliveryItemOption1.


        :return: The total_time of this DeliveryItemOption1.
        :rtype: str
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """Sets the total_time of this DeliveryItemOption1.


        :param total_time: The total_time of this DeliveryItemOption1.
        :type total_time: str
        """
        if total_time is None:
            raise ValueError("Invalid value for `total_time`, must not be `None`")

        self._total_time = total_time

    @property
    def transit_time(self):
        """Gets the transit_time of this DeliveryItemOption1.


        :return: The transit_time of this DeliveryItemOption1.
        :rtype: str
        """
        return self._transit_time

    @transit_time.setter
    def transit_time(self, transit_time):
        """Sets the transit_time of this DeliveryItemOption1.


        :param transit_time: The transit_time of this DeliveryItemOption1.
        :type transit_time: str
        """
        if transit_time is None:
            raise ValueError("Invalid value for `transit_time`, must not be `None`")

        self._transit_time = transit_time

    @property
    def ware_house_id(self):
        """Gets the ware_house_id of this DeliveryItemOption1.


        :return: The ware_house_id of this DeliveryItemOption1.
        :rtype: str
        """
        return self._ware_house_id

    @ware_house_id.setter
    def ware_house_id(self, ware_house_id):
        """Sets the ware_house_id of this DeliveryItemOption1.


        :param ware_house_id: The ware_house_id of this DeliveryItemOption1.
        :type ware_house_id: str
        """
        if ware_house_id is None:
            raise ValueError("Invalid value for `ware_house_id`, must not be `None`")

        self._ware_house_id = ware_house_id
