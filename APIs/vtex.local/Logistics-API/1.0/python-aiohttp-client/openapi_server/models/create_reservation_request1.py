# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delivery_item_option1 import DeliveryItemOption1
from openapi_server import util


class CreateReservationRequest1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autorization_expiration_ttl: str=None, delivery_item_options: List[DeliveryItemOption1]=None, lock_id: str=None, sales_channel: str=None):
        """CreateReservationRequest1 - a model defined in OpenAPI

        :param autorization_expiration_ttl: The autorization_expiration_ttl of this CreateReservationRequest1.
        :param delivery_item_options: The delivery_item_options of this CreateReservationRequest1.
        :param lock_id: The lock_id of this CreateReservationRequest1.
        :param sales_channel: The sales_channel of this CreateReservationRequest1.
        """
        self.openapi_types = {
            'autorization_expiration_ttl': str,
            'delivery_item_options': List[DeliveryItemOption1],
            'lock_id': str,
            'sales_channel': str
        }

        self.attribute_map = {
            'autorization_expiration_ttl': 'autorizationExpirationTTL',
            'delivery_item_options': 'deliveryItemOptions',
            'lock_id': 'lockId',
            'sales_channel': 'salesChannel'
        }

        self._autorization_expiration_ttl = autorization_expiration_ttl
        self._delivery_item_options = delivery_item_options
        self._lock_id = lock_id
        self._sales_channel = sales_channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateReservationRequest1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateReservationRequest_1 of this CreateReservationRequest1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autorization_expiration_ttl(self):
        """Gets the autorization_expiration_ttl of this CreateReservationRequest1.


        :return: The autorization_expiration_ttl of this CreateReservationRequest1.
        :rtype: str
        """
        return self._autorization_expiration_ttl

    @autorization_expiration_ttl.setter
    def autorization_expiration_ttl(self, autorization_expiration_ttl):
        """Sets the autorization_expiration_ttl of this CreateReservationRequest1.


        :param autorization_expiration_ttl: The autorization_expiration_ttl of this CreateReservationRequest1.
        :type autorization_expiration_ttl: str
        """
        if autorization_expiration_ttl is None:
            raise ValueError("Invalid value for `autorization_expiration_ttl`, must not be `None`")

        self._autorization_expiration_ttl = autorization_expiration_ttl

    @property
    def delivery_item_options(self):
        """Gets the delivery_item_options of this CreateReservationRequest1.

        

        :return: The delivery_item_options of this CreateReservationRequest1.
        :rtype: List[DeliveryItemOption1]
        """
        return self._delivery_item_options

    @delivery_item_options.setter
    def delivery_item_options(self, delivery_item_options):
        """Sets the delivery_item_options of this CreateReservationRequest1.

        

        :param delivery_item_options: The delivery_item_options of this CreateReservationRequest1.
        :type delivery_item_options: List[DeliveryItemOption1]
        """
        if delivery_item_options is None:
            raise ValueError("Invalid value for `delivery_item_options`, must not be `None`")

        self._delivery_item_options = delivery_item_options

    @property
    def lock_id(self):
        """Gets the lock_id of this CreateReservationRequest1.


        :return: The lock_id of this CreateReservationRequest1.
        :rtype: str
        """
        return self._lock_id

    @lock_id.setter
    def lock_id(self, lock_id):
        """Sets the lock_id of this CreateReservationRequest1.


        :param lock_id: The lock_id of this CreateReservationRequest1.
        :type lock_id: str
        """
        if lock_id is None:
            raise ValueError("Invalid value for `lock_id`, must not be `None`")

        self._lock_id = lock_id

    @property
    def sales_channel(self):
        """Gets the sales_channel of this CreateReservationRequest1.


        :return: The sales_channel of this CreateReservationRequest1.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this CreateReservationRequest1.


        :param sales_channel: The sales_channel of this CreateReservationRequest1.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel
