# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension11 import Dimension11
from openapi_server import util


class Item11(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_handling_time: str=None, dimension: Dimension11=None, group_item_id: str=None, id: str=None, kit_item: List[str]=None, modal: str=None, price: float=None, quantity: int=None, unlimited_quantity: bool=None):
        """Item11 - a model defined in OpenAPI

        :param additional_handling_time: The additional_handling_time of this Item11.
        :param dimension: The dimension of this Item11.
        :param group_item_id: The group_item_id of this Item11.
        :param id: The id of this Item11.
        :param kit_item: The kit_item of this Item11.
        :param modal: The modal of this Item11.
        :param price: The price of this Item11.
        :param quantity: The quantity of this Item11.
        :param unlimited_quantity: The unlimited_quantity of this Item11.
        """
        self.openapi_types = {
            'additional_handling_time': str,
            'dimension': Dimension11,
            'group_item_id': str,
            'id': str,
            'kit_item': List[str],
            'modal': str,
            'price': float,
            'quantity': int,
            'unlimited_quantity': bool
        }

        self.attribute_map = {
            'additional_handling_time': 'additionalHandlingTime',
            'dimension': 'dimension',
            'group_item_id': 'groupItemId',
            'id': 'id',
            'kit_item': 'kitItem',
            'modal': 'modal',
            'price': 'price',
            'quantity': 'quantity',
            'unlimited_quantity': 'unlimitedQuantity'
        }

        self._additional_handling_time = additional_handling_time
        self._dimension = dimension
        self._group_item_id = group_item_id
        self._id = id
        self._kit_item = kit_item
        self._modal = modal
        self._price = price
        self._quantity = quantity
        self._unlimited_quantity = unlimited_quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item11':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item1_1 of this Item11.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_handling_time(self):
        """Gets the additional_handling_time of this Item11.


        :return: The additional_handling_time of this Item11.
        :rtype: str
        """
        return self._additional_handling_time

    @additional_handling_time.setter
    def additional_handling_time(self, additional_handling_time):
        """Sets the additional_handling_time of this Item11.


        :param additional_handling_time: The additional_handling_time of this Item11.
        :type additional_handling_time: str
        """
        if additional_handling_time is None:
            raise ValueError("Invalid value for `additional_handling_time`, must not be `None`")

        self._additional_handling_time = additional_handling_time

    @property
    def dimension(self):
        """Gets the dimension of this Item11.


        :return: The dimension of this Item11.
        :rtype: Dimension11
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this Item11.


        :param dimension: The dimension of this Item11.
        :type dimension: Dimension11
        """
        if dimension is None:
            raise ValueError("Invalid value for `dimension`, must not be `None`")

        self._dimension = dimension

    @property
    def group_item_id(self):
        """Gets the group_item_id of this Item11.


        :return: The group_item_id of this Item11.
        :rtype: str
        """
        return self._group_item_id

    @group_item_id.setter
    def group_item_id(self, group_item_id):
        """Sets the group_item_id of this Item11.


        :param group_item_id: The group_item_id of this Item11.
        :type group_item_id: str
        """
        if group_item_id is None:
            raise ValueError("Invalid value for `group_item_id`, must not be `None`")

        self._group_item_id = group_item_id

    @property
    def id(self):
        """Gets the id of this Item11.


        :return: The id of this Item11.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Item11.


        :param id: The id of this Item11.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def kit_item(self):
        """Gets the kit_item of this Item11.

        

        :return: The kit_item of this Item11.
        :rtype: List[str]
        """
        return self._kit_item

    @kit_item.setter
    def kit_item(self, kit_item):
        """Sets the kit_item of this Item11.

        

        :param kit_item: The kit_item of this Item11.
        :type kit_item: List[str]
        """
        if kit_item is None:
            raise ValueError("Invalid value for `kit_item`, must not be `None`")

        self._kit_item = kit_item

    @property
    def modal(self):
        """Gets the modal of this Item11.


        :return: The modal of this Item11.
        :rtype: str
        """
        return self._modal

    @modal.setter
    def modal(self, modal):
        """Sets the modal of this Item11.


        :param modal: The modal of this Item11.
        :type modal: str
        """
        if modal is None:
            raise ValueError("Invalid value for `modal`, must not be `None`")

        self._modal = modal

    @property
    def price(self):
        """Gets the price of this Item11.


        :return: The price of this Item11.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Item11.


        :param price: The price of this Item11.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this Item11.


        :return: The quantity of this Item11.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Item11.


        :param quantity: The quantity of this Item11.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def unlimited_quantity(self):
        """Gets the unlimited_quantity of this Item11.


        :return: The unlimited_quantity of this Item11.
        :rtype: bool
        """
        return self._unlimited_quantity

    @unlimited_quantity.setter
    def unlimited_quantity(self, unlimited_quantity):
        """Sets the unlimited_quantity of this Item11.


        :param unlimited_quantity: The unlimited_quantity of this Item11.
        :type unlimited_quantity: bool
        """
        if unlimited_quantity is None:
            raise ValueError("Invalid value for `unlimited_quantity`, must not be `None`")

        self._unlimited_quantity = unlimited_quantity
