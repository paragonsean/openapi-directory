# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.balance1 import Balance1
from openapi_server import util


class ListInventoryBySKU(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: List[Balance1]=None, sku_id: str=None):
        """ListInventoryBySKU - a model defined in OpenAPI

        :param balance: The balance of this ListInventoryBySKU.
        :param sku_id: The sku_id of this ListInventoryBySKU.
        """
        self.openapi_types = {
            'balance': List[Balance1],
            'sku_id': str
        }

        self.attribute_map = {
            'balance': 'balance',
            'sku_id': 'skuId'
        }

        self._balance = balance
        self._sku_id = sku_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListInventoryBySKU':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListInventoryBySKU of this ListInventoryBySKU.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this ListInventoryBySKU.

        

        :return: The balance of this ListInventoryBySKU.
        :rtype: List[Balance1]
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this ListInventoryBySKU.

        

        :param balance: The balance of this ListInventoryBySKU.
        :type balance: List[Balance1]
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")

        self._balance = balance

    @property
    def sku_id(self):
        """Gets the sku_id of this ListInventoryBySKU.


        :return: The sku_id of this ListInventoryBySKU.
        :rtype: str
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this ListInventoryBySKU.


        :param sku_id: The sku_id of this ListInventoryBySKU.
        :type sku_id: str
        """
        if sku_id is None:
            raise ValueError("Invalid value for `sku_id`, must not be `None`")

        self._sku_id = sku_id
