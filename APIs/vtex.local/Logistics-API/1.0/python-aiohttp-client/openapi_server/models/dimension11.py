# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dimension11(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: float=None, length: float=None, max_sum_dimension: float=None, weight: float=None, width: float=None):
        """Dimension11 - a model defined in OpenAPI

        :param height: The height of this Dimension11.
        :param length: The length of this Dimension11.
        :param max_sum_dimension: The max_sum_dimension of this Dimension11.
        :param weight: The weight of this Dimension11.
        :param width: The width of this Dimension11.
        """
        self.openapi_types = {
            'height': float,
            'length': float,
            'max_sum_dimension': float,
            'weight': float,
            'width': float
        }

        self.attribute_map = {
            'height': 'height',
            'length': 'length',
            'max_sum_dimension': 'maxSumDimension',
            'weight': 'weight',
            'width': 'width'
        }

        self._height = height
        self._length = length
        self._max_sum_dimension = max_sum_dimension
        self._weight = weight
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dimension11':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dimension1_1 of this Dimension11.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this Dimension11.


        :return: The height of this Dimension11.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Dimension11.


        :param height: The height of this Dimension11.
        :type height: float
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def length(self):
        """Gets the length of this Dimension11.


        :return: The length of this Dimension11.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Dimension11.


        :param length: The length of this Dimension11.
        :type length: float
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def max_sum_dimension(self):
        """Gets the max_sum_dimension of this Dimension11.


        :return: The max_sum_dimension of this Dimension11.
        :rtype: float
        """
        return self._max_sum_dimension

    @max_sum_dimension.setter
    def max_sum_dimension(self, max_sum_dimension):
        """Sets the max_sum_dimension of this Dimension11.


        :param max_sum_dimension: The max_sum_dimension of this Dimension11.
        :type max_sum_dimension: float
        """
        if max_sum_dimension is None:
            raise ValueError("Invalid value for `max_sum_dimension`, must not be `None`")

        self._max_sum_dimension = max_sum_dimension

    @property
    def weight(self):
        """Gets the weight of this Dimension11.


        :return: The weight of this Dimension11.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Dimension11.


        :param weight: The weight of this Dimension11.
        :type weight: float
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")

        self._weight = weight

    @property
    def width(self):
        """Gets the width of this Dimension11.


        :return: The width of this Dimension11.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Dimension11.


        :param width: The width of this Dimension11.
        :type width: float
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
