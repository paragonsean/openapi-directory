# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.warehouse_dock12 import WarehouseDock12
from openapi_server import util


class ListAllAarehouses(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, warehouse_docks: List[WarehouseDock12]=None):
        """ListAllAarehouses - a model defined in OpenAPI

        :param id: The id of this ListAllAarehouses.
        :param name: The name of this ListAllAarehouses.
        :param warehouse_docks: The warehouse_docks of this ListAllAarehouses.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'warehouse_docks': List[WarehouseDock12]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'warehouse_docks': 'warehouseDocks'
        }

        self._id = id
        self._name = name
        self._warehouse_docks = warehouse_docks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAllAarehouses':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListAllAarehouses of this ListAllAarehouses.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ListAllAarehouses.


        :return: The id of this ListAllAarehouses.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ListAllAarehouses.


        :param id: The id of this ListAllAarehouses.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ListAllAarehouses.


        :return: The name of this ListAllAarehouses.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ListAllAarehouses.


        :param name: The name of this ListAllAarehouses.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def warehouse_docks(self):
        """Gets the warehouse_docks of this ListAllAarehouses.

        

        :return: The warehouse_docks of this ListAllAarehouses.
        :rtype: List[WarehouseDock12]
        """
        return self._warehouse_docks

    @warehouse_docks.setter
    def warehouse_docks(self, warehouse_docks):
        """Sets the warehouse_docks of this ListAllAarehouses.

        

        :param warehouse_docks: The warehouse_docks of this ListAllAarehouses.
        :type warehouse_docks: List[WarehouseDock12]
        """
        if warehouse_docks is None:
            raise ValueError("Invalid value for `warehouse_docks`, must not be `None`")

        self._warehouse_docks = warehouse_docks
