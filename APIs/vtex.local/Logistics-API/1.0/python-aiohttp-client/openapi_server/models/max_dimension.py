# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MaxDimension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, largest_measure: float=None, max_measure_sum: float=None):
        """MaxDimension - a model defined in OpenAPI

        :param largest_measure: The largest_measure of this MaxDimension.
        :param max_measure_sum: The max_measure_sum of this MaxDimension.
        """
        self.openapi_types = {
            'largest_measure': float,
            'max_measure_sum': float
        }

        self.attribute_map = {
            'largest_measure': 'largestMeasure',
            'max_measure_sum': 'maxMeasureSum'
        }

        self._largest_measure = largest_measure
        self._max_measure_sum = max_measure_sum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaxDimension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The maxDimension of this MaxDimension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def largest_measure(self):
        """Gets the largest_measure of this MaxDimension.

        Largest measure of the package.

        :return: The largest_measure of this MaxDimension.
        :rtype: float
        """
        return self._largest_measure

    @largest_measure.setter
    def largest_measure(self, largest_measure):
        """Sets the largest_measure of this MaxDimension.

        Largest measure of the package.

        :param largest_measure: The largest_measure of this MaxDimension.
        :type largest_measure: float
        """
        if largest_measure is None:
            raise ValueError("Invalid value for `largest_measure`, must not be `None`")

        self._largest_measure = largest_measure

    @property
    def max_measure_sum(self):
        """Gets the max_measure_sum of this MaxDimension.

        Sum of all maximum measures of the package.

        :return: The max_measure_sum of this MaxDimension.
        :rtype: float
        """
        return self._max_measure_sum

    @max_measure_sum.setter
    def max_measure_sum(self, max_measure_sum):
        """Sets the max_measure_sum of this MaxDimension.

        Sum of all maximum measures of the package.

        :param max_measure_sum: The max_measure_sum of this MaxDimension.
        :type max_measure_sum: float
        """
        if max_measure_sum is None:
            raise ValueError("Invalid value for `max_measure_sum`, must not be `None`")

        self._max_measure_sum = max_measure_sum
