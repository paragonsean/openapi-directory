# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WeekendAndHolidays(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, holiday: bool=None, saturday: bool=None, sunday: bool=None):
        """WeekendAndHolidays - a model defined in OpenAPI

        :param holiday: The holiday of this WeekendAndHolidays.
        :param saturday: The saturday of this WeekendAndHolidays.
        :param sunday: The sunday of this WeekendAndHolidays.
        """
        self.openapi_types = {
            'holiday': bool,
            'saturday': bool,
            'sunday': bool
        }

        self.attribute_map = {
            'holiday': 'holiday',
            'saturday': 'saturday',
            'sunday': 'sunday'
        }

        self._holiday = holiday
        self._saturday = saturday
        self._sunday = sunday

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WeekendAndHolidays':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The weekendAndHolidays of this WeekendAndHolidays.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def holiday(self):
        """Gets the holiday of this WeekendAndHolidays.

        Does the shipping policy allow deliveries onholidays?

        :return: The holiday of this WeekendAndHolidays.
        :rtype: bool
        """
        return self._holiday

    @holiday.setter
    def holiday(self, holiday):
        """Sets the holiday of this WeekendAndHolidays.

        Does the shipping policy allow deliveries onholidays?

        :param holiday: The holiday of this WeekendAndHolidays.
        :type holiday: bool
        """
        if holiday is None:
            raise ValueError("Invalid value for `holiday`, must not be `None`")

        self._holiday = holiday

    @property
    def saturday(self):
        """Gets the saturday of this WeekendAndHolidays.

        Does the shipping policy allow deliveries on saturdays?

        :return: The saturday of this WeekendAndHolidays.
        :rtype: bool
        """
        return self._saturday

    @saturday.setter
    def saturday(self, saturday):
        """Sets the saturday of this WeekendAndHolidays.

        Does the shipping policy allow deliveries on saturdays?

        :param saturday: The saturday of this WeekendAndHolidays.
        :type saturday: bool
        """
        if saturday is None:
            raise ValueError("Invalid value for `saturday`, must not be `None`")

        self._saturday = saturday

    @property
    def sunday(self):
        """Gets the sunday of this WeekendAndHolidays.

        Does the shipping policy allow deliveries on sundays?

        :return: The sunday of this WeekendAndHolidays.
        :rtype: bool
        """
        return self._sunday

    @sunday.setter
    def sunday(self, sunday):
        """Sets the sunday of this WeekendAndHolidays.

        Does the shipping policy allow deliveries on sundays?

        :param sunday: The sunday of this WeekendAndHolidays.
        :type sunday: bool
        """
        if sunday is None:
            raise ValueError("Invalid value for `sunday`, must not be `None`")

        self._sunday = sunday
