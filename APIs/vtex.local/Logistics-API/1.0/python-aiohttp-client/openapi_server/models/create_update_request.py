# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address21 import Address21
from openapi_server.models.business_hour1 import BusinessHour1
from openapi_server import util


class CreateUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address21=None, business_hours: List[BusinessHour1]=None, description: str=None, formatted_address: str=None, id: str=None, instructions: str=None, is_active: bool=None, name: str=None, tags_label: List[str]=None):
        """CreateUpdateRequest - a model defined in OpenAPI

        :param address: The address of this CreateUpdateRequest.
        :param business_hours: The business_hours of this CreateUpdateRequest.
        :param description: The description of this CreateUpdateRequest.
        :param formatted_address: The formatted_address of this CreateUpdateRequest.
        :param id: The id of this CreateUpdateRequest.
        :param instructions: The instructions of this CreateUpdateRequest.
        :param is_active: The is_active of this CreateUpdateRequest.
        :param name: The name of this CreateUpdateRequest.
        :param tags_label: The tags_label of this CreateUpdateRequest.
        """
        self.openapi_types = {
            'address': Address21,
            'business_hours': List[BusinessHour1],
            'description': str,
            'formatted_address': str,
            'id': str,
            'instructions': str,
            'is_active': bool,
            'name': str,
            'tags_label': List[str]
        }

        self.attribute_map = {
            'address': 'address',
            'business_hours': 'businessHours',
            'description': 'description',
            'formatted_address': 'formatted_address',
            'id': 'id',
            'instructions': 'instructions',
            'is_active': 'isActive',
            'name': 'name',
            'tags_label': 'tagsLabel'
        }

        self._address = address
        self._business_hours = business_hours
        self._description = description
        self._formatted_address = formatted_address
        self._id = id
        self._instructions = instructions
        self._is_active = is_active
        self._name = name
        self._tags_label = tags_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUpdateRequest of this CreateUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this CreateUpdateRequest.


        :return: The address of this CreateUpdateRequest.
        :rtype: Address21
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CreateUpdateRequest.


        :param address: The address of this CreateUpdateRequest.
        :type address: Address21
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def business_hours(self):
        """Gets the business_hours of this CreateUpdateRequest.

        

        :return: The business_hours of this CreateUpdateRequest.
        :rtype: List[BusinessHour1]
        """
        return self._business_hours

    @business_hours.setter
    def business_hours(self, business_hours):
        """Sets the business_hours of this CreateUpdateRequest.

        

        :param business_hours: The business_hours of this CreateUpdateRequest.
        :type business_hours: List[BusinessHour1]
        """
        if business_hours is None:
            raise ValueError("Invalid value for `business_hours`, must not be `None`")

        self._business_hours = business_hours

    @property
    def description(self):
        """Gets the description of this CreateUpdateRequest.


        :return: The description of this CreateUpdateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateUpdateRequest.


        :param description: The description of this CreateUpdateRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def formatted_address(self):
        """Gets the formatted_address of this CreateUpdateRequest.


        :return: The formatted_address of this CreateUpdateRequest.
        :rtype: str
        """
        return self._formatted_address

    @formatted_address.setter
    def formatted_address(self, formatted_address):
        """Sets the formatted_address of this CreateUpdateRequest.


        :param formatted_address: The formatted_address of this CreateUpdateRequest.
        :type formatted_address: str
        """
        if formatted_address is None:
            raise ValueError("Invalid value for `formatted_address`, must not be `None`")

        self._formatted_address = formatted_address

    @property
    def id(self):
        """Gets the id of this CreateUpdateRequest.


        :return: The id of this CreateUpdateRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateUpdateRequest.


        :param id: The id of this CreateUpdateRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def instructions(self):
        """Gets the instructions of this CreateUpdateRequest.


        :return: The instructions of this CreateUpdateRequest.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this CreateUpdateRequest.


        :param instructions: The instructions of this CreateUpdateRequest.
        :type instructions: str
        """
        if instructions is None:
            raise ValueError("Invalid value for `instructions`, must not be `None`")

        self._instructions = instructions

    @property
    def is_active(self):
        """Gets the is_active of this CreateUpdateRequest.


        :return: The is_active of this CreateUpdateRequest.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this CreateUpdateRequest.


        :param is_active: The is_active of this CreateUpdateRequest.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def name(self):
        """Gets the name of this CreateUpdateRequest.


        :return: The name of this CreateUpdateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateUpdateRequest.


        :param name: The name of this CreateUpdateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def tags_label(self):
        """Gets the tags_label of this CreateUpdateRequest.

        

        :return: The tags_label of this CreateUpdateRequest.
        :rtype: List[str]
        """
        return self._tags_label

    @tags_label.setter
    def tags_label(self, tags_label):
        """Sets the tags_label of this CreateUpdateRequest.

        

        :param tags_label: The tags_label of this CreateUpdateRequest.
        :type tags_label: List[str]
        """
        if tags_label is None:
            raise ValueError("Invalid value for `tags_label`, must not be `None`")

        self._tags_label = tags_label
