# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MaxDimension11(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: str=None, length: str=None, max_sum_dimension: str=None):
        """MaxDimension11 - a model defined in OpenAPI

        :param height: The height of this MaxDimension11.
        :param length: The length of this MaxDimension11.
        :param max_sum_dimension: The max_sum_dimension of this MaxDimension11.
        """
        self.openapi_types = {
            'height': str,
            'length': str,
            'max_sum_dimension': str
        }

        self.attribute_map = {
            'height': 'height',
            'length': 'length',
            'max_sum_dimension': 'maxSumDimension'
        }

        self._height = height
        self._length = length
        self._max_sum_dimension = max_sum_dimension

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaxDimension11':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaxDimension1_1 of this MaxDimension11.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this MaxDimension11.


        :return: The height of this MaxDimension11.
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this MaxDimension11.


        :param height: The height of this MaxDimension11.
        :type height: str
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def length(self):
        """Gets the length of this MaxDimension11.


        :return: The length of this MaxDimension11.
        :rtype: str
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this MaxDimension11.


        :param length: The length of this MaxDimension11.
        :type length: str
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def max_sum_dimension(self):
        """Gets the max_sum_dimension of this MaxDimension11.


        :return: The max_sum_dimension of this MaxDimension11.
        :rtype: str
        """
        return self._max_sum_dimension

    @max_sum_dimension.setter
    def max_sum_dimension(self, max_sum_dimension):
        """Sets the max_sum_dimension of this MaxDimension11.


        :param max_sum_dimension: The max_sum_dimension of this MaxDimension11.
        :type max_sum_dimension: str
        """
        if max_sum_dimension is None:
            raise ValueError("Invalid value for `max_sum_dimension`, must not be `None`")

        self._max_sum_dimension = max_sum_dimension
