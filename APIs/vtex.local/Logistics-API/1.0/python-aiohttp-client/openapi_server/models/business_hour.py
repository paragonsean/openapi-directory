# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BusinessHour(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closing_time: str=None, day_of_week: int=None, opening_time: str=None):
        """BusinessHour - a model defined in OpenAPI

        :param closing_time: The closing_time of this BusinessHour.
        :param day_of_week: The day_of_week of this BusinessHour.
        :param opening_time: The opening_time of this BusinessHour.
        """
        self.openapi_types = {
            'closing_time': str,
            'day_of_week': int,
            'opening_time': str
        }

        self.attribute_map = {
            'closing_time': 'closingTime',
            'day_of_week': 'dayOfWeek',
            'opening_time': 'openingTime'
        }

        self._closing_time = closing_time
        self._day_of_week = day_of_week
        self._opening_time = opening_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BusinessHour':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BusinessHour of this BusinessHour.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closing_time(self):
        """Gets the closing_time of this BusinessHour.


        :return: The closing_time of this BusinessHour.
        :rtype: str
        """
        return self._closing_time

    @closing_time.setter
    def closing_time(self, closing_time):
        """Sets the closing_time of this BusinessHour.


        :param closing_time: The closing_time of this BusinessHour.
        :type closing_time: str
        """
        if closing_time is None:
            raise ValueError("Invalid value for `closing_time`, must not be `None`")

        self._closing_time = closing_time

    @property
    def day_of_week(self):
        """Gets the day_of_week of this BusinessHour.


        :return: The day_of_week of this BusinessHour.
        :rtype: int
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this BusinessHour.


        :param day_of_week: The day_of_week of this BusinessHour.
        :type day_of_week: int
        """
        if day_of_week is None:
            raise ValueError("Invalid value for `day_of_week`, must not be `None`")

        self._day_of_week = day_of_week

    @property
    def opening_time(self):
        """Gets the opening_time of this BusinessHour.


        :return: The opening_time of this BusinessHour.
        :rtype: str
        """
        return self._opening_time

    @opening_time.setter
    def opening_time(self, opening_time):
        """Sets the opening_time of this BusinessHour.


        :param opening_time: The opening_time of this BusinessHour.
        :type opening_time: str
        """
        if opening_time is None:
            raise ValueError("Invalid value for `opening_time`, must not be `None`")

        self._opening_time = opening_time
