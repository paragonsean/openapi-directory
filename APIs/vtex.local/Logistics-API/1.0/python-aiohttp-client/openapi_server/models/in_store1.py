# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InStore1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_checked_in: bool=None, store_id: str=None):
        """InStore1 - a model defined in OpenAPI

        :param is_checked_in: The is_checked_in of this InStore1.
        :param store_id: The store_id of this InStore1.
        """
        self.openapi_types = {
            'is_checked_in': bool,
            'store_id': str
        }

        self.attribute_map = {
            'is_checked_in': 'IsCheckedIn',
            'store_id': 'StoreId'
        }

        self._is_checked_in = is_checked_in
        self._store_id = store_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InStore1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InStore_1 of this InStore1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_checked_in(self):
        """Gets the is_checked_in of this InStore1.


        :return: The is_checked_in of this InStore1.
        :rtype: bool
        """
        return self._is_checked_in

    @is_checked_in.setter
    def is_checked_in(self, is_checked_in):
        """Sets the is_checked_in of this InStore1.


        :param is_checked_in: The is_checked_in of this InStore1.
        :type is_checked_in: bool
        """
        if is_checked_in is None:
            raise ValueError("Invalid value for `is_checked_in`, must not be `None`")

        self._is_checked_in = is_checked_in

    @property
    def store_id(self):
        """Gets the store_id of this InStore1.


        :return: The store_id of this InStore1.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this InStore1.


        :param store_id: The store_id of this InStore1.
        :type store_id: str
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id
