# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Success(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_quantity: int=None, dispatched_reservations_quantity: int=None, is_unlimited_quantity: bool=None, quantity: int=None, sku_id: str=None, total_reserved_quantity: int=None, warehouse_id: str=None):
        """Success - a model defined in OpenAPI

        :param available_quantity: The available_quantity of this Success.
        :param dispatched_reservations_quantity: The dispatched_reservations_quantity of this Success.
        :param is_unlimited_quantity: The is_unlimited_quantity of this Success.
        :param quantity: The quantity of this Success.
        :param sku_id: The sku_id of this Success.
        :param total_reserved_quantity: The total_reserved_quantity of this Success.
        :param warehouse_id: The warehouse_id of this Success.
        """
        self.openapi_types = {
            'available_quantity': int,
            'dispatched_reservations_quantity': int,
            'is_unlimited_quantity': bool,
            'quantity': int,
            'sku_id': str,
            'total_reserved_quantity': int,
            'warehouse_id': str
        }

        self.attribute_map = {
            'available_quantity': 'availableQuantity',
            'dispatched_reservations_quantity': 'dispatchedReservationsQuantity',
            'is_unlimited_quantity': 'isUnlimitedQuantity',
            'quantity': 'quantity',
            'sku_id': 'skuId',
            'total_reserved_quantity': 'totalReservedQuantity',
            'warehouse_id': 'warehouseId'
        }

        self._available_quantity = available_quantity
        self._dispatched_reservations_quantity = dispatched_reservations_quantity
        self._is_unlimited_quantity = is_unlimited_quantity
        self._quantity = quantity
        self._sku_id = sku_id
        self._total_reserved_quantity = total_reserved_quantity
        self._warehouse_id = warehouse_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Success':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Success of this Success.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_quantity(self):
        """Gets the available_quantity of this Success.


        :return: The available_quantity of this Success.
        :rtype: int
        """
        return self._available_quantity

    @available_quantity.setter
    def available_quantity(self, available_quantity):
        """Sets the available_quantity of this Success.


        :param available_quantity: The available_quantity of this Success.
        :type available_quantity: int
        """
        if available_quantity is None:
            raise ValueError("Invalid value for `available_quantity`, must not be `None`")

        self._available_quantity = available_quantity

    @property
    def dispatched_reservations_quantity(self):
        """Gets the dispatched_reservations_quantity of this Success.


        :return: The dispatched_reservations_quantity of this Success.
        :rtype: int
        """
        return self._dispatched_reservations_quantity

    @dispatched_reservations_quantity.setter
    def dispatched_reservations_quantity(self, dispatched_reservations_quantity):
        """Sets the dispatched_reservations_quantity of this Success.


        :param dispatched_reservations_quantity: The dispatched_reservations_quantity of this Success.
        :type dispatched_reservations_quantity: int
        """
        if dispatched_reservations_quantity is None:
            raise ValueError("Invalid value for `dispatched_reservations_quantity`, must not be `None`")

        self._dispatched_reservations_quantity = dispatched_reservations_quantity

    @property
    def is_unlimited_quantity(self):
        """Gets the is_unlimited_quantity of this Success.


        :return: The is_unlimited_quantity of this Success.
        :rtype: bool
        """
        return self._is_unlimited_quantity

    @is_unlimited_quantity.setter
    def is_unlimited_quantity(self, is_unlimited_quantity):
        """Sets the is_unlimited_quantity of this Success.


        :param is_unlimited_quantity: The is_unlimited_quantity of this Success.
        :type is_unlimited_quantity: bool
        """
        if is_unlimited_quantity is None:
            raise ValueError("Invalid value for `is_unlimited_quantity`, must not be `None`")

        self._is_unlimited_quantity = is_unlimited_quantity

    @property
    def quantity(self):
        """Gets the quantity of this Success.


        :return: The quantity of this Success.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Success.


        :param quantity: The quantity of this Success.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def sku_id(self):
        """Gets the sku_id of this Success.


        :return: The sku_id of this Success.
        :rtype: str
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this Success.


        :param sku_id: The sku_id of this Success.
        :type sku_id: str
        """
        if sku_id is None:
            raise ValueError("Invalid value for `sku_id`, must not be `None`")

        self._sku_id = sku_id

    @property
    def total_reserved_quantity(self):
        """Gets the total_reserved_quantity of this Success.


        :return: The total_reserved_quantity of this Success.
        :rtype: int
        """
        return self._total_reserved_quantity

    @total_reserved_quantity.setter
    def total_reserved_quantity(self, total_reserved_quantity):
        """Sets the total_reserved_quantity of this Success.


        :param total_reserved_quantity: The total_reserved_quantity of this Success.
        :type total_reserved_quantity: int
        """
        if total_reserved_quantity is None:
            raise ValueError("Invalid value for `total_reserved_quantity`, must not be `None`")

        self._total_reserved_quantity = total_reserved_quantity

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this Success.


        :return: The warehouse_id of this Success.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this Success.


        :param warehouse_id: The warehouse_id of this Success.
        :type warehouse_id: str
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")

        self._warehouse_id = warehouse_id
