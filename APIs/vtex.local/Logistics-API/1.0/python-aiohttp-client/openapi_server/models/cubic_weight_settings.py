# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CubicWeightSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, minimun_acceptable_volumetric_weight: float=None, volumetric_factor: float=None):
        """CubicWeightSettings - a model defined in OpenAPI

        :param minimun_acceptable_volumetric_weight: The minimun_acceptable_volumetric_weight of this CubicWeightSettings.
        :param volumetric_factor: The volumetric_factor of this CubicWeightSettings.
        """
        self.openapi_types = {
            'minimun_acceptable_volumetric_weight': float,
            'volumetric_factor': float
        }

        self.attribute_map = {
            'minimun_acceptable_volumetric_weight': 'minimunAcceptableVolumetricWeight',
            'volumetric_factor': 'volumetricFactor'
        }

        self._minimun_acceptable_volumetric_weight = minimun_acceptable_volumetric_weight
        self._volumetric_factor = volumetric_factor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CubicWeightSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cubicWeightSettings of this CubicWeightSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def minimun_acceptable_volumetric_weight(self):
        """Gets the minimun_acceptable_volumetric_weight of this CubicWeightSettings.

        

        :return: The minimun_acceptable_volumetric_weight of this CubicWeightSettings.
        :rtype: float
        """
        return self._minimun_acceptable_volumetric_weight

    @minimun_acceptable_volumetric_weight.setter
    def minimun_acceptable_volumetric_weight(self, minimun_acceptable_volumetric_weight):
        """Sets the minimun_acceptable_volumetric_weight of this CubicWeightSettings.

        

        :param minimun_acceptable_volumetric_weight: The minimun_acceptable_volumetric_weight of this CubicWeightSettings.
        :type minimun_acceptable_volumetric_weight: float
        """
        if minimun_acceptable_volumetric_weight is None:
            raise ValueError("Invalid value for `minimun_acceptable_volumetric_weight`, must not be `None`")

        self._minimun_acceptable_volumetric_weight = minimun_acceptable_volumetric_weight

    @property
    def volumetric_factor(self):
        """Gets the volumetric_factor of this CubicWeightSettings.

        Factor that will be used on the cubic weight calculation.

        :return: The volumetric_factor of this CubicWeightSettings.
        :rtype: float
        """
        return self._volumetric_factor

    @volumetric_factor.setter
    def volumetric_factor(self, volumetric_factor):
        """Sets the volumetric_factor of this CubicWeightSettings.

        Factor that will be used on the cubic weight calculation.

        :param volumetric_factor: The volumetric_factor of this CubicWeightSettings.
        :type volumetric_factor: float
        """
        if volumetric_factor is None:
            raise ValueError("Invalid value for `volumetric_factor`, must not be `None`")

        self._volumetric_factor = volumetric_factor
