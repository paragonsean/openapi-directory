# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item31 import Item31
from openapi_server.models.location31 import Location31
from openapi_server import util


class CalculateSLARequest1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[Item31]=None, location: Location31=None, sales_channel: str=None):
        """CalculateSLARequest1 - a model defined in OpenAPI

        :param items: The items of this CalculateSLARequest1.
        :param location: The location of this CalculateSLARequest1.
        :param sales_channel: The sales_channel of this CalculateSLARequest1.
        """
        self.openapi_types = {
            'items': List[Item31],
            'location': Location31,
            'sales_channel': str
        }

        self.attribute_map = {
            'items': 'items',
            'location': 'location',
            'sales_channel': 'salesChannel'
        }

        self._items = items
        self._location = location
        self._sales_channel = sales_channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateSLARequest1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculateSLARequest_1 of this CalculateSLARequest1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this CalculateSLARequest1.

        

        :return: The items of this CalculateSLARequest1.
        :rtype: List[Item31]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CalculateSLARequest1.

        

        :param items: The items of this CalculateSLARequest1.
        :type items: List[Item31]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def location(self):
        """Gets the location of this CalculateSLARequest1.


        :return: The location of this CalculateSLARequest1.
        :rtype: Location31
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CalculateSLARequest1.


        :param location: The location of this CalculateSLARequest1.
        :type location: Location31
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def sales_channel(self):
        """Gets the sales_channel of this CalculateSLARequest1.


        :return: The sales_channel of this CalculateSLARequest1.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this CalculateSLARequest1.


        :param sales_channel: The sales_channel of this CalculateSLARequest1.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel
