# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.business_hour_settings import BusinessHourSettings
from openapi_server.models.carrier_schedule_inner import CarrierScheduleInner
from openapi_server.models.cubic_weight_settings import CubicWeightSettings
from openapi_server.models.delivery_schedule_settings import DeliveryScheduleSettings
from openapi_server.models.max_dimension import MaxDimension
from openapi_server.models.modal_settings import ModalSettings
from openapi_server.models.pickup_points_settings import PickupPointsSettings
from openapi_server.models.weekend_and_holidays import WeekendAndHolidays
from openapi_server import util


class RequestBody(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_hour_settings: BusinessHourSettings=None, carrier_schedule: List[CarrierScheduleInner]=None, cubic_weight_settings: CubicWeightSettings=None, delivery_schedule_settings: DeliveryScheduleSettings=None, id: str=None, is_active: bool=None, max_dimension: MaxDimension=None, maximum_value_aceptable: float=None, minimum_value_aceptable: float=None, modal_settings: ModalSettings=None, name: str=None, number_of_items_per_shipment: int=None, pickup_points_settings: PickupPointsSettings=None, shipping_method: str=None, weekend_and_holidays: WeekendAndHolidays=None):
        """RequestBody - a model defined in OpenAPI

        :param business_hour_settings: The business_hour_settings of this RequestBody.
        :param carrier_schedule: The carrier_schedule of this RequestBody.
        :param cubic_weight_settings: The cubic_weight_settings of this RequestBody.
        :param delivery_schedule_settings: The delivery_schedule_settings of this RequestBody.
        :param id: The id of this RequestBody.
        :param is_active: The is_active of this RequestBody.
        :param max_dimension: The max_dimension of this RequestBody.
        :param maximum_value_aceptable: The maximum_value_aceptable of this RequestBody.
        :param minimum_value_aceptable: The minimum_value_aceptable of this RequestBody.
        :param modal_settings: The modal_settings of this RequestBody.
        :param name: The name of this RequestBody.
        :param number_of_items_per_shipment: The number_of_items_per_shipment of this RequestBody.
        :param pickup_points_settings: The pickup_points_settings of this RequestBody.
        :param shipping_method: The shipping_method of this RequestBody.
        :param weekend_and_holidays: The weekend_and_holidays of this RequestBody.
        """
        self.openapi_types = {
            'business_hour_settings': BusinessHourSettings,
            'carrier_schedule': List[CarrierScheduleInner],
            'cubic_weight_settings': CubicWeightSettings,
            'delivery_schedule_settings': DeliveryScheduleSettings,
            'id': str,
            'is_active': bool,
            'max_dimension': MaxDimension,
            'maximum_value_aceptable': float,
            'minimum_value_aceptable': float,
            'modal_settings': ModalSettings,
            'name': str,
            'number_of_items_per_shipment': int,
            'pickup_points_settings': PickupPointsSettings,
            'shipping_method': str,
            'weekend_and_holidays': WeekendAndHolidays
        }

        self.attribute_map = {
            'business_hour_settings': 'businessHourSettings',
            'carrier_schedule': 'carrierSchedule',
            'cubic_weight_settings': 'cubicWeightSettings',
            'delivery_schedule_settings': 'deliveryScheduleSettings',
            'id': 'id',
            'is_active': 'isActive',
            'max_dimension': 'maxDimension',
            'maximum_value_aceptable': 'maximumValueAceptable',
            'minimum_value_aceptable': 'minimumValueAceptable',
            'modal_settings': 'modalSettings',
            'name': 'name',
            'number_of_items_per_shipment': 'numberOfItemsPerShipment',
            'pickup_points_settings': 'pickupPointsSettings',
            'shipping_method': 'shippingMethod',
            'weekend_and_holidays': 'weekendAndHolidays'
        }

        self._business_hour_settings = business_hour_settings
        self._carrier_schedule = carrier_schedule
        self._cubic_weight_settings = cubic_weight_settings
        self._delivery_schedule_settings = delivery_schedule_settings
        self._id = id
        self._is_active = is_active
        self._max_dimension = max_dimension
        self._maximum_value_aceptable = maximum_value_aceptable
        self._minimum_value_aceptable = minimum_value_aceptable
        self._modal_settings = modal_settings
        self._name = name
        self._number_of_items_per_shipment = number_of_items_per_shipment
        self._pickup_points_settings = pickup_points_settings
        self._shipping_method = shipping_method
        self._weekend_and_holidays = weekend_and_holidays

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request_body of this RequestBody.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_hour_settings(self):
        """Gets the business_hour_settings of this RequestBody.


        :return: The business_hour_settings of this RequestBody.
        :rtype: BusinessHourSettings
        """
        return self._business_hour_settings

    @business_hour_settings.setter
    def business_hour_settings(self, business_hour_settings):
        """Sets the business_hour_settings of this RequestBody.


        :param business_hour_settings: The business_hour_settings of this RequestBody.
        :type business_hour_settings: BusinessHourSettings
        """
        if business_hour_settings is None:
            raise ValueError("Invalid value for `business_hour_settings`, must not be `None`")

        self._business_hour_settings = business_hour_settings

    @property
    def carrier_schedule(self):
        """Gets the carrier_schedule of this RequestBody.

        Schedule sent by the carrier, to configure Shipping policy

        :return: The carrier_schedule of this RequestBody.
        :rtype: List[CarrierScheduleInner]
        """
        return self._carrier_schedule

    @carrier_schedule.setter
    def carrier_schedule(self, carrier_schedule):
        """Sets the carrier_schedule of this RequestBody.

        Schedule sent by the carrier, to configure Shipping policy

        :param carrier_schedule: The carrier_schedule of this RequestBody.
        :type carrier_schedule: List[CarrierScheduleInner]
        """

        self._carrier_schedule = carrier_schedule

    @property
    def cubic_weight_settings(self):
        """Gets the cubic_weight_settings of this RequestBody.


        :return: The cubic_weight_settings of this RequestBody.
        :rtype: CubicWeightSettings
        """
        return self._cubic_weight_settings

    @cubic_weight_settings.setter
    def cubic_weight_settings(self, cubic_weight_settings):
        """Sets the cubic_weight_settings of this RequestBody.


        :param cubic_weight_settings: The cubic_weight_settings of this RequestBody.
        :type cubic_weight_settings: CubicWeightSettings
        """
        if cubic_weight_settings is None:
            raise ValueError("Invalid value for `cubic_weight_settings`, must not be `None`")

        self._cubic_weight_settings = cubic_weight_settings

    @property
    def delivery_schedule_settings(self):
        """Gets the delivery_schedule_settings of this RequestBody.


        :return: The delivery_schedule_settings of this RequestBody.
        :rtype: DeliveryScheduleSettings
        """
        return self._delivery_schedule_settings

    @delivery_schedule_settings.setter
    def delivery_schedule_settings(self, delivery_schedule_settings):
        """Sets the delivery_schedule_settings of this RequestBody.


        :param delivery_schedule_settings: The delivery_schedule_settings of this RequestBody.
        :type delivery_schedule_settings: DeliveryScheduleSettings
        """
        if delivery_schedule_settings is None:
            raise ValueError("Invalid value for `delivery_schedule_settings`, must not be `None`")

        self._delivery_schedule_settings = delivery_schedule_settings

    @property
    def id(self):
        """Gets the id of this RequestBody.

        ID of the shipping policy.

        :return: The id of this RequestBody.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RequestBody.

        ID of the shipping policy.

        :param id: The id of this RequestBody.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this RequestBody.

        Indicates whether shipping policy is active or not.

        :return: The is_active of this RequestBody.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this RequestBody.

        Indicates whether shipping policy is active or not.

        :param is_active: The is_active of this RequestBody.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def max_dimension(self):
        """Gets the max_dimension of this RequestBody.


        :return: The max_dimension of this RequestBody.
        :rtype: MaxDimension
        """
        return self._max_dimension

    @max_dimension.setter
    def max_dimension(self, max_dimension):
        """Sets the max_dimension of this RequestBody.


        :param max_dimension: The max_dimension of this RequestBody.
        :type max_dimension: MaxDimension
        """
        if max_dimension is None:
            raise ValueError("Invalid value for `max_dimension`, must not be `None`")

        self._max_dimension = max_dimension

    @property
    def maximum_value_aceptable(self):
        """Gets the maximum_value_aceptable of this RequestBody.

        Maximum value accepted by the carrier, to realize the shipping.

        :return: The maximum_value_aceptable of this RequestBody.
        :rtype: float
        """
        return self._maximum_value_aceptable

    @maximum_value_aceptable.setter
    def maximum_value_aceptable(self, maximum_value_aceptable):
        """Sets the maximum_value_aceptable of this RequestBody.

        Maximum value accepted by the carrier, to realize the shipping.

        :param maximum_value_aceptable: The maximum_value_aceptable of this RequestBody.
        :type maximum_value_aceptable: float
        """
        if maximum_value_aceptable is None:
            raise ValueError("Invalid value for `maximum_value_aceptable`, must not be `None`")

        self._maximum_value_aceptable = maximum_value_aceptable

    @property
    def minimum_value_aceptable(self):
        """Gets the minimum_value_aceptable of this RequestBody.

        Minimum value accepted by the carrier, to realize the shipping.

        :return: The minimum_value_aceptable of this RequestBody.
        :rtype: float
        """
        return self._minimum_value_aceptable

    @minimum_value_aceptable.setter
    def minimum_value_aceptable(self, minimum_value_aceptable):
        """Sets the minimum_value_aceptable of this RequestBody.

        Minimum value accepted by the carrier, to realize the shipping.

        :param minimum_value_aceptable: The minimum_value_aceptable of this RequestBody.
        :type minimum_value_aceptable: float
        """
        if minimum_value_aceptable is None:
            raise ValueError("Invalid value for `minimum_value_aceptable`, must not be `None`")

        self._minimum_value_aceptable = minimum_value_aceptable

    @property
    def modal_settings(self):
        """Gets the modal_settings of this RequestBody.


        :return: The modal_settings of this RequestBody.
        :rtype: ModalSettings
        """
        return self._modal_settings

    @modal_settings.setter
    def modal_settings(self, modal_settings):
        """Sets the modal_settings of this RequestBody.


        :param modal_settings: The modal_settings of this RequestBody.
        :type modal_settings: ModalSettings
        """
        if modal_settings is None:
            raise ValueError("Invalid value for `modal_settings`, must not be `None`")

        self._modal_settings = modal_settings

    @property
    def name(self):
        """Gets the name of this RequestBody.

        Name of the shipping policy.

        :return: The name of this RequestBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RequestBody.

        Name of the shipping policy.

        :param name: The name of this RequestBody.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def number_of_items_per_shipment(self):
        """Gets the number_of_items_per_shipment of this RequestBody.

        Capacity of your store's logistics of shipment, determines number of items permitted per shipment.

        :return: The number_of_items_per_shipment of this RequestBody.
        :rtype: int
        """
        return self._number_of_items_per_shipment

    @number_of_items_per_shipment.setter
    def number_of_items_per_shipment(self, number_of_items_per_shipment):
        """Sets the number_of_items_per_shipment of this RequestBody.

        Capacity of your store's logistics of shipment, determines number of items permitted per shipment.

        :param number_of_items_per_shipment: The number_of_items_per_shipment of this RequestBody.
        :type number_of_items_per_shipment: int
        """
        if number_of_items_per_shipment is None:
            raise ValueError("Invalid value for `number_of_items_per_shipment`, must not be `None`")

        self._number_of_items_per_shipment = number_of_items_per_shipment

    @property
    def pickup_points_settings(self):
        """Gets the pickup_points_settings of this RequestBody.


        :return: The pickup_points_settings of this RequestBody.
        :rtype: PickupPointsSettings
        """
        return self._pickup_points_settings

    @pickup_points_settings.setter
    def pickup_points_settings(self, pickup_points_settings):
        """Sets the pickup_points_settings of this RequestBody.


        :param pickup_points_settings: The pickup_points_settings of this RequestBody.
        :type pickup_points_settings: PickupPointsSettings
        """
        if pickup_points_settings is None:
            raise ValueError("Invalid value for `pickup_points_settings`, must not be `None`")

        self._pickup_points_settings = pickup_points_settings

    @property
    def shipping_method(self):
        """Gets the shipping_method of this RequestBody.

        Type of shipping available for this shipping policy (carrier). Options shown on freight simulation

        :return: The shipping_method of this RequestBody.
        :rtype: str
        """
        return self._shipping_method

    @shipping_method.setter
    def shipping_method(self, shipping_method):
        """Sets the shipping_method of this RequestBody.

        Type of shipping available for this shipping policy (carrier). Options shown on freight simulation

        :param shipping_method: The shipping_method of this RequestBody.
        :type shipping_method: str
        """
        if shipping_method is None:
            raise ValueError("Invalid value for `shipping_method`, must not be `None`")

        self._shipping_method = shipping_method

    @property
    def weekend_and_holidays(self):
        """Gets the weekend_and_holidays of this RequestBody.


        :return: The weekend_and_holidays of this RequestBody.
        :rtype: WeekendAndHolidays
        """
        return self._weekend_and_holidays

    @weekend_and_holidays.setter
    def weekend_and_holidays(self, weekend_and_holidays):
        """Sets the weekend_and_holidays of this RequestBody.


        :param weekend_and_holidays: The weekend_and_holidays of this RequestBody.
        :type weekend_and_holidays: WeekendAndHolidays
        """
        if weekend_and_holidays is None:
            raise ValueError("Invalid value for `weekend_and_holidays`, must not be `None`")

        self._weekend_and_holidays = weekend_and_holidays
