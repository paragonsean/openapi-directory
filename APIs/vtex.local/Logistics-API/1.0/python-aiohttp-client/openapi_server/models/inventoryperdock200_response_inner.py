# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Inventoryperdock200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_quantity: int=None, date_of_supply_utc: str=None, delivery_channel: List[str]=None, dock_id: str=None, is_unlimited: bool=None, keep_selling_after_expiration: bool=None, reserved_quantity: int=None, sales_channel: List[str]=None, sku_id: str=None, time_to_refill: str=None, total_quantity: int=None, transfer: str=None, warehouse_id: str=None):
        """Inventoryperdock200ResponseInner - a model defined in OpenAPI

        :param available_quantity: The available_quantity of this Inventoryperdock200ResponseInner.
        :param date_of_supply_utc: The date_of_supply_utc of this Inventoryperdock200ResponseInner.
        :param delivery_channel: The delivery_channel of this Inventoryperdock200ResponseInner.
        :param dock_id: The dock_id of this Inventoryperdock200ResponseInner.
        :param is_unlimited: The is_unlimited of this Inventoryperdock200ResponseInner.
        :param keep_selling_after_expiration: The keep_selling_after_expiration of this Inventoryperdock200ResponseInner.
        :param reserved_quantity: The reserved_quantity of this Inventoryperdock200ResponseInner.
        :param sales_channel: The sales_channel of this Inventoryperdock200ResponseInner.
        :param sku_id: The sku_id of this Inventoryperdock200ResponseInner.
        :param time_to_refill: The time_to_refill of this Inventoryperdock200ResponseInner.
        :param total_quantity: The total_quantity of this Inventoryperdock200ResponseInner.
        :param transfer: The transfer of this Inventoryperdock200ResponseInner.
        :param warehouse_id: The warehouse_id of this Inventoryperdock200ResponseInner.
        """
        self.openapi_types = {
            'available_quantity': int,
            'date_of_supply_utc': str,
            'delivery_channel': List[str],
            'dock_id': str,
            'is_unlimited': bool,
            'keep_selling_after_expiration': bool,
            'reserved_quantity': int,
            'sales_channel': List[str],
            'sku_id': str,
            'time_to_refill': str,
            'total_quantity': int,
            'transfer': str,
            'warehouse_id': str
        }

        self.attribute_map = {
            'available_quantity': 'availableQuantity',
            'date_of_supply_utc': 'dateOfSupplyUtc',
            'delivery_channel': 'deliveryChannel',
            'dock_id': 'dockId',
            'is_unlimited': 'isUnlimited',
            'keep_selling_after_expiration': 'keepSellingAfterExpiration',
            'reserved_quantity': 'reservedQuantity',
            'sales_channel': 'salesChannel',
            'sku_id': 'skuId',
            'time_to_refill': 'timeToRefill',
            'total_quantity': 'totalQuantity',
            'transfer': 'transfer',
            'warehouse_id': 'warehouseId'
        }

        self._available_quantity = available_quantity
        self._date_of_supply_utc = date_of_supply_utc
        self._delivery_channel = delivery_channel
        self._dock_id = dock_id
        self._is_unlimited = is_unlimited
        self._keep_selling_after_expiration = keep_selling_after_expiration
        self._reserved_quantity = reserved_quantity
        self._sales_channel = sales_channel
        self._sku_id = sku_id
        self._time_to_refill = time_to_refill
        self._total_quantity = total_quantity
        self._transfer = transfer
        self._warehouse_id = warehouse_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Inventoryperdock200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Inventoryperdock_200_response_inner of this Inventoryperdock200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_quantity(self):
        """Gets the available_quantity of this Inventoryperdock200ResponseInner.

        Amount of items available for sale. Difference between total quantity and reserved quantity.

        :return: The available_quantity of this Inventoryperdock200ResponseInner.
        :rtype: int
        """
        return self._available_quantity

    @available_quantity.setter
    def available_quantity(self, available_quantity):
        """Sets the available_quantity of this Inventoryperdock200ResponseInner.

        Amount of items available for sale. Difference between total quantity and reserved quantity.

        :param available_quantity: The available_quantity of this Inventoryperdock200ResponseInner.
        :type available_quantity: int
        """

        self._available_quantity = available_quantity

    @property
    def date_of_supply_utc(self):
        """Gets the date_of_supply_utc of this Inventoryperdock200ResponseInner.

        Date of supply lot in UTC.

        :return: The date_of_supply_utc of this Inventoryperdock200ResponseInner.
        :rtype: str
        """
        return self._date_of_supply_utc

    @date_of_supply_utc.setter
    def date_of_supply_utc(self, date_of_supply_utc):
        """Sets the date_of_supply_utc of this Inventoryperdock200ResponseInner.

        Date of supply lot in UTC.

        :param date_of_supply_utc: The date_of_supply_utc of this Inventoryperdock200ResponseInner.
        :type date_of_supply_utc: str
        """

        self._date_of_supply_utc = date_of_supply_utc

    @property
    def delivery_channel(self):
        """Gets the delivery_channel of this Inventoryperdock200ResponseInner.

        List of delivery channels available.

        :return: The delivery_channel of this Inventoryperdock200ResponseInner.
        :rtype: List[str]
        """
        return self._delivery_channel

    @delivery_channel.setter
    def delivery_channel(self, delivery_channel):
        """Sets the delivery_channel of this Inventoryperdock200ResponseInner.

        List of delivery channels available.

        :param delivery_channel: The delivery_channel of this Inventoryperdock200ResponseInner.
        :type delivery_channel: List[str]
        """

        self._delivery_channel = delivery_channel

    @property
    def dock_id(self):
        """Gets the dock_id of this Inventoryperdock200ResponseInner.

        Dock ID.

        :return: The dock_id of this Inventoryperdock200ResponseInner.
        :rtype: str
        """
        return self._dock_id

    @dock_id.setter
    def dock_id(self, dock_id):
        """Sets the dock_id of this Inventoryperdock200ResponseInner.

        Dock ID.

        :param dock_id: The dock_id of this Inventoryperdock200ResponseInner.
        :type dock_id: str
        """

        self._dock_id = dock_id

    @property
    def is_unlimited(self):
        """Gets the is_unlimited of this Inventoryperdock200ResponseInner.

        Indicates whether the SKU's availability is unlimited (\"infinite inventory\").

        :return: The is_unlimited of this Inventoryperdock200ResponseInner.
        :rtype: bool
        """
        return self._is_unlimited

    @is_unlimited.setter
    def is_unlimited(self, is_unlimited):
        """Sets the is_unlimited of this Inventoryperdock200ResponseInner.

        Indicates whether the SKU's availability is unlimited (\"infinite inventory\").

        :param is_unlimited: The is_unlimited of this Inventoryperdock200ResponseInner.
        :type is_unlimited: bool
        """

        self._is_unlimited = is_unlimited

    @property
    def keep_selling_after_expiration(self):
        """Gets the keep_selling_after_expiration of this Inventoryperdock200ResponseInner.

        Indicates whether SKU can continue to be sold after the available quantity gets to 0.

        :return: The keep_selling_after_expiration of this Inventoryperdock200ResponseInner.
        :rtype: bool
        """
        return self._keep_selling_after_expiration

    @keep_selling_after_expiration.setter
    def keep_selling_after_expiration(self, keep_selling_after_expiration):
        """Sets the keep_selling_after_expiration of this Inventoryperdock200ResponseInner.

        Indicates whether SKU can continue to be sold after the available quantity gets to 0.

        :param keep_selling_after_expiration: The keep_selling_after_expiration of this Inventoryperdock200ResponseInner.
        :type keep_selling_after_expiration: bool
        """

        self._keep_selling_after_expiration = keep_selling_after_expiration

    @property
    def reserved_quantity(self):
        """Gets the reserved_quantity of this Inventoryperdock200ResponseInner.

        Reserved quantity of the SKU.

        :return: The reserved_quantity of this Inventoryperdock200ResponseInner.
        :rtype: int
        """
        return self._reserved_quantity

    @reserved_quantity.setter
    def reserved_quantity(self, reserved_quantity):
        """Sets the reserved_quantity of this Inventoryperdock200ResponseInner.

        Reserved quantity of the SKU.

        :param reserved_quantity: The reserved_quantity of this Inventoryperdock200ResponseInner.
        :type reserved_quantity: int
        """

        self._reserved_quantity = reserved_quantity

    @property
    def sales_channel(self):
        """Gets the sales_channel of this Inventoryperdock200ResponseInner.

        List of sales channels associated.

        :return: The sales_channel of this Inventoryperdock200ResponseInner.
        :rtype: List[str]
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this Inventoryperdock200ResponseInner.

        List of sales channels associated.

        :param sales_channel: The sales_channel of this Inventoryperdock200ResponseInner.
        :type sales_channel: List[str]
        """

        self._sales_channel = sales_channel

    @property
    def sku_id(self):
        """Gets the sku_id of this Inventoryperdock200ResponseInner.

        SKU ID.

        :return: The sku_id of this Inventoryperdock200ResponseInner.
        :rtype: str
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this Inventoryperdock200ResponseInner.

        SKU ID.

        :param sku_id: The sku_id of this Inventoryperdock200ResponseInner.
        :type sku_id: str
        """

        self._sku_id = sku_id

    @property
    def time_to_refill(self):
        """Gets the time_to_refill of this Inventoryperdock200ResponseInner.

        Time to refill (deprecated).

        :return: The time_to_refill of this Inventoryperdock200ResponseInner.
        :rtype: str
        """
        return self._time_to_refill

    @time_to_refill.setter
    def time_to_refill(self, time_to_refill):
        """Sets the time_to_refill of this Inventoryperdock200ResponseInner.

        Time to refill (deprecated).

        :param time_to_refill: The time_to_refill of this Inventoryperdock200ResponseInner.
        :type time_to_refill: str
        """

        self._time_to_refill = time_to_refill

    @property
    def total_quantity(self):
        """Gets the total_quantity of this Inventoryperdock200ResponseInner.

        Total quantity of SKU.

        :return: The total_quantity of this Inventoryperdock200ResponseInner.
        :rtype: int
        """
        return self._total_quantity

    @total_quantity.setter
    def total_quantity(self, total_quantity):
        """Sets the total_quantity of this Inventoryperdock200ResponseInner.

        Total quantity of SKU.

        :param total_quantity: The total_quantity of this Inventoryperdock200ResponseInner.
        :type total_quantity: int
        """

        self._total_quantity = total_quantity

    @property
    def transfer(self):
        """Gets the transfer of this Inventoryperdock200ResponseInner.

        Transfer.

        :return: The transfer of this Inventoryperdock200ResponseInner.
        :rtype: str
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer):
        """Sets the transfer of this Inventoryperdock200ResponseInner.

        Transfer.

        :param transfer: The transfer of this Inventoryperdock200ResponseInner.
        :type transfer: str
        """

        self._transfer = transfer

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this Inventoryperdock200ResponseInner.

        Warehouse ID.

        :return: The warehouse_id of this Inventoryperdock200ResponseInner.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this Inventoryperdock200ResponseInner.

        Warehouse ID.

        :param warehouse_id: The warehouse_id of this Inventoryperdock200ResponseInner.
        :type warehouse_id: str
        """

        self._warehouse_id = warehouse_id
