# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PickupPointsSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pickup_point_ids: List[object]=None, pickup_point_tags: List[object]=None, sellers: List[object]=None):
        """PickupPointsSettings - a model defined in OpenAPI

        :param pickup_point_ids: The pickup_point_ids of this PickupPointsSettings.
        :param pickup_point_tags: The pickup_point_tags of this PickupPointsSettings.
        :param sellers: The sellers of this PickupPointsSettings.
        """
        self.openapi_types = {
            'pickup_point_ids': List[object],
            'pickup_point_tags': List[object],
            'sellers': List[object]
        }

        self.attribute_map = {
            'pickup_point_ids': 'pickupPointIds',
            'pickup_point_tags': 'pickupPointTags',
            'sellers': 'sellers'
        }

        self._pickup_point_ids = pickup_point_ids
        self._pickup_point_tags = pickup_point_tags
        self._sellers = sellers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PickupPointsSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The pickupPointsSettings of this PickupPointsSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pickup_point_ids(self):
        """Gets the pickup_point_ids of this PickupPointsSettings.

        Insert the IDs for pickup points previously configured in your store.

        :return: The pickup_point_ids of this PickupPointsSettings.
        :rtype: List[object]
        """
        return self._pickup_point_ids

    @pickup_point_ids.setter
    def pickup_point_ids(self, pickup_point_ids):
        """Sets the pickup_point_ids of this PickupPointsSettings.

        Insert the IDs for pickup points previously configured in your store.

        :param pickup_point_ids: The pickup_point_ids of this PickupPointsSettings.
        :type pickup_point_ids: List[object]
        """
        if pickup_point_ids is None:
            raise ValueError("Invalid value for `pickup_point_ids`, must not be `None`")

        self._pickup_point_ids = pickup_point_ids

    @property
    def pickup_point_tags(self):
        """Gets the pickup_point_tags of this PickupPointsSettings.

        Insert the tags for pickup points previously configured in your store.

        :return: The pickup_point_tags of this PickupPointsSettings.
        :rtype: List[object]
        """
        return self._pickup_point_tags

    @pickup_point_tags.setter
    def pickup_point_tags(self, pickup_point_tags):
        """Sets the pickup_point_tags of this PickupPointsSettings.

        Insert the tags for pickup points previously configured in your store.

        :param pickup_point_tags: The pickup_point_tags of this PickupPointsSettings.
        :type pickup_point_tags: List[object]
        """
        if pickup_point_tags is None:
            raise ValueError("Invalid value for `pickup_point_tags`, must not be `None`")

        self._pickup_point_tags = pickup_point_tags

    @property
    def sellers(self):
        """Gets the sellers of this PickupPointsSettings.

        Sellers that will be associated with the [pickup points](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) of the shipping policy being created.

        :return: The sellers of this PickupPointsSettings.
        :rtype: List[object]
        """
        return self._sellers

    @sellers.setter
    def sellers(self, sellers):
        """Sets the sellers of this PickupPointsSettings.

        Sellers that will be associated with the [pickup points](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) of the shipping policy being created.

        :param sellers: The sellers of this PickupPointsSettings.
        :type sellers: List[object]
        """
        if sellers is None:
            raise ValueError("Invalid value for `sellers`, must not be `None`")

        self._sellers = sellers
