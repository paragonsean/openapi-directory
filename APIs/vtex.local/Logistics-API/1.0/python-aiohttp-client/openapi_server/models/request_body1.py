# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.max_dimension1 import MaxDimension1
from openapi_server.models.request_body1_delivery_schedule_settings import RequestBody1DeliveryScheduleSettings
from openapi_server import util


class RequestBody1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_on_weekends: bool=None, delivery_schedule_settings: RequestBody1DeliveryScheduleSettings=None, is_active: bool=None, max_dimension: MaxDimension1=None, name: str=None, shipping_method: str=None):
        """RequestBody1 - a model defined in OpenAPI

        :param delivery_on_weekends: The delivery_on_weekends of this RequestBody1.
        :param delivery_schedule_settings: The delivery_schedule_settings of this RequestBody1.
        :param is_active: The is_active of this RequestBody1.
        :param max_dimension: The max_dimension of this RequestBody1.
        :param name: The name of this RequestBody1.
        :param shipping_method: The shipping_method of this RequestBody1.
        """
        self.openapi_types = {
            'delivery_on_weekends': bool,
            'delivery_schedule_settings': RequestBody1DeliveryScheduleSettings,
            'is_active': bool,
            'max_dimension': MaxDimension1,
            'name': str,
            'shipping_method': str
        }

        self.attribute_map = {
            'delivery_on_weekends': 'deliveryOnWeekends',
            'delivery_schedule_settings': 'deliveryScheduleSettings',
            'is_active': 'isActive',
            'max_dimension': 'maxDimension',
            'name': 'name',
            'shipping_method': 'shippingMethod'
        }

        self._delivery_on_weekends = delivery_on_weekends
        self._delivery_schedule_settings = delivery_schedule_settings
        self._is_active = is_active
        self._max_dimension = max_dimension
        self._name = name
        self._shipping_method = shipping_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestBody1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request_body_1 of this RequestBody1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_on_weekends(self):
        """Gets the delivery_on_weekends of this RequestBody1.

        If the shipping policy (carrier) delivers on weekends

        :return: The delivery_on_weekends of this RequestBody1.
        :rtype: bool
        """
        return self._delivery_on_weekends

    @delivery_on_weekends.setter
    def delivery_on_weekends(self, delivery_on_weekends):
        """Sets the delivery_on_weekends of this RequestBody1.

        If the shipping policy (carrier) delivers on weekends

        :param delivery_on_weekends: The delivery_on_weekends of this RequestBody1.
        :type delivery_on_weekends: bool
        """
        if delivery_on_weekends is None:
            raise ValueError("Invalid value for `delivery_on_weekends`, must not be `None`")

        self._delivery_on_weekends = delivery_on_weekends

    @property
    def delivery_schedule_settings(self):
        """Gets the delivery_schedule_settings of this RequestBody1.


        :return: The delivery_schedule_settings of this RequestBody1.
        :rtype: RequestBody1DeliveryScheduleSettings
        """
        return self._delivery_schedule_settings

    @delivery_schedule_settings.setter
    def delivery_schedule_settings(self, delivery_schedule_settings):
        """Sets the delivery_schedule_settings of this RequestBody1.


        :param delivery_schedule_settings: The delivery_schedule_settings of this RequestBody1.
        :type delivery_schedule_settings: RequestBody1DeliveryScheduleSettings
        """

        self._delivery_schedule_settings = delivery_schedule_settings

    @property
    def is_active(self):
        """Gets the is_active of this RequestBody1.

        If the shipping policy is active or not.

        :return: The is_active of this RequestBody1.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this RequestBody1.

        If the shipping policy is active or not.

        :param is_active: The is_active of this RequestBody1.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def max_dimension(self):
        """Gets the max_dimension of this RequestBody1.


        :return: The max_dimension of this RequestBody1.
        :rtype: MaxDimension1
        """
        return self._max_dimension

    @max_dimension.setter
    def max_dimension(self, max_dimension):
        """Sets the max_dimension of this RequestBody1.


        :param max_dimension: The max_dimension of this RequestBody1.
        :type max_dimension: MaxDimension1
        """
        if max_dimension is None:
            raise ValueError("Invalid value for `max_dimension`, must not be `None`")

        self._max_dimension = max_dimension

    @property
    def name(self):
        """Gets the name of this RequestBody1.

        Name of the shipping policy

        :return: The name of this RequestBody1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RequestBody1.

        Name of the shipping policy

        :param name: The name of this RequestBody1.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def shipping_method(self):
        """Gets the shipping_method of this RequestBody1.

        Type of shipping available for this shipping policy (carrier). Options shown on freight simulation.

        :return: The shipping_method of this RequestBody1.
        :rtype: str
        """
        return self._shipping_method

    @shipping_method.setter
    def shipping_method(self, shipping_method):
        """Sets the shipping_method of this RequestBody1.

        Type of shipping available for this shipping policy (carrier). Options shown on freight simulation.

        :param shipping_method: The shipping_method of this RequestBody1.
        :type shipping_method: str
        """
        if shipping_method is None:
            raise ValueError("Invalid value for `shipping_method`, must not be `None`")

        self._shipping_method = shipping_method
