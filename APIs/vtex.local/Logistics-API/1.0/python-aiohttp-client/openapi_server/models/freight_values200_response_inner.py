# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FreightValues200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absolute_money_cost: float=None, country: str=None, max_volume: float=None, minimum_value_insurance: float=None, operation_type: int=None, polygon: str=None, price_percent: float=None, price_percent_by_weight: float=None, restricted_freights: List[str]=None, time_cost: str=None, weight_end: float=None, weight_start: float=None, zip_code_end: str=None, zip_code_start: str=None):
        """FreightValues200ResponseInner - a model defined in OpenAPI

        :param absolute_money_cost: The absolute_money_cost of this FreightValues200ResponseInner.
        :param country: The country of this FreightValues200ResponseInner.
        :param max_volume: The max_volume of this FreightValues200ResponseInner.
        :param minimum_value_insurance: The minimum_value_insurance of this FreightValues200ResponseInner.
        :param operation_type: The operation_type of this FreightValues200ResponseInner.
        :param polygon: The polygon of this FreightValues200ResponseInner.
        :param price_percent: The price_percent of this FreightValues200ResponseInner.
        :param price_percent_by_weight: The price_percent_by_weight of this FreightValues200ResponseInner.
        :param restricted_freights: The restricted_freights of this FreightValues200ResponseInner.
        :param time_cost: The time_cost of this FreightValues200ResponseInner.
        :param weight_end: The weight_end of this FreightValues200ResponseInner.
        :param weight_start: The weight_start of this FreightValues200ResponseInner.
        :param zip_code_end: The zip_code_end of this FreightValues200ResponseInner.
        :param zip_code_start: The zip_code_start of this FreightValues200ResponseInner.
        """
        self.openapi_types = {
            'absolute_money_cost': float,
            'country': str,
            'max_volume': float,
            'minimum_value_insurance': float,
            'operation_type': int,
            'polygon': str,
            'price_percent': float,
            'price_percent_by_weight': float,
            'restricted_freights': List[str],
            'time_cost': str,
            'weight_end': float,
            'weight_start': float,
            'zip_code_end': str,
            'zip_code_start': str
        }

        self.attribute_map = {
            'absolute_money_cost': 'absoluteMoneyCost',
            'country': 'country',
            'max_volume': 'maxVolume',
            'minimum_value_insurance': 'minimumValueInsurance',
            'operation_type': 'operationType',
            'polygon': 'polygon',
            'price_percent': 'pricePercent',
            'price_percent_by_weight': 'pricePercentByWeight',
            'restricted_freights': 'restrictedFreights',
            'time_cost': 'timeCost',
            'weight_end': 'weightEnd',
            'weight_start': 'weightStart',
            'zip_code_end': 'zipCodeEnd',
            'zip_code_start': 'zipCodeStart'
        }

        self._absolute_money_cost = absolute_money_cost
        self._country = country
        self._max_volume = max_volume
        self._minimum_value_insurance = minimum_value_insurance
        self._operation_type = operation_type
        self._polygon = polygon
        self._price_percent = price_percent
        self._price_percent_by_weight = price_percent_by_weight
        self._restricted_freights = restricted_freights
        self._time_cost = time_cost
        self._weight_end = weight_end
        self._weight_start = weight_start
        self._zip_code_end = zip_code_end
        self._zip_code_start = zip_code_start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FreightValues200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FreightValues_200_response_inner of this FreightValues200ResponseInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absolute_money_cost(self):
        """Gets the absolute_money_cost of this FreightValues200ResponseInner.


        :return: The absolute_money_cost of this FreightValues200ResponseInner.
        :rtype: float
        """
        return self._absolute_money_cost

    @absolute_money_cost.setter
    def absolute_money_cost(self, absolute_money_cost):
        """Sets the absolute_money_cost of this FreightValues200ResponseInner.


        :param absolute_money_cost: The absolute_money_cost of this FreightValues200ResponseInner.
        :type absolute_money_cost: float
        """
        if absolute_money_cost is None:
            raise ValueError("Invalid value for `absolute_money_cost`, must not be `None`")

        self._absolute_money_cost = absolute_money_cost

    @property
    def country(self):
        """Gets the country of this FreightValues200ResponseInner.


        :return: The country of this FreightValues200ResponseInner.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this FreightValues200ResponseInner.


        :param country: The country of this FreightValues200ResponseInner.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def max_volume(self):
        """Gets the max_volume of this FreightValues200ResponseInner.


        :return: The max_volume of this FreightValues200ResponseInner.
        :rtype: float
        """
        return self._max_volume

    @max_volume.setter
    def max_volume(self, max_volume):
        """Sets the max_volume of this FreightValues200ResponseInner.


        :param max_volume: The max_volume of this FreightValues200ResponseInner.
        :type max_volume: float
        """
        if max_volume is None:
            raise ValueError("Invalid value for `max_volume`, must not be `None`")

        self._max_volume = max_volume

    @property
    def minimum_value_insurance(self):
        """Gets the minimum_value_insurance of this FreightValues200ResponseInner.


        :return: The minimum_value_insurance of this FreightValues200ResponseInner.
        :rtype: float
        """
        return self._minimum_value_insurance

    @minimum_value_insurance.setter
    def minimum_value_insurance(self, minimum_value_insurance):
        """Sets the minimum_value_insurance of this FreightValues200ResponseInner.


        :param minimum_value_insurance: The minimum_value_insurance of this FreightValues200ResponseInner.
        :type minimum_value_insurance: float
        """
        if minimum_value_insurance is None:
            raise ValueError("Invalid value for `minimum_value_insurance`, must not be `None`")

        self._minimum_value_insurance = minimum_value_insurance

    @property
    def operation_type(self):
        """Gets the operation_type of this FreightValues200ResponseInner.


        :return: The operation_type of this FreightValues200ResponseInner.
        :rtype: int
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this FreightValues200ResponseInner.


        :param operation_type: The operation_type of this FreightValues200ResponseInner.
        :type operation_type: int
        """
        if operation_type is None:
            raise ValueError("Invalid value for `operation_type`, must not be `None`")

        self._operation_type = operation_type

    @property
    def polygon(self):
        """Gets the polygon of this FreightValues200ResponseInner.


        :return: The polygon of this FreightValues200ResponseInner.
        :rtype: str
        """
        return self._polygon

    @polygon.setter
    def polygon(self, polygon):
        """Sets the polygon of this FreightValues200ResponseInner.


        :param polygon: The polygon of this FreightValues200ResponseInner.
        :type polygon: str
        """
        if polygon is None:
            raise ValueError("Invalid value for `polygon`, must not be `None`")

        self._polygon = polygon

    @property
    def price_percent(self):
        """Gets the price_percent of this FreightValues200ResponseInner.


        :return: The price_percent of this FreightValues200ResponseInner.
        :rtype: float
        """
        return self._price_percent

    @price_percent.setter
    def price_percent(self, price_percent):
        """Sets the price_percent of this FreightValues200ResponseInner.


        :param price_percent: The price_percent of this FreightValues200ResponseInner.
        :type price_percent: float
        """
        if price_percent is None:
            raise ValueError("Invalid value for `price_percent`, must not be `None`")

        self._price_percent = price_percent

    @property
    def price_percent_by_weight(self):
        """Gets the price_percent_by_weight of this FreightValues200ResponseInner.


        :return: The price_percent_by_weight of this FreightValues200ResponseInner.
        :rtype: float
        """
        return self._price_percent_by_weight

    @price_percent_by_weight.setter
    def price_percent_by_weight(self, price_percent_by_weight):
        """Sets the price_percent_by_weight of this FreightValues200ResponseInner.


        :param price_percent_by_weight: The price_percent_by_weight of this FreightValues200ResponseInner.
        :type price_percent_by_weight: float
        """
        if price_percent_by_weight is None:
            raise ValueError("Invalid value for `price_percent_by_weight`, must not be `None`")

        self._price_percent_by_weight = price_percent_by_weight

    @property
    def restricted_freights(self):
        """Gets the restricted_freights of this FreightValues200ResponseInner.

        

        :return: The restricted_freights of this FreightValues200ResponseInner.
        :rtype: List[str]
        """
        return self._restricted_freights

    @restricted_freights.setter
    def restricted_freights(self, restricted_freights):
        """Sets the restricted_freights of this FreightValues200ResponseInner.

        

        :param restricted_freights: The restricted_freights of this FreightValues200ResponseInner.
        :type restricted_freights: List[str]
        """
        if restricted_freights is None:
            raise ValueError("Invalid value for `restricted_freights`, must not be `None`")

        self._restricted_freights = restricted_freights

    @property
    def time_cost(self):
        """Gets the time_cost of this FreightValues200ResponseInner.


        :return: The time_cost of this FreightValues200ResponseInner.
        :rtype: str
        """
        return self._time_cost

    @time_cost.setter
    def time_cost(self, time_cost):
        """Sets the time_cost of this FreightValues200ResponseInner.


        :param time_cost: The time_cost of this FreightValues200ResponseInner.
        :type time_cost: str
        """
        if time_cost is None:
            raise ValueError("Invalid value for `time_cost`, must not be `None`")

        self._time_cost = time_cost

    @property
    def weight_end(self):
        """Gets the weight_end of this FreightValues200ResponseInner.


        :return: The weight_end of this FreightValues200ResponseInner.
        :rtype: float
        """
        return self._weight_end

    @weight_end.setter
    def weight_end(self, weight_end):
        """Sets the weight_end of this FreightValues200ResponseInner.


        :param weight_end: The weight_end of this FreightValues200ResponseInner.
        :type weight_end: float
        """
        if weight_end is None:
            raise ValueError("Invalid value for `weight_end`, must not be `None`")

        self._weight_end = weight_end

    @property
    def weight_start(self):
        """Gets the weight_start of this FreightValues200ResponseInner.


        :return: The weight_start of this FreightValues200ResponseInner.
        :rtype: float
        """
        return self._weight_start

    @weight_start.setter
    def weight_start(self, weight_start):
        """Sets the weight_start of this FreightValues200ResponseInner.


        :param weight_start: The weight_start of this FreightValues200ResponseInner.
        :type weight_start: float
        """
        if weight_start is None:
            raise ValueError("Invalid value for `weight_start`, must not be `None`")

        self._weight_start = weight_start

    @property
    def zip_code_end(self):
        """Gets the zip_code_end of this FreightValues200ResponseInner.


        :return: The zip_code_end of this FreightValues200ResponseInner.
        :rtype: str
        """
        return self._zip_code_end

    @zip_code_end.setter
    def zip_code_end(self, zip_code_end):
        """Sets the zip_code_end of this FreightValues200ResponseInner.


        :param zip_code_end: The zip_code_end of this FreightValues200ResponseInner.
        :type zip_code_end: str
        """
        if zip_code_end is None:
            raise ValueError("Invalid value for `zip_code_end`, must not be `None`")

        self._zip_code_end = zip_code_end

    @property
    def zip_code_start(self):
        """Gets the zip_code_start of this FreightValues200ResponseInner.


        :return: The zip_code_start of this FreightValues200ResponseInner.
        :rtype: str
        """
        return self._zip_code_start

    @zip_code_start.setter
    def zip_code_start(self, zip_code_start):
        """Sets the zip_code_start of this FreightValues200ResponseInner.


        :param zip_code_start: The zip_code_start of this FreightValues200ResponseInner.
        :type zip_code_start: str
        """
        if zip_code_start is None:
            raise ValueError("Invalid value for `zip_code_start`, must not be `None`")

        self._zip_code_start = zip_code_start
