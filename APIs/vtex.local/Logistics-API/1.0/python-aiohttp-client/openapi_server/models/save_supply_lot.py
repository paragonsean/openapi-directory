# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SaveSupplyLot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_of_supply_utc: str=None, keep_selling_after_expiration: bool=None, quantity: float=None):
        """SaveSupplyLot - a model defined in OpenAPI

        :param date_of_supply_utc: The date_of_supply_utc of this SaveSupplyLot.
        :param keep_selling_after_expiration: The keep_selling_after_expiration of this SaveSupplyLot.
        :param quantity: The quantity of this SaveSupplyLot.
        """
        self.openapi_types = {
            'date_of_supply_utc': str,
            'keep_selling_after_expiration': bool,
            'quantity': float
        }

        self.attribute_map = {
            'date_of_supply_utc': 'dateOfSupplyUtc',
            'keep_selling_after_expiration': 'keepSellingAfterExpiration',
            'quantity': 'quantity'
        }

        self._date_of_supply_utc = date_of_supply_utc
        self._keep_selling_after_expiration = keep_selling_after_expiration
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SaveSupplyLot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SaveSupplyLot of this SaveSupplyLot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_of_supply_utc(self):
        """Gets the date_of_supply_utc of this SaveSupplyLot.


        :return: The date_of_supply_utc of this SaveSupplyLot.
        :rtype: str
        """
        return self._date_of_supply_utc

    @date_of_supply_utc.setter
    def date_of_supply_utc(self, date_of_supply_utc):
        """Sets the date_of_supply_utc of this SaveSupplyLot.


        :param date_of_supply_utc: The date_of_supply_utc of this SaveSupplyLot.
        :type date_of_supply_utc: str
        """
        if date_of_supply_utc is None:
            raise ValueError("Invalid value for `date_of_supply_utc`, must not be `None`")

        self._date_of_supply_utc = date_of_supply_utc

    @property
    def keep_selling_after_expiration(self):
        """Gets the keep_selling_after_expiration of this SaveSupplyLot.


        :return: The keep_selling_after_expiration of this SaveSupplyLot.
        :rtype: bool
        """
        return self._keep_selling_after_expiration

    @keep_selling_after_expiration.setter
    def keep_selling_after_expiration(self, keep_selling_after_expiration):
        """Sets the keep_selling_after_expiration of this SaveSupplyLot.


        :param keep_selling_after_expiration: The keep_selling_after_expiration of this SaveSupplyLot.
        :type keep_selling_after_expiration: bool
        """
        if keep_selling_after_expiration is None:
            raise ValueError("Invalid value for `keep_selling_after_expiration`, must not be `None`")

        self._keep_selling_after_expiration = keep_selling_after_expiration

    @property
    def quantity(self):
        """Gets the quantity of this SaveSupplyLot.


        :return: The quantity of this SaveSupplyLot.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SaveSupplyLot.


        :param quantity: The quantity of this SaveSupplyLot.
        :type quantity: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity
