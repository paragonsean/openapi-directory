# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModalSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, modals: List[object]=None, use_only_items_with_defined_modal: bool=None):
        """ModalSettings - a model defined in OpenAPI

        :param modals: The modals of this ModalSettings.
        :param use_only_items_with_defined_modal: The use_only_items_with_defined_modal of this ModalSettings.
        """
        self.openapi_types = {
            'modals': List[object],
            'use_only_items_with_defined_modal': bool
        }

        self.attribute_map = {
            'modals': 'modals',
            'use_only_items_with_defined_modal': 'useOnlyItemsWithDefinedModal'
        }

        self._modals = modals
        self._use_only_items_with_defined_modal = use_only_items_with_defined_modal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModalSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The modalSettings of this ModalSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def modals(self):
        """Gets the modals of this ModalSettings.

        Type of special freight.

        :return: The modals of this ModalSettings.
        :rtype: List[object]
        """
        return self._modals

    @modals.setter
    def modals(self, modals):
        """Sets the modals of this ModalSettings.

        Type of special freight.

        :param modals: The modals of this ModalSettings.
        :type modals: List[object]
        """
        if modals is None:
            raise ValueError("Invalid value for `modals`, must not be `None`")

        self._modals = modals

    @property
    def use_only_items_with_defined_modal(self):
        """Gets the use_only_items_with_defined_modal of this ModalSettings.

        When set as `true`, the modal's configurations will apply only for items with a defined modal.

        :return: The use_only_items_with_defined_modal of this ModalSettings.
        :rtype: bool
        """
        return self._use_only_items_with_defined_modal

    @use_only_items_with_defined_modal.setter
    def use_only_items_with_defined_modal(self, use_only_items_with_defined_modal):
        """Sets the use_only_items_with_defined_modal of this ModalSettings.

        When set as `true`, the modal's configurations will apply only for items with a defined modal.

        :param use_only_items_with_defined_modal: The use_only_items_with_defined_modal of this ModalSettings.
        :type use_only_items_with_defined_modal: bool
        """
        if use_only_items_with_defined_modal is None:
            raise ValueError("Invalid value for `use_only_items_with_defined_modal`, must not be `None`")

        self._use_only_items_with_defined_modal = use_only_items_with_defined_modal
