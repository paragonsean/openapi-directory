# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_update_pickup_point_request_address_country import CreateUpdatePickupPointRequestAddressCountry
from openapi_server.models.create_update_pickup_point_request_address_location import CreateUpdatePickupPointRequestAddressLocation
from openapi_server import util


class CreateUpdatePickupPointRequestAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, complement: str=None, country: CreateUpdatePickupPointRequestAddressCountry=None, location: CreateUpdatePickupPointRequestAddressLocation=None, neighborhood: str=None, number: str=None, postal_code: str=None, reference: str=None, state: str=None, street: str=None):
        """CreateUpdatePickupPointRequestAddress - a model defined in OpenAPI

        :param city: The city of this CreateUpdatePickupPointRequestAddress.
        :param complement: The complement of this CreateUpdatePickupPointRequestAddress.
        :param country: The country of this CreateUpdatePickupPointRequestAddress.
        :param location: The location of this CreateUpdatePickupPointRequestAddress.
        :param neighborhood: The neighborhood of this CreateUpdatePickupPointRequestAddress.
        :param number: The number of this CreateUpdatePickupPointRequestAddress.
        :param postal_code: The postal_code of this CreateUpdatePickupPointRequestAddress.
        :param reference: The reference of this CreateUpdatePickupPointRequestAddress.
        :param state: The state of this CreateUpdatePickupPointRequestAddress.
        :param street: The street of this CreateUpdatePickupPointRequestAddress.
        """
        self.openapi_types = {
            'city': str,
            'complement': str,
            'country': CreateUpdatePickupPointRequestAddressCountry,
            'location': CreateUpdatePickupPointRequestAddressLocation,
            'neighborhood': str,
            'number': str,
            'postal_code': str,
            'reference': str,
            'state': str,
            'street': str
        }

        self.attribute_map = {
            'city': 'city',
            'complement': 'complement',
            'country': 'country',
            'location': 'location',
            'neighborhood': 'neighborhood',
            'number': 'number',
            'postal_code': 'postalCode',
            'reference': 'reference',
            'state': 'state',
            'street': 'street'
        }

        self._city = city
        self._complement = complement
        self._country = country
        self._location = location
        self._neighborhood = neighborhood
        self._number = number
        self._postal_code = postal_code
        self._reference = reference
        self._state = state
        self._street = street

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUpdatePickupPointRequestAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUpdatePickupPoint_request_address of this CreateUpdatePickupPointRequestAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this CreateUpdatePickupPointRequestAddress.

        Address city.

        :return: The city of this CreateUpdatePickupPointRequestAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CreateUpdatePickupPointRequestAddress.

        Address city.

        :param city: The city of this CreateUpdatePickupPointRequestAddress.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def complement(self):
        """Gets the complement of this CreateUpdatePickupPointRequestAddress.

        Address complement.

        :return: The complement of this CreateUpdatePickupPointRequestAddress.
        :rtype: str
        """
        return self._complement

    @complement.setter
    def complement(self, complement):
        """Sets the complement of this CreateUpdatePickupPointRequestAddress.

        Address complement.

        :param complement: The complement of this CreateUpdatePickupPointRequestAddress.
        :type complement: str
        """
        if complement is None:
            raise ValueError("Invalid value for `complement`, must not be `None`")

        self._complement = complement

    @property
    def country(self):
        """Gets the country of this CreateUpdatePickupPointRequestAddress.


        :return: The country of this CreateUpdatePickupPointRequestAddress.
        :rtype: CreateUpdatePickupPointRequestAddressCountry
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CreateUpdatePickupPointRequestAddress.


        :param country: The country of this CreateUpdatePickupPointRequestAddress.
        :type country: CreateUpdatePickupPointRequestAddressCountry
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def location(self):
        """Gets the location of this CreateUpdatePickupPointRequestAddress.


        :return: The location of this CreateUpdatePickupPointRequestAddress.
        :rtype: CreateUpdatePickupPointRequestAddressLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CreateUpdatePickupPointRequestAddress.


        :param location: The location of this CreateUpdatePickupPointRequestAddress.
        :type location: CreateUpdatePickupPointRequestAddressLocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def neighborhood(self):
        """Gets the neighborhood of this CreateUpdatePickupPointRequestAddress.

        Address neighborhood.

        :return: The neighborhood of this CreateUpdatePickupPointRequestAddress.
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood):
        """Sets the neighborhood of this CreateUpdatePickupPointRequestAddress.

        Address neighborhood.

        :param neighborhood: The neighborhood of this CreateUpdatePickupPointRequestAddress.
        :type neighborhood: str
        """
        if neighborhood is None:
            raise ValueError("Invalid value for `neighborhood`, must not be `None`")

        self._neighborhood = neighborhood

    @property
    def number(self):
        """Gets the number of this CreateUpdatePickupPointRequestAddress.

        Address street number.

        :return: The number of this CreateUpdatePickupPointRequestAddress.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CreateUpdatePickupPointRequestAddress.

        Address street number.

        :param number: The number of this CreateUpdatePickupPointRequestAddress.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def postal_code(self):
        """Gets the postal_code of this CreateUpdatePickupPointRequestAddress.

        Postal code.

        :return: The postal_code of this CreateUpdatePickupPointRequestAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CreateUpdatePickupPointRequestAddress.

        Postal code.

        :param postal_code: The postal_code of this CreateUpdatePickupPointRequestAddress.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")

        self._postal_code = postal_code

    @property
    def reference(self):
        """Gets the reference of this CreateUpdatePickupPointRequestAddress.

        Complement that might help locate the shipping address more precisely in case of delivery.

        :return: The reference of this CreateUpdatePickupPointRequestAddress.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this CreateUpdatePickupPointRequestAddress.

        Complement that might help locate the shipping address more precisely in case of delivery.

        :param reference: The reference of this CreateUpdatePickupPointRequestAddress.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def state(self):
        """Gets the state of this CreateUpdatePickupPointRequestAddress.

        Address state.

        :return: The state of this CreateUpdatePickupPointRequestAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CreateUpdatePickupPointRequestAddress.

        Address state.

        :param state: The state of this CreateUpdatePickupPointRequestAddress.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def street(self):
        """Gets the street of this CreateUpdatePickupPointRequestAddress.

        Address street name.

        :return: The street of this CreateUpdatePickupPointRequestAddress.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this CreateUpdatePickupPointRequestAddress.

        Address street name.

        :param street: The street of this CreateUpdatePickupPointRequestAddress.
        :type street: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")

        self._street = street
