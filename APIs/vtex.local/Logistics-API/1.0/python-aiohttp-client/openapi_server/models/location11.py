# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.in_store11 import InStore11
from openapi_server import util


class Location11(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, delivery_point_id: str=None, in_store: InStore11=None, point: str=None, zip_code: str=None):
        """Location11 - a model defined in OpenAPI

        :param country: The country of this Location11.
        :param delivery_point_id: The delivery_point_id of this Location11.
        :param in_store: The in_store of this Location11.
        :param point: The point of this Location11.
        :param zip_code: The zip_code of this Location11.
        """
        self.openapi_types = {
            'country': str,
            'delivery_point_id': str,
            'in_store': InStore11,
            'point': str,
            'zip_code': str
        }

        self.attribute_map = {
            'country': 'country',
            'delivery_point_id': 'deliveryPointId',
            'in_store': 'inStore',
            'point': 'point',
            'zip_code': 'zipCode'
        }

        self._country = country
        self._delivery_point_id = delivery_point_id
        self._in_store = in_store
        self._point = point
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location11':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location1_1 of this Location11.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this Location11.


        :return: The country of this Location11.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Location11.


        :param country: The country of this Location11.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def delivery_point_id(self):
        """Gets the delivery_point_id of this Location11.


        :return: The delivery_point_id of this Location11.
        :rtype: str
        """
        return self._delivery_point_id

    @delivery_point_id.setter
    def delivery_point_id(self, delivery_point_id):
        """Sets the delivery_point_id of this Location11.


        :param delivery_point_id: The delivery_point_id of this Location11.
        :type delivery_point_id: str
        """
        if delivery_point_id is None:
            raise ValueError("Invalid value for `delivery_point_id`, must not be `None`")

        self._delivery_point_id = delivery_point_id

    @property
    def in_store(self):
        """Gets the in_store of this Location11.


        :return: The in_store of this Location11.
        :rtype: InStore11
        """
        return self._in_store

    @in_store.setter
    def in_store(self, in_store):
        """Sets the in_store of this Location11.


        :param in_store: The in_store of this Location11.
        :type in_store: InStore11
        """
        if in_store is None:
            raise ValueError("Invalid value for `in_store`, must not be `None`")

        self._in_store = in_store

    @property
    def point(self):
        """Gets the point of this Location11.


        :return: The point of this Location11.
        :rtype: str
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this Location11.


        :param point: The point of this Location11.
        :type point: str
        """
        if point is None:
            raise ValueError("Invalid value for `point`, must not be `None`")

        self._point = point

    @property
    def zip_code(self):
        """Gets the zip_code of this Location11.


        :return: The zip_code of this Location11.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Location11.


        :param zip_code: The zip_code of this Location11.
        :type zip_code: str
        """
        if zip_code is None:
            raise ValueError("Invalid value for `zip_code`, must not be `None`")

        self._zip_code = zip_code
