# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WarehouseDock11(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost: float=None, dock_id: str=None, time: str=None):
        """WarehouseDock11 - a model defined in OpenAPI

        :param cost: The cost of this WarehouseDock11.
        :param dock_id: The dock_id of this WarehouseDock11.
        :param time: The time of this WarehouseDock11.
        """
        self.openapi_types = {
            'cost': float,
            'dock_id': str,
            'time': str
        }

        self.attribute_map = {
            'cost': 'cost',
            'dock_id': 'dockId',
            'time': 'time'
        }

        self._cost = cost
        self._dock_id = dock_id
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WarehouseDock11':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WarehouseDock1_1 of this WarehouseDock11.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost(self):
        """Gets the cost of this WarehouseDock11.

        Extra charges added to the shipping rate when **Additional shipping costs** are configured.

        :return: The cost of this WarehouseDock11.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this WarehouseDock11.

        Extra charges added to the shipping rate when **Additional shipping costs** are configured.

        :param cost: The cost of this WarehouseDock11.
        :type cost: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def dock_id(self):
        """Gets the dock_id of this WarehouseDock11.

        Code that identifies a dock.

        :return: The dock_id of this WarehouseDock11.
        :rtype: str
        """
        return self._dock_id

    @dock_id.setter
    def dock_id(self, dock_id):
        """Sets the dock_id of this WarehouseDock11.

        Code that identifies a dock.

        :param dock_id: The dock_id of this WarehouseDock11.
        :type dock_id: str
        """
        if dock_id is None:
            raise ValueError("Invalid value for `dock_id`, must not be `None`")

        self._dock_id = dock_id

    @property
    def time(self):
        """Gets the time of this WarehouseDock11.

        This field returns the dock's processing time in days and hours. If none is configured, the request returns `00:00:00`.

        :return: The time of this WarehouseDock11.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this WarehouseDock11.

        This field returns the dock's processing time in days and hours. If none is configured, the request returns `00:00:00`.

        :param time: The time of this WarehouseDock11.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time
