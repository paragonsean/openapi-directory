# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dimension1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: int=None, length: int=None, weight: int=None, width: int=None):
        """Dimension1 - a model defined in OpenAPI

        :param height: The height of this Dimension1.
        :param length: The length of this Dimension1.
        :param weight: The weight of this Dimension1.
        :param width: The width of this Dimension1.
        """
        self.openapi_types = {
            'height': int,
            'length': int,
            'weight': int,
            'width': int
        }

        self.attribute_map = {
            'height': 'height',
            'length': 'length',
            'weight': 'weight',
            'width': 'width'
        }

        self._height = height
        self._length = length
        self._weight = weight
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dimension1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dimension_1 of this Dimension1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this Dimension1.


        :return: The height of this Dimension1.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Dimension1.


        :param height: The height of this Dimension1.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def length(self):
        """Gets the length of this Dimension1.


        :return: The length of this Dimension1.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Dimension1.


        :param length: The length of this Dimension1.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def weight(self):
        """Gets the weight of this Dimension1.


        :return: The weight of this Dimension1.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Dimension1.


        :param weight: The weight of this Dimension1.
        :type weight: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")

        self._weight = weight

    @property
    def width(self):
        """Gets the width of this Dimension1.


        :return: The width of this Dimension1.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Dimension1.


        :param width: The width of this Dimension1.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
