# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Balance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_unlimited_quantity: bool=None, reserved_quantity: int=None, total_quantity: int=None, warehouse_id: str=None, warehouse_name: str=None):
        """Balance - a model defined in OpenAPI

        :param has_unlimited_quantity: The has_unlimited_quantity of this Balance.
        :param reserved_quantity: The reserved_quantity of this Balance.
        :param total_quantity: The total_quantity of this Balance.
        :param warehouse_id: The warehouse_id of this Balance.
        :param warehouse_name: The warehouse_name of this Balance.
        """
        self.openapi_types = {
            'has_unlimited_quantity': bool,
            'reserved_quantity': int,
            'total_quantity': int,
            'warehouse_id': str,
            'warehouse_name': str
        }

        self.attribute_map = {
            'has_unlimited_quantity': 'hasUnlimitedQuantity',
            'reserved_quantity': 'reservedQuantity',
            'total_quantity': 'totalQuantity',
            'warehouse_id': 'warehouseId',
            'warehouse_name': 'warehouseName'
        }

        self._has_unlimited_quantity = has_unlimited_quantity
        self._reserved_quantity = reserved_quantity
        self._total_quantity = total_quantity
        self._warehouse_id = warehouse_id
        self._warehouse_name = warehouse_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Balance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Balance of this Balance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_unlimited_quantity(self):
        """Gets the has_unlimited_quantity of this Balance.


        :return: The has_unlimited_quantity of this Balance.
        :rtype: bool
        """
        return self._has_unlimited_quantity

    @has_unlimited_quantity.setter
    def has_unlimited_quantity(self, has_unlimited_quantity):
        """Sets the has_unlimited_quantity of this Balance.


        :param has_unlimited_quantity: The has_unlimited_quantity of this Balance.
        :type has_unlimited_quantity: bool
        """
        if has_unlimited_quantity is None:
            raise ValueError("Invalid value for `has_unlimited_quantity`, must not be `None`")

        self._has_unlimited_quantity = has_unlimited_quantity

    @property
    def reserved_quantity(self):
        """Gets the reserved_quantity of this Balance.


        :return: The reserved_quantity of this Balance.
        :rtype: int
        """
        return self._reserved_quantity

    @reserved_quantity.setter
    def reserved_quantity(self, reserved_quantity):
        """Sets the reserved_quantity of this Balance.


        :param reserved_quantity: The reserved_quantity of this Balance.
        :type reserved_quantity: int
        """
        if reserved_quantity is None:
            raise ValueError("Invalid value for `reserved_quantity`, must not be `None`")

        self._reserved_quantity = reserved_quantity

    @property
    def total_quantity(self):
        """Gets the total_quantity of this Balance.


        :return: The total_quantity of this Balance.
        :rtype: int
        """
        return self._total_quantity

    @total_quantity.setter
    def total_quantity(self, total_quantity):
        """Sets the total_quantity of this Balance.


        :param total_quantity: The total_quantity of this Balance.
        :type total_quantity: int
        """
        if total_quantity is None:
            raise ValueError("Invalid value for `total_quantity`, must not be `None`")

        self._total_quantity = total_quantity

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this Balance.


        :return: The warehouse_id of this Balance.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this Balance.


        :param warehouse_id: The warehouse_id of this Balance.
        :type warehouse_id: str
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")

        self._warehouse_id = warehouse_id

    @property
    def warehouse_name(self):
        """Gets the warehouse_name of this Balance.


        :return: The warehouse_name of this Balance.
        :rtype: str
        """
        return self._warehouse_name

    @warehouse_name.setter
    def warehouse_name(self, warehouse_name):
        """Sets the warehouse_name of this Balance.


        :param warehouse_name: The warehouse_name of this Balance.
        :type warehouse_name: str
        """
        if warehouse_name is None:
            raise ValueError("Invalid value for `warehouse_name`, must not be `None`")

        self._warehouse_name = warehouse_name
