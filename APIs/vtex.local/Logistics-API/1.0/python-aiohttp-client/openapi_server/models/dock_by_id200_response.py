# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pickup_store_info11 import PickupStoreInfo11
from openapi_server import util


class DockById200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dock_time_fake: str=None, freight_table_ids: List[str]=None, id: str=None, name: str=None, pickup_store_info: PickupStoreInfo11=None, priority: int=None, sales_channel: str=None, sales_channels: List[str]=None, time_fake_overhead: str=None, wms_end_point: str=None):
        """DockById200Response - a model defined in OpenAPI

        :param dock_time_fake: The dock_time_fake of this DockById200Response.
        :param freight_table_ids: The freight_table_ids of this DockById200Response.
        :param id: The id of this DockById200Response.
        :param name: The name of this DockById200Response.
        :param pickup_store_info: The pickup_store_info of this DockById200Response.
        :param priority: The priority of this DockById200Response.
        :param sales_channel: The sales_channel of this DockById200Response.
        :param sales_channels: The sales_channels of this DockById200Response.
        :param time_fake_overhead: The time_fake_overhead of this DockById200Response.
        :param wms_end_point: The wms_end_point of this DockById200Response.
        """
        self.openapi_types = {
            'dock_time_fake': str,
            'freight_table_ids': List[str],
            'id': str,
            'name': str,
            'pickup_store_info': PickupStoreInfo11,
            'priority': int,
            'sales_channel': str,
            'sales_channels': List[str],
            'time_fake_overhead': str,
            'wms_end_point': str
        }

        self.attribute_map = {
            'dock_time_fake': 'dockTimeFake',
            'freight_table_ids': 'freightTableIds',
            'id': 'id',
            'name': 'name',
            'pickup_store_info': 'pickupStoreInfo',
            'priority': 'priority',
            'sales_channel': 'salesChannel',
            'sales_channels': 'salesChannels',
            'time_fake_overhead': 'timeFakeOverhead',
            'wms_end_point': 'wmsEndPoint'
        }

        self._dock_time_fake = dock_time_fake
        self._freight_table_ids = freight_table_ids
        self._id = id
        self._name = name
        self._pickup_store_info = pickup_store_info
        self._priority = priority
        self._sales_channel = sales_channel
        self._sales_channels = sales_channels
        self._time_fake_overhead = time_fake_overhead
        self._wms_end_point = wms_end_point

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DockById200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DockById_200_response of this DockById200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dock_time_fake(self):
        """Gets the dock_time_fake of this DockById200Response.


        :return: The dock_time_fake of this DockById200Response.
        :rtype: str
        """
        return self._dock_time_fake

    @dock_time_fake.setter
    def dock_time_fake(self, dock_time_fake):
        """Sets the dock_time_fake of this DockById200Response.


        :param dock_time_fake: The dock_time_fake of this DockById200Response.
        :type dock_time_fake: str
        """
        if dock_time_fake is None:
            raise ValueError("Invalid value for `dock_time_fake`, must not be `None`")

        self._dock_time_fake = dock_time_fake

    @property
    def freight_table_ids(self):
        """Gets the freight_table_ids of this DockById200Response.

        

        :return: The freight_table_ids of this DockById200Response.
        :rtype: List[str]
        """
        return self._freight_table_ids

    @freight_table_ids.setter
    def freight_table_ids(self, freight_table_ids):
        """Sets the freight_table_ids of this DockById200Response.

        

        :param freight_table_ids: The freight_table_ids of this DockById200Response.
        :type freight_table_ids: List[str]
        """
        if freight_table_ids is None:
            raise ValueError("Invalid value for `freight_table_ids`, must not be `None`")

        self._freight_table_ids = freight_table_ids

    @property
    def id(self):
        """Gets the id of this DockById200Response.


        :return: The id of this DockById200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DockById200Response.


        :param id: The id of this DockById200Response.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this DockById200Response.


        :return: The name of this DockById200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DockById200Response.


        :param name: The name of this DockById200Response.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pickup_store_info(self):
        """Gets the pickup_store_info of this DockById200Response.


        :return: The pickup_store_info of this DockById200Response.
        :rtype: PickupStoreInfo11
        """
        return self._pickup_store_info

    @pickup_store_info.setter
    def pickup_store_info(self, pickup_store_info):
        """Sets the pickup_store_info of this DockById200Response.


        :param pickup_store_info: The pickup_store_info of this DockById200Response.
        :type pickup_store_info: PickupStoreInfo11
        """
        if pickup_store_info is None:
            raise ValueError("Invalid value for `pickup_store_info`, must not be `None`")

        self._pickup_store_info = pickup_store_info

    @property
    def priority(self):
        """Gets the priority of this DockById200Response.


        :return: The priority of this DockById200Response.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this DockById200Response.


        :param priority: The priority of this DockById200Response.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority

    @property
    def sales_channel(self):
        """Gets the sales_channel of this DockById200Response.


        :return: The sales_channel of this DockById200Response.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this DockById200Response.


        :param sales_channel: The sales_channel of this DockById200Response.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel

    @property
    def sales_channels(self):
        """Gets the sales_channels of this DockById200Response.

        

        :return: The sales_channels of this DockById200Response.
        :rtype: List[str]
        """
        return self._sales_channels

    @sales_channels.setter
    def sales_channels(self, sales_channels):
        """Sets the sales_channels of this DockById200Response.

        

        :param sales_channels: The sales_channels of this DockById200Response.
        :type sales_channels: List[str]
        """
        if sales_channels is None:
            raise ValueError("Invalid value for `sales_channels`, must not be `None`")

        self._sales_channels = sales_channels

    @property
    def time_fake_overhead(self):
        """Gets the time_fake_overhead of this DockById200Response.


        :return: The time_fake_overhead of this DockById200Response.
        :rtype: str
        """
        return self._time_fake_overhead

    @time_fake_overhead.setter
    def time_fake_overhead(self, time_fake_overhead):
        """Sets the time_fake_overhead of this DockById200Response.


        :param time_fake_overhead: The time_fake_overhead of this DockById200Response.
        :type time_fake_overhead: str
        """
        if time_fake_overhead is None:
            raise ValueError("Invalid value for `time_fake_overhead`, must not be `None`")

        self._time_fake_overhead = time_fake_overhead

    @property
    def wms_end_point(self):
        """Gets the wms_end_point of this DockById200Response.


        :return: The wms_end_point of this DockById200Response.
        :rtype: str
        """
        return self._wms_end_point

    @wms_end_point.setter
    def wms_end_point(self, wms_end_point):
        """Sets the wms_end_point of this DockById200Response.


        :param wms_end_point: The wms_end_point of this DockById200Response.
        :type wms_end_point: str
        """
        if wms_end_point is None:
            raise ValueError("Invalid value for `wms_end_point`, must not be `None`")

        self._wms_end_point = wms_end_point
