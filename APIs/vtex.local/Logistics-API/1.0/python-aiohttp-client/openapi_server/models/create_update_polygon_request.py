# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geo_shape1 import GeoShape1
from openapi_server import util


class CreateUpdatePolygonRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geo_shape: GeoShape1=None, name: str=None):
        """CreateUpdatePolygonRequest - a model defined in OpenAPI

        :param geo_shape: The geo_shape of this CreateUpdatePolygonRequest.
        :param name: The name of this CreateUpdatePolygonRequest.
        """
        self.openapi_types = {
            'geo_shape': GeoShape1,
            'name': str
        }

        self.attribute_map = {
            'geo_shape': 'geoShape',
            'name': 'name'
        }

        self._geo_shape = geo_shape
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUpdatePolygonRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Create_UpdatePolygonRequest of this CreateUpdatePolygonRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geo_shape(self):
        """Gets the geo_shape of this CreateUpdatePolygonRequest.


        :return: The geo_shape of this CreateUpdatePolygonRequest.
        :rtype: GeoShape1
        """
        return self._geo_shape

    @geo_shape.setter
    def geo_shape(self, geo_shape):
        """Sets the geo_shape of this CreateUpdatePolygonRequest.


        :param geo_shape: The geo_shape of this CreateUpdatePolygonRequest.
        :type geo_shape: GeoShape1
        """
        if geo_shape is None:
            raise ValueError("Invalid value for `geo_shape`, must not be `None`")

        self._geo_shape = geo_shape

    @property
    def name(self):
        """Gets the name of this CreateUpdatePolygonRequest.


        :return: The name of this CreateUpdatePolygonRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateUpdatePolygonRequest.


        :param name: The name of this CreateUpdatePolygonRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
