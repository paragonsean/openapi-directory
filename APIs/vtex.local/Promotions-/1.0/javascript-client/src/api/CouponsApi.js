/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiRnbPvtCouponPostRequest from '../model/ApiRnbPvtCouponPostRequest';
import ApiRnbPvtMultipleCouponsPostRequestInner from '../model/ApiRnbPvtMultipleCouponsPostRequestInner';
import Getall200ResponseInner from '../model/Getall200ResponseInner';
import Getarchivedbycouponcode200Response from '../model/Getarchivedbycouponcode200Response';
import Getusage200Response from '../model/Getusage200Response';
import MassiveGenerationRequest from '../model/MassiveGenerationRequest';
import UpdateRequest from '../model/UpdateRequest';

/**
* Coupons service.
* @module api/CouponsApi
* @version 1.0
*/
export default class CouponsApi {

    /**
    * Constructs a new CouponsApi. 
    * @alias module:api/CouponsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiRnbPvtCouponPost operation.
     * @callback module:api/CouponsApi~apiRnbPvtCouponPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getarchivedbycouponcode200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create coupon
     * Creates a single new coupon.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiRnbPvtCouponPostRequest} [apiRnbPvtCouponPostRequest] 
     * @param {module:api/CouponsApi~apiRnbPvtCouponPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getarchivedbycouponcode200Response}
     */
    apiRnbPvtCouponPost(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiRnbPvtCouponPostRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnbPvtCouponPost");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnbPvtCouponPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Getarchivedbycouponcode200Response;
      return this.apiClient.callApi(
        '/api/rnb/pvt/coupon/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnbPvtMultipleCouponsPost operation.
     * @callback module:api/CouponsApi~apiRnbPvtMultipleCouponsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create multiple coupons
     * Creates multiple coupons with different coupon codes. This endpoint has a throttling of 60 requests per minute.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ApiRnbPvtMultipleCouponsPostRequestInner>} [apiRnbPvtMultipleCouponsPostRequestInner] 
     * @param {module:api/CouponsApi~apiRnbPvtMultipleCouponsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    apiRnbPvtMultipleCouponsPost(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiRnbPvtMultipleCouponsPostRequestInner'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnbPvtMultipleCouponsPost");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnbPvtMultipleCouponsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/rnb/pvt/multiple-coupons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archivebycouponcode operation.
     * @callback module:api/CouponsApi~archivebycouponcodeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive coupon by coupon code
     * Archives a specifc coupon by its coupon code.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} couponCode Coupon Code
     * @param {module:api/CouponsApi~archivebycouponcodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    archivebycouponcode(contentType, accept, couponCode, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling archivebycouponcode");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling archivebycouponcode");
      }
      // verify the required parameter 'couponCode' is set
      if (couponCode === undefined || couponCode === null) {
        throw new Error("Missing the required parameter 'couponCode' when calling archivebycouponcode");
      }

      let pathParams = {
        'couponCode': couponCode
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/rnb/pvt/archive/coupon/{couponCode}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getall operation.
     * @callback module:api/CouponsApi~getallCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Getall200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all coupons
     *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     Retrieves all coupons from an account.
     * @param {String} contentType 
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:api/CouponsApi~getallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Getall200ResponseInner>}
     */
    getall(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getall");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getall");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Getall200ResponseInner];
      return this.apiClient.callApi(
        '/api/rnb/pvt/coupon', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getarchivedbycouponcode operation.
     * @callback module:api/CouponsApi~getarchivedbycouponcodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getarchivedbycouponcode200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get archived coupon by coupon code
     * Retrieves a specific archived coupon by its coupon code.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} couponCode Coupon Code
     * @param {module:api/CouponsApi~getarchivedbycouponcodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getarchivedbycouponcode200Response}
     */
    getarchivedbycouponcode(contentType, accept, couponCode, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getarchivedbycouponcode");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getarchivedbycouponcode");
      }
      // verify the required parameter 'couponCode' is set
      if (couponCode === undefined || couponCode === null) {
        throw new Error("Missing the required parameter 'couponCode' when calling getarchivedbycouponcode");
      }

      let pathParams = {
        'couponCode': couponCode
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Getarchivedbycouponcode200Response;
      return this.apiClient.callApi(
        '/api/rnb/pvt/archive/coupon/{couponCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getbycouponcode operation.
     * @callback module:api/CouponsApi~getbycouponcodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getarchivedbycouponcode200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get coupon by coupon code
     * Retrieves a specific coupon by its coupon code.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} couponCode Coupon Code
     * @param {module:api/CouponsApi~getbycouponcodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getarchivedbycouponcode200Response}
     */
    getbycouponcode(contentType, accept, couponCode, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getbycouponcode");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getbycouponcode");
      }
      // verify the required parameter 'couponCode' is set
      if (couponCode === undefined || couponCode === null) {
        throw new Error("Missing the required parameter 'couponCode' when calling getbycouponcode");
      }

      let pathParams = {
        'couponCode': couponCode
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Getarchivedbycouponcode200Response;
      return this.apiClient.callApi(
        '/api/rnb/pvt/coupon/{couponCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getusage operation.
     * @callback module:api/CouponsApi~getusageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getusage200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get coupon usage
     * Retrieves information about the coupon usage.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} couponCode Coupon Code
     * @param {module:api/CouponsApi~getusageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getusage200Response}
     */
    getusage(contentType, accept, couponCode, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getusage");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getusage");
      }
      // verify the required parameter 'couponCode' is set
      if (couponCode === undefined || couponCode === null) {
        throw new Error("Missing the required parameter 'couponCode' when calling getusage");
      }

      let pathParams = {
        'couponCode': couponCode
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Getusage200Response;
      return this.apiClient.callApi(
        '/api/rnb/pvt/coupon/usage/{couponCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the massiveGeneration operation.
     * @callback module:api/CouponsApi~massiveGenerationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Coupon Massive Generation
     * Generates a massive amount of coupons
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {Number} quantity Quantity of coupons to generate
     * @param {module:model/MassiveGenerationRequest} massiveGenerationRequest 
     * @param {module:api/CouponsApi~massiveGenerationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    massiveGeneration(contentType, accept, quantity, massiveGenerationRequest, callback) {
      let postBody = massiveGenerationRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling massiveGeneration");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling massiveGeneration");
      }
      // verify the required parameter 'quantity' is set
      if (quantity === undefined || quantity === null) {
        throw new Error("Missing the required parameter 'quantity' when calling massiveGeneration");
      }
      // verify the required parameter 'massiveGenerationRequest' is set
      if (massiveGenerationRequest === undefined || massiveGenerationRequest === null) {
        throw new Error("Missing the required parameter 'massiveGenerationRequest' when calling massiveGeneration");
      }

      let pathParams = {
      };
      let queryParams = {
        'quantity': quantity
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/api/rnb/pvt/coupons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unarchivebycouponcode operation.
     * @callback module:api/CouponsApi~unarchivebycouponcodeCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unarchive coupon by coupon code
     * Unarchives a specifc coupon by its coupon code.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} couponCode Coupon Code
     * @param {module:api/CouponsApi~unarchivebycouponcodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    unarchivebycouponcode(contentType, accept, couponCode, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling unarchivebycouponcode");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling unarchivebycouponcode");
      }
      // verify the required parameter 'couponCode' is set
      if (couponCode === undefined || couponCode === null) {
        throw new Error("Missing the required parameter 'couponCode' when calling unarchivebycouponcode");
      }

      let pathParams = {
        'couponCode': couponCode
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/rnb/pvt/unarchive/coupon/{couponCode}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/CouponsApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getarchivedbycouponcode200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update coupon
     * Updates information of a specific coupon.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:model/UpdateRequest} updateRequest 
     * @param {module:api/CouponsApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getarchivedbycouponcode200Response}
     */
    update(contentType, accept, updateRequest, callback) {
      let postBody = updateRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling update");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling update");
      }
      // verify the required parameter 'updateRequest' is set
      if (updateRequest === undefined || updateRequest === null) {
        throw new Error("Missing the required parameter 'updateRequest' when calling update");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Getarchivedbycouponcode200Response;
      return this.apiClient.callApi(
        '/api/rnb/pvt/coupon', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
