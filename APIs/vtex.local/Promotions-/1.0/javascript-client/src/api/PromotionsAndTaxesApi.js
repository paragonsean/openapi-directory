/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateOrUpdateCalculatorConfiguration200Response from '../model/CreateOrUpdateCalculatorConfiguration200Response';
import CreateOrUpdateCalculatorConfigurationRequest from '../model/CreateOrUpdateCalculatorConfigurationRequest';
import GetAllBenefits200Response from '../model/GetAllBenefits200Response';
import GetAllTaxes200Response from '../model/GetAllTaxes200Response';
import GetArchivedPromotions200Response from '../model/GetArchivedPromotions200Response';
import GetArchivedTaxes200Response from '../model/GetArchivedTaxes200Response';
import GetCalculatorConfigurationById200Response from '../model/GetCalculatorConfigurationById200Response';
import GetCalculatorConfigurationById200Response1 from '../model/GetCalculatorConfigurationById200Response1';

/**
* PromotionsAndTaxes service.
* @module api/PromotionsAndTaxesApi
* @version 1.0
*/
export default class PromotionsAndTaxesApi {

    /**
    * Constructs a new PromotionsAndTaxesApi. 
    * @alias module:api/PromotionsAndTaxesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiRnbPvtImportCalculatorConfigurationPost operation.
     * @callback module:api/PromotionsAndTaxesApi~apiRnbPvtImportCalculatorConfigurationPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Multiple SKU Promotion
     * Creates a Multiple SKU Promotion. This scenario allows to create a single promotion for multiples SKUs with the Percentage Effect.   > ⚠️   >  > The limit of SKUs on a Multiple Effects promotion is 400.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} xVTEXCalculatorName Promotion Name.
     * @param {String} xVTEXStartDate Promotion start date.
     * @param {String} xVTEXEndDate Promotion end date.
     * @param {Boolean} xVTEXAccumulateWithManualPrices Condition that will accumulate the Promotion with manual prices or not.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [xVTEXCumulative] Defines if the Promotion is cumulative with other promotions.
     * @param {String} [xVTEXClusterOperator] This header allows implementing the Promotion in multiples client clusters. You can set the value as `all` - the Promotion will be valid to all the clusters - or `any` - the Promotion will be valid to any of the clusters.
     * @param {String} [xVTEXClusterExpression] Cluster that will be included in the Promotion. To add multiple clusters, create a header for each one of them.
     * @param {File} [body] 
     * @param {module:api/PromotionsAndTaxesApi~apiRnbPvtImportCalculatorConfigurationPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRnbPvtImportCalculatorConfigurationPost(contentType, accept, xVTEXCalculatorName, xVTEXStartDate, xVTEXEndDate, xVTEXAccumulateWithManualPrices, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnbPvtImportCalculatorConfigurationPost");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnbPvtImportCalculatorConfigurationPost");
      }
      // verify the required parameter 'xVTEXCalculatorName' is set
      if (xVTEXCalculatorName === undefined || xVTEXCalculatorName === null) {
        throw new Error("Missing the required parameter 'xVTEXCalculatorName' when calling apiRnbPvtImportCalculatorConfigurationPost");
      }
      // verify the required parameter 'xVTEXStartDate' is set
      if (xVTEXStartDate === undefined || xVTEXStartDate === null) {
        throw new Error("Missing the required parameter 'xVTEXStartDate' when calling apiRnbPvtImportCalculatorConfigurationPost");
      }
      // verify the required parameter 'xVTEXEndDate' is set
      if (xVTEXEndDate === undefined || xVTEXEndDate === null) {
        throw new Error("Missing the required parameter 'xVTEXEndDate' when calling apiRnbPvtImportCalculatorConfigurationPost");
      }
      // verify the required parameter 'xVTEXAccumulateWithManualPrices' is set
      if (xVTEXAccumulateWithManualPrices === undefined || xVTEXAccumulateWithManualPrices === null) {
        throw new Error("Missing the required parameter 'xVTEXAccumulateWithManualPrices' when calling apiRnbPvtImportCalculatorConfigurationPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept,
        'X-VTEX-calculator-name': xVTEXCalculatorName,
        'X-VTEX-cumulative': opts['xVTEXCumulative'],
        'X-VTEX-cluster-operator': opts['xVTEXClusterOperator'],
        'X-VTEX-cluster-expression': opts['xVTEXClusterExpression'],
        'X-VTEX-start-date': xVTEXStartDate,
        'X-VTEX-end-date': xVTEXEndDate,
        'X-VTEX-accumulate-with-manual-prices': xVTEXAccumulateWithManualPrices
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['text/csv'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rnb/pvt/import/calculatorConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRnbPvtImportCalculatorConfigurationPromotionIdPut operation.
     * @callback module:api/PromotionsAndTaxesApi~apiRnbPvtImportCalculatorConfigurationPromotionIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Multiple SKU Promotion
     * Updates information from a Multiple SKU Promotion. This scenario allows to create a single promotion for multiples SKUs with the Percentage Effect.    > ⚠️   >  > The limit of SKUs on a Multiple Effects promotion is 400.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} xVTEXCalculatorName Promotion Name.
     * @param {String} xVTEXStartDate Promotion start date.
     * @param {String} xVTEXEndDate Promotion end date.
     * @param {Boolean} xVTEXAccumulateWithManualPrices Condition that will accumulate the Promotion with manual prices or not.
     * @param {String} promotionId Promotion unique identifier.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [xVTEXCumulative] Defines if the Promotion is cumulative with other promotions.
     * @param {String} [xVTEXClusterOperator] This header allows implementing the Promotion in multiples client clusters. You can set the value as `all` - the Promotion will be valid to all the clusters - or `any` - the Promotion will be valid to any of the clusters.
     * @param {String} [xVTEXClusterExpression] Cluster that will be included in the Promotion. To add multiple clusters, create a header for each one of them.
     * @param {File} [body] 
     * @param {module:api/PromotionsAndTaxesApi~apiRnbPvtImportCalculatorConfigurationPromotionIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiRnbPvtImportCalculatorConfigurationPromotionIdPut(contentType, accept, xVTEXCalculatorName, xVTEXStartDate, xVTEXEndDate, xVTEXAccumulateWithManualPrices, promotionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiRnbPvtImportCalculatorConfigurationPromotionIdPut");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiRnbPvtImportCalculatorConfigurationPromotionIdPut");
      }
      // verify the required parameter 'xVTEXCalculatorName' is set
      if (xVTEXCalculatorName === undefined || xVTEXCalculatorName === null) {
        throw new Error("Missing the required parameter 'xVTEXCalculatorName' when calling apiRnbPvtImportCalculatorConfigurationPromotionIdPut");
      }
      // verify the required parameter 'xVTEXStartDate' is set
      if (xVTEXStartDate === undefined || xVTEXStartDate === null) {
        throw new Error("Missing the required parameter 'xVTEXStartDate' when calling apiRnbPvtImportCalculatorConfigurationPromotionIdPut");
      }
      // verify the required parameter 'xVTEXEndDate' is set
      if (xVTEXEndDate === undefined || xVTEXEndDate === null) {
        throw new Error("Missing the required parameter 'xVTEXEndDate' when calling apiRnbPvtImportCalculatorConfigurationPromotionIdPut");
      }
      // verify the required parameter 'xVTEXAccumulateWithManualPrices' is set
      if (xVTEXAccumulateWithManualPrices === undefined || xVTEXAccumulateWithManualPrices === null) {
        throw new Error("Missing the required parameter 'xVTEXAccumulateWithManualPrices' when calling apiRnbPvtImportCalculatorConfigurationPromotionIdPut");
      }
      // verify the required parameter 'promotionId' is set
      if (promotionId === undefined || promotionId === null) {
        throw new Error("Missing the required parameter 'promotionId' when calling apiRnbPvtImportCalculatorConfigurationPromotionIdPut");
      }

      let pathParams = {
        'promotionId': promotionId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept,
        'X-VTEX-calculator-name': xVTEXCalculatorName,
        'X-VTEX-cumulative': opts['xVTEXCumulative'],
        'X-VTEX-cluster-operator': opts['xVTEXClusterOperator'],
        'X-VTEX-cluster-expression': opts['xVTEXClusterExpression'],
        'X-VTEX-start-date': xVTEXStartDate,
        'X-VTEX-end-date': xVTEXEndDate,
        'X-VTEX-accumulate-with-manual-prices': xVTEXAccumulateWithManualPrices
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['text/csv'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rnb/pvt/import/calculatorConfiguration/{promotionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archivePromotion operation.
     * @callback module:api/PromotionsAndTaxesApi~archivePromotionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive Promotion or Tax
     * Archives a Promotion or Tax by its ID.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} idCalculatorConfiguration Promotion ID or tax ID.
     * @param {module:api/PromotionsAndTaxesApi~archivePromotionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    archivePromotion(contentType, accept, idCalculatorConfiguration, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling archivePromotion");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling archivePromotion");
      }
      // verify the required parameter 'idCalculatorConfiguration' is set
      if (idCalculatorConfiguration === undefined || idCalculatorConfiguration === null) {
        throw new Error("Missing the required parameter 'idCalculatorConfiguration' when calling archivePromotion");
      }

      let pathParams = {
        'idCalculatorConfiguration': idCalculatorConfiguration
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rnb/pvt/archive/calculatorConfiguration/{idCalculatorConfiguration}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrUpdateCalculatorConfiguration operation.
     * @callback module:api/PromotionsAndTaxesApi~createOrUpdateCalculatorConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrUpdateCalculatorConfiguration200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or Update Promotion or Tax
     * Creates or updates a specific Promotion by its Promotion ID or a specific Tax by its Tax ID.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:model/CreateOrUpdateCalculatorConfigurationRequest} createOrUpdateCalculatorConfigurationRequest 
     * @param {module:api/PromotionsAndTaxesApi~createOrUpdateCalculatorConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrUpdateCalculatorConfiguration200Response}
     */
    createOrUpdateCalculatorConfiguration(contentType, accept, createOrUpdateCalculatorConfigurationRequest, callback) {
      let postBody = createOrUpdateCalculatorConfigurationRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createOrUpdateCalculatorConfiguration");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createOrUpdateCalculatorConfiguration");
      }
      // verify the required parameter 'createOrUpdateCalculatorConfigurationRequest' is set
      if (createOrUpdateCalculatorConfigurationRequest === undefined || createOrUpdateCalculatorConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'createOrUpdateCalculatorConfigurationRequest' when calling createOrUpdateCalculatorConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOrUpdateCalculatorConfiguration200Response;
      return this.apiClient.callApi(
        '/api/rnb/pvt/calculatorconfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllBenefits operation.
     * @callback module:api/PromotionsAndTaxesApi~getAllBenefitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllBenefits200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Promotions
     * Retrieves all promotions from an account.     > 📘 Onboarding guide   >  > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about the Promotions and is organized by focusing on the developer's journey.    
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/PromotionsAndTaxesApi~getAllBenefitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllBenefits200Response}
     */
    getAllBenefits(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getAllBenefits");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getAllBenefits");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllBenefits200Response;
      return this.apiClient.callApi(
        '/api/rnb/pvt/benefits/calculatorconfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTaxes operation.
     * @callback module:api/PromotionsAndTaxesApi~getAllTaxesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllTaxes200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All Taxes
     * Retrieves all taxes from an account.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/PromotionsAndTaxesApi~getAllTaxesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllTaxes200Response}
     */
    getAllTaxes(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getAllTaxes");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getAllTaxes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllTaxes200Response;
      return this.apiClient.callApi(
        '/api/rnb/pvt/taxes/calculatorconfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArchivedPromotions operation.
     * @callback module:api/PromotionsAndTaxesApi~getArchivedPromotionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetArchivedPromotions200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Archived Promotions
     * Lists all archived promotions.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/PromotionsAndTaxesApi~getArchivedPromotionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetArchivedPromotions200Response}
     */
    getArchivedPromotions(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getArchivedPromotions");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getArchivedPromotions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetArchivedPromotions200Response;
      return this.apiClient.callApi(
        '/api/rnb/pvt/archive/benefits/calculatorConfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArchivedTaxes operation.
     * @callback module:api/PromotionsAndTaxesApi~getArchivedTaxesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetArchivedTaxes200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Archived Taxes
     * Lists all archived taxes.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/PromotionsAndTaxesApi~getArchivedTaxesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetArchivedTaxes200Response}
     */
    getArchivedTaxes(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getArchivedTaxes");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getArchivedTaxes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetArchivedTaxes200Response;
      return this.apiClient.callApi(
        '/api/rnb/pvt/archive/taxes/calculatorConfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCalculatorConfigurationById operation.
     * @callback module:api/PromotionsAndTaxesApi~getCalculatorConfigurationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCalculatorConfigurationById200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Promotion or Tax by ID
     * Retrieves a specific promotion by its Promotion ID or a specific tax by its Tax ID.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} idCalculatorConfiguration Promotion ID or tax ID.
     * @param {module:api/PromotionsAndTaxesApi~getCalculatorConfigurationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCalculatorConfigurationById200Response}
     */
    getCalculatorConfigurationById(contentType, accept, idCalculatorConfiguration, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getCalculatorConfigurationById");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getCalculatorConfigurationById");
      }
      // verify the required parameter 'idCalculatorConfiguration' is set
      if (idCalculatorConfiguration === undefined || idCalculatorConfiguration === null) {
        throw new Error("Missing the required parameter 'idCalculatorConfiguration' when calling getCalculatorConfigurationById");
      }

      let pathParams = {
        'idCalculatorConfiguration': idCalculatorConfiguration
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['Promotion', 'Tax'];
      let returnType = GetCalculatorConfigurationById200Response;
      return this.apiClient.callApi(
        '/api/rnb/pvt/calculatorconfiguration/{idCalculatorConfiguration}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unarchivePromotion operation.
     * @callback module:api/PromotionsAndTaxesApi~unarchivePromotionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unarchive Promotion or Tax
     * Unarchives a Promotion or Tax by its ID.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} idCalculatorConfiguration Promotion ID or tax ID.
     * @param {module:api/PromotionsAndTaxesApi~unarchivePromotionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unarchivePromotion(contentType, accept, idCalculatorConfiguration, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling unarchivePromotion");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling unarchivePromotion");
      }
      // verify the required parameter 'idCalculatorConfiguration' is set
      if (idCalculatorConfiguration === undefined || idCalculatorConfiguration === null) {
        throw new Error("Missing the required parameter 'idCalculatorConfiguration' when calling unarchivePromotion");
      }

      let pathParams = {
        'idCalculatorConfiguration': idCalculatorConfiguration
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/rnb/pvt/unarchive/calculatorConfiguration/{idCalculatorConfiguration}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
