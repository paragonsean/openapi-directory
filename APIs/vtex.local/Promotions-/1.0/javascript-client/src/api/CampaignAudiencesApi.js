/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Getcampaignaudiences200ResponseInner from '../model/Getcampaignaudiences200ResponseInner';
import Getcampaignconfiguration200Response from '../model/Getcampaignconfiguration200Response';
import Setcampaignconfiguration200Response from '../model/Setcampaignconfiguration200Response';
import SetcampaignconfigurationRequest from '../model/SetcampaignconfigurationRequest';

/**
* CampaignAudiences service.
* @module api/CampaignAudiencesApi
* @version 1.0
*/
export default class CampaignAudiencesApi {

    /**
    * Constructs a new CampaignAudiencesApi. 
    * @alias module:api/CampaignAudiencesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getcampaignaudiences operation.
     * @callback module:api/CampaignAudiencesApi~getcampaignaudiencesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Getcampaignaudiences200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all campaign audiences
     * Retrieves a list of all campaign audiences and their respective configurations.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/CampaignAudiencesApi~getcampaignaudiencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Getcampaignaudiences200ResponseInner>}
     */
    getcampaignaudiences(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getcampaignaudiences");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getcampaignaudiences");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Getcampaignaudiences200ResponseInner];
      return this.apiClient.callApi(
        '/api/rnb/pvt/campaignConfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getcampaignconfiguration operation.
     * @callback module:api/CampaignAudiencesApi~getcampaignconfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getcampaignconfiguration200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get campaign audience configuration
     * Retrieves a specific campaign audience configuration by its ID. This API uses the campaign ID, not the campaign name.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} campaignId Campaign audience unique identifier.
     * @param {module:api/CampaignAudiencesApi~getcampaignconfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getcampaignconfiguration200Response}
     */
    getcampaignconfiguration(contentType, accept, campaignId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getcampaignconfiguration");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getcampaignconfiguration");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getcampaignconfiguration");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Getcampaignconfiguration200Response;
      return this.apiClient.callApi(
        '/api/rnb/pvt/campaignConfiguration/{campaignId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setcampaignconfiguration operation.
     * @callback module:api/CampaignAudiencesApi~setcampaignconfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Setcampaignconfiguration200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create campaign audience
     * Creates a new campaign audience.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:model/SetcampaignconfigurationRequest} setcampaignconfigurationRequest 
     * @param {module:api/CampaignAudiencesApi~setcampaignconfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Setcampaignconfiguration200Response}
     */
    setcampaignconfiguration(contentType, accept, setcampaignconfigurationRequest, callback) {
      let postBody = setcampaignconfigurationRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling setcampaignconfiguration");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling setcampaignconfiguration");
      }
      // verify the required parameter 'setcampaignconfigurationRequest' is set
      if (setcampaignconfigurationRequest === undefined || setcampaignconfigurationRequest === null) {
        throw new Error("Missing the required parameter 'setcampaignconfigurationRequest' when calling setcampaignconfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Setcampaignconfiguration200Response;
      return this.apiClient.callApi(
        '/api/rnb/pvt/campaignConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
