/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateOrUpdateCalculatorConfigurationRequestAffiliatesInner from './CreateOrUpdateCalculatorConfigurationRequestAffiliatesInner';
import CreateOrUpdateCalculatorConfigurationRequestBrandsInner from './CreateOrUpdateCalculatorConfigurationRequestBrandsInner';
import CreateOrUpdateCalculatorConfigurationRequestCategoriesInner from './CreateOrUpdateCalculatorConfigurationRequestCategoriesInner';
import CreateOrUpdateCalculatorConfigurationRequestCollectionsInner from './CreateOrUpdateCalculatorConfigurationRequestCollectionsInner';
import CreateOrUpdateCalculatorConfigurationRequestPaymentsMethodsInner from './CreateOrUpdateCalculatorConfigurationRequestPaymentsMethodsInner';
import CreateOrUpdateCalculatorConfigurationRequestProductsInner from './CreateOrUpdateCalculatorConfigurationRequestProductsInner';
import CreateOrUpdateCalculatorConfigurationRequestSkusGift from './CreateOrUpdateCalculatorConfigurationRequestSkusGift';
import CreateOrUpdateCalculatorConfigurationRequestSkusInner from './CreateOrUpdateCalculatorConfigurationRequestSkusInner';
import CreateOrUpdateCalculatorConfigurationRequestZipCodeRangesInner from './CreateOrUpdateCalculatorConfigurationRequestZipCodeRangesInner';

/**
 * The CreateOrUpdateCalculatorConfigurationRequest model module.
 * @module model/CreateOrUpdateCalculatorConfigurationRequest
 * @version 1.0
 */
class CreateOrUpdateCalculatorConfigurationRequest {
    /**
     * Constructs a new <code>CreateOrUpdateCalculatorConfigurationRequest</code>.
     * @alias module:model/CreateOrUpdateCalculatorConfigurationRequest
     */
    constructor() { 
        
        CreateOrUpdateCalculatorConfigurationRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateOrUpdateCalculatorConfigurationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateOrUpdateCalculatorConfigurationRequest} obj Optional instance to populate.
     * @return {module:model/CreateOrUpdateCalculatorConfigurationRequest} The populated <code>CreateOrUpdateCalculatorConfigurationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateOrUpdateCalculatorConfigurationRequest();

            if (data.hasOwnProperty('absoluteShippingDiscountValue')) {
                obj['absoluteShippingDiscountValue'] = ApiClient.convertToType(data['absoluteShippingDiscountValue'], 'Number');
            }
            if (data.hasOwnProperty('accumulateWithManualPrice')) {
                obj['accumulateWithManualPrice'] = ApiClient.convertToType(data['accumulateWithManualPrice'], 'Boolean');
            }
            if (data.hasOwnProperty('activateGiftsMultiplier')) {
                obj['activateGiftsMultiplier'] = ApiClient.convertToType(data['activateGiftsMultiplier'], 'Boolean');
            }
            if (data.hasOwnProperty('activeDaysOfWeek')) {
                obj['activeDaysOfWeek'] = ApiClient.convertToType(data['activeDaysOfWeek'], ['String']);
            }
            if (data.hasOwnProperty('affiliates')) {
                obj['affiliates'] = ApiClient.convertToType(data['affiliates'], [CreateOrUpdateCalculatorConfigurationRequestAffiliatesInner]);
            }
            if (data.hasOwnProperty('applyToAllShippings')) {
                obj['applyToAllShippings'] = ApiClient.convertToType(data['applyToAllShippings'], 'Boolean');
            }
            if (data.hasOwnProperty('areSalesChannelIdsExclusive')) {
                obj['areSalesChannelIdsExclusive'] = ApiClient.convertToType(data['areSalesChannelIdsExclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('beginDateUtc')) {
                obj['beginDateUtc'] = ApiClient.convertToType(data['beginDateUtc'], 'String');
            }
            if (data.hasOwnProperty('brands')) {
                obj['brands'] = ApiClient.convertToType(data['brands'], [CreateOrUpdateCalculatorConfigurationRequestBrandsInner]);
            }
            if (data.hasOwnProperty('brandsAreInclusive')) {
                obj['brandsAreInclusive'] = ApiClient.convertToType(data['brandsAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('campaigns')) {
                obj['campaigns'] = ApiClient.convertToType(data['campaigns'], [Object]);
            }
            if (data.hasOwnProperty('cardIssuers')) {
                obj['cardIssuers'] = ApiClient.convertToType(data['cardIssuers'], [Object]);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [CreateOrUpdateCalculatorConfigurationRequestCategoriesInner]);
            }
            if (data.hasOwnProperty('categoriesAreInclusive')) {
                obj['categoriesAreInclusive'] = ApiClient.convertToType(data['categoriesAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('clusterExpressions')) {
                obj['clusterExpressions'] = ApiClient.convertToType(data['clusterExpressions'], ['String']);
            }
            if (data.hasOwnProperty('collections')) {
                obj['collections'] = ApiClient.convertToType(data['collections'], [CreateOrUpdateCalculatorConfigurationRequestCollectionsInner]);
            }
            if (data.hasOwnProperty('collections1BuyTogether')) {
                obj['collections1BuyTogether'] = ApiClient.convertToType(data['collections1BuyTogether'], ['String']);
            }
            if (data.hasOwnProperty('collections2BuyTogether')) {
                obj['collections2BuyTogether'] = ApiClient.convertToType(data['collections2BuyTogether'], [Object]);
            }
            if (data.hasOwnProperty('collectionsIsInclusive')) {
                obj['collectionsIsInclusive'] = ApiClient.convertToType(data['collectionsIsInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('compareListPriceAndPrice')) {
                obj['compareListPriceAndPrice'] = ApiClient.convertToType(data['compareListPriceAndPrice'], 'Boolean');
            }
            if (data.hasOwnProperty('conditionsIds')) {
                obj['conditionsIds'] = ApiClient.convertToType(data['conditionsIds'], ['String']);
            }
            if (data.hasOwnProperty('coupon')) {
                obj['coupon'] = ApiClient.convertToType(data['coupon'], [Object]);
            }
            if (data.hasOwnProperty('cumulative')) {
                obj['cumulative'] = ApiClient.convertToType(data['cumulative'], 'Boolean');
            }
            if (data.hasOwnProperty('daysAgoOfPurchases')) {
                obj['daysAgoOfPurchases'] = ApiClient.convertToType(data['daysAgoOfPurchases'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('disableDeal')) {
                obj['disableDeal'] = ApiClient.convertToType(data['disableDeal'], 'Boolean');
            }
            if (data.hasOwnProperty('discountType')) {
                obj['discountType'] = ApiClient.convertToType(data['discountType'], 'String');
            }
            if (data.hasOwnProperty('enableBuyTogetherPerSku')) {
                obj['enableBuyTogetherPerSku'] = ApiClient.convertToType(data['enableBuyTogetherPerSku'], 'Boolean');
            }
            if (data.hasOwnProperty('endDateUtc')) {
                obj['endDateUtc'] = ApiClient.convertToType(data['endDateUtc'], 'String');
            }
            if (data.hasOwnProperty('firstBuyIsProfileOptimistic')) {
                obj['firstBuyIsProfileOptimistic'] = ApiClient.convertToType(data['firstBuyIsProfileOptimistic'], 'Boolean');
            }
            if (data.hasOwnProperty('giftListTypes')) {
                obj['giftListTypes'] = ApiClient.convertToType(data['giftListTypes'], ['String']);
            }
            if (data.hasOwnProperty('idCalculatorConfiguration')) {
                obj['idCalculatorConfiguration'] = ApiClient.convertToType(data['idCalculatorConfiguration'], 'String');
            }
            if (data.hasOwnProperty('idSeller')) {
                obj['idSeller'] = ApiClient.convertToType(data['idSeller'], 'String');
            }
            if (data.hasOwnProperty('idSellerIsInclusive')) {
                obj['idSellerIsInclusive'] = ApiClient.convertToType(data['idSellerIsInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('idsSalesChannel')) {
                obj['idsSalesChannel'] = ApiClient.convertToType(data['idsSalesChannel'], ['String']);
            }
            if (data.hasOwnProperty('installment')) {
                obj['installment'] = ApiClient.convertToType(data['installment'], 'Number');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('isArchived')) {
                obj['isArchived'] = ApiClient.convertToType(data['isArchived'], 'Boolean');
            }
            if (data.hasOwnProperty('isDifferentListPriceAndPrice')) {
                obj['isDifferentListPriceAndPrice'] = ApiClient.convertToType(data['isDifferentListPriceAndPrice'], 'Boolean');
            }
            if (data.hasOwnProperty('isFeatured')) {
                obj['isFeatured'] = ApiClient.convertToType(data['isFeatured'], 'Boolean');
            }
            if (data.hasOwnProperty('isFirstBuy')) {
                obj['isFirstBuy'] = ApiClient.convertToType(data['isFirstBuy'], 'Boolean');
            }
            if (data.hasOwnProperty('isMinMaxInstallments')) {
                obj['isMinMaxInstallments'] = ApiClient.convertToType(data['isMinMaxInstallments'], 'Boolean');
            }
            if (data.hasOwnProperty('isSlaSelected')) {
                obj['isSlaSelected'] = ApiClient.convertToType(data['isSlaSelected'], 'Boolean');
            }
            if (data.hasOwnProperty('itemMaxPrice')) {
                obj['itemMaxPrice'] = ApiClient.convertToType(data['itemMaxPrice'], 'Number');
            }
            if (data.hasOwnProperty('itemMinPrice')) {
                obj['itemMinPrice'] = ApiClient.convertToType(data['itemMinPrice'], 'Number');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'String');
            }
            if (data.hasOwnProperty('listSku1BuyTogether')) {
                obj['listSku1BuyTogether'] = ApiClient.convertToType(data['listSku1BuyTogether'], [Object]);
            }
            if (data.hasOwnProperty('listSku2BuyTogether')) {
                obj['listSku2BuyTogether'] = ApiClient.convertToType(data['listSku2BuyTogether'], [Object]);
            }
            if (data.hasOwnProperty('marketingTags')) {
                obj['marketingTags'] = ApiClient.convertToType(data['marketingTags'], ['String']);
            }
            if (data.hasOwnProperty('marketingTagsAreNotInclusive')) {
                obj['marketingTagsAreNotInclusive'] = ApiClient.convertToType(data['marketingTagsAreNotInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('maxInstallment')) {
                obj['maxInstallment'] = ApiClient.convertToType(data['maxInstallment'], 'Number');
            }
            if (data.hasOwnProperty('maxNumberOfAffectedItems')) {
                obj['maxNumberOfAffectedItems'] = ApiClient.convertToType(data['maxNumberOfAffectedItems'], 'Number');
            }
            if (data.hasOwnProperty('maxNumberOfAffectedItemsGroupKey')) {
                obj['maxNumberOfAffectedItemsGroupKey'] = ApiClient.convertToType(data['maxNumberOfAffectedItemsGroupKey'], 'String');
            }
            if (data.hasOwnProperty('maxPricesPerItems')) {
                obj['maxPricesPerItems'] = ApiClient.convertToType(data['maxPricesPerItems'], [Object]);
            }
            if (data.hasOwnProperty('maxUsage')) {
                obj['maxUsage'] = ApiClient.convertToType(data['maxUsage'], 'Number');
            }
            if (data.hasOwnProperty('maxUsagePerClient')) {
                obj['maxUsagePerClient'] = ApiClient.convertToType(data['maxUsagePerClient'], 'Number');
            }
            if (data.hasOwnProperty('maximumUnitPriceDiscount')) {
                obj['maximumUnitPriceDiscount'] = ApiClient.convertToType(data['maximumUnitPriceDiscount'], 'Number');
            }
            if (data.hasOwnProperty('merchants')) {
                obj['merchants'] = ApiClient.convertToType(data['merchants'], [Object]);
            }
            if (data.hasOwnProperty('minInstallment')) {
                obj['minInstallment'] = ApiClient.convertToType(data['minInstallment'], 'Number');
            }
            if (data.hasOwnProperty('minimumQuantityBuyTogether')) {
                obj['minimumQuantityBuyTogether'] = ApiClient.convertToType(data['minimumQuantityBuyTogether'], 'Number');
            }
            if (data.hasOwnProperty('multipleUsePerClient')) {
                obj['multipleUsePerClient'] = ApiClient.convertToType(data['multipleUsePerClient'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('newOffset')) {
                obj['newOffset'] = ApiClient.convertToType(data['newOffset'], 'Number');
            }
            if (data.hasOwnProperty('nominalDiscountValue')) {
                obj['nominalDiscountValue'] = ApiClient.convertToType(data['nominalDiscountValue'], 'Number');
            }
            if (data.hasOwnProperty('nominalRewardValue')) {
                obj['nominalRewardValue'] = ApiClient.convertToType(data['nominalRewardValue'], 'Number');
            }
            if (data.hasOwnProperty('nominalShippingDiscountValue')) {
                obj['nominalShippingDiscountValue'] = ApiClient.convertToType(data['nominalShippingDiscountValue'], 'Number');
            }
            if (data.hasOwnProperty('nominalTax')) {
                obj['nominalTax'] = ApiClient.convertToType(data['nominalTax'], 'Number');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('orderStatusRewardValue')) {
                obj['orderStatusRewardValue'] = ApiClient.convertToType(data['orderStatusRewardValue'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('paymentsMethods')) {
                obj['paymentsMethods'] = ApiClient.convertToType(data['paymentsMethods'], [CreateOrUpdateCalculatorConfigurationRequestPaymentsMethodsInner]);
            }
            if (data.hasOwnProperty('paymentsRules')) {
                obj['paymentsRules'] = ApiClient.convertToType(data['paymentsRules'], [Object]);
            }
            if (data.hasOwnProperty('percentualDiscountValue')) {
                obj['percentualDiscountValue'] = ApiClient.convertToType(data['percentualDiscountValue'], 'Number');
            }
            if (data.hasOwnProperty('percentualDiscountValueList')) {
                obj['percentualDiscountValueList'] = ApiClient.convertToType(data['percentualDiscountValueList'], ['Number']);
            }
            if (data.hasOwnProperty('percentualDiscountValueList1')) {
                obj['percentualDiscountValueList1'] = ApiClient.convertToType(data['percentualDiscountValueList1'], 'Number');
            }
            if (data.hasOwnProperty('percentualDiscountValueList2')) {
                obj['percentualDiscountValueList2'] = ApiClient.convertToType(data['percentualDiscountValueList2'], 'Number');
            }
            if (data.hasOwnProperty('percentualRewardValue')) {
                obj['percentualRewardValue'] = ApiClient.convertToType(data['percentualRewardValue'], 'Number');
            }
            if (data.hasOwnProperty('percentualShippingDiscountValue')) {
                obj['percentualShippingDiscountValue'] = ApiClient.convertToType(data['percentualShippingDiscountValue'], 'Number');
            }
            if (data.hasOwnProperty('percentualTax')) {
                obj['percentualTax'] = ApiClient.convertToType(data['percentualTax'], 'Number');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [CreateOrUpdateCalculatorConfigurationRequestProductsInner]);
            }
            if (data.hasOwnProperty('productsAreInclusive')) {
                obj['productsAreInclusive'] = ApiClient.convertToType(data['productsAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('productsSpecifications')) {
                obj['productsSpecifications'] = ApiClient.convertToType(data['productsSpecifications'], [Object]);
            }
            if (data.hasOwnProperty('quantityToAffectBuyTogether')) {
                obj['quantityToAffectBuyTogether'] = ApiClient.convertToType(data['quantityToAffectBuyTogether'], 'Number');
            }
            if (data.hasOwnProperty('rebatePercentualDiscountValue')) {
                obj['rebatePercentualDiscountValue'] = ApiClient.convertToType(data['rebatePercentualDiscountValue'], 'Number');
            }
            if (data.hasOwnProperty('restrictionsBins')) {
                obj['restrictionsBins'] = ApiClient.convertToType(data['restrictionsBins'], ['String']);
            }
            if (data.hasOwnProperty('shippingPercentualTax')) {
                obj['shippingPercentualTax'] = ApiClient.convertToType(data['shippingPercentualTax'], 'Number');
            }
            if (data.hasOwnProperty('shouldDistributeDiscountAmongMatchedItems')) {
                obj['shouldDistributeDiscountAmongMatchedItems'] = ApiClient.convertToType(data['shouldDistributeDiscountAmongMatchedItems'], 'Boolean');
            }
            if (data.hasOwnProperty('skus')) {
                obj['skus'] = ApiClient.convertToType(data['skus'], [CreateOrUpdateCalculatorConfigurationRequestSkusInner]);
            }
            if (data.hasOwnProperty('skusAreInclusive')) {
                obj['skusAreInclusive'] = ApiClient.convertToType(data['skusAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('skusGift')) {
                obj['skusGift'] = CreateOrUpdateCalculatorConfigurationRequestSkusGift.constructFromObject(data['skusGift']);
            }
            if (data.hasOwnProperty('slasIds')) {
                obj['slasIds'] = ApiClient.convertToType(data['slasIds'], ['String']);
            }
            if (data.hasOwnProperty('stores')) {
                obj['stores'] = ApiClient.convertToType(data['stores'], [Object]);
            }
            if (data.hasOwnProperty('storesAreInclusive')) {
                obj['storesAreInclusive'] = ApiClient.convertToType(data['storesAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('totalValueCeling')) {
                obj['totalValueCeling'] = ApiClient.convertToType(data['totalValueCeling'], 'Number');
            }
            if (data.hasOwnProperty('totalValueFloor')) {
                obj['totalValueFloor'] = ApiClient.convertToType(data['totalValueFloor'], 'Number');
            }
            if (data.hasOwnProperty('totalValueIncludeAllItems')) {
                obj['totalValueIncludeAllItems'] = ApiClient.convertToType(data['totalValueIncludeAllItems'], 'Boolean');
            }
            if (data.hasOwnProperty('totalValueMode')) {
                obj['totalValueMode'] = ApiClient.convertToType(data['totalValueMode'], 'String');
            }
            if (data.hasOwnProperty('totalValuePurchase')) {
                obj['totalValuePurchase'] = ApiClient.convertToType(data['totalValuePurchase'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('useNewProgressiveAlgorithm')) {
                obj['useNewProgressiveAlgorithm'] = ApiClient.convertToType(data['useNewProgressiveAlgorithm'], 'Boolean');
            }
            if (data.hasOwnProperty('utmCampaign')) {
                obj['utmCampaign'] = ApiClient.convertToType(data['utmCampaign'], 'String');
            }
            if (data.hasOwnProperty('utmSource')) {
                obj['utmSource'] = ApiClient.convertToType(data['utmSource'], 'String');
            }
            if (data.hasOwnProperty('zipCodeRanges')) {
                obj['zipCodeRanges'] = ApiClient.convertToType(data['zipCodeRanges'], [CreateOrUpdateCalculatorConfigurationRequestZipCodeRangesInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateOrUpdateCalculatorConfigurationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateOrUpdateCalculatorConfigurationRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['activeDaysOfWeek'])) {
            throw new Error("Expected the field `activeDaysOfWeek` to be an array in the JSON data but got " + data['activeDaysOfWeek']);
        }
        if (data['affiliates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['affiliates'])) {
                throw new Error("Expected the field `affiliates` to be an array in the JSON data but got " + data['affiliates']);
            }
            // validate the optional field `affiliates` (array)
            for (const item of data['affiliates']) {
                CreateOrUpdateCalculatorConfigurationRequestAffiliatesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['beginDateUtc'] && !(typeof data['beginDateUtc'] === 'string' || data['beginDateUtc'] instanceof String)) {
            throw new Error("Expected the field `beginDateUtc` to be a primitive type in the JSON string but got " + data['beginDateUtc']);
        }
        if (data['brands']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['brands'])) {
                throw new Error("Expected the field `brands` to be an array in the JSON data but got " + data['brands']);
            }
            // validate the optional field `brands` (array)
            for (const item of data['brands']) {
                CreateOrUpdateCalculatorConfigurationRequestBrandsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['campaigns'])) {
            throw new Error("Expected the field `campaigns` to be an array in the JSON data but got " + data['campaigns']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cardIssuers'])) {
            throw new Error("Expected the field `cardIssuers` to be an array in the JSON data but got " + data['cardIssuers']);
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                CreateOrUpdateCalculatorConfigurationRequestCategoriesInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['clusterExpressions'])) {
            throw new Error("Expected the field `clusterExpressions` to be an array in the JSON data but got " + data['clusterExpressions']);
        }
        if (data['collections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['collections'])) {
                throw new Error("Expected the field `collections` to be an array in the JSON data but got " + data['collections']);
            }
            // validate the optional field `collections` (array)
            for (const item of data['collections']) {
                CreateOrUpdateCalculatorConfigurationRequestCollectionsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['collections1BuyTogether'])) {
            throw new Error("Expected the field `collections1BuyTogether` to be an array in the JSON data but got " + data['collections1BuyTogether']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['collections2BuyTogether'])) {
            throw new Error("Expected the field `collections2BuyTogether` to be an array in the JSON data but got " + data['collections2BuyTogether']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['conditionsIds'])) {
            throw new Error("Expected the field `conditionsIds` to be an array in the JSON data but got " + data['conditionsIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['coupon'])) {
            throw new Error("Expected the field `coupon` to be an array in the JSON data but got " + data['coupon']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['discountType'] && !(typeof data['discountType'] === 'string' || data['discountType'] instanceof String)) {
            throw new Error("Expected the field `discountType` to be a primitive type in the JSON string but got " + data['discountType']);
        }
        // ensure the json data is a string
        if (data['endDateUtc'] && !(typeof data['endDateUtc'] === 'string' || data['endDateUtc'] instanceof String)) {
            throw new Error("Expected the field `endDateUtc` to be a primitive type in the JSON string but got " + data['endDateUtc']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['giftListTypes'])) {
            throw new Error("Expected the field `giftListTypes` to be an array in the JSON data but got " + data['giftListTypes']);
        }
        // ensure the json data is a string
        if (data['idCalculatorConfiguration'] && !(typeof data['idCalculatorConfiguration'] === 'string' || data['idCalculatorConfiguration'] instanceof String)) {
            throw new Error("Expected the field `idCalculatorConfiguration` to be a primitive type in the JSON string but got " + data['idCalculatorConfiguration']);
        }
        // ensure the json data is a string
        if (data['idSeller'] && !(typeof data['idSeller'] === 'string' || data['idSeller'] instanceof String)) {
            throw new Error("Expected the field `idSeller` to be a primitive type in the JSON string but got " + data['idSeller']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['idsSalesChannel'])) {
            throw new Error("Expected the field `idsSalesChannel` to be an array in the JSON data but got " + data['idsSalesChannel']);
        }
        // ensure the json data is a string
        if (data['lastModified'] && !(typeof data['lastModified'] === 'string' || data['lastModified'] instanceof String)) {
            throw new Error("Expected the field `lastModified` to be a primitive type in the JSON string but got " + data['lastModified']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['listSku1BuyTogether'])) {
            throw new Error("Expected the field `listSku1BuyTogether` to be an array in the JSON data but got " + data['listSku1BuyTogether']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['listSku2BuyTogether'])) {
            throw new Error("Expected the field `listSku2BuyTogether` to be an array in the JSON data but got " + data['listSku2BuyTogether']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['marketingTags'])) {
            throw new Error("Expected the field `marketingTags` to be an array in the JSON data but got " + data['marketingTags']);
        }
        // ensure the json data is a string
        if (data['maxNumberOfAffectedItemsGroupKey'] && !(typeof data['maxNumberOfAffectedItemsGroupKey'] === 'string' || data['maxNumberOfAffectedItemsGroupKey'] instanceof String)) {
            throw new Error("Expected the field `maxNumberOfAffectedItemsGroupKey` to be a primitive type in the JSON string but got " + data['maxNumberOfAffectedItemsGroupKey']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['maxPricesPerItems'])) {
            throw new Error("Expected the field `maxPricesPerItems` to be an array in the JSON data but got " + data['maxPricesPerItems']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['merchants'])) {
            throw new Error("Expected the field `merchants` to be an array in the JSON data but got " + data['merchants']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['orderStatusRewardValue'] && !(typeof data['orderStatusRewardValue'] === 'string' || data['orderStatusRewardValue'] instanceof String)) {
            throw new Error("Expected the field `orderStatusRewardValue` to be a primitive type in the JSON string but got " + data['orderStatusRewardValue']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        if (data['paymentsMethods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['paymentsMethods'])) {
                throw new Error("Expected the field `paymentsMethods` to be an array in the JSON data but got " + data['paymentsMethods']);
            }
            // validate the optional field `paymentsMethods` (array)
            for (const item of data['paymentsMethods']) {
                CreateOrUpdateCalculatorConfigurationRequestPaymentsMethodsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['paymentsRules'])) {
            throw new Error("Expected the field `paymentsRules` to be an array in the JSON data but got " + data['paymentsRules']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['percentualDiscountValueList'])) {
            throw new Error("Expected the field `percentualDiscountValueList` to be an array in the JSON data but got " + data['percentualDiscountValueList']);
        }
        if (data['products']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['products'])) {
                throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
            }
            // validate the optional field `products` (array)
            for (const item of data['products']) {
                CreateOrUpdateCalculatorConfigurationRequestProductsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['productsSpecifications'])) {
            throw new Error("Expected the field `productsSpecifications` to be an array in the JSON data but got " + data['productsSpecifications']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['restrictionsBins'])) {
            throw new Error("Expected the field `restrictionsBins` to be an array in the JSON data but got " + data['restrictionsBins']);
        }
        if (data['skus']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['skus'])) {
                throw new Error("Expected the field `skus` to be an array in the JSON data but got " + data['skus']);
            }
            // validate the optional field `skus` (array)
            for (const item of data['skus']) {
                CreateOrUpdateCalculatorConfigurationRequestSkusInner.validateJSON(item);
            };
        }
        // validate the optional field `skusGift`
        if (data['skusGift']) { // data not null
          CreateOrUpdateCalculatorConfigurationRequestSkusGift.validateJSON(data['skusGift']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['slasIds'])) {
            throw new Error("Expected the field `slasIds` to be an array in the JSON data but got " + data['slasIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stores'])) {
            throw new Error("Expected the field `stores` to be an array in the JSON data but got " + data['stores']);
        }
        // ensure the json data is a string
        if (data['totalValueMode'] && !(typeof data['totalValueMode'] === 'string' || data['totalValueMode'] instanceof String)) {
            throw new Error("Expected the field `totalValueMode` to be a primitive type in the JSON string but got " + data['totalValueMode']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['utmCampaign'] && !(typeof data['utmCampaign'] === 'string' || data['utmCampaign'] instanceof String)) {
            throw new Error("Expected the field `utmCampaign` to be a primitive type in the JSON string but got " + data['utmCampaign']);
        }
        // ensure the json data is a string
        if (data['utmSource'] && !(typeof data['utmSource'] === 'string' || data['utmSource'] instanceof String)) {
            throw new Error("Expected the field `utmSource` to be a primitive type in the JSON string but got " + data['utmSource']);
        }
        if (data['zipCodeRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['zipCodeRanges'])) {
                throw new Error("Expected the field `zipCodeRanges` to be an array in the JSON data but got " + data['zipCodeRanges']);
            }
            // validate the optional field `zipCodeRanges` (array)
            for (const item of data['zipCodeRanges']) {
                CreateOrUpdateCalculatorConfigurationRequestZipCodeRangesInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Maximum shipping value.
 * @member {Number} absoluteShippingDiscountValue
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['absoluteShippingDiscountValue'] = undefined;

/**
 * Allows the promotion to apply to products whose prices have been manually added by a call-center operator.
 * @member {Boolean} accumulateWithManualPrice
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['accumulateWithManualPrice'] = undefined;

/**
 * If set as `true`, it activates gifts Multiplier.
 * @member {Boolean} activateGiftsMultiplier
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['activateGiftsMultiplier'] = undefined;

/**
 * Defines which days of the week the Promotion or Tax will applied.
 * @member {Array.<String>} activeDaysOfWeek
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['activeDaysOfWeek'] = undefined;

/**
 * Marketplace order identifier. The discount will apply to selected affiliates.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestAffiliatesInner>} affiliates
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['affiliates'] = undefined;

/**
 * Promotion or Tax will be applied to all kind of shipping.
 * @member {Boolean} applyToAllShippings
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['applyToAllShippings'] = undefined;

/**
 * If set to `false`, this Promotion or Tax will be applied to any trade policies present on the `idsSalesChannel` field. If set to `true`, trade policies present on that field will make this Promotion or Tax not to be applied.
 * @member {Boolean} areSalesChannelIdsExclusive
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['areSalesChannelIdsExclusive'] = undefined;

/**
 * Promotion or Tax Begin Date (UTC).
 * @member {String} beginDateUtc
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['beginDateUtc'] = undefined;

/**
 * Object composed by the brands that will activate or deactivate the Promotion or Tax.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestBrandsInner>} brands
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['brands'] = undefined;

/**
 * If set to `true`, this Promotion or Tax will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this Promotion or Tax not to be applied.
 * @member {Boolean} brandsAreInclusive
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['brandsAreInclusive'] = undefined;

/**
 * Campaign Audiences that activate this Promotion or Tax.
 * @member {Array.<Object>} campaigns
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['campaigns'] = undefined;

/**
 * @member {Array.<Object>} cardIssuers
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['cardIssuers'] = undefined;

/**
 * Object composed by the categories that will activate or deactivate the Promotion or Tax.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestCategoriesInner>} categories
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['categories'] = undefined;

/**
 * If set to `true`, this Promotion or Tax will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this Promotion or Tax not to be applied.
 * @member {Boolean} categoriesAreInclusive
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['categoriesAreInclusive'] = undefined;

/**
 * An expression to use with clusters.
 * @member {Array.<String>} clusterExpressions
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['clusterExpressions'] = undefined;

/**
 * Object composed by the collections that will activate or deactivate the Promotion or Tax.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestCollectionsInner>} collections
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['collections'] = undefined;

/**
 * Collections that will generate the Promotion, type **Buy Together**, **More for less**, **Progressive Discount**, **Buy One Get One**.
 * @member {Array.<String>} collections1BuyTogether
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['collections1BuyTogether'] = undefined;

/**
 * @member {Array.<Object>} collections2BuyTogether
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['collections2BuyTogether'] = undefined;

/**
 * If set to `true`, this Promotion or Tax will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this Promotion or Tax not to be applied.
 * @member {Boolean} collectionsIsInclusive
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['collectionsIsInclusive'] = undefined;

/**
 * If the **List Price** and **Price** are the same.
 * @member {Boolean} compareListPriceAndPrice
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['compareListPriceAndPrice'] = undefined;

/**
 * Array with conditions IDs.
 * @member {Array.<String>} conditionsIds
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['conditionsIds'] = undefined;

/**
 * @member {Array.<Object>} coupon
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['coupon'] = undefined;

/**
 * Defines if a Promotion or Tax can accumulate with another one. (`true`) or not (`false`).
 * @member {Boolean} cumulative
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['cumulative'] = undefined;

/**
 * Number of days that are considered to add the purchase history.
 * @member {Number} daysAgoOfPurchases
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['daysAgoOfPurchases'] = undefined;

/**
 * Internal description of the Promotion or Tax.
 * @member {String} description
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['description'] = undefined;

/**
 * @member {Boolean} disableDeal
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['disableDeal'] = undefined;

/**
 * The type of discount that will apply to the promotion.
 * @member {String} discountType
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['discountType'] = undefined;

/**
 * Enable **Buy Together** per SKU.
 * @member {Boolean} enableBuyTogetherPerSku
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['enableBuyTogetherPerSku'] = undefined;

/**
 * Promotion or Tax End Date (UTC).
 * @member {String} endDateUtc
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['endDateUtc'] = undefined;

/**
 * Applies the discount even if the user is not logged.
 * @member {Boolean} firstBuyIsProfileOptimistic
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['firstBuyIsProfileOptimistic'] = undefined;

/**
 * Gifts List Type.
 * @member {Array.<String>} giftListTypes
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['giftListTypes'] = undefined;

/**
 * Promotion ID or Tax ID.
 * @member {String} idCalculatorConfiguration
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['idCalculatorConfiguration'] = undefined;

/**
 * Seller Name.
 * @member {String} idSeller
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['idSeller'] = undefined;

/**
 * If set to `true`, this Promotion or Tax will be applied to any seller present on the `idSeller` field. If set to `false`, sellers present on that field will make this Promotion or Tax not to be applied.
 * @member {Boolean} idSellerIsInclusive
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['idSellerIsInclusive'] = undefined;

/**
 * List of Trade Policies that activate this Promotion or Tax.
 * @member {Array.<String>} idsSalesChannel
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['idsSalesChannel'] = undefined;

/**
 * @member {Number} installment
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['installment'] = undefined;

/**
 * If set as `true` the Promotion or Tax is activated. If set as `false` the Promotion or Tax is deactivated.
 * @member {Boolean} isActive
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['isActive'] = undefined;

/**
 * If set as `true` the Promotion or Tax is archived. If set as `false` the Promotion or Tax is not archived.
 * @member {Boolean} isArchived
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['isArchived'] = undefined;

/**
 * Applies the Promotion or Tax only if the list price and price is different.
 * @member {Boolean} isDifferentListPriceAndPrice
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['isDifferentListPriceAndPrice'] = undefined;

/**
 * Insert a flag with the promotion name used in the product's window display and page.
 * @member {Boolean} isFeatured
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['isFeatured'] = undefined;

/**
 * Applies the discount only if it's a first buy.
 * @member {Boolean} isFirstBuy
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['isFirstBuy'] = undefined;

/**
 * Set if the Promotion or Tax will be applied considering a minimum and maximum values for installments.
 * @member {Boolean} isMinMaxInstallments
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['isMinMaxInstallments'] = undefined;

/**
 * Applies selected discount only when one of the defined shipping method is selected by the customer.
 * @member {Boolean} isSlaSelected
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['isSlaSelected'] = undefined;

/**
 * Maximum price of the item.
 * @member {Number} itemMaxPrice
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['itemMaxPrice'] = undefined;

/**
 * Minimum price of the item.
 * @member {Number} itemMinPrice
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['itemMinPrice'] = undefined;

/**
 * Date when the Promotion or Tax was last modified.
 * @member {String} lastModified
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['lastModified'] = undefined;

/**
 * SKU first list for the promotion **Buy Together**.
 * @member {Array.<Object>} listSku1BuyTogether
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['listSku1BuyTogether'] = undefined;

/**
 * SKU second list for the promotion **Buy Together**.
 * @member {Array.<Object>} listSku2BuyTogether
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['listSku2BuyTogether'] = undefined;

/**
 * Promotion or Tax Marketing tags.
 * @member {Array.<String>} marketingTags
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['marketingTags'] = undefined;

/**
 * If set to `false`, this Promotion or Tax will be applied to any marketing tag present on the `marketingTags` field. If set to `true`, marketing tags present on that field will make this Promotion or Tax not to be applied.
 * @member {Boolean} marketingTagsAreNotInclusive
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['marketingTagsAreNotInclusive'] = undefined;

/**
 * Maximum value for installment.
 * @member {Number} maxInstallment
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['maxInstallment'] = undefined;

/**
 * The maximum number of affected items for a promotion.
 * @member {Number} maxNumberOfAffectedItems
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['maxNumberOfAffectedItems'] = undefined;

/**
 * The maximum number of affected items by group key for a promotion.
 * @member {String} maxNumberOfAffectedItemsGroupKey
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['maxNumberOfAffectedItemsGroupKey'] = undefined;

/**
 * @member {Array.<Object>} maxPricesPerItems
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['maxPricesPerItems'] = undefined;

/**
 * Defines how many times the Promotion or Tax can be used.
 * @member {Number} maxUsage
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['maxUsage'] = undefined;

/**
 * Defines if the promotion can be used multiple times per client.
 * @member {Number} maxUsagePerClient
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['maxUsagePerClient'] = undefined;

/**
 * The maximum price for each item of the purchase will be the price set up.
 * @member {Number} maximumUnitPriceDiscount
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['maximumUnitPriceDiscount'] = undefined;

/**
 * @member {Array.<Object>} merchants
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['merchants'] = undefined;

/**
 * Minimum value for installment.
 * @member {Number} minInstallment
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['minInstallment'] = undefined;

/**
 * Minimum quantity for **Buy Together** promotion.
 * @member {Number} minimumQuantityBuyTogether
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['minimumQuantityBuyTogether'] = undefined;

/**
 * Defines if the promotion can be used multiple times per client.
 * @member {Boolean} multipleUsePerClient
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['multipleUsePerClient'] = undefined;

/**
 * Promotion name or Tax name.
 * @member {String} name
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['name'] = undefined;

/**
 * New time offset from UTC in seconds.
 * @member {Number} newOffset
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['newOffset'] = undefined;

/**
 * Exact discount to be applied for the total purchase value.
 * @member {Number} nominalDiscountValue
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['nominalDiscountValue'] = undefined;

/**
 * Nominal value for rewards program.
 * @member {Number} nominalRewardValue
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['nominalRewardValue'] = undefined;

/**
 * Exact discount to be applied for the shipping value.
 * @member {Number} nominalShippingDiscountValue
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['nominalShippingDiscountValue'] = undefined;

/**
 * Nominal Tax.
 * @member {Number} nominalTax
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['nominalTax'] = undefined;

/**
 * Time offset from UTC in seconds.
 * @member {Number} offset
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['offset'] = undefined;

/**
 * Order status reward value.
 * @member {String} orderStatusRewardValue
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['orderStatusRewardValue'] = undefined;

/**
 * Origin of the Promotion or Tax, `marketplace` or `Fulfillment`.  Read [Difference between orders with marketplace and fulfillment sources](https://help.vtex.com/en/tutorial/what-are-orders-with-marketplace-source-and-orders-with-fulfillment-source--6eVYrmUAwMOeKICU2KuG06) for more information.
 * @member {String} origin
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['origin'] = undefined;

/**
 * Array composed by all the Payments Methods that activate this Promotion or Tax.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestPaymentsMethodsInner>} paymentsMethods
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['paymentsMethods'] = undefined;

/**
 * @member {Array.<Object>} paymentsRules
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['paymentsRules'] = undefined;

/**
 * Percentage discount to be applied for total purchase value.
 * @member {Number} percentualDiscountValue
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['percentualDiscountValue'] = undefined;

/**
 * Percentual discount value list.
 * @member {Array.<Number>} percentualDiscountValueList
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['percentualDiscountValueList'] = undefined;

/**
 * Valid discounts for the SKUs in `listSku1BuyTogether`, discount list used for Buy Together Promotions.
 * @member {Number} percentualDiscountValueList1
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['percentualDiscountValueList1'] = undefined;

/**
 * Equivalent to `percentualDiscountValueList1`.
 * @member {Number} percentualDiscountValueList2
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['percentualDiscountValueList2'] = undefined;

/**
 * Percentage value for rewards program.
 * @member {Number} percentualRewardValue
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['percentualRewardValue'] = undefined;

/**
 * Percentage discount to be applied for shipping value.
 * @member {Number} percentualShippingDiscountValue
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['percentualShippingDiscountValue'] = undefined;

/**
 * Percentual Tax over purchase total value.
 * @member {Number} percentualTax
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['percentualTax'] = undefined;

/**
 * Object composed by the products that will activate or deactivate the Promotion or Tax.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestProductsInner>} products
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['products'] = undefined;

/**
 * If set to `true`, this Promotion or Tax will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this Promotion or Tax not to be applied.
 * @member {Boolean} productsAreInclusive
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['productsAreInclusive'] = undefined;

/**
 * @member {Array.<Object>} productsSpecifications
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['productsSpecifications'] = undefined;

/**
 * Quantity to affect **Buy Together** promotion.
 * @member {Number} quantityToAffectBuyTogether
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['quantityToAffectBuyTogether'] = undefined;

/**
 * Percentual Shipping Discount Value.
 * @member {Number} rebatePercentualDiscountValue
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['rebatePercentualDiscountValue'] = undefined;

/**
 * The discount will be granted if the card's BIN is given.
 * @member {Array.<String>} restrictionsBins
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['restrictionsBins'] = undefined;

/**
 * Shipping Percentual Tax over purchase total value.
 * @member {Number} shippingPercentualTax
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['shippingPercentualTax'] = undefined;

/**
 * Should distribute discount among matched items.
 * @member {Boolean} shouldDistributeDiscountAmongMatchedItems
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['shouldDistributeDiscountAmongMatchedItems'] = undefined;

/**
 * Object composed by the SKUs that will activate or deactivate the Promotion or Tax.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestSkusInner>} skus
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['skus'] = undefined;

/**
 * If set to `true`, this Promotion or Tax will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this Promotion or Tax not to be applied.
 * @member {Boolean} skusAreInclusive
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['skusAreInclusive'] = undefined;

/**
 * @member {module:model/CreateOrUpdateCalculatorConfigurationRequestSkusGift} skusGift
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['skusGift'] = undefined;

/**
 * The discount will be granted if the shipping method is the same as the one given.
 * @member {Array.<String>} slasIds
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['slasIds'] = undefined;

/**
 * @member {Array.<Object>} stores
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['stores'] = undefined;

/**
 * @member {Boolean} storesAreInclusive
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['storesAreInclusive'] = undefined;

/**
 * Maximum chart value to activate the Promotion or Tax.
 * @member {Number} totalValueCeling
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['totalValueCeling'] = undefined;

/**
 * Minimum chart value to activate the Promotion or Tax.
 * @member {Number} totalValueFloor
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['totalValueFloor'] = undefined;

/**
 * @member {Boolean} totalValueIncludeAllItems
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['totalValueIncludeAllItems'] = undefined;

/**
 * Defines if products that already are receiving a promotion will be considered on the chart total value. There are three options available: `IncludeMatchedItems`, `ExcludeMatchedItems`, `AllItems`.
 * @member {String} totalValueMode
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['totalValueMode'] = undefined;

/**
 * Total value a client must have in past orders to activate the Promotion or Tax.
 * @member {Number} totalValuePurchase
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['totalValuePurchase'] = undefined;

/**
 * Defines what is the type of the promotion or indicates if it is a tax. Possible values: `regular` ([Regular Promotion](https://help.vtex.com/tutorial/regular-promotion--tutorials_327)), `combo` ([Buy Together](https://help.vtex.com/en/tutorial/buy-together--tutorials_323)), `forThePriceOf` ([More for Less](https://help.vtex.com/en/tutorial/creating-a-more-for-less-promotion--tutorials_325)), `progressive` ([Progressive Discount](https://help.vtex.com/en/tutorial/progressive-discount--tutorials_324)), `buyAndWin` ([Buy One Get One](https://help.vtex.com/en/tutorial/buy-one-get-one--tutorials_322)), `maxPricePerItem` (Deprecated), `campaign` ([Campaign Promotion](https://help.vtex.com/en/tutorial/campaign-promotion--1ChYXhK2AQGuS6wAqS8Ume)), `tax` (Tax), `multipleEffects` (Multiple Effects).
 * @member {String} type
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['type'] = undefined;

/**
 * Use new progressive algorithm.
 * @member {Boolean} useNewProgressiveAlgorithm
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['useNewProgressiveAlgorithm'] = undefined;

/**
 * Coupon utmCampaign code.
 * @member {String} utmCampaign
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['utmCampaign'] = undefined;

/**
 * Coupon utmSource code.
 * @member {String} utmSource
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['utmSource'] = undefined;

/**
 * Range of the zip code that applies the promotion.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestZipCodeRangesInner>} zipCodeRanges
 */
CreateOrUpdateCalculatorConfigurationRequest.prototype['zipCodeRanges'] = undefined;






export default CreateOrUpdateCalculatorConfigurationRequest;

