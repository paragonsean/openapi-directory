/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetTaxesInnerScope model module.
 * @module model/GetTaxesInnerScope
 * @version 1.0
 */
class GetTaxesInnerScope {
    /**
     * Constructs a new <code>GetTaxesInnerScope</code>.
     * Scope of the tax.
     * @alias module:model/GetTaxesInnerScope
     */
    constructor() { 
        
        GetTaxesInnerScope.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetTaxesInnerScope</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetTaxesInnerScope} obj Optional instance to populate.
     * @return {module:model/GetTaxesInnerScope} The populated <code>GetTaxesInnerScope</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetTaxesInnerScope();

            if (data.hasOwnProperty('allCatalog')) {
                obj['allCatalog'] = ApiClient.convertToType(data['allCatalog'], 'Boolean');
            }
            if (data.hasOwnProperty('brands')) {
                obj['brands'] = ApiClient.convertToType(data['brands'], 'Number');
            }
            if (data.hasOwnProperty('brandsAreInclusive')) {
                obj['brandsAreInclusive'] = ApiClient.convertToType(data['brandsAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], 'Number');
            }
            if (data.hasOwnProperty('categoriesAreInclusive')) {
                obj['categoriesAreInclusive'] = ApiClient.convertToType(data['categoriesAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('collections')) {
                obj['collections'] = ApiClient.convertToType(data['collections'], 'Number');
            }
            if (data.hasOwnProperty('collectionsAreInclusive')) {
                obj['collectionsAreInclusive'] = ApiClient.convertToType(data['collectionsAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], 'Number');
            }
            if (data.hasOwnProperty('productsAreInclusive')) {
                obj['productsAreInclusive'] = ApiClient.convertToType(data['productsAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('sellers')) {
                obj['sellers'] = ApiClient.convertToType(data['sellers'], 'Number');
            }
            if (data.hasOwnProperty('sellersAreInclusive')) {
                obj['sellersAreInclusive'] = ApiClient.convertToType(data['sellersAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('skus')) {
                obj['skus'] = ApiClient.convertToType(data['skus'], 'Number');
            }
            if (data.hasOwnProperty('skusAreInclusive')) {
                obj['skusAreInclusive'] = ApiClient.convertToType(data['skusAreInclusive'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetTaxesInnerScope</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetTaxesInnerScope</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Determines if the tax applies to all products in the Catalog (`true`) or not (`false`).
 * @member {Boolean} allCatalog
 */
GetTaxesInnerScope.prototype['allCatalog'] = undefined;

/**
 * Quantity of brands which activate or deactivate the tax.
 * @member {Number} brands
 */
GetTaxesInnerScope.prototype['brands'] = undefined;

/**
 * If set to `true`, this tax will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this tax not to be applied.
 * @member {Boolean} brandsAreInclusive
 */
GetTaxesInnerScope.prototype['brandsAreInclusive'] = undefined;

/**
 * Quantity of categories which activate or deactivate the tax.
 * @member {Number} categories
 */
GetTaxesInnerScope.prototype['categories'] = undefined;

/**
 * If set to `true`, this tax will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this tax not to be applied.
 * @member {Boolean} categoriesAreInclusive
 */
GetTaxesInnerScope.prototype['categoriesAreInclusive'] = undefined;

/**
 * Quantity of collections which activate or deactivate the tax.
 * @member {Number} collections
 */
GetTaxesInnerScope.prototype['collections'] = undefined;

/**
 * If set to `true`, this tax will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this tax not to be applied.
 * @member {Boolean} collectionsAreInclusive
 */
GetTaxesInnerScope.prototype['collectionsAreInclusive'] = undefined;

/**
 * Quantity of products which activate or deactivate the tax.
 * @member {Number} products
 */
GetTaxesInnerScope.prototype['products'] = undefined;

/**
 * If set to `true`, this tax will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this tax not to be applied.
 * @member {Boolean} productsAreInclusive
 */
GetTaxesInnerScope.prototype['productsAreInclusive'] = undefined;

/**
 * Quantity of sellers which activate or deactivate the tax.
 * @member {Number} sellers
 */
GetTaxesInnerScope.prototype['sellers'] = undefined;

/**
 * If set to `true`, this tax will be applied to any seller present on the `sellers` field. If set to `false`, sellers present on that field will make this tax not to be applied.
 * @member {Boolean} sellersAreInclusive
 */
GetTaxesInnerScope.prototype['sellersAreInclusive'] = undefined;

/**
 * Quantity of SKUs which activate or deactivate the tax.
 * @member {Number} skus
 */
GetTaxesInnerScope.prototype['skus'] = undefined;

/**
 * If set to `true`, this tax will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this tax not to be applied.
 * @member {Boolean} skusAreInclusive
 */
GetTaxesInnerScope.prototype['skusAreInclusive'] = undefined;






export default GetTaxesInnerScope;

