/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Param from './Param';

/**
 * The Item model module.
 * @module model/Item
 * @version 1.0
 */
class Item {
    /**
     * Constructs a new <code>Item</code>.
     * @alias module:model/Item
     * @param id {String} 
     * @param index {Number} 
     * @param isGift {Boolean} 
     * @param logisticsInfos {Array.<String>} 
     * @param measurementUnit {String} 
     * @param params {Array.<module:model/Param>} 
     * @param priceSheet {Array.<String>} 
     * @param priceTags {Array.<String>} 
     * @param productSpecifications {Array.<String>} 
     * @param quantity {Number} 
     * @param sellerId {String} 
     * @param unitMultiplier {Number} 
     */
    constructor(id, index, isGift, logisticsInfos, measurementUnit, params, priceSheet, priceTags, productSpecifications, quantity, sellerId, unitMultiplier) { 
        
        Item.initialize(this, id, index, isGift, logisticsInfos, measurementUnit, params, priceSheet, priceTags, productSpecifications, quantity, sellerId, unitMultiplier);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, index, isGift, logisticsInfos, measurementUnit, params, priceSheet, priceTags, productSpecifications, quantity, sellerId, unitMultiplier) { 
        obj['id'] = id;
        obj['index'] = index;
        obj['isGift'] = isGift;
        obj['logisticsInfos'] = logisticsInfos;
        obj['measurementUnit'] = measurementUnit;
        obj['params'] = params;
        obj['priceSheet'] = priceSheet;
        obj['priceTags'] = priceTags;
        obj['productSpecifications'] = productSpecifications;
        obj['quantity'] = quantity;
        obj['sellerId'] = sellerId;
        obj['unitMultiplier'] = unitMultiplier;
    }

    /**
     * Constructs a <code>Item</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Item} obj Optional instance to populate.
     * @return {module:model/Item} The populated <code>Item</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Item();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('isGift')) {
                obj['isGift'] = ApiClient.convertToType(data['isGift'], 'Boolean');
            }
            if (data.hasOwnProperty('logisticsInfos')) {
                obj['logisticsInfos'] = ApiClient.convertToType(data['logisticsInfos'], ['String']);
            }
            if (data.hasOwnProperty('measurementUnit')) {
                obj['measurementUnit'] = ApiClient.convertToType(data['measurementUnit'], 'String');
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], [Param]);
            }
            if (data.hasOwnProperty('priceSheet')) {
                obj['priceSheet'] = ApiClient.convertToType(data['priceSheet'], ['String']);
            }
            if (data.hasOwnProperty('priceTags')) {
                obj['priceTags'] = ApiClient.convertToType(data['priceTags'], ['String']);
            }
            if (data.hasOwnProperty('productSpecifications')) {
                obj['productSpecifications'] = ApiClient.convertToType(data['productSpecifications'], ['String']);
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('sellerId')) {
                obj['sellerId'] = ApiClient.convertToType(data['sellerId'], 'String');
            }
            if (data.hasOwnProperty('unitMultiplier')) {
                obj['unitMultiplier'] = ApiClient.convertToType(data['unitMultiplier'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Item</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Item</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Item.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['logisticsInfos'])) {
            throw new Error("Expected the field `logisticsInfos` to be an array in the JSON data but got " + data['logisticsInfos']);
        }
        // ensure the json data is a string
        if (data['measurementUnit'] && !(typeof data['measurementUnit'] === 'string' || data['measurementUnit'] instanceof String)) {
            throw new Error("Expected the field `measurementUnit` to be a primitive type in the JSON string but got " + data['measurementUnit']);
        }
        if (data['params']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['params'])) {
                throw new Error("Expected the field `params` to be an array in the JSON data but got " + data['params']);
            }
            // validate the optional field `params` (array)
            for (const item of data['params']) {
                Param.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['priceSheet'])) {
            throw new Error("Expected the field `priceSheet` to be an array in the JSON data but got " + data['priceSheet']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['priceTags'])) {
            throw new Error("Expected the field `priceTags` to be an array in the JSON data but got " + data['priceTags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['productSpecifications'])) {
            throw new Error("Expected the field `productSpecifications` to be an array in the JSON data but got " + data['productSpecifications']);
        }
        // ensure the json data is a string
        if (data['sellerId'] && !(typeof data['sellerId'] === 'string' || data['sellerId'] instanceof String)) {
            throw new Error("Expected the field `sellerId` to be a primitive type in the JSON string but got " + data['sellerId']);
        }

        return true;
    }


}

Item.RequiredProperties = ["id", "index", "isGift", "logisticsInfos", "measurementUnit", "params", "priceSheet", "priceTags", "productSpecifications", "quantity", "sellerId", "unitMultiplier"];

/**
 * @member {String} id
 */
Item.prototype['id'] = undefined;

/**
 * @member {Number} index
 */
Item.prototype['index'] = undefined;

/**
 * @member {Boolean} isGift
 */
Item.prototype['isGift'] = undefined;

/**
 * 
 * @member {Array.<String>} logisticsInfos
 */
Item.prototype['logisticsInfos'] = undefined;

/**
 * @member {String} measurementUnit
 */
Item.prototype['measurementUnit'] = undefined;

/**
 * 
 * @member {Array.<module:model/Param>} params
 */
Item.prototype['params'] = undefined;

/**
 * 
 * @member {Array.<String>} priceSheet
 */
Item.prototype['priceSheet'] = undefined;

/**
 * 
 * @member {Array.<String>} priceTags
 */
Item.prototype['priceTags'] = undefined;

/**
 * 
 * @member {Array.<String>} productSpecifications
 */
Item.prototype['productSpecifications'] = undefined;

/**
 * @member {Number} quantity
 */
Item.prototype['quantity'] = undefined;

/**
 * @member {String} sellerId
 */
Item.prototype['sellerId'] = undefined;

/**
 * @member {Number} unitMultiplier
 */
Item.prototype['unitMultiplier'] = undefined;






export default Item;

