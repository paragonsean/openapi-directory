/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateOrUpdateCalculatorConfigurationRequestAffiliatesInner from './CreateOrUpdateCalculatorConfigurationRequestAffiliatesInner';
import CreateOrUpdateCalculatorConfigurationRequestBrandsInner from './CreateOrUpdateCalculatorConfigurationRequestBrandsInner';
import CreateOrUpdateCalculatorConfigurationRequestCategoriesInner from './CreateOrUpdateCalculatorConfigurationRequestCategoriesInner';
import CreateOrUpdateCalculatorConfigurationRequestCollectionsInner from './CreateOrUpdateCalculatorConfigurationRequestCollectionsInner';
import CreateOrUpdateCalculatorConfigurationRequestPaymentsMethodsInner from './CreateOrUpdateCalculatorConfigurationRequestPaymentsMethodsInner';
import CreateOrUpdateCalculatorConfigurationRequestProductsInner from './CreateOrUpdateCalculatorConfigurationRequestProductsInner';
import CreateOrUpdateCalculatorConfigurationRequestSkusInner from './CreateOrUpdateCalculatorConfigurationRequestSkusInner';
import SetcampaignconfigurationRequestTargetConfigurationsInnerListCategory1BuyTogetherInner from './SetcampaignconfigurationRequestTargetConfigurationsInnerListCategory1BuyTogetherInner';
import SetcampaignconfigurationRequestTargetConfigurationsInnerZipCodeRangesInner from './SetcampaignconfigurationRequestTargetConfigurationsInnerZipCodeRangesInner';

/**
 * The SetcampaignconfigurationRequestTargetConfigurationsInner model module.
 * @module model/SetcampaignconfigurationRequestTargetConfigurationsInner
 * @version 1.0
 */
class SetcampaignconfigurationRequestTargetConfigurationsInner {
    /**
     * Constructs a new <code>SetcampaignconfigurationRequestTargetConfigurationsInner</code>.
     * Object with information about the target audience.
     * @alias module:model/SetcampaignconfigurationRequestTargetConfigurationsInner
     */
    constructor() { 
        
        SetcampaignconfigurationRequestTargetConfigurationsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SetcampaignconfigurationRequestTargetConfigurationsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SetcampaignconfigurationRequestTargetConfigurationsInner} obj Optional instance to populate.
     * @return {module:model/SetcampaignconfigurationRequestTargetConfigurationsInner} The populated <code>SetcampaignconfigurationRequestTargetConfigurationsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SetcampaignconfigurationRequestTargetConfigurationsInner();

            if (data.hasOwnProperty('affiliates')) {
                obj['affiliates'] = ApiClient.convertToType(data['affiliates'], [CreateOrUpdateCalculatorConfigurationRequestAffiliatesInner]);
            }
            if (data.hasOwnProperty('areSalesChannelIdsExclusive')) {
                obj['areSalesChannelIdsExclusive'] = ApiClient.convertToType(data['areSalesChannelIdsExclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('brands')) {
                obj['brands'] = ApiClient.convertToType(data['brands'], [CreateOrUpdateCalculatorConfigurationRequestBrandsInner]);
            }
            if (data.hasOwnProperty('brandsAreInclusive')) {
                obj['brandsAreInclusive'] = ApiClient.convertToType(data['brandsAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('campaigns')) {
                obj['campaigns'] = ApiClient.convertToType(data['campaigns'], [Object]);
            }
            if (data.hasOwnProperty('cardIssuers')) {
                obj['cardIssuers'] = ApiClient.convertToType(data['cardIssuers'], [Object]);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [CreateOrUpdateCalculatorConfigurationRequestCategoriesInner]);
            }
            if (data.hasOwnProperty('categoriesAreInclusive')) {
                obj['categoriesAreInclusive'] = ApiClient.convertToType(data['categoriesAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('clusterExpressions')) {
                obj['clusterExpressions'] = ApiClient.convertToType(data['clusterExpressions'], ['String']);
            }
            if (data.hasOwnProperty('clusterOperator')) {
                obj['clusterOperator'] = ApiClient.convertToType(data['clusterOperator'], 'String');
            }
            if (data.hasOwnProperty('collections')) {
                obj['collections'] = ApiClient.convertToType(data['collections'], [CreateOrUpdateCalculatorConfigurationRequestCollectionsInner]);
            }
            if (data.hasOwnProperty('collections1BuyTogether')) {
                obj['collections1BuyTogether'] = ApiClient.convertToType(data['collections1BuyTogether'], ['String']);
            }
            if (data.hasOwnProperty('collections2BuyTogether')) {
                obj['collections2BuyTogether'] = ApiClient.convertToType(data['collections2BuyTogether'], [Object]);
            }
            if (data.hasOwnProperty('collectionsIsInclusive')) {
                obj['collectionsIsInclusive'] = ApiClient.convertToType(data['collectionsIsInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('compareListPriceAndPrice')) {
                obj['compareListPriceAndPrice'] = ApiClient.convertToType(data['compareListPriceAndPrice'], 'Boolean');
            }
            if (data.hasOwnProperty('coupon')) {
                obj['coupon'] = ApiClient.convertToType(data['coupon'], [Object]);
            }
            if (data.hasOwnProperty('daysAgoOfPurchases')) {
                obj['daysAgoOfPurchases'] = ApiClient.convertToType(data['daysAgoOfPurchases'], 'Number');
            }
            if (data.hasOwnProperty('enableBuyTogetherPerSku')) {
                obj['enableBuyTogetherPerSku'] = ApiClient.convertToType(data['enableBuyTogetherPerSku'], 'Boolean');
            }
            if (data.hasOwnProperty('featured')) {
                obj['featured'] = ApiClient.convertToType(data['featured'], 'Boolean');
            }
            if (data.hasOwnProperty('firstBuyIsProfileOptimistic')) {
                obj['firstBuyIsProfileOptimistic'] = ApiClient.convertToType(data['firstBuyIsProfileOptimistic'], 'Boolean');
            }
            if (data.hasOwnProperty('giftListTypes')) {
                obj['giftListTypes'] = ApiClient.convertToType(data['giftListTypes'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('idSellerIsInclusive')) {
                obj['idSellerIsInclusive'] = ApiClient.convertToType(data['idSellerIsInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('idsSalesChannel')) {
                obj['idsSalesChannel'] = ApiClient.convertToType(data['idsSalesChannel'], ['String']);
            }
            if (data.hasOwnProperty('installment')) {
                obj['installment'] = ApiClient.convertToType(data['installment'], 'Number');
            }
            if (data.hasOwnProperty('isDifferentListPriceAndPrice')) {
                obj['isDifferentListPriceAndPrice'] = ApiClient.convertToType(data['isDifferentListPriceAndPrice'], 'Boolean');
            }
            if (data.hasOwnProperty('isFirstBuy')) {
                obj['isFirstBuy'] = ApiClient.convertToType(data['isFirstBuy'], 'Boolean');
            }
            if (data.hasOwnProperty('isMinMaxInstallments')) {
                obj['isMinMaxInstallments'] = ApiClient.convertToType(data['isMinMaxInstallments'], 'Boolean');
            }
            if (data.hasOwnProperty('isSlaSelected')) {
                obj['isSlaSelected'] = ApiClient.convertToType(data['isSlaSelected'], 'Boolean');
            }
            if (data.hasOwnProperty('itemMaxPrice')) {
                obj['itemMaxPrice'] = ApiClient.convertToType(data['itemMaxPrice'], 'Number');
            }
            if (data.hasOwnProperty('itemMinPrice')) {
                obj['itemMinPrice'] = ApiClient.convertToType(data['itemMinPrice'], 'Number');
            }
            if (data.hasOwnProperty('listBrand1BuyTogether')) {
                obj['listBrand1BuyTogether'] = ApiClient.convertToType(data['listBrand1BuyTogether'], [Object]);
            }
            if (data.hasOwnProperty('listCategory1BuyTogether')) {
                obj['listCategory1BuyTogether'] = ApiClient.convertToType(data['listCategory1BuyTogether'], [SetcampaignconfigurationRequestTargetConfigurationsInnerListCategory1BuyTogetherInner]);
            }
            if (data.hasOwnProperty('listSku1BuyTogether')) {
                obj['listSku1BuyTogether'] = ApiClient.convertToType(data['listSku1BuyTogether'], [Object]);
            }
            if (data.hasOwnProperty('listSku2BuyTogether')) {
                obj['listSku2BuyTogether'] = ApiClient.convertToType(data['listSku2BuyTogether'], [Object]);
            }
            if (data.hasOwnProperty('marketingTags')) {
                obj['marketingTags'] = ApiClient.convertToType(data['marketingTags'], ['String']);
            }
            if (data.hasOwnProperty('marketingTagsAreNotInclusive')) {
                obj['marketingTagsAreNotInclusive'] = ApiClient.convertToType(data['marketingTagsAreNotInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('maxInstallment')) {
                obj['maxInstallment'] = ApiClient.convertToType(data['maxInstallment'], 'Number');
            }
            if (data.hasOwnProperty('maxUsage')) {
                obj['maxUsage'] = ApiClient.convertToType(data['maxUsage'], 'Number');
            }
            if (data.hasOwnProperty('maxUsagePerClient')) {
                obj['maxUsagePerClient'] = ApiClient.convertToType(data['maxUsagePerClient'], 'Number');
            }
            if (data.hasOwnProperty('merchants')) {
                obj['merchants'] = ApiClient.convertToType(data['merchants'], [Object]);
            }
            if (data.hasOwnProperty('minInstallment')) {
                obj['minInstallment'] = ApiClient.convertToType(data['minInstallment'], 'Number');
            }
            if (data.hasOwnProperty('minimumQuantityBuyTogether')) {
                obj['minimumQuantityBuyTogether'] = ApiClient.convertToType(data['minimumQuantityBuyTogether'], 'Number');
            }
            if (data.hasOwnProperty('multipleUsePerClient')) {
                obj['multipleUsePerClient'] = ApiClient.convertToType(data['multipleUsePerClient'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('paymentsMethods')) {
                obj['paymentsMethods'] = ApiClient.convertToType(data['paymentsMethods'], [CreateOrUpdateCalculatorConfigurationRequestPaymentsMethodsInner]);
            }
            if (data.hasOwnProperty('paymentsRules')) {
                obj['paymentsRules'] = ApiClient.convertToType(data['paymentsRules'], [Object]);
            }
            if (data.hasOwnProperty('percentualDiscountValueList')) {
                obj['percentualDiscountValueList'] = ApiClient.convertToType(data['percentualDiscountValueList'], ['Number']);
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [CreateOrUpdateCalculatorConfigurationRequestProductsInner]);
            }
            if (data.hasOwnProperty('productsAreInclusive')) {
                obj['productsAreInclusive'] = ApiClient.convertToType(data['productsAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('productsSpecifications')) {
                obj['productsSpecifications'] = ApiClient.convertToType(data['productsSpecifications'], [Object]);
            }
            if (data.hasOwnProperty('quantityToAffectBuyTogether')) {
                obj['quantityToAffectBuyTogether'] = ApiClient.convertToType(data['quantityToAffectBuyTogether'], 'Number');
            }
            if (data.hasOwnProperty('restrictionsBins')) {
                obj['restrictionsBins'] = ApiClient.convertToType(data['restrictionsBins'], ['String']);
            }
            if (data.hasOwnProperty('shouldDistributeDiscountAmongMatchedItems')) {
                obj['shouldDistributeDiscountAmongMatchedItems'] = ApiClient.convertToType(data['shouldDistributeDiscountAmongMatchedItems'], 'Boolean');
            }
            if (data.hasOwnProperty('skus')) {
                obj['skus'] = ApiClient.convertToType(data['skus'], [CreateOrUpdateCalculatorConfigurationRequestSkusInner]);
            }
            if (data.hasOwnProperty('skusAreInclusive')) {
                obj['skusAreInclusive'] = ApiClient.convertToType(data['skusAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('slasIds')) {
                obj['slasIds'] = ApiClient.convertToType(data['slasIds'], ['String']);
            }
            if (data.hasOwnProperty('stores')) {
                obj['stores'] = ApiClient.convertToType(data['stores'], [Object]);
            }
            if (data.hasOwnProperty('storesAreInclusive')) {
                obj['storesAreInclusive'] = ApiClient.convertToType(data['storesAreInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('totalValueCeling')) {
                obj['totalValueCeling'] = ApiClient.convertToType(data['totalValueCeling'], 'Number');
            }
            if (data.hasOwnProperty('totalValueFloor')) {
                obj['totalValueFloor'] = ApiClient.convertToType(data['totalValueFloor'], 'Number');
            }
            if (data.hasOwnProperty('totalValueIncludeAllItems')) {
                obj['totalValueIncludeAllItems'] = ApiClient.convertToType(data['totalValueIncludeAllItems'], 'Boolean');
            }
            if (data.hasOwnProperty('totalValueMode')) {
                obj['totalValueMode'] = ApiClient.convertToType(data['totalValueMode'], 'String');
            }
            if (data.hasOwnProperty('totalValuePurchase')) {
                obj['totalValuePurchase'] = ApiClient.convertToType(data['totalValuePurchase'], 'Number');
            }
            if (data.hasOwnProperty('useNewProgressiveAlgorithm')) {
                obj['useNewProgressiveAlgorithm'] = ApiClient.convertToType(data['useNewProgressiveAlgorithm'], 'Boolean');
            }
            if (data.hasOwnProperty('zipCodeRanges')) {
                obj['zipCodeRanges'] = ApiClient.convertToType(data['zipCodeRanges'], [SetcampaignconfigurationRequestTargetConfigurationsInnerZipCodeRangesInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SetcampaignconfigurationRequestTargetConfigurationsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SetcampaignconfigurationRequestTargetConfigurationsInner</code>.
     */
    static validateJSON(data) {
        if (data['affiliates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['affiliates'])) {
                throw new Error("Expected the field `affiliates` to be an array in the JSON data but got " + data['affiliates']);
            }
            // validate the optional field `affiliates` (array)
            for (const item of data['affiliates']) {
                CreateOrUpdateCalculatorConfigurationRequestAffiliatesInner.validateJSON(item);
            };
        }
        if (data['brands']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['brands'])) {
                throw new Error("Expected the field `brands` to be an array in the JSON data but got " + data['brands']);
            }
            // validate the optional field `brands` (array)
            for (const item of data['brands']) {
                CreateOrUpdateCalculatorConfigurationRequestBrandsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['campaigns'])) {
            throw new Error("Expected the field `campaigns` to be an array in the JSON data but got " + data['campaigns']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cardIssuers'])) {
            throw new Error("Expected the field `cardIssuers` to be an array in the JSON data but got " + data['cardIssuers']);
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                CreateOrUpdateCalculatorConfigurationRequestCategoriesInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['clusterExpressions'])) {
            throw new Error("Expected the field `clusterExpressions` to be an array in the JSON data but got " + data['clusterExpressions']);
        }
        // ensure the json data is a string
        if (data['clusterOperator'] && !(typeof data['clusterOperator'] === 'string' || data['clusterOperator'] instanceof String)) {
            throw new Error("Expected the field `clusterOperator` to be a primitive type in the JSON string but got " + data['clusterOperator']);
        }
        if (data['collections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['collections'])) {
                throw new Error("Expected the field `collections` to be an array in the JSON data but got " + data['collections']);
            }
            // validate the optional field `collections` (array)
            for (const item of data['collections']) {
                CreateOrUpdateCalculatorConfigurationRequestCollectionsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['collections1BuyTogether'])) {
            throw new Error("Expected the field `collections1BuyTogether` to be an array in the JSON data but got " + data['collections1BuyTogether']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['collections2BuyTogether'])) {
            throw new Error("Expected the field `collections2BuyTogether` to be an array in the JSON data but got " + data['collections2BuyTogether']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['coupon'])) {
            throw new Error("Expected the field `coupon` to be an array in the JSON data but got " + data['coupon']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['giftListTypes'])) {
            throw new Error("Expected the field `giftListTypes` to be an array in the JSON data but got " + data['giftListTypes']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['idsSalesChannel'])) {
            throw new Error("Expected the field `idsSalesChannel` to be an array in the JSON data but got " + data['idsSalesChannel']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['listBrand1BuyTogether'])) {
            throw new Error("Expected the field `listBrand1BuyTogether` to be an array in the JSON data but got " + data['listBrand1BuyTogether']);
        }
        if (data['listCategory1BuyTogether']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['listCategory1BuyTogether'])) {
                throw new Error("Expected the field `listCategory1BuyTogether` to be an array in the JSON data but got " + data['listCategory1BuyTogether']);
            }
            // validate the optional field `listCategory1BuyTogether` (array)
            for (const item of data['listCategory1BuyTogether']) {
                SetcampaignconfigurationRequestTargetConfigurationsInnerListCategory1BuyTogetherInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['listSku1BuyTogether'])) {
            throw new Error("Expected the field `listSku1BuyTogether` to be an array in the JSON data but got " + data['listSku1BuyTogether']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['listSku2BuyTogether'])) {
            throw new Error("Expected the field `listSku2BuyTogether` to be an array in the JSON data but got " + data['listSku2BuyTogether']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['marketingTags'])) {
            throw new Error("Expected the field `marketingTags` to be an array in the JSON data but got " + data['marketingTags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['merchants'])) {
            throw new Error("Expected the field `merchants` to be an array in the JSON data but got " + data['merchants']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        if (data['paymentsMethods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['paymentsMethods'])) {
                throw new Error("Expected the field `paymentsMethods` to be an array in the JSON data but got " + data['paymentsMethods']);
            }
            // validate the optional field `paymentsMethods` (array)
            for (const item of data['paymentsMethods']) {
                CreateOrUpdateCalculatorConfigurationRequestPaymentsMethodsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['paymentsRules'])) {
            throw new Error("Expected the field `paymentsRules` to be an array in the JSON data but got " + data['paymentsRules']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['percentualDiscountValueList'])) {
            throw new Error("Expected the field `percentualDiscountValueList` to be an array in the JSON data but got " + data['percentualDiscountValueList']);
        }
        if (data['products']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['products'])) {
                throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
            }
            // validate the optional field `products` (array)
            for (const item of data['products']) {
                CreateOrUpdateCalculatorConfigurationRequestProductsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['productsSpecifications'])) {
            throw new Error("Expected the field `productsSpecifications` to be an array in the JSON data but got " + data['productsSpecifications']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['restrictionsBins'])) {
            throw new Error("Expected the field `restrictionsBins` to be an array in the JSON data but got " + data['restrictionsBins']);
        }
        if (data['skus']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['skus'])) {
                throw new Error("Expected the field `skus` to be an array in the JSON data but got " + data['skus']);
            }
            // validate the optional field `skus` (array)
            for (const item of data['skus']) {
                CreateOrUpdateCalculatorConfigurationRequestSkusInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['slasIds'])) {
            throw new Error("Expected the field `slasIds` to be an array in the JSON data but got " + data['slasIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stores'])) {
            throw new Error("Expected the field `stores` to be an array in the JSON data but got " + data['stores']);
        }
        // ensure the json data is a string
        if (data['totalValueMode'] && !(typeof data['totalValueMode'] === 'string' || data['totalValueMode'] instanceof String)) {
            throw new Error("Expected the field `totalValueMode` to be a primitive type in the JSON string but got " + data['totalValueMode']);
        }
        if (data['zipCodeRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['zipCodeRanges'])) {
                throw new Error("Expected the field `zipCodeRanges` to be an array in the JSON data but got " + data['zipCodeRanges']);
            }
            // validate the optional field `zipCodeRanges` (array)
            for (const item of data['zipCodeRanges']) {
                SetcampaignconfigurationRequestTargetConfigurationsInnerZipCodeRangesInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Marketplace order identifier. The discount will apply to selected affiliates.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestAffiliatesInner>} affiliates
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['affiliates'] = undefined;

/**
 * Shows if the trade policy IDs are exclusive.
 * @member {Boolean} areSalesChannelIdsExclusive
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['areSalesChannelIdsExclusive'] = undefined;

/**
 * Object composed by the brands that will activate or deactivate the campaign audience.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestBrandsInner>} brands
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['brands'] = undefined;

/**
 * If set to `true`, this campaign audience will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this campaign audience not to be applied.
 * @member {Boolean} brandsAreInclusive
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['brandsAreInclusive'] = undefined;

/**
 * Campaign Audiences that activate this promotion.
 * @member {Array.<Object>} campaigns
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['campaigns'] = undefined;

/**
 * @member {Array.<Object>} cardIssuers
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['cardIssuers'] = undefined;

/**
 * Object composed by the categories that will activate or deactivate the campaign audience.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestCategoriesInner>} categories
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['categories'] = undefined;

/**
 * If set to `true`, this campaign audience will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this campaign audience not to be applied.
 * @member {Boolean} categoriesAreInclusive
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['categoriesAreInclusive'] = undefined;

/**
 * An expression to use with clusters.
 * @member {Array.<String>} clusterExpressions
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['clusterExpressions'] = undefined;

/**
 * @member {String} clusterOperator
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['clusterOperator'] = undefined;

/**
 * Object composed by the collections that will activate or deactivate the campaign audience.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestCollectionsInner>} collections
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['collections'] = undefined;

/**
 * Collections that will generate the promotion, type **Buy Together**, **More for less**, **Progressive Discount**, **Buy One Get One**.
 * @member {Array.<String>} collections1BuyTogether
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['collections1BuyTogether'] = undefined;

/**
 * @member {Array.<Object>} collections2BuyTogether
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['collections2BuyTogether'] = undefined;

/**
 * If set to `true`, this campaign audience will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this campaign audience not to be applied.
 * @member {Boolean} collectionsIsInclusive
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['collectionsIsInclusive'] = undefined;

/**
 * If the **List Price** and **Price** are the same.
 * @member {Boolean} compareListPriceAndPrice
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['compareListPriceAndPrice'] = undefined;

/**
 * @member {Array.<Object>} coupon
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['coupon'] = undefined;

/**
 * Number of days that are considered to add the purchase history.
 * @member {Number} daysAgoOfPurchases
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['daysAgoOfPurchases'] = undefined;

/**
 * Enable **Buy Together** per SKU.
 * @member {Boolean} enableBuyTogetherPerSku
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['enableBuyTogetherPerSku'] = undefined;

/**
 * Defines if the target audience is featured (`true`) or not (`false`).
 * @member {Boolean} featured
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['featured'] = undefined;

/**
 * Applies the discount even if the user is not logged.
 * @member {Boolean} firstBuyIsProfileOptimistic
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['firstBuyIsProfileOptimistic'] = undefined;

/**
 * Gifts List Type.
 * @member {Array.<String>} giftListTypes
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['giftListTypes'] = undefined;

/**
 * Target audience ID.
 * @member {String} id
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['id'] = undefined;

/**
 * Shows if at least one of the sellers must be valid to active the campaign audience.
 * @member {Boolean} idSellerIsInclusive
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['idSellerIsInclusive'] = undefined;

/**
 * Shows the trade policies that active the campaign audience.
 * @member {Array.<String>} idsSalesChannel
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['idsSalesChannel'] = undefined;

/**
 * @member {Number} installment
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['installment'] = undefined;

/**
 * Applies the campaign audience only if the list price and price is different.
 * @member {Boolean} isDifferentListPriceAndPrice
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['isDifferentListPriceAndPrice'] = undefined;

/**
 * Applies the discount only if it's a first buy.
 * @member {Boolean} isFirstBuy
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['isFirstBuy'] = undefined;

/**
 * Set if the campaign audience will be applied considering a minimum and maximum values for installments.
 * @member {Boolean} isMinMaxInstallments
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['isMinMaxInstallments'] = undefined;

/**
 * Applies selected discount only when one of the defined shipping method is selected by the customer.
 * @member {Boolean} isSlaSelected
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['isSlaSelected'] = undefined;

/**
 * Maximum price of the item.
 * @member {Number} itemMaxPrice
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['itemMaxPrice'] = undefined;

/**
 * Minimum price of the item.
 * @member {Number} itemMinPrice
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['itemMinPrice'] = undefined;

/**
 * Brand first list for the promotion **Buy Together.
 * @member {Array.<Object>} listBrand1BuyTogether
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['listBrand1BuyTogether'] = undefined;

/**
 * Category first list for the promotion **Buy Together**.
 * @member {Array.<module:model/SetcampaignconfigurationRequestTargetConfigurationsInnerListCategory1BuyTogetherInner>} listCategory1BuyTogether
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['listCategory1BuyTogether'] = undefined;

/**
 * SKU first list for the promotion **Buy Together**.
 * @member {Array.<Object>} listSku1BuyTogether
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['listSku1BuyTogether'] = undefined;

/**
 * SKU second list for the promotion **Buy Together**.
 * @member {Array.<Object>} listSku2BuyTogether
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['listSku2BuyTogether'] = undefined;

/**
 * Array with all campaign audience's marketing tags.
 * @member {Array.<String>} marketingTags
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['marketingTags'] = undefined;

/**
 * Shows if marketing tags are not inclusive.
 * @member {Boolean} marketingTagsAreNotInclusive
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['marketingTagsAreNotInclusive'] = undefined;

/**
 * Maximum value for installment.
 * @member {Number} maxInstallment
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['maxInstallment'] = undefined;

/**
 * Defines how many times the campaign audience can be used.
 * @member {Number} maxUsage
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['maxUsage'] = undefined;

/**
 * Defines if the campaign audience can be used multiple times per client.
 * @member {Number} maxUsagePerClient
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['maxUsagePerClient'] = undefined;

/**
 * @member {Array.<Object>} merchants
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['merchants'] = undefined;

/**
 * Minimum value for installment.
 * @member {Number} minInstallment
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['minInstallment'] = undefined;

/**
 * Minimum quantity for **Buy Together** promotion.
 * @member {Number} minimumQuantityBuyTogether
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['minimumQuantityBuyTogether'] = undefined;

/**
 * Defines if the campaign audience can be used multiple times per client.
 * @member {Boolean} multipleUsePerClient
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['multipleUsePerClient'] = undefined;

/**
 * Target audience name.
 * @member {String} name
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['name'] = undefined;

/**
 * Shows the campaign audience origin, `Marketplace` or `Fulfillment`.  Read [Difference between orders with marketplace and fulfillment sources](https://help.vtex.com/en/tutorial/what-are-orders-with-marketplace-source-and-orders-with-fulfillment-source--6eVYrmUAwMOeKICU2KuG06) for more information.
 * @member {String} origin
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['origin'] = undefined;

/**
 * Array composed by all the Payments Methods.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestPaymentsMethodsInner>} paymentsMethods
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['paymentsMethods'] = undefined;

/**
 * @member {Array.<Object>} paymentsRules
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['paymentsRules'] = undefined;

/**
 * Percentual discount value list.
 * @member {Array.<Number>} percentualDiscountValueList
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['percentualDiscountValueList'] = undefined;

/**
 * Object composed by the products that will activate or deactivate the campaign audience.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestProductsInner>} products
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['products'] = undefined;

/**
 * If set to `true`, this campaign audience will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this campaign audience not to be applied.
 * @member {Boolean} productsAreInclusive
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['productsAreInclusive'] = undefined;

/**
 * @member {Array.<Object>} productsSpecifications
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['productsSpecifications'] = undefined;

/**
 * Quantity to affect **Buy Together** promotion.
 * @member {Number} quantityToAffectBuyTogether
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['quantityToAffectBuyTogether'] = undefined;

/**
 * The discount will be granted if the card's BIN is given.
 * @member {Array.<String>} restrictionsBins
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['restrictionsBins'] = undefined;

/**
 * Should distribute discount among matched items.
 * @member {Boolean} shouldDistributeDiscountAmongMatchedItems
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['shouldDistributeDiscountAmongMatchedItems'] = undefined;

/**
 * Object composed by the SKUs that will activate or deactivate the campaign audience.
 * @member {Array.<module:model/CreateOrUpdateCalculatorConfigurationRequestSkusInner>} skus
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['skus'] = undefined;

/**
 * If set to `true`, this campaign audience will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this campaign audience not to be applied.
 * @member {Boolean} skusAreInclusive
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['skusAreInclusive'] = undefined;

/**
 * The discount will be granted if the shipping method is the same as the one given.
 * @member {Array.<String>} slasIds
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['slasIds'] = undefined;

/**
 * @member {Array.<Object>} stores
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['stores'] = undefined;

/**
 * @member {Boolean} storesAreInclusive
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['storesAreInclusive'] = undefined;

/**
 * Maximum chart value to active the campaign audience.
 * @member {Number} totalValueCeling
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['totalValueCeling'] = undefined;

/**
 * Minimum chart value to active the campaign audience.
 * @member {Number} totalValueFloor
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['totalValueFloor'] = undefined;

/**
 * @member {Boolean} totalValueIncludeAllItems
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['totalValueIncludeAllItems'] = undefined;

/**
 * Total chart value to active the campaign audience.
 * @member {String} totalValueMode
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['totalValueMode'] = undefined;

/**
 * Total value a client must have in past orders to active the campaign audience.
 * @member {Number} totalValuePurchase
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['totalValuePurchase'] = undefined;

/**
 * Use new progressive algorithm.
 * @member {Boolean} useNewProgressiveAlgorithm
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['useNewProgressiveAlgorithm'] = undefined;

/**
 * Range of the zip code that applies the campaign audience.
 * @member {Array.<module:model/SetcampaignconfigurationRequestTargetConfigurationsInnerZipCodeRangesInner>} zipCodeRanges
 */
SetcampaignconfigurationRequestTargetConfigurationsInner.prototype['zipCodeRanges'] = undefined;






export default SetcampaignconfigurationRequestTargetConfigurationsInner;

