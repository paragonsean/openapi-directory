/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateRequest model module.
 * @module model/UpdateRequest
 * @version 1.0
 */
class UpdateRequest {
    /**
     * Constructs a new <code>UpdateRequest</code>.
     * @alias module:model/UpdateRequest
     * @param couponCode {String} Coupon code.
     * @param expirationIntervalPerUse {String} Coupon expiration interval per use.
     * @param isArchived {Boolean} Defines if the coupon is archived (`true`) or not (`false`).
     * @param maxItemsPerClient {Number} Maximum items per client that the coupon can be applied.
     * @param utmCampaign {String} UTM campaign code.
     * @param utmSource {String} UTM source code.
     */
    constructor(couponCode, expirationIntervalPerUse, isArchived, maxItemsPerClient, utmCampaign, utmSource) { 
        
        UpdateRequest.initialize(this, couponCode, expirationIntervalPerUse, isArchived, maxItemsPerClient, utmCampaign, utmSource);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, couponCode, expirationIntervalPerUse, isArchived, maxItemsPerClient, utmCampaign, utmSource) { 
        obj['couponCode'] = couponCode;
        obj['expirationIntervalPerUse'] = expirationIntervalPerUse;
        obj['isArchived'] = isArchived;
        obj['maxItemsPerClient'] = maxItemsPerClient;
        obj['utmCampaign'] = utmCampaign;
        obj['utmSource'] = utmSource;
    }

    /**
     * Constructs a <code>UpdateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateRequest} obj Optional instance to populate.
     * @return {module:model/UpdateRequest} The populated <code>UpdateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateRequest();

            if (data.hasOwnProperty('couponCode')) {
                obj['couponCode'] = ApiClient.convertToType(data['couponCode'], 'String');
            }
            if (data.hasOwnProperty('expirationIntervalPerUse')) {
                obj['expirationIntervalPerUse'] = ApiClient.convertToType(data['expirationIntervalPerUse'], 'String');
            }
            if (data.hasOwnProperty('isArchived')) {
                obj['isArchived'] = ApiClient.convertToType(data['isArchived'], 'Boolean');
            }
            if (data.hasOwnProperty('maxItemsPerClient')) {
                obj['maxItemsPerClient'] = ApiClient.convertToType(data['maxItemsPerClient'], 'Number');
            }
            if (data.hasOwnProperty('utmCampaign')) {
                obj['utmCampaign'] = ApiClient.convertToType(data['utmCampaign'], 'String');
            }
            if (data.hasOwnProperty('utmSource')) {
                obj['utmSource'] = ApiClient.convertToType(data['utmSource'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['couponCode'] && !(typeof data['couponCode'] === 'string' || data['couponCode'] instanceof String)) {
            throw new Error("Expected the field `couponCode` to be a primitive type in the JSON string but got " + data['couponCode']);
        }
        // ensure the json data is a string
        if (data['expirationIntervalPerUse'] && !(typeof data['expirationIntervalPerUse'] === 'string' || data['expirationIntervalPerUse'] instanceof String)) {
            throw new Error("Expected the field `expirationIntervalPerUse` to be a primitive type in the JSON string but got " + data['expirationIntervalPerUse']);
        }
        // ensure the json data is a string
        if (data['utmCampaign'] && !(typeof data['utmCampaign'] === 'string' || data['utmCampaign'] instanceof String)) {
            throw new Error("Expected the field `utmCampaign` to be a primitive type in the JSON string but got " + data['utmCampaign']);
        }
        // ensure the json data is a string
        if (data['utmSource'] && !(typeof data['utmSource'] === 'string' || data['utmSource'] instanceof String)) {
            throw new Error("Expected the field `utmSource` to be a primitive type in the JSON string but got " + data['utmSource']);
        }

        return true;
    }


}

UpdateRequest.RequiredProperties = ["couponCode", "expirationIntervalPerUse", "isArchived", "maxItemsPerClient", "utmCampaign", "utmSource"];

/**
 * Coupon code.
 * @member {String} couponCode
 */
UpdateRequest.prototype['couponCode'] = undefined;

/**
 * Coupon expiration interval per use.
 * @member {String} expirationIntervalPerUse
 */
UpdateRequest.prototype['expirationIntervalPerUse'] = undefined;

/**
 * Defines if the coupon is archived (`true`) or not (`false`).
 * @member {Boolean} isArchived
 */
UpdateRequest.prototype['isArchived'] = undefined;

/**
 * Maximum items per client that the coupon can be applied.
 * @member {Number} maxItemsPerClient
 */
UpdateRequest.prototype['maxItemsPerClient'] = undefined;

/**
 * UTM campaign code.
 * @member {String} utmCampaign
 */
UpdateRequest.prototype['utmCampaign'] = undefined;

/**
 * UTM source code.
 * @member {String} utmSource
 */
UpdateRequest.prototype['utmSource'] = undefined;






export default UpdateRequest;

