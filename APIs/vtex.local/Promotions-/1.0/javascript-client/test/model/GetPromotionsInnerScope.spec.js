/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PromotionsTaxesApi);
  }
}(this, function(expect, PromotionsTaxesApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetPromotionsInnerScope', function() {
    it('should create an instance of GetPromotionsInnerScope', function() {
      // uncomment below and update the code to test GetPromotionsInnerScope
      //var instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
      //expect(instance).to.be.a(PromotionsTaxesApi.GetPromotionsInnerScope);
    });

    it('should have the property allCatalog (base name: "allCatalog")', function() {
      // uncomment below and update the code to test the property allCatalog
      //var instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
      //expect(instance).to.be();
    });

    it('should have the property brands (base name: "brands")', function() {
      // uncomment below and update the code to test the property brands
      //var instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
      //expect(instance).to.be();
    });

    it('should have the property brandsAreInclusive (base name: "brandsAreInclusive")', function() {
      // uncomment below and update the code to test the property brandsAreInclusive
      //var instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
      //expect(instance).to.be();
    });

    it('should have the property categories (base name: "categories")', function() {
      // uncomment below and update the code to test the property categories
      //var instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
      //expect(instance).to.be();
    });

    it('should have the property categoriesAreInclusive (base name: "categoriesAreInclusive")', function() {
      // uncomment below and update the code to test the property categoriesAreInclusive
      //var instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
      //expect(instance).to.be();
    });

    it('should have the property collections (base name: "collections")', function() {
      // uncomment below and update the code to test the property collections
      //var instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
      //expect(instance).to.be();
    });

    it('should have the property collectionsAreInclusive (base name: "collectionsAreInclusive")', function() {
      // uncomment below and update the code to test the property collectionsAreInclusive
      //var instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
      //expect(instance).to.be();
    });

    it('should have the property products (base name: "products")', function() {
      // uncomment below and update the code to test the property products
      //var instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
      //expect(instance).to.be();
    });

    it('should have the property productsAreInclusive (base name: "productsAreInclusive")', function() {
      // uncomment below and update the code to test the property productsAreInclusive
      //var instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
      //expect(instance).to.be();
    });

    it('should have the property sellers (base name: "sellers")', function() {
      // uncomment below and update the code to test the property sellers
      //var instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
      //expect(instance).to.be();
    });

    it('should have the property sellersAreInclusive (base name: "sellersAreInclusive")', function() {
      // uncomment below and update the code to test the property sellersAreInclusive
      //var instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
      //expect(instance).to.be();
    });

    it('should have the property skus (base name: "skus")', function() {
      // uncomment below and update the code to test the property skus
      //var instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
      //expect(instance).to.be();
    });

    it('should have the property skusAreInclusive (base name: "skusAreInclusive")', function() {
      // uncomment below and update the code to test the property skusAreInclusive
      //var instance = new PromotionsTaxesApi.GetPromotionsInnerScope();
      //expect(instance).to.be();
    });

  });

}));
