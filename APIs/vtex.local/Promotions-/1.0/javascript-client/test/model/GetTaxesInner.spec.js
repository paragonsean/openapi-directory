/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PromotionsTaxesApi);
  }
}(this, function(expect, PromotionsTaxesApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PromotionsTaxesApi.GetTaxesInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetTaxesInner', function() {
    it('should create an instance of GetTaxesInner', function() {
      // uncomment below and update the code to test GetTaxesInner
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be.a(PromotionsTaxesApi.GetTaxesInner);
    });

    it('should have the property campaigns (base name: "Campaigns")', function() {
      // uncomment below and update the code to test the property campaigns
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property activateGiftsMultiplier (base name: "activateGiftsMultiplier")', function() {
      // uncomment below and update the code to test the property activateGiftsMultiplier
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property areSalesChannelIdsExclusive (base name: "areSalesChannelIdsExclusive")', function() {
      // uncomment below and update the code to test the property areSalesChannelIdsExclusive
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property beginDate (base name: "beginDate")', function() {
      // uncomment below and update the code to test the property beginDate
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "endDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property hasMaxPricePerItem (base name: "hasMaxPricePerItem")', function() {
      // uncomment below and update the code to test the property hasMaxPricePerItem
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property idCalculatorConfiguration (base name: "idCalculatorConfiguration")', function() {
      // uncomment below and update the code to test the property idCalculatorConfiguration
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property idsSalesChannel (base name: "idsSalesChannel")', function() {
      // uncomment below and update the code to test the property idsSalesChannel
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property isActive (base name: "isActive")', function() {
      // uncomment below and update the code to test the property isActive
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property isArchived (base name: "isArchived")', function() {
      // uncomment below and update the code to test the property isArchived
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property isTax (base name: "isTax")', function() {
      // uncomment below and update the code to test the property isTax
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property lastModifiedUtc (base name: "lastModifiedUtc")', function() {
      // uncomment below and update the code to test the property lastModifiedUtc
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property maxUsage (base name: "maxUsage")', function() {
      // uncomment below and update the code to test the property maxUsage
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property percentualTax (base name: "percentualTax")', function() {
      // uncomment below and update the code to test the property percentualTax
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property scope (base name: "scope")', function() {
      // uncomment below and update the code to test the property scope
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property utmCampain (base name: "utmCampain")', function() {
      // uncomment below and update the code to test the property utmCampain
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property utmSource (base name: "utmSource")', function() {
      // uncomment below and update the code to test the property utmSource
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

    it('should have the property utmiCampaign (base name: "utmiCampaign")', function() {
      // uncomment below and update the code to test the property utmiCampaign
      //var instance = new PromotionsTaxesApi.GetTaxesInner();
      //expect(instance).to.be();
    });

  });

}));
