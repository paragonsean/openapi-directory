/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPricebycontextRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPricebycontextRequest::OAIPricebycontextRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPricebycontextRequest::OAIPricebycontextRequest() {
    this->initializeModel();
}

OAIPricebycontextRequest::~OAIPricebycontextRequest() {}

void OAIPricebycontextRequest::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_seller_id_isSet = false;
    m_seller_id_isValid = false;

    m_valid_from_isSet = false;
    m_valid_from_isValid = false;

    m_valid_to_isSet = false;
    m_valid_to_isValid = false;
}

void OAIPricebycontextRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPricebycontextRequest::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;

    m_seller_id_isValid = ::OpenAPI::fromJsonValue(m_seller_id, json[QString("sellerId")]);
    m_seller_id_isSet = !json[QString("sellerId")].isNull() && m_seller_id_isValid;

    m_valid_from_isValid = ::OpenAPI::fromJsonValue(m_valid_from, json[QString("validFrom")]);
    m_valid_from_isSet = !json[QString("validFrom")].isNull() && m_valid_from_isValid;

    m_valid_to_isValid = ::OpenAPI::fromJsonValue(m_valid_to, json[QString("validTo")]);
    m_valid_to_isSet = !json[QString("validTo")].isNull() && m_valid_to_isValid;
}

QString OAIPricebycontextRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPricebycontextRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_seller_id_isSet) {
        obj.insert(QString("sellerId"), ::OpenAPI::toJsonValue(m_seller_id));
    }
    if (m_valid_from_isSet) {
        obj.insert(QString("validFrom"), ::OpenAPI::toJsonValue(m_valid_from));
    }
    if (m_valid_to_isSet) {
        obj.insert(QString("validTo"), ::OpenAPI::toJsonValue(m_valid_to));
    }
    return obj;
}

qint32 OAIPricebycontextRequest::getId() const {
    return m_id;
}
void OAIPricebycontextRequest::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPricebycontextRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPricebycontextRequest::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIPricebycontextRequest::getItemId() const {
    return m_item_id;
}
void OAIPricebycontextRequest::setItemId(const qint32 &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIPricebycontextRequest::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIPricebycontextRequest::is_item_id_Valid() const{
    return m_item_id_isValid;
}

qint32 OAIPricebycontextRequest::getSalesChannel() const {
    return m_sales_channel;
}
void OAIPricebycontextRequest::setSalesChannel(const qint32 &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAIPricebycontextRequest::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAIPricebycontextRequest::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

QString OAIPricebycontextRequest::getSellerId() const {
    return m_seller_id;
}
void OAIPricebycontextRequest::setSellerId(const QString &seller_id) {
    m_seller_id = seller_id;
    m_seller_id_isSet = true;
}

bool OAIPricebycontextRequest::is_seller_id_Set() const{
    return m_seller_id_isSet;
}

bool OAIPricebycontextRequest::is_seller_id_Valid() const{
    return m_seller_id_isValid;
}

QString OAIPricebycontextRequest::getValidFrom() const {
    return m_valid_from;
}
void OAIPricebycontextRequest::setValidFrom(const QString &valid_from) {
    m_valid_from = valid_from;
    m_valid_from_isSet = true;
}

bool OAIPricebycontextRequest::is_valid_from_Set() const{
    return m_valid_from_isSet;
}

bool OAIPricebycontextRequest::is_valid_from_Valid() const{
    return m_valid_from_isValid;
}

QString OAIPricebycontextRequest::getValidTo() const {
    return m_valid_to;
}
void OAIPricebycontextRequest::setValidTo(const QString &valid_to) {
    m_valid_to = valid_to;
    m_valid_to_isSet = true;
}

bool OAIPricebycontextRequest::is_valid_to_Set() const{
    return m_valid_to_isSet;
}

bool OAIPricebycontextRequest::is_valid_to_Valid() const{
    return m_valid_to_isValid;
}

bool OAIPricebycontextRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPricebycontextRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_item_id_isValid && m_sales_channel_isValid && m_seller_id_isValid && m_valid_from_isValid && m_valid_to_isValid && true;
}

} // namespace OpenAPI
