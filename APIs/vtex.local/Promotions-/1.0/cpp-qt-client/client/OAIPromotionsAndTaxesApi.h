/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPromotionsAndTaxesApi_H
#define OAI_OAIPromotionsAndTaxesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateOrUpdateCalculatorConfiguration_200_response.h"
#include "OAICreateOrUpdateCalculatorConfiguration_request.h"
#include "OAIGetAllBenefits_200_response.h"
#include "OAIGetAllTaxes_200_response.h"
#include "OAIGetArchivedPromotions_200_response.h"
#include "OAIGetArchivedTaxes_200_response.h"
#include "OAIGetCalculatorConfigurationById_200_response.h"
#include "OAIGetCalculatorConfigurationById_200_response_1.h"
#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPromotionsAndTaxesApi : public QObject {
    Q_OBJECT

public:
    OAIPromotionsAndTaxesApi(const int timeOut = 0);
    ~OAIPromotionsAndTaxesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  x_vtex_calculator_name QString [required]
    * @param[in]  x_vtex_start_date QString [required]
    * @param[in]  x_vtex_end_date QString [required]
    * @param[in]  x_vtex_accumulate_with_manual_prices bool [required]
    * @param[in]  x_vtex_cumulative bool [optional]
    * @param[in]  x_vtex_cluster_operator QString [optional]
    * @param[in]  x_vtex_cluster_expression QString [optional]
    * @param[in]  body OAIHttpFileElement [optional]
    */
    virtual void apiRnbPvtImportCalculatorConfigurationPost(const QString &content_type, const QString &accept, const QString &x_vtex_calculator_name, const QString &x_vtex_start_date, const QString &x_vtex_end_date, const bool &x_vtex_accumulate_with_manual_prices, const ::OpenAPI::OptionalParam<bool> &x_vtex_cumulative = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_vtex_cluster_operator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vtex_cluster_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &body = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  x_vtex_calculator_name QString [required]
    * @param[in]  x_vtex_start_date QString [required]
    * @param[in]  x_vtex_end_date QString [required]
    * @param[in]  x_vtex_accumulate_with_manual_prices bool [required]
    * @param[in]  promotion_id QString [required]
    * @param[in]  x_vtex_cumulative bool [optional]
    * @param[in]  x_vtex_cluster_operator QString [optional]
    * @param[in]  x_vtex_cluster_expression QString [optional]
    * @param[in]  body OAIHttpFileElement [optional]
    */
    virtual void apiRnbPvtImportCalculatorConfigurationPromotionIdPut(const QString &content_type, const QString &accept, const QString &x_vtex_calculator_name, const QString &x_vtex_start_date, const QString &x_vtex_end_date, const bool &x_vtex_accumulate_with_manual_prices, const QString &promotion_id, const ::OpenAPI::OptionalParam<bool> &x_vtex_cumulative = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_vtex_cluster_operator = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vtex_cluster_expression = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &body = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  id_calculator_configuration QString [required]
    */
    virtual void archivePromotion(const QString &content_type, const QString &accept, const QString &id_calculator_configuration);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_create_or_update_calculator_configuration_request OAICreateOrUpdateCalculatorConfiguration_request [required]
    */
    virtual void createOrUpdateCalculatorConfiguration(const QString &content_type, const QString &accept, const OAICreateOrUpdateCalculatorConfiguration_request &oai_create_or_update_calculator_configuration_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getAllBenefits(const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getAllTaxes(const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getArchivedPromotions(const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getArchivedTaxes(const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  id_calculator_configuration QString [required]
    */
    virtual void getCalculatorConfigurationById(const QString &content_type, const QString &accept, const QString &id_calculator_configuration);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  id_calculator_configuration QString [required]
    */
    virtual void unarchivePromotion(const QString &content_type, const QString &accept, const QString &id_calculator_configuration);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiRnbPvtImportCalculatorConfigurationPostCallback(OAIHttpRequestWorker *worker);
    void apiRnbPvtImportCalculatorConfigurationPromotionIdPutCallback(OAIHttpRequestWorker *worker);
    void archivePromotionCallback(OAIHttpRequestWorker *worker);
    void createOrUpdateCalculatorConfigurationCallback(OAIHttpRequestWorker *worker);
    void getAllBenefitsCallback(OAIHttpRequestWorker *worker);
    void getAllTaxesCallback(OAIHttpRequestWorker *worker);
    void getArchivedPromotionsCallback(OAIHttpRequestWorker *worker);
    void getArchivedTaxesCallback(OAIHttpRequestWorker *worker);
    void getCalculatorConfigurationByIdCallback(OAIHttpRequestWorker *worker);
    void unarchivePromotionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiRnbPvtImportCalculatorConfigurationPostSignal();
    void apiRnbPvtImportCalculatorConfigurationPromotionIdPutSignal();
    void archivePromotionSignal();
    void createOrUpdateCalculatorConfigurationSignal(OAICreateOrUpdateCalculatorConfiguration_200_response summary);
    void getAllBenefitsSignal(OAIGetAllBenefits_200_response summary);
    void getAllTaxesSignal(OAIGetAllTaxes_200_response summary);
    void getArchivedPromotionsSignal(OAIGetArchivedPromotions_200_response summary);
    void getArchivedTaxesSignal(OAIGetArchivedTaxes_200_response summary);
    void getCalculatorConfigurationByIdSignal(OAIGetCalculatorConfigurationById_200_response summary);
    void unarchivePromotionSignal();


    void apiRnbPvtImportCalculatorConfigurationPostSignalFull(OAIHttpRequestWorker *worker);
    void apiRnbPvtImportCalculatorConfigurationPromotionIdPutSignalFull(OAIHttpRequestWorker *worker);
    void archivePromotionSignalFull(OAIHttpRequestWorker *worker);
    void createOrUpdateCalculatorConfigurationSignalFull(OAIHttpRequestWorker *worker, OAICreateOrUpdateCalculatorConfiguration_200_response summary);
    void getAllBenefitsSignalFull(OAIHttpRequestWorker *worker, OAIGetAllBenefits_200_response summary);
    void getAllTaxesSignalFull(OAIHttpRequestWorker *worker, OAIGetAllTaxes_200_response summary);
    void getArchivedPromotionsSignalFull(OAIHttpRequestWorker *worker, OAIGetArchivedPromotions_200_response summary);
    void getArchivedTaxesSignalFull(OAIHttpRequestWorker *worker, OAIGetArchivedTaxes_200_response summary);
    void getCalculatorConfigurationByIdSignalFull(OAIHttpRequestWorker *worker, OAIGetCalculatorConfigurationById_200_response summary);
    void unarchivePromotionSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiRnbPvtImportCalculatorConfigurationPostSignalError() instead")
    void apiRnbPvtImportCalculatorConfigurationPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnbPvtImportCalculatorConfigurationPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnbPvtImportCalculatorConfigurationPromotionIdPutSignalError() instead")
    void apiRnbPvtImportCalculatorConfigurationPromotionIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnbPvtImportCalculatorConfigurationPromotionIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archivePromotionSignalError() instead")
    void archivePromotionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void archivePromotionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrUpdateCalculatorConfigurationSignalError() instead")
    void createOrUpdateCalculatorConfigurationSignalE(OAICreateOrUpdateCalculatorConfiguration_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrUpdateCalculatorConfigurationSignalError(OAICreateOrUpdateCalculatorConfiguration_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllBenefitsSignalError() instead")
    void getAllBenefitsSignalE(OAIGetAllBenefits_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllBenefitsSignalError(OAIGetAllBenefits_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllTaxesSignalError() instead")
    void getAllTaxesSignalE(OAIGetAllTaxes_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllTaxesSignalError(OAIGetAllTaxes_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArchivedPromotionsSignalError() instead")
    void getArchivedPromotionsSignalE(OAIGetArchivedPromotions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getArchivedPromotionsSignalError(OAIGetArchivedPromotions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArchivedTaxesSignalError() instead")
    void getArchivedTaxesSignalE(OAIGetArchivedTaxes_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getArchivedTaxesSignalError(OAIGetArchivedTaxes_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCalculatorConfigurationByIdSignalError() instead")
    void getCalculatorConfigurationByIdSignalE(OAIGetCalculatorConfigurationById_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCalculatorConfigurationByIdSignalError(OAIGetCalculatorConfigurationById_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unarchivePromotionSignalError() instead")
    void unarchivePromotionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unarchivePromotionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiRnbPvtImportCalculatorConfigurationPostSignalErrorFull() instead")
    void apiRnbPvtImportCalculatorConfigurationPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnbPvtImportCalculatorConfigurationPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnbPvtImportCalculatorConfigurationPromotionIdPutSignalErrorFull() instead")
    void apiRnbPvtImportCalculatorConfigurationPromotionIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnbPvtImportCalculatorConfigurationPromotionIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archivePromotionSignalErrorFull() instead")
    void archivePromotionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void archivePromotionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrUpdateCalculatorConfigurationSignalErrorFull() instead")
    void createOrUpdateCalculatorConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrUpdateCalculatorConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllBenefitsSignalErrorFull() instead")
    void getAllBenefitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllBenefitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllTaxesSignalErrorFull() instead")
    void getAllTaxesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllTaxesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArchivedPromotionsSignalErrorFull() instead")
    void getArchivedPromotionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getArchivedPromotionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getArchivedTaxesSignalErrorFull() instead")
    void getArchivedTaxesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getArchivedTaxesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCalculatorConfigurationByIdSignalErrorFull() instead")
    void getCalculatorConfigurationByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCalculatorConfigurationByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unarchivePromotionSignalErrorFull() instead")
    void unarchivePromotionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unarchivePromotionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
