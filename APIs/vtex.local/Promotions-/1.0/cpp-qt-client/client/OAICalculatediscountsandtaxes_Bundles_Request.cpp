/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculatediscountsandtaxes_Bundles_Request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculatediscountsandtaxes_Bundles_Request::OAICalculatediscountsandtaxes_Bundles_Request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculatediscountsandtaxes_Bundles_Request::OAICalculatediscountsandtaxes_Bundles_Request() {
    this->initializeModel();
}

OAICalculatediscountsandtaxes_Bundles_Request::~OAICalculatediscountsandtaxes_Bundles_Request() {}

void OAICalculatediscountsandtaxes_Bundles_Request::initializeModel() {

    m_is_shopping_cart_isSet = false;
    m_is_shopping_cart_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;
}

void OAICalculatediscountsandtaxes_Bundles_Request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculatediscountsandtaxes_Bundles_Request::fromJsonObject(QJsonObject json) {

    m_is_shopping_cart_isValid = ::OpenAPI::fromJsonValue(m_is_shopping_cart, json[QString("isShoppingCart")]);
    m_is_shopping_cart_isSet = !json[QString("isShoppingCart")].isNull() && m_is_shopping_cart_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("profileId")]);
    m_profile_id_isSet = !json[QString("profileId")].isNull() && m_profile_id_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;
}

QString OAICalculatediscountsandtaxes_Bundles_Request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculatediscountsandtaxes_Bundles_Request::asJsonObject() const {
    QJsonObject obj;
    if (m_is_shopping_cart_isSet) {
        obj.insert(QString("isShoppingCart"), ::OpenAPI::toJsonValue(m_is_shopping_cart));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_profile_id_isSet) {
        obj.insert(QString("profileId"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    return obj;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::isIsShoppingCart() const {
    return m_is_shopping_cart;
}
void OAICalculatediscountsandtaxes_Bundles_Request::setIsShoppingCart(const bool &is_shopping_cart) {
    m_is_shopping_cart = is_shopping_cart;
    m_is_shopping_cart_isSet = true;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::is_is_shopping_cart_Set() const{
    return m_is_shopping_cart_isSet;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::is_is_shopping_cart_Valid() const{
    return m_is_shopping_cart_isValid;
}

QList<OAIItem> OAICalculatediscountsandtaxes_Bundles_Request::getItems() const {
    return m_items;
}
void OAICalculatediscountsandtaxes_Bundles_Request::setItems(const QList<OAIItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::is_items_Set() const{
    return m_items_isSet;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::is_items_Valid() const{
    return m_items_isValid;
}

QString OAICalculatediscountsandtaxes_Bundles_Request::getOrigin() const {
    return m_origin;
}
void OAICalculatediscountsandtaxes_Bundles_Request::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::is_origin_Valid() const{
    return m_origin_isValid;
}

QList<OAIParam> OAICalculatediscountsandtaxes_Bundles_Request::getParams() const {
    return m_params;
}
void OAICalculatediscountsandtaxes_Bundles_Request::setParams(const QList<OAIParam> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::is_params_Set() const{
    return m_params_isSet;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::is_params_Valid() const{
    return m_params_isValid;
}

QString OAICalculatediscountsandtaxes_Bundles_Request::getProfileId() const {
    return m_profile_id;
}
void OAICalculatediscountsandtaxes_Bundles_Request::setProfileId(const QString &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

QString OAICalculatediscountsandtaxes_Bundles_Request::getSalesChannel() const {
    return m_sales_channel;
}
void OAICalculatediscountsandtaxes_Bundles_Request::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_shopping_cart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculatediscountsandtaxes_Bundles_Request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_shopping_cart_isValid && m_items_isValid && m_origin_isValid && m_params_isValid && m_profile_id_isValid && m_sales_channel_isValid && true;
}

} // namespace OpenAPI
