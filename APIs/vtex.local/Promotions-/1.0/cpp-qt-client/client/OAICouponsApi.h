/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICouponsApi_H
#define OAI_OAICouponsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetall_200_response_inner.h"
#include "OAIGetarchivedbycouponcode_200_response.h"
#include "OAIGetusage_200_response.h"
#include "OAIMassiveGeneration_request.h"
#include "OAIUpdate_request.h"
#include "OAI_api_rnb_pvt_coupon__post_request.h"
#include "OAI_api_rnb_pvt_multiple_coupons_post_request_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICouponsApi : public QObject {
    Q_OBJECT

public:
    OAICouponsApi(const int timeOut = 0);
    ~OAICouponsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_api_rnb_pvt_coupon__post_request OAI_api_rnb_pvt_coupon__post_request [optional]
    */
    virtual void apiRnbPvtCouponPost(const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<OAI_api_rnb_pvt_coupon__post_request> &oai_api_rnb_pvt_coupon__post_request = ::OpenAPI::OptionalParam<OAI_api_rnb_pvt_coupon__post_request>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_api_rnb_pvt_multiple_coupons_post_request_inner QList<OAI_api_rnb_pvt_multiple_coupons_post_request_inner> [optional]
    */
    virtual void apiRnbPvtMultipleCouponsPost(const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<QList<OAI_api_rnb_pvt_multiple_coupons_post_request_inner>> &oai_api_rnb_pvt_multiple_coupons_post_request_inner = ::OpenAPI::OptionalParam<QList<OAI_api_rnb_pvt_multiple_coupons_post_request_inner>>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  coupon_code QString [required]
    */
    virtual void archivebycouponcode(const QString &content_type, const QString &accept, const QString &coupon_code);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getall(const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  coupon_code QString [required]
    */
    virtual void getarchivedbycouponcode(const QString &content_type, const QString &accept, const QString &coupon_code);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  coupon_code QString [required]
    */
    virtual void getbycouponcode(const QString &content_type, const QString &accept, const QString &coupon_code);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  coupon_code QString [required]
    */
    virtual void getusage(const QString &content_type, const QString &accept, const QString &coupon_code);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  quantity qint32 [required]
    * @param[in]  oai_massive_generation_request OAIMassiveGeneration_request [required]
    */
    virtual void massiveGeneration(const QString &content_type, const QString &accept, const qint32 &quantity, const OAIMassiveGeneration_request &oai_massive_generation_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  coupon_code QString [required]
    */
    virtual void unarchivebycouponcode(const QString &content_type, const QString &accept, const QString &coupon_code);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_update_request OAIUpdate_request [required]
    */
    virtual void update(const QString &content_type, const QString &accept, const OAIUpdate_request &oai_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiRnbPvtCouponPostCallback(OAIHttpRequestWorker *worker);
    void apiRnbPvtMultipleCouponsPostCallback(OAIHttpRequestWorker *worker);
    void archivebycouponcodeCallback(OAIHttpRequestWorker *worker);
    void getallCallback(OAIHttpRequestWorker *worker);
    void getarchivedbycouponcodeCallback(OAIHttpRequestWorker *worker);
    void getbycouponcodeCallback(OAIHttpRequestWorker *worker);
    void getusageCallback(OAIHttpRequestWorker *worker);
    void massiveGenerationCallback(OAIHttpRequestWorker *worker);
    void unarchivebycouponcodeCallback(OAIHttpRequestWorker *worker);
    void updateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiRnbPvtCouponPostSignal(OAIGetarchivedbycouponcode_200_response summary);
    void apiRnbPvtMultipleCouponsPostSignal(QList<QString> summary);
    void archivebycouponcodeSignal(QString summary);
    void getallSignal(QList<OAIGetall_200_response_inner> summary);
    void getarchivedbycouponcodeSignal(OAIGetarchivedbycouponcode_200_response summary);
    void getbycouponcodeSignal(OAIGetarchivedbycouponcode_200_response summary);
    void getusageSignal(OAIGetusage_200_response summary);
    void massiveGenerationSignal(QList<QString> summary);
    void unarchivebycouponcodeSignal(QString summary);
    void updateSignal(OAIGetarchivedbycouponcode_200_response summary);


    void apiRnbPvtCouponPostSignalFull(OAIHttpRequestWorker *worker, OAIGetarchivedbycouponcode_200_response summary);
    void apiRnbPvtMultipleCouponsPostSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void archivebycouponcodeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getallSignalFull(OAIHttpRequestWorker *worker, QList<OAIGetall_200_response_inner> summary);
    void getarchivedbycouponcodeSignalFull(OAIHttpRequestWorker *worker, OAIGetarchivedbycouponcode_200_response summary);
    void getbycouponcodeSignalFull(OAIHttpRequestWorker *worker, OAIGetarchivedbycouponcode_200_response summary);
    void getusageSignalFull(OAIHttpRequestWorker *worker, OAIGetusage_200_response summary);
    void massiveGenerationSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void unarchivebycouponcodeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void updateSignalFull(OAIHttpRequestWorker *worker, OAIGetarchivedbycouponcode_200_response summary);

    Q_DECL_DEPRECATED_X("Use apiRnbPvtCouponPostSignalError() instead")
    void apiRnbPvtCouponPostSignalE(OAIGetarchivedbycouponcode_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnbPvtCouponPostSignalError(OAIGetarchivedbycouponcode_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnbPvtMultipleCouponsPostSignalError() instead")
    void apiRnbPvtMultipleCouponsPostSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnbPvtMultipleCouponsPostSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archivebycouponcodeSignalError() instead")
    void archivebycouponcodeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void archivebycouponcodeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getallSignalError() instead")
    void getallSignalE(QList<OAIGetall_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getallSignalError(QList<OAIGetall_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getarchivedbycouponcodeSignalError() instead")
    void getarchivedbycouponcodeSignalE(OAIGetarchivedbycouponcode_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getarchivedbycouponcodeSignalError(OAIGetarchivedbycouponcode_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getbycouponcodeSignalError() instead")
    void getbycouponcodeSignalE(OAIGetarchivedbycouponcode_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getbycouponcodeSignalError(OAIGetarchivedbycouponcode_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getusageSignalError() instead")
    void getusageSignalE(OAIGetusage_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getusageSignalError(OAIGetusage_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use massiveGenerationSignalError() instead")
    void massiveGenerationSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void massiveGenerationSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unarchivebycouponcodeSignalError() instead")
    void unarchivebycouponcodeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unarchivebycouponcodeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSignalError() instead")
    void updateSignalE(OAIGetarchivedbycouponcode_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSignalError(OAIGetarchivedbycouponcode_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiRnbPvtCouponPostSignalErrorFull() instead")
    void apiRnbPvtCouponPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnbPvtCouponPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiRnbPvtMultipleCouponsPostSignalErrorFull() instead")
    void apiRnbPvtMultipleCouponsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiRnbPvtMultipleCouponsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archivebycouponcodeSignalErrorFull() instead")
    void archivebycouponcodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void archivebycouponcodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getallSignalErrorFull() instead")
    void getallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getarchivedbycouponcodeSignalErrorFull() instead")
    void getarchivedbycouponcodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getarchivedbycouponcodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getbycouponcodeSignalErrorFull() instead")
    void getbycouponcodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getbycouponcodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getusageSignalErrorFull() instead")
    void getusageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getusageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use massiveGenerationSignalErrorFull() instead")
    void massiveGenerationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void massiveGenerationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unarchivebycouponcodeSignalErrorFull() instead")
    void unarchivebycouponcodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unarchivebycouponcodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSignalErrorFull() instead")
    void updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
