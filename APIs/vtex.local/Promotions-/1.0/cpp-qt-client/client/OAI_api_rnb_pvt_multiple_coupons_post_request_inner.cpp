/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_api_rnb_pvt_multiple_coupons_post_request_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_api_rnb_pvt_multiple_coupons_post_request_inner::OAI_api_rnb_pvt_multiple_coupons_post_request_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_api_rnb_pvt_multiple_coupons_post_request_inner::OAI_api_rnb_pvt_multiple_coupons_post_request_inner() {
    this->initializeModel();
}

OAI_api_rnb_pvt_multiple_coupons_post_request_inner::~OAI_api_rnb_pvt_multiple_coupons_post_request_inner() {}

void OAI_api_rnb_pvt_multiple_coupons_post_request_inner::initializeModel() {

    m_coupon_configuration_isSet = false;
    m_coupon_configuration_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;
}

void OAI_api_rnb_pvt_multiple_coupons_post_request_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_api_rnb_pvt_multiple_coupons_post_request_inner::fromJsonObject(QJsonObject json) {

    m_coupon_configuration_isValid = ::OpenAPI::fromJsonValue(m_coupon_configuration, json[QString("couponConfiguration")]);
    m_coupon_configuration_isSet = !json[QString("couponConfiguration")].isNull() && m_coupon_configuration_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;
}

QString OAI_api_rnb_pvt_multiple_coupons_post_request_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_api_rnb_pvt_multiple_coupons_post_request_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_coupon_configuration.isSet()) {
        obj.insert(QString("couponConfiguration"), ::OpenAPI::toJsonValue(m_coupon_configuration));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    return obj;
}

OAICouponConfiguration OAI_api_rnb_pvt_multiple_coupons_post_request_inner::getCouponConfiguration() const {
    return m_coupon_configuration;
}
void OAI_api_rnb_pvt_multiple_coupons_post_request_inner::setCouponConfiguration(const OAICouponConfiguration &coupon_configuration) {
    m_coupon_configuration = coupon_configuration;
    m_coupon_configuration_isSet = true;
}

bool OAI_api_rnb_pvt_multiple_coupons_post_request_inner::is_coupon_configuration_Set() const{
    return m_coupon_configuration_isSet;
}

bool OAI_api_rnb_pvt_multiple_coupons_post_request_inner::is_coupon_configuration_Valid() const{
    return m_coupon_configuration_isValid;
}

qint32 OAI_api_rnb_pvt_multiple_coupons_post_request_inner::getQuantity() const {
    return m_quantity;
}
void OAI_api_rnb_pvt_multiple_coupons_post_request_inner::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAI_api_rnb_pvt_multiple_coupons_post_request_inner::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAI_api_rnb_pvt_multiple_coupons_post_request_inner::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAI_api_rnb_pvt_multiple_coupons_post_request_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coupon_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_api_rnb_pvt_multiple_coupons_post_request_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_coupon_configuration_isValid && m_quantity_isValid && true;
}

} // namespace OpenAPI
