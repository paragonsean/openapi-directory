/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAllBenefits_200_response_limitConfigurationMaxPrice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::OAIGetAllBenefits_200_response_limitConfigurationMaxPrice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::OAIGetAllBenefits_200_response_limitConfigurationMaxPrice() {
    this->initializeModel();
}

OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::~OAIGetAllBenefits_200_response_limitConfigurationMaxPrice() {}

void OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::initializeModel() {

    m_actives_count_isSet = false;
    m_actives_count_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;
}

void OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::fromJsonObject(QJsonObject json) {

    m_actives_count_isValid = ::OpenAPI::fromJsonValue(m_actives_count, json[QString("activesCount")]);
    m_actives_count_isSet = !json[QString("activesCount")].isNull() && m_actives_count_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;
}

QString OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::asJsonObject() const {
    QJsonObject obj;
    if (m_actives_count_isSet) {
        obj.insert(QString("activesCount"), ::OpenAPI::toJsonValue(m_actives_count));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    return obj;
}

qint32 OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::getActivesCount() const {
    return m_actives_count;
}
void OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::setActivesCount(const qint32 &actives_count) {
    m_actives_count = actives_count;
    m_actives_count_isSet = true;
}

bool OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::is_actives_count_Set() const{
    return m_actives_count_isSet;
}

bool OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::is_actives_count_Valid() const{
    return m_actives_count_isValid;
}

qint32 OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::getLimit() const {
    return m_limit;
}
void OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::is_limit_Valid() const{
    return m_limit_isValid;
}

bool OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actives_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAllBenefits_200_response_limitConfigurationMaxPrice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
