/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner() {
    this->initializeModel();
}

OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::~OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner() {}

void OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::initializeModel() {

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_usage_date_utc_isSet = false;
    m_usage_date_utc_isValid = false;
}

void OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::fromJsonObject(QJsonObject json) {

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_usage_date_utc_isValid = ::OpenAPI::fromJsonValue(m_usage_date_utc, json[QString("usageDateUtc")]);
    m_usage_date_utc_isSet = !json[QString("usageDateUtc")].isNull() && m_usage_date_utc_isValid;
}

QString OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_usage_date_utc_isSet) {
        obj.insert(QString("usageDateUtc"), ::OpenAPI::toJsonValue(m_usage_date_utc));
    }
    return obj;
}

QString OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::getOrderId() const {
    return m_order_id;
}
void OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::getUsageDateUtc() const {
    return m_usage_date_utc;
}
void OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::setUsageDateUtc(const QString &usage_date_utc) {
    m_usage_date_utc = usage_date_utc;
    m_usage_date_utc_isSet = true;
}

bool OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::is_usage_date_utc_Set() const{
    return m_usage_date_utc_isSet;
}

bool OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::is_usage_date_utc_Valid() const{
    return m_usage_date_utc_isValid;
}

bool OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetusage_200_response_profileUsages_profileId_orderUsage_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
