/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTaxes_inner_scope.h
 *
 * Scope of the tax.
 */

#ifndef OAIGetTaxes_inner_scope_H
#define OAIGetTaxes_inner_scope_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetTaxes_inner_scope : public OAIObject {
public:
    OAIGetTaxes_inner_scope();
    OAIGetTaxes_inner_scope(QString json);
    ~OAIGetTaxes_inner_scope() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllCatalog() const;
    void setAllCatalog(const bool &all_catalog);
    bool is_all_catalog_Set() const;
    bool is_all_catalog_Valid() const;

    double getBrands() const;
    void setBrands(const double &brands);
    bool is_brands_Set() const;
    bool is_brands_Valid() const;

    bool isBrandsAreInclusive() const;
    void setBrandsAreInclusive(const bool &brands_are_inclusive);
    bool is_brands_are_inclusive_Set() const;
    bool is_brands_are_inclusive_Valid() const;

    double getCategories() const;
    void setCategories(const double &categories);
    bool is_categories_Set() const;
    bool is_categories_Valid() const;

    bool isCategoriesAreInclusive() const;
    void setCategoriesAreInclusive(const bool &categories_are_inclusive);
    bool is_categories_are_inclusive_Set() const;
    bool is_categories_are_inclusive_Valid() const;

    double getCollections() const;
    void setCollections(const double &collections);
    bool is_collections_Set() const;
    bool is_collections_Valid() const;

    bool isCollectionsAreInclusive() const;
    void setCollectionsAreInclusive(const bool &collections_are_inclusive);
    bool is_collections_are_inclusive_Set() const;
    bool is_collections_are_inclusive_Valid() const;

    double getProducts() const;
    void setProducts(const double &products);
    bool is_products_Set() const;
    bool is_products_Valid() const;

    bool isProductsAreInclusive() const;
    void setProductsAreInclusive(const bool &products_are_inclusive);
    bool is_products_are_inclusive_Set() const;
    bool is_products_are_inclusive_Valid() const;

    double getSellers() const;
    void setSellers(const double &sellers);
    bool is_sellers_Set() const;
    bool is_sellers_Valid() const;

    bool isSellersAreInclusive() const;
    void setSellersAreInclusive(const bool &sellers_are_inclusive);
    bool is_sellers_are_inclusive_Set() const;
    bool is_sellers_are_inclusive_Valid() const;

    double getSkus() const;
    void setSkus(const double &skus);
    bool is_skus_Set() const;
    bool is_skus_Valid() const;

    bool isSkusAreInclusive() const;
    void setSkusAreInclusive(const bool &skus_are_inclusive);
    bool is_skus_are_inclusive_Set() const;
    bool is_skus_are_inclusive_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_all_catalog;
    bool m_all_catalog_isSet;
    bool m_all_catalog_isValid;

    double m_brands;
    bool m_brands_isSet;
    bool m_brands_isValid;

    bool m_brands_are_inclusive;
    bool m_brands_are_inclusive_isSet;
    bool m_brands_are_inclusive_isValid;

    double m_categories;
    bool m_categories_isSet;
    bool m_categories_isValid;

    bool m_categories_are_inclusive;
    bool m_categories_are_inclusive_isSet;
    bool m_categories_are_inclusive_isValid;

    double m_collections;
    bool m_collections_isSet;
    bool m_collections_isValid;

    bool m_collections_are_inclusive;
    bool m_collections_are_inclusive_isSet;
    bool m_collections_are_inclusive_isValid;

    double m_products;
    bool m_products_isSet;
    bool m_products_isValid;

    bool m_products_are_inclusive;
    bool m_products_are_inclusive_isSet;
    bool m_products_are_inclusive_isValid;

    double m_sellers;
    bool m_sellers_isSet;
    bool m_sellers_isValid;

    bool m_sellers_are_inclusive;
    bool m_sellers_are_inclusive_isSet;
    bool m_sellers_are_inclusive_isValid;

    double m_skus;
    bool m_skus_isSet;
    bool m_skus_isValid;

    bool m_skus_are_inclusive;
    bool m_skus_are_inclusive_isSet;
    bool m_skus_are_inclusive_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTaxes_inner_scope)

#endif // OAIGetTaxes_inner_scope_H
