/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetusage_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetusage_200_response::OAIGetusage_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetusage_200_response::OAIGetusage_200_response() {
    this->initializeModel();
}

OAIGetusage_200_response::~OAIGetusage_200_response() {}

void OAIGetusage_200_response::initializeModel() {

    m_coupon_code_isSet = false;
    m_coupon_code_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_profile_usages_isSet = false;
    m_profile_usages_isValid = false;
}

void OAIGetusage_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetusage_200_response::fromJsonObject(QJsonObject json) {

    m_coupon_code_isValid = ::OpenAPI::fromJsonValue(m_coupon_code, json[QString("couponCode")]);
    m_coupon_code_isSet = !json[QString("couponCode")].isNull() && m_coupon_code_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_profile_usages_isValid = ::OpenAPI::fromJsonValue(m_profile_usages, json[QString("profileUsages")]);
    m_profile_usages_isSet = !json[QString("profileUsages")].isNull() && m_profile_usages_isValid;
}

QString OAIGetusage_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetusage_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_coupon_code_isSet) {
        obj.insert(QString("couponCode"), ::OpenAPI::toJsonValue(m_coupon_code));
    }
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_profile_usages.isSet()) {
        obj.insert(QString("profileUsages"), ::OpenAPI::toJsonValue(m_profile_usages));
    }
    return obj;
}

QString OAIGetusage_200_response::getCouponCode() const {
    return m_coupon_code;
}
void OAIGetusage_200_response::setCouponCode(const QString &coupon_code) {
    m_coupon_code = coupon_code;
    m_coupon_code_isSet = true;
}

bool OAIGetusage_200_response::is_coupon_code_Set() const{
    return m_coupon_code_isSet;
}

bool OAIGetusage_200_response::is_coupon_code_Valid() const{
    return m_coupon_code_isValid;
}

QString OAIGetusage_200_response::getHostName() const {
    return m_host_name;
}
void OAIGetusage_200_response::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIGetusage_200_response::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIGetusage_200_response::is_host_name_Valid() const{
    return m_host_name_isValid;
}

OAIGetusage_200_response_profileUsages OAIGetusage_200_response::getProfileUsages() const {
    return m_profile_usages;
}
void OAIGetusage_200_response::setProfileUsages(const OAIGetusage_200_response_profileUsages &profile_usages) {
    m_profile_usages = profile_usages;
    m_profile_usages_isSet = true;
}

bool OAIGetusage_200_response::is_profile_usages_Set() const{
    return m_profile_usages_isSet;
}

bool OAIGetusage_200_response::is_profile_usages_Valid() const{
    return m_profile_usages_isValid;
}

bool OAIGetusage_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coupon_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_usages.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetusage_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
