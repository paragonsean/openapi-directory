/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetcampaignconfiguration_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetcampaignconfiguration_200_response::OAIGetcampaignconfiguration_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetcampaignconfiguration_200_response::OAIGetcampaignconfiguration_200_response() {
    this->initializeModel();
}

OAIGetcampaignconfiguration_200_response::~OAIGetcampaignconfiguration_200_response() {}

void OAIGetcampaignconfiguration_200_response::initializeModel() {

    m_begin_date_utc_isSet = false;
    m_begin_date_utc_isValid = false;

    m_end_date_utc_isSet = false;
    m_end_date_utc_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_and_operator_isSet = false;
    m_is_and_operator_isValid = false;

    m_is_archived_isSet = false;
    m_is_archived_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_target_configurations_isSet = false;
    m_target_configurations_isValid = false;
}

void OAIGetcampaignconfiguration_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetcampaignconfiguration_200_response::fromJsonObject(QJsonObject json) {

    m_begin_date_utc_isValid = ::OpenAPI::fromJsonValue(m_begin_date_utc, json[QString("beginDateUtc")]);
    m_begin_date_utc_isSet = !json[QString("beginDateUtc")].isNull() && m_begin_date_utc_isValid;

    m_end_date_utc_isValid = ::OpenAPI::fromJsonValue(m_end_date_utc, json[QString("endDateUtc")]);
    m_end_date_utc_isSet = !json[QString("endDateUtc")].isNull() && m_end_date_utc_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_and_operator_isValid = ::OpenAPI::fromJsonValue(m_is_and_operator, json[QString("isAndOperator")]);
    m_is_and_operator_isSet = !json[QString("isAndOperator")].isNull() && m_is_and_operator_isValid;

    m_is_archived_isValid = ::OpenAPI::fromJsonValue(m_is_archived, json[QString("isArchived")]);
    m_is_archived_isSet = !json[QString("isArchived")].isNull() && m_is_archived_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_target_configurations_isValid = ::OpenAPI::fromJsonValue(m_target_configurations, json[QString("targetConfigurations")]);
    m_target_configurations_isSet = !json[QString("targetConfigurations")].isNull() && m_target_configurations_isValid;
}

QString OAIGetcampaignconfiguration_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetcampaignconfiguration_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_begin_date_utc_isSet) {
        obj.insert(QString("beginDateUtc"), ::OpenAPI::toJsonValue(m_begin_date_utc));
    }
    if (m_end_date_utc_isSet) {
        obj.insert(QString("endDateUtc"), ::OpenAPI::toJsonValue(m_end_date_utc));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_and_operator_isSet) {
        obj.insert(QString("isAndOperator"), ::OpenAPI::toJsonValue(m_is_and_operator));
    }
    if (m_is_archived_isSet) {
        obj.insert(QString("isArchived"), ::OpenAPI::toJsonValue(m_is_archived));
    }
    if (m_last_modified.isSet()) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_target_configurations.size() > 0) {
        obj.insert(QString("targetConfigurations"), ::OpenAPI::toJsonValue(m_target_configurations));
    }
    return obj;
}

QString OAIGetcampaignconfiguration_200_response::getBeginDateUtc() const {
    return m_begin_date_utc;
}
void OAIGetcampaignconfiguration_200_response::setBeginDateUtc(const QString &begin_date_utc) {
    m_begin_date_utc = begin_date_utc;
    m_begin_date_utc_isSet = true;
}

bool OAIGetcampaignconfiguration_200_response::is_begin_date_utc_Set() const{
    return m_begin_date_utc_isSet;
}

bool OAIGetcampaignconfiguration_200_response::is_begin_date_utc_Valid() const{
    return m_begin_date_utc_isValid;
}

QString OAIGetcampaignconfiguration_200_response::getEndDateUtc() const {
    return m_end_date_utc;
}
void OAIGetcampaignconfiguration_200_response::setEndDateUtc(const QString &end_date_utc) {
    m_end_date_utc = end_date_utc;
    m_end_date_utc_isSet = true;
}

bool OAIGetcampaignconfiguration_200_response::is_end_date_utc_Set() const{
    return m_end_date_utc_isSet;
}

bool OAIGetcampaignconfiguration_200_response::is_end_date_utc_Valid() const{
    return m_end_date_utc_isValid;
}

QString OAIGetcampaignconfiguration_200_response::getId() const {
    return m_id;
}
void OAIGetcampaignconfiguration_200_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetcampaignconfiguration_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetcampaignconfiguration_200_response::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIGetcampaignconfiguration_200_response::isIsActive() const {
    return m_is_active;
}
void OAIGetcampaignconfiguration_200_response::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIGetcampaignconfiguration_200_response::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIGetcampaignconfiguration_200_response::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIGetcampaignconfiguration_200_response::isIsAndOperator() const {
    return m_is_and_operator;
}
void OAIGetcampaignconfiguration_200_response::setIsAndOperator(const bool &is_and_operator) {
    m_is_and_operator = is_and_operator;
    m_is_and_operator_isSet = true;
}

bool OAIGetcampaignconfiguration_200_response::is_is_and_operator_Set() const{
    return m_is_and_operator_isSet;
}

bool OAIGetcampaignconfiguration_200_response::is_is_and_operator_Valid() const{
    return m_is_and_operator_isValid;
}

bool OAIGetcampaignconfiguration_200_response::isIsArchived() const {
    return m_is_archived;
}
void OAIGetcampaignconfiguration_200_response::setIsArchived(const bool &is_archived) {
    m_is_archived = is_archived;
    m_is_archived_isSet = true;
}

bool OAIGetcampaignconfiguration_200_response::is_is_archived_Set() const{
    return m_is_archived_isSet;
}

bool OAIGetcampaignconfiguration_200_response::is_is_archived_Valid() const{
    return m_is_archived_isValid;
}

OAIGetcampaignaudiences_200_response_inner_lastModified OAIGetcampaignconfiguration_200_response::getLastModified() const {
    return m_last_modified;
}
void OAIGetcampaignconfiguration_200_response::setLastModified(const OAIGetcampaignaudiences_200_response_inner_lastModified &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIGetcampaignconfiguration_200_response::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIGetcampaignconfiguration_200_response::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIGetcampaignconfiguration_200_response::getName() const {
    return m_name;
}
void OAIGetcampaignconfiguration_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetcampaignconfiguration_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetcampaignconfiguration_200_response::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGetcampaignconfiguration_200_response_targetConfigurations_inner> OAIGetcampaignconfiguration_200_response::getTargetConfigurations() const {
    return m_target_configurations;
}
void OAIGetcampaignconfiguration_200_response::setTargetConfigurations(const QList<OAIGetcampaignconfiguration_200_response_targetConfigurations_inner> &target_configurations) {
    m_target_configurations = target_configurations;
    m_target_configurations_isSet = true;
}

bool OAIGetcampaignconfiguration_200_response::is_target_configurations_Set() const{
    return m_target_configurations_isSet;
}

bool OAIGetcampaignconfiguration_200_response::is_target_configurations_Valid() const{
    return m_target_configurations_isValid;
}

bool OAIGetcampaignconfiguration_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_begin_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_and_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetcampaignconfiguration_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
