/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsagenotificationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsagenotificationRequest::OAIUsagenotificationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsagenotificationRequest::OAIUsagenotificationRequest() {
    this->initializeModel();
}

OAIUsagenotificationRequest::~OAIUsagenotificationRequest() {}

void OAIUsagenotificationRequest::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_calculator_ids_isSet = false;
    m_calculator_ids_isValid = false;

    m_coupon_isSet = false;
    m_coupon_isValid = false;

    m_items_count_isSet = false;
    m_items_count_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;

    m_used_isSet = false;
    m_used_isValid = false;
}

void OAIUsagenotificationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsagenotificationRequest::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_calculator_ids_isValid = ::OpenAPI::fromJsonValue(m_calculator_ids, json[QString("calculatorIds")]);
    m_calculator_ids_isSet = !json[QString("calculatorIds")].isNull() && m_calculator_ids_isValid;

    m_coupon_isValid = ::OpenAPI::fromJsonValue(m_coupon, json[QString("coupon")]);
    m_coupon_isSet = !json[QString("coupon")].isNull() && m_coupon_isValid;

    m_items_count_isValid = ::OpenAPI::fromJsonValue(m_items_count, json[QString("itemsCount")]);
    m_items_count_isSet = !json[QString("itemsCount")].isNull() && m_items_count_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("profileId")]);
    m_profile_id_isSet = !json[QString("profileId")].isNull() && m_profile_id_isValid;

    m_used_isValid = ::OpenAPI::fromJsonValue(m_used, json[QString("used")]);
    m_used_isSet = !json[QString("used")].isNull() && m_used_isValid;
}

QString OAIUsagenotificationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsagenotificationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_calculator_ids.size() > 0) {
        obj.insert(QString("calculatorIds"), ::OpenAPI::toJsonValue(m_calculator_ids));
    }
    if (m_coupon_isSet) {
        obj.insert(QString("coupon"), ::OpenAPI::toJsonValue(m_coupon));
    }
    if (m_items_count_isSet) {
        obj.insert(QString("itemsCount"), ::OpenAPI::toJsonValue(m_items_count));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_profile_id_isSet) {
        obj.insert(QString("profileId"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    if (m_used_isSet) {
        obj.insert(QString("used"), ::OpenAPI::toJsonValue(m_used));
    }
    return obj;
}

QString OAIUsagenotificationRequest::getAccountId() const {
    return m_account_id;
}
void OAIUsagenotificationRequest::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIUsagenotificationRequest::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIUsagenotificationRequest::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QList<QString> OAIUsagenotificationRequest::getCalculatorIds() const {
    return m_calculator_ids;
}
void OAIUsagenotificationRequest::setCalculatorIds(const QList<QString> &calculator_ids) {
    m_calculator_ids = calculator_ids;
    m_calculator_ids_isSet = true;
}

bool OAIUsagenotificationRequest::is_calculator_ids_Set() const{
    return m_calculator_ids_isSet;
}

bool OAIUsagenotificationRequest::is_calculator_ids_Valid() const{
    return m_calculator_ids_isValid;
}

QString OAIUsagenotificationRequest::getCoupon() const {
    return m_coupon;
}
void OAIUsagenotificationRequest::setCoupon(const QString &coupon) {
    m_coupon = coupon;
    m_coupon_isSet = true;
}

bool OAIUsagenotificationRequest::is_coupon_Set() const{
    return m_coupon_isSet;
}

bool OAIUsagenotificationRequest::is_coupon_Valid() const{
    return m_coupon_isValid;
}

qint32 OAIUsagenotificationRequest::getItemsCount() const {
    return m_items_count;
}
void OAIUsagenotificationRequest::setItemsCount(const qint32 &items_count) {
    m_items_count = items_count;
    m_items_count_isSet = true;
}

bool OAIUsagenotificationRequest::is_items_count_Set() const{
    return m_items_count_isSet;
}

bool OAIUsagenotificationRequest::is_items_count_Valid() const{
    return m_items_count_isValid;
}

QString OAIUsagenotificationRequest::getOrderId() const {
    return m_order_id;
}
void OAIUsagenotificationRequest::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIUsagenotificationRequest::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIUsagenotificationRequest::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIUsagenotificationRequest::getProfileId() const {
    return m_profile_id;
}
void OAIUsagenotificationRequest::setProfileId(const QString &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAIUsagenotificationRequest::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAIUsagenotificationRequest::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

bool OAIUsagenotificationRequest::isUsed() const {
    return m_used;
}
void OAIUsagenotificationRequest::setUsed(const bool &used) {
    m_used = used;
    m_used_isSet = true;
}

bool OAIUsagenotificationRequest::is_used_Set() const{
    return m_used_isSet;
}

bool OAIUsagenotificationRequest::is_used_Valid() const{
    return m_used_isValid;
}

bool OAIUsagenotificationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculator_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_coupon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsagenotificationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_calculator_ids_isValid && m_coupon_isValid && m_items_count_isValid && m_order_id_isValid && m_profile_id_isValid && m_used_isValid && true;
}

} // namespace OpenAPI
