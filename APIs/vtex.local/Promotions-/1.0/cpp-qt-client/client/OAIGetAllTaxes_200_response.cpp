/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAllTaxes_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAllTaxes_200_response::OAIGetAllTaxes_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAllTaxes_200_response::OAIGetAllTaxes_200_response() {
    this->initializeModel();
}

OAIGetAllTaxes_200_response::~OAIGetAllTaxes_200_response() {}

void OAIGetAllTaxes_200_response::initializeModel() {

    m_archived_items_isSet = false;
    m_archived_items_isValid = false;

    m_disabled_items_isSet = false;
    m_disabled_items_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_limit_configuration_isSet = false;
    m_limit_configuration_isValid = false;
}

void OAIGetAllTaxes_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAllTaxes_200_response::fromJsonObject(QJsonObject json) {

    m_archived_items_isValid = ::OpenAPI::fromJsonValue(m_archived_items, json[QString("archivedItems")]);
    m_archived_items_isSet = !json[QString("archivedItems")].isNull() && m_archived_items_isValid;

    m_disabled_items_isValid = ::OpenAPI::fromJsonValue(m_disabled_items, json[QString("disabledItems")]);
    m_disabled_items_isSet = !json[QString("disabledItems")].isNull() && m_disabled_items_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_limit_configuration_isValid = ::OpenAPI::fromJsonValue(m_limit_configuration, json[QString("limitConfiguration")]);
    m_limit_configuration_isSet = !json[QString("limitConfiguration")].isNull() && m_limit_configuration_isValid;
}

QString OAIGetAllTaxes_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAllTaxes_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_items.size() > 0) {
        obj.insert(QString("archivedItems"), ::OpenAPI::toJsonValue(m_archived_items));
    }
    if (m_disabled_items.size() > 0) {
        obj.insert(QString("disabledItems"), ::OpenAPI::toJsonValue(m_disabled_items));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_limit_configuration.isSet()) {
        obj.insert(QString("limitConfiguration"), ::OpenAPI::toJsonValue(m_limit_configuration));
    }
    return obj;
}

QList<QString> OAIGetAllTaxes_200_response::getArchivedItems() const {
    return m_archived_items;
}
void OAIGetAllTaxes_200_response::setArchivedItems(const QList<QString> &archived_items) {
    m_archived_items = archived_items;
    m_archived_items_isSet = true;
}

bool OAIGetAllTaxes_200_response::is_archived_items_Set() const{
    return m_archived_items_isSet;
}

bool OAIGetAllTaxes_200_response::is_archived_items_Valid() const{
    return m_archived_items_isValid;
}

QList<QString> OAIGetAllTaxes_200_response::getDisabledItems() const {
    return m_disabled_items;
}
void OAIGetAllTaxes_200_response::setDisabledItems(const QList<QString> &disabled_items) {
    m_disabled_items = disabled_items;
    m_disabled_items_isSet = true;
}

bool OAIGetAllTaxes_200_response::is_disabled_items_Set() const{
    return m_disabled_items_isSet;
}

bool OAIGetAllTaxes_200_response::is_disabled_items_Valid() const{
    return m_disabled_items_isValid;
}

QList<OAIGetTaxes_inner> OAIGetAllTaxes_200_response::getItems() const {
    return m_items;
}
void OAIGetAllTaxes_200_response::setItems(const QList<OAIGetTaxes_inner> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIGetAllTaxes_200_response::is_items_Set() const{
    return m_items_isSet;
}

bool OAIGetAllTaxes_200_response::is_items_Valid() const{
    return m_items_isValid;
}

OAIGetAllBenefits_200_response_limitConfiguration OAIGetAllTaxes_200_response::getLimitConfiguration() const {
    return m_limit_configuration;
}
void OAIGetAllTaxes_200_response::setLimitConfiguration(const OAIGetAllBenefits_200_response_limitConfiguration &limit_configuration) {
    m_limit_configuration = limit_configuration;
    m_limit_configuration_isSet = true;
}

bool OAIGetAllTaxes_200_response::is_limit_configuration_Set() const{
    return m_limit_configuration_isSet;
}

bool OAIGetAllTaxes_200_response::is_limit_configuration_Valid() const{
    return m_limit_configuration_isValid;
}

bool OAIGetAllTaxes_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAllTaxes_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
