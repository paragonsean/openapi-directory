/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPromotions_inner_scope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPromotions_inner_scope::OAIGetPromotions_inner_scope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPromotions_inner_scope::OAIGetPromotions_inner_scope() {
    this->initializeModel();
}

OAIGetPromotions_inner_scope::~OAIGetPromotions_inner_scope() {}

void OAIGetPromotions_inner_scope::initializeModel() {

    m_all_catalog_isSet = false;
    m_all_catalog_isValid = false;

    m_brands_isSet = false;
    m_brands_isValid = false;

    m_brands_are_inclusive_isSet = false;
    m_brands_are_inclusive_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_categories_are_inclusive_isSet = false;
    m_categories_are_inclusive_isValid = false;

    m_collections_isSet = false;
    m_collections_isValid = false;

    m_collections_are_inclusive_isSet = false;
    m_collections_are_inclusive_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_products_are_inclusive_isSet = false;
    m_products_are_inclusive_isValid = false;

    m_sellers_isSet = false;
    m_sellers_isValid = false;

    m_sellers_are_inclusive_isSet = false;
    m_sellers_are_inclusive_isValid = false;

    m_skus_isSet = false;
    m_skus_isValid = false;

    m_skus_are_inclusive_isSet = false;
    m_skus_are_inclusive_isValid = false;
}

void OAIGetPromotions_inner_scope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPromotions_inner_scope::fromJsonObject(QJsonObject json) {

    m_all_catalog_isValid = ::OpenAPI::fromJsonValue(m_all_catalog, json[QString("allCatalog")]);
    m_all_catalog_isSet = !json[QString("allCatalog")].isNull() && m_all_catalog_isValid;

    m_brands_isValid = ::OpenAPI::fromJsonValue(m_brands, json[QString("brands")]);
    m_brands_isSet = !json[QString("brands")].isNull() && m_brands_isValid;

    m_brands_are_inclusive_isValid = ::OpenAPI::fromJsonValue(m_brands_are_inclusive, json[QString("brandsAreInclusive")]);
    m_brands_are_inclusive_isSet = !json[QString("brandsAreInclusive")].isNull() && m_brands_are_inclusive_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_categories_are_inclusive_isValid = ::OpenAPI::fromJsonValue(m_categories_are_inclusive, json[QString("categoriesAreInclusive")]);
    m_categories_are_inclusive_isSet = !json[QString("categoriesAreInclusive")].isNull() && m_categories_are_inclusive_isValid;

    m_collections_isValid = ::OpenAPI::fromJsonValue(m_collections, json[QString("collections")]);
    m_collections_isSet = !json[QString("collections")].isNull() && m_collections_isValid;

    m_collections_are_inclusive_isValid = ::OpenAPI::fromJsonValue(m_collections_are_inclusive, json[QString("collectionsAreInclusive")]);
    m_collections_are_inclusive_isSet = !json[QString("collectionsAreInclusive")].isNull() && m_collections_are_inclusive_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_products_are_inclusive_isValid = ::OpenAPI::fromJsonValue(m_products_are_inclusive, json[QString("productsAreInclusive")]);
    m_products_are_inclusive_isSet = !json[QString("productsAreInclusive")].isNull() && m_products_are_inclusive_isValid;

    m_sellers_isValid = ::OpenAPI::fromJsonValue(m_sellers, json[QString("sellers")]);
    m_sellers_isSet = !json[QString("sellers")].isNull() && m_sellers_isValid;

    m_sellers_are_inclusive_isValid = ::OpenAPI::fromJsonValue(m_sellers_are_inclusive, json[QString("sellersAreInclusive")]);
    m_sellers_are_inclusive_isSet = !json[QString("sellersAreInclusive")].isNull() && m_sellers_are_inclusive_isValid;

    m_skus_isValid = ::OpenAPI::fromJsonValue(m_skus, json[QString("skus")]);
    m_skus_isSet = !json[QString("skus")].isNull() && m_skus_isValid;

    m_skus_are_inclusive_isValid = ::OpenAPI::fromJsonValue(m_skus_are_inclusive, json[QString("skusAreInclusive")]);
    m_skus_are_inclusive_isSet = !json[QString("skusAreInclusive")].isNull() && m_skus_are_inclusive_isValid;
}

QString OAIGetPromotions_inner_scope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPromotions_inner_scope::asJsonObject() const {
    QJsonObject obj;
    if (m_all_catalog_isSet) {
        obj.insert(QString("allCatalog"), ::OpenAPI::toJsonValue(m_all_catalog));
    }
    if (m_brands_isSet) {
        obj.insert(QString("brands"), ::OpenAPI::toJsonValue(m_brands));
    }
    if (m_brands_are_inclusive_isSet) {
        obj.insert(QString("brandsAreInclusive"), ::OpenAPI::toJsonValue(m_brands_are_inclusive));
    }
    if (m_categories_isSet) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_categories_are_inclusive_isSet) {
        obj.insert(QString("categoriesAreInclusive"), ::OpenAPI::toJsonValue(m_categories_are_inclusive));
    }
    if (m_collections_isSet) {
        obj.insert(QString("collections"), ::OpenAPI::toJsonValue(m_collections));
    }
    if (m_collections_are_inclusive_isSet) {
        obj.insert(QString("collectionsAreInclusive"), ::OpenAPI::toJsonValue(m_collections_are_inclusive));
    }
    if (m_products_isSet) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_products_are_inclusive_isSet) {
        obj.insert(QString("productsAreInclusive"), ::OpenAPI::toJsonValue(m_products_are_inclusive));
    }
    if (m_sellers_isSet) {
        obj.insert(QString("sellers"), ::OpenAPI::toJsonValue(m_sellers));
    }
    if (m_sellers_are_inclusive_isSet) {
        obj.insert(QString("sellersAreInclusive"), ::OpenAPI::toJsonValue(m_sellers_are_inclusive));
    }
    if (m_skus_isSet) {
        obj.insert(QString("skus"), ::OpenAPI::toJsonValue(m_skus));
    }
    if (m_skus_are_inclusive_isSet) {
        obj.insert(QString("skusAreInclusive"), ::OpenAPI::toJsonValue(m_skus_are_inclusive));
    }
    return obj;
}

bool OAIGetPromotions_inner_scope::isAllCatalog() const {
    return m_all_catalog;
}
void OAIGetPromotions_inner_scope::setAllCatalog(const bool &all_catalog) {
    m_all_catalog = all_catalog;
    m_all_catalog_isSet = true;
}

bool OAIGetPromotions_inner_scope::is_all_catalog_Set() const{
    return m_all_catalog_isSet;
}

bool OAIGetPromotions_inner_scope::is_all_catalog_Valid() const{
    return m_all_catalog_isValid;
}

double OAIGetPromotions_inner_scope::getBrands() const {
    return m_brands;
}
void OAIGetPromotions_inner_scope::setBrands(const double &brands) {
    m_brands = brands;
    m_brands_isSet = true;
}

bool OAIGetPromotions_inner_scope::is_brands_Set() const{
    return m_brands_isSet;
}

bool OAIGetPromotions_inner_scope::is_brands_Valid() const{
    return m_brands_isValid;
}

bool OAIGetPromotions_inner_scope::isBrandsAreInclusive() const {
    return m_brands_are_inclusive;
}
void OAIGetPromotions_inner_scope::setBrandsAreInclusive(const bool &brands_are_inclusive) {
    m_brands_are_inclusive = brands_are_inclusive;
    m_brands_are_inclusive_isSet = true;
}

bool OAIGetPromotions_inner_scope::is_brands_are_inclusive_Set() const{
    return m_brands_are_inclusive_isSet;
}

bool OAIGetPromotions_inner_scope::is_brands_are_inclusive_Valid() const{
    return m_brands_are_inclusive_isValid;
}

double OAIGetPromotions_inner_scope::getCategories() const {
    return m_categories;
}
void OAIGetPromotions_inner_scope::setCategories(const double &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIGetPromotions_inner_scope::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIGetPromotions_inner_scope::is_categories_Valid() const{
    return m_categories_isValid;
}

bool OAIGetPromotions_inner_scope::isCategoriesAreInclusive() const {
    return m_categories_are_inclusive;
}
void OAIGetPromotions_inner_scope::setCategoriesAreInclusive(const bool &categories_are_inclusive) {
    m_categories_are_inclusive = categories_are_inclusive;
    m_categories_are_inclusive_isSet = true;
}

bool OAIGetPromotions_inner_scope::is_categories_are_inclusive_Set() const{
    return m_categories_are_inclusive_isSet;
}

bool OAIGetPromotions_inner_scope::is_categories_are_inclusive_Valid() const{
    return m_categories_are_inclusive_isValid;
}

double OAIGetPromotions_inner_scope::getCollections() const {
    return m_collections;
}
void OAIGetPromotions_inner_scope::setCollections(const double &collections) {
    m_collections = collections;
    m_collections_isSet = true;
}

bool OAIGetPromotions_inner_scope::is_collections_Set() const{
    return m_collections_isSet;
}

bool OAIGetPromotions_inner_scope::is_collections_Valid() const{
    return m_collections_isValid;
}

bool OAIGetPromotions_inner_scope::isCollectionsAreInclusive() const {
    return m_collections_are_inclusive;
}
void OAIGetPromotions_inner_scope::setCollectionsAreInclusive(const bool &collections_are_inclusive) {
    m_collections_are_inclusive = collections_are_inclusive;
    m_collections_are_inclusive_isSet = true;
}

bool OAIGetPromotions_inner_scope::is_collections_are_inclusive_Set() const{
    return m_collections_are_inclusive_isSet;
}

bool OAIGetPromotions_inner_scope::is_collections_are_inclusive_Valid() const{
    return m_collections_are_inclusive_isValid;
}

double OAIGetPromotions_inner_scope::getProducts() const {
    return m_products;
}
void OAIGetPromotions_inner_scope::setProducts(const double &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIGetPromotions_inner_scope::is_products_Set() const{
    return m_products_isSet;
}

bool OAIGetPromotions_inner_scope::is_products_Valid() const{
    return m_products_isValid;
}

bool OAIGetPromotions_inner_scope::isProductsAreInclusive() const {
    return m_products_are_inclusive;
}
void OAIGetPromotions_inner_scope::setProductsAreInclusive(const bool &products_are_inclusive) {
    m_products_are_inclusive = products_are_inclusive;
    m_products_are_inclusive_isSet = true;
}

bool OAIGetPromotions_inner_scope::is_products_are_inclusive_Set() const{
    return m_products_are_inclusive_isSet;
}

bool OAIGetPromotions_inner_scope::is_products_are_inclusive_Valid() const{
    return m_products_are_inclusive_isValid;
}

double OAIGetPromotions_inner_scope::getSellers() const {
    return m_sellers;
}
void OAIGetPromotions_inner_scope::setSellers(const double &sellers) {
    m_sellers = sellers;
    m_sellers_isSet = true;
}

bool OAIGetPromotions_inner_scope::is_sellers_Set() const{
    return m_sellers_isSet;
}

bool OAIGetPromotions_inner_scope::is_sellers_Valid() const{
    return m_sellers_isValid;
}

bool OAIGetPromotions_inner_scope::isSellersAreInclusive() const {
    return m_sellers_are_inclusive;
}
void OAIGetPromotions_inner_scope::setSellersAreInclusive(const bool &sellers_are_inclusive) {
    m_sellers_are_inclusive = sellers_are_inclusive;
    m_sellers_are_inclusive_isSet = true;
}

bool OAIGetPromotions_inner_scope::is_sellers_are_inclusive_Set() const{
    return m_sellers_are_inclusive_isSet;
}

bool OAIGetPromotions_inner_scope::is_sellers_are_inclusive_Valid() const{
    return m_sellers_are_inclusive_isValid;
}

double OAIGetPromotions_inner_scope::getSkus() const {
    return m_skus;
}
void OAIGetPromotions_inner_scope::setSkus(const double &skus) {
    m_skus = skus;
    m_skus_isSet = true;
}

bool OAIGetPromotions_inner_scope::is_skus_Set() const{
    return m_skus_isSet;
}

bool OAIGetPromotions_inner_scope::is_skus_Valid() const{
    return m_skus_isValid;
}

bool OAIGetPromotions_inner_scope::isSkusAreInclusive() const {
    return m_skus_are_inclusive;
}
void OAIGetPromotions_inner_scope::setSkusAreInclusive(const bool &skus_are_inclusive) {
    m_skus_are_inclusive = skus_are_inclusive;
    m_skus_are_inclusive_isSet = true;
}

bool OAIGetPromotions_inner_scope::is_skus_are_inclusive_Set() const{
    return m_skus_are_inclusive_isSet;
}

bool OAIGetPromotions_inner_scope::is_skus_are_inclusive_Valid() const{
    return m_skus_are_inclusive_isValid;
}

bool OAIGetPromotions_inner_scope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_catalog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brands_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brands_are_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_are_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collections_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collections_are_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products_are_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sellers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sellers_are_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skus_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skus_are_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPromotions_inner_scope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
