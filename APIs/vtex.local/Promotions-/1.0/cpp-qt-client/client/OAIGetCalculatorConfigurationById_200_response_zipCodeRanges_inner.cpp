/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner() {
    this->initializeModel();
}

OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::~OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner() {}

void OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::initializeModel() {

    m_inclusive_isSet = false;
    m_inclusive_isValid = false;

    m_zip_code_from_isSet = false;
    m_zip_code_from_isValid = false;

    m_zip_code_to_isSet = false;
    m_zip_code_to_isValid = false;
}

void OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::fromJsonObject(QJsonObject json) {

    m_inclusive_isValid = ::OpenAPI::fromJsonValue(m_inclusive, json[QString("inclusive")]);
    m_inclusive_isSet = !json[QString("inclusive")].isNull() && m_inclusive_isValid;

    m_zip_code_from_isValid = ::OpenAPI::fromJsonValue(m_zip_code_from, json[QString("zipCodeFrom")]);
    m_zip_code_from_isSet = !json[QString("zipCodeFrom")].isNull() && m_zip_code_from_isValid;

    m_zip_code_to_isValid = ::OpenAPI::fromJsonValue(m_zip_code_to, json[QString("zipCodeTo")]);
    m_zip_code_to_isSet = !json[QString("zipCodeTo")].isNull() && m_zip_code_to_isValid;
}

QString OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_inclusive_isSet) {
        obj.insert(QString("inclusive"), ::OpenAPI::toJsonValue(m_inclusive));
    }
    if (m_zip_code_from_isSet) {
        obj.insert(QString("zipCodeFrom"), ::OpenAPI::toJsonValue(m_zip_code_from));
    }
    if (m_zip_code_to_isSet) {
        obj.insert(QString("zipCodeTo"), ::OpenAPI::toJsonValue(m_zip_code_to));
    }
    return obj;
}

bool OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::isInclusive() const {
    return m_inclusive;
}
void OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::setInclusive(const bool &inclusive) {
    m_inclusive = inclusive;
    m_inclusive_isSet = true;
}

bool OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::is_inclusive_Set() const{
    return m_inclusive_isSet;
}

bool OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::is_inclusive_Valid() const{
    return m_inclusive_isValid;
}

QString OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::getZipCodeFrom() const {
    return m_zip_code_from;
}
void OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::setZipCodeFrom(const QString &zip_code_from) {
    m_zip_code_from = zip_code_from;
    m_zip_code_from_isSet = true;
}

bool OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::is_zip_code_from_Set() const{
    return m_zip_code_from_isSet;
}

bool OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::is_zip_code_from_Valid() const{
    return m_zip_code_from_isValid;
}

QString OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::getZipCodeTo() const {
    return m_zip_code_to;
}
void OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::setZipCodeTo(const QString &zip_code_to) {
    m_zip_code_to = zip_code_to;
    m_zip_code_to_isSet = true;
}

bool OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::is_zip_code_to_Set() const{
    return m_zip_code_to_isSet;
}

bool OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::is_zip_code_to_Valid() const{
    return m_zip_code_to_isValid;
}

bool OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCalculatorConfigurationById_200_response_zipCodeRanges_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
