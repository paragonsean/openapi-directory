/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPromotions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPromotions_inner::OAIGetPromotions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPromotions_inner::OAIGetPromotions_inner() {
    this->initializeModel();
}

OAIGetPromotions_inner::~OAIGetPromotions_inner() {}

void OAIGetPromotions_inner::initializeModel() {

    m_campaigns_isSet = false;
    m_campaigns_isValid = false;

    m_activate_gifts_multiplier_isSet = false;
    m_activate_gifts_multiplier_isValid = false;

    m_are_sales_channel_ids_exclusive_isSet = false;
    m_are_sales_channel_ids_exclusive_isValid = false;

    m_begin_date_isSet = false;
    m_begin_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_has_max_price_per_item_isSet = false;
    m_has_max_price_per_item_isValid = false;

    m_id_calculator_configuration_isSet = false;
    m_id_calculator_configuration_isValid = false;

    m_ids_sales_channel_isSet = false;
    m_ids_sales_channel_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_archived_isSet = false;
    m_is_archived_isValid = false;

    m_is_tax_isSet = false;
    m_is_tax_isValid = false;

    m_last_modified_utc_isSet = false;
    m_last_modified_utc_isValid = false;

    m_max_usage_isSet = false;
    m_max_usage_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_percentual_tax_isSet = false;
    m_percentual_tax_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_utm_campain_isSet = false;
    m_utm_campain_isValid = false;

    m_utm_source_isSet = false;
    m_utm_source_isValid = false;

    m_utmi_campaign_isSet = false;
    m_utmi_campaign_isValid = false;
}

void OAIGetPromotions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPromotions_inner::fromJsonObject(QJsonObject json) {

    m_campaigns_isValid = ::OpenAPI::fromJsonValue(m_campaigns, json[QString("Campaigns")]);
    m_campaigns_isSet = !json[QString("Campaigns")].isNull() && m_campaigns_isValid;

    m_activate_gifts_multiplier_isValid = ::OpenAPI::fromJsonValue(m_activate_gifts_multiplier, json[QString("activateGiftsMultiplier")]);
    m_activate_gifts_multiplier_isSet = !json[QString("activateGiftsMultiplier")].isNull() && m_activate_gifts_multiplier_isValid;

    m_are_sales_channel_ids_exclusive_isValid = ::OpenAPI::fromJsonValue(m_are_sales_channel_ids_exclusive, json[QString("areSalesChannelIdsExclusive")]);
    m_are_sales_channel_ids_exclusive_isSet = !json[QString("areSalesChannelIdsExclusive")].isNull() && m_are_sales_channel_ids_exclusive_isValid;

    m_begin_date_isValid = ::OpenAPI::fromJsonValue(m_begin_date, json[QString("beginDate")]);
    m_begin_date_isSet = !json[QString("beginDate")].isNull() && m_begin_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_has_max_price_per_item_isValid = ::OpenAPI::fromJsonValue(m_has_max_price_per_item, json[QString("hasMaxPricePerItem")]);
    m_has_max_price_per_item_isSet = !json[QString("hasMaxPricePerItem")].isNull() && m_has_max_price_per_item_isValid;

    m_id_calculator_configuration_isValid = ::OpenAPI::fromJsonValue(m_id_calculator_configuration, json[QString("idCalculatorConfiguration")]);
    m_id_calculator_configuration_isSet = !json[QString("idCalculatorConfiguration")].isNull() && m_id_calculator_configuration_isValid;

    m_ids_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_ids_sales_channel, json[QString("idsSalesChannel")]);
    m_ids_sales_channel_isSet = !json[QString("idsSalesChannel")].isNull() && m_ids_sales_channel_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_archived_isValid = ::OpenAPI::fromJsonValue(m_is_archived, json[QString("isArchived")]);
    m_is_archived_isSet = !json[QString("isArchived")].isNull() && m_is_archived_isValid;

    m_is_tax_isValid = ::OpenAPI::fromJsonValue(m_is_tax, json[QString("isTax")]);
    m_is_tax_isSet = !json[QString("isTax")].isNull() && m_is_tax_isValid;

    m_last_modified_utc_isValid = ::OpenAPI::fromJsonValue(m_last_modified_utc, json[QString("lastModifiedUtc")]);
    m_last_modified_utc_isSet = !json[QString("lastModifiedUtc")].isNull() && m_last_modified_utc_isValid;

    m_max_usage_isValid = ::OpenAPI::fromJsonValue(m_max_usage, json[QString("maxUsage")]);
    m_max_usage_isSet = !json[QString("maxUsage")].isNull() && m_max_usage_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_percentual_tax_isValid = ::OpenAPI::fromJsonValue(m_percentual_tax, json[QString("percentualTax")]);
    m_percentual_tax_isSet = !json[QString("percentualTax")].isNull() && m_percentual_tax_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_utm_campain_isValid = ::OpenAPI::fromJsonValue(m_utm_campain, json[QString("utmCampain")]);
    m_utm_campain_isSet = !json[QString("utmCampain")].isNull() && m_utm_campain_isValid;

    m_utm_source_isValid = ::OpenAPI::fromJsonValue(m_utm_source, json[QString("utmSource")]);
    m_utm_source_isSet = !json[QString("utmSource")].isNull() && m_utm_source_isValid;

    m_utmi_campaign_isValid = ::OpenAPI::fromJsonValue(m_utmi_campaign, json[QString("utmiCampaign")]);
    m_utmi_campaign_isSet = !json[QString("utmiCampaign")].isNull() && m_utmi_campaign_isValid;
}

QString OAIGetPromotions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPromotions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_campaigns.size() > 0) {
        obj.insert(QString("Campaigns"), ::OpenAPI::toJsonValue(m_campaigns));
    }
    if (m_activate_gifts_multiplier_isSet) {
        obj.insert(QString("activateGiftsMultiplier"), ::OpenAPI::toJsonValue(m_activate_gifts_multiplier));
    }
    if (m_are_sales_channel_ids_exclusive_isSet) {
        obj.insert(QString("areSalesChannelIdsExclusive"), ::OpenAPI::toJsonValue(m_are_sales_channel_ids_exclusive));
    }
    if (m_begin_date_isSet) {
        obj.insert(QString("beginDate"), ::OpenAPI::toJsonValue(m_begin_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_has_max_price_per_item_isSet) {
        obj.insert(QString("hasMaxPricePerItem"), ::OpenAPI::toJsonValue(m_has_max_price_per_item));
    }
    if (m_id_calculator_configuration_isSet) {
        obj.insert(QString("idCalculatorConfiguration"), ::OpenAPI::toJsonValue(m_id_calculator_configuration));
    }
    if (m_ids_sales_channel.size() > 0) {
        obj.insert(QString("idsSalesChannel"), ::OpenAPI::toJsonValue(m_ids_sales_channel));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_archived_isSet) {
        obj.insert(QString("isArchived"), ::OpenAPI::toJsonValue(m_is_archived));
    }
    if (m_is_tax_isSet) {
        obj.insert(QString("isTax"), ::OpenAPI::toJsonValue(m_is_tax));
    }
    if (m_last_modified_utc_isSet) {
        obj.insert(QString("lastModifiedUtc"), ::OpenAPI::toJsonValue(m_last_modified_utc));
    }
    if (m_max_usage_isSet) {
        obj.insert(QString("maxUsage"), ::OpenAPI::toJsonValue(m_max_usage));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_percentual_tax_isSet) {
        obj.insert(QString("percentualTax"), ::OpenAPI::toJsonValue(m_percentual_tax));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_utm_campain_isSet) {
        obj.insert(QString("utmCampain"), ::OpenAPI::toJsonValue(m_utm_campain));
    }
    if (m_utm_source_isSet) {
        obj.insert(QString("utmSource"), ::OpenAPI::toJsonValue(m_utm_source));
    }
    if (m_utmi_campaign_isSet) {
        obj.insert(QString("utmiCampaign"), ::OpenAPI::toJsonValue(m_utmi_campaign));
    }
    return obj;
}

QList<QString> OAIGetPromotions_inner::getCampaigns() const {
    return m_campaigns;
}
void OAIGetPromotions_inner::setCampaigns(const QList<QString> &campaigns) {
    m_campaigns = campaigns;
    m_campaigns_isSet = true;
}

bool OAIGetPromotions_inner::is_campaigns_Set() const{
    return m_campaigns_isSet;
}

bool OAIGetPromotions_inner::is_campaigns_Valid() const{
    return m_campaigns_isValid;
}

bool OAIGetPromotions_inner::isActivateGiftsMultiplier() const {
    return m_activate_gifts_multiplier;
}
void OAIGetPromotions_inner::setActivateGiftsMultiplier(const bool &activate_gifts_multiplier) {
    m_activate_gifts_multiplier = activate_gifts_multiplier;
    m_activate_gifts_multiplier_isSet = true;
}

bool OAIGetPromotions_inner::is_activate_gifts_multiplier_Set() const{
    return m_activate_gifts_multiplier_isSet;
}

bool OAIGetPromotions_inner::is_activate_gifts_multiplier_Valid() const{
    return m_activate_gifts_multiplier_isValid;
}

bool OAIGetPromotions_inner::isAreSalesChannelIdsExclusive() const {
    return m_are_sales_channel_ids_exclusive;
}
void OAIGetPromotions_inner::setAreSalesChannelIdsExclusive(const bool &are_sales_channel_ids_exclusive) {
    m_are_sales_channel_ids_exclusive = are_sales_channel_ids_exclusive;
    m_are_sales_channel_ids_exclusive_isSet = true;
}

bool OAIGetPromotions_inner::is_are_sales_channel_ids_exclusive_Set() const{
    return m_are_sales_channel_ids_exclusive_isSet;
}

bool OAIGetPromotions_inner::is_are_sales_channel_ids_exclusive_Valid() const{
    return m_are_sales_channel_ids_exclusive_isValid;
}

QString OAIGetPromotions_inner::getBeginDate() const {
    return m_begin_date;
}
void OAIGetPromotions_inner::setBeginDate(const QString &begin_date) {
    m_begin_date = begin_date;
    m_begin_date_isSet = true;
}

bool OAIGetPromotions_inner::is_begin_date_Set() const{
    return m_begin_date_isSet;
}

bool OAIGetPromotions_inner::is_begin_date_Valid() const{
    return m_begin_date_isValid;
}

QString OAIGetPromotions_inner::getDescription() const {
    return m_description;
}
void OAIGetPromotions_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetPromotions_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetPromotions_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGetPromotions_inner::getEndDate() const {
    return m_end_date;
}
void OAIGetPromotions_inner::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIGetPromotions_inner::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIGetPromotions_inner::is_end_date_Valid() const{
    return m_end_date_isValid;
}

bool OAIGetPromotions_inner::isHasMaxPricePerItem() const {
    return m_has_max_price_per_item;
}
void OAIGetPromotions_inner::setHasMaxPricePerItem(const bool &has_max_price_per_item) {
    m_has_max_price_per_item = has_max_price_per_item;
    m_has_max_price_per_item_isSet = true;
}

bool OAIGetPromotions_inner::is_has_max_price_per_item_Set() const{
    return m_has_max_price_per_item_isSet;
}

bool OAIGetPromotions_inner::is_has_max_price_per_item_Valid() const{
    return m_has_max_price_per_item_isValid;
}

QString OAIGetPromotions_inner::getIdCalculatorConfiguration() const {
    return m_id_calculator_configuration;
}
void OAIGetPromotions_inner::setIdCalculatorConfiguration(const QString &id_calculator_configuration) {
    m_id_calculator_configuration = id_calculator_configuration;
    m_id_calculator_configuration_isSet = true;
}

bool OAIGetPromotions_inner::is_id_calculator_configuration_Set() const{
    return m_id_calculator_configuration_isSet;
}

bool OAIGetPromotions_inner::is_id_calculator_configuration_Valid() const{
    return m_id_calculator_configuration_isValid;
}

QList<QString> OAIGetPromotions_inner::getIdsSalesChannel() const {
    return m_ids_sales_channel;
}
void OAIGetPromotions_inner::setIdsSalesChannel(const QList<QString> &ids_sales_channel) {
    m_ids_sales_channel = ids_sales_channel;
    m_ids_sales_channel_isSet = true;
}

bool OAIGetPromotions_inner::is_ids_sales_channel_Set() const{
    return m_ids_sales_channel_isSet;
}

bool OAIGetPromotions_inner::is_ids_sales_channel_Valid() const{
    return m_ids_sales_channel_isValid;
}

bool OAIGetPromotions_inner::isIsActive() const {
    return m_is_active;
}
void OAIGetPromotions_inner::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIGetPromotions_inner::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIGetPromotions_inner::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIGetPromotions_inner::isIsArchived() const {
    return m_is_archived;
}
void OAIGetPromotions_inner::setIsArchived(const bool &is_archived) {
    m_is_archived = is_archived;
    m_is_archived_isSet = true;
}

bool OAIGetPromotions_inner::is_is_archived_Set() const{
    return m_is_archived_isSet;
}

bool OAIGetPromotions_inner::is_is_archived_Valid() const{
    return m_is_archived_isValid;
}

bool OAIGetPromotions_inner::isIsTax() const {
    return m_is_tax;
}
void OAIGetPromotions_inner::setIsTax(const bool &is_tax) {
    m_is_tax = is_tax;
    m_is_tax_isSet = true;
}

bool OAIGetPromotions_inner::is_is_tax_Set() const{
    return m_is_tax_isSet;
}

bool OAIGetPromotions_inner::is_is_tax_Valid() const{
    return m_is_tax_isValid;
}

QString OAIGetPromotions_inner::getLastModifiedUtc() const {
    return m_last_modified_utc;
}
void OAIGetPromotions_inner::setLastModifiedUtc(const QString &last_modified_utc) {
    m_last_modified_utc = last_modified_utc;
    m_last_modified_utc_isSet = true;
}

bool OAIGetPromotions_inner::is_last_modified_utc_Set() const{
    return m_last_modified_utc_isSet;
}

bool OAIGetPromotions_inner::is_last_modified_utc_Valid() const{
    return m_last_modified_utc_isValid;
}

double OAIGetPromotions_inner::getMaxUsage() const {
    return m_max_usage;
}
void OAIGetPromotions_inner::setMaxUsage(const double &max_usage) {
    m_max_usage = max_usage;
    m_max_usage_isSet = true;
}

bool OAIGetPromotions_inner::is_max_usage_Set() const{
    return m_max_usage_isSet;
}

bool OAIGetPromotions_inner::is_max_usage_Valid() const{
    return m_max_usage_isValid;
}

QString OAIGetPromotions_inner::getName() const {
    return m_name;
}
void OAIGetPromotions_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetPromotions_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetPromotions_inner::is_name_Valid() const{
    return m_name_isValid;
}

double OAIGetPromotions_inner::getPercentualTax() const {
    return m_percentual_tax;
}
void OAIGetPromotions_inner::setPercentualTax(const double &percentual_tax) {
    m_percentual_tax = percentual_tax;
    m_percentual_tax_isSet = true;
}

bool OAIGetPromotions_inner::is_percentual_tax_Set() const{
    return m_percentual_tax_isSet;
}

bool OAIGetPromotions_inner::is_percentual_tax_Valid() const{
    return m_percentual_tax_isValid;
}

OAIGetPromotions_inner_scope OAIGetPromotions_inner::getScope() const {
    return m_scope;
}
void OAIGetPromotions_inner::setScope(const OAIGetPromotions_inner_scope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIGetPromotions_inner::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIGetPromotions_inner::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIGetPromotions_inner::getStatus() const {
    return m_status;
}
void OAIGetPromotions_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetPromotions_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetPromotions_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetPromotions_inner::getType() const {
    return m_type;
}
void OAIGetPromotions_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetPromotions_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetPromotions_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGetPromotions_inner::getUtmCampain() const {
    return m_utm_campain;
}
void OAIGetPromotions_inner::setUtmCampain(const QString &utm_campain) {
    m_utm_campain = utm_campain;
    m_utm_campain_isSet = true;
}

bool OAIGetPromotions_inner::is_utm_campain_Set() const{
    return m_utm_campain_isSet;
}

bool OAIGetPromotions_inner::is_utm_campain_Valid() const{
    return m_utm_campain_isValid;
}

QString OAIGetPromotions_inner::getUtmSource() const {
    return m_utm_source;
}
void OAIGetPromotions_inner::setUtmSource(const QString &utm_source) {
    m_utm_source = utm_source;
    m_utm_source_isSet = true;
}

bool OAIGetPromotions_inner::is_utm_source_Set() const{
    return m_utm_source_isSet;
}

bool OAIGetPromotions_inner::is_utm_source_Valid() const{
    return m_utm_source_isValid;
}

QString OAIGetPromotions_inner::getUtmiCampaign() const {
    return m_utmi_campaign;
}
void OAIGetPromotions_inner::setUtmiCampaign(const QString &utmi_campaign) {
    m_utmi_campaign = utmi_campaign;
    m_utmi_campaign_isSet = true;
}

bool OAIGetPromotions_inner::is_utmi_campaign_Set() const{
    return m_utmi_campaign_isSet;
}

bool OAIGetPromotions_inner::is_utmi_campaign_Valid() const{
    return m_utmi_campaign_isValid;
}

bool OAIGetPromotions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaigns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_activate_gifts_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_are_sales_channel_ids_exclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_begin_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_max_price_per_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_calculator_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids_sales_channel.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentual_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_campain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utmi_campaign_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPromotions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
