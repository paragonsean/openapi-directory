/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetcampaignaudiences_200_response_inner_lastModified.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetcampaignaudiences_200_response_inner_lastModified::OAIGetcampaignaudiences_200_response_inner_lastModified(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetcampaignaudiences_200_response_inner_lastModified::OAIGetcampaignaudiences_200_response_inner_lastModified() {
    this->initializeModel();
}

OAIGetcampaignaudiences_200_response_inner_lastModified::~OAIGetcampaignaudiences_200_response_inner_lastModified() {}

void OAIGetcampaignaudiences_200_response_inner_lastModified::initializeModel() {

    m_date_utc_isSet = false;
    m_date_utc_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIGetcampaignaudiences_200_response_inner_lastModified::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetcampaignaudiences_200_response_inner_lastModified::fromJsonObject(QJsonObject json) {

    m_date_utc_isValid = ::OpenAPI::fromJsonValue(m_date_utc, json[QString("dateUtc")]);
    m_date_utc_isSet = !json[QString("dateUtc")].isNull() && m_date_utc_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIGetcampaignaudiences_200_response_inner_lastModified::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetcampaignaudiences_200_response_inner_lastModified::asJsonObject() const {
    QJsonObject obj;
    if (m_date_utc_isSet) {
        obj.insert(QString("dateUtc"), ::OpenAPI::toJsonValue(m_date_utc));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIGetcampaignaudiences_200_response_inner_lastModified::getDateUtc() const {
    return m_date_utc;
}
void OAIGetcampaignaudiences_200_response_inner_lastModified::setDateUtc(const QString &date_utc) {
    m_date_utc = date_utc;
    m_date_utc_isSet = true;
}

bool OAIGetcampaignaudiences_200_response_inner_lastModified::is_date_utc_Set() const{
    return m_date_utc_isSet;
}

bool OAIGetcampaignaudiences_200_response_inner_lastModified::is_date_utc_Valid() const{
    return m_date_utc_isValid;
}

QString OAIGetcampaignaudiences_200_response_inner_lastModified::getUser() const {
    return m_user;
}
void OAIGetcampaignaudiences_200_response_inner_lastModified::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIGetcampaignaudiences_200_response_inner_lastModified::is_user_Set() const{
    return m_user_isSet;
}

bool OAIGetcampaignaudiences_200_response_inner_lastModified::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIGetcampaignaudiences_200_response_inner_lastModified::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetcampaignaudiences_200_response_inner_lastModified::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
