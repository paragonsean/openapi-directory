/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_is_gift_isSet = false;
    m_is_gift_isValid = false;

    m_logistics_infos_isSet = false;
    m_logistics_infos_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_price_sheet_isSet = false;
    m_price_sheet_isValid = false;

    m_price_tags_isSet = false;
    m_price_tags_isValid = false;

    m_product_specifications_isSet = false;
    m_product_specifications_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_seller_id_isSet = false;
    m_seller_id_isValid = false;

    m_unit_multiplier_isSet = false;
    m_unit_multiplier_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_is_gift_isValid = ::OpenAPI::fromJsonValue(m_is_gift, json[QString("isGift")]);
    m_is_gift_isSet = !json[QString("isGift")].isNull() && m_is_gift_isValid;

    m_logistics_infos_isValid = ::OpenAPI::fromJsonValue(m_logistics_infos, json[QString("logisticsInfos")]);
    m_logistics_infos_isSet = !json[QString("logisticsInfos")].isNull() && m_logistics_infos_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurementUnit")]);
    m_measurement_unit_isSet = !json[QString("measurementUnit")].isNull() && m_measurement_unit_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_price_sheet_isValid = ::OpenAPI::fromJsonValue(m_price_sheet, json[QString("priceSheet")]);
    m_price_sheet_isSet = !json[QString("priceSheet")].isNull() && m_price_sheet_isValid;

    m_price_tags_isValid = ::OpenAPI::fromJsonValue(m_price_tags, json[QString("priceTags")]);
    m_price_tags_isSet = !json[QString("priceTags")].isNull() && m_price_tags_isValid;

    m_product_specifications_isValid = ::OpenAPI::fromJsonValue(m_product_specifications, json[QString("productSpecifications")]);
    m_product_specifications_isSet = !json[QString("productSpecifications")].isNull() && m_product_specifications_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_seller_id_isValid = ::OpenAPI::fromJsonValue(m_seller_id, json[QString("sellerId")]);
    m_seller_id_isSet = !json[QString("sellerId")].isNull() && m_seller_id_isValid;

    m_unit_multiplier_isValid = ::OpenAPI::fromJsonValue(m_unit_multiplier, json[QString("unitMultiplier")]);
    m_unit_multiplier_isSet = !json[QString("unitMultiplier")].isNull() && m_unit_multiplier_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_is_gift_isSet) {
        obj.insert(QString("isGift"), ::OpenAPI::toJsonValue(m_is_gift));
    }
    if (m_logistics_infos.size() > 0) {
        obj.insert(QString("logisticsInfos"), ::OpenAPI::toJsonValue(m_logistics_infos));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_price_sheet.size() > 0) {
        obj.insert(QString("priceSheet"), ::OpenAPI::toJsonValue(m_price_sheet));
    }
    if (m_price_tags.size() > 0) {
        obj.insert(QString("priceTags"), ::OpenAPI::toJsonValue(m_price_tags));
    }
    if (m_product_specifications.size() > 0) {
        obj.insert(QString("productSpecifications"), ::OpenAPI::toJsonValue(m_product_specifications));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_seller_id_isSet) {
        obj.insert(QString("sellerId"), ::OpenAPI::toJsonValue(m_seller_id));
    }
    if (m_unit_multiplier_isSet) {
        obj.insert(QString("unitMultiplier"), ::OpenAPI::toJsonValue(m_unit_multiplier));
    }
    return obj;
}

QString OAIItem::getId() const {
    return m_id;
}
void OAIItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItem::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIItem::getIndex() const {
    return m_index;
}
void OAIItem::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIItem::is_index_Set() const{
    return m_index_isSet;
}

bool OAIItem::is_index_Valid() const{
    return m_index_isValid;
}

bool OAIItem::isIsGift() const {
    return m_is_gift;
}
void OAIItem::setIsGift(const bool &is_gift) {
    m_is_gift = is_gift;
    m_is_gift_isSet = true;
}

bool OAIItem::is_is_gift_Set() const{
    return m_is_gift_isSet;
}

bool OAIItem::is_is_gift_Valid() const{
    return m_is_gift_isValid;
}

QList<QString> OAIItem::getLogisticsInfos() const {
    return m_logistics_infos;
}
void OAIItem::setLogisticsInfos(const QList<QString> &logistics_infos) {
    m_logistics_infos = logistics_infos;
    m_logistics_infos_isSet = true;
}

bool OAIItem::is_logistics_infos_Set() const{
    return m_logistics_infos_isSet;
}

bool OAIItem::is_logistics_infos_Valid() const{
    return m_logistics_infos_isValid;
}

QString OAIItem::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIItem::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIItem::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIItem::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

QList<OAIParam> OAIItem::getParams() const {
    return m_params;
}
void OAIItem::setParams(const QList<OAIParam> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIItem::is_params_Set() const{
    return m_params_isSet;
}

bool OAIItem::is_params_Valid() const{
    return m_params_isValid;
}

QList<QString> OAIItem::getPriceSheet() const {
    return m_price_sheet;
}
void OAIItem::setPriceSheet(const QList<QString> &price_sheet) {
    m_price_sheet = price_sheet;
    m_price_sheet_isSet = true;
}

bool OAIItem::is_price_sheet_Set() const{
    return m_price_sheet_isSet;
}

bool OAIItem::is_price_sheet_Valid() const{
    return m_price_sheet_isValid;
}

QList<QString> OAIItem::getPriceTags() const {
    return m_price_tags;
}
void OAIItem::setPriceTags(const QList<QString> &price_tags) {
    m_price_tags = price_tags;
    m_price_tags_isSet = true;
}

bool OAIItem::is_price_tags_Set() const{
    return m_price_tags_isSet;
}

bool OAIItem::is_price_tags_Valid() const{
    return m_price_tags_isValid;
}

QList<QString> OAIItem::getProductSpecifications() const {
    return m_product_specifications;
}
void OAIItem::setProductSpecifications(const QList<QString> &product_specifications) {
    m_product_specifications = product_specifications;
    m_product_specifications_isSet = true;
}

bool OAIItem::is_product_specifications_Set() const{
    return m_product_specifications_isSet;
}

bool OAIItem::is_product_specifications_Valid() const{
    return m_product_specifications_isValid;
}

qint32 OAIItem::getQuantity() const {
    return m_quantity;
}
void OAIItem::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIItem::getSellerId() const {
    return m_seller_id;
}
void OAIItem::setSellerId(const QString &seller_id) {
    m_seller_id = seller_id;
    m_seller_id_isSet = true;
}

bool OAIItem::is_seller_id_Set() const{
    return m_seller_id_isSet;
}

bool OAIItem::is_seller_id_Valid() const{
    return m_seller_id_isValid;
}

qint32 OAIItem::getUnitMultiplier() const {
    return m_unit_multiplier;
}
void OAIItem::setUnitMultiplier(const qint32 &unit_multiplier) {
    m_unit_multiplier = unit_multiplier;
    m_unit_multiplier_isSet = true;
}

bool OAIItem::is_unit_multiplier_Set() const{
    return m_unit_multiplier_isSet;
}

bool OAIItem::is_unit_multiplier_Valid() const{
    return m_unit_multiplier_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_gift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logistics_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_sheet.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_specifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_index_isValid && m_is_gift_isValid && m_logistics_infos_isValid && m_measurement_unit_isValid && m_params_isValid && m_price_sheet_isValid && m_price_tags_isValid && m_product_specifications_isValid && m_quantity_isValid && m_seller_id_isValid && m_unit_multiplier_isValid && true;
}

} // namespace OpenAPI
