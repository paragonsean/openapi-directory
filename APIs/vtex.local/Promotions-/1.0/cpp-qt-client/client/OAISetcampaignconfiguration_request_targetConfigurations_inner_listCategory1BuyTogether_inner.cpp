/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner() {
    this->initializeModel();
}

OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::~OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner() {}

void OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::getId() const {
    return m_id;
}
void OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::getName() const {
    return m_name;
}
void OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetcampaignconfiguration_request_targetConfigurations_inner_listCategory1BuyTogether_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
