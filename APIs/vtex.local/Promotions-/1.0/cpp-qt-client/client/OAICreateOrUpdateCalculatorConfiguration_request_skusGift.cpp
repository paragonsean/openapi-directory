/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOrUpdateCalculatorConfiguration_request_skusGift.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOrUpdateCalculatorConfiguration_request_skusGift::OAICreateOrUpdateCalculatorConfiguration_request_skusGift(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOrUpdateCalculatorConfiguration_request_skusGift::OAICreateOrUpdateCalculatorConfiguration_request_skusGift() {
    this->initializeModel();
}

OAICreateOrUpdateCalculatorConfiguration_request_skusGift::~OAICreateOrUpdateCalculatorConfiguration_request_skusGift() {}

void OAICreateOrUpdateCalculatorConfiguration_request_skusGift::initializeModel() {

    m_gifts_isSet = false;
    m_gifts_isValid = false;

    m_quantity_selectable_isSet = false;
    m_quantity_selectable_isValid = false;
}

void OAICreateOrUpdateCalculatorConfiguration_request_skusGift::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOrUpdateCalculatorConfiguration_request_skusGift::fromJsonObject(QJsonObject json) {

    m_gifts_isValid = ::OpenAPI::fromJsonValue(m_gifts, json[QString("gifts")]);
    m_gifts_isSet = !json[QString("gifts")].isNull() && m_gifts_isValid;

    m_quantity_selectable_isValid = ::OpenAPI::fromJsonValue(m_quantity_selectable, json[QString("quantitySelectable")]);
    m_quantity_selectable_isSet = !json[QString("quantitySelectable")].isNull() && m_quantity_selectable_isValid;
}

QString OAICreateOrUpdateCalculatorConfiguration_request_skusGift::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOrUpdateCalculatorConfiguration_request_skusGift::asJsonObject() const {
    QJsonObject obj;
    if (m_gifts.size() > 0) {
        obj.insert(QString("gifts"), ::OpenAPI::toJsonValue(m_gifts));
    }
    if (m_quantity_selectable_isSet) {
        obj.insert(QString("quantitySelectable"), ::OpenAPI::toJsonValue(m_quantity_selectable));
    }
    return obj;
}

QList<QJsonValue> OAICreateOrUpdateCalculatorConfiguration_request_skusGift::getGifts() const {
    return m_gifts;
}
void OAICreateOrUpdateCalculatorConfiguration_request_skusGift::setGifts(const QList<QJsonValue> &gifts) {
    m_gifts = gifts;
    m_gifts_isSet = true;
}

bool OAICreateOrUpdateCalculatorConfiguration_request_skusGift::is_gifts_Set() const{
    return m_gifts_isSet;
}

bool OAICreateOrUpdateCalculatorConfiguration_request_skusGift::is_gifts_Valid() const{
    return m_gifts_isValid;
}

qint32 OAICreateOrUpdateCalculatorConfiguration_request_skusGift::getQuantitySelectable() const {
    return m_quantity_selectable;
}
void OAICreateOrUpdateCalculatorConfiguration_request_skusGift::setQuantitySelectable(const qint32 &quantity_selectable) {
    m_quantity_selectable = quantity_selectable;
    m_quantity_selectable_isSet = true;
}

bool OAICreateOrUpdateCalculatorConfiguration_request_skusGift::is_quantity_selectable_Set() const{
    return m_quantity_selectable_isSet;
}

bool OAICreateOrUpdateCalculatorConfiguration_request_skusGift::is_quantity_selectable_Valid() const{
    return m_quantity_selectable_isValid;
}

bool OAICreateOrUpdateCalculatorConfiguration_request_skusGift::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gifts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_selectable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOrUpdateCalculatorConfiguration_request_skusGift::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
