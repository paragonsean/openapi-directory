/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTaxes_inner.h
 *
 * Object with information about a tax.
 */

#ifndef OAIGetTaxes_inner_H
#define OAIGetTaxes_inner_H

#include <QJsonObject>

#include "OAIGetTaxes_inner_scope.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetTaxes_inner_scope;

class OAIGetTaxes_inner : public OAIObject {
public:
    OAIGetTaxes_inner();
    OAIGetTaxes_inner(QString json);
    ~OAIGetTaxes_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCampaigns() const;
    void setCampaigns(const QList<QString> &campaigns);
    bool is_campaigns_Set() const;
    bool is_campaigns_Valid() const;

    bool isActivateGiftsMultiplier() const;
    void setActivateGiftsMultiplier(const bool &activate_gifts_multiplier);
    bool is_activate_gifts_multiplier_Set() const;
    bool is_activate_gifts_multiplier_Valid() const;

    bool isAreSalesChannelIdsExclusive() const;
    void setAreSalesChannelIdsExclusive(const bool &are_sales_channel_ids_exclusive);
    bool is_are_sales_channel_ids_exclusive_Set() const;
    bool is_are_sales_channel_ids_exclusive_Valid() const;

    QString getBeginDate() const;
    void setBeginDate(const QString &begin_date);
    bool is_begin_date_Set() const;
    bool is_begin_date_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEndDate() const;
    void setEndDate(const QString &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    bool isHasMaxPricePerItem() const;
    void setHasMaxPricePerItem(const bool &has_max_price_per_item);
    bool is_has_max_price_per_item_Set() const;
    bool is_has_max_price_per_item_Valid() const;

    QString getIdCalculatorConfiguration() const;
    void setIdCalculatorConfiguration(const QString &id_calculator_configuration);
    bool is_id_calculator_configuration_Set() const;
    bool is_id_calculator_configuration_Valid() const;

    QList<QString> getIdsSalesChannel() const;
    void setIdsSalesChannel(const QList<QString> &ids_sales_channel);
    bool is_ids_sales_channel_Set() const;
    bool is_ids_sales_channel_Valid() const;

    bool isIsActive() const;
    void setIsActive(const bool &is_active);
    bool is_is_active_Set() const;
    bool is_is_active_Valid() const;

    bool isIsArchived() const;
    void setIsArchived(const bool &is_archived);
    bool is_is_archived_Set() const;
    bool is_is_archived_Valid() const;

    bool isIsTax() const;
    void setIsTax(const bool &is_tax);
    bool is_is_tax_Set() const;
    bool is_is_tax_Valid() const;

    QString getLastModifiedUtc() const;
    void setLastModifiedUtc(const QString &last_modified_utc);
    bool is_last_modified_utc_Set() const;
    bool is_last_modified_utc_Valid() const;

    double getMaxUsage() const;
    void setMaxUsage(const double &max_usage);
    bool is_max_usage_Set() const;
    bool is_max_usage_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    double getPercentualTax() const;
    void setPercentualTax(const double &percentual_tax);
    bool is_percentual_tax_Set() const;
    bool is_percentual_tax_Valid() const;

    OAIGetTaxes_inner_scope getScope() const;
    void setScope(const OAIGetTaxes_inner_scope &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUtmCampain() const;
    void setUtmCampain(const QString &utm_campain);
    bool is_utm_campain_Set() const;
    bool is_utm_campain_Valid() const;

    QString getUtmSource() const;
    void setUtmSource(const QString &utm_source);
    bool is_utm_source_Set() const;
    bool is_utm_source_Valid() const;

    QString getUtmiCampaign() const;
    void setUtmiCampaign(const QString &utmi_campaign);
    bool is_utmi_campaign_Set() const;
    bool is_utmi_campaign_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_campaigns;
    bool m_campaigns_isSet;
    bool m_campaigns_isValid;

    bool m_activate_gifts_multiplier;
    bool m_activate_gifts_multiplier_isSet;
    bool m_activate_gifts_multiplier_isValid;

    bool m_are_sales_channel_ids_exclusive;
    bool m_are_sales_channel_ids_exclusive_isSet;
    bool m_are_sales_channel_ids_exclusive_isValid;

    QString m_begin_date;
    bool m_begin_date_isSet;
    bool m_begin_date_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    bool m_has_max_price_per_item;
    bool m_has_max_price_per_item_isSet;
    bool m_has_max_price_per_item_isValid;

    QString m_id_calculator_configuration;
    bool m_id_calculator_configuration_isSet;
    bool m_id_calculator_configuration_isValid;

    QList<QString> m_ids_sales_channel;
    bool m_ids_sales_channel_isSet;
    bool m_ids_sales_channel_isValid;

    bool m_is_active;
    bool m_is_active_isSet;
    bool m_is_active_isValid;

    bool m_is_archived;
    bool m_is_archived_isSet;
    bool m_is_archived_isValid;

    bool m_is_tax;
    bool m_is_tax_isSet;
    bool m_is_tax_isValid;

    QString m_last_modified_utc;
    bool m_last_modified_utc_isSet;
    bool m_last_modified_utc_isValid;

    double m_max_usage;
    bool m_max_usage_isSet;
    bool m_max_usage_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    double m_percentual_tax;
    bool m_percentual_tax_isSet;
    bool m_percentual_tax_isValid;

    OAIGetTaxes_inner_scope m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_utm_campain;
    bool m_utm_campain_isSet;
    bool m_utm_campain_isValid;

    QString m_utm_source;
    bool m_utm_source_isSet;
    bool m_utm_source_isValid;

    QString m_utmi_campaign;
    bool m_utmi_campaign_isSet;
    bool m_utmi_campaign_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTaxes_inner)

#endif // OAIGetTaxes_inner_H
