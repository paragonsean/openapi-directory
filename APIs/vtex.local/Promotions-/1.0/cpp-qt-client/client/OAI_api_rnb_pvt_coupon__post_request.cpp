/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_api_rnb_pvt_coupon__post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_api_rnb_pvt_coupon__post_request::OAI_api_rnb_pvt_coupon__post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_api_rnb_pvt_coupon__post_request::OAI_api_rnb_pvt_coupon__post_request() {
    this->initializeModel();
}

OAI_api_rnb_pvt_coupon__post_request::~OAI_api_rnb_pvt_coupon__post_request() {}

void OAI_api_rnb_pvt_coupon__post_request::initializeModel() {

    m_coupon_code_isSet = false;
    m_coupon_code_isValid = false;

    m_expiration_interval_per_use_isSet = false;
    m_expiration_interval_per_use_isValid = false;

    m_max_items_per_client_isSet = false;
    m_max_items_per_client_isValid = false;

    m_utm_campaign_isSet = false;
    m_utm_campaign_isValid = false;

    m_utm_source_isSet = false;
    m_utm_source_isValid = false;
}

void OAI_api_rnb_pvt_coupon__post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_api_rnb_pvt_coupon__post_request::fromJsonObject(QJsonObject json) {

    m_coupon_code_isValid = ::OpenAPI::fromJsonValue(m_coupon_code, json[QString("couponCode")]);
    m_coupon_code_isSet = !json[QString("couponCode")].isNull() && m_coupon_code_isValid;

    m_expiration_interval_per_use_isValid = ::OpenAPI::fromJsonValue(m_expiration_interval_per_use, json[QString("expirationIntervalPerUse")]);
    m_expiration_interval_per_use_isSet = !json[QString("expirationIntervalPerUse")].isNull() && m_expiration_interval_per_use_isValid;

    m_max_items_per_client_isValid = ::OpenAPI::fromJsonValue(m_max_items_per_client, json[QString("maxItemsPerClient")]);
    m_max_items_per_client_isSet = !json[QString("maxItemsPerClient")].isNull() && m_max_items_per_client_isValid;

    m_utm_campaign_isValid = ::OpenAPI::fromJsonValue(m_utm_campaign, json[QString("utmCampaign")]);
    m_utm_campaign_isSet = !json[QString("utmCampaign")].isNull() && m_utm_campaign_isValid;

    m_utm_source_isValid = ::OpenAPI::fromJsonValue(m_utm_source, json[QString("utmSource")]);
    m_utm_source_isSet = !json[QString("utmSource")].isNull() && m_utm_source_isValid;
}

QString OAI_api_rnb_pvt_coupon__post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_api_rnb_pvt_coupon__post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_coupon_code_isSet) {
        obj.insert(QString("couponCode"), ::OpenAPI::toJsonValue(m_coupon_code));
    }
    if (m_expiration_interval_per_use_isSet) {
        obj.insert(QString("expirationIntervalPerUse"), ::OpenAPI::toJsonValue(m_expiration_interval_per_use));
    }
    if (m_max_items_per_client_isSet) {
        obj.insert(QString("maxItemsPerClient"), ::OpenAPI::toJsonValue(m_max_items_per_client));
    }
    if (m_utm_campaign_isSet) {
        obj.insert(QString("utmCampaign"), ::OpenAPI::toJsonValue(m_utm_campaign));
    }
    if (m_utm_source_isSet) {
        obj.insert(QString("utmSource"), ::OpenAPI::toJsonValue(m_utm_source));
    }
    return obj;
}

QString OAI_api_rnb_pvt_coupon__post_request::getCouponCode() const {
    return m_coupon_code;
}
void OAI_api_rnb_pvt_coupon__post_request::setCouponCode(const QString &coupon_code) {
    m_coupon_code = coupon_code;
    m_coupon_code_isSet = true;
}

bool OAI_api_rnb_pvt_coupon__post_request::is_coupon_code_Set() const{
    return m_coupon_code_isSet;
}

bool OAI_api_rnb_pvt_coupon__post_request::is_coupon_code_Valid() const{
    return m_coupon_code_isValid;
}

QString OAI_api_rnb_pvt_coupon__post_request::getExpirationIntervalPerUse() const {
    return m_expiration_interval_per_use;
}
void OAI_api_rnb_pvt_coupon__post_request::setExpirationIntervalPerUse(const QString &expiration_interval_per_use) {
    m_expiration_interval_per_use = expiration_interval_per_use;
    m_expiration_interval_per_use_isSet = true;
}

bool OAI_api_rnb_pvt_coupon__post_request::is_expiration_interval_per_use_Set() const{
    return m_expiration_interval_per_use_isSet;
}

bool OAI_api_rnb_pvt_coupon__post_request::is_expiration_interval_per_use_Valid() const{
    return m_expiration_interval_per_use_isValid;
}

qint32 OAI_api_rnb_pvt_coupon__post_request::getMaxItemsPerClient() const {
    return m_max_items_per_client;
}
void OAI_api_rnb_pvt_coupon__post_request::setMaxItemsPerClient(const qint32 &max_items_per_client) {
    m_max_items_per_client = max_items_per_client;
    m_max_items_per_client_isSet = true;
}

bool OAI_api_rnb_pvt_coupon__post_request::is_max_items_per_client_Set() const{
    return m_max_items_per_client_isSet;
}

bool OAI_api_rnb_pvt_coupon__post_request::is_max_items_per_client_Valid() const{
    return m_max_items_per_client_isValid;
}

QString OAI_api_rnb_pvt_coupon__post_request::getUtmCampaign() const {
    return m_utm_campaign;
}
void OAI_api_rnb_pvt_coupon__post_request::setUtmCampaign(const QString &utm_campaign) {
    m_utm_campaign = utm_campaign;
    m_utm_campaign_isSet = true;
}

bool OAI_api_rnb_pvt_coupon__post_request::is_utm_campaign_Set() const{
    return m_utm_campaign_isSet;
}

bool OAI_api_rnb_pvt_coupon__post_request::is_utm_campaign_Valid() const{
    return m_utm_campaign_isValid;
}

QString OAI_api_rnb_pvt_coupon__post_request::getUtmSource() const {
    return m_utm_source;
}
void OAI_api_rnb_pvt_coupon__post_request::setUtmSource(const QString &utm_source) {
    m_utm_source = utm_source;
    m_utm_source_isSet = true;
}

bool OAI_api_rnb_pvt_coupon__post_request::is_utm_source_Set() const{
    return m_utm_source_isSet;
}

bool OAI_api_rnb_pvt_coupon__post_request::is_utm_source_Valid() const{
    return m_utm_source_isValid;
}

bool OAI_api_rnb_pvt_coupon__post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coupon_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_interval_per_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_per_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_campaign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_api_rnb_pvt_coupon__post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_coupon_code_isValid && m_expiration_interval_per_use_isValid && m_max_items_per_client_isValid && m_utm_source_isValid && true;
}

} // namespace OpenAPI
