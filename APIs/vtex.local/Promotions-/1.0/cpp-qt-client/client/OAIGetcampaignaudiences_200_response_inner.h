/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetcampaignaudiences_200_response_inner.h
 *
 * Object containing information about the campaign audience.
 */

#ifndef OAIGetcampaignaudiences_200_response_inner_H
#define OAIGetcampaignaudiences_200_response_inner_H

#include <QJsonObject>

#include "OAIGetcampaignaudiences_200_response_inner_lastModified.h"
#include "OAIGetcampaignaudiences_200_response_inner_targetConfigurations_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetcampaignaudiences_200_response_inner_lastModified;
class OAIGetcampaignaudiences_200_response_inner_targetConfigurations_inner;

class OAIGetcampaignaudiences_200_response_inner : public OAIObject {
public:
    OAIGetcampaignaudiences_200_response_inner();
    OAIGetcampaignaudiences_200_response_inner(QString json);
    ~OAIGetcampaignaudiences_200_response_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBeginDateUtc() const;
    void setBeginDateUtc(const QString &begin_date_utc);
    bool is_begin_date_utc_Set() const;
    bool is_begin_date_utc_Valid() const;

    QString getEndDateUtc() const;
    void setEndDateUtc(const QString &end_date_utc);
    bool is_end_date_utc_Set() const;
    bool is_end_date_utc_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsActive() const;
    void setIsActive(const bool &is_active);
    bool is_is_active_Set() const;
    bool is_is_active_Valid() const;

    bool isIsAndOperator() const;
    void setIsAndOperator(const bool &is_and_operator);
    bool is_is_and_operator_Set() const;
    bool is_is_and_operator_Valid() const;

    bool isIsArchived() const;
    void setIsArchived(const bool &is_archived);
    bool is_is_archived_Set() const;
    bool is_is_archived_Valid() const;

    OAIGetcampaignaudiences_200_response_inner_lastModified getLastModified() const;
    void setLastModified(const OAIGetcampaignaudiences_200_response_inner_lastModified &last_modified);
    bool is_last_modified_Set() const;
    bool is_last_modified_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIGetcampaignaudiences_200_response_inner_targetConfigurations_inner> getTargetConfigurations() const;
    void setTargetConfigurations(const QList<OAIGetcampaignaudiences_200_response_inner_targetConfigurations_inner> &target_configurations);
    bool is_target_configurations_Set() const;
    bool is_target_configurations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_begin_date_utc;
    bool m_begin_date_utc_isSet;
    bool m_begin_date_utc_isValid;

    QString m_end_date_utc;
    bool m_end_date_utc_isSet;
    bool m_end_date_utc_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_active;
    bool m_is_active_isSet;
    bool m_is_active_isValid;

    bool m_is_and_operator;
    bool m_is_and_operator_isSet;
    bool m_is_and_operator_isValid;

    bool m_is_archived;
    bool m_is_archived_isSet;
    bool m_is_archived_isValid;

    OAIGetcampaignaudiences_200_response_inner_lastModified m_last_modified;
    bool m_last_modified_isSet;
    bool m_last_modified_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIGetcampaignaudiences_200_response_inner_targetConfigurations_inner> m_target_configurations;
    bool m_target_configurations_isSet;
    bool m_target_configurations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetcampaignaudiences_200_response_inner)

#endif // OAIGetcampaignaudiences_200_response_inner_H
