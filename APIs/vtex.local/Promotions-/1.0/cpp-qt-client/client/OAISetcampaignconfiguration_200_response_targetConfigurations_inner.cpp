/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetcampaignconfiguration_200_response_targetConfigurations_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetcampaignconfiguration_200_response_targetConfigurations_inner::OAISetcampaignconfiguration_200_response_targetConfigurations_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetcampaignconfiguration_200_response_targetConfigurations_inner::OAISetcampaignconfiguration_200_response_targetConfigurations_inner() {
    this->initializeModel();
}

OAISetcampaignconfiguration_200_response_targetConfigurations_inner::~OAISetcampaignconfiguration_200_response_targetConfigurations_inner() {}

void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::initializeModel() {

    m_affiliates_isSet = false;
    m_affiliates_isValid = false;

    m_are_sales_channel_ids_exclusive_isSet = false;
    m_are_sales_channel_ids_exclusive_isValid = false;

    m_brands_isSet = false;
    m_brands_isValid = false;

    m_brands_are_inclusive_isSet = false;
    m_brands_are_inclusive_isValid = false;

    m_campaigns_isSet = false;
    m_campaigns_isValid = false;

    m_card_issuers_isSet = false;
    m_card_issuers_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_categories_are_inclusive_isSet = false;
    m_categories_are_inclusive_isValid = false;

    m_cluster_expressions_isSet = false;
    m_cluster_expressions_isValid = false;

    m_cluster_operator_isSet = false;
    m_cluster_operator_isValid = false;

    m_collections_isSet = false;
    m_collections_isValid = false;

    m_collections1_buy_together_isSet = false;
    m_collections1_buy_together_isValid = false;

    m_collections2_buy_together_isSet = false;
    m_collections2_buy_together_isValid = false;

    m_collections_is_inclusive_isSet = false;
    m_collections_is_inclusive_isValid = false;

    m_compare_list_price_and_price_isSet = false;
    m_compare_list_price_and_price_isValid = false;

    m_coupon_isSet = false;
    m_coupon_isValid = false;

    m_days_ago_of_purchases_isSet = false;
    m_days_ago_of_purchases_isValid = false;

    m_enable_buy_together_per_sku_isSet = false;
    m_enable_buy_together_per_sku_isValid = false;

    m_featured_isSet = false;
    m_featured_isValid = false;

    m_first_buy_is_profile_optimistic_isSet = false;
    m_first_buy_is_profile_optimistic_isValid = false;

    m_gift_list_types_isSet = false;
    m_gift_list_types_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_seller_is_inclusive_isSet = false;
    m_id_seller_is_inclusive_isValid = false;

    m_ids_sales_channel_isSet = false;
    m_ids_sales_channel_isValid = false;

    m_installment_isSet = false;
    m_installment_isValid = false;

    m_is_different_list_price_and_price_isSet = false;
    m_is_different_list_price_and_price_isValid = false;

    m_is_first_buy_isSet = false;
    m_is_first_buy_isValid = false;

    m_is_min_max_installments_isSet = false;
    m_is_min_max_installments_isValid = false;

    m_is_sla_selected_isSet = false;
    m_is_sla_selected_isValid = false;

    m_item_max_price_isSet = false;
    m_item_max_price_isValid = false;

    m_item_min_price_isSet = false;
    m_item_min_price_isValid = false;

    m_list_brand1_buy_together_isSet = false;
    m_list_brand1_buy_together_isValid = false;

    m_list_category1_buy_together_isSet = false;
    m_list_category1_buy_together_isValid = false;

    m_list_sku1_buy_together_isSet = false;
    m_list_sku1_buy_together_isValid = false;

    m_list_sku2_buy_together_isSet = false;
    m_list_sku2_buy_together_isValid = false;

    m_marketing_tags_isSet = false;
    m_marketing_tags_isValid = false;

    m_marketing_tags_are_not_inclusive_isSet = false;
    m_marketing_tags_are_not_inclusive_isValid = false;

    m_max_installment_isSet = false;
    m_max_installment_isValid = false;

    m_max_usage_isSet = false;
    m_max_usage_isValid = false;

    m_max_usage_per_client_isSet = false;
    m_max_usage_per_client_isValid = false;

    m_merchants_isSet = false;
    m_merchants_isValid = false;

    m_min_installment_isSet = false;
    m_min_installment_isValid = false;

    m_minimum_quantity_buy_together_isSet = false;
    m_minimum_quantity_buy_together_isValid = false;

    m_multiple_use_per_client_isSet = false;
    m_multiple_use_per_client_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_payments_methods_isSet = false;
    m_payments_methods_isValid = false;

    m_payments_rules_isSet = false;
    m_payments_rules_isValid = false;

    m_percentual_discount_value_list_isSet = false;
    m_percentual_discount_value_list_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_products_are_inclusive_isSet = false;
    m_products_are_inclusive_isValid = false;

    m_products_specifications_isSet = false;
    m_products_specifications_isValid = false;

    m_quantity_to_affect_buy_together_isSet = false;
    m_quantity_to_affect_buy_together_isValid = false;

    m_restrictions_bins_isSet = false;
    m_restrictions_bins_isValid = false;

    m_should_distribute_discount_among_matched_items_isSet = false;
    m_should_distribute_discount_among_matched_items_isValid = false;

    m_skus_isSet = false;
    m_skus_isValid = false;

    m_skus_are_inclusive_isSet = false;
    m_skus_are_inclusive_isValid = false;

    m_slas_ids_isSet = false;
    m_slas_ids_isValid = false;

    m_stores_isSet = false;
    m_stores_isValid = false;

    m_stores_are_inclusive_isSet = false;
    m_stores_are_inclusive_isValid = false;

    m_total_value_celing_isSet = false;
    m_total_value_celing_isValid = false;

    m_total_value_floor_isSet = false;
    m_total_value_floor_isValid = false;

    m_total_value_include_all_items_isSet = false;
    m_total_value_include_all_items_isValid = false;

    m_total_value_mode_isSet = false;
    m_total_value_mode_isValid = false;

    m_total_value_purchase_isSet = false;
    m_total_value_purchase_isValid = false;

    m_use_new_progressive_algorithm_isSet = false;
    m_use_new_progressive_algorithm_isValid = false;

    m_zip_code_ranges_isSet = false;
    m_zip_code_ranges_isValid = false;
}

void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::fromJsonObject(QJsonObject json) {

    m_affiliates_isValid = ::OpenAPI::fromJsonValue(m_affiliates, json[QString("affiliates")]);
    m_affiliates_isSet = !json[QString("affiliates")].isNull() && m_affiliates_isValid;

    m_are_sales_channel_ids_exclusive_isValid = ::OpenAPI::fromJsonValue(m_are_sales_channel_ids_exclusive, json[QString("areSalesChannelIdsExclusive")]);
    m_are_sales_channel_ids_exclusive_isSet = !json[QString("areSalesChannelIdsExclusive")].isNull() && m_are_sales_channel_ids_exclusive_isValid;

    m_brands_isValid = ::OpenAPI::fromJsonValue(m_brands, json[QString("brands")]);
    m_brands_isSet = !json[QString("brands")].isNull() && m_brands_isValid;

    m_brands_are_inclusive_isValid = ::OpenAPI::fromJsonValue(m_brands_are_inclusive, json[QString("brandsAreInclusive")]);
    m_brands_are_inclusive_isSet = !json[QString("brandsAreInclusive")].isNull() && m_brands_are_inclusive_isValid;

    m_campaigns_isValid = ::OpenAPI::fromJsonValue(m_campaigns, json[QString("campaigns")]);
    m_campaigns_isSet = !json[QString("campaigns")].isNull() && m_campaigns_isValid;

    m_card_issuers_isValid = ::OpenAPI::fromJsonValue(m_card_issuers, json[QString("cardIssuers")]);
    m_card_issuers_isSet = !json[QString("cardIssuers")].isNull() && m_card_issuers_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_categories_are_inclusive_isValid = ::OpenAPI::fromJsonValue(m_categories_are_inclusive, json[QString("categoriesAreInclusive")]);
    m_categories_are_inclusive_isSet = !json[QString("categoriesAreInclusive")].isNull() && m_categories_are_inclusive_isValid;

    m_cluster_expressions_isValid = ::OpenAPI::fromJsonValue(m_cluster_expressions, json[QString("clusterExpressions")]);
    m_cluster_expressions_isSet = !json[QString("clusterExpressions")].isNull() && m_cluster_expressions_isValid;

    m_cluster_operator_isValid = ::OpenAPI::fromJsonValue(m_cluster_operator, json[QString("clusterOperator")]);
    m_cluster_operator_isSet = !json[QString("clusterOperator")].isNull() && m_cluster_operator_isValid;

    m_collections_isValid = ::OpenAPI::fromJsonValue(m_collections, json[QString("collections")]);
    m_collections_isSet = !json[QString("collections")].isNull() && m_collections_isValid;

    m_collections1_buy_together_isValid = ::OpenAPI::fromJsonValue(m_collections1_buy_together, json[QString("collections1BuyTogether")]);
    m_collections1_buy_together_isSet = !json[QString("collections1BuyTogether")].isNull() && m_collections1_buy_together_isValid;

    m_collections2_buy_together_isValid = ::OpenAPI::fromJsonValue(m_collections2_buy_together, json[QString("collections2BuyTogether")]);
    m_collections2_buy_together_isSet = !json[QString("collections2BuyTogether")].isNull() && m_collections2_buy_together_isValid;

    m_collections_is_inclusive_isValid = ::OpenAPI::fromJsonValue(m_collections_is_inclusive, json[QString("collectionsIsInclusive")]);
    m_collections_is_inclusive_isSet = !json[QString("collectionsIsInclusive")].isNull() && m_collections_is_inclusive_isValid;

    m_compare_list_price_and_price_isValid = ::OpenAPI::fromJsonValue(m_compare_list_price_and_price, json[QString("compareListPriceAndPrice")]);
    m_compare_list_price_and_price_isSet = !json[QString("compareListPriceAndPrice")].isNull() && m_compare_list_price_and_price_isValid;

    m_coupon_isValid = ::OpenAPI::fromJsonValue(m_coupon, json[QString("coupon")]);
    m_coupon_isSet = !json[QString("coupon")].isNull() && m_coupon_isValid;

    m_days_ago_of_purchases_isValid = ::OpenAPI::fromJsonValue(m_days_ago_of_purchases, json[QString("daysAgoOfPurchases")]);
    m_days_ago_of_purchases_isSet = !json[QString("daysAgoOfPurchases")].isNull() && m_days_ago_of_purchases_isValid;

    m_enable_buy_together_per_sku_isValid = ::OpenAPI::fromJsonValue(m_enable_buy_together_per_sku, json[QString("enableBuyTogetherPerSku")]);
    m_enable_buy_together_per_sku_isSet = !json[QString("enableBuyTogetherPerSku")].isNull() && m_enable_buy_together_per_sku_isValid;

    m_featured_isValid = ::OpenAPI::fromJsonValue(m_featured, json[QString("featured")]);
    m_featured_isSet = !json[QString("featured")].isNull() && m_featured_isValid;

    m_first_buy_is_profile_optimistic_isValid = ::OpenAPI::fromJsonValue(m_first_buy_is_profile_optimistic, json[QString("firstBuyIsProfileOptimistic")]);
    m_first_buy_is_profile_optimistic_isSet = !json[QString("firstBuyIsProfileOptimistic")].isNull() && m_first_buy_is_profile_optimistic_isValid;

    m_gift_list_types_isValid = ::OpenAPI::fromJsonValue(m_gift_list_types, json[QString("giftListTypes")]);
    m_gift_list_types_isSet = !json[QString("giftListTypes")].isNull() && m_gift_list_types_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_seller_is_inclusive_isValid = ::OpenAPI::fromJsonValue(m_id_seller_is_inclusive, json[QString("idSellerIsInclusive")]);
    m_id_seller_is_inclusive_isSet = !json[QString("idSellerIsInclusive")].isNull() && m_id_seller_is_inclusive_isValid;

    m_ids_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_ids_sales_channel, json[QString("idsSalesChannel")]);
    m_ids_sales_channel_isSet = !json[QString("idsSalesChannel")].isNull() && m_ids_sales_channel_isValid;

    m_installment_isValid = ::OpenAPI::fromJsonValue(m_installment, json[QString("installment")]);
    m_installment_isSet = !json[QString("installment")].isNull() && m_installment_isValid;

    m_is_different_list_price_and_price_isValid = ::OpenAPI::fromJsonValue(m_is_different_list_price_and_price, json[QString("isDifferentListPriceAndPrice")]);
    m_is_different_list_price_and_price_isSet = !json[QString("isDifferentListPriceAndPrice")].isNull() && m_is_different_list_price_and_price_isValid;

    m_is_first_buy_isValid = ::OpenAPI::fromJsonValue(m_is_first_buy, json[QString("isFirstBuy")]);
    m_is_first_buy_isSet = !json[QString("isFirstBuy")].isNull() && m_is_first_buy_isValid;

    m_is_min_max_installments_isValid = ::OpenAPI::fromJsonValue(m_is_min_max_installments, json[QString("isMinMaxInstallments")]);
    m_is_min_max_installments_isSet = !json[QString("isMinMaxInstallments")].isNull() && m_is_min_max_installments_isValid;

    m_is_sla_selected_isValid = ::OpenAPI::fromJsonValue(m_is_sla_selected, json[QString("isSlaSelected")]);
    m_is_sla_selected_isSet = !json[QString("isSlaSelected")].isNull() && m_is_sla_selected_isValid;

    m_item_max_price_isValid = ::OpenAPI::fromJsonValue(m_item_max_price, json[QString("itemMaxPrice")]);
    m_item_max_price_isSet = !json[QString("itemMaxPrice")].isNull() && m_item_max_price_isValid;

    m_item_min_price_isValid = ::OpenAPI::fromJsonValue(m_item_min_price, json[QString("itemMinPrice")]);
    m_item_min_price_isSet = !json[QString("itemMinPrice")].isNull() && m_item_min_price_isValid;

    m_list_brand1_buy_together_isValid = ::OpenAPI::fromJsonValue(m_list_brand1_buy_together, json[QString("listBrand1BuyTogether")]);
    m_list_brand1_buy_together_isSet = !json[QString("listBrand1BuyTogether")].isNull() && m_list_brand1_buy_together_isValid;

    m_list_category1_buy_together_isValid = ::OpenAPI::fromJsonValue(m_list_category1_buy_together, json[QString("listCategory1BuyTogether")]);
    m_list_category1_buy_together_isSet = !json[QString("listCategory1BuyTogether")].isNull() && m_list_category1_buy_together_isValid;

    m_list_sku1_buy_together_isValid = ::OpenAPI::fromJsonValue(m_list_sku1_buy_together, json[QString("listSku1BuyTogether")]);
    m_list_sku1_buy_together_isSet = !json[QString("listSku1BuyTogether")].isNull() && m_list_sku1_buy_together_isValid;

    m_list_sku2_buy_together_isValid = ::OpenAPI::fromJsonValue(m_list_sku2_buy_together, json[QString("listSku2BuyTogether")]);
    m_list_sku2_buy_together_isSet = !json[QString("listSku2BuyTogether")].isNull() && m_list_sku2_buy_together_isValid;

    m_marketing_tags_isValid = ::OpenAPI::fromJsonValue(m_marketing_tags, json[QString("marketingTags")]);
    m_marketing_tags_isSet = !json[QString("marketingTags")].isNull() && m_marketing_tags_isValid;

    m_marketing_tags_are_not_inclusive_isValid = ::OpenAPI::fromJsonValue(m_marketing_tags_are_not_inclusive, json[QString("marketingTagsAreNotInclusive")]);
    m_marketing_tags_are_not_inclusive_isSet = !json[QString("marketingTagsAreNotInclusive")].isNull() && m_marketing_tags_are_not_inclusive_isValid;

    m_max_installment_isValid = ::OpenAPI::fromJsonValue(m_max_installment, json[QString("maxInstallment")]);
    m_max_installment_isSet = !json[QString("maxInstallment")].isNull() && m_max_installment_isValid;

    m_max_usage_isValid = ::OpenAPI::fromJsonValue(m_max_usage, json[QString("maxUsage")]);
    m_max_usage_isSet = !json[QString("maxUsage")].isNull() && m_max_usage_isValid;

    m_max_usage_per_client_isValid = ::OpenAPI::fromJsonValue(m_max_usage_per_client, json[QString("maxUsagePerClient")]);
    m_max_usage_per_client_isSet = !json[QString("maxUsagePerClient")].isNull() && m_max_usage_per_client_isValid;

    m_merchants_isValid = ::OpenAPI::fromJsonValue(m_merchants, json[QString("merchants")]);
    m_merchants_isSet = !json[QString("merchants")].isNull() && m_merchants_isValid;

    m_min_installment_isValid = ::OpenAPI::fromJsonValue(m_min_installment, json[QString("minInstallment")]);
    m_min_installment_isSet = !json[QString("minInstallment")].isNull() && m_min_installment_isValid;

    m_minimum_quantity_buy_together_isValid = ::OpenAPI::fromJsonValue(m_minimum_quantity_buy_together, json[QString("minimumQuantityBuyTogether")]);
    m_minimum_quantity_buy_together_isSet = !json[QString("minimumQuantityBuyTogether")].isNull() && m_minimum_quantity_buy_together_isValid;

    m_multiple_use_per_client_isValid = ::OpenAPI::fromJsonValue(m_multiple_use_per_client, json[QString("multipleUsePerClient")]);
    m_multiple_use_per_client_isSet = !json[QString("multipleUsePerClient")].isNull() && m_multiple_use_per_client_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_payments_methods_isValid = ::OpenAPI::fromJsonValue(m_payments_methods, json[QString("paymentsMethods")]);
    m_payments_methods_isSet = !json[QString("paymentsMethods")].isNull() && m_payments_methods_isValid;

    m_payments_rules_isValid = ::OpenAPI::fromJsonValue(m_payments_rules, json[QString("paymentsRules")]);
    m_payments_rules_isSet = !json[QString("paymentsRules")].isNull() && m_payments_rules_isValid;

    m_percentual_discount_value_list_isValid = ::OpenAPI::fromJsonValue(m_percentual_discount_value_list, json[QString("percentualDiscountValueList")]);
    m_percentual_discount_value_list_isSet = !json[QString("percentualDiscountValueList")].isNull() && m_percentual_discount_value_list_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_products_are_inclusive_isValid = ::OpenAPI::fromJsonValue(m_products_are_inclusive, json[QString("productsAreInclusive")]);
    m_products_are_inclusive_isSet = !json[QString("productsAreInclusive")].isNull() && m_products_are_inclusive_isValid;

    m_products_specifications_isValid = ::OpenAPI::fromJsonValue(m_products_specifications, json[QString("productsSpecifications")]);
    m_products_specifications_isSet = !json[QString("productsSpecifications")].isNull() && m_products_specifications_isValid;

    m_quantity_to_affect_buy_together_isValid = ::OpenAPI::fromJsonValue(m_quantity_to_affect_buy_together, json[QString("quantityToAffectBuyTogether")]);
    m_quantity_to_affect_buy_together_isSet = !json[QString("quantityToAffectBuyTogether")].isNull() && m_quantity_to_affect_buy_together_isValid;

    m_restrictions_bins_isValid = ::OpenAPI::fromJsonValue(m_restrictions_bins, json[QString("restrictionsBins")]);
    m_restrictions_bins_isSet = !json[QString("restrictionsBins")].isNull() && m_restrictions_bins_isValid;

    m_should_distribute_discount_among_matched_items_isValid = ::OpenAPI::fromJsonValue(m_should_distribute_discount_among_matched_items, json[QString("shouldDistributeDiscountAmongMatchedItems")]);
    m_should_distribute_discount_among_matched_items_isSet = !json[QString("shouldDistributeDiscountAmongMatchedItems")].isNull() && m_should_distribute_discount_among_matched_items_isValid;

    m_skus_isValid = ::OpenAPI::fromJsonValue(m_skus, json[QString("skus")]);
    m_skus_isSet = !json[QString("skus")].isNull() && m_skus_isValid;

    m_skus_are_inclusive_isValid = ::OpenAPI::fromJsonValue(m_skus_are_inclusive, json[QString("skusAreInclusive")]);
    m_skus_are_inclusive_isSet = !json[QString("skusAreInclusive")].isNull() && m_skus_are_inclusive_isValid;

    m_slas_ids_isValid = ::OpenAPI::fromJsonValue(m_slas_ids, json[QString("slasIds")]);
    m_slas_ids_isSet = !json[QString("slasIds")].isNull() && m_slas_ids_isValid;

    m_stores_isValid = ::OpenAPI::fromJsonValue(m_stores, json[QString("stores")]);
    m_stores_isSet = !json[QString("stores")].isNull() && m_stores_isValid;

    m_stores_are_inclusive_isValid = ::OpenAPI::fromJsonValue(m_stores_are_inclusive, json[QString("storesAreInclusive")]);
    m_stores_are_inclusive_isSet = !json[QString("storesAreInclusive")].isNull() && m_stores_are_inclusive_isValid;

    m_total_value_celing_isValid = ::OpenAPI::fromJsonValue(m_total_value_celing, json[QString("totalValueCeling")]);
    m_total_value_celing_isSet = !json[QString("totalValueCeling")].isNull() && m_total_value_celing_isValid;

    m_total_value_floor_isValid = ::OpenAPI::fromJsonValue(m_total_value_floor, json[QString("totalValueFloor")]);
    m_total_value_floor_isSet = !json[QString("totalValueFloor")].isNull() && m_total_value_floor_isValid;

    m_total_value_include_all_items_isValid = ::OpenAPI::fromJsonValue(m_total_value_include_all_items, json[QString("totalValueIncludeAllItems")]);
    m_total_value_include_all_items_isSet = !json[QString("totalValueIncludeAllItems")].isNull() && m_total_value_include_all_items_isValid;

    m_total_value_mode_isValid = ::OpenAPI::fromJsonValue(m_total_value_mode, json[QString("totalValueMode")]);
    m_total_value_mode_isSet = !json[QString("totalValueMode")].isNull() && m_total_value_mode_isValid;

    m_total_value_purchase_isValid = ::OpenAPI::fromJsonValue(m_total_value_purchase, json[QString("totalValuePurchase")]);
    m_total_value_purchase_isSet = !json[QString("totalValuePurchase")].isNull() && m_total_value_purchase_isValid;

    m_use_new_progressive_algorithm_isValid = ::OpenAPI::fromJsonValue(m_use_new_progressive_algorithm, json[QString("useNewProgressiveAlgorithm")]);
    m_use_new_progressive_algorithm_isSet = !json[QString("useNewProgressiveAlgorithm")].isNull() && m_use_new_progressive_algorithm_isValid;

    m_zip_code_ranges_isValid = ::OpenAPI::fromJsonValue(m_zip_code_ranges, json[QString("zipCodeRanges")]);
    m_zip_code_ranges_isSet = !json[QString("zipCodeRanges")].isNull() && m_zip_code_ranges_isValid;
}

QString OAISetcampaignconfiguration_200_response_targetConfigurations_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetcampaignconfiguration_200_response_targetConfigurations_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_affiliates.size() > 0) {
        obj.insert(QString("affiliates"), ::OpenAPI::toJsonValue(m_affiliates));
    }
    if (m_are_sales_channel_ids_exclusive_isSet) {
        obj.insert(QString("areSalesChannelIdsExclusive"), ::OpenAPI::toJsonValue(m_are_sales_channel_ids_exclusive));
    }
    if (m_brands.size() > 0) {
        obj.insert(QString("brands"), ::OpenAPI::toJsonValue(m_brands));
    }
    if (m_brands_are_inclusive_isSet) {
        obj.insert(QString("brandsAreInclusive"), ::OpenAPI::toJsonValue(m_brands_are_inclusive));
    }
    if (m_campaigns.size() > 0) {
        obj.insert(QString("campaigns"), ::OpenAPI::toJsonValue(m_campaigns));
    }
    if (m_card_issuers.size() > 0) {
        obj.insert(QString("cardIssuers"), ::OpenAPI::toJsonValue(m_card_issuers));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_categories_are_inclusive_isSet) {
        obj.insert(QString("categoriesAreInclusive"), ::OpenAPI::toJsonValue(m_categories_are_inclusive));
    }
    if (m_cluster_expressions.size() > 0) {
        obj.insert(QString("clusterExpressions"), ::OpenAPI::toJsonValue(m_cluster_expressions));
    }
    if (m_cluster_operator_isSet) {
        obj.insert(QString("clusterOperator"), ::OpenAPI::toJsonValue(m_cluster_operator));
    }
    if (m_collections.size() > 0) {
        obj.insert(QString("collections"), ::OpenAPI::toJsonValue(m_collections));
    }
    if (m_collections1_buy_together.size() > 0) {
        obj.insert(QString("collections1BuyTogether"), ::OpenAPI::toJsonValue(m_collections1_buy_together));
    }
    if (m_collections2_buy_together.size() > 0) {
        obj.insert(QString("collections2BuyTogether"), ::OpenAPI::toJsonValue(m_collections2_buy_together));
    }
    if (m_collections_is_inclusive_isSet) {
        obj.insert(QString("collectionsIsInclusive"), ::OpenAPI::toJsonValue(m_collections_is_inclusive));
    }
    if (m_compare_list_price_and_price_isSet) {
        obj.insert(QString("compareListPriceAndPrice"), ::OpenAPI::toJsonValue(m_compare_list_price_and_price));
    }
    if (m_coupon.size() > 0) {
        obj.insert(QString("coupon"), ::OpenAPI::toJsonValue(m_coupon));
    }
    if (m_days_ago_of_purchases_isSet) {
        obj.insert(QString("daysAgoOfPurchases"), ::OpenAPI::toJsonValue(m_days_ago_of_purchases));
    }
    if (m_enable_buy_together_per_sku_isSet) {
        obj.insert(QString("enableBuyTogetherPerSku"), ::OpenAPI::toJsonValue(m_enable_buy_together_per_sku));
    }
    if (m_featured_isSet) {
        obj.insert(QString("featured"), ::OpenAPI::toJsonValue(m_featured));
    }
    if (m_first_buy_is_profile_optimistic_isSet) {
        obj.insert(QString("firstBuyIsProfileOptimistic"), ::OpenAPI::toJsonValue(m_first_buy_is_profile_optimistic));
    }
    if (m_gift_list_types.size() > 0) {
        obj.insert(QString("giftListTypes"), ::OpenAPI::toJsonValue(m_gift_list_types));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_seller_is_inclusive_isSet) {
        obj.insert(QString("idSellerIsInclusive"), ::OpenAPI::toJsonValue(m_id_seller_is_inclusive));
    }
    if (m_ids_sales_channel.size() > 0) {
        obj.insert(QString("idsSalesChannel"), ::OpenAPI::toJsonValue(m_ids_sales_channel));
    }
    if (m_installment_isSet) {
        obj.insert(QString("installment"), ::OpenAPI::toJsonValue(m_installment));
    }
    if (m_is_different_list_price_and_price_isSet) {
        obj.insert(QString("isDifferentListPriceAndPrice"), ::OpenAPI::toJsonValue(m_is_different_list_price_and_price));
    }
    if (m_is_first_buy_isSet) {
        obj.insert(QString("isFirstBuy"), ::OpenAPI::toJsonValue(m_is_first_buy));
    }
    if (m_is_min_max_installments_isSet) {
        obj.insert(QString("isMinMaxInstallments"), ::OpenAPI::toJsonValue(m_is_min_max_installments));
    }
    if (m_is_sla_selected_isSet) {
        obj.insert(QString("isSlaSelected"), ::OpenAPI::toJsonValue(m_is_sla_selected));
    }
    if (m_item_max_price_isSet) {
        obj.insert(QString("itemMaxPrice"), ::OpenAPI::toJsonValue(m_item_max_price));
    }
    if (m_item_min_price_isSet) {
        obj.insert(QString("itemMinPrice"), ::OpenAPI::toJsonValue(m_item_min_price));
    }
    if (m_list_brand1_buy_together.size() > 0) {
        obj.insert(QString("listBrand1BuyTogether"), ::OpenAPI::toJsonValue(m_list_brand1_buy_together));
    }
    if (m_list_category1_buy_together.size() > 0) {
        obj.insert(QString("listCategory1BuyTogether"), ::OpenAPI::toJsonValue(m_list_category1_buy_together));
    }
    if (m_list_sku1_buy_together.size() > 0) {
        obj.insert(QString("listSku1BuyTogether"), ::OpenAPI::toJsonValue(m_list_sku1_buy_together));
    }
    if (m_list_sku2_buy_together.size() > 0) {
        obj.insert(QString("listSku2BuyTogether"), ::OpenAPI::toJsonValue(m_list_sku2_buy_together));
    }
    if (m_marketing_tags.size() > 0) {
        obj.insert(QString("marketingTags"), ::OpenAPI::toJsonValue(m_marketing_tags));
    }
    if (m_marketing_tags_are_not_inclusive_isSet) {
        obj.insert(QString("marketingTagsAreNotInclusive"), ::OpenAPI::toJsonValue(m_marketing_tags_are_not_inclusive));
    }
    if (m_max_installment_isSet) {
        obj.insert(QString("maxInstallment"), ::OpenAPI::toJsonValue(m_max_installment));
    }
    if (m_max_usage_isSet) {
        obj.insert(QString("maxUsage"), ::OpenAPI::toJsonValue(m_max_usage));
    }
    if (m_max_usage_per_client_isSet) {
        obj.insert(QString("maxUsagePerClient"), ::OpenAPI::toJsonValue(m_max_usage_per_client));
    }
    if (m_merchants.size() > 0) {
        obj.insert(QString("merchants"), ::OpenAPI::toJsonValue(m_merchants));
    }
    if (m_min_installment_isSet) {
        obj.insert(QString("minInstallment"), ::OpenAPI::toJsonValue(m_min_installment));
    }
    if (m_minimum_quantity_buy_together_isSet) {
        obj.insert(QString("minimumQuantityBuyTogether"), ::OpenAPI::toJsonValue(m_minimum_quantity_buy_together));
    }
    if (m_multiple_use_per_client_isSet) {
        obj.insert(QString("multipleUsePerClient"), ::OpenAPI::toJsonValue(m_multiple_use_per_client));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_payments_methods.size() > 0) {
        obj.insert(QString("paymentsMethods"), ::OpenAPI::toJsonValue(m_payments_methods));
    }
    if (m_payments_rules.size() > 0) {
        obj.insert(QString("paymentsRules"), ::OpenAPI::toJsonValue(m_payments_rules));
    }
    if (m_percentual_discount_value_list.size() > 0) {
        obj.insert(QString("percentualDiscountValueList"), ::OpenAPI::toJsonValue(m_percentual_discount_value_list));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_products_are_inclusive_isSet) {
        obj.insert(QString("productsAreInclusive"), ::OpenAPI::toJsonValue(m_products_are_inclusive));
    }
    if (m_products_specifications.size() > 0) {
        obj.insert(QString("productsSpecifications"), ::OpenAPI::toJsonValue(m_products_specifications));
    }
    if (m_quantity_to_affect_buy_together_isSet) {
        obj.insert(QString("quantityToAffectBuyTogether"), ::OpenAPI::toJsonValue(m_quantity_to_affect_buy_together));
    }
    if (m_restrictions_bins.size() > 0) {
        obj.insert(QString("restrictionsBins"), ::OpenAPI::toJsonValue(m_restrictions_bins));
    }
    if (m_should_distribute_discount_among_matched_items_isSet) {
        obj.insert(QString("shouldDistributeDiscountAmongMatchedItems"), ::OpenAPI::toJsonValue(m_should_distribute_discount_among_matched_items));
    }
    if (m_skus.size() > 0) {
        obj.insert(QString("skus"), ::OpenAPI::toJsonValue(m_skus));
    }
    if (m_skus_are_inclusive_isSet) {
        obj.insert(QString("skusAreInclusive"), ::OpenAPI::toJsonValue(m_skus_are_inclusive));
    }
    if (m_slas_ids.size() > 0) {
        obj.insert(QString("slasIds"), ::OpenAPI::toJsonValue(m_slas_ids));
    }
    if (m_stores.size() > 0) {
        obj.insert(QString("stores"), ::OpenAPI::toJsonValue(m_stores));
    }
    if (m_stores_are_inclusive_isSet) {
        obj.insert(QString("storesAreInclusive"), ::OpenAPI::toJsonValue(m_stores_are_inclusive));
    }
    if (m_total_value_celing_isSet) {
        obj.insert(QString("totalValueCeling"), ::OpenAPI::toJsonValue(m_total_value_celing));
    }
    if (m_total_value_floor_isSet) {
        obj.insert(QString("totalValueFloor"), ::OpenAPI::toJsonValue(m_total_value_floor));
    }
    if (m_total_value_include_all_items_isSet) {
        obj.insert(QString("totalValueIncludeAllItems"), ::OpenAPI::toJsonValue(m_total_value_include_all_items));
    }
    if (m_total_value_mode_isSet) {
        obj.insert(QString("totalValueMode"), ::OpenAPI::toJsonValue(m_total_value_mode));
    }
    if (m_total_value_purchase_isSet) {
        obj.insert(QString("totalValuePurchase"), ::OpenAPI::toJsonValue(m_total_value_purchase));
    }
    if (m_use_new_progressive_algorithm_isSet) {
        obj.insert(QString("useNewProgressiveAlgorithm"), ::OpenAPI::toJsonValue(m_use_new_progressive_algorithm));
    }
    if (m_zip_code_ranges.size() > 0) {
        obj.insert(QString("zipCodeRanges"), ::OpenAPI::toJsonValue(m_zip_code_ranges));
    }
    return obj;
}

QList<OAICreateOrUpdateCalculatorConfiguration_200_response_affiliates_inner> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getAffiliates() const {
    return m_affiliates;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setAffiliates(const QList<OAICreateOrUpdateCalculatorConfiguration_200_response_affiliates_inner> &affiliates) {
    m_affiliates = affiliates;
    m_affiliates_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_affiliates_Set() const{
    return m_affiliates_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_affiliates_Valid() const{
    return m_affiliates_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isAreSalesChannelIdsExclusive() const {
    return m_are_sales_channel_ids_exclusive;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setAreSalesChannelIdsExclusive(const bool &are_sales_channel_ids_exclusive) {
    m_are_sales_channel_ids_exclusive = are_sales_channel_ids_exclusive;
    m_are_sales_channel_ids_exclusive_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_are_sales_channel_ids_exclusive_Set() const{
    return m_are_sales_channel_ids_exclusive_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_are_sales_channel_ids_exclusive_Valid() const{
    return m_are_sales_channel_ids_exclusive_isValid;
}

QList<OAICreateOrUpdateCalculatorConfiguration_200_response_brands_inner> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getBrands() const {
    return m_brands;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setBrands(const QList<OAICreateOrUpdateCalculatorConfiguration_200_response_brands_inner> &brands) {
    m_brands = brands;
    m_brands_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_brands_Set() const{
    return m_brands_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_brands_Valid() const{
    return m_brands_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isBrandsAreInclusive() const {
    return m_brands_are_inclusive;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setBrandsAreInclusive(const bool &brands_are_inclusive) {
    m_brands_are_inclusive = brands_are_inclusive;
    m_brands_are_inclusive_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_brands_are_inclusive_Set() const{
    return m_brands_are_inclusive_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_brands_are_inclusive_Valid() const{
    return m_brands_are_inclusive_isValid;
}

QList<QJsonValue> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getCampaigns() const {
    return m_campaigns;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setCampaigns(const QList<QJsonValue> &campaigns) {
    m_campaigns = campaigns;
    m_campaigns_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_campaigns_Set() const{
    return m_campaigns_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_campaigns_Valid() const{
    return m_campaigns_isValid;
}

QList<QJsonValue> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getCardIssuers() const {
    return m_card_issuers;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setCardIssuers(const QList<QJsonValue> &card_issuers) {
    m_card_issuers = card_issuers;
    m_card_issuers_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_card_issuers_Set() const{
    return m_card_issuers_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_card_issuers_Valid() const{
    return m_card_issuers_isValid;
}

QList<OAICreateOrUpdateCalculatorConfiguration_200_response_categories_inner> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getCategories() const {
    return m_categories;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setCategories(const QList<OAICreateOrUpdateCalculatorConfiguration_200_response_categories_inner> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_categories_Valid() const{
    return m_categories_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isCategoriesAreInclusive() const {
    return m_categories_are_inclusive;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setCategoriesAreInclusive(const bool &categories_are_inclusive) {
    m_categories_are_inclusive = categories_are_inclusive;
    m_categories_are_inclusive_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_categories_are_inclusive_Set() const{
    return m_categories_are_inclusive_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_categories_are_inclusive_Valid() const{
    return m_categories_are_inclusive_isValid;
}

QList<QString> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getClusterExpressions() const {
    return m_cluster_expressions;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setClusterExpressions(const QList<QString> &cluster_expressions) {
    m_cluster_expressions = cluster_expressions;
    m_cluster_expressions_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_cluster_expressions_Set() const{
    return m_cluster_expressions_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_cluster_expressions_Valid() const{
    return m_cluster_expressions_isValid;
}

QString OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getClusterOperator() const {
    return m_cluster_operator;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setClusterOperator(const QString &cluster_operator) {
    m_cluster_operator = cluster_operator;
    m_cluster_operator_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_cluster_operator_Set() const{
    return m_cluster_operator_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_cluster_operator_Valid() const{
    return m_cluster_operator_isValid;
}

QList<OAICreateOrUpdateCalculatorConfiguration_200_response_collections_inner> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getCollections() const {
    return m_collections;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setCollections(const QList<OAICreateOrUpdateCalculatorConfiguration_200_response_collections_inner> &collections) {
    m_collections = collections;
    m_collections_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_collections_Set() const{
    return m_collections_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_collections_Valid() const{
    return m_collections_isValid;
}

QList<QString> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getCollections1BuyTogether() const {
    return m_collections1_buy_together;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setCollections1BuyTogether(const QList<QString> &collections1_buy_together) {
    m_collections1_buy_together = collections1_buy_together;
    m_collections1_buy_together_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_collections1_buy_together_Set() const{
    return m_collections1_buy_together_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_collections1_buy_together_Valid() const{
    return m_collections1_buy_together_isValid;
}

QList<QJsonValue> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getCollections2BuyTogether() const {
    return m_collections2_buy_together;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setCollections2BuyTogether(const QList<QJsonValue> &collections2_buy_together) {
    m_collections2_buy_together = collections2_buy_together;
    m_collections2_buy_together_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_collections2_buy_together_Set() const{
    return m_collections2_buy_together_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_collections2_buy_together_Valid() const{
    return m_collections2_buy_together_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isCollectionsIsInclusive() const {
    return m_collections_is_inclusive;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setCollectionsIsInclusive(const bool &collections_is_inclusive) {
    m_collections_is_inclusive = collections_is_inclusive;
    m_collections_is_inclusive_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_collections_is_inclusive_Set() const{
    return m_collections_is_inclusive_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_collections_is_inclusive_Valid() const{
    return m_collections_is_inclusive_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isCompareListPriceAndPrice() const {
    return m_compare_list_price_and_price;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setCompareListPriceAndPrice(const bool &compare_list_price_and_price) {
    m_compare_list_price_and_price = compare_list_price_and_price;
    m_compare_list_price_and_price_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_compare_list_price_and_price_Set() const{
    return m_compare_list_price_and_price_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_compare_list_price_and_price_Valid() const{
    return m_compare_list_price_and_price_isValid;
}

QList<QJsonValue> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getCoupon() const {
    return m_coupon;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setCoupon(const QList<QJsonValue> &coupon) {
    m_coupon = coupon;
    m_coupon_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_coupon_Set() const{
    return m_coupon_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_coupon_Valid() const{
    return m_coupon_isValid;
}

qint32 OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getDaysAgoOfPurchases() const {
    return m_days_ago_of_purchases;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setDaysAgoOfPurchases(const qint32 &days_ago_of_purchases) {
    m_days_ago_of_purchases = days_ago_of_purchases;
    m_days_ago_of_purchases_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_days_ago_of_purchases_Set() const{
    return m_days_ago_of_purchases_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_days_ago_of_purchases_Valid() const{
    return m_days_ago_of_purchases_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isEnableBuyTogetherPerSku() const {
    return m_enable_buy_together_per_sku;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setEnableBuyTogetherPerSku(const bool &enable_buy_together_per_sku) {
    m_enable_buy_together_per_sku = enable_buy_together_per_sku;
    m_enable_buy_together_per_sku_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_enable_buy_together_per_sku_Set() const{
    return m_enable_buy_together_per_sku_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_enable_buy_together_per_sku_Valid() const{
    return m_enable_buy_together_per_sku_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isFeatured() const {
    return m_featured;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setFeatured(const bool &featured) {
    m_featured = featured;
    m_featured_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_featured_Set() const{
    return m_featured_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_featured_Valid() const{
    return m_featured_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isFirstBuyIsProfileOptimistic() const {
    return m_first_buy_is_profile_optimistic;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setFirstBuyIsProfileOptimistic(const bool &first_buy_is_profile_optimistic) {
    m_first_buy_is_profile_optimistic = first_buy_is_profile_optimistic;
    m_first_buy_is_profile_optimistic_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_first_buy_is_profile_optimistic_Set() const{
    return m_first_buy_is_profile_optimistic_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_first_buy_is_profile_optimistic_Valid() const{
    return m_first_buy_is_profile_optimistic_isValid;
}

QList<QString> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getGiftListTypes() const {
    return m_gift_list_types;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setGiftListTypes(const QList<QString> &gift_list_types) {
    m_gift_list_types = gift_list_types;
    m_gift_list_types_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_gift_list_types_Set() const{
    return m_gift_list_types_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_gift_list_types_Valid() const{
    return m_gift_list_types_isValid;
}

QString OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getId() const {
    return m_id;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isIdSellerIsInclusive() const {
    return m_id_seller_is_inclusive;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setIdSellerIsInclusive(const bool &id_seller_is_inclusive) {
    m_id_seller_is_inclusive = id_seller_is_inclusive;
    m_id_seller_is_inclusive_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_id_seller_is_inclusive_Set() const{
    return m_id_seller_is_inclusive_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_id_seller_is_inclusive_Valid() const{
    return m_id_seller_is_inclusive_isValid;
}

QList<QString> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getIdsSalesChannel() const {
    return m_ids_sales_channel;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setIdsSalesChannel(const QList<QString> &ids_sales_channel) {
    m_ids_sales_channel = ids_sales_channel;
    m_ids_sales_channel_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_ids_sales_channel_Set() const{
    return m_ids_sales_channel_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_ids_sales_channel_Valid() const{
    return m_ids_sales_channel_isValid;
}

qint32 OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getInstallment() const {
    return m_installment;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setInstallment(const qint32 &installment) {
    m_installment = installment;
    m_installment_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_installment_Set() const{
    return m_installment_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_installment_Valid() const{
    return m_installment_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isIsDifferentListPriceAndPrice() const {
    return m_is_different_list_price_and_price;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setIsDifferentListPriceAndPrice(const bool &is_different_list_price_and_price) {
    m_is_different_list_price_and_price = is_different_list_price_and_price;
    m_is_different_list_price_and_price_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_is_different_list_price_and_price_Set() const{
    return m_is_different_list_price_and_price_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_is_different_list_price_and_price_Valid() const{
    return m_is_different_list_price_and_price_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isIsFirstBuy() const {
    return m_is_first_buy;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setIsFirstBuy(const bool &is_first_buy) {
    m_is_first_buy = is_first_buy;
    m_is_first_buy_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_is_first_buy_Set() const{
    return m_is_first_buy_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_is_first_buy_Valid() const{
    return m_is_first_buy_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isIsMinMaxInstallments() const {
    return m_is_min_max_installments;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setIsMinMaxInstallments(const bool &is_min_max_installments) {
    m_is_min_max_installments = is_min_max_installments;
    m_is_min_max_installments_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_is_min_max_installments_Set() const{
    return m_is_min_max_installments_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_is_min_max_installments_Valid() const{
    return m_is_min_max_installments_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isIsSlaSelected() const {
    return m_is_sla_selected;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setIsSlaSelected(const bool &is_sla_selected) {
    m_is_sla_selected = is_sla_selected;
    m_is_sla_selected_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_is_sla_selected_Set() const{
    return m_is_sla_selected_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_is_sla_selected_Valid() const{
    return m_is_sla_selected_isValid;
}

double OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getItemMaxPrice() const {
    return m_item_max_price;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setItemMaxPrice(const double &item_max_price) {
    m_item_max_price = item_max_price;
    m_item_max_price_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_item_max_price_Set() const{
    return m_item_max_price_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_item_max_price_Valid() const{
    return m_item_max_price_isValid;
}

double OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getItemMinPrice() const {
    return m_item_min_price;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setItemMinPrice(const double &item_min_price) {
    m_item_min_price = item_min_price;
    m_item_min_price_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_item_min_price_Set() const{
    return m_item_min_price_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_item_min_price_Valid() const{
    return m_item_min_price_isValid;
}

QList<QJsonValue> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getListBrand1BuyTogether() const {
    return m_list_brand1_buy_together;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setListBrand1BuyTogether(const QList<QJsonValue> &list_brand1_buy_together) {
    m_list_brand1_buy_together = list_brand1_buy_together;
    m_list_brand1_buy_together_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_list_brand1_buy_together_Set() const{
    return m_list_brand1_buy_together_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_list_brand1_buy_together_Valid() const{
    return m_list_brand1_buy_together_isValid;
}

QList<QJsonValue> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getListCategory1BuyTogether() const {
    return m_list_category1_buy_together;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setListCategory1BuyTogether(const QList<QJsonValue> &list_category1_buy_together) {
    m_list_category1_buy_together = list_category1_buy_together;
    m_list_category1_buy_together_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_list_category1_buy_together_Set() const{
    return m_list_category1_buy_together_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_list_category1_buy_together_Valid() const{
    return m_list_category1_buy_together_isValid;
}

QList<QJsonValue> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getListSku1BuyTogether() const {
    return m_list_sku1_buy_together;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setListSku1BuyTogether(const QList<QJsonValue> &list_sku1_buy_together) {
    m_list_sku1_buy_together = list_sku1_buy_together;
    m_list_sku1_buy_together_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_list_sku1_buy_together_Set() const{
    return m_list_sku1_buy_together_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_list_sku1_buy_together_Valid() const{
    return m_list_sku1_buy_together_isValid;
}

QList<QJsonValue> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getListSku2BuyTogether() const {
    return m_list_sku2_buy_together;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setListSku2BuyTogether(const QList<QJsonValue> &list_sku2_buy_together) {
    m_list_sku2_buy_together = list_sku2_buy_together;
    m_list_sku2_buy_together_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_list_sku2_buy_together_Set() const{
    return m_list_sku2_buy_together_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_list_sku2_buy_together_Valid() const{
    return m_list_sku2_buy_together_isValid;
}

QList<QString> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getMarketingTags() const {
    return m_marketing_tags;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setMarketingTags(const QList<QString> &marketing_tags) {
    m_marketing_tags = marketing_tags;
    m_marketing_tags_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_marketing_tags_Set() const{
    return m_marketing_tags_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_marketing_tags_Valid() const{
    return m_marketing_tags_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isMarketingTagsAreNotInclusive() const {
    return m_marketing_tags_are_not_inclusive;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setMarketingTagsAreNotInclusive(const bool &marketing_tags_are_not_inclusive) {
    m_marketing_tags_are_not_inclusive = marketing_tags_are_not_inclusive;
    m_marketing_tags_are_not_inclusive_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_marketing_tags_are_not_inclusive_Set() const{
    return m_marketing_tags_are_not_inclusive_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_marketing_tags_are_not_inclusive_Valid() const{
    return m_marketing_tags_are_not_inclusive_isValid;
}

qint32 OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getMaxInstallment() const {
    return m_max_installment;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setMaxInstallment(const qint32 &max_installment) {
    m_max_installment = max_installment;
    m_max_installment_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_max_installment_Set() const{
    return m_max_installment_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_max_installment_Valid() const{
    return m_max_installment_isValid;
}

qint32 OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getMaxUsage() const {
    return m_max_usage;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setMaxUsage(const qint32 &max_usage) {
    m_max_usage = max_usage;
    m_max_usage_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_max_usage_Set() const{
    return m_max_usage_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_max_usage_Valid() const{
    return m_max_usage_isValid;
}

qint32 OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getMaxUsagePerClient() const {
    return m_max_usage_per_client;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setMaxUsagePerClient(const qint32 &max_usage_per_client) {
    m_max_usage_per_client = max_usage_per_client;
    m_max_usage_per_client_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_max_usage_per_client_Set() const{
    return m_max_usage_per_client_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_max_usage_per_client_Valid() const{
    return m_max_usage_per_client_isValid;
}

QList<QJsonValue> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getMerchants() const {
    return m_merchants;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setMerchants(const QList<QJsonValue> &merchants) {
    m_merchants = merchants;
    m_merchants_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_merchants_Set() const{
    return m_merchants_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_merchants_Valid() const{
    return m_merchants_isValid;
}

qint32 OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getMinInstallment() const {
    return m_min_installment;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setMinInstallment(const qint32 &min_installment) {
    m_min_installment = min_installment;
    m_min_installment_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_min_installment_Set() const{
    return m_min_installment_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_min_installment_Valid() const{
    return m_min_installment_isValid;
}

qint32 OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getMinimumQuantityBuyTogether() const {
    return m_minimum_quantity_buy_together;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setMinimumQuantityBuyTogether(const qint32 &minimum_quantity_buy_together) {
    m_minimum_quantity_buy_together = minimum_quantity_buy_together;
    m_minimum_quantity_buy_together_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_minimum_quantity_buy_together_Set() const{
    return m_minimum_quantity_buy_together_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_minimum_quantity_buy_together_Valid() const{
    return m_minimum_quantity_buy_together_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isMultipleUsePerClient() const {
    return m_multiple_use_per_client;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setMultipleUsePerClient(const bool &multiple_use_per_client) {
    m_multiple_use_per_client = multiple_use_per_client;
    m_multiple_use_per_client_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_multiple_use_per_client_Set() const{
    return m_multiple_use_per_client_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_multiple_use_per_client_Valid() const{
    return m_multiple_use_per_client_isValid;
}

QString OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getName() const {
    return m_name;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getOrigin() const {
    return m_origin;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_origin_Valid() const{
    return m_origin_isValid;
}

QList<OAICreateOrUpdateCalculatorConfiguration_200_response_paymentsMethods_inner> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getPaymentsMethods() const {
    return m_payments_methods;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setPaymentsMethods(const QList<OAICreateOrUpdateCalculatorConfiguration_200_response_paymentsMethods_inner> &payments_methods) {
    m_payments_methods = payments_methods;
    m_payments_methods_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_payments_methods_Set() const{
    return m_payments_methods_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_payments_methods_Valid() const{
    return m_payments_methods_isValid;
}

QList<QJsonValue> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getPaymentsRules() const {
    return m_payments_rules;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setPaymentsRules(const QList<QJsonValue> &payments_rules) {
    m_payments_rules = payments_rules;
    m_payments_rules_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_payments_rules_Set() const{
    return m_payments_rules_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_payments_rules_Valid() const{
    return m_payments_rules_isValid;
}

QList<double> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getPercentualDiscountValueList() const {
    return m_percentual_discount_value_list;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setPercentualDiscountValueList(const QList<double> &percentual_discount_value_list) {
    m_percentual_discount_value_list = percentual_discount_value_list;
    m_percentual_discount_value_list_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_percentual_discount_value_list_Set() const{
    return m_percentual_discount_value_list_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_percentual_discount_value_list_Valid() const{
    return m_percentual_discount_value_list_isValid;
}

QList<OAICreateOrUpdateCalculatorConfiguration_200_response_products_inner> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getProducts() const {
    return m_products;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setProducts(const QList<OAICreateOrUpdateCalculatorConfiguration_200_response_products_inner> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_products_Set() const{
    return m_products_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_products_Valid() const{
    return m_products_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isProductsAreInclusive() const {
    return m_products_are_inclusive;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setProductsAreInclusive(const bool &products_are_inclusive) {
    m_products_are_inclusive = products_are_inclusive;
    m_products_are_inclusive_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_products_are_inclusive_Set() const{
    return m_products_are_inclusive_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_products_are_inclusive_Valid() const{
    return m_products_are_inclusive_isValid;
}

QList<QJsonValue> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getProductsSpecifications() const {
    return m_products_specifications;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setProductsSpecifications(const QList<QJsonValue> &products_specifications) {
    m_products_specifications = products_specifications;
    m_products_specifications_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_products_specifications_Set() const{
    return m_products_specifications_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_products_specifications_Valid() const{
    return m_products_specifications_isValid;
}

qint32 OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getQuantityToAffectBuyTogether() const {
    return m_quantity_to_affect_buy_together;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setQuantityToAffectBuyTogether(const qint32 &quantity_to_affect_buy_together) {
    m_quantity_to_affect_buy_together = quantity_to_affect_buy_together;
    m_quantity_to_affect_buy_together_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_quantity_to_affect_buy_together_Set() const{
    return m_quantity_to_affect_buy_together_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_quantity_to_affect_buy_together_Valid() const{
    return m_quantity_to_affect_buy_together_isValid;
}

QList<QString> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getRestrictionsBins() const {
    return m_restrictions_bins;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setRestrictionsBins(const QList<QString> &restrictions_bins) {
    m_restrictions_bins = restrictions_bins;
    m_restrictions_bins_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_restrictions_bins_Set() const{
    return m_restrictions_bins_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_restrictions_bins_Valid() const{
    return m_restrictions_bins_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isShouldDistributeDiscountAmongMatchedItems() const {
    return m_should_distribute_discount_among_matched_items;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setShouldDistributeDiscountAmongMatchedItems(const bool &should_distribute_discount_among_matched_items) {
    m_should_distribute_discount_among_matched_items = should_distribute_discount_among_matched_items;
    m_should_distribute_discount_among_matched_items_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_should_distribute_discount_among_matched_items_Set() const{
    return m_should_distribute_discount_among_matched_items_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_should_distribute_discount_among_matched_items_Valid() const{
    return m_should_distribute_discount_among_matched_items_isValid;
}

QList<OAICreateOrUpdateCalculatorConfiguration_200_response_skus_inner> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getSkus() const {
    return m_skus;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setSkus(const QList<OAICreateOrUpdateCalculatorConfiguration_200_response_skus_inner> &skus) {
    m_skus = skus;
    m_skus_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_skus_Set() const{
    return m_skus_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_skus_Valid() const{
    return m_skus_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isSkusAreInclusive() const {
    return m_skus_are_inclusive;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setSkusAreInclusive(const bool &skus_are_inclusive) {
    m_skus_are_inclusive = skus_are_inclusive;
    m_skus_are_inclusive_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_skus_are_inclusive_Set() const{
    return m_skus_are_inclusive_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_skus_are_inclusive_Valid() const{
    return m_skus_are_inclusive_isValid;
}

QList<QString> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getSlasIds() const {
    return m_slas_ids;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setSlasIds(const QList<QString> &slas_ids) {
    m_slas_ids = slas_ids;
    m_slas_ids_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_slas_ids_Set() const{
    return m_slas_ids_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_slas_ids_Valid() const{
    return m_slas_ids_isValid;
}

QList<QJsonValue> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getStores() const {
    return m_stores;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setStores(const QList<QJsonValue> &stores) {
    m_stores = stores;
    m_stores_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_stores_Set() const{
    return m_stores_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_stores_Valid() const{
    return m_stores_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isStoresAreInclusive() const {
    return m_stores_are_inclusive;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setStoresAreInclusive(const bool &stores_are_inclusive) {
    m_stores_are_inclusive = stores_are_inclusive;
    m_stores_are_inclusive_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_stores_are_inclusive_Set() const{
    return m_stores_are_inclusive_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_stores_are_inclusive_Valid() const{
    return m_stores_are_inclusive_isValid;
}

double OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getTotalValueCeling() const {
    return m_total_value_celing;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setTotalValueCeling(const double &total_value_celing) {
    m_total_value_celing = total_value_celing;
    m_total_value_celing_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_total_value_celing_Set() const{
    return m_total_value_celing_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_total_value_celing_Valid() const{
    return m_total_value_celing_isValid;
}

double OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getTotalValueFloor() const {
    return m_total_value_floor;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setTotalValueFloor(const double &total_value_floor) {
    m_total_value_floor = total_value_floor;
    m_total_value_floor_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_total_value_floor_Set() const{
    return m_total_value_floor_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_total_value_floor_Valid() const{
    return m_total_value_floor_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isTotalValueIncludeAllItems() const {
    return m_total_value_include_all_items;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setTotalValueIncludeAllItems(const bool &total_value_include_all_items) {
    m_total_value_include_all_items = total_value_include_all_items;
    m_total_value_include_all_items_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_total_value_include_all_items_Set() const{
    return m_total_value_include_all_items_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_total_value_include_all_items_Valid() const{
    return m_total_value_include_all_items_isValid;
}

QString OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getTotalValueMode() const {
    return m_total_value_mode;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setTotalValueMode(const QString &total_value_mode) {
    m_total_value_mode = total_value_mode;
    m_total_value_mode_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_total_value_mode_Set() const{
    return m_total_value_mode_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_total_value_mode_Valid() const{
    return m_total_value_mode_isValid;
}

double OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getTotalValuePurchase() const {
    return m_total_value_purchase;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setTotalValuePurchase(const double &total_value_purchase) {
    m_total_value_purchase = total_value_purchase;
    m_total_value_purchase_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_total_value_purchase_Set() const{
    return m_total_value_purchase_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_total_value_purchase_Valid() const{
    return m_total_value_purchase_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isUseNewProgressiveAlgorithm() const {
    return m_use_new_progressive_algorithm;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setUseNewProgressiveAlgorithm(const bool &use_new_progressive_algorithm) {
    m_use_new_progressive_algorithm = use_new_progressive_algorithm;
    m_use_new_progressive_algorithm_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_use_new_progressive_algorithm_Set() const{
    return m_use_new_progressive_algorithm_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_use_new_progressive_algorithm_Valid() const{
    return m_use_new_progressive_algorithm_isValid;
}

QList<OAIGetcampaignaudiences_200_response_inner_targetConfigurations_inner_zipCodeRanges_inner> OAISetcampaignconfiguration_200_response_targetConfigurations_inner::getZipCodeRanges() const {
    return m_zip_code_ranges;
}
void OAISetcampaignconfiguration_200_response_targetConfigurations_inner::setZipCodeRanges(const QList<OAIGetcampaignaudiences_200_response_inner_targetConfigurations_inner_zipCodeRanges_inner> &zip_code_ranges) {
    m_zip_code_ranges = zip_code_ranges;
    m_zip_code_ranges_isSet = true;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_zip_code_ranges_Set() const{
    return m_zip_code_ranges_isSet;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::is_zip_code_ranges_Valid() const{
    return m_zip_code_ranges_isValid;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affiliates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_are_sales_channel_ids_exclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brands_are_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaigns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_issuers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_are_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_expressions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_collections1_buy_together.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_collections2_buy_together.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_collections_is_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compare_list_price_and_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coupon.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_ago_of_purchases_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_buy_together_per_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_buy_is_profile_optimistic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_list_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_seller_is_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ids_sales_channel.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_different_list_price_and_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_first_buy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_min_max_installments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sla_selected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_max_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_min_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_brand1_buy_together.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_category1_buy_together.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_sku1_buy_together.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_sku2_buy_together.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing_tags_are_not_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_installment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_usage_per_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_installment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_quantity_buy_together_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_use_per_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payments_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payments_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentual_discount_value_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_products_are_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products_specifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_to_affect_buy_together_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions_bins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_should_distribute_discount_among_matched_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skus.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skus_are_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slas_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stores_are_inclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_value_celing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_value_floor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_value_include_all_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_value_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_value_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_new_progressive_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetcampaignconfiguration_200_response_targetConfigurations_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
