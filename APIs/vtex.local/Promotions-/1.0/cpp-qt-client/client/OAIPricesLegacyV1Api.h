/**
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPricesLegacyV1Api_H
#define OAI_OAIPricesLegacyV1Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPricebycontextRequest.h"
#include "OAISavepriceRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPricesLegacyV1Api : public QObject {
    Q_OBJECT

public:
    OAIPricesLegacyV1Api(const int timeOut = 0);
    ~OAIPricesLegacyV1Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  an QString [required]
    * @param[in]  sku_id QString [required]
    */
    virtual void deletebyskuId(const QString &content_type, const QString &accept, const QString &an, const QString &sku_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  an QString [required]
    * @param[in]  page QString [required]
    * @param[in]  page_size QString [required]
    */
    virtual void getallpaged(const QString &content_type, const QString &accept, const QString &an, const QString &page, const QString &page_size);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  an QString [required]
    * @param[in]  oai_pricebycontext_request OAIPricebycontextRequest [required]
    */
    virtual void pricebycontext(const QString &content_type, const QString &accept, const QString &an, const OAIPricebycontextRequest &oai_pricebycontext_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  an QString [required]
    * @param[in]  sku_id QString [required]
    */
    virtual void pricebyskuId(const QString &content_type, const QString &accept, const QString &an, const QString &sku_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  an QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  sku_id QString [required]
    * @param[in]  trade_policy QString [required]
    */
    virtual void pricebyskuIdandtradePolicy(const QString &accept, const QString &an, const QString &content_type, const QString &sku_id, const QString &trade_policy);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  an QString [required]
    * @param[in]  oai_saveprice_request QList<OAISavepriceRequest> [required]
    */
    virtual void saveprice(const QString &content_type, const QString &accept, const QString &an, const QList<OAISavepriceRequest> &oai_saveprice_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletebyskuIdCallback(OAIHttpRequestWorker *worker);
    void getallpagedCallback(OAIHttpRequestWorker *worker);
    void pricebycontextCallback(OAIHttpRequestWorker *worker);
    void pricebyskuIdCallback(OAIHttpRequestWorker *worker);
    void pricebyskuIdandtradePolicyCallback(OAIHttpRequestWorker *worker);
    void savepriceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletebyskuIdSignal();
    void getallpagedSignal();
    void pricebycontextSignal();
    void pricebyskuIdSignal();
    void pricebyskuIdandtradePolicySignal();
    void savepriceSignal();


    void deletebyskuIdSignalFull(OAIHttpRequestWorker *worker);
    void getallpagedSignalFull(OAIHttpRequestWorker *worker);
    void pricebycontextSignalFull(OAIHttpRequestWorker *worker);
    void pricebyskuIdSignalFull(OAIHttpRequestWorker *worker);
    void pricebyskuIdandtradePolicySignalFull(OAIHttpRequestWorker *worker);
    void savepriceSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deletebyskuIdSignalError() instead")
    void deletebyskuIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletebyskuIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getallpagedSignalError() instead")
    void getallpagedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getallpagedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricebycontextSignalError() instead")
    void pricebycontextSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pricebycontextSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricebyskuIdSignalError() instead")
    void pricebyskuIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pricebyskuIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricebyskuIdandtradePolicySignalError() instead")
    void pricebyskuIdandtradePolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pricebyskuIdandtradePolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savepriceSignalError() instead")
    void savepriceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void savepriceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletebyskuIdSignalErrorFull() instead")
    void deletebyskuIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletebyskuIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getallpagedSignalErrorFull() instead")
    void getallpagedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getallpagedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricebycontextSignalErrorFull() instead")
    void pricebycontextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricebycontextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricebyskuIdSignalErrorFull() instead")
    void pricebyskuIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricebyskuIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pricebyskuIdandtradePolicySignalErrorFull() instead")
    void pricebyskuIdandtradePolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pricebyskuIdandtradePolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use savepriceSignalErrorFull() instead")
    void savepriceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void savepriceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
