# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CouponConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coupon_code: str=None, expiration_interval_per_use: str=None, is_archived: bool=None, max_items_per_client: int=None, utm_campaign: str=None, utm_source: str=None):
        """CouponConfiguration - a model defined in OpenAPI

        :param coupon_code: The coupon_code of this CouponConfiguration.
        :param expiration_interval_per_use: The expiration_interval_per_use of this CouponConfiguration.
        :param is_archived: The is_archived of this CouponConfiguration.
        :param max_items_per_client: The max_items_per_client of this CouponConfiguration.
        :param utm_campaign: The utm_campaign of this CouponConfiguration.
        :param utm_source: The utm_source of this CouponConfiguration.
        """
        self.openapi_types = {
            'coupon_code': str,
            'expiration_interval_per_use': str,
            'is_archived': bool,
            'max_items_per_client': int,
            'utm_campaign': str,
            'utm_source': str
        }

        self.attribute_map = {
            'coupon_code': 'couponCode',
            'expiration_interval_per_use': 'expirationIntervalPerUse',
            'is_archived': 'isArchived',
            'max_items_per_client': 'maxItemsPerClient',
            'utm_campaign': 'utmCampaign',
            'utm_source': 'utmSource'
        }

        self._coupon_code = coupon_code
        self._expiration_interval_per_use = expiration_interval_per_use
        self._is_archived = is_archived
        self._max_items_per_client = max_items_per_client
        self._utm_campaign = utm_campaign
        self._utm_source = utm_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CouponConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The couponConfiguration of this CouponConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coupon_code(self):
        """Gets the coupon_code of this CouponConfiguration.

        Coupon code.

        :return: The coupon_code of this CouponConfiguration.
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """Sets the coupon_code of this CouponConfiguration.

        Coupon code.

        :param coupon_code: The coupon_code of this CouponConfiguration.
        :type coupon_code: str
        """
        if coupon_code is None:
            raise ValueError("Invalid value for `coupon_code`, must not be `None`")

        self._coupon_code = coupon_code

    @property
    def expiration_interval_per_use(self):
        """Gets the expiration_interval_per_use of this CouponConfiguration.

        Coupon expiration interval per use.

        :return: The expiration_interval_per_use of this CouponConfiguration.
        :rtype: str
        """
        return self._expiration_interval_per_use

    @expiration_interval_per_use.setter
    def expiration_interval_per_use(self, expiration_interval_per_use):
        """Sets the expiration_interval_per_use of this CouponConfiguration.

        Coupon expiration interval per use.

        :param expiration_interval_per_use: The expiration_interval_per_use of this CouponConfiguration.
        :type expiration_interval_per_use: str
        """
        if expiration_interval_per_use is None:
            raise ValueError("Invalid value for `expiration_interval_per_use`, must not be `None`")

        self._expiration_interval_per_use = expiration_interval_per_use

    @property
    def is_archived(self):
        """Gets the is_archived of this CouponConfiguration.

        Defines if the coupon is archived (`true`) or not (`false`).

        :return: The is_archived of this CouponConfiguration.
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this CouponConfiguration.

        Defines if the coupon is archived (`true`) or not (`false`).

        :param is_archived: The is_archived of this CouponConfiguration.
        :type is_archived: bool
        """

        self._is_archived = is_archived

    @property
    def max_items_per_client(self):
        """Gets the max_items_per_client of this CouponConfiguration.

        Maximum items per client that the coupon can be applied.

        :return: The max_items_per_client of this CouponConfiguration.
        :rtype: int
        """
        return self._max_items_per_client

    @max_items_per_client.setter
    def max_items_per_client(self, max_items_per_client):
        """Sets the max_items_per_client of this CouponConfiguration.

        Maximum items per client that the coupon can be applied.

        :param max_items_per_client: The max_items_per_client of this CouponConfiguration.
        :type max_items_per_client: int
        """
        if max_items_per_client is None:
            raise ValueError("Invalid value for `max_items_per_client`, must not be `None`")

        self._max_items_per_client = max_items_per_client

    @property
    def utm_campaign(self):
        """Gets the utm_campaign of this CouponConfiguration.

        utmCampaign code.

        :return: The utm_campaign of this CouponConfiguration.
        :rtype: str
        """
        return self._utm_campaign

    @utm_campaign.setter
    def utm_campaign(self, utm_campaign):
        """Sets the utm_campaign of this CouponConfiguration.

        utmCampaign code.

        :param utm_campaign: The utm_campaign of this CouponConfiguration.
        :type utm_campaign: str
        """
        if utm_campaign is None:
            raise ValueError("Invalid value for `utm_campaign`, must not be `None`")

        self._utm_campaign = utm_campaign

    @property
    def utm_source(self):
        """Gets the utm_source of this CouponConfiguration.

        utmSource code.

        :return: The utm_source of this CouponConfiguration.
        :rtype: str
        """
        return self._utm_source

    @utm_source.setter
    def utm_source(self, utm_source):
        """Sets the utm_source of this CouponConfiguration.

        utmSource code.

        :param utm_source: The utm_source of this CouponConfiguration.
        :type utm_source: str
        """
        if utm_source is None:
            raise ValueError("Invalid value for `utm_source`, must not be `None`")

        self._utm_source = utm_source
