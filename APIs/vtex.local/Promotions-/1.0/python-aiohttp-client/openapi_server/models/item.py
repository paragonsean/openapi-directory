# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.param import Param
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, index: int=None, is_gift: bool=None, logistics_infos: List[str]=None, measurement_unit: str=None, params: List[Param]=None, price_sheet: List[str]=None, price_tags: List[str]=None, product_specifications: List[str]=None, quantity: int=None, seller_id: str=None, unit_multiplier: int=None):
        """Item - a model defined in OpenAPI

        :param id: The id of this Item.
        :param index: The index of this Item.
        :param is_gift: The is_gift of this Item.
        :param logistics_infos: The logistics_infos of this Item.
        :param measurement_unit: The measurement_unit of this Item.
        :param params: The params of this Item.
        :param price_sheet: The price_sheet of this Item.
        :param price_tags: The price_tags of this Item.
        :param product_specifications: The product_specifications of this Item.
        :param quantity: The quantity of this Item.
        :param seller_id: The seller_id of this Item.
        :param unit_multiplier: The unit_multiplier of this Item.
        """
        self.openapi_types = {
            'id': str,
            'index': int,
            'is_gift': bool,
            'logistics_infos': List[str],
            'measurement_unit': str,
            'params': List[Param],
            'price_sheet': List[str],
            'price_tags': List[str],
            'product_specifications': List[str],
            'quantity': int,
            'seller_id': str,
            'unit_multiplier': int
        }

        self.attribute_map = {
            'id': 'id',
            'index': 'index',
            'is_gift': 'isGift',
            'logistics_infos': 'logisticsInfos',
            'measurement_unit': 'measurementUnit',
            'params': 'params',
            'price_sheet': 'priceSheet',
            'price_tags': 'priceTags',
            'product_specifications': 'productSpecifications',
            'quantity': 'quantity',
            'seller_id': 'sellerId',
            'unit_multiplier': 'unitMultiplier'
        }

        self._id = id
        self._index = index
        self._is_gift = is_gift
        self._logistics_infos = logistics_infos
        self._measurement_unit = measurement_unit
        self._params = params
        self._price_sheet = price_sheet
        self._price_tags = price_tags
        self._product_specifications = product_specifications
        self._quantity = quantity
        self._seller_id = seller_id
        self._unit_multiplier = unit_multiplier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item of this Item.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Item.


        :return: The id of this Item.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Item.


        :param id: The id of this Item.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def index(self):
        """Gets the index of this Item.


        :return: The index of this Item.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Item.


        :param index: The index of this Item.
        :type index: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")

        self._index = index

    @property
    def is_gift(self):
        """Gets the is_gift of this Item.


        :return: The is_gift of this Item.
        :rtype: bool
        """
        return self._is_gift

    @is_gift.setter
    def is_gift(self, is_gift):
        """Sets the is_gift of this Item.


        :param is_gift: The is_gift of this Item.
        :type is_gift: bool
        """
        if is_gift is None:
            raise ValueError("Invalid value for `is_gift`, must not be `None`")

        self._is_gift = is_gift

    @property
    def logistics_infos(self):
        """Gets the logistics_infos of this Item.

        

        :return: The logistics_infos of this Item.
        :rtype: List[str]
        """
        return self._logistics_infos

    @logistics_infos.setter
    def logistics_infos(self, logistics_infos):
        """Sets the logistics_infos of this Item.

        

        :param logistics_infos: The logistics_infos of this Item.
        :type logistics_infos: List[str]
        """
        if logistics_infos is None:
            raise ValueError("Invalid value for `logistics_infos`, must not be `None`")

        self._logistics_infos = logistics_infos

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this Item.


        :return: The measurement_unit of this Item.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this Item.


        :param measurement_unit: The measurement_unit of this Item.
        :type measurement_unit: str
        """
        if measurement_unit is None:
            raise ValueError("Invalid value for `measurement_unit`, must not be `None`")

        self._measurement_unit = measurement_unit

    @property
    def params(self):
        """Gets the params of this Item.

        

        :return: The params of this Item.
        :rtype: List[Param]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Item.

        

        :param params: The params of this Item.
        :type params: List[Param]
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")

        self._params = params

    @property
    def price_sheet(self):
        """Gets the price_sheet of this Item.

        

        :return: The price_sheet of this Item.
        :rtype: List[str]
        """
        return self._price_sheet

    @price_sheet.setter
    def price_sheet(self, price_sheet):
        """Sets the price_sheet of this Item.

        

        :param price_sheet: The price_sheet of this Item.
        :type price_sheet: List[str]
        """
        if price_sheet is None:
            raise ValueError("Invalid value for `price_sheet`, must not be `None`")

        self._price_sheet = price_sheet

    @property
    def price_tags(self):
        """Gets the price_tags of this Item.

        

        :return: The price_tags of this Item.
        :rtype: List[str]
        """
        return self._price_tags

    @price_tags.setter
    def price_tags(self, price_tags):
        """Sets the price_tags of this Item.

        

        :param price_tags: The price_tags of this Item.
        :type price_tags: List[str]
        """
        if price_tags is None:
            raise ValueError("Invalid value for `price_tags`, must not be `None`")

        self._price_tags = price_tags

    @property
    def product_specifications(self):
        """Gets the product_specifications of this Item.

        

        :return: The product_specifications of this Item.
        :rtype: List[str]
        """
        return self._product_specifications

    @product_specifications.setter
    def product_specifications(self, product_specifications):
        """Sets the product_specifications of this Item.

        

        :param product_specifications: The product_specifications of this Item.
        :type product_specifications: List[str]
        """
        if product_specifications is None:
            raise ValueError("Invalid value for `product_specifications`, must not be `None`")

        self._product_specifications = product_specifications

    @property
    def quantity(self):
        """Gets the quantity of this Item.


        :return: The quantity of this Item.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Item.


        :param quantity: The quantity of this Item.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def seller_id(self):
        """Gets the seller_id of this Item.


        :return: The seller_id of this Item.
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this Item.


        :param seller_id: The seller_id of this Item.
        :type seller_id: str
        """
        if seller_id is None:
            raise ValueError("Invalid value for `seller_id`, must not be `None`")

        self._seller_id = seller_id

    @property
    def unit_multiplier(self):
        """Gets the unit_multiplier of this Item.


        :return: The unit_multiplier of this Item.
        :rtype: int
        """
        return self._unit_multiplier

    @unit_multiplier.setter
    def unit_multiplier(self, unit_multiplier):
        """Sets the unit_multiplier of this Item.


        :param unit_multiplier: The unit_multiplier of this Item.
        :type unit_multiplier: int
        """
        if unit_multiplier is None:
            raise ValueError("Invalid value for `unit_multiplier`, must not be `None`")

        self._unit_multiplier = unit_multiplier
