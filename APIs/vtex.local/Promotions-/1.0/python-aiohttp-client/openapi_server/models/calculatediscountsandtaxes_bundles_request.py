# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item import Item
from openapi_server.models.param import Param
from openapi_server import util


class CalculatediscountsandtaxesBundlesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_shopping_cart: bool=None, items: List[Item]=None, origin: str=None, params: List[Param]=None, profile_id: str=None, sales_channel: str=None):
        """CalculatediscountsandtaxesBundlesRequest - a model defined in OpenAPI

        :param is_shopping_cart: The is_shopping_cart of this CalculatediscountsandtaxesBundlesRequest.
        :param items: The items of this CalculatediscountsandtaxesBundlesRequest.
        :param origin: The origin of this CalculatediscountsandtaxesBundlesRequest.
        :param params: The params of this CalculatediscountsandtaxesBundlesRequest.
        :param profile_id: The profile_id of this CalculatediscountsandtaxesBundlesRequest.
        :param sales_channel: The sales_channel of this CalculatediscountsandtaxesBundlesRequest.
        """
        self.openapi_types = {
            'is_shopping_cart': bool,
            'items': List[Item],
            'origin': str,
            'params': List[Param],
            'profile_id': str,
            'sales_channel': str
        }

        self.attribute_map = {
            'is_shopping_cart': 'isShoppingCart',
            'items': 'items',
            'origin': 'origin',
            'params': 'params',
            'profile_id': 'profileId',
            'sales_channel': 'salesChannel'
        }

        self._is_shopping_cart = is_shopping_cart
        self._items = items
        self._origin = origin
        self._params = params
        self._profile_id = profile_id
        self._sales_channel = sales_channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculatediscountsandtaxesBundlesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Calculatediscountsandtaxes_Bundles_Request of this CalculatediscountsandtaxesBundlesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_shopping_cart(self):
        """Gets the is_shopping_cart of this CalculatediscountsandtaxesBundlesRequest.


        :return: The is_shopping_cart of this CalculatediscountsandtaxesBundlesRequest.
        :rtype: bool
        """
        return self._is_shopping_cart

    @is_shopping_cart.setter
    def is_shopping_cart(self, is_shopping_cart):
        """Sets the is_shopping_cart of this CalculatediscountsandtaxesBundlesRequest.


        :param is_shopping_cart: The is_shopping_cart of this CalculatediscountsandtaxesBundlesRequest.
        :type is_shopping_cart: bool
        """
        if is_shopping_cart is None:
            raise ValueError("Invalid value for `is_shopping_cart`, must not be `None`")

        self._is_shopping_cart = is_shopping_cart

    @property
    def items(self):
        """Gets the items of this CalculatediscountsandtaxesBundlesRequest.

        

        :return: The items of this CalculatediscountsandtaxesBundlesRequest.
        :rtype: List[Item]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CalculatediscountsandtaxesBundlesRequest.

        

        :param items: The items of this CalculatediscountsandtaxesBundlesRequest.
        :type items: List[Item]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def origin(self):
        """Gets the origin of this CalculatediscountsandtaxesBundlesRequest.


        :return: The origin of this CalculatediscountsandtaxesBundlesRequest.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this CalculatediscountsandtaxesBundlesRequest.


        :param origin: The origin of this CalculatediscountsandtaxesBundlesRequest.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")

        self._origin = origin

    @property
    def params(self):
        """Gets the params of this CalculatediscountsandtaxesBundlesRequest.

        

        :return: The params of this CalculatediscountsandtaxesBundlesRequest.
        :rtype: List[Param]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this CalculatediscountsandtaxesBundlesRequest.

        

        :param params: The params of this CalculatediscountsandtaxesBundlesRequest.
        :type params: List[Param]
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")

        self._params = params

    @property
    def profile_id(self):
        """Gets the profile_id of this CalculatediscountsandtaxesBundlesRequest.


        :return: The profile_id of this CalculatediscountsandtaxesBundlesRequest.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this CalculatediscountsandtaxesBundlesRequest.


        :param profile_id: The profile_id of this CalculatediscountsandtaxesBundlesRequest.
        :type profile_id: str
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")

        self._profile_id = profile_id

    @property
    def sales_channel(self):
        """Gets the sales_channel of this CalculatediscountsandtaxesBundlesRequest.


        :return: The sales_channel of this CalculatediscountsandtaxesBundlesRequest.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this CalculatediscountsandtaxesBundlesRequest.


        :param sales_channel: The sales_channel of this CalculatediscountsandtaxesBundlesRequest.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel
