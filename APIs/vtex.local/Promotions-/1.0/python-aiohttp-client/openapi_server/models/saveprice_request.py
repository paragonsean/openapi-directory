# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SavepriceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_id: int=None, list_price: int=None, price: int=None, sales_channel: int=None, seller_id: int=None, valid_from: str=None, valid_to: str=None):
        """SavepriceRequest - a model defined in OpenAPI

        :param item_id: The item_id of this SavepriceRequest.
        :param list_price: The list_price of this SavepriceRequest.
        :param price: The price of this SavepriceRequest.
        :param sales_channel: The sales_channel of this SavepriceRequest.
        :param seller_id: The seller_id of this SavepriceRequest.
        :param valid_from: The valid_from of this SavepriceRequest.
        :param valid_to: The valid_to of this SavepriceRequest.
        """
        self.openapi_types = {
            'item_id': int,
            'list_price': int,
            'price': int,
            'sales_channel': int,
            'seller_id': int,
            'valid_from': str,
            'valid_to': str
        }

        self.attribute_map = {
            'item_id': 'itemId',
            'list_price': 'listPrice',
            'price': 'price',
            'sales_channel': 'salesChannel',
            'seller_id': 'sellerId',
            'valid_from': 'validFrom',
            'valid_to': 'validTo'
        }

        self._item_id = item_id
        self._list_price = list_price
        self._price = price
        self._sales_channel = sales_channel
        self._seller_id = seller_id
        self._valid_from = valid_from
        self._valid_to = valid_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SavepriceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SavepriceRequest of this SavepriceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_id(self):
        """Gets the item_id of this SavepriceRequest.


        :return: The item_id of this SavepriceRequest.
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this SavepriceRequest.


        :param item_id: The item_id of this SavepriceRequest.
        :type item_id: int
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id

    @property
    def list_price(self):
        """Gets the list_price of this SavepriceRequest.


        :return: The list_price of this SavepriceRequest.
        :rtype: int
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this SavepriceRequest.


        :param list_price: The list_price of this SavepriceRequest.
        :type list_price: int
        """
        if list_price is None:
            raise ValueError("Invalid value for `list_price`, must not be `None`")

        self._list_price = list_price

    @property
    def price(self):
        """Gets the price of this SavepriceRequest.


        :return: The price of this SavepriceRequest.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this SavepriceRequest.


        :param price: The price of this SavepriceRequest.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def sales_channel(self):
        """Gets the sales_channel of this SavepriceRequest.


        :return: The sales_channel of this SavepriceRequest.
        :rtype: int
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this SavepriceRequest.


        :param sales_channel: The sales_channel of this SavepriceRequest.
        :type sales_channel: int
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel

    @property
    def seller_id(self):
        """Gets the seller_id of this SavepriceRequest.


        :return: The seller_id of this SavepriceRequest.
        :rtype: int
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this SavepriceRequest.


        :param seller_id: The seller_id of this SavepriceRequest.
        :type seller_id: int
        """
        if seller_id is None:
            raise ValueError("Invalid value for `seller_id`, must not be `None`")

        self._seller_id = seller_id

    @property
    def valid_from(self):
        """Gets the valid_from of this SavepriceRequest.


        :return: The valid_from of this SavepriceRequest.
        :rtype: str
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this SavepriceRequest.


        :param valid_from: The valid_from of this SavepriceRequest.
        :type valid_from: str
        """
        if valid_from is None:
            raise ValueError("Invalid value for `valid_from`, must not be `None`")

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this SavepriceRequest.


        :return: The valid_to of this SavepriceRequest.
        :rtype: str
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this SavepriceRequest.


        :param valid_to: The valid_to of this SavepriceRequest.
        :type valid_to: str
        """
        if valid_to is None:
            raise ValueError("Invalid value for `valid_to`, must not be `None`")

        self._valid_to = valid_to
