# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ZipCodeRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inclusive: bool=None):
        """ZipCodeRange - a model defined in OpenAPI

        :param inclusive: The inclusive of this ZipCodeRange.
        """
        self.openapi_types = {
            'inclusive': bool
        }

        self.attribute_map = {
            'inclusive': 'inclusive'
        }

        self._inclusive = inclusive

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZipCodeRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ZipCodeRange of this ZipCodeRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inclusive(self):
        """Gets the inclusive of this ZipCodeRange.


        :return: The inclusive of this ZipCodeRange.
        :rtype: bool
        """
        return self._inclusive

    @inclusive.setter
    def inclusive(self, inclusive):
        """Sets the inclusive of this ZipCodeRange.


        :param inclusive: The inclusive of this ZipCodeRange.
        :type inclusive: bool
        """
        if inclusive is None:
            raise ValueError("Invalid value for `inclusive`, must not be `None`")

        self._inclusive = inclusive
