# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetPromotionsInnerScope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_catalog: bool=None, brands: float=None, brands_are_inclusive: bool=None, categories: float=None, categories_are_inclusive: bool=None, collections: float=None, collections_are_inclusive: bool=None, products: float=None, products_are_inclusive: bool=None, sellers: float=None, sellers_are_inclusive: bool=None, skus: float=None, skus_are_inclusive: bool=None):
        """GetPromotionsInnerScope - a model defined in OpenAPI

        :param all_catalog: The all_catalog of this GetPromotionsInnerScope.
        :param brands: The brands of this GetPromotionsInnerScope.
        :param brands_are_inclusive: The brands_are_inclusive of this GetPromotionsInnerScope.
        :param categories: The categories of this GetPromotionsInnerScope.
        :param categories_are_inclusive: The categories_are_inclusive of this GetPromotionsInnerScope.
        :param collections: The collections of this GetPromotionsInnerScope.
        :param collections_are_inclusive: The collections_are_inclusive of this GetPromotionsInnerScope.
        :param products: The products of this GetPromotionsInnerScope.
        :param products_are_inclusive: The products_are_inclusive of this GetPromotionsInnerScope.
        :param sellers: The sellers of this GetPromotionsInnerScope.
        :param sellers_are_inclusive: The sellers_are_inclusive of this GetPromotionsInnerScope.
        :param skus: The skus of this GetPromotionsInnerScope.
        :param skus_are_inclusive: The skus_are_inclusive of this GetPromotionsInnerScope.
        """
        self.openapi_types = {
            'all_catalog': bool,
            'brands': float,
            'brands_are_inclusive': bool,
            'categories': float,
            'categories_are_inclusive': bool,
            'collections': float,
            'collections_are_inclusive': bool,
            'products': float,
            'products_are_inclusive': bool,
            'sellers': float,
            'sellers_are_inclusive': bool,
            'skus': float,
            'skus_are_inclusive': bool
        }

        self.attribute_map = {
            'all_catalog': 'allCatalog',
            'brands': 'brands',
            'brands_are_inclusive': 'brandsAreInclusive',
            'categories': 'categories',
            'categories_are_inclusive': 'categoriesAreInclusive',
            'collections': 'collections',
            'collections_are_inclusive': 'collectionsAreInclusive',
            'products': 'products',
            'products_are_inclusive': 'productsAreInclusive',
            'sellers': 'sellers',
            'sellers_are_inclusive': 'sellersAreInclusive',
            'skus': 'skus',
            'skus_are_inclusive': 'skusAreInclusive'
        }

        self._all_catalog = all_catalog
        self._brands = brands
        self._brands_are_inclusive = brands_are_inclusive
        self._categories = categories
        self._categories_are_inclusive = categories_are_inclusive
        self._collections = collections
        self._collections_are_inclusive = collections_are_inclusive
        self._products = products
        self._products_are_inclusive = products_are_inclusive
        self._sellers = sellers
        self._sellers_are_inclusive = sellers_are_inclusive
        self._skus = skus
        self._skus_are_inclusive = skus_are_inclusive

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPromotionsInnerScope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetPromotions_inner_scope of this GetPromotionsInnerScope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_catalog(self):
        """Gets the all_catalog of this GetPromotionsInnerScope.

        Determines if the promotion applies to all products in the Catalog (`true`) or not (`false`).

        :return: The all_catalog of this GetPromotionsInnerScope.
        :rtype: bool
        """
        return self._all_catalog

    @all_catalog.setter
    def all_catalog(self, all_catalog):
        """Sets the all_catalog of this GetPromotionsInnerScope.

        Determines if the promotion applies to all products in the Catalog (`true`) or not (`false`).

        :param all_catalog: The all_catalog of this GetPromotionsInnerScope.
        :type all_catalog: bool
        """

        self._all_catalog = all_catalog

    @property
    def brands(self):
        """Gets the brands of this GetPromotionsInnerScope.

        Quantity of brands which activate or deactivate the promotion.

        :return: The brands of this GetPromotionsInnerScope.
        :rtype: float
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this GetPromotionsInnerScope.

        Quantity of brands which activate or deactivate the promotion.

        :param brands: The brands of this GetPromotionsInnerScope.
        :type brands: float
        """

        self._brands = brands

    @property
    def brands_are_inclusive(self):
        """Gets the brands_are_inclusive of this GetPromotionsInnerScope.

        If set to `true`, this promotion will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this promotion not to be applied.

        :return: The brands_are_inclusive of this GetPromotionsInnerScope.
        :rtype: bool
        """
        return self._brands_are_inclusive

    @brands_are_inclusive.setter
    def brands_are_inclusive(self, brands_are_inclusive):
        """Sets the brands_are_inclusive of this GetPromotionsInnerScope.

        If set to `true`, this promotion will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this promotion not to be applied.

        :param brands_are_inclusive: The brands_are_inclusive of this GetPromotionsInnerScope.
        :type brands_are_inclusive: bool
        """

        self._brands_are_inclusive = brands_are_inclusive

    @property
    def categories(self):
        """Gets the categories of this GetPromotionsInnerScope.

        Quantity of categories which activate or deactivate the promotion.

        :return: The categories of this GetPromotionsInnerScope.
        :rtype: float
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this GetPromotionsInnerScope.

        Quantity of categories which activate or deactivate the promotion.

        :param categories: The categories of this GetPromotionsInnerScope.
        :type categories: float
        """

        self._categories = categories

    @property
    def categories_are_inclusive(self):
        """Gets the categories_are_inclusive of this GetPromotionsInnerScope.

        If set to `true`, this promotion will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this promotion not to be applied.

        :return: The categories_are_inclusive of this GetPromotionsInnerScope.
        :rtype: bool
        """
        return self._categories_are_inclusive

    @categories_are_inclusive.setter
    def categories_are_inclusive(self, categories_are_inclusive):
        """Sets the categories_are_inclusive of this GetPromotionsInnerScope.

        If set to `true`, this promotion will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this promotion not to be applied.

        :param categories_are_inclusive: The categories_are_inclusive of this GetPromotionsInnerScope.
        :type categories_are_inclusive: bool
        """

        self._categories_are_inclusive = categories_are_inclusive

    @property
    def collections(self):
        """Gets the collections of this GetPromotionsInnerScope.

        Quantity of collections which activate or deactivate the promotion.

        :return: The collections of this GetPromotionsInnerScope.
        :rtype: float
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this GetPromotionsInnerScope.

        Quantity of collections which activate or deactivate the promotion.

        :param collections: The collections of this GetPromotionsInnerScope.
        :type collections: float
        """

        self._collections = collections

    @property
    def collections_are_inclusive(self):
        """Gets the collections_are_inclusive of this GetPromotionsInnerScope.

        If set to `true`, this promotion will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this promotion not to be applied.

        :return: The collections_are_inclusive of this GetPromotionsInnerScope.
        :rtype: bool
        """
        return self._collections_are_inclusive

    @collections_are_inclusive.setter
    def collections_are_inclusive(self, collections_are_inclusive):
        """Sets the collections_are_inclusive of this GetPromotionsInnerScope.

        If set to `true`, this promotion will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this promotion not to be applied.

        :param collections_are_inclusive: The collections_are_inclusive of this GetPromotionsInnerScope.
        :type collections_are_inclusive: bool
        """

        self._collections_are_inclusive = collections_are_inclusive

    @property
    def products(self):
        """Gets the products of this GetPromotionsInnerScope.

        Quantity of products which activate or deactivate the promotion.

        :return: The products of this GetPromotionsInnerScope.
        :rtype: float
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this GetPromotionsInnerScope.

        Quantity of products which activate or deactivate the promotion.

        :param products: The products of this GetPromotionsInnerScope.
        :type products: float
        """

        self._products = products

    @property
    def products_are_inclusive(self):
        """Gets the products_are_inclusive of this GetPromotionsInnerScope.

        If set to `true`, this promotion will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this promotion not to be applied.

        :return: The products_are_inclusive of this GetPromotionsInnerScope.
        :rtype: bool
        """
        return self._products_are_inclusive

    @products_are_inclusive.setter
    def products_are_inclusive(self, products_are_inclusive):
        """Sets the products_are_inclusive of this GetPromotionsInnerScope.

        If set to `true`, this promotion will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this promotion not to be applied.

        :param products_are_inclusive: The products_are_inclusive of this GetPromotionsInnerScope.
        :type products_are_inclusive: bool
        """

        self._products_are_inclusive = products_are_inclusive

    @property
    def sellers(self):
        """Gets the sellers of this GetPromotionsInnerScope.

        Quantity of sellers which activate or deactivate the promotion.

        :return: The sellers of this GetPromotionsInnerScope.
        :rtype: float
        """
        return self._sellers

    @sellers.setter
    def sellers(self, sellers):
        """Sets the sellers of this GetPromotionsInnerScope.

        Quantity of sellers which activate or deactivate the promotion.

        :param sellers: The sellers of this GetPromotionsInnerScope.
        :type sellers: float
        """

        self._sellers = sellers

    @property
    def sellers_are_inclusive(self):
        """Gets the sellers_are_inclusive of this GetPromotionsInnerScope.

        If set to `true`, this promotion will be applied to any seller present on the `sellers` field. If set to `false`, sellers present on that field will make this promotion not to be applied.

        :return: The sellers_are_inclusive of this GetPromotionsInnerScope.
        :rtype: bool
        """
        return self._sellers_are_inclusive

    @sellers_are_inclusive.setter
    def sellers_are_inclusive(self, sellers_are_inclusive):
        """Sets the sellers_are_inclusive of this GetPromotionsInnerScope.

        If set to `true`, this promotion will be applied to any seller present on the `sellers` field. If set to `false`, sellers present on that field will make this promotion not to be applied.

        :param sellers_are_inclusive: The sellers_are_inclusive of this GetPromotionsInnerScope.
        :type sellers_are_inclusive: bool
        """

        self._sellers_are_inclusive = sellers_are_inclusive

    @property
    def skus(self):
        """Gets the skus of this GetPromotionsInnerScope.

        Quantity of SKUs which activate or deactivate the promotion.

        :return: The skus of this GetPromotionsInnerScope.
        :rtype: float
        """
        return self._skus

    @skus.setter
    def skus(self, skus):
        """Sets the skus of this GetPromotionsInnerScope.

        Quantity of SKUs which activate or deactivate the promotion.

        :param skus: The skus of this GetPromotionsInnerScope.
        :type skus: float
        """

        self._skus = skus

    @property
    def skus_are_inclusive(self):
        """Gets the skus_are_inclusive of this GetPromotionsInnerScope.

        If set to `true`, this promotion will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this promotion not to be applied.

        :return: The skus_are_inclusive of this GetPromotionsInnerScope.
        :rtype: bool
        """
        return self._skus_are_inclusive

    @skus_are_inclusive.setter
    def skus_are_inclusive(self, skus_are_inclusive):
        """Sets the skus_are_inclusive of this GetPromotionsInnerScope.

        If set to `true`, this promotion will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this promotion not to be applied.

        :param skus_are_inclusive: The skus_are_inclusive of this GetPromotionsInnerScope.
        :type skus_are_inclusive: bool
        """

        self._skus_are_inclusive = skus_are_inclusive
