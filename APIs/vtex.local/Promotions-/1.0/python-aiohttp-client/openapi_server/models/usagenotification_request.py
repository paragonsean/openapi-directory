# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsagenotificationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, calculator_ids: List[str]=None, coupon: str=None, items_count: int=None, order_id: str=None, profile_id: str=None, used: bool=None):
        """UsagenotificationRequest - a model defined in OpenAPI

        :param account_id: The account_id of this UsagenotificationRequest.
        :param calculator_ids: The calculator_ids of this UsagenotificationRequest.
        :param coupon: The coupon of this UsagenotificationRequest.
        :param items_count: The items_count of this UsagenotificationRequest.
        :param order_id: The order_id of this UsagenotificationRequest.
        :param profile_id: The profile_id of this UsagenotificationRequest.
        :param used: The used of this UsagenotificationRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'calculator_ids': List[str],
            'coupon': str,
            'items_count': int,
            'order_id': str,
            'profile_id': str,
            'used': bool
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'calculator_ids': 'calculatorIds',
            'coupon': 'coupon',
            'items_count': 'itemsCount',
            'order_id': 'orderId',
            'profile_id': 'profileId',
            'used': 'used'
        }

        self._account_id = account_id
        self._calculator_ids = calculator_ids
        self._coupon = coupon
        self._items_count = items_count
        self._order_id = order_id
        self._profile_id = profile_id
        self._used = used

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsagenotificationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsagenotificationRequest of this UsagenotificationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this UsagenotificationRequest.


        :return: The account_id of this UsagenotificationRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UsagenotificationRequest.


        :param account_id: The account_id of this UsagenotificationRequest.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def calculator_ids(self):
        """Gets the calculator_ids of this UsagenotificationRequest.

        

        :return: The calculator_ids of this UsagenotificationRequest.
        :rtype: List[str]
        """
        return self._calculator_ids

    @calculator_ids.setter
    def calculator_ids(self, calculator_ids):
        """Sets the calculator_ids of this UsagenotificationRequest.

        

        :param calculator_ids: The calculator_ids of this UsagenotificationRequest.
        :type calculator_ids: List[str]
        """
        if calculator_ids is None:
            raise ValueError("Invalid value for `calculator_ids`, must not be `None`")

        self._calculator_ids = calculator_ids

    @property
    def coupon(self):
        """Gets the coupon of this UsagenotificationRequest.


        :return: The coupon of this UsagenotificationRequest.
        :rtype: str
        """
        return self._coupon

    @coupon.setter
    def coupon(self, coupon):
        """Sets the coupon of this UsagenotificationRequest.


        :param coupon: The coupon of this UsagenotificationRequest.
        :type coupon: str
        """
        if coupon is None:
            raise ValueError("Invalid value for `coupon`, must not be `None`")

        self._coupon = coupon

    @property
    def items_count(self):
        """Gets the items_count of this UsagenotificationRequest.


        :return: The items_count of this UsagenotificationRequest.
        :rtype: int
        """
        return self._items_count

    @items_count.setter
    def items_count(self, items_count):
        """Sets the items_count of this UsagenotificationRequest.


        :param items_count: The items_count of this UsagenotificationRequest.
        :type items_count: int
        """
        if items_count is None:
            raise ValueError("Invalid value for `items_count`, must not be `None`")

        self._items_count = items_count

    @property
    def order_id(self):
        """Gets the order_id of this UsagenotificationRequest.


        :return: The order_id of this UsagenotificationRequest.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this UsagenotificationRequest.


        :param order_id: The order_id of this UsagenotificationRequest.
        :type order_id: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def profile_id(self):
        """Gets the profile_id of this UsagenotificationRequest.


        :return: The profile_id of this UsagenotificationRequest.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this UsagenotificationRequest.


        :param profile_id: The profile_id of this UsagenotificationRequest.
        :type profile_id: str
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")

        self._profile_id = profile_id

    @property
    def used(self):
        """Gets the used of this UsagenotificationRequest.


        :return: The used of this UsagenotificationRequest.
        :rtype: bool
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this UsagenotificationRequest.


        :param used: The used of this UsagenotificationRequest.
        :type used: bool
        """
        if used is None:
            raise ValueError("Invalid value for `used`, must not be `None`")

        self._used = used
