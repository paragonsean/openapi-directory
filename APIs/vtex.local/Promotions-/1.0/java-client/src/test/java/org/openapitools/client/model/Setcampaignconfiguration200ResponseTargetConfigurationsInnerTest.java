/*
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateOrUpdateCalculatorConfiguration200ResponseAffiliatesInner;
import org.openapitools.client.model.CreateOrUpdateCalculatorConfiguration200ResponseBrandsInner;
import org.openapitools.client.model.CreateOrUpdateCalculatorConfiguration200ResponseCategoriesInner;
import org.openapitools.client.model.CreateOrUpdateCalculatorConfiguration200ResponseCollectionsInner;
import org.openapitools.client.model.CreateOrUpdateCalculatorConfiguration200ResponsePaymentsMethodsInner;
import org.openapitools.client.model.CreateOrUpdateCalculatorConfiguration200ResponseProductsInner;
import org.openapitools.client.model.CreateOrUpdateCalculatorConfiguration200ResponseSkusInner;
import org.openapitools.client.model.Getcampaignaudiences200ResponseInnerTargetConfigurationsInnerZipCodeRangesInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Setcampaignconfiguration200ResponseTargetConfigurationsInner
 */
public class Setcampaignconfiguration200ResponseTargetConfigurationsInnerTest {
    private final Setcampaignconfiguration200ResponseTargetConfigurationsInner model = new Setcampaignconfiguration200ResponseTargetConfigurationsInner();

    /**
     * Model tests for Setcampaignconfiguration200ResponseTargetConfigurationsInner
     */
    @Test
    public void testSetcampaignconfiguration200ResponseTargetConfigurationsInner() {
        // TODO: test Setcampaignconfiguration200ResponseTargetConfigurationsInner
    }

    /**
     * Test the property 'affiliates'
     */
    @Test
    public void affiliatesTest() {
        // TODO: test affiliates
    }

    /**
     * Test the property 'areSalesChannelIdsExclusive'
     */
    @Test
    public void areSalesChannelIdsExclusiveTest() {
        // TODO: test areSalesChannelIdsExclusive
    }

    /**
     * Test the property 'brands'
     */
    @Test
    public void brandsTest() {
        // TODO: test brands
    }

    /**
     * Test the property 'brandsAreInclusive'
     */
    @Test
    public void brandsAreInclusiveTest() {
        // TODO: test brandsAreInclusive
    }

    /**
     * Test the property 'campaigns'
     */
    @Test
    public void campaignsTest() {
        // TODO: test campaigns
    }

    /**
     * Test the property 'cardIssuers'
     */
    @Test
    public void cardIssuersTest() {
        // TODO: test cardIssuers
    }

    /**
     * Test the property 'categories'
     */
    @Test
    public void categoriesTest() {
        // TODO: test categories
    }

    /**
     * Test the property 'categoriesAreInclusive'
     */
    @Test
    public void categoriesAreInclusiveTest() {
        // TODO: test categoriesAreInclusive
    }

    /**
     * Test the property 'clusterExpressions'
     */
    @Test
    public void clusterExpressionsTest() {
        // TODO: test clusterExpressions
    }

    /**
     * Test the property 'clusterOperator'
     */
    @Test
    public void clusterOperatorTest() {
        // TODO: test clusterOperator
    }

    /**
     * Test the property 'collections'
     */
    @Test
    public void collectionsTest() {
        // TODO: test collections
    }

    /**
     * Test the property 'collections1BuyTogether'
     */
    @Test
    public void collections1BuyTogetherTest() {
        // TODO: test collections1BuyTogether
    }

    /**
     * Test the property 'collections2BuyTogether'
     */
    @Test
    public void collections2BuyTogetherTest() {
        // TODO: test collections2BuyTogether
    }

    /**
     * Test the property 'collectionsIsInclusive'
     */
    @Test
    public void collectionsIsInclusiveTest() {
        // TODO: test collectionsIsInclusive
    }

    /**
     * Test the property 'compareListPriceAndPrice'
     */
    @Test
    public void compareListPriceAndPriceTest() {
        // TODO: test compareListPriceAndPrice
    }

    /**
     * Test the property 'coupon'
     */
    @Test
    public void couponTest() {
        // TODO: test coupon
    }

    /**
     * Test the property 'daysAgoOfPurchases'
     */
    @Test
    public void daysAgoOfPurchasesTest() {
        // TODO: test daysAgoOfPurchases
    }

    /**
     * Test the property 'enableBuyTogetherPerSku'
     */
    @Test
    public void enableBuyTogetherPerSkuTest() {
        // TODO: test enableBuyTogetherPerSku
    }

    /**
     * Test the property 'featured'
     */
    @Test
    public void featuredTest() {
        // TODO: test featured
    }

    /**
     * Test the property 'firstBuyIsProfileOptimistic'
     */
    @Test
    public void firstBuyIsProfileOptimisticTest() {
        // TODO: test firstBuyIsProfileOptimistic
    }

    /**
     * Test the property 'giftListTypes'
     */
    @Test
    public void giftListTypesTest() {
        // TODO: test giftListTypes
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'idSellerIsInclusive'
     */
    @Test
    public void idSellerIsInclusiveTest() {
        // TODO: test idSellerIsInclusive
    }

    /**
     * Test the property 'idsSalesChannel'
     */
    @Test
    public void idsSalesChannelTest() {
        // TODO: test idsSalesChannel
    }

    /**
     * Test the property 'installment'
     */
    @Test
    public void installmentTest() {
        // TODO: test installment
    }

    /**
     * Test the property 'isDifferentListPriceAndPrice'
     */
    @Test
    public void isDifferentListPriceAndPriceTest() {
        // TODO: test isDifferentListPriceAndPrice
    }

    /**
     * Test the property 'isFirstBuy'
     */
    @Test
    public void isFirstBuyTest() {
        // TODO: test isFirstBuy
    }

    /**
     * Test the property 'isMinMaxInstallments'
     */
    @Test
    public void isMinMaxInstallmentsTest() {
        // TODO: test isMinMaxInstallments
    }

    /**
     * Test the property 'isSlaSelected'
     */
    @Test
    public void isSlaSelectedTest() {
        // TODO: test isSlaSelected
    }

    /**
     * Test the property 'itemMaxPrice'
     */
    @Test
    public void itemMaxPriceTest() {
        // TODO: test itemMaxPrice
    }

    /**
     * Test the property 'itemMinPrice'
     */
    @Test
    public void itemMinPriceTest() {
        // TODO: test itemMinPrice
    }

    /**
     * Test the property 'listBrand1BuyTogether'
     */
    @Test
    public void listBrand1BuyTogetherTest() {
        // TODO: test listBrand1BuyTogether
    }

    /**
     * Test the property 'listCategory1BuyTogether'
     */
    @Test
    public void listCategory1BuyTogetherTest() {
        // TODO: test listCategory1BuyTogether
    }

    /**
     * Test the property 'listSku1BuyTogether'
     */
    @Test
    public void listSku1BuyTogetherTest() {
        // TODO: test listSku1BuyTogether
    }

    /**
     * Test the property 'listSku2BuyTogether'
     */
    @Test
    public void listSku2BuyTogetherTest() {
        // TODO: test listSku2BuyTogether
    }

    /**
     * Test the property 'marketingTags'
     */
    @Test
    public void marketingTagsTest() {
        // TODO: test marketingTags
    }

    /**
     * Test the property 'marketingTagsAreNotInclusive'
     */
    @Test
    public void marketingTagsAreNotInclusiveTest() {
        // TODO: test marketingTagsAreNotInclusive
    }

    /**
     * Test the property 'maxInstallment'
     */
    @Test
    public void maxInstallmentTest() {
        // TODO: test maxInstallment
    }

    /**
     * Test the property 'maxUsage'
     */
    @Test
    public void maxUsageTest() {
        // TODO: test maxUsage
    }

    /**
     * Test the property 'maxUsagePerClient'
     */
    @Test
    public void maxUsagePerClientTest() {
        // TODO: test maxUsagePerClient
    }

    /**
     * Test the property 'merchants'
     */
    @Test
    public void merchantsTest() {
        // TODO: test merchants
    }

    /**
     * Test the property 'minInstallment'
     */
    @Test
    public void minInstallmentTest() {
        // TODO: test minInstallment
    }

    /**
     * Test the property 'minimumQuantityBuyTogether'
     */
    @Test
    public void minimumQuantityBuyTogetherTest() {
        // TODO: test minimumQuantityBuyTogether
    }

    /**
     * Test the property 'multipleUsePerClient'
     */
    @Test
    public void multipleUsePerClientTest() {
        // TODO: test multipleUsePerClient
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'origin'
     */
    @Test
    public void originTest() {
        // TODO: test origin
    }

    /**
     * Test the property 'paymentsMethods'
     */
    @Test
    public void paymentsMethodsTest() {
        // TODO: test paymentsMethods
    }

    /**
     * Test the property 'paymentsRules'
     */
    @Test
    public void paymentsRulesTest() {
        // TODO: test paymentsRules
    }

    /**
     * Test the property 'percentualDiscountValueList'
     */
    @Test
    public void percentualDiscountValueListTest() {
        // TODO: test percentualDiscountValueList
    }

    /**
     * Test the property 'products'
     */
    @Test
    public void productsTest() {
        // TODO: test products
    }

    /**
     * Test the property 'productsAreInclusive'
     */
    @Test
    public void productsAreInclusiveTest() {
        // TODO: test productsAreInclusive
    }

    /**
     * Test the property 'productsSpecifications'
     */
    @Test
    public void productsSpecificationsTest() {
        // TODO: test productsSpecifications
    }

    /**
     * Test the property 'quantityToAffectBuyTogether'
     */
    @Test
    public void quantityToAffectBuyTogetherTest() {
        // TODO: test quantityToAffectBuyTogether
    }

    /**
     * Test the property 'restrictionsBins'
     */
    @Test
    public void restrictionsBinsTest() {
        // TODO: test restrictionsBins
    }

    /**
     * Test the property 'shouldDistributeDiscountAmongMatchedItems'
     */
    @Test
    public void shouldDistributeDiscountAmongMatchedItemsTest() {
        // TODO: test shouldDistributeDiscountAmongMatchedItems
    }

    /**
     * Test the property 'skus'
     */
    @Test
    public void skusTest() {
        // TODO: test skus
    }

    /**
     * Test the property 'skusAreInclusive'
     */
    @Test
    public void skusAreInclusiveTest() {
        // TODO: test skusAreInclusive
    }

    /**
     * Test the property 'slasIds'
     */
    @Test
    public void slasIdsTest() {
        // TODO: test slasIds
    }

    /**
     * Test the property 'stores'
     */
    @Test
    public void storesTest() {
        // TODO: test stores
    }

    /**
     * Test the property 'storesAreInclusive'
     */
    @Test
    public void storesAreInclusiveTest() {
        // TODO: test storesAreInclusive
    }

    /**
     * Test the property 'totalValueCeling'
     */
    @Test
    public void totalValueCelingTest() {
        // TODO: test totalValueCeling
    }

    /**
     * Test the property 'totalValueFloor'
     */
    @Test
    public void totalValueFloorTest() {
        // TODO: test totalValueFloor
    }

    /**
     * Test the property 'totalValueIncludeAllItems'
     */
    @Test
    public void totalValueIncludeAllItemsTest() {
        // TODO: test totalValueIncludeAllItems
    }

    /**
     * Test the property 'totalValueMode'
     */
    @Test
    public void totalValueModeTest() {
        // TODO: test totalValueMode
    }

    /**
     * Test the property 'totalValuePurchase'
     */
    @Test
    public void totalValuePurchaseTest() {
        // TODO: test totalValuePurchase
    }

    /**
     * Test the property 'useNewProgressiveAlgorithm'
     */
    @Test
    public void useNewProgressiveAlgorithmTest() {
        // TODO: test useNewProgressiveAlgorithm
    }

    /**
     * Test the property 'zipCodeRanges'
     */
    @Test
    public void zipCodeRangesTest() {
        // TODO: test zipCodeRanges
    }

}
