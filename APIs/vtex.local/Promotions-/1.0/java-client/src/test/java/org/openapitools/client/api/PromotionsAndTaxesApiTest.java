/*
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateOrUpdateCalculatorConfiguration200Response;
import org.openapitools.client.model.CreateOrUpdateCalculatorConfigurationRequest;
import java.io.File;
import org.openapitools.client.model.GetAllBenefits200Response;
import org.openapitools.client.model.GetAllTaxes200Response;
import org.openapitools.client.model.GetArchivedPromotions200Response;
import org.openapitools.client.model.GetArchivedTaxes200Response;
import org.openapitools.client.model.GetCalculatorConfigurationById200Response;
import org.openapitools.client.model.GetCalculatorConfigurationById200Response1;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PromotionsAndTaxesApi
 */
@Disabled
public class PromotionsAndTaxesApiTest {

    private final PromotionsAndTaxesApi api = new PromotionsAndTaxesApi();

    /**
     * Create Multiple SKU Promotion
     *
     * Creates a Multiple SKU Promotion. This scenario allows to create a single promotion for multiples SKUs with the Percentage Effect.   &gt; ‚ö†Ô∏è   &gt;  &gt; The limit of SKUs on a Multiple Effects promotion is 400.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRnbPvtImportCalculatorConfigurationPostTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String xVTEXCalculatorName = null;
        String xVTEXStartDate = null;
        String xVTEXEndDate = null;
        Boolean xVTEXAccumulateWithManualPrices = null;
        Boolean xVTEXCumulative = null;
        String xVTEXClusterOperator = null;
        String xVTEXClusterExpression = null;
        File body = null;
        api.apiRnbPvtImportCalculatorConfigurationPost(contentType, accept, xVTEXCalculatorName, xVTEXStartDate, xVTEXEndDate, xVTEXAccumulateWithManualPrices, xVTEXCumulative, xVTEXClusterOperator, xVTEXClusterExpression, body);
        // TODO: test validations
    }

    /**
     * Update Multiple SKU Promotion
     *
     * Updates information from a Multiple SKU Promotion. This scenario allows to create a single promotion for multiples SKUs with the Percentage Effect.    &gt; ‚ö†Ô∏è   &gt;  &gt; The limit of SKUs on a Multiple Effects promotion is 400.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiRnbPvtImportCalculatorConfigurationPromotionIdPutTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String xVTEXCalculatorName = null;
        String xVTEXStartDate = null;
        String xVTEXEndDate = null;
        Boolean xVTEXAccumulateWithManualPrices = null;
        String promotionId = null;
        Boolean xVTEXCumulative = null;
        String xVTEXClusterOperator = null;
        String xVTEXClusterExpression = null;
        File body = null;
        api.apiRnbPvtImportCalculatorConfigurationPromotionIdPut(contentType, accept, xVTEXCalculatorName, xVTEXStartDate, xVTEXEndDate, xVTEXAccumulateWithManualPrices, promotionId, xVTEXCumulative, xVTEXClusterOperator, xVTEXClusterExpression, body);
        // TODO: test validations
    }

    /**
     * Archive Promotion or Tax
     *
     * Archives a Promotion or Tax by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archivePromotionTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String idCalculatorConfiguration = null;
        api.archivePromotion(contentType, accept, idCalculatorConfiguration);
        // TODO: test validations
    }

    /**
     * Create or Update Promotion or Tax
     *
     * Creates or updates a specific Promotion by its Promotion ID or a specific Tax by its Tax ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrUpdateCalculatorConfigurationTest() throws ApiException {
        String contentType = null;
        String accept = null;
        CreateOrUpdateCalculatorConfigurationRequest createOrUpdateCalculatorConfigurationRequest = null;
        CreateOrUpdateCalculatorConfiguration200Response response = api.createOrUpdateCalculatorConfiguration(contentType, accept, createOrUpdateCalculatorConfigurationRequest);
        // TODO: test validations
    }

    /**
     * Get All Promotions
     *
     * Retrieves all promotions from an account.     &gt; üìò Onboarding guide   &gt;  &gt; Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about the Promotions and is organized by focusing on the developer&#39;s journey.    
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllBenefitsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        GetAllBenefits200Response response = api.getAllBenefits(contentType, accept);
        // TODO: test validations
    }

    /**
     * Get All Taxes
     *
     * Retrieves all taxes from an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTaxesTest() throws ApiException {
        String contentType = null;
        String accept = null;
        GetAllTaxes200Response response = api.getAllTaxes(contentType, accept);
        // TODO: test validations
    }

    /**
     * List Archived Promotions
     *
     * Lists all archived promotions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArchivedPromotionsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        GetArchivedPromotions200Response response = api.getArchivedPromotions(contentType, accept);
        // TODO: test validations
    }

    /**
     * List Archived Taxes
     *
     * Lists all archived taxes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArchivedTaxesTest() throws ApiException {
        String contentType = null;
        String accept = null;
        GetArchivedTaxes200Response response = api.getArchivedTaxes(contentType, accept);
        // TODO: test validations
    }

    /**
     * Get Promotion or Tax by ID
     *
     * Retrieves a specific promotion by its Promotion ID or a specific tax by its Tax ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCalculatorConfigurationByIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String idCalculatorConfiguration = null;
        GetCalculatorConfigurationById200Response response = api.getCalculatorConfigurationById(contentType, accept, idCalculatorConfiguration);
        // TODO: test validations
    }

    /**
     * Unarchive Promotion or Tax
     *
     * Unarchives a Promotion or Tax by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unarchivePromotionTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String idCalculatorConfiguration = null;
        api.unarchivePromotion(contentType, accept, idCalculatorConfiguration);
        // TODO: test validations
    }

}
