/*
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetAllBenefits200ResponseLimitConfiguration;
import org.openapitools.client.model.GetTaxesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAllTaxes200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:03.993078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetAllTaxes200Response {
  public static final String SERIALIZED_NAME_ARCHIVED_ITEMS = "archivedItems";
  @SerializedName(SERIALIZED_NAME_ARCHIVED_ITEMS)
  private List<String> archivedItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLED_ITEMS = "disabledItems";
  @SerializedName(SERIALIZED_NAME_DISABLED_ITEMS)
  private List<String> disabledItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<GetTaxesInner> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIMIT_CONFIGURATION = "limitConfiguration";
  @SerializedName(SERIALIZED_NAME_LIMIT_CONFIGURATION)
  private GetAllBenefits200ResponseLimitConfiguration limitConfiguration;

  public GetAllTaxes200Response() {
  }

  public GetAllTaxes200Response archivedItems(List<String> archivedItems) {
    this.archivedItems = archivedItems;
    return this;
  }

  public GetAllTaxes200Response addArchivedItemsItem(String archivedItemsItem) {
    if (this.archivedItems == null) {
      this.archivedItems = new ArrayList<>();
    }
    this.archivedItems.add(archivedItemsItem);
    return this;
  }

  /**
   * Archived items.
   * @return archivedItems
   */
  @javax.annotation.Nullable
  public List<String> getArchivedItems() {
    return archivedItems;
  }

  public void setArchivedItems(List<String> archivedItems) {
    this.archivedItems = archivedItems;
  }


  public GetAllTaxes200Response disabledItems(List<String> disabledItems) {
    this.disabledItems = disabledItems;
    return this;
  }

  public GetAllTaxes200Response addDisabledItemsItem(String disabledItemsItem) {
    if (this.disabledItems == null) {
      this.disabledItems = new ArrayList<>();
    }
    this.disabledItems.add(disabledItemsItem);
    return this;
  }

  /**
   * Disabled items.
   * @return disabledItems
   */
  @javax.annotation.Nullable
  public List<String> getDisabledItems() {
    return disabledItems;
  }

  public void setDisabledItems(List<String> disabledItems) {
    this.disabledItems = disabledItems;
  }


  public GetAllTaxes200Response items(List<GetTaxesInner> items) {
    this.items = items;
    return this;
  }

  public GetAllTaxes200Response addItemsItem(GetTaxesInner itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Array with taxes.
   * @return items
   */
  @javax.annotation.Nullable
  public List<GetTaxesInner> getItems() {
    return items;
  }

  public void setItems(List<GetTaxesInner> items) {
    this.items = items;
  }


  public GetAllTaxes200Response limitConfiguration(GetAllBenefits200ResponseLimitConfiguration limitConfiguration) {
    this.limitConfiguration = limitConfiguration;
    return this;
  }

  /**
   * Get limitConfiguration
   * @return limitConfiguration
   */
  @javax.annotation.Nullable
  public GetAllBenefits200ResponseLimitConfiguration getLimitConfiguration() {
    return limitConfiguration;
  }

  public void setLimitConfiguration(GetAllBenefits200ResponseLimitConfiguration limitConfiguration) {
    this.limitConfiguration = limitConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAllTaxes200Response getAllTaxes200Response = (GetAllTaxes200Response) o;
    return Objects.equals(this.archivedItems, getAllTaxes200Response.archivedItems) &&
        Objects.equals(this.disabledItems, getAllTaxes200Response.disabledItems) &&
        Objects.equals(this.items, getAllTaxes200Response.items) &&
        Objects.equals(this.limitConfiguration, getAllTaxes200Response.limitConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archivedItems, disabledItems, items, limitConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAllTaxes200Response {\n");
    sb.append("    archivedItems: ").append(toIndentedString(archivedItems)).append("\n");
    sb.append("    disabledItems: ").append(toIndentedString(disabledItems)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    limitConfiguration: ").append(toIndentedString(limitConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archivedItems");
    openapiFields.add("disabledItems");
    openapiFields.add("items");
    openapiFields.add("limitConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAllTaxes200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAllTaxes200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAllTaxes200Response is not found in the empty JSON string", GetAllTaxes200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAllTaxes200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAllTaxes200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("archivedItems") != null && !jsonObj.get("archivedItems").isJsonNull() && !jsonObj.get("archivedItems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `archivedItems` to be an array in the JSON string but got `%s`", jsonObj.get("archivedItems").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("disabledItems") != null && !jsonObj.get("disabledItems").isJsonNull() && !jsonObj.get("disabledItems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `disabledItems` to be an array in the JSON string but got `%s`", jsonObj.get("disabledItems").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            GetTaxesInner.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      // validate the optional field `limitConfiguration`
      if (jsonObj.get("limitConfiguration") != null && !jsonObj.get("limitConfiguration").isJsonNull()) {
        GetAllBenefits200ResponseLimitConfiguration.validateJsonElement(jsonObj.get("limitConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAllTaxes200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAllTaxes200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAllTaxes200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAllTaxes200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAllTaxes200Response>() {
           @Override
           public void write(JsonWriter out, GetAllTaxes200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAllTaxes200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAllTaxes200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAllTaxes200Response
   * @throws IOException if the JSON string is invalid with respect to GetAllTaxes200Response
   */
  public static GetAllTaxes200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAllTaxes200Response.class);
  }

  /**
   * Convert an instance of GetAllTaxes200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

