/*
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object with information about the coupon.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:03.993078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Getall200ResponseInner {
  public static final String SERIALIZED_NAME_COUPON_CODE = "couponCode";
  @SerializedName(SERIALIZED_NAME_COUPON_CODE)
  private String couponCode;

  public static final String SERIALIZED_NAME_EXPIRATION_INTERVAL_PER_USE = "expirationIntervalPerUse";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_INTERVAL_PER_USE)
  private String expirationIntervalPerUse;

  public static final String SERIALIZED_NAME_IS_ARCHIVED = "isArchived";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVED)
  private Boolean isArchived;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_UTC = "lastModifiedUtc";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_UTC)
  private String lastModifiedUtc;

  public static final String SERIALIZED_NAME_MAX_ITEMS_PER_CLIENT = "maxItemsPerClient";
  @SerializedName(SERIALIZED_NAME_MAX_ITEMS_PER_CLIENT)
  private Integer maxItemsPerClient;

  public static final String SERIALIZED_NAME_UTM_CAMPAIGN = "utmCampaign";
  @SerializedName(SERIALIZED_NAME_UTM_CAMPAIGN)
  private String utmCampaign;

  public static final String SERIALIZED_NAME_UTM_SOURCE = "utmSource";
  @SerializedName(SERIALIZED_NAME_UTM_SOURCE)
  private String utmSource;

  public Getall200ResponseInner() {
  }

  public Getall200ResponseInner couponCode(String couponCode) {
    this.couponCode = couponCode;
    return this;
  }

  /**
   * Coupon code.
   * @return couponCode
   */
  @javax.annotation.Nullable
  public String getCouponCode() {
    return couponCode;
  }

  public void setCouponCode(String couponCode) {
    this.couponCode = couponCode;
  }


  public Getall200ResponseInner expirationIntervalPerUse(String expirationIntervalPerUse) {
    this.expirationIntervalPerUse = expirationIntervalPerUse;
    return this;
  }

  /**
   * Coupon expiration interval per use.
   * @return expirationIntervalPerUse
   */
  @javax.annotation.Nullable
  public String getExpirationIntervalPerUse() {
    return expirationIntervalPerUse;
  }

  public void setExpirationIntervalPerUse(String expirationIntervalPerUse) {
    this.expirationIntervalPerUse = expirationIntervalPerUse;
  }


  public Getall200ResponseInner isArchived(Boolean isArchived) {
    this.isArchived = isArchived;
    return this;
  }

  /**
   * Defines if the coupon is archived (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return isArchived
   */
  @javax.annotation.Nullable
  public Boolean getIsArchived() {
    return isArchived;
  }

  public void setIsArchived(Boolean isArchived) {
    this.isArchived = isArchived;
  }


  public Getall200ResponseInner lastModifiedUtc(String lastModifiedUtc) {
    this.lastModifiedUtc = lastModifiedUtc;
    return this;
  }

  /**
   * Date and time of the last update of the coupon in UTC format.
   * @return lastModifiedUtc
   */
  @javax.annotation.Nullable
  public String getLastModifiedUtc() {
    return lastModifiedUtc;
  }

  public void setLastModifiedUtc(String lastModifiedUtc) {
    this.lastModifiedUtc = lastModifiedUtc;
  }


  public Getall200ResponseInner maxItemsPerClient(Integer maxItemsPerClient) {
    this.maxItemsPerClient = maxItemsPerClient;
    return this;
  }

  /**
   * Maximum items per client that the coupon can be applied.
   * @return maxItemsPerClient
   */
  @javax.annotation.Nullable
  public Integer getMaxItemsPerClient() {
    return maxItemsPerClient;
  }

  public void setMaxItemsPerClient(Integer maxItemsPerClient) {
    this.maxItemsPerClient = maxItemsPerClient;
  }


  public Getall200ResponseInner utmCampaign(String utmCampaign) {
    this.utmCampaign = utmCampaign;
    return this;
  }

  /**
   * UTM campaign code.
   * @return utmCampaign
   */
  @javax.annotation.Nullable
  public String getUtmCampaign() {
    return utmCampaign;
  }

  public void setUtmCampaign(String utmCampaign) {
    this.utmCampaign = utmCampaign;
  }


  public Getall200ResponseInner utmSource(String utmSource) {
    this.utmSource = utmSource;
    return this;
  }

  /**
   * UTM source code.
   * @return utmSource
   */
  @javax.annotation.Nullable
  public String getUtmSource() {
    return utmSource;
  }

  public void setUtmSource(String utmSource) {
    this.utmSource = utmSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Getall200ResponseInner getall200ResponseInner = (Getall200ResponseInner) o;
    return Objects.equals(this.couponCode, getall200ResponseInner.couponCode) &&
        Objects.equals(this.expirationIntervalPerUse, getall200ResponseInner.expirationIntervalPerUse) &&
        Objects.equals(this.isArchived, getall200ResponseInner.isArchived) &&
        Objects.equals(this.lastModifiedUtc, getall200ResponseInner.lastModifiedUtc) &&
        Objects.equals(this.maxItemsPerClient, getall200ResponseInner.maxItemsPerClient) &&
        Objects.equals(this.utmCampaign, getall200ResponseInner.utmCampaign) &&
        Objects.equals(this.utmSource, getall200ResponseInner.utmSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(couponCode, expirationIntervalPerUse, isArchived, lastModifiedUtc, maxItemsPerClient, utmCampaign, utmSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Getall200ResponseInner {\n");
    sb.append("    couponCode: ").append(toIndentedString(couponCode)).append("\n");
    sb.append("    expirationIntervalPerUse: ").append(toIndentedString(expirationIntervalPerUse)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    lastModifiedUtc: ").append(toIndentedString(lastModifiedUtc)).append("\n");
    sb.append("    maxItemsPerClient: ").append(toIndentedString(maxItemsPerClient)).append("\n");
    sb.append("    utmCampaign: ").append(toIndentedString(utmCampaign)).append("\n");
    sb.append("    utmSource: ").append(toIndentedString(utmSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("couponCode");
    openapiFields.add("expirationIntervalPerUse");
    openapiFields.add("isArchived");
    openapiFields.add("lastModifiedUtc");
    openapiFields.add("maxItemsPerClient");
    openapiFields.add("utmCampaign");
    openapiFields.add("utmSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Getall200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Getall200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Getall200ResponseInner is not found in the empty JSON string", Getall200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Getall200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Getall200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("couponCode") != null && !jsonObj.get("couponCode").isJsonNull()) && !jsonObj.get("couponCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `couponCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("couponCode").toString()));
      }
      if ((jsonObj.get("expirationIntervalPerUse") != null && !jsonObj.get("expirationIntervalPerUse").isJsonNull()) && !jsonObj.get("expirationIntervalPerUse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationIntervalPerUse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationIntervalPerUse").toString()));
      }
      if ((jsonObj.get("lastModifiedUtc") != null && !jsonObj.get("lastModifiedUtc").isJsonNull()) && !jsonObj.get("lastModifiedUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedUtc").toString()));
      }
      if ((jsonObj.get("utmCampaign") != null && !jsonObj.get("utmCampaign").isJsonNull()) && !jsonObj.get("utmCampaign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utmCampaign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utmCampaign").toString()));
      }
      if ((jsonObj.get("utmSource") != null && !jsonObj.get("utmSource").isJsonNull()) && !jsonObj.get("utmSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utmSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utmSource").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Getall200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Getall200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Getall200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Getall200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<Getall200ResponseInner>() {
           @Override
           public void write(JsonWriter out, Getall200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Getall200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Getall200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Getall200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to Getall200ResponseInner
   */
  public static Getall200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Getall200ResponseInner.class);
  }

  /**
   * Convert an instance of Getall200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

