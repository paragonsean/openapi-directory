/*
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateOrUpdateCalculatorConfiguration200Response;
import org.openapitools.client.model.CreateOrUpdateCalculatorConfigurationRequest;
import java.io.File;
import org.openapitools.client.model.GetAllBenefits200Response;
import org.openapitools.client.model.GetAllTaxes200Response;
import org.openapitools.client.model.GetArchivedPromotions200Response;
import org.openapitools.client.model.GetArchivedTaxes200Response;
import org.openapitools.client.model.GetCalculatorConfigurationById200Response;
import org.openapitools.client.model.GetCalculatorConfigurationById200Response1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PromotionsAndTaxesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PromotionsAndTaxesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PromotionsAndTaxesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiRnbPvtImportCalculatorConfigurationPost
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param xVTEXCalculatorName Promotion Name. (required)
     * @param xVTEXStartDate Promotion start date. (required)
     * @param xVTEXEndDate Promotion end date. (required)
     * @param xVTEXAccumulateWithManualPrices Condition that will accumulate the Promotion with manual prices or not. (required)
     * @param xVTEXCumulative Defines if the Promotion is cumulative with other promotions. (optional)
     * @param xVTEXClusterOperator This header allows implementing the Promotion in multiples client clusters. You can set the value as &#x60;all&#x60; - the Promotion will be valid to all the clusters - or &#x60;any&#x60; - the Promotion will be valid to any of the clusters. (optional)
     * @param xVTEXClusterExpression Cluster that will be included in the Promotion. To add multiple clusters, create a header for each one of them. (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnbPvtImportCalculatorConfigurationPostCall(String contentType, String accept, String xVTEXCalculatorName, String xVTEXStartDate, String xVTEXEndDate, Boolean xVTEXAccumulateWithManualPrices, Boolean xVTEXCumulative, String xVTEXClusterOperator, String xVTEXClusterExpression, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/rnb/pvt/import/calculatorConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (xVTEXCalculatorName != null) {
            localVarHeaderParams.put("X-VTEX-calculator-name", localVarApiClient.parameterToString(xVTEXCalculatorName));
        }

        if (xVTEXCumulative != null) {
            localVarHeaderParams.put("X-VTEX-cumulative", localVarApiClient.parameterToString(xVTEXCumulative));
        }

        if (xVTEXClusterOperator != null) {
            localVarHeaderParams.put("X-VTEX-cluster-operator", localVarApiClient.parameterToString(xVTEXClusterOperator));
        }

        if (xVTEXClusterExpression != null) {
            localVarHeaderParams.put("X-VTEX-cluster-expression", localVarApiClient.parameterToString(xVTEXClusterExpression));
        }

        if (xVTEXStartDate != null) {
            localVarHeaderParams.put("X-VTEX-start-date", localVarApiClient.parameterToString(xVTEXStartDate));
        }

        if (xVTEXEndDate != null) {
            localVarHeaderParams.put("X-VTEX-end-date", localVarApiClient.parameterToString(xVTEXEndDate));
        }

        if (xVTEXAccumulateWithManualPrices != null) {
            localVarHeaderParams.put("X-VTEX-accumulate-with-manual-prices", localVarApiClient.parameterToString(xVTEXAccumulateWithManualPrices));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/csv"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRnbPvtImportCalculatorConfigurationPostValidateBeforeCall(String contentType, String accept, String xVTEXCalculatorName, String xVTEXStartDate, String xVTEXEndDate, Boolean xVTEXAccumulateWithManualPrices, Boolean xVTEXCumulative, String xVTEXClusterOperator, String xVTEXClusterExpression, File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiRnbPvtImportCalculatorConfigurationPost(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiRnbPvtImportCalculatorConfigurationPost(Async)");
        }

        // verify the required parameter 'xVTEXCalculatorName' is set
        if (xVTEXCalculatorName == null) {
            throw new ApiException("Missing the required parameter 'xVTEXCalculatorName' when calling apiRnbPvtImportCalculatorConfigurationPost(Async)");
        }

        // verify the required parameter 'xVTEXStartDate' is set
        if (xVTEXStartDate == null) {
            throw new ApiException("Missing the required parameter 'xVTEXStartDate' when calling apiRnbPvtImportCalculatorConfigurationPost(Async)");
        }

        // verify the required parameter 'xVTEXEndDate' is set
        if (xVTEXEndDate == null) {
            throw new ApiException("Missing the required parameter 'xVTEXEndDate' when calling apiRnbPvtImportCalculatorConfigurationPost(Async)");
        }

        // verify the required parameter 'xVTEXAccumulateWithManualPrices' is set
        if (xVTEXAccumulateWithManualPrices == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAccumulateWithManualPrices' when calling apiRnbPvtImportCalculatorConfigurationPost(Async)");
        }

        return apiRnbPvtImportCalculatorConfigurationPostCall(contentType, accept, xVTEXCalculatorName, xVTEXStartDate, xVTEXEndDate, xVTEXAccumulateWithManualPrices, xVTEXCumulative, xVTEXClusterOperator, xVTEXClusterExpression, body, _callback);

    }

    /**
     * Create Multiple SKU Promotion
     * Creates a Multiple SKU Promotion. This scenario allows to create a single promotion for multiples SKUs with the Percentage Effect.   &gt; ⚠️   &gt;  &gt; The limit of SKUs on a Multiple Effects promotion is 400.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param xVTEXCalculatorName Promotion Name. (required)
     * @param xVTEXStartDate Promotion start date. (required)
     * @param xVTEXEndDate Promotion end date. (required)
     * @param xVTEXAccumulateWithManualPrices Condition that will accumulate the Promotion with manual prices or not. (required)
     * @param xVTEXCumulative Defines if the Promotion is cumulative with other promotions. (optional)
     * @param xVTEXClusterOperator This header allows implementing the Promotion in multiples client clusters. You can set the value as &#x60;all&#x60; - the Promotion will be valid to all the clusters - or &#x60;any&#x60; - the Promotion will be valid to any of the clusters. (optional)
     * @param xVTEXClusterExpression Cluster that will be included in the Promotion. To add multiple clusters, create a header for each one of them. (optional)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void apiRnbPvtImportCalculatorConfigurationPost(String contentType, String accept, String xVTEXCalculatorName, String xVTEXStartDate, String xVTEXEndDate, Boolean xVTEXAccumulateWithManualPrices, Boolean xVTEXCumulative, String xVTEXClusterOperator, String xVTEXClusterExpression, File body) throws ApiException {
        apiRnbPvtImportCalculatorConfigurationPostWithHttpInfo(contentType, accept, xVTEXCalculatorName, xVTEXStartDate, xVTEXEndDate, xVTEXAccumulateWithManualPrices, xVTEXCumulative, xVTEXClusterOperator, xVTEXClusterExpression, body);
    }

    /**
     * Create Multiple SKU Promotion
     * Creates a Multiple SKU Promotion. This scenario allows to create a single promotion for multiples SKUs with the Percentage Effect.   &gt; ⚠️   &gt;  &gt; The limit of SKUs on a Multiple Effects promotion is 400.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param xVTEXCalculatorName Promotion Name. (required)
     * @param xVTEXStartDate Promotion start date. (required)
     * @param xVTEXEndDate Promotion end date. (required)
     * @param xVTEXAccumulateWithManualPrices Condition that will accumulate the Promotion with manual prices or not. (required)
     * @param xVTEXCumulative Defines if the Promotion is cumulative with other promotions. (optional)
     * @param xVTEXClusterOperator This header allows implementing the Promotion in multiples client clusters. You can set the value as &#x60;all&#x60; - the Promotion will be valid to all the clusters - or &#x60;any&#x60; - the Promotion will be valid to any of the clusters. (optional)
     * @param xVTEXClusterExpression Cluster that will be included in the Promotion. To add multiple clusters, create a header for each one of them. (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiRnbPvtImportCalculatorConfigurationPostWithHttpInfo(String contentType, String accept, String xVTEXCalculatorName, String xVTEXStartDate, String xVTEXEndDate, Boolean xVTEXAccumulateWithManualPrices, Boolean xVTEXCumulative, String xVTEXClusterOperator, String xVTEXClusterExpression, File body) throws ApiException {
        okhttp3.Call localVarCall = apiRnbPvtImportCalculatorConfigurationPostValidateBeforeCall(contentType, accept, xVTEXCalculatorName, xVTEXStartDate, xVTEXEndDate, xVTEXAccumulateWithManualPrices, xVTEXCumulative, xVTEXClusterOperator, xVTEXClusterExpression, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Multiple SKU Promotion (asynchronously)
     * Creates a Multiple SKU Promotion. This scenario allows to create a single promotion for multiples SKUs with the Percentage Effect.   &gt; ⚠️   &gt;  &gt; The limit of SKUs on a Multiple Effects promotion is 400.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param xVTEXCalculatorName Promotion Name. (required)
     * @param xVTEXStartDate Promotion start date. (required)
     * @param xVTEXEndDate Promotion end date. (required)
     * @param xVTEXAccumulateWithManualPrices Condition that will accumulate the Promotion with manual prices or not. (required)
     * @param xVTEXCumulative Defines if the Promotion is cumulative with other promotions. (optional)
     * @param xVTEXClusterOperator This header allows implementing the Promotion in multiples client clusters. You can set the value as &#x60;all&#x60; - the Promotion will be valid to all the clusters - or &#x60;any&#x60; - the Promotion will be valid to any of the clusters. (optional)
     * @param xVTEXClusterExpression Cluster that will be included in the Promotion. To add multiple clusters, create a header for each one of them. (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnbPvtImportCalculatorConfigurationPostAsync(String contentType, String accept, String xVTEXCalculatorName, String xVTEXStartDate, String xVTEXEndDate, Boolean xVTEXAccumulateWithManualPrices, Boolean xVTEXCumulative, String xVTEXClusterOperator, String xVTEXClusterExpression, File body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRnbPvtImportCalculatorConfigurationPostValidateBeforeCall(contentType, accept, xVTEXCalculatorName, xVTEXStartDate, xVTEXEndDate, xVTEXAccumulateWithManualPrices, xVTEXCumulative, xVTEXClusterOperator, xVTEXClusterExpression, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiRnbPvtImportCalculatorConfigurationPromotionIdPut
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param xVTEXCalculatorName Promotion Name. (required)
     * @param xVTEXStartDate Promotion start date. (required)
     * @param xVTEXEndDate Promotion end date. (required)
     * @param xVTEXAccumulateWithManualPrices Condition that will accumulate the Promotion with manual prices or not. (required)
     * @param promotionId Promotion unique identifier. (required)
     * @param xVTEXCumulative Defines if the Promotion is cumulative with other promotions. (optional)
     * @param xVTEXClusterOperator This header allows implementing the Promotion in multiples client clusters. You can set the value as &#x60;all&#x60; - the Promotion will be valid to all the clusters - or &#x60;any&#x60; - the Promotion will be valid to any of the clusters. (optional)
     * @param xVTEXClusterExpression Cluster that will be included in the Promotion. To add multiple clusters, create a header for each one of them. (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnbPvtImportCalculatorConfigurationPromotionIdPutCall(String contentType, String accept, String xVTEXCalculatorName, String xVTEXStartDate, String xVTEXEndDate, Boolean xVTEXAccumulateWithManualPrices, String promotionId, Boolean xVTEXCumulative, String xVTEXClusterOperator, String xVTEXClusterExpression, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/rnb/pvt/import/calculatorConfiguration/{promotionId}"
            .replace("{" + "promotionId" + "}", localVarApiClient.escapeString(promotionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (xVTEXCalculatorName != null) {
            localVarHeaderParams.put("X-VTEX-calculator-name", localVarApiClient.parameterToString(xVTEXCalculatorName));
        }

        if (xVTEXCumulative != null) {
            localVarHeaderParams.put("X-VTEX-cumulative", localVarApiClient.parameterToString(xVTEXCumulative));
        }

        if (xVTEXClusterOperator != null) {
            localVarHeaderParams.put("X-VTEX-cluster-operator", localVarApiClient.parameterToString(xVTEXClusterOperator));
        }

        if (xVTEXClusterExpression != null) {
            localVarHeaderParams.put("X-VTEX-cluster-expression", localVarApiClient.parameterToString(xVTEXClusterExpression));
        }

        if (xVTEXStartDate != null) {
            localVarHeaderParams.put("X-VTEX-start-date", localVarApiClient.parameterToString(xVTEXStartDate));
        }

        if (xVTEXEndDate != null) {
            localVarHeaderParams.put("X-VTEX-end-date", localVarApiClient.parameterToString(xVTEXEndDate));
        }

        if (xVTEXAccumulateWithManualPrices != null) {
            localVarHeaderParams.put("X-VTEX-accumulate-with-manual-prices", localVarApiClient.parameterToString(xVTEXAccumulateWithManualPrices));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/csv"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiRnbPvtImportCalculatorConfigurationPromotionIdPutValidateBeforeCall(String contentType, String accept, String xVTEXCalculatorName, String xVTEXStartDate, String xVTEXEndDate, Boolean xVTEXAccumulateWithManualPrices, String promotionId, Boolean xVTEXCumulative, String xVTEXClusterOperator, String xVTEXClusterExpression, File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiRnbPvtImportCalculatorConfigurationPromotionIdPut(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiRnbPvtImportCalculatorConfigurationPromotionIdPut(Async)");
        }

        // verify the required parameter 'xVTEXCalculatorName' is set
        if (xVTEXCalculatorName == null) {
            throw new ApiException("Missing the required parameter 'xVTEXCalculatorName' when calling apiRnbPvtImportCalculatorConfigurationPromotionIdPut(Async)");
        }

        // verify the required parameter 'xVTEXStartDate' is set
        if (xVTEXStartDate == null) {
            throw new ApiException("Missing the required parameter 'xVTEXStartDate' when calling apiRnbPvtImportCalculatorConfigurationPromotionIdPut(Async)");
        }

        // verify the required parameter 'xVTEXEndDate' is set
        if (xVTEXEndDate == null) {
            throw new ApiException("Missing the required parameter 'xVTEXEndDate' when calling apiRnbPvtImportCalculatorConfigurationPromotionIdPut(Async)");
        }

        // verify the required parameter 'xVTEXAccumulateWithManualPrices' is set
        if (xVTEXAccumulateWithManualPrices == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAccumulateWithManualPrices' when calling apiRnbPvtImportCalculatorConfigurationPromotionIdPut(Async)");
        }

        // verify the required parameter 'promotionId' is set
        if (promotionId == null) {
            throw new ApiException("Missing the required parameter 'promotionId' when calling apiRnbPvtImportCalculatorConfigurationPromotionIdPut(Async)");
        }

        return apiRnbPvtImportCalculatorConfigurationPromotionIdPutCall(contentType, accept, xVTEXCalculatorName, xVTEXStartDate, xVTEXEndDate, xVTEXAccumulateWithManualPrices, promotionId, xVTEXCumulative, xVTEXClusterOperator, xVTEXClusterExpression, body, _callback);

    }

    /**
     * Update Multiple SKU Promotion
     * Updates information from a Multiple SKU Promotion. This scenario allows to create a single promotion for multiples SKUs with the Percentage Effect.    &gt; ⚠️   &gt;  &gt; The limit of SKUs on a Multiple Effects promotion is 400.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param xVTEXCalculatorName Promotion Name. (required)
     * @param xVTEXStartDate Promotion start date. (required)
     * @param xVTEXEndDate Promotion end date. (required)
     * @param xVTEXAccumulateWithManualPrices Condition that will accumulate the Promotion with manual prices or not. (required)
     * @param promotionId Promotion unique identifier. (required)
     * @param xVTEXCumulative Defines if the Promotion is cumulative with other promotions. (optional)
     * @param xVTEXClusterOperator This header allows implementing the Promotion in multiples client clusters. You can set the value as &#x60;all&#x60; - the Promotion will be valid to all the clusters - or &#x60;any&#x60; - the Promotion will be valid to any of the clusters. (optional)
     * @param xVTEXClusterExpression Cluster that will be included in the Promotion. To add multiple clusters, create a header for each one of them. (optional)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public void apiRnbPvtImportCalculatorConfigurationPromotionIdPut(String contentType, String accept, String xVTEXCalculatorName, String xVTEXStartDate, String xVTEXEndDate, Boolean xVTEXAccumulateWithManualPrices, String promotionId, Boolean xVTEXCumulative, String xVTEXClusterOperator, String xVTEXClusterExpression, File body) throws ApiException {
        apiRnbPvtImportCalculatorConfigurationPromotionIdPutWithHttpInfo(contentType, accept, xVTEXCalculatorName, xVTEXStartDate, xVTEXEndDate, xVTEXAccumulateWithManualPrices, promotionId, xVTEXCumulative, xVTEXClusterOperator, xVTEXClusterExpression, body);
    }

    /**
     * Update Multiple SKU Promotion
     * Updates information from a Multiple SKU Promotion. This scenario allows to create a single promotion for multiples SKUs with the Percentage Effect.    &gt; ⚠️   &gt;  &gt; The limit of SKUs on a Multiple Effects promotion is 400.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param xVTEXCalculatorName Promotion Name. (required)
     * @param xVTEXStartDate Promotion start date. (required)
     * @param xVTEXEndDate Promotion end date. (required)
     * @param xVTEXAccumulateWithManualPrices Condition that will accumulate the Promotion with manual prices or not. (required)
     * @param promotionId Promotion unique identifier. (required)
     * @param xVTEXCumulative Defines if the Promotion is cumulative with other promotions. (optional)
     * @param xVTEXClusterOperator This header allows implementing the Promotion in multiples client clusters. You can set the value as &#x60;all&#x60; - the Promotion will be valid to all the clusters - or &#x60;any&#x60; - the Promotion will be valid to any of the clusters. (optional)
     * @param xVTEXClusterExpression Cluster that will be included in the Promotion. To add multiple clusters, create a header for each one of them. (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiRnbPvtImportCalculatorConfigurationPromotionIdPutWithHttpInfo(String contentType, String accept, String xVTEXCalculatorName, String xVTEXStartDate, String xVTEXEndDate, Boolean xVTEXAccumulateWithManualPrices, String promotionId, Boolean xVTEXCumulative, String xVTEXClusterOperator, String xVTEXClusterExpression, File body) throws ApiException {
        okhttp3.Call localVarCall = apiRnbPvtImportCalculatorConfigurationPromotionIdPutValidateBeforeCall(contentType, accept, xVTEXCalculatorName, xVTEXStartDate, xVTEXEndDate, xVTEXAccumulateWithManualPrices, promotionId, xVTEXCumulative, xVTEXClusterOperator, xVTEXClusterExpression, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Multiple SKU Promotion (asynchronously)
     * Updates information from a Multiple SKU Promotion. This scenario allows to create a single promotion for multiples SKUs with the Percentage Effect.    &gt; ⚠️   &gt;  &gt; The limit of SKUs on a Multiple Effects promotion is 400.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param xVTEXCalculatorName Promotion Name. (required)
     * @param xVTEXStartDate Promotion start date. (required)
     * @param xVTEXEndDate Promotion end date. (required)
     * @param xVTEXAccumulateWithManualPrices Condition that will accumulate the Promotion with manual prices or not. (required)
     * @param promotionId Promotion unique identifier. (required)
     * @param xVTEXCumulative Defines if the Promotion is cumulative with other promotions. (optional)
     * @param xVTEXClusterOperator This header allows implementing the Promotion in multiples client clusters. You can set the value as &#x60;all&#x60; - the Promotion will be valid to all the clusters - or &#x60;any&#x60; - the Promotion will be valid to any of the clusters. (optional)
     * @param xVTEXClusterExpression Cluster that will be included in the Promotion. To add multiple clusters, create a header for each one of them. (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiRnbPvtImportCalculatorConfigurationPromotionIdPutAsync(String contentType, String accept, String xVTEXCalculatorName, String xVTEXStartDate, String xVTEXEndDate, Boolean xVTEXAccumulateWithManualPrices, String promotionId, Boolean xVTEXCumulative, String xVTEXClusterOperator, String xVTEXClusterExpression, File body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiRnbPvtImportCalculatorConfigurationPromotionIdPutValidateBeforeCall(contentType, accept, xVTEXCalculatorName, xVTEXStartDate, xVTEXEndDate, xVTEXAccumulateWithManualPrices, promotionId, xVTEXCumulative, xVTEXClusterOperator, xVTEXClusterExpression, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for archivePromotion
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param idCalculatorConfiguration Promotion ID or tax ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archivePromotionCall(String contentType, String accept, String idCalculatorConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rnb/pvt/archive/calculatorConfiguration/{idCalculatorConfiguration}"
            .replace("{" + "idCalculatorConfiguration" + "}", localVarApiClient.escapeString(idCalculatorConfiguration.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archivePromotionValidateBeforeCall(String contentType, String accept, String idCalculatorConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling archivePromotion(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling archivePromotion(Async)");
        }

        // verify the required parameter 'idCalculatorConfiguration' is set
        if (idCalculatorConfiguration == null) {
            throw new ApiException("Missing the required parameter 'idCalculatorConfiguration' when calling archivePromotion(Async)");
        }

        return archivePromotionCall(contentType, accept, idCalculatorConfiguration, _callback);

    }

    /**
     * Archive Promotion or Tax
     * Archives a Promotion or Tax by its ID.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param idCalculatorConfiguration Promotion ID or tax ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void archivePromotion(String contentType, String accept, String idCalculatorConfiguration) throws ApiException {
        archivePromotionWithHttpInfo(contentType, accept, idCalculatorConfiguration);
    }

    /**
     * Archive Promotion or Tax
     * Archives a Promotion or Tax by its ID.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param idCalculatorConfiguration Promotion ID or tax ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> archivePromotionWithHttpInfo(String contentType, String accept, String idCalculatorConfiguration) throws ApiException {
        okhttp3.Call localVarCall = archivePromotionValidateBeforeCall(contentType, accept, idCalculatorConfiguration, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Archive Promotion or Tax (asynchronously)
     * Archives a Promotion or Tax by its ID.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param idCalculatorConfiguration Promotion ID or tax ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archivePromotionAsync(String contentType, String accept, String idCalculatorConfiguration, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = archivePromotionValidateBeforeCall(contentType, accept, idCalculatorConfiguration, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createOrUpdateCalculatorConfiguration
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param createOrUpdateCalculatorConfigurationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrUpdateCalculatorConfigurationCall(String contentType, String accept, CreateOrUpdateCalculatorConfigurationRequest createOrUpdateCalculatorConfigurationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrUpdateCalculatorConfigurationRequest;

        // create path and map variables
        String localVarPath = "/api/rnb/pvt/calculatorconfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateCalculatorConfigurationValidateBeforeCall(String contentType, String accept, CreateOrUpdateCalculatorConfigurationRequest createOrUpdateCalculatorConfigurationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createOrUpdateCalculatorConfiguration(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createOrUpdateCalculatorConfiguration(Async)");
        }

        // verify the required parameter 'createOrUpdateCalculatorConfigurationRequest' is set
        if (createOrUpdateCalculatorConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrUpdateCalculatorConfigurationRequest' when calling createOrUpdateCalculatorConfiguration(Async)");
        }

        return createOrUpdateCalculatorConfigurationCall(contentType, accept, createOrUpdateCalculatorConfigurationRequest, _callback);

    }

    /**
     * Create or Update Promotion or Tax
     * Creates or updates a specific Promotion by its Promotion ID or a specific Tax by its Tax ID.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param createOrUpdateCalculatorConfigurationRequest  (required)
     * @return CreateOrUpdateCalculatorConfiguration200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrUpdateCalculatorConfiguration200Response createOrUpdateCalculatorConfiguration(String contentType, String accept, CreateOrUpdateCalculatorConfigurationRequest createOrUpdateCalculatorConfigurationRequest) throws ApiException {
        ApiResponse<CreateOrUpdateCalculatorConfiguration200Response> localVarResp = createOrUpdateCalculatorConfigurationWithHttpInfo(contentType, accept, createOrUpdateCalculatorConfigurationRequest);
        return localVarResp.getData();
    }

    /**
     * Create or Update Promotion or Tax
     * Creates or updates a specific Promotion by its Promotion ID or a specific Tax by its Tax ID.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param createOrUpdateCalculatorConfigurationRequest  (required)
     * @return ApiResponse&lt;CreateOrUpdateCalculatorConfiguration200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateOrUpdateCalculatorConfiguration200Response> createOrUpdateCalculatorConfigurationWithHttpInfo(String contentType, String accept, CreateOrUpdateCalculatorConfigurationRequest createOrUpdateCalculatorConfigurationRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateCalculatorConfigurationValidateBeforeCall(contentType, accept, createOrUpdateCalculatorConfigurationRequest, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateCalculatorConfiguration200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or Update Promotion or Tax (asynchronously)
     * Creates or updates a specific Promotion by its Promotion ID or a specific Tax by its Tax ID.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param createOrUpdateCalculatorConfigurationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrUpdateCalculatorConfigurationAsync(String contentType, String accept, CreateOrUpdateCalculatorConfigurationRequest createOrUpdateCalculatorConfigurationRequest, final ApiCallback<CreateOrUpdateCalculatorConfiguration200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateCalculatorConfigurationValidateBeforeCall(contentType, accept, createOrUpdateCalculatorConfigurationRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateCalculatorConfiguration200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllBenefits
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllBenefitsCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rnb/pvt/benefits/calculatorconfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllBenefitsValidateBeforeCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getAllBenefits(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getAllBenefits(Async)");
        }

        return getAllBenefitsCall(contentType, accept, _callback);

    }

    /**
     * Get All Promotions
     * Retrieves all promotions from an account.     &gt; 📘 Onboarding guide   &gt;  &gt; Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about the Promotions and is organized by focusing on the developer&#39;s journey.    
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return GetAllBenefits200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAllBenefits200Response getAllBenefits(String contentType, String accept) throws ApiException {
        ApiResponse<GetAllBenefits200Response> localVarResp = getAllBenefitsWithHttpInfo(contentType, accept);
        return localVarResp.getData();
    }

    /**
     * Get All Promotions
     * Retrieves all promotions from an account.     &gt; 📘 Onboarding guide   &gt;  &gt; Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about the Promotions and is organized by focusing on the developer&#39;s journey.    
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;GetAllBenefits200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllBenefits200Response> getAllBenefitsWithHttpInfo(String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = getAllBenefitsValidateBeforeCall(contentType, accept, null);
        Type localVarReturnType = new TypeToken<GetAllBenefits200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Promotions (asynchronously)
     * Retrieves all promotions from an account.     &gt; 📘 Onboarding guide   &gt;  &gt; Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about the Promotions and is organized by focusing on the developer&#39;s journey.    
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllBenefitsAsync(String contentType, String accept, final ApiCallback<GetAllBenefits200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllBenefitsValidateBeforeCall(contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<GetAllBenefits200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllTaxes
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllTaxesCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rnb/pvt/taxes/calculatorconfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllTaxesValidateBeforeCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getAllTaxes(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getAllTaxes(Async)");
        }

        return getAllTaxesCall(contentType, accept, _callback);

    }

    /**
     * Get All Taxes
     * Retrieves all taxes from an account.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return GetAllTaxes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAllTaxes200Response getAllTaxes(String contentType, String accept) throws ApiException {
        ApiResponse<GetAllTaxes200Response> localVarResp = getAllTaxesWithHttpInfo(contentType, accept);
        return localVarResp.getData();
    }

    /**
     * Get All Taxes
     * Retrieves all taxes from an account.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;GetAllTaxes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllTaxes200Response> getAllTaxesWithHttpInfo(String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = getAllTaxesValidateBeforeCall(contentType, accept, null);
        Type localVarReturnType = new TypeToken<GetAllTaxes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get All Taxes (asynchronously)
     * Retrieves all taxes from an account.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllTaxesAsync(String contentType, String accept, final ApiCallback<GetAllTaxes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllTaxesValidateBeforeCall(contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<GetAllTaxes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArchivedPromotions
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArchivedPromotionsCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rnb/pvt/archive/benefits/calculatorConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArchivedPromotionsValidateBeforeCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getArchivedPromotions(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getArchivedPromotions(Async)");
        }

        return getArchivedPromotionsCall(contentType, accept, _callback);

    }

    /**
     * List Archived Promotions
     * Lists all archived promotions.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return GetArchivedPromotions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetArchivedPromotions200Response getArchivedPromotions(String contentType, String accept) throws ApiException {
        ApiResponse<GetArchivedPromotions200Response> localVarResp = getArchivedPromotionsWithHttpInfo(contentType, accept);
        return localVarResp.getData();
    }

    /**
     * List Archived Promotions
     * Lists all archived promotions.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;GetArchivedPromotions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetArchivedPromotions200Response> getArchivedPromotionsWithHttpInfo(String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = getArchivedPromotionsValidateBeforeCall(contentType, accept, null);
        Type localVarReturnType = new TypeToken<GetArchivedPromotions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Archived Promotions (asynchronously)
     * Lists all archived promotions.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArchivedPromotionsAsync(String contentType, String accept, final ApiCallback<GetArchivedPromotions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArchivedPromotionsValidateBeforeCall(contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<GetArchivedPromotions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getArchivedTaxes
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArchivedTaxesCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rnb/pvt/archive/taxes/calculatorConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArchivedTaxesValidateBeforeCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getArchivedTaxes(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getArchivedTaxes(Async)");
        }

        return getArchivedTaxesCall(contentType, accept, _callback);

    }

    /**
     * List Archived Taxes
     * Lists all archived taxes.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return GetArchivedTaxes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetArchivedTaxes200Response getArchivedTaxes(String contentType, String accept) throws ApiException {
        ApiResponse<GetArchivedTaxes200Response> localVarResp = getArchivedTaxesWithHttpInfo(contentType, accept);
        return localVarResp.getData();
    }

    /**
     * List Archived Taxes
     * Lists all archived taxes.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @return ApiResponse&lt;GetArchivedTaxes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetArchivedTaxes200Response> getArchivedTaxesWithHttpInfo(String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = getArchivedTaxesValidateBeforeCall(contentType, accept, null);
        Type localVarReturnType = new TypeToken<GetArchivedTaxes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Archived Taxes (asynchronously)
     * Lists all archived taxes.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getArchivedTaxesAsync(String contentType, String accept, final ApiCallback<GetArchivedTaxes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArchivedTaxesValidateBeforeCall(contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<GetArchivedTaxes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCalculatorConfigurationById
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param idCalculatorConfiguration Promotion ID or tax ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalculatorConfigurationByIdCall(String contentType, String accept, String idCalculatorConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rnb/pvt/calculatorconfiguration/{idCalculatorConfiguration}"
            .replace("{" + "idCalculatorConfiguration" + "}", localVarApiClient.escapeString(idCalculatorConfiguration.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "Promotion",
            "Tax"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCalculatorConfigurationByIdValidateBeforeCall(String contentType, String accept, String idCalculatorConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getCalculatorConfigurationById(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getCalculatorConfigurationById(Async)");
        }

        // verify the required parameter 'idCalculatorConfiguration' is set
        if (idCalculatorConfiguration == null) {
            throw new ApiException("Missing the required parameter 'idCalculatorConfiguration' when calling getCalculatorConfigurationById(Async)");
        }

        return getCalculatorConfigurationByIdCall(contentType, accept, idCalculatorConfiguration, _callback);

    }

    /**
     * Get Promotion or Tax by ID
     * Retrieves a specific promotion by its Promotion ID or a specific tax by its Tax ID.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param idCalculatorConfiguration Promotion ID or tax ID. (required)
     * @return GetCalculatorConfigurationById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCalculatorConfigurationById200Response getCalculatorConfigurationById(String contentType, String accept, String idCalculatorConfiguration) throws ApiException {
        ApiResponse<GetCalculatorConfigurationById200Response> localVarResp = getCalculatorConfigurationByIdWithHttpInfo(contentType, accept, idCalculatorConfiguration);
        return localVarResp.getData();
    }

    /**
     * Get Promotion or Tax by ID
     * Retrieves a specific promotion by its Promotion ID or a specific tax by its Tax ID.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param idCalculatorConfiguration Promotion ID or tax ID. (required)
     * @return ApiResponse&lt;GetCalculatorConfigurationById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCalculatorConfigurationById200Response> getCalculatorConfigurationByIdWithHttpInfo(String contentType, String accept, String idCalculatorConfiguration) throws ApiException {
        okhttp3.Call localVarCall = getCalculatorConfigurationByIdValidateBeforeCall(contentType, accept, idCalculatorConfiguration, null);
        Type localVarReturnType = new TypeToken<GetCalculatorConfigurationById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Promotion or Tax by ID (asynchronously)
     * Retrieves a specific promotion by its Promotion ID or a specific tax by its Tax ID.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param idCalculatorConfiguration Promotion ID or tax ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalculatorConfigurationByIdAsync(String contentType, String accept, String idCalculatorConfiguration, final ApiCallback<GetCalculatorConfigurationById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCalculatorConfigurationByIdValidateBeforeCall(contentType, accept, idCalculatorConfiguration, _callback);
        Type localVarReturnType = new TypeToken<GetCalculatorConfigurationById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unarchivePromotion
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param idCalculatorConfiguration Promotion ID or tax ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unarchivePromotionCall(String contentType, String accept, String idCalculatorConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/rnb/pvt/unarchive/calculatorConfiguration/{idCalculatorConfiguration}"
            .replace("{" + "idCalculatorConfiguration" + "}", localVarApiClient.escapeString(idCalculatorConfiguration.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unarchivePromotionValidateBeforeCall(String contentType, String accept, String idCalculatorConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling unarchivePromotion(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling unarchivePromotion(Async)");
        }

        // verify the required parameter 'idCalculatorConfiguration' is set
        if (idCalculatorConfiguration == null) {
            throw new ApiException("Missing the required parameter 'idCalculatorConfiguration' when calling unarchivePromotion(Async)");
        }

        return unarchivePromotionCall(contentType, accept, idCalculatorConfiguration, _callback);

    }

    /**
     * Unarchive Promotion or Tax
     * Unarchives a Promotion or Tax by its ID.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param idCalculatorConfiguration Promotion ID or tax ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void unarchivePromotion(String contentType, String accept, String idCalculatorConfiguration) throws ApiException {
        unarchivePromotionWithHttpInfo(contentType, accept, idCalculatorConfiguration);
    }

    /**
     * Unarchive Promotion or Tax
     * Unarchives a Promotion or Tax by its ID.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param idCalculatorConfiguration Promotion ID or tax ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unarchivePromotionWithHttpInfo(String contentType, String accept, String idCalculatorConfiguration) throws ApiException {
        okhttp3.Call localVarCall = unarchivePromotionValidateBeforeCall(contentType, accept, idCalculatorConfiguration, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unarchive Promotion or Tax (asynchronously)
     * Unarchives a Promotion or Tax by its ID.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param idCalculatorConfiguration Promotion ID or tax ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unarchivePromotionAsync(String contentType, String accept, String idCalculatorConfiguration, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unarchivePromotionValidateBeforeCall(contentType, accept, idCalculatorConfiguration, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
