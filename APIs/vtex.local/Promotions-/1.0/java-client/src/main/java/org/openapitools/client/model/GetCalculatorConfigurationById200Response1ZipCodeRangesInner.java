/*
 * Promotions & Taxes API
 *   > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Promotions and is organized by focusing on the developer's journey.     The Promotions & Taxes API allows you to manage and retrieve all promotions, coupons and tax rules from your VTEX store.     ## Index     ### Coupons   `POST` [Create multiple coupons](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-multiple-coupons)   `POST` [Create coupon](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-coupon)   `GET` [Get coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getbycouponcode)   `GET` [Get archived coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/getarchivedbycouponcode)   `POST` [Archive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/archivebycouponcode)   `POST` [Update coupon](https://developers.vtex.com/vtex-rest-api/reference/update)   `GET` [Get all coupons](https://developers.vtex.com/vtex-rest-api/reference/getall)   `POST` [Coupon Massive Generation](https://developers.vtex.com/vtex-rest-api/reference/massivegeneration)   `GET` [Get coupon usage](https://developers.vtex.com/vtex-rest-api/reference/getusage)   `POST` [Unarchive coupon by coupon code](https://developers.vtex.com/vtex-rest-api/reference/unarchivebycouponcode)     ### Promotions and Taxes   `GET` [Get All Promotions](https://developers.vtex.com/vtex-rest-api/reference/getallbenefits)   `GET` [Get All Taxes](https://developers.vtex.com/vtex-rest-api/reference/getalltaxes)   `GET` [Get Promotion or Tax By ID](https://developers.vtex.com/vtex-rest-api/reference/getcalculatorconfigurationbyid)   `POST` [Create or Update Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/createorupdatecalculatorconfiguration)   `POST` [Create Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/post_api-rnb-pvt-import-calculatorconfiguration)   `PUT` [Update Multiple SKU Promotion](https://developers.vtex.com/vtex-rest-api/reference/put_api-rnb-pvt-import-calculatorconfiguration-promotionid)   `POST` [Archive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/archivepromotion-1)   `POST` [Unarchive Promotion or Tax](https://developers.vtex.com/vtex-rest-api/reference/unarchivepromotion-1)   `GET` [List archived Promotions](https://developers.vtex.com/vtex-rest-api/reference/getarchivedpromotions)   `GET` [List archived Taxes](https://developers.vtex.com/vtex-rest-api/reference/getarchivedtaxes)       ### Campaign Audiences   `GET` [Get campaign audience configuration](https://developers.vtex.com/vtex-rest-api/reference/getcampaignconfiguration)   `POST` [Create campaign audience](https://developers.vtex.com/vtex-rest-api/reference/setcampaignconfiguration)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetCalculatorConfigurationById200Response1ZipCodeRangesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:03.993078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCalculatorConfigurationById200Response1ZipCodeRangesInner {
  public static final String SERIALIZED_NAME_INCLUSIVE = "inclusive";
  @SerializedName(SERIALIZED_NAME_INCLUSIVE)
  private Boolean inclusive;

  public static final String SERIALIZED_NAME_ZIP_CODE_FROM = "zipCodeFrom";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE_FROM)
  private String zipCodeFrom;

  public static final String SERIALIZED_NAME_ZIP_CODE_TO = "zipCodeTo";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE_TO)
  private String zipCodeTo;

  public GetCalculatorConfigurationById200Response1ZipCodeRangesInner() {
  }

  public GetCalculatorConfigurationById200Response1ZipCodeRangesInner inclusive(Boolean inclusive) {
    this.inclusive = inclusive;
    return this;
  }

  /**
   * Defines if the zip code range is included in the Tax.
   * @return inclusive
   */
  @javax.annotation.Nullable
  public Boolean getInclusive() {
    return inclusive;
  }

  public void setInclusive(Boolean inclusive) {
    this.inclusive = inclusive;
  }


  public GetCalculatorConfigurationById200Response1ZipCodeRangesInner zipCodeFrom(String zipCodeFrom) {
    this.zipCodeFrom = zipCodeFrom;
    return this;
  }

  /**
   * Initial Zip Code.
   * @return zipCodeFrom
   */
  @javax.annotation.Nullable
  public String getZipCodeFrom() {
    return zipCodeFrom;
  }

  public void setZipCodeFrom(String zipCodeFrom) {
    this.zipCodeFrom = zipCodeFrom;
  }


  public GetCalculatorConfigurationById200Response1ZipCodeRangesInner zipCodeTo(String zipCodeTo) {
    this.zipCodeTo = zipCodeTo;
    return this;
  }

  /**
   * Final Zip Code.
   * @return zipCodeTo
   */
  @javax.annotation.Nullable
  public String getZipCodeTo() {
    return zipCodeTo;
  }

  public void setZipCodeTo(String zipCodeTo) {
    this.zipCodeTo = zipCodeTo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCalculatorConfigurationById200Response1ZipCodeRangesInner getCalculatorConfigurationById200Response1ZipCodeRangesInner = (GetCalculatorConfigurationById200Response1ZipCodeRangesInner) o;
    return Objects.equals(this.inclusive, getCalculatorConfigurationById200Response1ZipCodeRangesInner.inclusive) &&
        Objects.equals(this.zipCodeFrom, getCalculatorConfigurationById200Response1ZipCodeRangesInner.zipCodeFrom) &&
        Objects.equals(this.zipCodeTo, getCalculatorConfigurationById200Response1ZipCodeRangesInner.zipCodeTo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inclusive, zipCodeFrom, zipCodeTo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCalculatorConfigurationById200Response1ZipCodeRangesInner {\n");
    sb.append("    inclusive: ").append(toIndentedString(inclusive)).append("\n");
    sb.append("    zipCodeFrom: ").append(toIndentedString(zipCodeFrom)).append("\n");
    sb.append("    zipCodeTo: ").append(toIndentedString(zipCodeTo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inclusive");
    openapiFields.add("zipCodeFrom");
    openapiFields.add("zipCodeTo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCalculatorConfigurationById200Response1ZipCodeRangesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCalculatorConfigurationById200Response1ZipCodeRangesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCalculatorConfigurationById200Response1ZipCodeRangesInner is not found in the empty JSON string", GetCalculatorConfigurationById200Response1ZipCodeRangesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCalculatorConfigurationById200Response1ZipCodeRangesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCalculatorConfigurationById200Response1ZipCodeRangesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("zipCodeFrom") != null && !jsonObj.get("zipCodeFrom").isJsonNull()) && !jsonObj.get("zipCodeFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCodeFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCodeFrom").toString()));
      }
      if ((jsonObj.get("zipCodeTo") != null && !jsonObj.get("zipCodeTo").isJsonNull()) && !jsonObj.get("zipCodeTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCodeTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCodeTo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCalculatorConfigurationById200Response1ZipCodeRangesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCalculatorConfigurationById200Response1ZipCodeRangesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCalculatorConfigurationById200Response1ZipCodeRangesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCalculatorConfigurationById200Response1ZipCodeRangesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCalculatorConfigurationById200Response1ZipCodeRangesInner>() {
           @Override
           public void write(JsonWriter out, GetCalculatorConfigurationById200Response1ZipCodeRangesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCalculatorConfigurationById200Response1ZipCodeRangesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCalculatorConfigurationById200Response1ZipCodeRangesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCalculatorConfigurationById200Response1ZipCodeRangesInner
   * @throws IOException if the JSON string is invalid with respect to GetCalculatorConfigurationById200Response1ZipCodeRangesInner
   */
  public static GetCalculatorConfigurationById200Response1ZipCodeRangesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCalculatorConfigurationById200Response1ZipCodeRangesInner.class);
  }

  /**
   * Convert an instance of GetCalculatorConfigurationById200Response1ZipCodeRangesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

