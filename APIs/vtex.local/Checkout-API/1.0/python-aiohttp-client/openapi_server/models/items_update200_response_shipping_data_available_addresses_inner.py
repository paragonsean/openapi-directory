# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemsUpdate200ResponseShippingDataAvailableAddressesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_id: str=None, address_type: str=None, city: str=None, complement: str=None, country: str=None, geo_coordinates: List[str]=None, is_disposable: bool=None, neighborhood: str=None, number: str=None, postal_code: str=None, receiver_name: str=None, reference: str=None, state: str=None, street: str=None):
        """ItemsUpdate200ResponseShippingDataAvailableAddressesInner - a model defined in OpenAPI

        :param address_id: The address_id of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :param address_type: The address_type of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :param city: The city of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :param complement: The complement of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :param country: The country of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :param geo_coordinates: The geo_coordinates of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :param is_disposable: The is_disposable of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :param neighborhood: The neighborhood of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :param number: The number of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :param postal_code: The postal_code of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :param receiver_name: The receiver_name of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :param reference: The reference of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :param state: The state of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :param street: The street of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        """
        self.openapi_types = {
            'address_id': str,
            'address_type': str,
            'city': str,
            'complement': str,
            'country': str,
            'geo_coordinates': List[str],
            'is_disposable': bool,
            'neighborhood': str,
            'number': str,
            'postal_code': str,
            'receiver_name': str,
            'reference': str,
            'state': str,
            'street': str
        }

        self.attribute_map = {
            'address_id': 'addressId',
            'address_type': 'addressType',
            'city': 'city',
            'complement': 'complement',
            'country': 'country',
            'geo_coordinates': 'geoCoordinates',
            'is_disposable': 'isDisposable',
            'neighborhood': 'neighborhood',
            'number': 'number',
            'postal_code': 'postalCode',
            'receiver_name': 'receiverName',
            'reference': 'reference',
            'state': 'state',
            'street': 'street'
        }

        self._address_id = address_id
        self._address_type = address_type
        self._city = city
        self._complement = complement
        self._country = country
        self._geo_coordinates = geo_coordinates
        self._is_disposable = is_disposable
        self._neighborhood = neighborhood
        self._number = number
        self._postal_code = postal_code
        self._receiver_name = receiver_name
        self._reference = reference
        self._state = state
        self._street = street

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemsUpdate200ResponseShippingDataAvailableAddressesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemsUpdate_200_response_shippingData_availableAddresses_inner of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_id(self):
        """Gets the address_id of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Address ID.

        :return: The address_id of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :rtype: str
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Address ID.

        :param address_id: The address_id of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :type address_id: str
        """

        self._address_id = address_id

    @property
    def address_type(self):
        """Gets the address_type of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Type of address. For example, `Residential` or `Pickup`.

        :return: The address_type of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :rtype: str
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Type of address. For example, `Residential` or `Pickup`.

        :param address_type: The address_type of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :type address_type: str
        """

        self._address_type = address_type

    @property
    def city(self):
        """Gets the city of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        City of the shipping address.

        :return: The city of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        City of the shipping address.

        :param city: The city of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :type city: str
        """

        self._city = city

    @property
    def complement(self):
        """Gets the complement of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Complement to the shipping address, in case it applies.

        :return: The complement of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :rtype: str
        """
        return self._complement

    @complement.setter
    def complement(self, complement):
        """Sets the complement of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Complement to the shipping address, in case it applies.

        :param complement: The complement of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :type complement: str
        """

        self._complement = complement

    @property
    def country(self):
        """Gets the country of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Three letter ISO code of the country of the shipping address.

        :return: The country of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Three letter ISO code of the country of the shipping address.

        :param country: The country of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :type country: str
        """

        self._country = country

    @property
    def geo_coordinates(self):
        """Gets the geo_coordinates of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Array with two strings with geocoordinates, first latitude, then longitude.

        :return: The geo_coordinates of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :rtype: List[str]
        """
        return self._geo_coordinates

    @geo_coordinates.setter
    def geo_coordinates(self, geo_coordinates):
        """Sets the geo_coordinates of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Array with two strings with geocoordinates, first latitude, then longitude.

        :param geo_coordinates: The geo_coordinates of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :type geo_coordinates: List[str]
        """

        self._geo_coordinates = geo_coordinates

    @property
    def is_disposable(self):
        """Gets the is_disposable of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Indicates whether address is disposable.

        :return: The is_disposable of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :rtype: bool
        """
        return self._is_disposable

    @is_disposable.setter
    def is_disposable(self, is_disposable):
        """Sets the is_disposable of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Indicates whether address is disposable.

        :param is_disposable: The is_disposable of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :type is_disposable: bool
        """

        self._is_disposable = is_disposable

    @property
    def neighborhood(self):
        """Gets the neighborhood of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Neighborhood of the shipping address.

        :return: The neighborhood of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood):
        """Sets the neighborhood of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Neighborhood of the shipping address.

        :param neighborhood: The neighborhood of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :type neighborhood: str
        """

        self._neighborhood = neighborhood

    @property
    def number(self):
        """Gets the number of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Number of the building, house or apartment in the shipping address.

        :return: The number of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Number of the building, house or apartment in the shipping address.

        :param number: The number of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :type number: str
        """

        self._number = number

    @property
    def postal_code(self):
        """Gets the postal_code of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Postal code.

        :return: The postal_code of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Postal code.

        :param postal_code: The postal_code of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def receiver_name(self):
        """Gets the receiver_name of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Name of the person who is going to receive the order.

        :return: The receiver_name of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :rtype: str
        """
        return self._receiver_name

    @receiver_name.setter
    def receiver_name(self, receiver_name):
        """Sets the receiver_name of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Name of the person who is going to receive the order.

        :param receiver_name: The receiver_name of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :type receiver_name: str
        """

        self._receiver_name = receiver_name

    @property
    def reference(self):
        """Gets the reference of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Complement that might help locate the shipping address more precisely in case of delivery.

        :return: The reference of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Complement that might help locate the shipping address more precisely in case of delivery.

        :param reference: The reference of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :type reference: str
        """

        self._reference = reference

    @property
    def state(self):
        """Gets the state of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        State of the shipping address.

        :return: The state of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        State of the shipping address.

        :param state: The state of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :type state: str
        """

        self._state = state

    @property
    def street(self):
        """Gets the street of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Street of the shipping address.

        :return: The street of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.

        Street of the shipping address.

        :param street: The street of this ItemsUpdate200ResponseShippingDataAvailableAddressesInner.
        :type street: str
        """

        self._street = street
