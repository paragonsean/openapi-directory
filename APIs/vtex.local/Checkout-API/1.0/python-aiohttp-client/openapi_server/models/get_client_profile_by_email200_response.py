# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_coupons200_response_available_addresses_inner import AddCoupons200ResponseAvailableAddressesInner
from openapi_server.models.get_client_profile_by_email200_response_user_profile import GetClientProfileByEmail200ResponseUserProfile
from openapi_server import util


class GetClientProfileByEmail200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_accounts: List[str]=None, available_addresses: List[AddCoupons200ResponseAvailableAddressesInner]=None, is_complete: bool=None, profile_provider: str=None, user_profile: GetClientProfileByEmail200ResponseUserProfile=None, user_profile_id: str=None):
        """GetClientProfileByEmail200Response - a model defined in OpenAPI

        :param available_accounts: The available_accounts of this GetClientProfileByEmail200Response.
        :param available_addresses: The available_addresses of this GetClientProfileByEmail200Response.
        :param is_complete: The is_complete of this GetClientProfileByEmail200Response.
        :param profile_provider: The profile_provider of this GetClientProfileByEmail200Response.
        :param user_profile: The user_profile of this GetClientProfileByEmail200Response.
        :param user_profile_id: The user_profile_id of this GetClientProfileByEmail200Response.
        """
        self.openapi_types = {
            'available_accounts': List[str],
            'available_addresses': List[AddCoupons200ResponseAvailableAddressesInner],
            'is_complete': bool,
            'profile_provider': str,
            'user_profile': GetClientProfileByEmail200ResponseUserProfile,
            'user_profile_id': str
        }

        self.attribute_map = {
            'available_accounts': 'availableAccounts',
            'available_addresses': 'availableAddresses',
            'is_complete': 'isComplete',
            'profile_provider': 'profileProvider',
            'user_profile': 'userProfile',
            'user_profile_id': 'userProfileId'
        }

        self._available_accounts = available_accounts
        self._available_addresses = available_addresses
        self._is_complete = is_complete
        self._profile_provider = profile_provider
        self._user_profile = user_profile
        self._user_profile_id = user_profile_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetClientProfileByEmail200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetClientProfileByEmail_200_response of this GetClientProfileByEmail200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_accounts(self):
        """Gets the available_accounts of this GetClientProfileByEmail200Response.

        Available accounts.

        :return: The available_accounts of this GetClientProfileByEmail200Response.
        :rtype: List[str]
        """
        return self._available_accounts

    @available_accounts.setter
    def available_accounts(self, available_accounts):
        """Sets the available_accounts of this GetClientProfileByEmail200Response.

        Available accounts.

        :param available_accounts: The available_accounts of this GetClientProfileByEmail200Response.
        :type available_accounts: List[str]
        """

        self._available_accounts = available_accounts

    @property
    def available_addresses(self):
        """Gets the available_addresses of this GetClientProfileByEmail200Response.

        Information on each available address.

        :return: The available_addresses of this GetClientProfileByEmail200Response.
        :rtype: List[AddCoupons200ResponseAvailableAddressesInner]
        """
        return self._available_addresses

    @available_addresses.setter
    def available_addresses(self, available_addresses):
        """Sets the available_addresses of this GetClientProfileByEmail200Response.

        Information on each available address.

        :param available_addresses: The available_addresses of this GetClientProfileByEmail200Response.
        :type available_addresses: List[AddCoupons200ResponseAvailableAddressesInner]
        """

        self._available_addresses = available_addresses

    @property
    def is_complete(self):
        """Gets the is_complete of this GetClientProfileByEmail200Response.

        Indicates whether customer profile is complete.

        :return: The is_complete of this GetClientProfileByEmail200Response.
        :rtype: bool
        """
        return self._is_complete

    @is_complete.setter
    def is_complete(self, is_complete):
        """Sets the is_complete of this GetClientProfileByEmail200Response.

        Indicates whether customer profile is complete.

        :param is_complete: The is_complete of this GetClientProfileByEmail200Response.
        :type is_complete: bool
        """

        self._is_complete = is_complete

    @property
    def profile_provider(self):
        """Gets the profile_provider of this GetClientProfileByEmail200Response.

        Profile provider.

        :return: The profile_provider of this GetClientProfileByEmail200Response.
        :rtype: str
        """
        return self._profile_provider

    @profile_provider.setter
    def profile_provider(self, profile_provider):
        """Sets the profile_provider of this GetClientProfileByEmail200Response.

        Profile provider.

        :param profile_provider: The profile_provider of this GetClientProfileByEmail200Response.
        :type profile_provider: str
        """

        self._profile_provider = profile_provider

    @property
    def user_profile(self):
        """Gets the user_profile of this GetClientProfileByEmail200Response.


        :return: The user_profile of this GetClientProfileByEmail200Response.
        :rtype: GetClientProfileByEmail200ResponseUserProfile
        """
        return self._user_profile

    @user_profile.setter
    def user_profile(self, user_profile):
        """Sets the user_profile of this GetClientProfileByEmail200Response.


        :param user_profile: The user_profile of this GetClientProfileByEmail200Response.
        :type user_profile: GetClientProfileByEmail200ResponseUserProfile
        """

        self._user_profile = user_profile

    @property
    def user_profile_id(self):
        """Gets the user_profile_id of this GetClientProfileByEmail200Response.

        Unique ID associated with the customer profile.

        :return: The user_profile_id of this GetClientProfileByEmail200Response.
        :rtype: str
        """
        return self._user_profile_id

    @user_profile_id.setter
    def user_profile_id(self, user_profile_id):
        """Sets the user_profile_id of this GetClientProfileByEmail200Response.

        Unique ID associated with the customer profile.

        :param user_profile_id: The user_profile_id of this GetClientProfileByEmail200Response.
        :type user_profile_id: str
        """

        self._user_profile_id = user_profile_id
