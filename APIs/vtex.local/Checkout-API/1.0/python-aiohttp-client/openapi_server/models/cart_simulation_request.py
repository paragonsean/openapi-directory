# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cart_simulation_request_items_inner import CartSimulationRequestItemsInner
from openapi_server import util


class CartSimulationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, geo_coordinates: List[float]=[-47.924747467041016,-15.832582473754883], items: List[CartSimulationRequestItemsInner]=None, postal_code: str=None):
        """CartSimulationRequest - a model defined in OpenAPI

        :param country: The country of this CartSimulationRequest.
        :param geo_coordinates: The geo_coordinates of this CartSimulationRequest.
        :param items: The items of this CartSimulationRequest.
        :param postal_code: The postal_code of this CartSimulationRequest.
        """
        self.openapi_types = {
            'country': str,
            'geo_coordinates': List[float],
            'items': List[CartSimulationRequestItemsInner],
            'postal_code': str
        }

        self.attribute_map = {
            'country': 'country',
            'geo_coordinates': 'geoCoordinates',
            'items': 'items',
            'postal_code': 'postalCode'
        }

        self._country = country
        self._geo_coordinates = geo_coordinates
        self._items = items
        self._postal_code = postal_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CartSimulationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CartSimulation_request of this CartSimulationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this CartSimulationRequest.

        Three letter ISO code of the country of the shipping address. This value must be sent along with the `postalCode` or `geoCoordinates` values.

        :return: The country of this CartSimulationRequest.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CartSimulationRequest.

        Three letter ISO code of the country of the shipping address. This value must be sent along with the `postalCode` or `geoCoordinates` values.

        :param country: The country of this CartSimulationRequest.
        :type country: str
        """

        self._country = country

    @property
    def geo_coordinates(self):
        """Gets the geo_coordinates of this CartSimulationRequest.

        Array containing two floats with geocoordinates, first longitude, then latitude.

        :return: The geo_coordinates of this CartSimulationRequest.
        :rtype: List[float]
        """
        return self._geo_coordinates

    @geo_coordinates.setter
    def geo_coordinates(self, geo_coordinates):
        """Sets the geo_coordinates of this CartSimulationRequest.

        Array containing two floats with geocoordinates, first longitude, then latitude.

        :param geo_coordinates: The geo_coordinates of this CartSimulationRequest.
        :type geo_coordinates: List[float]
        """

        self._geo_coordinates = geo_coordinates

    @property
    def items(self):
        """Gets the items of this CartSimulationRequest.

        Array containing information about the SKUs inside the cart to be simulated.

        :return: The items of this CartSimulationRequest.
        :rtype: List[CartSimulationRequestItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CartSimulationRequest.

        Array containing information about the SKUs inside the cart to be simulated.

        :param items: The items of this CartSimulationRequest.
        :type items: List[CartSimulationRequestItemsInner]
        """

        self._items = items

    @property
    def postal_code(self):
        """Gets the postal_code of this CartSimulationRequest.

        Postal code.

        :return: The postal_code of this CartSimulationRequest.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CartSimulationRequest.

        Postal code.

        :param postal_code: The postal_code of this CartSimulationRequest.
        :type postal_code: str
        """

        self._postal_code = postal_code
