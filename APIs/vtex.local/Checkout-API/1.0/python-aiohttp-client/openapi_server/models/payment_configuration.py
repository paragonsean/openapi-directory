# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_installments_merge: bool=None, requires_authentication_for_pre_authorized_payment_option: bool=None):
        """PaymentConfiguration - a model defined in OpenAPI

        :param allow_installments_merge: The allow_installments_merge of this PaymentConfiguration.
        :param requires_authentication_for_pre_authorized_payment_option: The requires_authentication_for_pre_authorized_payment_option of this PaymentConfiguration.
        """
        self.openapi_types = {
            'allow_installments_merge': bool,
            'requires_authentication_for_pre_authorized_payment_option': bool
        }

        self.attribute_map = {
            'allow_installments_merge': 'allowInstallmentsMerge',
            'requires_authentication_for_pre_authorized_payment_option': 'requiresAuthenticationForPreAuthorizedPaymentOption'
        }

        self._allow_installments_merge = allow_installments_merge
        self._requires_authentication_for_pre_authorized_payment_option = requires_authentication_for_pre_authorized_payment_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentConfiguration of this PaymentConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_installments_merge(self):
        """Gets the allow_installments_merge of this PaymentConfiguration.

        By default (when `false`), on a multi-seller purchase is on the run, a simple intersection with installments options configured by every seller will be available. When `true`, this option allows a more complex but flexible installment option, since it considers max installments of every seller configuration, even if those don't match. Installment values ​​may not be equal in this case.

        :return: The allow_installments_merge of this PaymentConfiguration.
        :rtype: bool
        """
        return self._allow_installments_merge

    @allow_installments_merge.setter
    def allow_installments_merge(self, allow_installments_merge):
        """Sets the allow_installments_merge of this PaymentConfiguration.

        By default (when `false`), on a multi-seller purchase is on the run, a simple intersection with installments options configured by every seller will be available. When `true`, this option allows a more complex but flexible installment option, since it considers max installments of every seller configuration, even if those don't match. Installment values ​​may not be equal in this case.

        :param allow_installments_merge: The allow_installments_merge of this PaymentConfiguration.
        :type allow_installments_merge: bool
        """

        self._allow_installments_merge = allow_installments_merge

    @property
    def requires_authentication_for_pre_authorized_payment_option(self):
        """Gets the requires_authentication_for_pre_authorized_payment_option of this PaymentConfiguration.

        Determines whether pre-authorized payments require authentication

        :return: The requires_authentication_for_pre_authorized_payment_option of this PaymentConfiguration.
        :rtype: bool
        """
        return self._requires_authentication_for_pre_authorized_payment_option

    @requires_authentication_for_pre_authorized_payment_option.setter
    def requires_authentication_for_pre_authorized_payment_option(self, requires_authentication_for_pre_authorized_payment_option):
        """Sets the requires_authentication_for_pre_authorized_payment_option of this PaymentConfiguration.

        Determines whether pre-authorized payments require authentication

        :param requires_authentication_for_pre_authorized_payment_option: The requires_authentication_for_pre_authorized_payment_option of this PaymentConfiguration.
        :type requires_authentication_for_pre_authorized_payment_option: bool
        """
        if requires_authentication_for_pre_authorized_payment_option is None:
            raise ValueError("Invalid value for `requires_authentication_for_pre_authorized_payment_option`, must not be `None`")

        self._requires_authentication_for_pre_authorized_payment_option = requires_authentication_for_pre_authorized_payment_option
