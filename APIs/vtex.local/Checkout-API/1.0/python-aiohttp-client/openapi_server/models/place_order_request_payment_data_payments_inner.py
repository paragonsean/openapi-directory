# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlaceOrderRequestPaymentDataPaymentsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str='accountID-example', bin: str='2', installments: int=2, payment_system: str='12', reference_value: int=16175, value: int=16175):
        """PlaceOrderRequestPaymentDataPaymentsInner - a model defined in OpenAPI

        :param account_id: The account_id of this PlaceOrderRequestPaymentDataPaymentsInner.
        :param bin: The bin of this PlaceOrderRequestPaymentDataPaymentsInner.
        :param installments: The installments of this PlaceOrderRequestPaymentDataPaymentsInner.
        :param payment_system: The payment_system of this PlaceOrderRequestPaymentDataPaymentsInner.
        :param reference_value: The reference_value of this PlaceOrderRequestPaymentDataPaymentsInner.
        :param value: The value of this PlaceOrderRequestPaymentDataPaymentsInner.
        """
        self.openapi_types = {
            'account_id': str,
            'bin': str,
            'installments': int,
            'payment_system': str,
            'reference_value': int,
            'value': int
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'bin': 'bin',
            'installments': 'installments',
            'payment_system': 'paymentSystem',
            'reference_value': 'referenceValue',
            'value': 'value'
        }

        self._account_id = account_id
        self._bin = bin
        self._installments = installments
        self._payment_system = payment_system
        self._reference_value = reference_value
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaceOrderRequestPaymentDataPaymentsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaceOrder_request_paymentData_payments_inner of this PlaceOrderRequestPaymentDataPaymentsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this PlaceOrderRequestPaymentDataPaymentsInner.

        Account ID.

        :return: The account_id of this PlaceOrderRequestPaymentDataPaymentsInner.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this PlaceOrderRequestPaymentDataPaymentsInner.

        Account ID.

        :param account_id: The account_id of this PlaceOrderRequestPaymentDataPaymentsInner.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def bin(self):
        """Gets the bin of this PlaceOrderRequestPaymentDataPaymentsInner.

        Payment bin.

        :return: The bin of this PlaceOrderRequestPaymentDataPaymentsInner.
        :rtype: str
        """
        return self._bin

    @bin.setter
    def bin(self, bin):
        """Sets the bin of this PlaceOrderRequestPaymentDataPaymentsInner.

        Payment bin.

        :param bin: The bin of this PlaceOrderRequestPaymentDataPaymentsInner.
        :type bin: str
        """

        self._bin = bin

    @property
    def installments(self):
        """Gets the installments of this PlaceOrderRequestPaymentDataPaymentsInner.

        Number of installments.

        :return: The installments of this PlaceOrderRequestPaymentDataPaymentsInner.
        :rtype: int
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this PlaceOrderRequestPaymentDataPaymentsInner.

        Number of installments.

        :param installments: The installments of this PlaceOrderRequestPaymentDataPaymentsInner.
        :type installments: int
        """
        if installments is None:
            raise ValueError("Invalid value for `installments`, must not be `None`")

        self._installments = installments

    @property
    def payment_system(self):
        """Gets the payment_system of this PlaceOrderRequestPaymentDataPaymentsInner.

        Payment system.

        :return: The payment_system of this PlaceOrderRequestPaymentDataPaymentsInner.
        :rtype: str
        """
        return self._payment_system

    @payment_system.setter
    def payment_system(self, payment_system):
        """Sets the payment_system of this PlaceOrderRequestPaymentDataPaymentsInner.

        Payment system.

        :param payment_system: The payment_system of this PlaceOrderRequestPaymentDataPaymentsInner.
        :type payment_system: str
        """
        if payment_system is None:
            raise ValueError("Invalid value for `payment_system`, must not be `None`")

        self._payment_system = payment_system

    @property
    def reference_value(self):
        """Gets the reference_value of this PlaceOrderRequestPaymentDataPaymentsInner.

        Reference value for calculating interest rates, in case it applies.

        :return: The reference_value of this PlaceOrderRequestPaymentDataPaymentsInner.
        :rtype: int
        """
        return self._reference_value

    @reference_value.setter
    def reference_value(self, reference_value):
        """Sets the reference_value of this PlaceOrderRequestPaymentDataPaymentsInner.

        Reference value for calculating interest rates, in case it applies.

        :param reference_value: The reference_value of this PlaceOrderRequestPaymentDataPaymentsInner.
        :type reference_value: int
        """
        if reference_value is None:
            raise ValueError("Invalid value for `reference_value`, must not be `None`")

        self._reference_value = reference_value

    @property
    def value(self):
        """Gets the value of this PlaceOrderRequestPaymentDataPaymentsInner.

        Value including interest, in case it applies.

        :return: The value of this PlaceOrderRequestPaymentDataPaymentsInner.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PlaceOrderRequestPaymentDataPaymentsInner.

        Value including interest, in case it applies.

        :param value: The value of this PlaceOrderRequestPaymentDataPaymentsInner.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
