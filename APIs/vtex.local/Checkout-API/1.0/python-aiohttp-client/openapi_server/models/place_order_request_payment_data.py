# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.place_order_request_payment_data_gift_cards_inner import PlaceOrderRequestPaymentDataGiftCardsInner
from openapi_server.models.place_order_request_payment_data_payment_systems_inner import PlaceOrderRequestPaymentDataPaymentSystemsInner
from openapi_server.models.place_order_request_payment_data_payments_inner import PlaceOrderRequestPaymentDataPaymentsInner
from openapi_server import util


class PlaceOrderRequestPaymentData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gift_card_messages: List[object]=None, gift_cards: List[PlaceOrderRequestPaymentDataGiftCardsInner]=None, payment_systems: List[PlaceOrderRequestPaymentDataPaymentSystemsInner]=None, payments: List[PlaceOrderRequestPaymentDataPaymentsInner]=None, update_status: str='updated'):
        """PlaceOrderRequestPaymentData - a model defined in OpenAPI

        :param gift_card_messages: The gift_card_messages of this PlaceOrderRequestPaymentData.
        :param gift_cards: The gift_cards of this PlaceOrderRequestPaymentData.
        :param payment_systems: The payment_systems of this PlaceOrderRequestPaymentData.
        :param payments: The payments of this PlaceOrderRequestPaymentData.
        :param update_status: The update_status of this PlaceOrderRequestPaymentData.
        """
        self.openapi_types = {
            'gift_card_messages': List[object],
            'gift_cards': List[PlaceOrderRequestPaymentDataGiftCardsInner],
            'payment_systems': List[PlaceOrderRequestPaymentDataPaymentSystemsInner],
            'payments': List[PlaceOrderRequestPaymentDataPaymentsInner],
            'update_status': str
        }

        self.attribute_map = {
            'gift_card_messages': 'giftCardMessages',
            'gift_cards': 'giftCards',
            'payment_systems': 'paymentSystems',
            'payments': 'payments',
            'update_status': 'updateStatus'
        }

        self._gift_card_messages = gift_card_messages
        self._gift_cards = gift_cards
        self._payment_systems = payment_systems
        self._payments = payments
        self._update_status = update_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaceOrderRequestPaymentData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaceOrder_request_paymentData of this PlaceOrderRequestPaymentData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gift_card_messages(self):
        """Gets the gift_card_messages of this PlaceOrderRequestPaymentData.

        Array of gift card messages.

        :return: The gift_card_messages of this PlaceOrderRequestPaymentData.
        :rtype: List[object]
        """
        return self._gift_card_messages

    @gift_card_messages.setter
    def gift_card_messages(self, gift_card_messages):
        """Sets the gift_card_messages of this PlaceOrderRequestPaymentData.

        Array of gift card messages.

        :param gift_card_messages: The gift_card_messages of this PlaceOrderRequestPaymentData.
        :type gift_card_messages: List[object]
        """

        self._gift_card_messages = gift_card_messages

    @property
    def gift_cards(self):
        """Gets the gift_cards of this PlaceOrderRequestPaymentData.

        Gift card information, if it applies to the order.

        :return: The gift_cards of this PlaceOrderRequestPaymentData.
        :rtype: List[PlaceOrderRequestPaymentDataGiftCardsInner]
        """
        return self._gift_cards

    @gift_cards.setter
    def gift_cards(self, gift_cards):
        """Sets the gift_cards of this PlaceOrderRequestPaymentData.

        Gift card information, if it applies to the order.

        :param gift_cards: The gift_cards of this PlaceOrderRequestPaymentData.
        :type gift_cards: List[PlaceOrderRequestPaymentDataGiftCardsInner]
        """

        self._gift_cards = gift_cards

    @property
    def payment_systems(self):
        """Gets the payment_systems of this PlaceOrderRequestPaymentData.

        Information on payment systems.

        :return: The payment_systems of this PlaceOrderRequestPaymentData.
        :rtype: List[PlaceOrderRequestPaymentDataPaymentSystemsInner]
        """
        return self._payment_systems

    @payment_systems.setter
    def payment_systems(self, payment_systems):
        """Sets the payment_systems of this PlaceOrderRequestPaymentData.

        Information on payment systems.

        :param payment_systems: The payment_systems of this PlaceOrderRequestPaymentData.
        :type payment_systems: List[PlaceOrderRequestPaymentDataPaymentSystemsInner]
        """

        self._payment_systems = payment_systems

    @property
    def payments(self):
        """Gets the payments of this PlaceOrderRequestPaymentData.

        Payment information.

        :return: The payments of this PlaceOrderRequestPaymentData.
        :rtype: List[PlaceOrderRequestPaymentDataPaymentsInner]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this PlaceOrderRequestPaymentData.

        Payment information.

        :param payments: The payments of this PlaceOrderRequestPaymentData.
        :type payments: List[PlaceOrderRequestPaymentDataPaymentsInner]
        """
        if payments is None:
            raise ValueError("Invalid value for `payments`, must not be `None`")

        self._payments = payments

    @property
    def update_status(self):
        """Gets the update_status of this PlaceOrderRequestPaymentData.

        Indicates whether this object's information is up to date according to the order's items. An order can not be placed if `\"outdated\"`

        :return: The update_status of this PlaceOrderRequestPaymentData.
        :rtype: str
        """
        return self._update_status

    @update_status.setter
    def update_status(self, update_status):
        """Sets the update_status of this PlaceOrderRequestPaymentData.

        Indicates whether this object's information is up to date according to the order's items. An order can not be placed if `\"outdated\"`

        :param update_status: The update_status of this PlaceOrderRequestPaymentData.
        :type update_status: str
        """

        self._update_status = update_status
