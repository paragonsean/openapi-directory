# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_configuration import PaymentConfiguration
from openapi_server.models.updateorder_formconfiguration_request_apps_inner import UpdateorderFormconfigurationRequestAppsInner
from openapi_server.models.updateorder_formconfiguration_request_tax_configuration import UpdateorderFormconfigurationRequestTaxConfiguration
from openapi_server import util


class UpdateorderFormconfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_manual_price: bool=None, allow_multiple_deliveries: bool=None, apps: List[UpdateorderFormconfigurationRequestAppsInner]=None, decimal_digits_precision: int=None, mask_first_purchase_data: bool=None, max_number_of_white_label_sellers: int=None, minimum_quantity_accumulated_for_items: int=None, minimum_value_accumulated: int=None, payment_configuration: PaymentConfiguration=None, payment_system_to_check_first_installment: str=None, recaptcha_validation: str='vtexCriteria', tax_configuration: UpdateorderFormconfigurationRequestTaxConfiguration=None):
        """UpdateorderFormconfigurationRequest - a model defined in OpenAPI

        :param allow_manual_price: The allow_manual_price of this UpdateorderFormconfigurationRequest.
        :param allow_multiple_deliveries: The allow_multiple_deliveries of this UpdateorderFormconfigurationRequest.
        :param apps: The apps of this UpdateorderFormconfigurationRequest.
        :param decimal_digits_precision: The decimal_digits_precision of this UpdateorderFormconfigurationRequest.
        :param mask_first_purchase_data: The mask_first_purchase_data of this UpdateorderFormconfigurationRequest.
        :param max_number_of_white_label_sellers: The max_number_of_white_label_sellers of this UpdateorderFormconfigurationRequest.
        :param minimum_quantity_accumulated_for_items: The minimum_quantity_accumulated_for_items of this UpdateorderFormconfigurationRequest.
        :param minimum_value_accumulated: The minimum_value_accumulated of this UpdateorderFormconfigurationRequest.
        :param payment_configuration: The payment_configuration of this UpdateorderFormconfigurationRequest.
        :param payment_system_to_check_first_installment: The payment_system_to_check_first_installment of this UpdateorderFormconfigurationRequest.
        :param recaptcha_validation: The recaptcha_validation of this UpdateorderFormconfigurationRequest.
        :param tax_configuration: The tax_configuration of this UpdateorderFormconfigurationRequest.
        """
        self.openapi_types = {
            'allow_manual_price': bool,
            'allow_multiple_deliveries': bool,
            'apps': List[UpdateorderFormconfigurationRequestAppsInner],
            'decimal_digits_precision': int,
            'mask_first_purchase_data': bool,
            'max_number_of_white_label_sellers': int,
            'minimum_quantity_accumulated_for_items': int,
            'minimum_value_accumulated': int,
            'payment_configuration': PaymentConfiguration,
            'payment_system_to_check_first_installment': str,
            'recaptcha_validation': str,
            'tax_configuration': UpdateorderFormconfigurationRequestTaxConfiguration
        }

        self.attribute_map = {
            'allow_manual_price': 'allowManualPrice',
            'allow_multiple_deliveries': 'allowMultipleDeliveries',
            'apps': 'apps',
            'decimal_digits_precision': 'decimalDigitsPrecision',
            'mask_first_purchase_data': 'maskFirstPurchaseData',
            'max_number_of_white_label_sellers': 'maxNumberOfWhiteLabelSellers',
            'minimum_quantity_accumulated_for_items': 'minimumQuantityAccumulatedForItems',
            'minimum_value_accumulated': 'minimumValueAccumulated',
            'payment_configuration': 'paymentConfiguration',
            'payment_system_to_check_first_installment': 'paymentSystemToCheckFirstInstallment',
            'recaptcha_validation': 'recaptchaValidation',
            'tax_configuration': 'taxConfiguration'
        }

        self._allow_manual_price = allow_manual_price
        self._allow_multiple_deliveries = allow_multiple_deliveries
        self._apps = apps
        self._decimal_digits_precision = decimal_digits_precision
        self._mask_first_purchase_data = mask_first_purchase_data
        self._max_number_of_white_label_sellers = max_number_of_white_label_sellers
        self._minimum_quantity_accumulated_for_items = minimum_quantity_accumulated_for_items
        self._minimum_value_accumulated = minimum_value_accumulated
        self._payment_configuration = payment_configuration
        self._payment_system_to_check_first_installment = payment_system_to_check_first_installment
        self._recaptcha_validation = recaptcha_validation
        self._tax_configuration = tax_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateorderFormconfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateorderFormconfigurationRequest of this UpdateorderFormconfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_manual_price(self):
        """Gets the allow_manual_price of this UpdateorderFormconfigurationRequest.

        Allows the editing of SKU prices right in the cart.

        :return: The allow_manual_price of this UpdateorderFormconfigurationRequest.
        :rtype: bool
        """
        return self._allow_manual_price

    @allow_manual_price.setter
    def allow_manual_price(self, allow_manual_price):
        """Sets the allow_manual_price of this UpdateorderFormconfigurationRequest.

        Allows the editing of SKU prices right in the cart.

        :param allow_manual_price: The allow_manual_price of this UpdateorderFormconfigurationRequest.
        :type allow_manual_price: bool
        """
        if allow_manual_price is None:
            raise ValueError("Invalid value for `allow_manual_price`, must not be `None`")

        self._allow_manual_price = allow_manual_price

    @property
    def allow_multiple_deliveries(self):
        """Gets the allow_multiple_deliveries of this UpdateorderFormconfigurationRequest.

        On the same purchase, allows the selection of items from multiple delivery channels.

        :return: The allow_multiple_deliveries of this UpdateorderFormconfigurationRequest.
        :rtype: bool
        """
        return self._allow_multiple_deliveries

    @allow_multiple_deliveries.setter
    def allow_multiple_deliveries(self, allow_multiple_deliveries):
        """Sets the allow_multiple_deliveries of this UpdateorderFormconfigurationRequest.

        On the same purchase, allows the selection of items from multiple delivery channels.

        :param allow_multiple_deliveries: The allow_multiple_deliveries of this UpdateorderFormconfigurationRequest.
        :type allow_multiple_deliveries: bool
        """
        if allow_multiple_deliveries is None:
            raise ValueError("Invalid value for `allow_multiple_deliveries`, must not be `None`")

        self._allow_multiple_deliveries = allow_multiple_deliveries

    @property
    def apps(self):
        """Gets the apps of this UpdateorderFormconfigurationRequest.

        Array of objects containing Apps configuration information.

        :return: The apps of this UpdateorderFormconfigurationRequest.
        :rtype: List[UpdateorderFormconfigurationRequestAppsInner]
        """
        return self._apps

    @apps.setter
    def apps(self, apps):
        """Sets the apps of this UpdateorderFormconfigurationRequest.

        Array of objects containing Apps configuration information.

        :param apps: The apps of this UpdateorderFormconfigurationRequest.
        :type apps: List[UpdateorderFormconfigurationRequestAppsInner]
        """
        if apps is None:
            raise ValueError("Invalid value for `apps`, must not be `None`")

        self._apps = apps

    @property
    def decimal_digits_precision(self):
        """Gets the decimal_digits_precision of this UpdateorderFormconfigurationRequest.

        Number of price digits.

        :return: The decimal_digits_precision of this UpdateorderFormconfigurationRequest.
        :rtype: int
        """
        return self._decimal_digits_precision

    @decimal_digits_precision.setter
    def decimal_digits_precision(self, decimal_digits_precision):
        """Sets the decimal_digits_precision of this UpdateorderFormconfigurationRequest.

        Number of price digits.

        :param decimal_digits_precision: The decimal_digits_precision of this UpdateorderFormconfigurationRequest.
        :type decimal_digits_precision: int
        """
        if decimal_digits_precision is None:
            raise ValueError("Invalid value for `decimal_digits_precision`, must not be `None`")

        self._decimal_digits_precision = decimal_digits_precision

    @property
    def mask_first_purchase_data(self):
        """Gets the mask_first_purchase_data of this UpdateorderFormconfigurationRequest.

        Allows, on a first purchase, masking client's data. It could be useful when a shared cart is used and the client doesn't want to share its data.

        :return: The mask_first_purchase_data of this UpdateorderFormconfigurationRequest.
        :rtype: bool
        """
        return self._mask_first_purchase_data

    @mask_first_purchase_data.setter
    def mask_first_purchase_data(self, mask_first_purchase_data):
        """Sets the mask_first_purchase_data of this UpdateorderFormconfigurationRequest.

        Allows, on a first purchase, masking client's data. It could be useful when a shared cart is used and the client doesn't want to share its data.

        :param mask_first_purchase_data: The mask_first_purchase_data of this UpdateorderFormconfigurationRequest.
        :type mask_first_purchase_data: bool
        """

        self._mask_first_purchase_data = mask_first_purchase_data

    @property
    def max_number_of_white_label_sellers(self):
        """Gets the max_number_of_white_label_sellers of this UpdateorderFormconfigurationRequest.

        Allows the input of a limit of white label sellers involved on the cart.

        :return: The max_number_of_white_label_sellers of this UpdateorderFormconfigurationRequest.
        :rtype: int
        """
        return self._max_number_of_white_label_sellers

    @max_number_of_white_label_sellers.setter
    def max_number_of_white_label_sellers(self, max_number_of_white_label_sellers):
        """Sets the max_number_of_white_label_sellers of this UpdateorderFormconfigurationRequest.

        Allows the input of a limit of white label sellers involved on the cart.

        :param max_number_of_white_label_sellers: The max_number_of_white_label_sellers of this UpdateorderFormconfigurationRequest.
        :type max_number_of_white_label_sellers: int
        """

        self._max_number_of_white_label_sellers = max_number_of_white_label_sellers

    @property
    def minimum_quantity_accumulated_for_items(self):
        """Gets the minimum_quantity_accumulated_for_items of this UpdateorderFormconfigurationRequest.

        Minimum SKU quantity by cart.

        :return: The minimum_quantity_accumulated_for_items of this UpdateorderFormconfigurationRequest.
        :rtype: int
        """
        return self._minimum_quantity_accumulated_for_items

    @minimum_quantity_accumulated_for_items.setter
    def minimum_quantity_accumulated_for_items(self, minimum_quantity_accumulated_for_items):
        """Sets the minimum_quantity_accumulated_for_items of this UpdateorderFormconfigurationRequest.

        Minimum SKU quantity by cart.

        :param minimum_quantity_accumulated_for_items: The minimum_quantity_accumulated_for_items of this UpdateorderFormconfigurationRequest.
        :type minimum_quantity_accumulated_for_items: int
        """
        if minimum_quantity_accumulated_for_items is None:
            raise ValueError("Invalid value for `minimum_quantity_accumulated_for_items`, must not be `None`")

        self._minimum_quantity_accumulated_for_items = minimum_quantity_accumulated_for_items

    @property
    def minimum_value_accumulated(self):
        """Gets the minimum_value_accumulated of this UpdateorderFormconfigurationRequest.

        Minimum cart value.

        :return: The minimum_value_accumulated of this UpdateorderFormconfigurationRequest.
        :rtype: int
        """
        return self._minimum_value_accumulated

    @minimum_value_accumulated.setter
    def minimum_value_accumulated(self, minimum_value_accumulated):
        """Sets the minimum_value_accumulated of this UpdateorderFormconfigurationRequest.

        Minimum cart value.

        :param minimum_value_accumulated: The minimum_value_accumulated of this UpdateorderFormconfigurationRequest.
        :type minimum_value_accumulated: int
        """
        if minimum_value_accumulated is None:
            raise ValueError("Invalid value for `minimum_value_accumulated`, must not be `None`")

        self._minimum_value_accumulated = minimum_value_accumulated

    @property
    def payment_configuration(self):
        """Gets the payment_configuration of this UpdateorderFormconfigurationRequest.


        :return: The payment_configuration of this UpdateorderFormconfigurationRequest.
        :rtype: PaymentConfiguration
        """
        return self._payment_configuration

    @payment_configuration.setter
    def payment_configuration(self, payment_configuration):
        """Sets the payment_configuration of this UpdateorderFormconfigurationRequest.


        :param payment_configuration: The payment_configuration of this UpdateorderFormconfigurationRequest.
        :type payment_configuration: PaymentConfiguration
        """
        if payment_configuration is None:
            raise ValueError("Invalid value for `payment_configuration`, must not be `None`")

        self._payment_configuration = payment_configuration

    @property
    def payment_system_to_check_first_installment(self):
        """Gets the payment_system_to_check_first_installment of this UpdateorderFormconfigurationRequest.

        If you want to apply a first installment discount to a particular payment system, set this field to that payment system's ID. Learn more: [Configuring a discount for orders prepaid in full](https://help.vtex.com/en/tutorial/configurar-desconto-de-preco-a-vista--7Lfcj9Wb5dpYfA2gKkACIt).

        :return: The payment_system_to_check_first_installment of this UpdateorderFormconfigurationRequest.
        :rtype: str
        """
        return self._payment_system_to_check_first_installment

    @payment_system_to_check_first_installment.setter
    def payment_system_to_check_first_installment(self, payment_system_to_check_first_installment):
        """Sets the payment_system_to_check_first_installment of this UpdateorderFormconfigurationRequest.

        If you want to apply a first installment discount to a particular payment system, set this field to that payment system's ID. Learn more: [Configuring a discount for orders prepaid in full](https://help.vtex.com/en/tutorial/configurar-desconto-de-preco-a-vista--7Lfcj9Wb5dpYfA2gKkACIt).

        :param payment_system_to_check_first_installment: The payment_system_to_check_first_installment of this UpdateorderFormconfigurationRequest.
        :type payment_system_to_check_first_installment: str
        """

        self._payment_system_to_check_first_installment = payment_system_to_check_first_installment

    @property
    def recaptcha_validation(self):
        """Gets the recaptcha_validation of this UpdateorderFormconfigurationRequest.

        Configures reCAPTCHA validation for the account, defining in which situations the shopper will be prompted to validate a purchase with reCAPTCHA. Learn more about [reCAPTCHA validation for VTEX stores](https://help.vtex.com/tutorial/recaptcha-no-checkout--18Te3oDd7f4qcjKu9jhNzP)    Possible values are:  - `\"never\"`: no purchases are validated with reCAPTCHA.  - `\"always\"`: every purchase is validated with reCAPTCHA.  - `\"vtexCriteria\"`: only some purchases are validated with reCAPTCHA in order to minimize friction and improve shopping experience. VTEX’s algorithm determines which sessions are trustworthy and which should be validated with reCAPTCHA. This is the recommended option.

        :return: The recaptcha_validation of this UpdateorderFormconfigurationRequest.
        :rtype: str
        """
        return self._recaptcha_validation

    @recaptcha_validation.setter
    def recaptcha_validation(self, recaptcha_validation):
        """Sets the recaptcha_validation of this UpdateorderFormconfigurationRequest.

        Configures reCAPTCHA validation for the account, defining in which situations the shopper will be prompted to validate a purchase with reCAPTCHA. Learn more about [reCAPTCHA validation for VTEX stores](https://help.vtex.com/tutorial/recaptcha-no-checkout--18Te3oDd7f4qcjKu9jhNzP)    Possible values are:  - `\"never\"`: no purchases are validated with reCAPTCHA.  - `\"always\"`: every purchase is validated with reCAPTCHA.  - `\"vtexCriteria\"`: only some purchases are validated with reCAPTCHA in order to minimize friction and improve shopping experience. VTEX’s algorithm determines which sessions are trustworthy and which should be validated with reCAPTCHA. This is the recommended option.

        :param recaptcha_validation: The recaptcha_validation of this UpdateorderFormconfigurationRequest.
        :type recaptcha_validation: str
        """

        self._recaptcha_validation = recaptcha_validation

    @property
    def tax_configuration(self):
        """Gets the tax_configuration of this UpdateorderFormconfigurationRequest.


        :return: The tax_configuration of this UpdateorderFormconfigurationRequest.
        :rtype: UpdateorderFormconfigurationRequestTaxConfiguration
        """
        return self._tax_configuration

    @tax_configuration.setter
    def tax_configuration(self, tax_configuration):
        """Sets the tax_configuration of this UpdateorderFormconfigurationRequest.


        :param tax_configuration: The tax_configuration of this UpdateorderFormconfigurationRequest.
        :type tax_configuration: UpdateorderFormconfigurationRequestTaxConfiguration
        """
        if tax_configuration is None:
            raise ValueError("Invalid value for `tax_configuration`, must not be `None`")

        self._tax_configuration = tax_configuration
