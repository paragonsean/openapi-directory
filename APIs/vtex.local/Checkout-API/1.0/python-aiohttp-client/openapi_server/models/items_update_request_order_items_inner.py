# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemsUpdateRequestOrderItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index: int=None, quantity: int=None):
        """ItemsUpdateRequestOrderItemsInner - a model defined in OpenAPI

        :param index: The index of this ItemsUpdateRequestOrderItemsInner.
        :param quantity: The quantity of this ItemsUpdateRequestOrderItemsInner.
        """
        self.openapi_types = {
            'index': int,
            'quantity': int
        }

        self.attribute_map = {
            'index': 'index',
            'quantity': 'quantity'
        }

        self._index = index
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemsUpdateRequestOrderItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemsUpdate_request_orderItems_inner of this ItemsUpdateRequestOrderItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self):
        """Gets the index of this ItemsUpdateRequestOrderItemsInner.

        The position of the item in the array.

        :return: The index of this ItemsUpdateRequestOrderItemsInner.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this ItemsUpdateRequestOrderItemsInner.

        The position of the item in the array.

        :param index: The index of this ItemsUpdateRequestOrderItemsInner.
        :type index: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")

        self._index = index

    @property
    def quantity(self):
        """Gets the quantity of this ItemsUpdateRequestOrderItemsInner.

        The quantity of the item in the cart.

        :return: The quantity of this ItemsUpdateRequestOrderItemsInner.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ItemsUpdateRequestOrderItemsInner.

        The quantity of the item in the cart.

        :param quantity: The quantity of this ItemsUpdateRequestOrderItemsInner.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity
