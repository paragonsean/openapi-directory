# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlaceOrderFromExistingOrderFormRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interest_value: int=0, optin_news_letter: bool=False, reference_id: str='41a22925298a4ddca95318131a25b000', reference_value: int=6800, save_personal_data: bool=False, value: int=6800):
        """PlaceOrderFromExistingOrderFormRequest - a model defined in OpenAPI

        :param interest_value: The interest_value of this PlaceOrderFromExistingOrderFormRequest.
        :param optin_news_letter: The optin_news_letter of this PlaceOrderFromExistingOrderFormRequest.
        :param reference_id: The reference_id of this PlaceOrderFromExistingOrderFormRequest.
        :param reference_value: The reference_value of this PlaceOrderFromExistingOrderFormRequest.
        :param save_personal_data: The save_personal_data of this PlaceOrderFromExistingOrderFormRequest.
        :param value: The value of this PlaceOrderFromExistingOrderFormRequest.
        """
        self.openapi_types = {
            'interest_value': int,
            'optin_news_letter': bool,
            'reference_id': str,
            'reference_value': int,
            'save_personal_data': bool,
            'value': int
        }

        self.attribute_map = {
            'interest_value': 'interestValue',
            'optin_news_letter': 'optinNewsLetter',
            'reference_id': 'referenceId',
            'reference_value': 'referenceValue',
            'save_personal_data': 'savePersonalData',
            'value': 'value'
        }

        self._interest_value = interest_value
        self._optin_news_letter = optin_news_letter
        self._reference_id = reference_id
        self._reference_value = reference_value
        self._save_personal_data = save_personal_data
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaceOrderFromExistingOrderFormRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaceOrderFromExistingOrderForm_request of this PlaceOrderFromExistingOrderFormRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interest_value(self):
        """Gets the interest_value of this PlaceOrderFromExistingOrderFormRequest.

        Interest rate to be used in case it applies.

        :return: The interest_value of this PlaceOrderFromExistingOrderFormRequest.
        :rtype: int
        """
        return self._interest_value

    @interest_value.setter
    def interest_value(self, interest_value):
        """Sets the interest_value of this PlaceOrderFromExistingOrderFormRequest.

        Interest rate to be used in case it applies.

        :param interest_value: The interest_value of this PlaceOrderFromExistingOrderFormRequest.
        :type interest_value: int
        """
        if interest_value is None:
            raise ValueError("Invalid value for `interest_value`, must not be `None`")

        self._interest_value = interest_value

    @property
    def optin_news_letter(self):
        """Gets the optin_news_letter of this PlaceOrderFromExistingOrderFormRequest.

        True if the shopper opted to receive the newsletter.

        :return: The optin_news_letter of this PlaceOrderFromExistingOrderFormRequest.
        :rtype: bool
        """
        return self._optin_news_letter

    @optin_news_letter.setter
    def optin_news_letter(self, optin_news_letter):
        """Sets the optin_news_letter of this PlaceOrderFromExistingOrderFormRequest.

        True if the shopper opted to receive the newsletter.

        :param optin_news_letter: The optin_news_letter of this PlaceOrderFromExistingOrderFormRequest.
        :type optin_news_letter: bool
        """

        self._optin_news_letter = optin_news_letter

    @property
    def reference_id(self):
        """Gets the reference_id of this PlaceOrderFromExistingOrderFormRequest.

        ID of the `orderForm` corresponding to the cart from which to place the order. This is the same as the `orderFormId` parameter.

        :return: The reference_id of this PlaceOrderFromExistingOrderFormRequest.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this PlaceOrderFromExistingOrderFormRequest.

        ID of the `orderForm` corresponding to the cart from which to place the order. This is the same as the `orderFormId` parameter.

        :param reference_id: The reference_id of this PlaceOrderFromExistingOrderFormRequest.
        :type reference_id: str
        """
        if reference_id is None:
            raise ValueError("Invalid value for `reference_id`, must not be `None`")

        self._reference_id = reference_id

    @property
    def reference_value(self):
        """Gets the reference_value of this PlaceOrderFromExistingOrderFormRequest.

        Reference value of the order for calculating interest if that is the case. Can be equal to the total value and does not separate cents. For example, $24.99 is represented `2499`.

        :return: The reference_value of this PlaceOrderFromExistingOrderFormRequest.
        :rtype: int
        """
        return self._reference_value

    @reference_value.setter
    def reference_value(self, reference_value):
        """Sets the reference_value of this PlaceOrderFromExistingOrderFormRequest.

        Reference value of the order for calculating interest if that is the case. Can be equal to the total value and does not separate cents. For example, $24.99 is represented `2499`.

        :param reference_value: The reference_value of this PlaceOrderFromExistingOrderFormRequest.
        :type reference_value: int
        """
        if reference_value is None:
            raise ValueError("Invalid value for `reference_value`, must not be `None`")

        self._reference_value = reference_value

    @property
    def save_personal_data(self):
        """Gets the save_personal_data of this PlaceOrderFromExistingOrderFormRequest.

        `true` if the shopper's data provided during checkout should be saved for future reference.

        :return: The save_personal_data of this PlaceOrderFromExistingOrderFormRequest.
        :rtype: bool
        """
        return self._save_personal_data

    @save_personal_data.setter
    def save_personal_data(self, save_personal_data):
        """Sets the save_personal_data of this PlaceOrderFromExistingOrderFormRequest.

        `true` if the shopper's data provided during checkout should be saved for future reference.

        :param save_personal_data: The save_personal_data of this PlaceOrderFromExistingOrderFormRequest.
        :type save_personal_data: bool
        """

        self._save_personal_data = save_personal_data

    @property
    def value(self):
        """Gets the value of this PlaceOrderFromExistingOrderFormRequest.

        Total value of the order without separating cents. For example, $24.99 is represented `2499`.

        :return: The value of this PlaceOrderFromExistingOrderFormRequest.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PlaceOrderFromExistingOrderFormRequest.

        Total value of the order without separating cents. For example, $24.99 is represented `2499`.

        :param value: The value of this PlaceOrderFromExistingOrderFormRequest.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
