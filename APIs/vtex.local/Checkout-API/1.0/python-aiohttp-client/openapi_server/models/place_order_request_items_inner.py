# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.place_order_request_items_inner_bundle_items_inner import PlaceOrderRequestItemsInnerBundleItemsInner
from openapi_server.models.place_order_request_items_inner_item_attachment import PlaceOrderRequestItemsInnerItemAttachment
from openapi_server.models.place_order_request_items_inner_price_tags_inner import PlaceOrderRequestItemsInnerPriceTagsInner
from openapi_server import util


class PlaceOrderRequestItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[str]=None, bundle_items: List[PlaceOrderRequestItemsInnerBundleItemsInner]=None, commission: int=None, freight_commission: int=None, id: str=None, is_gift: bool=False, item_attachment: PlaceOrderRequestItemsInnerItemAttachment=None, measurement_unit: str='g', price: int=None, price_tags: List[PlaceOrderRequestItemsInnerPriceTagsInner]=None, quantity: int=None, seller: str=None, unit_multiplier: int=1):
        """PlaceOrderRequestItemsInner - a model defined in OpenAPI

        :param attachments: The attachments of this PlaceOrderRequestItemsInner.
        :param bundle_items: The bundle_items of this PlaceOrderRequestItemsInner.
        :param commission: The commission of this PlaceOrderRequestItemsInner.
        :param freight_commission: The freight_commission of this PlaceOrderRequestItemsInner.
        :param id: The id of this PlaceOrderRequestItemsInner.
        :param is_gift: The is_gift of this PlaceOrderRequestItemsInner.
        :param item_attachment: The item_attachment of this PlaceOrderRequestItemsInner.
        :param measurement_unit: The measurement_unit of this PlaceOrderRequestItemsInner.
        :param price: The price of this PlaceOrderRequestItemsInner.
        :param price_tags: The price_tags of this PlaceOrderRequestItemsInner.
        :param quantity: The quantity of this PlaceOrderRequestItemsInner.
        :param seller: The seller of this PlaceOrderRequestItemsInner.
        :param unit_multiplier: The unit_multiplier of this PlaceOrderRequestItemsInner.
        """
        self.openapi_types = {
            'attachments': List[str],
            'bundle_items': List[PlaceOrderRequestItemsInnerBundleItemsInner],
            'commission': int,
            'freight_commission': int,
            'id': str,
            'is_gift': bool,
            'item_attachment': PlaceOrderRequestItemsInnerItemAttachment,
            'measurement_unit': str,
            'price': int,
            'price_tags': List[PlaceOrderRequestItemsInnerPriceTagsInner],
            'quantity': int,
            'seller': str,
            'unit_multiplier': int
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'bundle_items': 'bundleItems',
            'commission': 'commission',
            'freight_commission': 'freightCommission',
            'id': 'id',
            'is_gift': 'isGift',
            'item_attachment': 'itemAttachment',
            'measurement_unit': 'measurementUnit',
            'price': 'price',
            'price_tags': 'priceTags',
            'quantity': 'quantity',
            'seller': 'seller',
            'unit_multiplier': 'unitMultiplier'
        }

        self._attachments = attachments
        self._bundle_items = bundle_items
        self._commission = commission
        self._freight_commission = freight_commission
        self._id = id
        self._is_gift = is_gift
        self._item_attachment = item_attachment
        self._measurement_unit = measurement_unit
        self._price = price
        self._price_tags = price_tags
        self._quantity = quantity
        self._seller = seller
        self._unit_multiplier = unit_multiplier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaceOrderRequestItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaceOrder_request_items_inner of this PlaceOrderRequestItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this PlaceOrderRequestItemsInner.

        Array containing information on attachments.

        :return: The attachments of this PlaceOrderRequestItemsInner.
        :rtype: List[str]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this PlaceOrderRequestItemsInner.

        Array containing information on attachments.

        :param attachments: The attachments of this PlaceOrderRequestItemsInner.
        :type attachments: List[str]
        """

        self._attachments = attachments

    @property
    def bundle_items(self):
        """Gets the bundle_items of this PlaceOrderRequestItemsInner.

        Information on services sold along with the SKU. Example: a gift package.

        :return: The bundle_items of this PlaceOrderRequestItemsInner.
        :rtype: List[PlaceOrderRequestItemsInnerBundleItemsInner]
        """
        return self._bundle_items

    @bundle_items.setter
    def bundle_items(self, bundle_items):
        """Sets the bundle_items of this PlaceOrderRequestItemsInner.

        Information on services sold along with the SKU. Example: a gift package.

        :param bundle_items: The bundle_items of this PlaceOrderRequestItemsInner.
        :type bundle_items: List[PlaceOrderRequestItemsInnerBundleItemsInner]
        """

        self._bundle_items = bundle_items

    @property
    def commission(self):
        """Gets the commission of this PlaceOrderRequestItemsInner.

        Comission.

        :return: The commission of this PlaceOrderRequestItemsInner.
        :rtype: int
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this PlaceOrderRequestItemsInner.

        Comission.

        :param commission: The commission of this PlaceOrderRequestItemsInner.
        :type commission: int
        """

        self._commission = commission

    @property
    def freight_commission(self):
        """Gets the freight_commission of this PlaceOrderRequestItemsInner.

        Freight comission

        :return: The freight_commission of this PlaceOrderRequestItemsInner.
        :rtype: int
        """
        return self._freight_commission

    @freight_commission.setter
    def freight_commission(self, freight_commission):
        """Sets the freight_commission of this PlaceOrderRequestItemsInner.

        Freight comission

        :param freight_commission: The freight_commission of this PlaceOrderRequestItemsInner.
        :type freight_commission: int
        """

        self._freight_commission = freight_commission

    @property
    def id(self):
        """Gets the id of this PlaceOrderRequestItemsInner.

        The SKU ID.

        :return: The id of this PlaceOrderRequestItemsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlaceOrderRequestItemsInner.

        The SKU ID.

        :param id: The id of this PlaceOrderRequestItemsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_gift(self):
        """Gets the is_gift of this PlaceOrderRequestItemsInner.

        Indicates whether the order is a gift.

        :return: The is_gift of this PlaceOrderRequestItemsInner.
        :rtype: bool
        """
        return self._is_gift

    @is_gift.setter
    def is_gift(self, is_gift):
        """Sets the is_gift of this PlaceOrderRequestItemsInner.

        Indicates whether the order is a gift.

        :param is_gift: The is_gift of this PlaceOrderRequestItemsInner.
        :type is_gift: bool
        """

        self._is_gift = is_gift

    @property
    def item_attachment(self):
        """Gets the item_attachment of this PlaceOrderRequestItemsInner.


        :return: The item_attachment of this PlaceOrderRequestItemsInner.
        :rtype: PlaceOrderRequestItemsInnerItemAttachment
        """
        return self._item_attachment

    @item_attachment.setter
    def item_attachment(self, item_attachment):
        """Sets the item_attachment of this PlaceOrderRequestItemsInner.


        :param item_attachment: The item_attachment of this PlaceOrderRequestItemsInner.
        :type item_attachment: PlaceOrderRequestItemsInnerItemAttachment
        """

        self._item_attachment = item_attachment

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this PlaceOrderRequestItemsInner.

        SKU measurement unit.

        :return: The measurement_unit of this PlaceOrderRequestItemsInner.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this PlaceOrderRequestItemsInner.

        SKU measurement unit.

        :param measurement_unit: The measurement_unit of this PlaceOrderRequestItemsInner.
        :type measurement_unit: str
        """

        self._measurement_unit = measurement_unit

    @property
    def price(self):
        """Gets the price of this PlaceOrderRequestItemsInner.

        Item price within the context of the order without separating cents. For example, $24.99 is represented `2499`.

        :return: The price of this PlaceOrderRequestItemsInner.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PlaceOrderRequestItemsInner.

        Item price within the context of the order without separating cents. For example, $24.99 is represented `2499`.

        :param price: The price of this PlaceOrderRequestItemsInner.
        :type price: int
        """

        self._price = price

    @property
    def price_tags(self):
        """Gets the price_tags of this PlaceOrderRequestItemsInner.

        Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.

        :return: The price_tags of this PlaceOrderRequestItemsInner.
        :rtype: List[PlaceOrderRequestItemsInnerPriceTagsInner]
        """
        return self._price_tags

    @price_tags.setter
    def price_tags(self, price_tags):
        """Sets the price_tags of this PlaceOrderRequestItemsInner.

        Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.

        :param price_tags: The price_tags of this PlaceOrderRequestItemsInner.
        :type price_tags: List[PlaceOrderRequestItemsInnerPriceTagsInner]
        """

        self._price_tags = price_tags

    @property
    def quantity(self):
        """Gets the quantity of this PlaceOrderRequestItemsInner.

        The quantity of items of this specific SKU in the cart to be simulated.

        :return: The quantity of this PlaceOrderRequestItemsInner.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PlaceOrderRequestItemsInner.

        The quantity of items of this specific SKU in the cart to be simulated.

        :param quantity: The quantity of this PlaceOrderRequestItemsInner.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def seller(self):
        """Gets the seller of this PlaceOrderRequestItemsInner.

        The ID of the seller responsible for this SKU. This ID can be found in your VTEX Admin.

        :return: The seller of this PlaceOrderRequestItemsInner.
        :rtype: str
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this PlaceOrderRequestItemsInner.

        The ID of the seller responsible for this SKU. This ID can be found in your VTEX Admin.

        :param seller: The seller of this PlaceOrderRequestItemsInner.
        :type seller: str
        """
        if seller is None:
            raise ValueError("Invalid value for `seller`, must not be `None`")

        self._seller = seller

    @property
    def unit_multiplier(self):
        """Gets the unit_multiplier of this PlaceOrderRequestItemsInner.

        SKU unit multiplier.

        :return: The unit_multiplier of this PlaceOrderRequestItemsInner.
        :rtype: int
        """
        return self._unit_multiplier

    @unit_multiplier.setter
    def unit_multiplier(self, unit_multiplier):
        """Sets the unit_multiplier of this PlaceOrderRequestItemsInner.

        SKU unit multiplier.

        :param unit_multiplier: The unit_multiplier of this PlaceOrderRequestItemsInner.
        :type unit_multiplier: int
        """

        self._unit_multiplier = unit_multiplier
