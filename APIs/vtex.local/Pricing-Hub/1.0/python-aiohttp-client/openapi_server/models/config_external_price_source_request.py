# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigExternalPriceSourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=False, app_name: str=None):
        """ConfigExternalPriceSourceRequest - a model defined in OpenAPI

        :param active: The active of this ConfigExternalPriceSourceRequest.
        :param app_name: The app_name of this ConfigExternalPriceSourceRequest.
        """
        self.openapi_types = {
            'active': bool,
            'app_name': str
        }

        self.attribute_map = {
            'active': 'active',
            'app_name': 'appName'
        }

        self._active = active
        self._app_name = app_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigExternalPriceSourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigExternalPriceSourceRequest of this ConfigExternalPriceSourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ConfigExternalPriceSourceRequest.

        Defines if the external price source is active (`true`) or not (`false`). If not set, the default value will be `false`.

        :return: The active of this ConfigExternalPriceSourceRequest.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ConfigExternalPriceSourceRequest.

        Defines if the external price source is active (`true`) or not (`false`). If not set, the default value will be `false`.

        :param active: The active of this ConfigExternalPriceSourceRequest.
        :type active: bool
        """

        self._active = active

    @property
    def app_name(self):
        """Gets the app_name of this ConfigExternalPriceSourceRequest.

        Name of the app that communicates with the external pricing source

        :return: The app_name of this ConfigExternalPriceSourceRequest.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this ConfigExternalPriceSourceRequest.

        Name of the app that communicates with the external pricing source

        :param app_name: The app_name of this ConfigExternalPriceSourceRequest.
        :type app_name: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")

        self._app_name = app_name
