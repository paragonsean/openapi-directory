# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Item1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_price: float=None, index: int=None, list_price: float=None, price: float=None, price_table: str=None, price_valid_until: str=None, sku_id: str=None):
        """Item1 - a model defined in OpenAPI

        :param cost_price: The cost_price of this Item1.
        :param index: The index of this Item1.
        :param list_price: The list_price of this Item1.
        :param price: The price of this Item1.
        :param price_table: The price_table of this Item1.
        :param price_valid_until: The price_valid_until of this Item1.
        :param sku_id: The sku_id of this Item1.
        """
        self.openapi_types = {
            'cost_price': float,
            'index': int,
            'list_price': float,
            'price': float,
            'price_table': str,
            'price_valid_until': str,
            'sku_id': str
        }

        self.attribute_map = {
            'cost_price': 'costPrice',
            'index': 'index',
            'list_price': 'listPrice',
            'price': 'price',
            'price_table': 'priceTable',
            'price_valid_until': 'priceValidUntil',
            'sku_id': 'skuId'
        }

        self._cost_price = cost_price
        self._index = index
        self._list_price = list_price
        self._price = price
        self._price_table = price_table
        self._price_valid_until = price_valid_until
        self._sku_id = sku_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item1 of this Item1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_price(self):
        """Gets the cost_price of this Item1.

        The cost price returned by the pricing API that was used by Pricing Hub. It is measured in cents, so 5000 means 50,00 in local currency.

        :return: The cost_price of this Item1.
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this Item1.

        The cost price returned by the pricing API that was used by Pricing Hub. It is measured in cents, so 5000 means 50,00 in local currency.

        :param cost_price: The cost_price of this Item1.
        :type cost_price: float
        """
        if cost_price is None:
            raise ValueError("Invalid value for `cost_price`, must not be `None`")

        self._cost_price = cost_price

    @property
    def index(self):
        """Gets the index of this Item1.

        The same index referring to Checkout's cart that was passed to the API

        :return: The index of this Item1.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Item1.

        The same index referring to Checkout's cart that was passed to the API

        :param index: The index of this Item1.
        :type index: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")

        self._index = index

    @property
    def list_price(self):
        """Gets the list_price of this Item1.

        The list price returned by the pricing API that was used by Pricing Hub. It is measured in cents, so 5000 means 50,00 in local currency

        :return: The list_price of this Item1.
        :rtype: float
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this Item1.

        The list price returned by the pricing API that was used by Pricing Hub. It is measured in cents, so 5000 means 50,00 in local currency

        :param list_price: The list_price of this Item1.
        :type list_price: float
        """
        if list_price is None:
            raise ValueError("Invalid value for `list_price`, must not be `None`")

        self._list_price = list_price

    @property
    def price(self):
        """Gets the price of this Item1.

        The price returned by the pricing API that was used by Pricing Hub. It is measured in cents, so 5000 means 50,00 in local currency

        :return: The price of this Item1.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Item1.

        The price returned by the pricing API that was used by Pricing Hub. It is measured in cents, so 5000 means 50,00 in local currency

        :param price: The price of this Item1.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def price_table(self):
        """Gets the price_table of this Item1.

        The price table that was used to price the item

        :return: The price_table of this Item1.
        :rtype: str
        """
        return self._price_table

    @price_table.setter
    def price_table(self, price_table):
        """Sets the price_table of this Item1.

        The price table that was used to price the item

        :param price_table: The price_table of this Item1.
        :type price_table: str
        """
        if price_table is None:
            raise ValueError("Invalid value for `price_table`, must not be `None`")

        self._price_table = price_table

    @property
    def price_valid_until(self):
        """Gets the price_valid_until of this Item1.

        The moment up until the price is valid. After that moment, it will be necessary to call the pricing API again. The format of the string is in RFC3339

        :return: The price_valid_until of this Item1.
        :rtype: str
        """
        return self._price_valid_until

    @price_valid_until.setter
    def price_valid_until(self, price_valid_until):
        """Sets the price_valid_until of this Item1.

        The moment up until the price is valid. After that moment, it will be necessary to call the pricing API again. The format of the string is in RFC3339

        :param price_valid_until: The price_valid_until of this Item1.
        :type price_valid_until: str
        """
        if price_valid_until is None:
            raise ValueError("Invalid value for `price_valid_until`, must not be `None`")

        self._price_valid_until = price_valid_until

    @property
    def sku_id(self):
        """Gets the sku_id of this Item1.

        The same skuId that was passed to the API

        :return: The sku_id of this Item1.
        :rtype: str
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this Item1.

        The same skuId that was passed to the API

        :param sku_id: The sku_id of this Item1.
        :type sku_id: str
        """
        if sku_id is None:
            raise ValueError("Invalid value for `sku_id`, must not be `None`")

        self._sku_id = sku_id
