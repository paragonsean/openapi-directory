# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.items_inner import ItemsInner
from openapi_server import util


class GetPricesRequestObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, utm_campaign: str='summer', utm_internal_campaign: str='sale', utm_medium: str='social', utm_source: str='facebook', email: str='customer@email.com', items: List[ItemsInner]=None, sales_channel: str='1'):
        """GetPricesRequestObject - a model defined in OpenAPI

        :param utm_campaign: The utm_campaign of this GetPricesRequestObject.
        :param utm_internal_campaign: The utm_internal_campaign of this GetPricesRequestObject.
        :param utm_medium: The utm_medium of this GetPricesRequestObject.
        :param utm_source: The utm_source of this GetPricesRequestObject.
        :param email: The email of this GetPricesRequestObject.
        :param items: The items of this GetPricesRequestObject.
        :param sales_channel: The sales_channel of this GetPricesRequestObject.
        """
        self.openapi_types = {
            'utm_campaign': str,
            'utm_internal_campaign': str,
            'utm_medium': str,
            'utm_source': str,
            'email': str,
            'items': List[ItemsInner],
            'sales_channel': str
        }

        self.attribute_map = {
            'utm_campaign': 'UtmCampaign',
            'utm_internal_campaign': 'UtmInternalCampaign',
            'utm_medium': 'UtmMedium',
            'utm_source': 'UtmSource',
            'email': 'email',
            'items': 'items',
            'sales_channel': 'salesChannel'
        }

        self._utm_campaign = utm_campaign
        self._utm_internal_campaign = utm_internal_campaign
        self._utm_medium = utm_medium
        self._utm_source = utm_source
        self._email = email
        self._items = items
        self._sales_channel = sales_channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPricesRequestObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetPricesRequestObject of this GetPricesRequestObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def utm_campaign(self):
        """Gets the utm_campaign of this GetPricesRequestObject.

        Campaign name, represented by the `utm_campaign` value in the URL that led to the order. If there is no value, use `null`

        :return: The utm_campaign of this GetPricesRequestObject.
        :rtype: str
        """
        return self._utm_campaign

    @utm_campaign.setter
    def utm_campaign(self, utm_campaign):
        """Sets the utm_campaign of this GetPricesRequestObject.

        Campaign name, represented by the `utm_campaign` value in the URL that led to the order. If there is no value, use `null`

        :param utm_campaign: The utm_campaign of this GetPricesRequestObject.
        :type utm_campaign: str
        """

        self._utm_campaign = utm_campaign

    @property
    def utm_internal_campaign(self):
        """Gets the utm_internal_campaign of this GetPricesRequestObject.

        Internal campaign name, represented by the `utmi_cp` value in the URL that led to the order. If there is no value, use `null`

        :return: The utm_internal_campaign of this GetPricesRequestObject.
        :rtype: str
        """
        return self._utm_internal_campaign

    @utm_internal_campaign.setter
    def utm_internal_campaign(self, utm_internal_campaign):
        """Sets the utm_internal_campaign of this GetPricesRequestObject.

        Internal campaign name, represented by the `utmi_cp` value in the URL that led to the order. If there is no value, use `null`

        :param utm_internal_campaign: The utm_internal_campaign of this GetPricesRequestObject.
        :type utm_internal_campaign: str
        """

        self._utm_internal_campaign = utm_internal_campaign

    @property
    def utm_medium(self):
        """Gets the utm_medium of this GetPricesRequestObject.

        Medium that indicates what type of traffic the customer originated from, represented by the `utm_medium` value in the URL that led to the order. If there is no value, use `null`

        :return: The utm_medium of this GetPricesRequestObject.
        :rtype: str
        """
        return self._utm_medium

    @utm_medium.setter
    def utm_medium(self, utm_medium):
        """Sets the utm_medium of this GetPricesRequestObject.

        Medium that indicates what type of traffic the customer originated from, represented by the `utm_medium` value in the URL that led to the order. If there is no value, use `null`

        :param utm_medium: The utm_medium of this GetPricesRequestObject.
        :type utm_medium: str
        """

        self._utm_medium = utm_medium

    @property
    def utm_source(self):
        """Gets the utm_source of this GetPricesRequestObject.

        Traffic source, indicates where the traffic originated from according to the `utm_source` value in the URL that led to the order. If there is no value, use `null`

        :return: The utm_source of this GetPricesRequestObject.
        :rtype: str
        """
        return self._utm_source

    @utm_source.setter
    def utm_source(self, utm_source):
        """Sets the utm_source of this GetPricesRequestObject.

        Traffic source, indicates where the traffic originated from according to the `utm_source` value in the URL that led to the order. If there is no value, use `null`

        :param utm_source: The utm_source of this GetPricesRequestObject.
        :type utm_source: str
        """

        self._utm_source = utm_source

    @property
    def email(self):
        """Gets the email of this GetPricesRequestObject.

        The customer's email address. If there is no value, use an empty string

        :return: The email of this GetPricesRequestObject.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetPricesRequestObject.

        The customer's email address. If there is no value, use an empty string

        :param email: The email of this GetPricesRequestObject.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def items(self):
        """Gets the items of this GetPricesRequestObject.

        The list of items that are to be priced by Pricing Hub

        :return: The items of this GetPricesRequestObject.
        :rtype: List[ItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this GetPricesRequestObject.

        The list of items that are to be priced by Pricing Hub

        :param items: The items of this GetPricesRequestObject.
        :type items: List[ItemsInner]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def sales_channel(self):
        """Gets the sales_channel of this GetPricesRequestObject.

        Represents Checkout's sales channel

        :return: The sales_channel of this GetPricesRequestObject.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this GetPricesRequestObject.

        Represents Checkout's sales channel

        :param sales_channel: The sales_channel of this GetPricesRequestObject.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel
