/*
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateGiftCardCancellationTransactionRequest;
import org.openapitools.client.model.CreateGiftCardSettlementTransactionRequest;
import org.openapitools.client.model.CreateGiftCardTransactionRequest;
import org.openapitools.client.model.CreateGiftCardinGiftCardProviderRequest;
import org.openapitools.client.model.GetGiftCardfromGiftCardProviderRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createGiftCardCancellationTransaction
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @param createGiftCardCancellationTransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardCancellationTransactionCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId, CreateGiftCardCancellationTransactionRequest createGiftCardCancellationTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGiftCardCancellationTransactionRequest;

        // create path and map variables
        String localVarPath = "/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/cancellations"
            .replace("{" + "giftCardProviderID" + "}", localVarApiClient.escapeString(giftCardProviderID.toString()))
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()))
            .replace("{" + "tId" + "}", localVarApiClient.escapeString(tId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vtex.giftcardproviders.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGiftCardCancellationTransactionValidateBeforeCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId, CreateGiftCardCancellationTransactionRequest createGiftCardCancellationTransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createGiftCardCancellationTransaction(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createGiftCardCancellationTransaction(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling createGiftCardCancellationTransaction(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling createGiftCardCancellationTransaction(Async)");
        }

        // verify the required parameter 'giftCardProviderID' is set
        if (giftCardProviderID == null) {
            throw new ApiException("Missing the required parameter 'giftCardProviderID' when calling createGiftCardCancellationTransaction(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling createGiftCardCancellationTransaction(Async)");
        }

        // verify the required parameter 'tId' is set
        if (tId == null) {
            throw new ApiException("Missing the required parameter 'tId' when calling createGiftCardCancellationTransaction(Async)");
        }

        // verify the required parameter 'createGiftCardCancellationTransactionRequest' is set
        if (createGiftCardCancellationTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'createGiftCardCancellationTransactionRequest' when calling createGiftCardCancellationTransaction(Async)");
        }

        return createGiftCardCancellationTransactionCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId, createGiftCardCancellationTransactionRequest, _callback);

    }

    /**
     * Create GiftCard Cancellation Transaction
     * Creates a cancellation transaction to a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @param createGiftCardCancellationTransactionRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object createGiftCardCancellationTransaction(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId, CreateGiftCardCancellationTransactionRequest createGiftCardCancellationTransactionRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createGiftCardCancellationTransactionWithHttpInfo(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId, createGiftCardCancellationTransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Create GiftCard Cancellation Transaction
     * Creates a cancellation transaction to a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @param createGiftCardCancellationTransactionRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createGiftCardCancellationTransactionWithHttpInfo(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId, CreateGiftCardCancellationTransactionRequest createGiftCardCancellationTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = createGiftCardCancellationTransactionValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId, createGiftCardCancellationTransactionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create GiftCard Cancellation Transaction (asynchronously)
     * Creates a cancellation transaction to a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @param createGiftCardCancellationTransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardCancellationTransactionAsync(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId, CreateGiftCardCancellationTransactionRequest createGiftCardCancellationTransactionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGiftCardCancellationTransactionValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId, createGiftCardCancellationTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGiftCardSettlementTransaction
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @param createGiftCardSettlementTransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardSettlementTransactionCall(String accept, String contentType, String giftCardProviderID, String giftCardID, String tId, CreateGiftCardSettlementTransactionRequest createGiftCardSettlementTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGiftCardSettlementTransactionRequest;

        // create path and map variables
        String localVarPath = "/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/settlements"
            .replace("{" + "giftCardProviderID" + "}", localVarApiClient.escapeString(giftCardProviderID.toString()))
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()))
            .replace("{" + "tId" + "}", localVarApiClient.escapeString(tId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGiftCardSettlementTransactionValidateBeforeCall(String accept, String contentType, String giftCardProviderID, String giftCardID, String tId, CreateGiftCardSettlementTransactionRequest createGiftCardSettlementTransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createGiftCardSettlementTransaction(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createGiftCardSettlementTransaction(Async)");
        }

        // verify the required parameter 'giftCardProviderID' is set
        if (giftCardProviderID == null) {
            throw new ApiException("Missing the required parameter 'giftCardProviderID' when calling createGiftCardSettlementTransaction(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling createGiftCardSettlementTransaction(Async)");
        }

        // verify the required parameter 'tId' is set
        if (tId == null) {
            throw new ApiException("Missing the required parameter 'tId' when calling createGiftCardSettlementTransaction(Async)");
        }

        // verify the required parameter 'createGiftCardSettlementTransactionRequest' is set
        if (createGiftCardSettlementTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'createGiftCardSettlementTransactionRequest' when calling createGiftCardSettlementTransaction(Async)");
        }

        return createGiftCardSettlementTransactionCall(accept, contentType, giftCardProviderID, giftCardID, tId, createGiftCardSettlementTransactionRequest, _callback);

    }

    /**
     * Create GiftCard Settlement Transaction
     * Creates a settlement transaction to a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @param createGiftCardSettlementTransactionRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object createGiftCardSettlementTransaction(String accept, String contentType, String giftCardProviderID, String giftCardID, String tId, CreateGiftCardSettlementTransactionRequest createGiftCardSettlementTransactionRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createGiftCardSettlementTransactionWithHttpInfo(accept, contentType, giftCardProviderID, giftCardID, tId, createGiftCardSettlementTransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Create GiftCard Settlement Transaction
     * Creates a settlement transaction to a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @param createGiftCardSettlementTransactionRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createGiftCardSettlementTransactionWithHttpInfo(String accept, String contentType, String giftCardProviderID, String giftCardID, String tId, CreateGiftCardSettlementTransactionRequest createGiftCardSettlementTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = createGiftCardSettlementTransactionValidateBeforeCall(accept, contentType, giftCardProviderID, giftCardID, tId, createGiftCardSettlementTransactionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create GiftCard Settlement Transaction (asynchronously)
     * Creates a settlement transaction to a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @param createGiftCardSettlementTransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardSettlementTransactionAsync(String accept, String contentType, String giftCardProviderID, String giftCardID, String tId, CreateGiftCardSettlementTransactionRequest createGiftCardSettlementTransactionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGiftCardSettlementTransactionValidateBeforeCall(accept, contentType, giftCardProviderID, giftCardID, tId, createGiftCardSettlementTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGiftCardTransaction
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param createGiftCardTransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardTransactionCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, CreateGiftCardTransactionRequest createGiftCardTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGiftCardTransactionRequest;

        // create path and map variables
        String localVarPath = "/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions"
            .replace("{" + "giftCardProviderID" + "}", localVarApiClient.escapeString(giftCardProviderID.toString()))
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vtex.giftcardproviders.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGiftCardTransactionValidateBeforeCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, CreateGiftCardTransactionRequest createGiftCardTransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createGiftCardTransaction(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createGiftCardTransaction(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling createGiftCardTransaction(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling createGiftCardTransaction(Async)");
        }

        // verify the required parameter 'giftCardProviderID' is set
        if (giftCardProviderID == null) {
            throw new ApiException("Missing the required parameter 'giftCardProviderID' when calling createGiftCardTransaction(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling createGiftCardTransaction(Async)");
        }

        // verify the required parameter 'createGiftCardTransactionRequest' is set
        if (createGiftCardTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'createGiftCardTransactionRequest' when calling createGiftCardTransaction(Async)");
        }

        return createGiftCardTransactionCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, createGiftCardTransactionRequest, _callback);

    }

    /**
     * Create GiftCard Transaction
     * Creates a transaction to a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param createGiftCardTransactionRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object createGiftCardTransaction(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, CreateGiftCardTransactionRequest createGiftCardTransactionRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createGiftCardTransactionWithHttpInfo(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, createGiftCardTransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Create GiftCard Transaction
     * Creates a transaction to a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param createGiftCardTransactionRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createGiftCardTransactionWithHttpInfo(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, CreateGiftCardTransactionRequest createGiftCardTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = createGiftCardTransactionValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, createGiftCardTransactionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create GiftCard Transaction (asynchronously)
     * Creates a transaction to a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param createGiftCardTransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardTransactionAsync(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, CreateGiftCardTransactionRequest createGiftCardTransactionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGiftCardTransactionValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, createGiftCardTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGiftCardinGiftCardProvider
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param createGiftCardinGiftCardProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardinGiftCardProviderCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, CreateGiftCardinGiftCardProviderRequest createGiftCardinGiftCardProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGiftCardinGiftCardProviderRequest;

        // create path and map variables
        String localVarPath = "/giftcardproviders/{giftCardProviderID}/giftcards"
            .replace("{" + "giftCardProviderID" + "}", localVarApiClient.escapeString(giftCardProviderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vtex.giftcardproviders.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGiftCardinGiftCardProviderValidateBeforeCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, CreateGiftCardinGiftCardProviderRequest createGiftCardinGiftCardProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createGiftCardinGiftCardProvider(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createGiftCardinGiftCardProvider(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling createGiftCardinGiftCardProvider(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling createGiftCardinGiftCardProvider(Async)");
        }

        // verify the required parameter 'giftCardProviderID' is set
        if (giftCardProviderID == null) {
            throw new ApiException("Missing the required parameter 'giftCardProviderID' when calling createGiftCardinGiftCardProvider(Async)");
        }

        // verify the required parameter 'createGiftCardinGiftCardProviderRequest' is set
        if (createGiftCardinGiftCardProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'createGiftCardinGiftCardProviderRequest' when calling createGiftCardinGiftCardProvider(Async)");
        }

        return createGiftCardinGiftCardProviderCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, createGiftCardinGiftCardProviderRequest, _callback);

    }

    /**
     * Create GiftCard in GiftCard Provider
     * Creates a giftcard in a giftcard provider.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param createGiftCardinGiftCardProviderRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object createGiftCardinGiftCardProvider(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, CreateGiftCardinGiftCardProviderRequest createGiftCardinGiftCardProviderRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createGiftCardinGiftCardProviderWithHttpInfo(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, createGiftCardinGiftCardProviderRequest);
        return localVarResp.getData();
    }

    /**
     * Create GiftCard in GiftCard Provider
     * Creates a giftcard in a giftcard provider.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param createGiftCardinGiftCardProviderRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createGiftCardinGiftCardProviderWithHttpInfo(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, CreateGiftCardinGiftCardProviderRequest createGiftCardinGiftCardProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = createGiftCardinGiftCardProviderValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, createGiftCardinGiftCardProviderRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create GiftCard in GiftCard Provider (asynchronously)
     * Creates a giftcard in a giftcard provider.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param createGiftCardinGiftCardProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardinGiftCardProviderAsync(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, CreateGiftCardinGiftCardProviderRequest createGiftCardinGiftCardProviderRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGiftCardinGiftCardProviderValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, createGiftCardinGiftCardProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGiftCardAuthorizationTransaction
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param transactionID Gift Card transaction ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardAuthorizationTransactionCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String transactionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{transactionID}/authorization"
            .replace("{" + "giftCardProviderID" + "}", localVarApiClient.escapeString(giftCardProviderID.toString()))
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()))
            .replace("{" + "transactionID" + "}", localVarApiClient.escapeString(transactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGiftCardAuthorizationTransactionValidateBeforeCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String transactionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getGiftCardAuthorizationTransaction(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getGiftCardAuthorizationTransaction(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling getGiftCardAuthorizationTransaction(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling getGiftCardAuthorizationTransaction(Async)");
        }

        // verify the required parameter 'giftCardProviderID' is set
        if (giftCardProviderID == null) {
            throw new ApiException("Missing the required parameter 'giftCardProviderID' when calling getGiftCardAuthorizationTransaction(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling getGiftCardAuthorizationTransaction(Async)");
        }

        // verify the required parameter 'transactionID' is set
        if (transactionID == null) {
            throw new ApiException("Missing the required parameter 'transactionID' when calling getGiftCardAuthorizationTransaction(Async)");
        }

        return getGiftCardAuthorizationTransactionCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, transactionID, _callback);

    }

    /**
     * Get GiftCard Authorization Transaction
     * Returns the transaction authorization info.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param transactionID Gift Card transaction ID. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getGiftCardAuthorizationTransaction(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String transactionID) throws ApiException {
        ApiResponse<Object> localVarResp = getGiftCardAuthorizationTransactionWithHttpInfo(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, transactionID);
        return localVarResp.getData();
    }

    /**
     * Get GiftCard Authorization Transaction
     * Returns the transaction authorization info.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param transactionID Gift Card transaction ID. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getGiftCardAuthorizationTransactionWithHttpInfo(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String transactionID) throws ApiException {
        okhttp3.Call localVarCall = getGiftCardAuthorizationTransactionValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, transactionID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GiftCard Authorization Transaction (asynchronously)
     * Returns the transaction authorization info.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param transactionID Gift Card transaction ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardAuthorizationTransactionAsync(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String transactionID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGiftCardAuthorizationTransactionValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, transactionID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGiftCardTransactionbyID
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param transactionID Gift Card transaction ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardTransactionbyIDCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String transactionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{transactionID}"
            .replace("{" + "giftCardProviderID" + "}", localVarApiClient.escapeString(giftCardProviderID.toString()))
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()))
            .replace("{" + "transactionID" + "}", localVarApiClient.escapeString(transactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGiftCardTransactionbyIDValidateBeforeCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String transactionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getGiftCardTransactionbyID(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getGiftCardTransactionbyID(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling getGiftCardTransactionbyID(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling getGiftCardTransactionbyID(Async)");
        }

        // verify the required parameter 'giftCardProviderID' is set
        if (giftCardProviderID == null) {
            throw new ApiException("Missing the required parameter 'giftCardProviderID' when calling getGiftCardTransactionbyID(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling getGiftCardTransactionbyID(Async)");
        }

        // verify the required parameter 'transactionID' is set
        if (transactionID == null) {
            throw new ApiException("Missing the required parameter 'transactionID' when calling getGiftCardTransactionbyID(Async)");
        }

        return getGiftCardTransactionbyIDCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, transactionID, _callback);

    }

    /**
     * Get GiftCard Transaction by ID
     * Returns a specific transaction from a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param transactionID Gift Card transaction ID. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getGiftCardTransactionbyID(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String transactionID) throws ApiException {
        ApiResponse<Object> localVarResp = getGiftCardTransactionbyIDWithHttpInfo(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, transactionID);
        return localVarResp.getData();
    }

    /**
     * Get GiftCard Transaction by ID
     * Returns a specific transaction from a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param transactionID Gift Card transaction ID. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getGiftCardTransactionbyIDWithHttpInfo(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String transactionID) throws ApiException {
        okhttp3.Call localVarCall = getGiftCardTransactionbyIDValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, transactionID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GiftCard Transaction by ID (asynchronously)
     * Returns a specific transaction from a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param transactionID Gift Card transaction ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardTransactionbyIDAsync(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String transactionID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGiftCardTransactionbyIDValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, transactionID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGiftCardfromGiftCardProvider
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param reSTRange Range of documents to show. (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param getGiftCardfromGiftCardProviderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardfromGiftCardProviderCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String reSTRange, String giftCardProviderID, GetGiftCardfromGiftCardProviderRequest getGiftCardfromGiftCardProviderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getGiftCardfromGiftCardProviderRequest;

        // create path and map variables
        String localVarPath = "/giftcardproviders/{giftCardProviderID}/giftcards/_search"
            .replace("{" + "giftCardProviderID" + "}", localVarApiClient.escapeString(giftCardProviderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        if (reSTRange != null) {
            localVarHeaderParams.put("REST-Range", localVarApiClient.parameterToString(reSTRange));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vtex.giftcardproviders.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGiftCardfromGiftCardProviderValidateBeforeCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String reSTRange, String giftCardProviderID, GetGiftCardfromGiftCardProviderRequest getGiftCardfromGiftCardProviderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getGiftCardfromGiftCardProvider(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getGiftCardfromGiftCardProvider(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling getGiftCardfromGiftCardProvider(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling getGiftCardfromGiftCardProvider(Async)");
        }

        // verify the required parameter 'reSTRange' is set
        if (reSTRange == null) {
            throw new ApiException("Missing the required parameter 'reSTRange' when calling getGiftCardfromGiftCardProvider(Async)");
        }

        // verify the required parameter 'giftCardProviderID' is set
        if (giftCardProviderID == null) {
            throw new ApiException("Missing the required parameter 'giftCardProviderID' when calling getGiftCardfromGiftCardProvider(Async)");
        }

        // verify the required parameter 'getGiftCardfromGiftCardProviderRequest' is set
        if (getGiftCardfromGiftCardProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'getGiftCardfromGiftCardProviderRequest' when calling getGiftCardfromGiftCardProvider(Async)");
        }

        return getGiftCardfromGiftCardProviderCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, reSTRange, giftCardProviderID, getGiftCardfromGiftCardProviderRequest, _callback);

    }

    /**
     * Get GiftCard from GiftCard Provider
     * Returns all giftcards from a giftcard provider according to the filters.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param reSTRange Range of documents to show. (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param getGiftCardfromGiftCardProviderRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getGiftCardfromGiftCardProvider(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String reSTRange, String giftCardProviderID, GetGiftCardfromGiftCardProviderRequest getGiftCardfromGiftCardProviderRequest) throws ApiException {
        ApiResponse<Object> localVarResp = getGiftCardfromGiftCardProviderWithHttpInfo(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, reSTRange, giftCardProviderID, getGiftCardfromGiftCardProviderRequest);
        return localVarResp.getData();
    }

    /**
     * Get GiftCard from GiftCard Provider
     * Returns all giftcards from a giftcard provider according to the filters.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param reSTRange Range of documents to show. (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param getGiftCardfromGiftCardProviderRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getGiftCardfromGiftCardProviderWithHttpInfo(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String reSTRange, String giftCardProviderID, GetGiftCardfromGiftCardProviderRequest getGiftCardfromGiftCardProviderRequest) throws ApiException {
        okhttp3.Call localVarCall = getGiftCardfromGiftCardProviderValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, reSTRange, giftCardProviderID, getGiftCardfromGiftCardProviderRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GiftCard from GiftCard Provider (asynchronously)
     * Returns all giftcards from a giftcard provider according to the filters.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param reSTRange Range of documents to show. (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param getGiftCardfromGiftCardProviderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardfromGiftCardProviderAsync(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String reSTRange, String giftCardProviderID, GetGiftCardfromGiftCardProviderRequest getGiftCardfromGiftCardProviderRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGiftCardfromGiftCardProviderValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, reSTRange, giftCardProviderID, getGiftCardfromGiftCardProviderRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGiftCardfromGiftCardProviderbyID
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardfromGiftCardProviderbyIDCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}"
            .replace("{" + "giftCardProviderID" + "}", localVarApiClient.escapeString(giftCardProviderID.toString()))
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGiftCardfromGiftCardProviderbyIDValidateBeforeCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getGiftCardfromGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getGiftCardfromGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling getGiftCardfromGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling getGiftCardfromGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'giftCardProviderID' is set
        if (giftCardProviderID == null) {
            throw new ApiException("Missing the required parameter 'giftCardProviderID' when calling getGiftCardfromGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling getGiftCardfromGiftCardProviderbyID(Async)");
        }

        return getGiftCardfromGiftCardProviderbyIDCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, _callback);

    }

    /**
     * Get GiftCard from GiftCard Provider by ID
     * Returns a specific giftcard from a giftcard provider.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object getGiftCardfromGiftCardProviderbyID(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID) throws ApiException {
        ApiResponse<Object> localVarResp = getGiftCardfromGiftCardProviderbyIDWithHttpInfo(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID);
        return localVarResp.getData();
    }

    /**
     * Get GiftCard from GiftCard Provider by ID
     * Returns a specific giftcard from a giftcard provider.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getGiftCardfromGiftCardProviderbyIDWithHttpInfo(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID) throws ApiException {
        okhttp3.Call localVarCall = getGiftCardfromGiftCardProviderbyIDValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GiftCard from GiftCard Provider by ID (asynchronously)
     * Returns a specific giftcard from a giftcard provider.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardfromGiftCardProviderbyIDAsync(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGiftCardfromGiftCardProviderbyIDValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllGiftCardCancellationTransactions
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllGiftCardCancellationTransactionsCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/cancellations"
            .replace("{" + "giftCardProviderID" + "}", localVarApiClient.escapeString(giftCardProviderID.toString()))
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()))
            .replace("{" + "tId" + "}", localVarApiClient.escapeString(tId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllGiftCardCancellationTransactionsValidateBeforeCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling listAllGiftCardCancellationTransactions(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listAllGiftCardCancellationTransactions(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling listAllGiftCardCancellationTransactions(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling listAllGiftCardCancellationTransactions(Async)");
        }

        // verify the required parameter 'giftCardProviderID' is set
        if (giftCardProviderID == null) {
            throw new ApiException("Missing the required parameter 'giftCardProviderID' when calling listAllGiftCardCancellationTransactions(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling listAllGiftCardCancellationTransactions(Async)");
        }

        // verify the required parameter 'tId' is set
        if (tId == null) {
            throw new ApiException("Missing the required parameter 'tId' when calling listAllGiftCardCancellationTransactions(Async)");
        }

        return listAllGiftCardCancellationTransactionsCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId, _callback);

    }

    /**
     * List All GiftCard Cancellation Transactions
     * Returns a collection of cancellation transactions from a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object listAllGiftCardCancellationTransactions(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId) throws ApiException {
        ApiResponse<Object> localVarResp = listAllGiftCardCancellationTransactionsWithHttpInfo(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId);
        return localVarResp.getData();
    }

    /**
     * List All GiftCard Cancellation Transactions
     * Returns a collection of cancellation transactions from a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listAllGiftCardCancellationTransactionsWithHttpInfo(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId) throws ApiException {
        okhttp3.Call localVarCall = listAllGiftCardCancellationTransactionsValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List All GiftCard Cancellation Transactions (asynchronously)
     * Returns a collection of cancellation transactions from a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllGiftCardCancellationTransactionsAsync(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllGiftCardCancellationTransactionsValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllGiftCardSettlementTransactions
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllGiftCardSettlementTransactionsCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/settlements"
            .replace("{" + "giftCardProviderID" + "}", localVarApiClient.escapeString(giftCardProviderID.toString()))
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()))
            .replace("{" + "tId" + "}", localVarApiClient.escapeString(tId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllGiftCardSettlementTransactionsValidateBeforeCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling listAllGiftCardSettlementTransactions(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listAllGiftCardSettlementTransactions(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling listAllGiftCardSettlementTransactions(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling listAllGiftCardSettlementTransactions(Async)");
        }

        // verify the required parameter 'giftCardProviderID' is set
        if (giftCardProviderID == null) {
            throw new ApiException("Missing the required parameter 'giftCardProviderID' when calling listAllGiftCardSettlementTransactions(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling listAllGiftCardSettlementTransactions(Async)");
        }

        // verify the required parameter 'tId' is set
        if (tId == null) {
            throw new ApiException("Missing the required parameter 'tId' when calling listAllGiftCardSettlementTransactions(Async)");
        }

        return listAllGiftCardSettlementTransactionsCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId, _callback);

    }

    /**
     * List All GiftCard Settlement Transactions
     * Returns a collection of settlement transactions from a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object listAllGiftCardSettlementTransactions(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId) throws ApiException {
        ApiResponse<Object> localVarResp = listAllGiftCardSettlementTransactionsWithHttpInfo(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId);
        return localVarResp.getData();
    }

    /**
     * List All GiftCard Settlement Transactions
     * Returns a collection of settlement transactions from a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listAllGiftCardSettlementTransactionsWithHttpInfo(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId) throws ApiException {
        okhttp3.Call localVarCall = listAllGiftCardSettlementTransactionsValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List All GiftCard Settlement Transactions (asynchronously)
     * Returns a collection of settlement transactions from a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param tId Transaction ID generated by the provider. It is different from the &#x60;transactionID&#x60; generated by VTEX. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllGiftCardSettlementTransactionsAsync(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, String tId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllGiftCardSettlementTransactionsValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllGiftCardTransactions
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllGiftCardTransactionsCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions"
            .replace("{" + "giftCardProviderID" + "}", localVarApiClient.escapeString(giftCardProviderID.toString()))
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllGiftCardTransactionsValidateBeforeCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling listAllGiftCardTransactions(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listAllGiftCardTransactions(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling listAllGiftCardTransactions(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling listAllGiftCardTransactions(Async)");
        }

        // verify the required parameter 'giftCardProviderID' is set
        if (giftCardProviderID == null) {
            throw new ApiException("Missing the required parameter 'giftCardProviderID' when calling listAllGiftCardTransactions(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling listAllGiftCardTransactions(Async)");
        }

        return listAllGiftCardTransactionsCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, _callback);

    }

    /**
     * List All GiftCard Transactions
     * Return all transaction from a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object listAllGiftCardTransactions(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID) throws ApiException {
        ApiResponse<Object> localVarResp = listAllGiftCardTransactionsWithHttpInfo(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID);
        return localVarResp.getData();
    }

    /**
     * List All GiftCard Transactions
     * Return all transaction from a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listAllGiftCardTransactionsWithHttpInfo(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID) throws ApiException {
        okhttp3.Call localVarCall = listAllGiftCardTransactionsValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List All GiftCard Transactions (asynchronously)
     * Return all transaction from a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param giftCardID Gift Card ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllGiftCardTransactionsAsync(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, String giftCardID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllGiftCardTransactionsValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
