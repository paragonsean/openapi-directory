/*
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateUpdateGiftCardProviderbyIDRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProviderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProviderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProviderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createUpdateGiftCardProviderbyID
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param createUpdateGiftCardProviderbyIDRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUpdateGiftCardProviderbyIDCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, CreateUpdateGiftCardProviderbyIDRequest createUpdateGiftCardProviderbyIDRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdateGiftCardProviderbyIDRequest;

        // create path and map variables
        String localVarPath = "/giftcardproviders/{giftCardProviderID}"
            .replace("{" + "giftCardProviderID" + "}", localVarApiClient.escapeString(giftCardProviderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vtex.giftcardproviders.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUpdateGiftCardProviderbyIDValidateBeforeCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, CreateUpdateGiftCardProviderbyIDRequest createUpdateGiftCardProviderbyIDRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createUpdateGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createUpdateGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling createUpdateGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling createUpdateGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'giftCardProviderID' is set
        if (giftCardProviderID == null) {
            throw new ApiException("Missing the required parameter 'giftCardProviderID' when calling createUpdateGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'createUpdateGiftCardProviderbyIDRequest' is set
        if (createUpdateGiftCardProviderbyIDRequest == null) {
            throw new ApiException("Missing the required parameter 'createUpdateGiftCardProviderbyIDRequest' when calling createUpdateGiftCardProviderbyID(Async)");
        }

        return createUpdateGiftCardProviderbyIDCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, createUpdateGiftCardProviderbyIDRequest, _callback);

    }

    /**
     * Create/Update GiftCard Provider by ID
     * Create or update a giftcard provider from a store.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param createUpdateGiftCardProviderbyIDRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object createUpdateGiftCardProviderbyID(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, CreateUpdateGiftCardProviderbyIDRequest createUpdateGiftCardProviderbyIDRequest) throws ApiException {
        ApiResponse<Object> localVarResp = createUpdateGiftCardProviderbyIDWithHttpInfo(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, createUpdateGiftCardProviderbyIDRequest);
        return localVarResp.getData();
    }

    /**
     * Create/Update GiftCard Provider by ID
     * Create or update a giftcard provider from a store.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param createUpdateGiftCardProviderbyIDRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createUpdateGiftCardProviderbyIDWithHttpInfo(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, CreateUpdateGiftCardProviderbyIDRequest createUpdateGiftCardProviderbyIDRequest) throws ApiException {
        okhttp3.Call localVarCall = createUpdateGiftCardProviderbyIDValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, createUpdateGiftCardProviderbyIDRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create/Update GiftCard Provider by ID (asynchronously)
     * Create or update a giftcard provider from a store.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param createUpdateGiftCardProviderbyIDRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUpdateGiftCardProviderbyIDAsync(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, CreateUpdateGiftCardProviderbyIDRequest createUpdateGiftCardProviderbyIDRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUpdateGiftCardProviderbyIDValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, createUpdateGiftCardProviderbyIDRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGiftCardProviderbyID
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> O provider não existe.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGiftCardProviderbyIDCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcardproviders/{giftCardProviderID}"
            .replace("{" + "giftCardProviderID" + "}", localVarApiClient.escapeString(giftCardProviderID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGiftCardProviderbyIDValidateBeforeCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling deleteGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling deleteGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling deleteGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling deleteGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'giftCardProviderID' is set
        if (giftCardProviderID == null) {
            throw new ApiException("Missing the required parameter 'giftCardProviderID' when calling deleteGiftCardProviderbyID(Async)");
        }

        return deleteGiftCardProviderbyIDCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, _callback);

    }

    /**
     * Delete GiftCard Provider by ID
     * Delete a giftcard provider from a store.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> O provider não existe.  </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteGiftCardProviderbyID(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID) throws ApiException {
        ApiResponse<Object> localVarResp = deleteGiftCardProviderbyIDWithHttpInfo(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID);
        return localVarResp.getData();
    }

    /**
     * Delete GiftCard Provider by ID
     * Delete a giftcard provider from a store.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> O provider não existe.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteGiftCardProviderbyIDWithHttpInfo(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID) throws ApiException {
        okhttp3.Call localVarCall = deleteGiftCardProviderbyIDValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete GiftCard Provider by ID (asynchronously)
     * Delete a giftcard provider from a store.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderID Gift Card provider&#39;s ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> O provider não existe.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGiftCardProviderbyIDAsync(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderID, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGiftCardProviderbyIDValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGiftCardProviderbyID
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderId Gift Card provider&#39;s ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> O provider não existe.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardProviderbyIDCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcardproviders/{giftCardProviderId}"
            .replace("{" + "giftCardProviderId" + "}", localVarApiClient.escapeString(giftCardProviderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGiftCardProviderbyIDValidateBeforeCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling getGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling getGiftCardProviderbyID(Async)");
        }

        // verify the required parameter 'giftCardProviderId' is set
        if (giftCardProviderId == null) {
            throw new ApiException("Missing the required parameter 'giftCardProviderId' when calling getGiftCardProviderbyID(Async)");
        }

        return getGiftCardProviderbyIDCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderId, _callback);

    }

    /**
     * Get GiftCard Provider by ID
     * Returns a giftcard provider from a store.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderId Gift Card provider&#39;s ID. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> O provider não existe.  </td><td>  -  </td></tr>
     </table>
     */
    public Object getGiftCardProviderbyID(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderId) throws ApiException {
        ApiResponse<Object> localVarResp = getGiftCardProviderbyIDWithHttpInfo(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderId);
        return localVarResp.getData();
    }

    /**
     * Get GiftCard Provider by ID
     * Returns a giftcard provider from a store.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderId Gift Card provider&#39;s ID. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> O provider não existe.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getGiftCardProviderbyIDWithHttpInfo(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderId) throws ApiException {
        okhttp3.Call localVarCall = getGiftCardProviderbyIDValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GiftCard Provider by ID (asynchronously)
     * Returns a giftcard provider from a store.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param giftCardProviderId Gift Card provider&#39;s ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> O provider não existe.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardProviderbyIDAsync(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String giftCardProviderId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGiftCardProviderbyIDValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAllGiftCardProviders
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param reSTRange Pagination control. This query variable must follow the format _resources&#x3D;{from}-{to}_. (optional, default to resources&#x3D;0-49)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllGiftCardProvidersCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String reSTRange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcardproviders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (reSTRange != null) {
            localVarHeaderParams.put("REST-Range", localVarApiClient.parameterToString(reSTRange));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllGiftCardProvidersValidateBeforeCall(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String reSTRange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling listAllGiftCardProviders(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listAllGiftCardProviders(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling listAllGiftCardProviders(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling listAllGiftCardProviders(Async)");
        }

        return listAllGiftCardProvidersCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, reSTRange, _callback);

    }

    /**
     * List All GiftCard Providers
     * Returns a collection of giftcard providers from a store.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param reSTRange Pagination control. This query variable must follow the format _resources&#x3D;{from}-{to}_. (optional, default to resources&#x3D;0-49)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object listAllGiftCardProviders(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String reSTRange) throws ApiException {
        ApiResponse<Object> localVarResp = listAllGiftCardProvidersWithHttpInfo(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, reSTRange);
        return localVarResp.getData();
    }

    /**
     * List All GiftCard Providers
     * Returns a collection of giftcard providers from a store.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param reSTRange Pagination control. This query variable must follow the format _resources&#x3D;{from}-{to}_. (optional, default to resources&#x3D;0-49)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> listAllGiftCardProvidersWithHttpInfo(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String reSTRange) throws ApiException {
        okhttp3.Call localVarCall = listAllGiftCardProvidersValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, reSTRange, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List All GiftCard Providers (asynchronously)
     * Returns a collection of giftcard providers from a store.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json. (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json. (required)
     * @param xVTEXAPIAppKey VTEX API AppKey (required)
     * @param xVTEXAPIAppToken VTEX API AppToken (required)
     * @param reSTRange Pagination control. This query variable must follow the format _resources&#x3D;{from}-{to}_. (optional, default to resources&#x3D;0-49)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAllGiftCardProvidersAsync(String accept, String contentType, String xVTEXAPIAppKey, String xVTEXAPIAppToken, String reSTRange, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllGiftCardProvidersValidateBeforeCall(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, reSTRange, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
