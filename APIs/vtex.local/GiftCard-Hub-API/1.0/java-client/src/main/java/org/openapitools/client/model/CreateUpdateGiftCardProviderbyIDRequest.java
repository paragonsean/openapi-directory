/*
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateUpdateGiftCardProviderbyIDRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:55.897186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateUpdateGiftCardProviderbyIDRequest {
  public static final String SERIALIZED_NAME_APP_KEY = "appKey";
  @SerializedName(SERIALIZED_NAME_APP_KEY)
  private String appKey;

  public static final String SERIALIZED_NAME_APP_TOKEN = "appToken";
  @SerializedName(SERIALIZED_NAME_APP_TOKEN)
  private String appToken;

  public static final String SERIALIZED_NAME_CANCEL_ENABLED = "cancelEnabled";
  @SerializedName(SERIALIZED_NAME_CANCEL_ENABLED)
  private Boolean cancelEnabled;

  public static final String SERIALIZED_NAME_OAUTH_PROVIDER = "oauthProvider";
  @SerializedName(SERIALIZED_NAME_OAUTH_PROVIDER)
  private String oauthProvider;

  public static final String SERIALIZED_NAME_PRE_AUTH_ENABLED = "preAuthEnabled";
  @SerializedName(SERIALIZED_NAME_PRE_AUTH_ENABLED)
  private Boolean preAuthEnabled;

  public static final String SERIALIZED_NAME_SERVICE_URL = "serviceUrl";
  @SerializedName(SERIALIZED_NAME_SERVICE_URL)
  private String serviceUrl;

  public CreateUpdateGiftCardProviderbyIDRequest() {
  }

  public CreateUpdateGiftCardProviderbyIDRequest appKey(String appKey) {
    this.appKey = appKey;
    return this;
  }

  /**
   * Credential provided by the merchant that VTEX will use for identification
   * @return appKey
   */
  @javax.annotation.Nullable
  public String getAppKey() {
    return appKey;
  }

  public void setAppKey(String appKey) {
    this.appKey = appKey;
  }


  public CreateUpdateGiftCardProviderbyIDRequest appToken(String appToken) {
    this.appToken = appToken;
    return this;
  }

  /**
   * Credential provided by the merchant that VTEX will use for identification
   * @return appToken
   */
  @javax.annotation.Nullable
  public String getAppToken() {
    return appToken;
  }

  public void setAppToken(String appToken) {
    this.appToken = appToken;
  }


  public CreateUpdateGiftCardProviderbyIDRequest cancelEnabled(Boolean cancelEnabled) {
    this.cancelEnabled = cancelEnabled;
    return this;
  }

  /**
   * It says if it is possible to cancel the transaction, generated through the provider
   * @return cancelEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getCancelEnabled() {
    return cancelEnabled;
  }

  public void setCancelEnabled(Boolean cancelEnabled) {
    this.cancelEnabled = cancelEnabled;
  }


  public CreateUpdateGiftCardProviderbyIDRequest oauthProvider(String oauthProvider) {
    this.oauthProvider = oauthProvider;
    return this;
  }

  /**
   * Provider&#39;s authentication
   * @return oauthProvider
   */
  @javax.annotation.Nonnull
  public String getOauthProvider() {
    return oauthProvider;
  }

  public void setOauthProvider(String oauthProvider) {
    this.oauthProvider = oauthProvider;
  }


  public CreateUpdateGiftCardProviderbyIDRequest preAuthEnabled(Boolean preAuthEnabled) {
    this.preAuthEnabled = preAuthEnabled;
    return this;
  }

  /**
   * Related to the pre-authorization that can happen on the transaction generated through the provider
   * @return preAuthEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getPreAuthEnabled() {
    return preAuthEnabled;
  }

  public void setPreAuthEnabled(Boolean preAuthEnabled) {
    this.preAuthEnabled = preAuthEnabled;
  }


  public CreateUpdateGiftCardProviderbyIDRequest serviceUrl(String serviceUrl) {
    this.serviceUrl = serviceUrl;
    return this;
  }

  /**
   * URL from the provider
   * @return serviceUrl
   */
  @javax.annotation.Nonnull
  public String getServiceUrl() {
    return serviceUrl;
  }

  public void setServiceUrl(String serviceUrl) {
    this.serviceUrl = serviceUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUpdateGiftCardProviderbyIDRequest createUpdateGiftCardProviderbyIDRequest = (CreateUpdateGiftCardProviderbyIDRequest) o;
    return Objects.equals(this.appKey, createUpdateGiftCardProviderbyIDRequest.appKey) &&
        Objects.equals(this.appToken, createUpdateGiftCardProviderbyIDRequest.appToken) &&
        Objects.equals(this.cancelEnabled, createUpdateGiftCardProviderbyIDRequest.cancelEnabled) &&
        Objects.equals(this.oauthProvider, createUpdateGiftCardProviderbyIDRequest.oauthProvider) &&
        Objects.equals(this.preAuthEnabled, createUpdateGiftCardProviderbyIDRequest.preAuthEnabled) &&
        Objects.equals(this.serviceUrl, createUpdateGiftCardProviderbyIDRequest.serviceUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appKey, appToken, cancelEnabled, oauthProvider, preAuthEnabled, serviceUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUpdateGiftCardProviderbyIDRequest {\n");
    sb.append("    appKey: ").append(toIndentedString(appKey)).append("\n");
    sb.append("    appToken: ").append(toIndentedString(appToken)).append("\n");
    sb.append("    cancelEnabled: ").append(toIndentedString(cancelEnabled)).append("\n");
    sb.append("    oauthProvider: ").append(toIndentedString(oauthProvider)).append("\n");
    sb.append("    preAuthEnabled: ").append(toIndentedString(preAuthEnabled)).append("\n");
    sb.append("    serviceUrl: ").append(toIndentedString(serviceUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appKey");
    openapiFields.add("appToken");
    openapiFields.add("cancelEnabled");
    openapiFields.add("oauthProvider");
    openapiFields.add("preAuthEnabled");
    openapiFields.add("serviceUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cancelEnabled");
    openapiRequiredFields.add("oauthProvider");
    openapiRequiredFields.add("preAuthEnabled");
    openapiRequiredFields.add("serviceUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateUpdateGiftCardProviderbyIDRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateUpdateGiftCardProviderbyIDRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateUpdateGiftCardProviderbyIDRequest is not found in the empty JSON string", CreateUpdateGiftCardProviderbyIDRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateUpdateGiftCardProviderbyIDRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateUpdateGiftCardProviderbyIDRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateUpdateGiftCardProviderbyIDRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appKey") != null && !jsonObj.get("appKey").isJsonNull()) && !jsonObj.get("appKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appKey").toString()));
      }
      if ((jsonObj.get("appToken") != null && !jsonObj.get("appToken").isJsonNull()) && !jsonObj.get("appToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appToken").toString()));
      }
      if (!jsonObj.get("oauthProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauthProvider").toString()));
      }
      if (!jsonObj.get("serviceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateUpdateGiftCardProviderbyIDRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateUpdateGiftCardProviderbyIDRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateUpdateGiftCardProviderbyIDRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateUpdateGiftCardProviderbyIDRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateUpdateGiftCardProviderbyIDRequest>() {
           @Override
           public void write(JsonWriter out, CreateUpdateGiftCardProviderbyIDRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateUpdateGiftCardProviderbyIDRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateUpdateGiftCardProviderbyIDRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateUpdateGiftCardProviderbyIDRequest
   * @throws IOException if the JSON string is invalid with respect to CreateUpdateGiftCardProviderbyIDRequest
   */
  public static CreateUpdateGiftCardProviderbyIDRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateUpdateGiftCardProviderbyIDRequest.class);
  }

  /**
   * Convert an instance of CreateUpdateGiftCardProviderbyIDRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

