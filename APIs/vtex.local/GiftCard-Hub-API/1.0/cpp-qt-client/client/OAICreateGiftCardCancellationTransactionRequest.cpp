/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGiftCardCancellationTransactionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGiftCardCancellationTransactionRequest::OAICreateGiftCardCancellationTransactionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGiftCardCancellationTransactionRequest::OAICreateGiftCardCancellationTransactionRequest() {
    this->initializeModel();
}

OAICreateGiftCardCancellationTransactionRequest::~OAICreateGiftCardCancellationTransactionRequest() {}

void OAICreateGiftCardCancellationTransactionRequest::initializeModel() {

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAICreateGiftCardCancellationTransactionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGiftCardCancellationTransactionRequest::fromJsonObject(QJsonObject json) {

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAICreateGiftCardCancellationTransactionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGiftCardCancellationTransactionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAICreateGiftCardCancellationTransactionRequest::getRequestId() const {
    return m_request_id;
}
void OAICreateGiftCardCancellationTransactionRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICreateGiftCardCancellationTransactionRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICreateGiftCardCancellationTransactionRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

double OAICreateGiftCardCancellationTransactionRequest::getValue() const {
    return m_value;
}
void OAICreateGiftCardCancellationTransactionRequest::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICreateGiftCardCancellationTransactionRequest::is_value_Set() const{
    return m_value_isSet;
}

bool OAICreateGiftCardCancellationTransactionRequest::is_value_Valid() const{
    return m_value_isValid;
}

bool OAICreateGiftCardCancellationTransactionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGiftCardCancellationTransactionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_request_id_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
