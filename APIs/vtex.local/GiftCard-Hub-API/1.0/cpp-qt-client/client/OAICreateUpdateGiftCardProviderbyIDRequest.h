/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateUpdateGiftCardProviderbyIDRequest.h
 *
 * 
 */

#ifndef OAICreateUpdateGiftCardProviderbyIDRequest_H
#define OAICreateUpdateGiftCardProviderbyIDRequest_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateUpdateGiftCardProviderbyIDRequest : public OAIObject {
public:
    OAICreateUpdateGiftCardProviderbyIDRequest();
    OAICreateUpdateGiftCardProviderbyIDRequest(QString json);
    ~OAICreateUpdateGiftCardProviderbyIDRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAppKey() const;
    void setAppKey(const QString &app_key);
    bool is_app_key_Set() const;
    bool is_app_key_Valid() const;

    QString getAppToken() const;
    void setAppToken(const QString &app_token);
    bool is_app_token_Set() const;
    bool is_app_token_Valid() const;

    bool isCancelEnabled() const;
    void setCancelEnabled(const bool &cancel_enabled);
    bool is_cancel_enabled_Set() const;
    bool is_cancel_enabled_Valid() const;

    QString getOauthProvider() const;
    void setOauthProvider(const QString &oauth_provider);
    bool is_oauth_provider_Set() const;
    bool is_oauth_provider_Valid() const;

    bool isPreAuthEnabled() const;
    void setPreAuthEnabled(const bool &pre_auth_enabled);
    bool is_pre_auth_enabled_Set() const;
    bool is_pre_auth_enabled_Valid() const;

    QString getServiceUrl() const;
    void setServiceUrl(const QString &service_url);
    bool is_service_url_Set() const;
    bool is_service_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_app_key;
    bool m_app_key_isSet;
    bool m_app_key_isValid;

    QString m_app_token;
    bool m_app_token_isSet;
    bool m_app_token_isValid;

    bool m_cancel_enabled;
    bool m_cancel_enabled_isSet;
    bool m_cancel_enabled_isValid;

    QString m_oauth_provider;
    bool m_oauth_provider_isSet;
    bool m_oauth_provider_isValid;

    bool m_pre_auth_enabled;
    bool m_pre_auth_enabled_isSet;
    bool m_pre_auth_enabled_isValid;

    QString m_service_url;
    bool m_service_url_isSet;
    bool m_service_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateUpdateGiftCardProviderbyIDRequest)

#endif // OAICreateUpdateGiftCardProviderbyIDRequest_H
