/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGiftCardTransactionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGiftCardTransactionRequest::OAICreateGiftCardTransactionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGiftCardTransactionRequest::OAICreateGiftCardTransactionRequest() {
    this->initializeModel();
}

OAICreateGiftCardTransactionRequest::~OAICreateGiftCardTransactionRequest() {}

void OAICreateGiftCardTransactionRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_order_info_isSet = false;
    m_order_info_isValid = false;

    m_redemption_code_isSet = false;
    m_redemption_code_isValid = false;

    m_redemption_token_isSet = false;
    m_redemption_token_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAICreateGiftCardTransactionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGiftCardTransactionRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_order_info_isValid = ::OpenAPI::fromJsonValue(m_order_info, json[QString("orderInfo")]);
    m_order_info_isSet = !json[QString("orderInfo")].isNull() && m_order_info_isValid;

    m_redemption_code_isValid = ::OpenAPI::fromJsonValue(m_redemption_code, json[QString("redemptionCode")]);
    m_redemption_code_isSet = !json[QString("redemptionCode")].isNull() && m_redemption_code_isValid;

    m_redemption_token_isValid = ::OpenAPI::fromJsonValue(m_redemption_token, json[QString("redemptionToken")]);
    m_redemption_token_isSet = !json[QString("redemptionToken")].isNull() && m_redemption_token_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAICreateGiftCardTransactionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGiftCardTransactionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_order_info.isSet()) {
        obj.insert(QString("orderInfo"), ::OpenAPI::toJsonValue(m_order_info));
    }
    if (m_redemption_code_isSet) {
        obj.insert(QString("redemptionCode"), ::OpenAPI::toJsonValue(m_redemption_code));
    }
    if (m_redemption_token_isSet) {
        obj.insert(QString("redemptionToken"), ::OpenAPI::toJsonValue(m_redemption_token));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAICreateGiftCardTransactionRequest::getDescription() const {
    return m_description;
}
void OAICreateGiftCardTransactionRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateGiftCardTransactionRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateGiftCardTransactionRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateGiftCardTransactionRequest::getOperation() const {
    return m_operation;
}
void OAICreateGiftCardTransactionRequest::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAICreateGiftCardTransactionRequest::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAICreateGiftCardTransactionRequest::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIOrderInfo OAICreateGiftCardTransactionRequest::getOrderInfo() const {
    return m_order_info;
}
void OAICreateGiftCardTransactionRequest::setOrderInfo(const OAIOrderInfo &order_info) {
    m_order_info = order_info;
    m_order_info_isSet = true;
}

bool OAICreateGiftCardTransactionRequest::is_order_info_Set() const{
    return m_order_info_isSet;
}

bool OAICreateGiftCardTransactionRequest::is_order_info_Valid() const{
    return m_order_info_isValid;
}

QString OAICreateGiftCardTransactionRequest::getRedemptionCode() const {
    return m_redemption_code;
}
void OAICreateGiftCardTransactionRequest::setRedemptionCode(const QString &redemption_code) {
    m_redemption_code = redemption_code;
    m_redemption_code_isSet = true;
}

bool OAICreateGiftCardTransactionRequest::is_redemption_code_Set() const{
    return m_redemption_code_isSet;
}

bool OAICreateGiftCardTransactionRequest::is_redemption_code_Valid() const{
    return m_redemption_code_isValid;
}

QString OAICreateGiftCardTransactionRequest::getRedemptionToken() const {
    return m_redemption_token;
}
void OAICreateGiftCardTransactionRequest::setRedemptionToken(const QString &redemption_token) {
    m_redemption_token = redemption_token;
    m_redemption_token_isSet = true;
}

bool OAICreateGiftCardTransactionRequest::is_redemption_token_Set() const{
    return m_redemption_token_isSet;
}

bool OAICreateGiftCardTransactionRequest::is_redemption_token_Valid() const{
    return m_redemption_token_isValid;
}

QString OAICreateGiftCardTransactionRequest::getRequestId() const {
    return m_request_id;
}
void OAICreateGiftCardTransactionRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICreateGiftCardTransactionRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICreateGiftCardTransactionRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

double OAICreateGiftCardTransactionRequest::getValue() const {
    return m_value;
}
void OAICreateGiftCardTransactionRequest::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICreateGiftCardTransactionRequest::is_value_Set() const{
    return m_value_isSet;
}

bool OAICreateGiftCardTransactionRequest::is_value_Valid() const{
    return m_value_isValid;
}

bool OAICreateGiftCardTransactionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGiftCardTransactionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_operation_isValid && m_order_info_isValid && m_redemption_code_isValid && m_redemption_token_isValid && m_request_id_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
