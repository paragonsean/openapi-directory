/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem1::OAIItem1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem1::OAIItem1() {
    this->initializeModel();
}

OAIItem1::~OAIItem1() {}

void OAIItem1::initializeModel() {

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_tags_isSet = false;
    m_price_tags_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_ref_id_isSet = false;
    m_ref_id_isValid = false;

    m_shipping_discount_isSet = false;
    m_shipping_discount_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIItem1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem1::fromJsonObject(QJsonObject json) {

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_tags_isValid = ::OpenAPI::fromJsonValue(m_price_tags, json[QString("priceTags")]);
    m_price_tags_isSet = !json[QString("priceTags")].isNull() && m_price_tags_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_ref_id_isValid = ::OpenAPI::fromJsonValue(m_ref_id, json[QString("refId")]);
    m_ref_id_isSet = !json[QString("refId")].isNull() && m_ref_id_isValid;

    m_shipping_discount_isValid = ::OpenAPI::fromJsonValue(m_shipping_discount, json[QString("shippingDiscount")]);
    m_shipping_discount_isSet = !json[QString("shippingDiscount")].isNull() && m_shipping_discount_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIItem1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem1::asJsonObject() const {
    QJsonObject obj;
    if (m_discount_isSet) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_tags.size() > 0) {
        obj.insert(QString("priceTags"), ::OpenAPI::toJsonValue(m_price_tags));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_ref_id_isSet) {
        obj.insert(QString("refId"), ::OpenAPI::toJsonValue(m_ref_id));
    }
    if (m_shipping_discount_isSet) {
        obj.insert(QString("shippingDiscount"), ::OpenAPI::toJsonValue(m_shipping_discount));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint32 OAIItem1::getDiscount() const {
    return m_discount;
}
void OAIItem1::setDiscount(const qint32 &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAIItem1::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAIItem1::is_discount_Valid() const{
    return m_discount_isValid;
}

QString OAIItem1::getId() const {
    return m_id;
}
void OAIItem1::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItem1::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItem1::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIItem1::getName() const {
    return m_name;
}
void OAIItem1::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItem1::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItem1::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIItem1::getPrice() const {
    return m_price;
}
void OAIItem1::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIItem1::is_price_Set() const{
    return m_price_isSet;
}

bool OAIItem1::is_price_Valid() const{
    return m_price_isValid;
}

QList<QString> OAIItem1::getPriceTags() const {
    return m_price_tags;
}
void OAIItem1::setPriceTags(const QList<QString> &price_tags) {
    m_price_tags = price_tags;
    m_price_tags_isSet = true;
}

bool OAIItem1::is_price_tags_Set() const{
    return m_price_tags_isSet;
}

bool OAIItem1::is_price_tags_Valid() const{
    return m_price_tags_isValid;
}

QString OAIItem1::getProductId() const {
    return m_product_id;
}
void OAIItem1::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIItem1::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIItem1::is_product_id_Valid() const{
    return m_product_id_isValid;
}

qint32 OAIItem1::getQuantity() const {
    return m_quantity;
}
void OAIItem1::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIItem1::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIItem1::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIItem1::getRefId() const {
    return m_ref_id;
}
void OAIItem1::setRefId(const QString &ref_id) {
    m_ref_id = ref_id;
    m_ref_id_isSet = true;
}

bool OAIItem1::is_ref_id_Set() const{
    return m_ref_id_isSet;
}

bool OAIItem1::is_ref_id_Valid() const{
    return m_ref_id_isValid;
}

qint32 OAIItem1::getShippingDiscount() const {
    return m_shipping_discount;
}
void OAIItem1::setShippingDiscount(const qint32 &shipping_discount) {
    m_shipping_discount = shipping_discount;
    m_shipping_discount_isSet = true;
}

bool OAIItem1::is_shipping_discount_Set() const{
    return m_shipping_discount_isSet;
}

bool OAIItem1::is_shipping_discount_Valid() const{
    return m_shipping_discount_isValid;
}

qint32 OAIItem1::getValue() const {
    return m_value;
}
void OAIItem1::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIItem1::is_value_Set() const{
    return m_value_isSet;
}

bool OAIItem1::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIItem1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_discount_isValid && m_id_isValid && m_name_isValid && m_price_isValid && m_price_tags_isValid && m_product_id_isValid && m_quantity_isValid && m_ref_id_isValid && m_shipping_discount_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
