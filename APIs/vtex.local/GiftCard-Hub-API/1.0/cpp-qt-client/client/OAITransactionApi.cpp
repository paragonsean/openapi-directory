/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITransactionApi::OAITransactionApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITransactionApi::~OAITransactionApi() {
}

void OAITransactionApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://vtex.local"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://{accountName}.{environment}.com.br/api"),
    "VTEX server url",
    QMap<QString, OAIServerVariable>{ 
    {"accountName", OAIServerVariable("Name of the VTEX account. Used as part of the URL","{accountName}",
    QSet<QString>{ {"{accountName}"} })},
    
    {"environment", OAIServerVariable("Environment to use. Used as part of the URL.","{environment}",
    QSet<QString>{ {"{environment}"} })}, }));
    
    _serverConfigs.insert("createGiftCardCancellationTransaction", defaultConf);
    _serverIndices.insert("createGiftCardCancellationTransaction", 0);
    _serverConfigs.insert("createGiftCardSettlementTransaction", defaultConf);
    _serverIndices.insert("createGiftCardSettlementTransaction", 0);
    _serverConfigs.insert("createGiftCardTransaction", defaultConf);
    _serverIndices.insert("createGiftCardTransaction", 0);
    _serverConfigs.insert("createGiftCardinGiftCardProvider", defaultConf);
    _serverIndices.insert("createGiftCardinGiftCardProvider", 0);
    _serverConfigs.insert("getGiftCardAuthorizationTransaction", defaultConf);
    _serverIndices.insert("getGiftCardAuthorizationTransaction", 0);
    _serverConfigs.insert("getGiftCardTransactionbyID", defaultConf);
    _serverIndices.insert("getGiftCardTransactionbyID", 0);
    _serverConfigs.insert("getGiftCardfromGiftCardProvider", defaultConf);
    _serverIndices.insert("getGiftCardfromGiftCardProvider", 0);
    _serverConfigs.insert("getGiftCardfromGiftCardProviderbyID", defaultConf);
    _serverIndices.insert("getGiftCardfromGiftCardProviderbyID", 0);
    _serverConfigs.insert("listAllGiftCardCancellationTransactions", defaultConf);
    _serverIndices.insert("listAllGiftCardCancellationTransactions", 0);
    _serverConfigs.insert("listAllGiftCardSettlementTransactions", defaultConf);
    _serverIndices.insert("listAllGiftCardSettlementTransactions", 0);
    _serverConfigs.insert("listAllGiftCardTransactions", defaultConf);
    _serverIndices.insert("listAllGiftCardTransactions", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITransactionApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITransactionApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITransactionApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITransactionApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITransactionApi::setUsername(const QString &username) {
    _username = username;
}

void OAITransactionApi::setPassword(const QString &password) {
    _password = password;
}


void OAITransactionApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITransactionApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITransactionApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITransactionApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITransactionApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITransactionApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITransactionApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITransactionApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITransactionApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITransactionApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITransactionApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITransactionApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITransactionApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITransactionApi::createGiftCardCancellationTransaction(const QString &accept, const QString &content_type, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const QString &gift_card_provider_id, const QString &gift_card_id, const QString &t_id, const OAICreateGiftCardCancellationTransactionRequest &oai_create_gift_card_cancellation_transaction_request) {
    QString fullPath = QString(_serverConfigs["createGiftCardCancellationTransaction"][_serverIndices.value("createGiftCardCancellationTransaction")].URL()+"/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/cancellations");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString gift_card_provider_idPathParam("{");
        gift_card_provider_idPathParam.append("giftCardProviderID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardProviderID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardProviderID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_provider_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_provider_id)));
    }
    
    {
        QString gift_card_idPathParam("{");
        gift_card_idPathParam.append("giftCardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_id)));
    }
    
    {
        QString t_idPathParam("{");
        t_idPathParam.append("tId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tId"+pathSuffix : pathPrefix;
        fullPath.replace(t_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(t_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_gift_card_cancellation_transaction_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_key).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppKey", ::OpenAPI::toStringValue(x_vtex_api_app_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_token).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppToken", ::OpenAPI::toStringValue(x_vtex_api_app_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransactionApi::createGiftCardCancellationTransactionCallback);
    connect(this, &OAITransactionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransactionApi::createGiftCardCancellationTransactionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createGiftCardCancellationTransactionSignal(output);
        Q_EMIT createGiftCardCancellationTransactionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createGiftCardCancellationTransactionSignalE(output, error_type, error_str);
        Q_EMIT createGiftCardCancellationTransactionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createGiftCardCancellationTransactionSignalError(output, error_type, error_str);
        Q_EMIT createGiftCardCancellationTransactionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransactionApi::createGiftCardSettlementTransaction(const QString &accept, const QString &content_type, const QString &gift_card_provider_id, const QString &gift_card_id, const QString &t_id, const OAICreateGiftCardSettlementTransactionRequest &oai_create_gift_card_settlement_transaction_request) {
    QString fullPath = QString(_serverConfigs["createGiftCardSettlementTransaction"][_serverIndices.value("createGiftCardSettlementTransaction")].URL()+"/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/settlements");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString gift_card_provider_idPathParam("{");
        gift_card_provider_idPathParam.append("giftCardProviderID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardProviderID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardProviderID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_provider_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_provider_id)));
    }
    
    {
        QString gift_card_idPathParam("{");
        gift_card_idPathParam.append("giftCardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_id)));
    }
    
    {
        QString t_idPathParam("{");
        t_idPathParam.append("tId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tId"+pathSuffix : pathPrefix;
        fullPath.replace(t_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(t_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_gift_card_settlement_transaction_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransactionApi::createGiftCardSettlementTransactionCallback);
    connect(this, &OAITransactionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransactionApi::createGiftCardSettlementTransactionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createGiftCardSettlementTransactionSignal(output);
        Q_EMIT createGiftCardSettlementTransactionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createGiftCardSettlementTransactionSignalE(output, error_type, error_str);
        Q_EMIT createGiftCardSettlementTransactionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createGiftCardSettlementTransactionSignalError(output, error_type, error_str);
        Q_EMIT createGiftCardSettlementTransactionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransactionApi::createGiftCardTransaction(const QString &accept, const QString &content_type, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const QString &gift_card_provider_id, const QString &gift_card_id, const OAICreateGiftCardTransactionRequest &oai_create_gift_card_transaction_request) {
    QString fullPath = QString(_serverConfigs["createGiftCardTransaction"][_serverIndices.value("createGiftCardTransaction")].URL()+"/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString gift_card_provider_idPathParam("{");
        gift_card_provider_idPathParam.append("giftCardProviderID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardProviderID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardProviderID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_provider_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_provider_id)));
    }
    
    {
        QString gift_card_idPathParam("{");
        gift_card_idPathParam.append("giftCardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_gift_card_transaction_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_key).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppKey", ::OpenAPI::toStringValue(x_vtex_api_app_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_token).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppToken", ::OpenAPI::toStringValue(x_vtex_api_app_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransactionApi::createGiftCardTransactionCallback);
    connect(this, &OAITransactionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransactionApi::createGiftCardTransactionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createGiftCardTransactionSignal(output);
        Q_EMIT createGiftCardTransactionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createGiftCardTransactionSignalE(output, error_type, error_str);
        Q_EMIT createGiftCardTransactionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createGiftCardTransactionSignalError(output, error_type, error_str);
        Q_EMIT createGiftCardTransactionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransactionApi::createGiftCardinGiftCardProvider(const QString &accept, const QString &content_type, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const QString &gift_card_provider_id, const OAICreateGiftCardinGiftCardProviderRequest &oai_create_gift_cardin_gift_card_provider_request) {
    QString fullPath = QString(_serverConfigs["createGiftCardinGiftCardProvider"][_serverIndices.value("createGiftCardinGiftCardProvider")].URL()+"/giftcardproviders/{giftCardProviderID}/giftcards");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString gift_card_provider_idPathParam("{");
        gift_card_provider_idPathParam.append("giftCardProviderID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardProviderID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardProviderID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_provider_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_provider_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_gift_cardin_gift_card_provider_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_key).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppKey", ::OpenAPI::toStringValue(x_vtex_api_app_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_token).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppToken", ::OpenAPI::toStringValue(x_vtex_api_app_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransactionApi::createGiftCardinGiftCardProviderCallback);
    connect(this, &OAITransactionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransactionApi::createGiftCardinGiftCardProviderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createGiftCardinGiftCardProviderSignal(output);
        Q_EMIT createGiftCardinGiftCardProviderSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createGiftCardinGiftCardProviderSignalE(output, error_type, error_str);
        Q_EMIT createGiftCardinGiftCardProviderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createGiftCardinGiftCardProviderSignalError(output, error_type, error_str);
        Q_EMIT createGiftCardinGiftCardProviderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransactionApi::getGiftCardAuthorizationTransaction(const QString &accept, const QString &content_type, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const QString &gift_card_provider_id, const QString &gift_card_id, const QString &transaction_id) {
    QString fullPath = QString(_serverConfigs["getGiftCardAuthorizationTransaction"][_serverIndices.value("getGiftCardAuthorizationTransaction")].URL()+"/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{transactionID}/authorization");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString gift_card_provider_idPathParam("{");
        gift_card_provider_idPathParam.append("giftCardProviderID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardProviderID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardProviderID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_provider_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_provider_id)));
    }
    
    {
        QString gift_card_idPathParam("{");
        gift_card_idPathParam.append("giftCardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_id)));
    }
    
    {
        QString transaction_idPathParam("{");
        transaction_idPathParam.append("transactionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "transactionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"transactionID"+pathSuffix : pathPrefix;
        fullPath.replace(transaction_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(transaction_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_key).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppKey", ::OpenAPI::toStringValue(x_vtex_api_app_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_token).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppToken", ::OpenAPI::toStringValue(x_vtex_api_app_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransactionApi::getGiftCardAuthorizationTransactionCallback);
    connect(this, &OAITransactionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransactionApi::getGiftCardAuthorizationTransactionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGiftCardAuthorizationTransactionSignal(output);
        Q_EMIT getGiftCardAuthorizationTransactionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGiftCardAuthorizationTransactionSignalE(output, error_type, error_str);
        Q_EMIT getGiftCardAuthorizationTransactionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGiftCardAuthorizationTransactionSignalError(output, error_type, error_str);
        Q_EMIT getGiftCardAuthorizationTransactionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransactionApi::getGiftCardTransactionbyID(const QString &accept, const QString &content_type, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const QString &gift_card_provider_id, const QString &gift_card_id, const QString &transaction_id) {
    QString fullPath = QString(_serverConfigs["getGiftCardTransactionbyID"][_serverIndices.value("getGiftCardTransactionbyID")].URL()+"/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{transactionID}");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString gift_card_provider_idPathParam("{");
        gift_card_provider_idPathParam.append("giftCardProviderID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardProviderID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardProviderID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_provider_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_provider_id)));
    }
    
    {
        QString gift_card_idPathParam("{");
        gift_card_idPathParam.append("giftCardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_id)));
    }
    
    {
        QString transaction_idPathParam("{");
        transaction_idPathParam.append("transactionID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "transactionID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"transactionID"+pathSuffix : pathPrefix;
        fullPath.replace(transaction_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(transaction_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_key).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppKey", ::OpenAPI::toStringValue(x_vtex_api_app_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_token).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppToken", ::OpenAPI::toStringValue(x_vtex_api_app_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransactionApi::getGiftCardTransactionbyIDCallback);
    connect(this, &OAITransactionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransactionApi::getGiftCardTransactionbyIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGiftCardTransactionbyIDSignal(output);
        Q_EMIT getGiftCardTransactionbyIDSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGiftCardTransactionbyIDSignalE(output, error_type, error_str);
        Q_EMIT getGiftCardTransactionbyIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGiftCardTransactionbyIDSignalError(output, error_type, error_str);
        Q_EMIT getGiftCardTransactionbyIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransactionApi::getGiftCardfromGiftCardProvider(const QString &accept, const QString &content_type, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const QString &rest_range, const QString &gift_card_provider_id, const OAIGetGiftCardfromGiftCardProviderRequest &oai_get_gift_cardfrom_gift_card_provider_request) {
    QString fullPath = QString(_serverConfigs["getGiftCardfromGiftCardProvider"][_serverIndices.value("getGiftCardfromGiftCardProvider")].URL()+"/giftcardproviders/{giftCardProviderID}/giftcards/_search");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString gift_card_provider_idPathParam("{");
        gift_card_provider_idPathParam.append("giftCardProviderID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardProviderID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardProviderID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_provider_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_provider_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_get_gift_cardfrom_gift_card_provider_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_key).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppKey", ::OpenAPI::toStringValue(x_vtex_api_app_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_token).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppToken", ::OpenAPI::toStringValue(x_vtex_api_app_token));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(rest_range).isEmpty()) {
            input.headers.insert("REST-Range", ::OpenAPI::toStringValue(rest_range));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransactionApi::getGiftCardfromGiftCardProviderCallback);
    connect(this, &OAITransactionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransactionApi::getGiftCardfromGiftCardProviderCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGiftCardfromGiftCardProviderSignal(output);
        Q_EMIT getGiftCardfromGiftCardProviderSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGiftCardfromGiftCardProviderSignalE(output, error_type, error_str);
        Q_EMIT getGiftCardfromGiftCardProviderSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGiftCardfromGiftCardProviderSignalError(output, error_type, error_str);
        Q_EMIT getGiftCardfromGiftCardProviderSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransactionApi::getGiftCardfromGiftCardProviderbyID(const QString &accept, const QString &content_type, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const QString &gift_card_provider_id, const QString &gift_card_id) {
    QString fullPath = QString(_serverConfigs["getGiftCardfromGiftCardProviderbyID"][_serverIndices.value("getGiftCardfromGiftCardProviderbyID")].URL()+"/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString gift_card_provider_idPathParam("{");
        gift_card_provider_idPathParam.append("giftCardProviderID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardProviderID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardProviderID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_provider_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_provider_id)));
    }
    
    {
        QString gift_card_idPathParam("{");
        gift_card_idPathParam.append("giftCardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_key).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppKey", ::OpenAPI::toStringValue(x_vtex_api_app_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_token).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppToken", ::OpenAPI::toStringValue(x_vtex_api_app_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransactionApi::getGiftCardfromGiftCardProviderbyIDCallback);
    connect(this, &OAITransactionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransactionApi::getGiftCardfromGiftCardProviderbyIDCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getGiftCardfromGiftCardProviderbyIDSignal(output);
        Q_EMIT getGiftCardfromGiftCardProviderbyIDSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getGiftCardfromGiftCardProviderbyIDSignalE(output, error_type, error_str);
        Q_EMIT getGiftCardfromGiftCardProviderbyIDSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getGiftCardfromGiftCardProviderbyIDSignalError(output, error_type, error_str);
        Q_EMIT getGiftCardfromGiftCardProviderbyIDSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransactionApi::listAllGiftCardCancellationTransactions(const QString &accept, const QString &content_type, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const QString &gift_card_provider_id, const QString &gift_card_id, const QString &t_id) {
    QString fullPath = QString(_serverConfigs["listAllGiftCardCancellationTransactions"][_serverIndices.value("listAllGiftCardCancellationTransactions")].URL()+"/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/cancellations");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString gift_card_provider_idPathParam("{");
        gift_card_provider_idPathParam.append("giftCardProviderID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardProviderID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardProviderID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_provider_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_provider_id)));
    }
    
    {
        QString gift_card_idPathParam("{");
        gift_card_idPathParam.append("giftCardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_id)));
    }
    
    {
        QString t_idPathParam("{");
        t_idPathParam.append("tId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tId"+pathSuffix : pathPrefix;
        fullPath.replace(t_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(t_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_key).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppKey", ::OpenAPI::toStringValue(x_vtex_api_app_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_token).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppToken", ::OpenAPI::toStringValue(x_vtex_api_app_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransactionApi::listAllGiftCardCancellationTransactionsCallback);
    connect(this, &OAITransactionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransactionApi::listAllGiftCardCancellationTransactionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listAllGiftCardCancellationTransactionsSignal(output);
        Q_EMIT listAllGiftCardCancellationTransactionsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listAllGiftCardCancellationTransactionsSignalE(output, error_type, error_str);
        Q_EMIT listAllGiftCardCancellationTransactionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listAllGiftCardCancellationTransactionsSignalError(output, error_type, error_str);
        Q_EMIT listAllGiftCardCancellationTransactionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransactionApi::listAllGiftCardSettlementTransactions(const QString &accept, const QString &content_type, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const QString &gift_card_provider_id, const QString &gift_card_id, const QString &t_id) {
    QString fullPath = QString(_serverConfigs["listAllGiftCardSettlementTransactions"][_serverIndices.value("listAllGiftCardSettlementTransactions")].URL()+"/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/settlements");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString gift_card_provider_idPathParam("{");
        gift_card_provider_idPathParam.append("giftCardProviderID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardProviderID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardProviderID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_provider_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_provider_id)));
    }
    
    {
        QString gift_card_idPathParam("{");
        gift_card_idPathParam.append("giftCardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_id)));
    }
    
    {
        QString t_idPathParam("{");
        t_idPathParam.append("tId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "tId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"tId"+pathSuffix : pathPrefix;
        fullPath.replace(t_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(t_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_key).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppKey", ::OpenAPI::toStringValue(x_vtex_api_app_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_token).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppToken", ::OpenAPI::toStringValue(x_vtex_api_app_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransactionApi::listAllGiftCardSettlementTransactionsCallback);
    connect(this, &OAITransactionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransactionApi::listAllGiftCardSettlementTransactionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listAllGiftCardSettlementTransactionsSignal(output);
        Q_EMIT listAllGiftCardSettlementTransactionsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listAllGiftCardSettlementTransactionsSignalE(output, error_type, error_str);
        Q_EMIT listAllGiftCardSettlementTransactionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listAllGiftCardSettlementTransactionsSignalError(output, error_type, error_str);
        Q_EMIT listAllGiftCardSettlementTransactionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransactionApi::listAllGiftCardTransactions(const QString &accept, const QString &content_type, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const QString &gift_card_provider_id, const QString &gift_card_id) {
    QString fullPath = QString(_serverConfigs["listAllGiftCardTransactions"][_serverIndices.value("listAllGiftCardTransactions")].URL()+"/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions");
    
    if (_apiKeys.contains("appToken")) {
        addHeaders("appToken",_apiKeys.find("appToken").value());
    }
    
    if (_apiKeys.contains("appKey")) {
        addHeaders("appKey",_apiKeys.find("appKey").value());
    }
    
    
    {
        QString gift_card_provider_idPathParam("{");
        gift_card_provider_idPathParam.append("giftCardProviderID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardProviderID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardProviderID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_provider_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_provider_id)));
    }
    
    {
        QString gift_card_idPathParam("{");
        gift_card_idPathParam.append("giftCardID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "giftCardID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"giftCardID"+pathSuffix : pathPrefix;
        fullPath.replace(gift_card_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(gift_card_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_key).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppKey", ::OpenAPI::toStringValue(x_vtex_api_app_key));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vtex_api_app_token).isEmpty()) {
            input.headers.insert("X-VTEX-API-AppToken", ::OpenAPI::toStringValue(x_vtex_api_app_token));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITransactionApi::listAllGiftCardTransactionsCallback);
    connect(this, &OAITransactionApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITransactionApi::listAllGiftCardTransactionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listAllGiftCardTransactionsSignal(output);
        Q_EMIT listAllGiftCardTransactionsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listAllGiftCardTransactionsSignalE(output, error_type, error_str);
        Q_EMIT listAllGiftCardTransactionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listAllGiftCardTransactionsSignalError(output, error_type, error_str);
        Q_EMIT listAllGiftCardTransactionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITransactionApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
