/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProviderApi_H
#define OAI_OAIProviderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateUpdateGiftCardProviderbyIDRequest.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProviderApi : public QObject {
    Q_OBJECT

public:
    OAIProviderApi(const int timeOut = 0);
    ~OAIProviderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  x_vtex_api_app_key QString [required]
    * @param[in]  x_vtex_api_app_token QString [required]
    * @param[in]  gift_card_provider_id QString [required]
    * @param[in]  oai_create_update_gift_card_providerby_id_request OAICreateUpdateGiftCardProviderbyIDRequest [required]
    */
    virtual void create_UpdateGiftCardProviderbyID(const QString &accept, const QString &content_type, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const QString &gift_card_provider_id, const OAICreateUpdateGiftCardProviderbyIDRequest &oai_create_update_gift_card_providerby_id_request);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  x_vtex_api_app_key QString [required]
    * @param[in]  x_vtex_api_app_token QString [required]
    * @param[in]  gift_card_provider_id QString [required]
    */
    virtual void deleteGiftCardProviderbyID(const QString &accept, const QString &content_type, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const QString &gift_card_provider_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  x_vtex_api_app_key QString [required]
    * @param[in]  x_vtex_api_app_token QString [required]
    * @param[in]  gift_card_provider_id QString [required]
    */
    virtual void getGiftCardProviderbyID(const QString &accept, const QString &content_type, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const QString &gift_card_provider_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  x_vtex_api_app_key QString [required]
    * @param[in]  x_vtex_api_app_token QString [required]
    * @param[in]  rest_range QString [optional]
    */
    virtual void listAllGiftCardProviders(const QString &accept, const QString &content_type, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const ::OpenAPI::OptionalParam<QString> &rest_range = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void create_UpdateGiftCardProviderbyIDCallback(OAIHttpRequestWorker *worker);
    void deleteGiftCardProviderbyIDCallback(OAIHttpRequestWorker *worker);
    void getGiftCardProviderbyIDCallback(OAIHttpRequestWorker *worker);
    void listAllGiftCardProvidersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void create_UpdateGiftCardProviderbyIDSignal(OAIObject summary);
    void deleteGiftCardProviderbyIDSignal(OAIObject summary);
    void getGiftCardProviderbyIDSignal(OAIObject summary);
    void listAllGiftCardProvidersSignal(OAIObject summary);


    void create_UpdateGiftCardProviderbyIDSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteGiftCardProviderbyIDSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getGiftCardProviderbyIDSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void listAllGiftCardProvidersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use create_UpdateGiftCardProviderbyIDSignalError() instead")
    void create_UpdateGiftCardProviderbyIDSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void create_UpdateGiftCardProviderbyIDSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGiftCardProviderbyIDSignalError() instead")
    void deleteGiftCardProviderbyIDSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGiftCardProviderbyIDSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGiftCardProviderbyIDSignalError() instead")
    void getGiftCardProviderbyIDSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGiftCardProviderbyIDSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllGiftCardProvidersSignalError() instead")
    void listAllGiftCardProvidersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllGiftCardProvidersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use create_UpdateGiftCardProviderbyIDSignalErrorFull() instead")
    void create_UpdateGiftCardProviderbyIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void create_UpdateGiftCardProviderbyIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGiftCardProviderbyIDSignalErrorFull() instead")
    void deleteGiftCardProviderbyIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGiftCardProviderbyIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGiftCardProviderbyIDSignalErrorFull() instead")
    void getGiftCardProviderbyIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGiftCardProviderbyIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllGiftCardProvidersSignalErrorFull() instead")
    void listAllGiftCardProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllGiftCardProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
