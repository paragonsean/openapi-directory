/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICart1.h
 *
 * 
 */

#ifndef OAICart1_H
#define OAICart1_H

#include <QJsonObject>

#include "OAIItem1.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIItem1;

class OAICart1 : public OAIObject {
public:
    OAICart1();
    OAICart1(QString json);
    ~OAICart1() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDiscounts() const;
    void setDiscounts(const qint32 &discounts);
    bool is_discounts_Set() const;
    bool is_discounts_Valid() const;

    qint32 getGrandTotal() const;
    void setGrandTotal(const qint32 &grand_total);
    bool is_grand_total_Set() const;
    bool is_grand_total_Valid() const;

    QList<OAIItem1> getItems() const;
    void setItems(const QList<OAIItem1> &items);
    bool is_items_Set() const;
    bool is_items_Valid() const;

    qint32 getItemsTotal() const;
    void setItemsTotal(const qint32 &items_total);
    bool is_items_total_Set() const;
    bool is_items_total_Valid() const;

    qint32 getShipping() const;
    void setShipping(const qint32 &shipping);
    bool is_shipping_Set() const;
    bool is_shipping_Valid() const;

    qint32 getTaxes() const;
    void setTaxes(const qint32 &taxes);
    bool is_taxes_Set() const;
    bool is_taxes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_discounts;
    bool m_discounts_isSet;
    bool m_discounts_isValid;

    qint32 m_grand_total;
    bool m_grand_total_isSet;
    bool m_grand_total_isValid;

    QList<OAIItem1> m_items;
    bool m_items_isSet;
    bool m_items_isValid;

    qint32 m_items_total;
    bool m_items_total_isSet;
    bool m_items_total_isValid;

    qint32 m_shipping;
    bool m_shipping_isSet;
    bool m_shipping_isValid;

    qint32 m_taxes;
    bool m_taxes_isSet;
    bool m_taxes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICart1)

#endif // OAICart1_H
