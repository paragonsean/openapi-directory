/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGiftCardinGiftCardProviderRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGiftCardinGiftCardProviderRequest::OAICreateGiftCardinGiftCardProviderRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGiftCardinGiftCardProviderRequest::OAICreateGiftCardinGiftCardProviderRequest() {
    this->initializeModel();
}

OAICreateGiftCardinGiftCardProviderRequest::~OAICreateGiftCardinGiftCardProviderRequest() {}

void OAICreateGiftCardinGiftCardProviderRequest::initializeModel() {

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_emission_date_isSet = false;
    m_emission_date_isValid = false;

    m_expiring_date_isSet = false;
    m_expiring_date_isValid = false;

    m_multiple_credits_isSet = false;
    m_multiple_credits_isValid = false;

    m_multiple_redemptions_isSet = false;
    m_multiple_redemptions_isValid = false;

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;

    m_relation_name_isSet = false;
    m_relation_name_isValid = false;

    m_restricted_to_owner_isSet = false;
    m_restricted_to_owner_isValid = false;
}

void OAICreateGiftCardinGiftCardProviderRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGiftCardinGiftCardProviderRequest::fromJsonObject(QJsonObject json) {

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_emission_date_isValid = ::OpenAPI::fromJsonValue(m_emission_date, json[QString("emissionDate")]);
    m_emission_date_isSet = !json[QString("emissionDate")].isNull() && m_emission_date_isValid;

    m_expiring_date_isValid = ::OpenAPI::fromJsonValue(m_expiring_date, json[QString("expiringDate")]);
    m_expiring_date_isSet = !json[QString("expiringDate")].isNull() && m_expiring_date_isValid;

    m_multiple_credits_isValid = ::OpenAPI::fromJsonValue(m_multiple_credits, json[QString("multipleCredits")]);
    m_multiple_credits_isSet = !json[QString("multipleCredits")].isNull() && m_multiple_credits_isValid;

    m_multiple_redemptions_isValid = ::OpenAPI::fromJsonValue(m_multiple_redemptions, json[QString("multipleRedemptions")]);
    m_multiple_redemptions_isSet = !json[QString("multipleRedemptions")].isNull() && m_multiple_redemptions_isValid;

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("profileId")]);
    m_profile_id_isSet = !json[QString("profileId")].isNull() && m_profile_id_isValid;

    m_relation_name_isValid = ::OpenAPI::fromJsonValue(m_relation_name, json[QString("relationName")]);
    m_relation_name_isSet = !json[QString("relationName")].isNull() && m_relation_name_isValid;

    m_restricted_to_owner_isValid = ::OpenAPI::fromJsonValue(m_restricted_to_owner, json[QString("restrictedToOwner")]);
    m_restricted_to_owner_isSet = !json[QString("restrictedToOwner")].isNull() && m_restricted_to_owner_isValid;
}

QString OAICreateGiftCardinGiftCardProviderRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGiftCardinGiftCardProviderRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_emission_date_isSet) {
        obj.insert(QString("emissionDate"), ::OpenAPI::toJsonValue(m_emission_date));
    }
    if (m_expiring_date_isSet) {
        obj.insert(QString("expiringDate"), ::OpenAPI::toJsonValue(m_expiring_date));
    }
    if (m_multiple_credits_isSet) {
        obj.insert(QString("multipleCredits"), ::OpenAPI::toJsonValue(m_multiple_credits));
    }
    if (m_multiple_redemptions_isSet) {
        obj.insert(QString("multipleRedemptions"), ::OpenAPI::toJsonValue(m_multiple_redemptions));
    }
    if (m_profile_id_isSet) {
        obj.insert(QString("profileId"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    if (m_relation_name_isSet) {
        obj.insert(QString("relationName"), ::OpenAPI::toJsonValue(m_relation_name));
    }
    if (m_restricted_to_owner_isSet) {
        obj.insert(QString("restrictedToOwner"), ::OpenAPI::toJsonValue(m_restricted_to_owner));
    }
    return obj;
}

QString OAICreateGiftCardinGiftCardProviderRequest::getCaption() const {
    return m_caption;
}
void OAICreateGiftCardinGiftCardProviderRequest::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_caption_Valid() const{
    return m_caption_isValid;
}

QString OAICreateGiftCardinGiftCardProviderRequest::getEmissionDate() const {
    return m_emission_date;
}
void OAICreateGiftCardinGiftCardProviderRequest::setEmissionDate(const QString &emission_date) {
    m_emission_date = emission_date;
    m_emission_date_isSet = true;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_emission_date_Set() const{
    return m_emission_date_isSet;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_emission_date_Valid() const{
    return m_emission_date_isValid;
}

QString OAICreateGiftCardinGiftCardProviderRequest::getExpiringDate() const {
    return m_expiring_date;
}
void OAICreateGiftCardinGiftCardProviderRequest::setExpiringDate(const QString &expiring_date) {
    m_expiring_date = expiring_date;
    m_expiring_date_isSet = true;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_expiring_date_Set() const{
    return m_expiring_date_isSet;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_expiring_date_Valid() const{
    return m_expiring_date_isValid;
}

bool OAICreateGiftCardinGiftCardProviderRequest::isMultipleCredits() const {
    return m_multiple_credits;
}
void OAICreateGiftCardinGiftCardProviderRequest::setMultipleCredits(const bool &multiple_credits) {
    m_multiple_credits = multiple_credits;
    m_multiple_credits_isSet = true;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_multiple_credits_Set() const{
    return m_multiple_credits_isSet;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_multiple_credits_Valid() const{
    return m_multiple_credits_isValid;
}

bool OAICreateGiftCardinGiftCardProviderRequest::isMultipleRedemptions() const {
    return m_multiple_redemptions;
}
void OAICreateGiftCardinGiftCardProviderRequest::setMultipleRedemptions(const bool &multiple_redemptions) {
    m_multiple_redemptions = multiple_redemptions;
    m_multiple_redemptions_isSet = true;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_multiple_redemptions_Set() const{
    return m_multiple_redemptions_isSet;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_multiple_redemptions_Valid() const{
    return m_multiple_redemptions_isValid;
}

QString OAICreateGiftCardinGiftCardProviderRequest::getProfileId() const {
    return m_profile_id;
}
void OAICreateGiftCardinGiftCardProviderRequest::setProfileId(const QString &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

QString OAICreateGiftCardinGiftCardProviderRequest::getRelationName() const {
    return m_relation_name;
}
void OAICreateGiftCardinGiftCardProviderRequest::setRelationName(const QString &relation_name) {
    m_relation_name = relation_name;
    m_relation_name_isSet = true;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_relation_name_Set() const{
    return m_relation_name_isSet;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_relation_name_Valid() const{
    return m_relation_name_isValid;
}

bool OAICreateGiftCardinGiftCardProviderRequest::isRestrictedToOwner() const {
    return m_restricted_to_owner;
}
void OAICreateGiftCardinGiftCardProviderRequest::setRestrictedToOwner(const bool &restricted_to_owner) {
    m_restricted_to_owner = restricted_to_owner;
    m_restricted_to_owner_isSet = true;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_restricted_to_owner_Set() const{
    return m_restricted_to_owner_isSet;
}

bool OAICreateGiftCardinGiftCardProviderRequest::is_restricted_to_owner_Valid() const{
    return m_restricted_to_owner_isValid;
}

bool OAICreateGiftCardinGiftCardProviderRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emission_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiring_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_credits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_redemptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_to_owner_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGiftCardinGiftCardProviderRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_caption_isValid && m_emission_date_isValid && m_expiring_date_isValid && m_multiple_credits_isValid && m_multiple_redemptions_isValid && m_profile_id_isValid && m_relation_name_isValid && m_restricted_to_owner_isValid && true;
}

} // namespace OpenAPI
