/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUpdateGiftCardProviderbyIDRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUpdateGiftCardProviderbyIDRequest::OAICreateUpdateGiftCardProviderbyIDRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUpdateGiftCardProviderbyIDRequest::OAICreateUpdateGiftCardProviderbyIDRequest() {
    this->initializeModel();
}

OAICreateUpdateGiftCardProviderbyIDRequest::~OAICreateUpdateGiftCardProviderbyIDRequest() {}

void OAICreateUpdateGiftCardProviderbyIDRequest::initializeModel() {

    m_app_key_isSet = false;
    m_app_key_isValid = false;

    m_app_token_isSet = false;
    m_app_token_isValid = false;

    m_cancel_enabled_isSet = false;
    m_cancel_enabled_isValid = false;

    m_oauth_provider_isSet = false;
    m_oauth_provider_isValid = false;

    m_pre_auth_enabled_isSet = false;
    m_pre_auth_enabled_isValid = false;

    m_service_url_isSet = false;
    m_service_url_isValid = false;
}

void OAICreateUpdateGiftCardProviderbyIDRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUpdateGiftCardProviderbyIDRequest::fromJsonObject(QJsonObject json) {

    m_app_key_isValid = ::OpenAPI::fromJsonValue(m_app_key, json[QString("appKey")]);
    m_app_key_isSet = !json[QString("appKey")].isNull() && m_app_key_isValid;

    m_app_token_isValid = ::OpenAPI::fromJsonValue(m_app_token, json[QString("appToken")]);
    m_app_token_isSet = !json[QString("appToken")].isNull() && m_app_token_isValid;

    m_cancel_enabled_isValid = ::OpenAPI::fromJsonValue(m_cancel_enabled, json[QString("cancelEnabled")]);
    m_cancel_enabled_isSet = !json[QString("cancelEnabled")].isNull() && m_cancel_enabled_isValid;

    m_oauth_provider_isValid = ::OpenAPI::fromJsonValue(m_oauth_provider, json[QString("oauthProvider")]);
    m_oauth_provider_isSet = !json[QString("oauthProvider")].isNull() && m_oauth_provider_isValid;

    m_pre_auth_enabled_isValid = ::OpenAPI::fromJsonValue(m_pre_auth_enabled, json[QString("preAuthEnabled")]);
    m_pre_auth_enabled_isSet = !json[QString("preAuthEnabled")].isNull() && m_pre_auth_enabled_isValid;

    m_service_url_isValid = ::OpenAPI::fromJsonValue(m_service_url, json[QString("serviceUrl")]);
    m_service_url_isSet = !json[QString("serviceUrl")].isNull() && m_service_url_isValid;
}

QString OAICreateUpdateGiftCardProviderbyIDRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUpdateGiftCardProviderbyIDRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_key_isSet) {
        obj.insert(QString("appKey"), ::OpenAPI::toJsonValue(m_app_key));
    }
    if (m_app_token_isSet) {
        obj.insert(QString("appToken"), ::OpenAPI::toJsonValue(m_app_token));
    }
    if (m_cancel_enabled_isSet) {
        obj.insert(QString("cancelEnabled"), ::OpenAPI::toJsonValue(m_cancel_enabled));
    }
    if (m_oauth_provider_isSet) {
        obj.insert(QString("oauthProvider"), ::OpenAPI::toJsonValue(m_oauth_provider));
    }
    if (m_pre_auth_enabled_isSet) {
        obj.insert(QString("preAuthEnabled"), ::OpenAPI::toJsonValue(m_pre_auth_enabled));
    }
    if (m_service_url_isSet) {
        obj.insert(QString("serviceUrl"), ::OpenAPI::toJsonValue(m_service_url));
    }
    return obj;
}

QString OAICreateUpdateGiftCardProviderbyIDRequest::getAppKey() const {
    return m_app_key;
}
void OAICreateUpdateGiftCardProviderbyIDRequest::setAppKey(const QString &app_key) {
    m_app_key = app_key;
    m_app_key_isSet = true;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::is_app_key_Set() const{
    return m_app_key_isSet;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::is_app_key_Valid() const{
    return m_app_key_isValid;
}

QString OAICreateUpdateGiftCardProviderbyIDRequest::getAppToken() const {
    return m_app_token;
}
void OAICreateUpdateGiftCardProviderbyIDRequest::setAppToken(const QString &app_token) {
    m_app_token = app_token;
    m_app_token_isSet = true;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::is_app_token_Set() const{
    return m_app_token_isSet;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::is_app_token_Valid() const{
    return m_app_token_isValid;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::isCancelEnabled() const {
    return m_cancel_enabled;
}
void OAICreateUpdateGiftCardProviderbyIDRequest::setCancelEnabled(const bool &cancel_enabled) {
    m_cancel_enabled = cancel_enabled;
    m_cancel_enabled_isSet = true;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::is_cancel_enabled_Set() const{
    return m_cancel_enabled_isSet;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::is_cancel_enabled_Valid() const{
    return m_cancel_enabled_isValid;
}

QString OAICreateUpdateGiftCardProviderbyIDRequest::getOauthProvider() const {
    return m_oauth_provider;
}
void OAICreateUpdateGiftCardProviderbyIDRequest::setOauthProvider(const QString &oauth_provider) {
    m_oauth_provider = oauth_provider;
    m_oauth_provider_isSet = true;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::is_oauth_provider_Set() const{
    return m_oauth_provider_isSet;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::is_oauth_provider_Valid() const{
    return m_oauth_provider_isValid;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::isPreAuthEnabled() const {
    return m_pre_auth_enabled;
}
void OAICreateUpdateGiftCardProviderbyIDRequest::setPreAuthEnabled(const bool &pre_auth_enabled) {
    m_pre_auth_enabled = pre_auth_enabled;
    m_pre_auth_enabled_isSet = true;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::is_pre_auth_enabled_Set() const{
    return m_pre_auth_enabled_isSet;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::is_pre_auth_enabled_Valid() const{
    return m_pre_auth_enabled_isValid;
}

QString OAICreateUpdateGiftCardProviderbyIDRequest::getServiceUrl() const {
    return m_service_url;
}
void OAICreateUpdateGiftCardProviderbyIDRequest::setServiceUrl(const QString &service_url) {
    m_service_url = service_url;
    m_service_url_isSet = true;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::is_service_url_Set() const{
    return m_service_url_isSet;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::is_service_url_Valid() const{
    return m_service_url_isValid;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_auth_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUpdateGiftCardProviderbyIDRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cancel_enabled_isValid && m_oauth_provider_isValid && m_pre_auth_enabled_isValid && m_service_url_isValid && true;
}

} // namespace OpenAPI
