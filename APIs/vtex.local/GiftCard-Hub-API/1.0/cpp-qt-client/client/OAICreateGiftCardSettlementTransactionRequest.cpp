/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGiftCardSettlementTransactionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGiftCardSettlementTransactionRequest::OAICreateGiftCardSettlementTransactionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGiftCardSettlementTransactionRequest::OAICreateGiftCardSettlementTransactionRequest() {
    this->initializeModel();
}

OAICreateGiftCardSettlementTransactionRequest::~OAICreateGiftCardSettlementTransactionRequest() {}

void OAICreateGiftCardSettlementTransactionRequest::initializeModel() {

    m_cart_isSet = false;
    m_cart_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;
}

void OAICreateGiftCardSettlementTransactionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGiftCardSettlementTransactionRequest::fromJsonObject(QJsonObject json) {

    m_cart_isValid = ::OpenAPI::fromJsonValue(m_cart, json[QString("cart")]);
    m_cart_isSet = !json[QString("cart")].isNull() && m_cart_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;
}

QString OAICreateGiftCardSettlementTransactionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGiftCardSettlementTransactionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cart.isSet()) {
        obj.insert(QString("cart"), ::OpenAPI::toJsonValue(m_cart));
    }
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    return obj;
}

OAICart2 OAICreateGiftCardSettlementTransactionRequest::getCart() const {
    return m_cart;
}
void OAICreateGiftCardSettlementTransactionRequest::setCart(const OAICart2 &cart) {
    m_cart = cart;
    m_cart_isSet = true;
}

bool OAICreateGiftCardSettlementTransactionRequest::is_cart_Set() const{
    return m_cart_isSet;
}

bool OAICreateGiftCardSettlementTransactionRequest::is_cart_Valid() const{
    return m_cart_isValid;
}

OAIClient OAICreateGiftCardSettlementTransactionRequest::getClient() const {
    return m_client;
}
void OAICreateGiftCardSettlementTransactionRequest::setClient(const OAIClient &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAICreateGiftCardSettlementTransactionRequest::is_client_Set() const{
    return m_client_isSet;
}

bool OAICreateGiftCardSettlementTransactionRequest::is_client_Valid() const{
    return m_client_isValid;
}

bool OAICreateGiftCardSettlementTransactionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGiftCardSettlementTransactionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cart_isValid && m_client_isValid && true;
}

} // namespace OpenAPI
