/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientProfile::OAIClientProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientProfile::OAIClientProfile() {
    this->initializeModel();
}

OAIClientProfile::~OAIClientProfile() {}

void OAIClientProfile::initializeModel() {

    m_birth_date_isSet = false;
    m_birth_date_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_is_corporate_isSet = false;
    m_is_corporate_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;
}

void OAIClientProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientProfile::fromJsonObject(QJsonObject json) {

    m_birth_date_isValid = ::OpenAPI::fromJsonValue(m_birth_date, json[QString("birthDate")]);
    m_birth_date_isSet = !json[QString("birthDate")].isNull() && m_birth_date_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_is_corporate_isValid = ::OpenAPI::fromJsonValue(m_is_corporate, json[QString("isCorporate")]);
    m_is_corporate_isSet = !json[QString("isCorporate")].isNull() && m_is_corporate_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;
}

QString OAIClientProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_birth_date_isSet) {
        obj.insert(QString("birthDate"), ::OpenAPI::toJsonValue(m_birth_date));
    }
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_is_corporate_isSet) {
        obj.insert(QString("isCorporate"), ::OpenAPI::toJsonValue(m_is_corporate));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    return obj;
}

QString OAIClientProfile::getBirthDate() const {
    return m_birth_date;
}
void OAIClientProfile::setBirthDate(const QString &birth_date) {
    m_birth_date = birth_date;
    m_birth_date_isSet = true;
}

bool OAIClientProfile::is_birth_date_Set() const{
    return m_birth_date_isSet;
}

bool OAIClientProfile::is_birth_date_Valid() const{
    return m_birth_date_isValid;
}

QString OAIClientProfile::getDocument() const {
    return m_document;
}
void OAIClientProfile::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIClientProfile::is_document_Set() const{
    return m_document_isSet;
}

bool OAIClientProfile::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIClientProfile::getDocumentType() const {
    return m_document_type;
}
void OAIClientProfile::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAIClientProfile::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAIClientProfile::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QString OAIClientProfile::getEmail() const {
    return m_email;
}
void OAIClientProfile::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIClientProfile::is_email_Set() const{
    return m_email_isSet;
}

bool OAIClientProfile::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIClientProfile::getFirstName() const {
    return m_first_name;
}
void OAIClientProfile::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIClientProfile::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIClientProfile::is_first_name_Valid() const{
    return m_first_name_isValid;
}

bool OAIClientProfile::isIsCorporate() const {
    return m_is_corporate;
}
void OAIClientProfile::setIsCorporate(const bool &is_corporate) {
    m_is_corporate = is_corporate;
    m_is_corporate_isSet = true;
}

bool OAIClientProfile::is_is_corporate_Set() const{
    return m_is_corporate_isSet;
}

bool OAIClientProfile::is_is_corporate_Valid() const{
    return m_is_corporate_isValid;
}

QString OAIClientProfile::getLastName() const {
    return m_last_name;
}
void OAIClientProfile::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIClientProfile::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIClientProfile::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIClientProfile::getPhone() const {
    return m_phone;
}
void OAIClientProfile::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIClientProfile::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIClientProfile::is_phone_Valid() const{
    return m_phone_isValid;
}

bool OAIClientProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_birth_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_corporate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_birth_date_isValid && m_document_isValid && m_document_type_isValid && m_email_isValid && m_first_name_isValid && m_is_corporate_isValid && m_last_name_isValid && m_phone_isValid && true;
}

} // namespace OpenAPI
