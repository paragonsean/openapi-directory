/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICart1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICart1::OAICart1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICart1::OAICart1() {
    this->initializeModel();
}

OAICart1::~OAICart1() {}

void OAICart1::initializeModel() {

    m_discounts_isSet = false;
    m_discounts_isValid = false;

    m_grand_total_isSet = false;
    m_grand_total_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_items_total_isSet = false;
    m_items_total_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_taxes_isSet = false;
    m_taxes_isValid = false;
}

void OAICart1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICart1::fromJsonObject(QJsonObject json) {

    m_discounts_isValid = ::OpenAPI::fromJsonValue(m_discounts, json[QString("discounts")]);
    m_discounts_isSet = !json[QString("discounts")].isNull() && m_discounts_isValid;

    m_grand_total_isValid = ::OpenAPI::fromJsonValue(m_grand_total, json[QString("grandTotal")]);
    m_grand_total_isSet = !json[QString("grandTotal")].isNull() && m_grand_total_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_items_total_isValid = ::OpenAPI::fromJsonValue(m_items_total, json[QString("itemsTotal")]);
    m_items_total_isSet = !json[QString("itemsTotal")].isNull() && m_items_total_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_taxes_isValid = ::OpenAPI::fromJsonValue(m_taxes, json[QString("taxes")]);
    m_taxes_isSet = !json[QString("taxes")].isNull() && m_taxes_isValid;
}

QString OAICart1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICart1::asJsonObject() const {
    QJsonObject obj;
    if (m_discounts_isSet) {
        obj.insert(QString("discounts"), ::OpenAPI::toJsonValue(m_discounts));
    }
    if (m_grand_total_isSet) {
        obj.insert(QString("grandTotal"), ::OpenAPI::toJsonValue(m_grand_total));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_items_total_isSet) {
        obj.insert(QString("itemsTotal"), ::OpenAPI::toJsonValue(m_items_total));
    }
    if (m_shipping_isSet) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_taxes_isSet) {
        obj.insert(QString("taxes"), ::OpenAPI::toJsonValue(m_taxes));
    }
    return obj;
}

qint32 OAICart1::getDiscounts() const {
    return m_discounts;
}
void OAICart1::setDiscounts(const qint32 &discounts) {
    m_discounts = discounts;
    m_discounts_isSet = true;
}

bool OAICart1::is_discounts_Set() const{
    return m_discounts_isSet;
}

bool OAICart1::is_discounts_Valid() const{
    return m_discounts_isValid;
}

qint32 OAICart1::getGrandTotal() const {
    return m_grand_total;
}
void OAICart1::setGrandTotal(const qint32 &grand_total) {
    m_grand_total = grand_total;
    m_grand_total_isSet = true;
}

bool OAICart1::is_grand_total_Set() const{
    return m_grand_total_isSet;
}

bool OAICart1::is_grand_total_Valid() const{
    return m_grand_total_isValid;
}

QList<OAIItem1> OAICart1::getItems() const {
    return m_items;
}
void OAICart1::setItems(const QList<OAIItem1> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAICart1::is_items_Set() const{
    return m_items_isSet;
}

bool OAICart1::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAICart1::getItemsTotal() const {
    return m_items_total;
}
void OAICart1::setItemsTotal(const qint32 &items_total) {
    m_items_total = items_total;
    m_items_total_isSet = true;
}

bool OAICart1::is_items_total_Set() const{
    return m_items_total_isSet;
}

bool OAICart1::is_items_total_Valid() const{
    return m_items_total_isValid;
}

qint32 OAICart1::getShipping() const {
    return m_shipping;
}
void OAICart1::setShipping(const qint32 &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAICart1::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAICart1::is_shipping_Valid() const{
    return m_shipping_isValid;
}

qint32 OAICart1::getTaxes() const {
    return m_taxes;
}
void OAICart1::setTaxes(const qint32 &taxes) {
    m_taxes = taxes;
    m_taxes_isSet = true;
}

bool OAICart1::is_taxes_Set() const{
    return m_taxes_isSet;
}

bool OAICart1::is_taxes_Valid() const{
    return m_taxes_isValid;
}

bool OAICart1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grand_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICart1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_discounts_isValid && m_grand_total_isValid && m_items_isValid && m_items_total_isValid && m_shipping_isValid && m_taxes_isValid && true;
}

} // namespace OpenAPI
