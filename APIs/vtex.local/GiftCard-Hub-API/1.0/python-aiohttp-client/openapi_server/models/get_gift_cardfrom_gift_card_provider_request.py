# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cart import Cart
from openapi_server.models.client import Client
from openapi_server import util


class GetGiftCardfromGiftCardProviderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cart: Cart=None, client: Client=None):
        """GetGiftCardfromGiftCardProviderRequest - a model defined in OpenAPI

        :param cart: The cart of this GetGiftCardfromGiftCardProviderRequest.
        :param client: The client of this GetGiftCardfromGiftCardProviderRequest.
        """
        self.openapi_types = {
            'cart': Cart,
            'client': Client
        }

        self.attribute_map = {
            'cart': 'cart',
            'client': 'client'
        }

        self._cart = cart
        self._client = client

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetGiftCardfromGiftCardProviderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetGiftCardfromGiftCardProviderRequest of this GetGiftCardfromGiftCardProviderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cart(self):
        """Gets the cart of this GetGiftCardfromGiftCardProviderRequest.


        :return: The cart of this GetGiftCardfromGiftCardProviderRequest.
        :rtype: Cart
        """
        return self._cart

    @cart.setter
    def cart(self, cart):
        """Sets the cart of this GetGiftCardfromGiftCardProviderRequest.


        :param cart: The cart of this GetGiftCardfromGiftCardProviderRequest.
        :type cart: Cart
        """
        if cart is None:
            raise ValueError("Invalid value for `cart`, must not be `None`")

        self._cart = cart

    @property
    def client(self):
        """Gets the client of this GetGiftCardfromGiftCardProviderRequest.


        :return: The client of this GetGiftCardfromGiftCardProviderRequest.
        :rtype: Client
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this GetGiftCardfromGiftCardProviderRequest.


        :param client: The client of this GetGiftCardfromGiftCardProviderRequest.
        :type client: Client
        """
        if client is None:
            raise ValueError("Invalid value for `client`, must not be `None`")

        self._client = client
