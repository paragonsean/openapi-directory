# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateUpdateGiftCardProviderbyIDRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_key: str=None, app_token: str=None, cancel_enabled: bool=None, oauth_provider: str=None, pre_auth_enabled: bool=None, service_url: str=None):
        """CreateUpdateGiftCardProviderbyIDRequest - a model defined in OpenAPI

        :param app_key: The app_key of this CreateUpdateGiftCardProviderbyIDRequest.
        :param app_token: The app_token of this CreateUpdateGiftCardProviderbyIDRequest.
        :param cancel_enabled: The cancel_enabled of this CreateUpdateGiftCardProviderbyIDRequest.
        :param oauth_provider: The oauth_provider of this CreateUpdateGiftCardProviderbyIDRequest.
        :param pre_auth_enabled: The pre_auth_enabled of this CreateUpdateGiftCardProviderbyIDRequest.
        :param service_url: The service_url of this CreateUpdateGiftCardProviderbyIDRequest.
        """
        self.openapi_types = {
            'app_key': str,
            'app_token': str,
            'cancel_enabled': bool,
            'oauth_provider': str,
            'pre_auth_enabled': bool,
            'service_url': str
        }

        self.attribute_map = {
            'app_key': 'appKey',
            'app_token': 'appToken',
            'cancel_enabled': 'cancelEnabled',
            'oauth_provider': 'oauthProvider',
            'pre_auth_enabled': 'preAuthEnabled',
            'service_url': 'serviceUrl'
        }

        self._app_key = app_key
        self._app_token = app_token
        self._cancel_enabled = cancel_enabled
        self._oauth_provider = oauth_provider
        self._pre_auth_enabled = pre_auth_enabled
        self._service_url = service_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUpdateGiftCardProviderbyIDRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUpdateGiftCardProviderbyIDRequest of this CreateUpdateGiftCardProviderbyIDRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_key(self):
        """Gets the app_key of this CreateUpdateGiftCardProviderbyIDRequest.

        Credential provided by the merchant that VTEX will use for identification

        :return: The app_key of this CreateUpdateGiftCardProviderbyIDRequest.
        :rtype: str
        """
        return self._app_key

    @app_key.setter
    def app_key(self, app_key):
        """Sets the app_key of this CreateUpdateGiftCardProviderbyIDRequest.

        Credential provided by the merchant that VTEX will use for identification

        :param app_key: The app_key of this CreateUpdateGiftCardProviderbyIDRequest.
        :type app_key: str
        """

        self._app_key = app_key

    @property
    def app_token(self):
        """Gets the app_token of this CreateUpdateGiftCardProviderbyIDRequest.

        Credential provided by the merchant that VTEX will use for identification

        :return: The app_token of this CreateUpdateGiftCardProviderbyIDRequest.
        :rtype: str
        """
        return self._app_token

    @app_token.setter
    def app_token(self, app_token):
        """Sets the app_token of this CreateUpdateGiftCardProviderbyIDRequest.

        Credential provided by the merchant that VTEX will use for identification

        :param app_token: The app_token of this CreateUpdateGiftCardProviderbyIDRequest.
        :type app_token: str
        """

        self._app_token = app_token

    @property
    def cancel_enabled(self):
        """Gets the cancel_enabled of this CreateUpdateGiftCardProviderbyIDRequest.

        It says if it is possible to cancel the transaction, generated through the provider

        :return: The cancel_enabled of this CreateUpdateGiftCardProviderbyIDRequest.
        :rtype: bool
        """
        return self._cancel_enabled

    @cancel_enabled.setter
    def cancel_enabled(self, cancel_enabled):
        """Sets the cancel_enabled of this CreateUpdateGiftCardProviderbyIDRequest.

        It says if it is possible to cancel the transaction, generated through the provider

        :param cancel_enabled: The cancel_enabled of this CreateUpdateGiftCardProviderbyIDRequest.
        :type cancel_enabled: bool
        """
        if cancel_enabled is None:
            raise ValueError("Invalid value for `cancel_enabled`, must not be `None`")

        self._cancel_enabled = cancel_enabled

    @property
    def oauth_provider(self):
        """Gets the oauth_provider of this CreateUpdateGiftCardProviderbyIDRequest.

        Provider's authentication

        :return: The oauth_provider of this CreateUpdateGiftCardProviderbyIDRequest.
        :rtype: str
        """
        return self._oauth_provider

    @oauth_provider.setter
    def oauth_provider(self, oauth_provider):
        """Sets the oauth_provider of this CreateUpdateGiftCardProviderbyIDRequest.

        Provider's authentication

        :param oauth_provider: The oauth_provider of this CreateUpdateGiftCardProviderbyIDRequest.
        :type oauth_provider: str
        """
        if oauth_provider is None:
            raise ValueError("Invalid value for `oauth_provider`, must not be `None`")

        self._oauth_provider = oauth_provider

    @property
    def pre_auth_enabled(self):
        """Gets the pre_auth_enabled of this CreateUpdateGiftCardProviderbyIDRequest.

        Related to the pre-authorization that can happen on the transaction generated through the provider

        :return: The pre_auth_enabled of this CreateUpdateGiftCardProviderbyIDRequest.
        :rtype: bool
        """
        return self._pre_auth_enabled

    @pre_auth_enabled.setter
    def pre_auth_enabled(self, pre_auth_enabled):
        """Sets the pre_auth_enabled of this CreateUpdateGiftCardProviderbyIDRequest.

        Related to the pre-authorization that can happen on the transaction generated through the provider

        :param pre_auth_enabled: The pre_auth_enabled of this CreateUpdateGiftCardProviderbyIDRequest.
        :type pre_auth_enabled: bool
        """
        if pre_auth_enabled is None:
            raise ValueError("Invalid value for `pre_auth_enabled`, must not be `None`")

        self._pre_auth_enabled = pre_auth_enabled

    @property
    def service_url(self):
        """Gets the service_url of this CreateUpdateGiftCardProviderbyIDRequest.

        URL from the provider

        :return: The service_url of this CreateUpdateGiftCardProviderbyIDRequest.
        :rtype: str
        """
        return self._service_url

    @service_url.setter
    def service_url(self, service_url):
        """Sets the service_url of this CreateUpdateGiftCardProviderbyIDRequest.

        URL from the provider

        :param service_url: The service_url of this CreateUpdateGiftCardProviderbyIDRequest.
        :type service_url: str
        """
        if service_url is None:
            raise ValueError("Invalid value for `service_url`, must not be `None`")

        self._service_url = service_url
