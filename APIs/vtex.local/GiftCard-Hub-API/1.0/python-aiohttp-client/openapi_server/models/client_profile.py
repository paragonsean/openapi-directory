# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birth_date: str=None, document: str=None, document_type: str=None, email: str=None, first_name: str=None, is_corporate: bool=None, last_name: str=None, phone: str=None):
        """ClientProfile - a model defined in OpenAPI

        :param birth_date: The birth_date of this ClientProfile.
        :param document: The document of this ClientProfile.
        :param document_type: The document_type of this ClientProfile.
        :param email: The email of this ClientProfile.
        :param first_name: The first_name of this ClientProfile.
        :param is_corporate: The is_corporate of this ClientProfile.
        :param last_name: The last_name of this ClientProfile.
        :param phone: The phone of this ClientProfile.
        """
        self.openapi_types = {
            'birth_date': str,
            'document': str,
            'document_type': str,
            'email': str,
            'first_name': str,
            'is_corporate': bool,
            'last_name': str,
            'phone': str
        }

        self.attribute_map = {
            'birth_date': 'birthDate',
            'document': 'document',
            'document_type': 'documentType',
            'email': 'email',
            'first_name': 'firstName',
            'is_corporate': 'isCorporate',
            'last_name': 'lastName',
            'phone': 'phone'
        }

        self._birth_date = birth_date
        self._document = document
        self._document_type = document_type
        self._email = email
        self._first_name = first_name
        self._is_corporate = is_corporate
        self._last_name = last_name
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientProfile of this ClientProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birth_date(self):
        """Gets the birth_date of this ClientProfile.


        :return: The birth_date of this ClientProfile.
        :rtype: str
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this ClientProfile.


        :param birth_date: The birth_date of this ClientProfile.
        :type birth_date: str
        """
        if birth_date is None:
            raise ValueError("Invalid value for `birth_date`, must not be `None`")

        self._birth_date = birth_date

    @property
    def document(self):
        """Gets the document of this ClientProfile.


        :return: The document of this ClientProfile.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this ClientProfile.


        :param document: The document of this ClientProfile.
        :type document: str
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def document_type(self):
        """Gets the document_type of this ClientProfile.


        :return: The document_type of this ClientProfile.
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this ClientProfile.


        :param document_type: The document_type of this ClientProfile.
        :type document_type: str
        """
        if document_type is None:
            raise ValueError("Invalid value for `document_type`, must not be `None`")

        self._document_type = document_type

    @property
    def email(self):
        """Gets the email of this ClientProfile.


        :return: The email of this ClientProfile.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ClientProfile.


        :param email: The email of this ClientProfile.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this ClientProfile.


        :return: The first_name of this ClientProfile.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ClientProfile.


        :param first_name: The first_name of this ClientProfile.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def is_corporate(self):
        """Gets the is_corporate of this ClientProfile.


        :return: The is_corporate of this ClientProfile.
        :rtype: bool
        """
        return self._is_corporate

    @is_corporate.setter
    def is_corporate(self, is_corporate):
        """Sets the is_corporate of this ClientProfile.


        :param is_corporate: The is_corporate of this ClientProfile.
        :type is_corporate: bool
        """
        if is_corporate is None:
            raise ValueError("Invalid value for `is_corporate`, must not be `None`")

        self._is_corporate = is_corporate

    @property
    def last_name(self):
        """Gets the last_name of this ClientProfile.


        :return: The last_name of this ClientProfile.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ClientProfile.


        :param last_name: The last_name of this ClientProfile.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this ClientProfile.


        :return: The phone of this ClientProfile.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ClientProfile.


        :param phone: The phone of this ClientProfile.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone
