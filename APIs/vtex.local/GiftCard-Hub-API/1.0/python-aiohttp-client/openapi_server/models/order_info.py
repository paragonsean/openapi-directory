# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cart1 import Cart1
from openapi_server.models.client_profile import ClientProfile
from openapi_server.models.shipping import Shipping
from openapi_server import util


class OrderInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cart: Cart1=None, client_profile: ClientProfile=None, order_id: str=None, sequence: int=None, shipping: Shipping=None):
        """OrderInfo - a model defined in OpenAPI

        :param cart: The cart of this OrderInfo.
        :param client_profile: The client_profile of this OrderInfo.
        :param order_id: The order_id of this OrderInfo.
        :param sequence: The sequence of this OrderInfo.
        :param shipping: The shipping of this OrderInfo.
        """
        self.openapi_types = {
            'cart': Cart1,
            'client_profile': ClientProfile,
            'order_id': str,
            'sequence': int,
            'shipping': Shipping
        }

        self.attribute_map = {
            'cart': 'cart',
            'client_profile': 'clientProfile',
            'order_id': 'orderId',
            'sequence': 'sequence',
            'shipping': 'shipping'
        }

        self._cart = cart
        self._client_profile = client_profile
        self._order_id = order_id
        self._sequence = sequence
        self._shipping = shipping

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderInfo of this OrderInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cart(self):
        """Gets the cart of this OrderInfo.


        :return: The cart of this OrderInfo.
        :rtype: Cart1
        """
        return self._cart

    @cart.setter
    def cart(self, cart):
        """Sets the cart of this OrderInfo.


        :param cart: The cart of this OrderInfo.
        :type cart: Cart1
        """
        if cart is None:
            raise ValueError("Invalid value for `cart`, must not be `None`")

        self._cart = cart

    @property
    def client_profile(self):
        """Gets the client_profile of this OrderInfo.


        :return: The client_profile of this OrderInfo.
        :rtype: ClientProfile
        """
        return self._client_profile

    @client_profile.setter
    def client_profile(self, client_profile):
        """Sets the client_profile of this OrderInfo.


        :param client_profile: The client_profile of this OrderInfo.
        :type client_profile: ClientProfile
        """
        if client_profile is None:
            raise ValueError("Invalid value for `client_profile`, must not be `None`")

        self._client_profile = client_profile

    @property
    def order_id(self):
        """Gets the order_id of this OrderInfo.


        :return: The order_id of this OrderInfo.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderInfo.


        :param order_id: The order_id of this OrderInfo.
        :type order_id: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def sequence(self):
        """Gets the sequence of this OrderInfo.


        :return: The sequence of this OrderInfo.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this OrderInfo.


        :param sequence: The sequence of this OrderInfo.
        :type sequence: int
        """
        if sequence is None:
            raise ValueError("Invalid value for `sequence`, must not be `None`")

        self._sequence = sequence

    @property
    def shipping(self):
        """Gets the shipping of this OrderInfo.


        :return: The shipping of this OrderInfo.
        :rtype: Shipping
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this OrderInfo.


        :param shipping: The shipping of this OrderInfo.
        :type shipping: Shipping
        """
        if shipping is None:
            raise ValueError("Invalid value for `shipping`, must not be `None`")

        self._shipping = shipping
