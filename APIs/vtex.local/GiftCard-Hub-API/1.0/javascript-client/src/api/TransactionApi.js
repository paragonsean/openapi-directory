/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateGiftCardCancellationTransactionRequest from '../model/CreateGiftCardCancellationTransactionRequest';
import CreateGiftCardSettlementTransactionRequest from '../model/CreateGiftCardSettlementTransactionRequest';
import CreateGiftCardTransactionRequest from '../model/CreateGiftCardTransactionRequest';
import CreateGiftCardinGiftCardProviderRequest from '../model/CreateGiftCardinGiftCardProviderRequest';
import GetGiftCardfromGiftCardProviderRequest from '../model/GetGiftCardfromGiftCardProviderRequest';

/**
* Transaction service.
* @module api/TransactionApi
* @version 1.0
*/
export default class TransactionApi {

    /**
    * Constructs a new TransactionApi. 
    * @alias module:api/TransactionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGiftCardCancellationTransaction operation.
     * @callback module:api/TransactionApi~createGiftCardCancellationTransactionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create GiftCard Cancellation Transaction
     * Creates a cancellation transaction to a giftcard.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} xVTEXAPIAppKey VTEX API AppKey
     * @param {String} xVTEXAPIAppToken VTEX API AppToken
     * @param {String} giftCardProviderID Gift Card provider's ID.
     * @param {String} giftCardID Gift Card ID.
     * @param {String} tId Transaction ID generated by the provider. It is different from the `transactionID` generated by VTEX.
     * @param {module:model/CreateGiftCardCancellationTransactionRequest} createGiftCardCancellationTransactionRequest 
     * @param {module:api/TransactionApi~createGiftCardCancellationTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createGiftCardCancellationTransaction(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId, createGiftCardCancellationTransactionRequest, callback) {
      let postBody = createGiftCardCancellationTransactionRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createGiftCardCancellationTransaction");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createGiftCardCancellationTransaction");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling createGiftCardCancellationTransaction");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling createGiftCardCancellationTransaction");
      }
      // verify the required parameter 'giftCardProviderID' is set
      if (giftCardProviderID === undefined || giftCardProviderID === null) {
        throw new Error("Missing the required parameter 'giftCardProviderID' when calling createGiftCardCancellationTransaction");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling createGiftCardCancellationTransaction");
      }
      // verify the required parameter 'tId' is set
      if (tId === undefined || tId === null) {
        throw new Error("Missing the required parameter 'tId' when calling createGiftCardCancellationTransaction");
      }
      // verify the required parameter 'createGiftCardCancellationTransactionRequest' is set
      if (createGiftCardCancellationTransactionRequest === undefined || createGiftCardCancellationTransactionRequest === null) {
        throw new Error("Missing the required parameter 'createGiftCardCancellationTransactionRequest' when calling createGiftCardCancellationTransaction");
      }

      let pathParams = {
        'giftCardProviderID': giftCardProviderID,
        'giftCardID': giftCardID,
        'tId': tId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/vnd.vtex.giftcardproviders.v1+json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/cancellations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGiftCardSettlementTransaction operation.
     * @callback module:api/TransactionApi~createGiftCardSettlementTransactionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create GiftCard Settlement Transaction
     * Creates a settlement transaction to a giftcard.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} giftCardProviderID Gift Card provider's ID.
     * @param {String} giftCardID Gift Card ID.
     * @param {String} tId Transaction ID generated by the provider. It is different from the `transactionID` generated by VTEX.
     * @param {module:model/CreateGiftCardSettlementTransactionRequest} createGiftCardSettlementTransactionRequest 
     * @param {module:api/TransactionApi~createGiftCardSettlementTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createGiftCardSettlementTransaction(accept, contentType, giftCardProviderID, giftCardID, tId, createGiftCardSettlementTransactionRequest, callback) {
      let postBody = createGiftCardSettlementTransactionRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createGiftCardSettlementTransaction");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createGiftCardSettlementTransaction");
      }
      // verify the required parameter 'giftCardProviderID' is set
      if (giftCardProviderID === undefined || giftCardProviderID === null) {
        throw new Error("Missing the required parameter 'giftCardProviderID' when calling createGiftCardSettlementTransaction");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling createGiftCardSettlementTransaction");
      }
      // verify the required parameter 'tId' is set
      if (tId === undefined || tId === null) {
        throw new Error("Missing the required parameter 'tId' when calling createGiftCardSettlementTransaction");
      }
      // verify the required parameter 'createGiftCardSettlementTransactionRequest' is set
      if (createGiftCardSettlementTransactionRequest === undefined || createGiftCardSettlementTransactionRequest === null) {
        throw new Error("Missing the required parameter 'createGiftCardSettlementTransactionRequest' when calling createGiftCardSettlementTransaction");
      }

      let pathParams = {
        'giftCardProviderID': giftCardProviderID,
        'giftCardID': giftCardID,
        'tId': tId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json;charset=utf-8'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/settlements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGiftCardTransaction operation.
     * @callback module:api/TransactionApi~createGiftCardTransactionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create GiftCard Transaction
     * Creates a transaction to a giftcard.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} xVTEXAPIAppKey VTEX API AppKey
     * @param {String} xVTEXAPIAppToken VTEX API AppToken
     * @param {String} giftCardProviderID Gift Card provider's ID.
     * @param {String} giftCardID Gift Card ID.
     * @param {module:model/CreateGiftCardTransactionRequest} createGiftCardTransactionRequest 
     * @param {module:api/TransactionApi~createGiftCardTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createGiftCardTransaction(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, createGiftCardTransactionRequest, callback) {
      let postBody = createGiftCardTransactionRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createGiftCardTransaction");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createGiftCardTransaction");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling createGiftCardTransaction");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling createGiftCardTransaction");
      }
      // verify the required parameter 'giftCardProviderID' is set
      if (giftCardProviderID === undefined || giftCardProviderID === null) {
        throw new Error("Missing the required parameter 'giftCardProviderID' when calling createGiftCardTransaction");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling createGiftCardTransaction");
      }
      // verify the required parameter 'createGiftCardTransactionRequest' is set
      if (createGiftCardTransactionRequest === undefined || createGiftCardTransactionRequest === null) {
        throw new Error("Missing the required parameter 'createGiftCardTransactionRequest' when calling createGiftCardTransaction");
      }

      let pathParams = {
        'giftCardProviderID': giftCardProviderID,
        'giftCardID': giftCardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/vnd.vtex.giftcardproviders.v1+json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGiftCardinGiftCardProvider operation.
     * @callback module:api/TransactionApi~createGiftCardinGiftCardProviderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create GiftCard in GiftCard Provider
     * Creates a giftcard in a giftcard provider.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} xVTEXAPIAppKey VTEX API AppKey
     * @param {String} xVTEXAPIAppToken VTEX API AppToken
     * @param {String} giftCardProviderID Gift Card provider's ID.
     * @param {module:model/CreateGiftCardinGiftCardProviderRequest} createGiftCardinGiftCardProviderRequest 
     * @param {module:api/TransactionApi~createGiftCardinGiftCardProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createGiftCardinGiftCardProvider(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, createGiftCardinGiftCardProviderRequest, callback) {
      let postBody = createGiftCardinGiftCardProviderRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createGiftCardinGiftCardProvider");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createGiftCardinGiftCardProvider");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling createGiftCardinGiftCardProvider");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling createGiftCardinGiftCardProvider");
      }
      // verify the required parameter 'giftCardProviderID' is set
      if (giftCardProviderID === undefined || giftCardProviderID === null) {
        throw new Error("Missing the required parameter 'giftCardProviderID' when calling createGiftCardinGiftCardProvider");
      }
      // verify the required parameter 'createGiftCardinGiftCardProviderRequest' is set
      if (createGiftCardinGiftCardProviderRequest === undefined || createGiftCardinGiftCardProviderRequest === null) {
        throw new Error("Missing the required parameter 'createGiftCardinGiftCardProviderRequest' when calling createGiftCardinGiftCardProvider");
      }

      let pathParams = {
        'giftCardProviderID': giftCardProviderID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/vnd.vtex.giftcardproviders.v1+json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders/{giftCardProviderID}/giftcards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGiftCardAuthorizationTransaction operation.
     * @callback module:api/TransactionApi~getGiftCardAuthorizationTransactionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GiftCard Authorization Transaction
     * Returns the transaction authorization info.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json.
     * @param {String} xVTEXAPIAppKey VTEX API AppKey
     * @param {String} xVTEXAPIAppToken VTEX API AppToken
     * @param {String} giftCardProviderID Gift Card provider's ID.
     * @param {String} giftCardID Gift Card ID.
     * @param {String} transactionID Gift Card transaction ID.
     * @param {module:api/TransactionApi~getGiftCardAuthorizationTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getGiftCardAuthorizationTransaction(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, transactionID, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getGiftCardAuthorizationTransaction");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getGiftCardAuthorizationTransaction");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling getGiftCardAuthorizationTransaction");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling getGiftCardAuthorizationTransaction");
      }
      // verify the required parameter 'giftCardProviderID' is set
      if (giftCardProviderID === undefined || giftCardProviderID === null) {
        throw new Error("Missing the required parameter 'giftCardProviderID' when calling getGiftCardAuthorizationTransaction");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling getGiftCardAuthorizationTransaction");
      }
      // verify the required parameter 'transactionID' is set
      if (transactionID === undefined || transactionID === null) {
        throw new Error("Missing the required parameter 'transactionID' when calling getGiftCardAuthorizationTransaction");
      }

      let pathParams = {
        'giftCardProviderID': giftCardProviderID,
        'giftCardID': giftCardID,
        'transactionID': transactionID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{transactionID}/authorization', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGiftCardTransactionbyID operation.
     * @callback module:api/TransactionApi~getGiftCardTransactionbyIDCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GiftCard Transaction by ID
     * Returns a specific transaction from a giftcard.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json.
     * @param {String} xVTEXAPIAppKey VTEX API AppKey
     * @param {String} xVTEXAPIAppToken VTEX API AppToken
     * @param {String} giftCardProviderID Gift Card provider's ID.
     * @param {String} giftCardID Gift Card ID.
     * @param {String} transactionID Gift Card transaction ID.
     * @param {module:api/TransactionApi~getGiftCardTransactionbyIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getGiftCardTransactionbyID(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, transactionID, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getGiftCardTransactionbyID");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getGiftCardTransactionbyID");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling getGiftCardTransactionbyID");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling getGiftCardTransactionbyID");
      }
      // verify the required parameter 'giftCardProviderID' is set
      if (giftCardProviderID === undefined || giftCardProviderID === null) {
        throw new Error("Missing the required parameter 'giftCardProviderID' when calling getGiftCardTransactionbyID");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling getGiftCardTransactionbyID");
      }
      // verify the required parameter 'transactionID' is set
      if (transactionID === undefined || transactionID === null) {
        throw new Error("Missing the required parameter 'transactionID' when calling getGiftCardTransactionbyID");
      }

      let pathParams = {
        'giftCardProviderID': giftCardProviderID,
        'giftCardID': giftCardID,
        'transactionID': transactionID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{transactionID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGiftCardfromGiftCardProvider operation.
     * @callback module:api/TransactionApi~getGiftCardfromGiftCardProviderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GiftCard from GiftCard Provider
     * Returns all giftcards from a giftcard provider according to the filters.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} xVTEXAPIAppKey VTEX API AppKey
     * @param {String} xVTEXAPIAppToken VTEX API AppToken
     * @param {String} rESTRange Range of documents to show.
     * @param {String} giftCardProviderID Gift Card provider's ID.
     * @param {module:model/GetGiftCardfromGiftCardProviderRequest} getGiftCardfromGiftCardProviderRequest 
     * @param {module:api/TransactionApi~getGiftCardfromGiftCardProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getGiftCardfromGiftCardProvider(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, rESTRange, giftCardProviderID, getGiftCardfromGiftCardProviderRequest, callback) {
      let postBody = getGiftCardfromGiftCardProviderRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getGiftCardfromGiftCardProvider");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getGiftCardfromGiftCardProvider");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling getGiftCardfromGiftCardProvider");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling getGiftCardfromGiftCardProvider");
      }
      // verify the required parameter 'rESTRange' is set
      if (rESTRange === undefined || rESTRange === null) {
        throw new Error("Missing the required parameter 'rESTRange' when calling getGiftCardfromGiftCardProvider");
      }
      // verify the required parameter 'giftCardProviderID' is set
      if (giftCardProviderID === undefined || giftCardProviderID === null) {
        throw new Error("Missing the required parameter 'giftCardProviderID' when calling getGiftCardfromGiftCardProvider");
      }
      // verify the required parameter 'getGiftCardfromGiftCardProviderRequest' is set
      if (getGiftCardfromGiftCardProviderRequest === undefined || getGiftCardfromGiftCardProviderRequest === null) {
        throw new Error("Missing the required parameter 'getGiftCardfromGiftCardProviderRequest' when calling getGiftCardfromGiftCardProvider");
      }

      let pathParams = {
        'giftCardProviderID': giftCardProviderID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken,
        'REST-Range': rESTRange
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/vnd.vtex.giftcardproviders.v1+json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders/{giftCardProviderID}/giftcards/_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGiftCardfromGiftCardProviderbyID operation.
     * @callback module:api/TransactionApi~getGiftCardfromGiftCardProviderbyIDCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GiftCard from GiftCard Provider by ID
     * Returns a specific giftcard from a giftcard provider.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json.
     * @param {String} xVTEXAPIAppKey VTEX API AppKey
     * @param {String} xVTEXAPIAppToken VTEX API AppToken
     * @param {String} giftCardProviderID Gift Card provider's ID.
     * @param {String} giftCardID Gift Card ID.
     * @param {module:api/TransactionApi~getGiftCardfromGiftCardProviderbyIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getGiftCardfromGiftCardProviderbyID(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getGiftCardfromGiftCardProviderbyID");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getGiftCardfromGiftCardProviderbyID");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling getGiftCardfromGiftCardProviderbyID");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling getGiftCardfromGiftCardProviderbyID");
      }
      // verify the required parameter 'giftCardProviderID' is set
      if (giftCardProviderID === undefined || giftCardProviderID === null) {
        throw new Error("Missing the required parameter 'giftCardProviderID' when calling getGiftCardfromGiftCardProviderbyID");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling getGiftCardfromGiftCardProviderbyID");
      }

      let pathParams = {
        'giftCardProviderID': giftCardProviderID,
        'giftCardID': giftCardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllGiftCardCancellationTransactions operation.
     * @callback module:api/TransactionApi~listAllGiftCardCancellationTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All GiftCard Cancellation Transactions
     * Returns a collection of cancellation transactions from a giftcard.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json.
     * @param {String} xVTEXAPIAppKey VTEX API AppKey
     * @param {String} xVTEXAPIAppToken VTEX API AppToken
     * @param {String} giftCardProviderID Gift Card provider's ID.
     * @param {String} giftCardID Gift Card ID.
     * @param {String} tId Transaction ID generated by the provider. It is different from the `transactionID` generated by VTEX.
     * @param {module:api/TransactionApi~listAllGiftCardCancellationTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listAllGiftCardCancellationTransactions(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling listAllGiftCardCancellationTransactions");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listAllGiftCardCancellationTransactions");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling listAllGiftCardCancellationTransactions");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling listAllGiftCardCancellationTransactions");
      }
      // verify the required parameter 'giftCardProviderID' is set
      if (giftCardProviderID === undefined || giftCardProviderID === null) {
        throw new Error("Missing the required parameter 'giftCardProviderID' when calling listAllGiftCardCancellationTransactions");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling listAllGiftCardCancellationTransactions");
      }
      // verify the required parameter 'tId' is set
      if (tId === undefined || tId === null) {
        throw new Error("Missing the required parameter 'tId' when calling listAllGiftCardCancellationTransactions");
      }

      let pathParams = {
        'giftCardProviderID': giftCardProviderID,
        'giftCardID': giftCardID,
        'tId': tId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/cancellations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllGiftCardSettlementTransactions operation.
     * @callback module:api/TransactionApi~listAllGiftCardSettlementTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All GiftCard Settlement Transactions
     * Returns a collection of settlement transactions from a giftcard.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json.
     * @param {String} xVTEXAPIAppKey VTEX API AppKey
     * @param {String} xVTEXAPIAppToken VTEX API AppToken
     * @param {String} giftCardProviderID Gift Card provider's ID.
     * @param {String} giftCardID Gift Card ID.
     * @param {String} tId Transaction ID generated by the provider. It is different from the `transactionID` generated by VTEX.
     * @param {module:api/TransactionApi~listAllGiftCardSettlementTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listAllGiftCardSettlementTransactions(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, tId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling listAllGiftCardSettlementTransactions");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listAllGiftCardSettlementTransactions");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling listAllGiftCardSettlementTransactions");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling listAllGiftCardSettlementTransactions");
      }
      // verify the required parameter 'giftCardProviderID' is set
      if (giftCardProviderID === undefined || giftCardProviderID === null) {
        throw new Error("Missing the required parameter 'giftCardProviderID' when calling listAllGiftCardSettlementTransactions");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling listAllGiftCardSettlementTransactions");
      }
      // verify the required parameter 'tId' is set
      if (tId === undefined || tId === null) {
        throw new Error("Missing the required parameter 'tId' when calling listAllGiftCardSettlementTransactions");
      }

      let pathParams = {
        'giftCardProviderID': giftCardProviderID,
        'giftCardID': giftCardID,
        'tId': tId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions/{tId}/settlements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllGiftCardTransactions operation.
     * @callback module:api/TransactionApi~listAllGiftCardTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All GiftCard Transactions
     * Return all transaction from a giftcard.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json.
     * @param {String} xVTEXAPIAppKey VTEX API AppKey
     * @param {String} xVTEXAPIAppToken VTEX API AppToken
     * @param {String} giftCardProviderID Gift Card provider's ID.
     * @param {String} giftCardID Gift Card ID.
     * @param {module:api/TransactionApi~listAllGiftCardTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listAllGiftCardTransactions(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, giftCardID, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling listAllGiftCardTransactions");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listAllGiftCardTransactions");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling listAllGiftCardTransactions");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling listAllGiftCardTransactions");
      }
      // verify the required parameter 'giftCardProviderID' is set
      if (giftCardProviderID === undefined || giftCardProviderID === null) {
        throw new Error("Missing the required parameter 'giftCardProviderID' when calling listAllGiftCardTransactions");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling listAllGiftCardTransactions");
      }

      let pathParams = {
        'giftCardProviderID': giftCardProviderID,
        'giftCardID': giftCardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders/{giftCardProviderID}/giftcards/{giftCardID}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
