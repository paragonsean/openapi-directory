/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUpdateGiftCardProviderbyIDRequest from '../model/CreateUpdateGiftCardProviderbyIDRequest';

/**
* Provider service.
* @module api/ProviderApi
* @version 1.0
*/
export default class ProviderApi {

    /**
    * Constructs a new ProviderApi. 
    * @alias module:api/ProviderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createUpdateGiftCardProviderbyID operation.
     * @callback module:api/ProviderApi~createUpdateGiftCardProviderbyIDCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create/Update GiftCard Provider by ID
     * Create or update a giftcard provider from a store.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} xVTEXAPIAppKey VTEX API AppKey
     * @param {String} xVTEXAPIAppToken VTEX API AppToken
     * @param {String} giftCardProviderID Gift Card provider's ID.
     * @param {module:model/CreateUpdateGiftCardProviderbyIDRequest} createUpdateGiftCardProviderbyIDRequest 
     * @param {module:api/ProviderApi~createUpdateGiftCardProviderbyIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createUpdateGiftCardProviderbyID(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, createUpdateGiftCardProviderbyIDRequest, callback) {
      let postBody = createUpdateGiftCardProviderbyIDRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createUpdateGiftCardProviderbyID");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createUpdateGiftCardProviderbyID");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling createUpdateGiftCardProviderbyID");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling createUpdateGiftCardProviderbyID");
      }
      // verify the required parameter 'giftCardProviderID' is set
      if (giftCardProviderID === undefined || giftCardProviderID === null) {
        throw new Error("Missing the required parameter 'giftCardProviderID' when calling createUpdateGiftCardProviderbyID");
      }
      // verify the required parameter 'createUpdateGiftCardProviderbyIDRequest' is set
      if (createUpdateGiftCardProviderbyIDRequest === undefined || createUpdateGiftCardProviderbyIDRequest === null) {
        throw new Error("Missing the required parameter 'createUpdateGiftCardProviderbyIDRequest' when calling createUpdateGiftCardProviderbyID");
      }

      let pathParams = {
        'giftCardProviderID': giftCardProviderID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/vnd.vtex.giftcardproviders.v1+json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders/{giftCardProviderID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGiftCardProviderbyID operation.
     * @callback module:api/ProviderApi~deleteGiftCardProviderbyIDCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete GiftCard Provider by ID
     * Delete a giftcard provider from a store.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json.
     * @param {String} xVTEXAPIAppKey VTEX API AppKey
     * @param {String} xVTEXAPIAppToken VTEX API AppToken
     * @param {String} giftCardProviderID Gift Card provider's ID.
     * @param {module:api/ProviderApi~deleteGiftCardProviderbyIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteGiftCardProviderbyID(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderID, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteGiftCardProviderbyID");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteGiftCardProviderbyID");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling deleteGiftCardProviderbyID");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling deleteGiftCardProviderbyID");
      }
      // verify the required parameter 'giftCardProviderID' is set
      if (giftCardProviderID === undefined || giftCardProviderID === null) {
        throw new Error("Missing the required parameter 'giftCardProviderID' when calling deleteGiftCardProviderbyID");
      }

      let pathParams = {
        'giftCardProviderID': giftCardProviderID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders/{giftCardProviderID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGiftCardProviderbyID operation.
     * @callback module:api/ProviderApi~getGiftCardProviderbyIDCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GiftCard Provider by ID
     * Returns a giftcard provider from a store.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json.
     * @param {String} xVTEXAPIAppKey VTEX API AppKey
     * @param {String} xVTEXAPIAppToken VTEX API AppToken
     * @param {String} giftCardProviderId Gift Card provider's ID.
     * @param {module:api/ProviderApi~getGiftCardProviderbyIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getGiftCardProviderbyID(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, giftCardProviderId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getGiftCardProviderbyID");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getGiftCardProviderbyID");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling getGiftCardProviderbyID");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling getGiftCardProviderbyID");
      }
      // verify the required parameter 'giftCardProviderId' is set
      if (giftCardProviderId === undefined || giftCardProviderId === null) {
        throw new Error("Missing the required parameter 'giftCardProviderId' when calling getGiftCardProviderbyID");
      }

      let pathParams = {
        'giftCardProviderId': giftCardProviderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders/{giftCardProviderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllGiftCardProviders operation.
     * @callback module:api/ProviderApi~listAllGiftCardProvidersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All GiftCard Providers
     * Returns a collection of giftcard providers from a store.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json.
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json.
     * @param {String} xVTEXAPIAppKey VTEX API AppKey
     * @param {String} xVTEXAPIAppToken VTEX API AppToken
     * @param {Object} opts Optional parameters
     * @param {String} [rESTRange = 'resources=0-49')] Pagination control. This query variable must follow the format _resources={from}-{to}_.
     * @param {module:api/ProviderApi~listAllGiftCardProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    listAllGiftCardProviders(accept, contentType, xVTEXAPIAppKey, xVTEXAPIAppToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling listAllGiftCardProviders");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listAllGiftCardProviders");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling listAllGiftCardProviders");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling listAllGiftCardProviders");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'REST-Range': opts['rESTRange'],
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/giftcardproviders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
