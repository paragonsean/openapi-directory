/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateUpdateGiftCardProviderbyIDRequest model module.
 * @module model/CreateUpdateGiftCardProviderbyIDRequest
 * @version 1.0
 */
class CreateUpdateGiftCardProviderbyIDRequest {
    /**
     * Constructs a new <code>CreateUpdateGiftCardProviderbyIDRequest</code>.
     * @alias module:model/CreateUpdateGiftCardProviderbyIDRequest
     * @param cancelEnabled {Boolean} It says if it is possible to cancel the transaction, generated through the provider
     * @param oauthProvider {String} Provider's authentication
     * @param preAuthEnabled {Boolean} Related to the pre-authorization that can happen on the transaction generated through the provider
     * @param serviceUrl {String} URL from the provider
     */
    constructor(cancelEnabled, oauthProvider, preAuthEnabled, serviceUrl) { 
        
        CreateUpdateGiftCardProviderbyIDRequest.initialize(this, cancelEnabled, oauthProvider, preAuthEnabled, serviceUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cancelEnabled, oauthProvider, preAuthEnabled, serviceUrl) { 
        obj['cancelEnabled'] = cancelEnabled;
        obj['oauthProvider'] = oauthProvider;
        obj['preAuthEnabled'] = preAuthEnabled;
        obj['serviceUrl'] = serviceUrl;
    }

    /**
     * Constructs a <code>CreateUpdateGiftCardProviderbyIDRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateUpdateGiftCardProviderbyIDRequest} obj Optional instance to populate.
     * @return {module:model/CreateUpdateGiftCardProviderbyIDRequest} The populated <code>CreateUpdateGiftCardProviderbyIDRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateUpdateGiftCardProviderbyIDRequest();

            if (data.hasOwnProperty('appKey')) {
                obj['appKey'] = ApiClient.convertToType(data['appKey'], 'String');
            }
            if (data.hasOwnProperty('appToken')) {
                obj['appToken'] = ApiClient.convertToType(data['appToken'], 'String');
            }
            if (data.hasOwnProperty('cancelEnabled')) {
                obj['cancelEnabled'] = ApiClient.convertToType(data['cancelEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('oauthProvider')) {
                obj['oauthProvider'] = ApiClient.convertToType(data['oauthProvider'], 'String');
            }
            if (data.hasOwnProperty('preAuthEnabled')) {
                obj['preAuthEnabled'] = ApiClient.convertToType(data['preAuthEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('serviceUrl')) {
                obj['serviceUrl'] = ApiClient.convertToType(data['serviceUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateUpdateGiftCardProviderbyIDRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateUpdateGiftCardProviderbyIDRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateUpdateGiftCardProviderbyIDRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appKey'] && !(typeof data['appKey'] === 'string' || data['appKey'] instanceof String)) {
            throw new Error("Expected the field `appKey` to be a primitive type in the JSON string but got " + data['appKey']);
        }
        // ensure the json data is a string
        if (data['appToken'] && !(typeof data['appToken'] === 'string' || data['appToken'] instanceof String)) {
            throw new Error("Expected the field `appToken` to be a primitive type in the JSON string but got " + data['appToken']);
        }
        // ensure the json data is a string
        if (data['oauthProvider'] && !(typeof data['oauthProvider'] === 'string' || data['oauthProvider'] instanceof String)) {
            throw new Error("Expected the field `oauthProvider` to be a primitive type in the JSON string but got " + data['oauthProvider']);
        }
        // ensure the json data is a string
        if (data['serviceUrl'] && !(typeof data['serviceUrl'] === 'string' || data['serviceUrl'] instanceof String)) {
            throw new Error("Expected the field `serviceUrl` to be a primitive type in the JSON string but got " + data['serviceUrl']);
        }

        return true;
    }


}

CreateUpdateGiftCardProviderbyIDRequest.RequiredProperties = ["cancelEnabled", "oauthProvider", "preAuthEnabled", "serviceUrl"];

/**
 * Credential provided by the merchant that VTEX will use for identification
 * @member {String} appKey
 */
CreateUpdateGiftCardProviderbyIDRequest.prototype['appKey'] = undefined;

/**
 * Credential provided by the merchant that VTEX will use for identification
 * @member {String} appToken
 */
CreateUpdateGiftCardProviderbyIDRequest.prototype['appToken'] = undefined;

/**
 * It says if it is possible to cancel the transaction, generated through the provider
 * @member {Boolean} cancelEnabled
 */
CreateUpdateGiftCardProviderbyIDRequest.prototype['cancelEnabled'] = undefined;

/**
 * Provider's authentication
 * @member {String} oauthProvider
 */
CreateUpdateGiftCardProviderbyIDRequest.prototype['oauthProvider'] = undefined;

/**
 * Related to the pre-authorization that can happen on the transaction generated through the provider
 * @member {Boolean} preAuthEnabled
 */
CreateUpdateGiftCardProviderbyIDRequest.prototype['preAuthEnabled'] = undefined;

/**
 * URL from the provider
 * @member {String} serviceUrl
 */
CreateUpdateGiftCardProviderbyIDRequest.prototype['serviceUrl'] = undefined;






export default CreateUpdateGiftCardProviderbyIDRequest;

