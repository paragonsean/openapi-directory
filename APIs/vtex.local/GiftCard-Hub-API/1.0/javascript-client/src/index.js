/**
 * GiftCard Hub API
 * >ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Cart from './model/Cart';
import Cart1 from './model/Cart1';
import Cart2 from './model/Cart2';
import Client from './model/Client';
import ClientProfile from './model/ClientProfile';
import CreateGiftCardCancellationTransactionRequest from './model/CreateGiftCardCancellationTransactionRequest';
import CreateGiftCardSettlementTransactionRequest from './model/CreateGiftCardSettlementTransactionRequest';
import CreateGiftCardTransactionRequest from './model/CreateGiftCardTransactionRequest';
import CreateGiftCardinGiftCardProviderRequest from './model/CreateGiftCardinGiftCardProviderRequest';
import CreateUpdateGiftCardProviderbyIDRequest from './model/CreateUpdateGiftCardProviderbyIDRequest';
import GetGiftCardfromGiftCardProviderRequest from './model/GetGiftCardfromGiftCardProviderRequest';
import Item from './model/Item';
import Item1 from './model/Item1';
import OrderInfo from './model/OrderInfo';
import Shipping from './model/Shipping';
import ProviderApi from './api/ProviderApi';
import TransactionApi from './api/TransactionApi';


/**
* &gt;ℹ️ Check the new [Payments onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer&#39;s journey.    The Gift Card Hub API allows interactions with all Gift Card providers registered to a store from a single point.    Gift Card providers are systems capable of providing cards to be used in the buying process.    The following is the sequence diagram that represents calls in the purchase closing process.  ![](https://cdn.jsdelivr.net/gh/vtexdocs/dev-portal-content@main/images/giftcard-hub-api-overview-0.png)    **Checkout + Gateway**: Systems responsible for the sale and for processing orders and payments.    **Gift Card Hub**: System responsible for managing multiple registered Gift Card providers for a store.    **Gift Card Provider**: System responsible for providing the Gift Cards available to the user not closing a purchase. This system can be implemented by third parties..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var GiftCardHubApi = require('index'); // See note below*.
* var xxxSvc = new GiftCardHubApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new GiftCardHubApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new GiftCardHubApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new GiftCardHubApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Cart model constructor.
     * @property {module:model/Cart}
     */
    Cart,

    /**
     * The Cart1 model constructor.
     * @property {module:model/Cart1}
     */
    Cart1,

    /**
     * The Cart2 model constructor.
     * @property {module:model/Cart2}
     */
    Cart2,

    /**
     * The Client model constructor.
     * @property {module:model/Client}
     */
    Client,

    /**
     * The ClientProfile model constructor.
     * @property {module:model/ClientProfile}
     */
    ClientProfile,

    /**
     * The CreateGiftCardCancellationTransactionRequest model constructor.
     * @property {module:model/CreateGiftCardCancellationTransactionRequest}
     */
    CreateGiftCardCancellationTransactionRequest,

    /**
     * The CreateGiftCardSettlementTransactionRequest model constructor.
     * @property {module:model/CreateGiftCardSettlementTransactionRequest}
     */
    CreateGiftCardSettlementTransactionRequest,

    /**
     * The CreateGiftCardTransactionRequest model constructor.
     * @property {module:model/CreateGiftCardTransactionRequest}
     */
    CreateGiftCardTransactionRequest,

    /**
     * The CreateGiftCardinGiftCardProviderRequest model constructor.
     * @property {module:model/CreateGiftCardinGiftCardProviderRequest}
     */
    CreateGiftCardinGiftCardProviderRequest,

    /**
     * The CreateUpdateGiftCardProviderbyIDRequest model constructor.
     * @property {module:model/CreateUpdateGiftCardProviderbyIDRequest}
     */
    CreateUpdateGiftCardProviderbyIDRequest,

    /**
     * The GetGiftCardfromGiftCardProviderRequest model constructor.
     * @property {module:model/GetGiftCardfromGiftCardProviderRequest}
     */
    GetGiftCardfromGiftCardProviderRequest,

    /**
     * The Item model constructor.
     * @property {module:model/Item}
     */
    Item,

    /**
     * The Item1 model constructor.
     * @property {module:model/Item1}
     */
    Item1,

    /**
     * The OrderInfo model constructor.
     * @property {module:model/OrderInfo}
     */
    OrderInfo,

    /**
     * The Shipping model constructor.
     * @property {module:model/Shipping}
     */
    Shipping,

    /**
    * The ProviderApi service constructor.
    * @property {module:api/ProviderApi}
    */
    ProviderApi,

    /**
    * The TransactionApi service constructor.
    * @property {module:api/TransactionApi}
    */
    TransactionApi
};
