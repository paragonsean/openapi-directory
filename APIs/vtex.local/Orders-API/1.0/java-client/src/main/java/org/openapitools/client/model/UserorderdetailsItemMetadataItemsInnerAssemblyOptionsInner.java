/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner {
  public static final String SERIALIZED_NAME_COMPOSITION = "Composition";
  @SerializedName(SERIALIZED_NAME_COMPOSITION)
  private Object composition;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INPUT_VALUES = "InputValues";
  @SerializedName(SERIALIZED_NAME_INPUT_VALUES)
  private Object inputValues;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REQUIRED = "Required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner() {
  }

  public UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner composition(Object composition) {
    this.composition = composition;
    return this;
  }

  /**
   * Displays the attachment&#39;s composition.
   * @return composition
   */
  @javax.annotation.Nullable
  public Object getComposition() {
    return composition;
  }

  public void setComposition(Object composition) {
    this.composition = composition;
  }


  public UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the attachment related to the order.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner inputValues(Object inputValues) {
    this.inputValues = inputValues;
    return this;
  }

  /**
   * Displays the attachment&#39;s content.
   * @return inputValues
   */
  @javax.annotation.Nullable
  public Object getInputValues() {
    return inputValues;
  }

  public void setInputValues(Object inputValues) {
    this.inputValues = inputValues;
  }


  public UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the attachment related to the order.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * If this field is set as &#x60;true&#x60;, when the customer purchases the item sending the attachment is required, and when set as &#x60;false&#x60;, sending the attachment is optional.
   * @return required
   */
  @javax.annotation.Nonnull
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner userorderdetailsItemMetadataItemsInnerAssemblyOptionsInner = (UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner) o;
    return Objects.equals(this.composition, userorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.composition) &&
        Objects.equals(this.id, userorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.id) &&
        Objects.equals(this.inputValues, userorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.inputValues) &&
        Objects.equals(this.name, userorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.name) &&
        Objects.equals(this.required, userorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.required);
  }

  @Override
  public int hashCode() {
    return Objects.hash(composition, id, inputValues, name, required);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner {\n");
    sb.append("    composition: ").append(toIndentedString(composition)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputValues: ").append(toIndentedString(inputValues)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Composition");
    openapiFields.add("Id");
    openapiFields.add("InputValues");
    openapiFields.add("Name");
    openapiFields.add("Required");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Composition");
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("InputValues");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Required");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner is not found in the empty JSON string", UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner>() {
           @Override
           public void write(JsonWriter out, UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner
   * @throws IOException if the JSON string is invalid with respect to UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner
   */
  public static UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.class);
  }

  /**
   * Convert an instance of UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

