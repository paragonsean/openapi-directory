/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Item2;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class List1 {
  public static final String SERIALIZED_NAME_SHIPPING_ESTIMATED_DATE = "ShippingEstimatedDate";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ESTIMATED_DATE)
  private String shippingEstimatedDate;

  public static final String SERIALIZED_NAME_SHIPPING_ESTIMATED_DATE_MAX = "ShippingEstimatedDateMax";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ESTIMATED_DATE_MAX)
  private String shippingEstimatedDateMax;

  public static final String SERIALIZED_NAME_SHIPPING_ESTIMATED_DATE_MIN = "ShippingEstimatedDateMin";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ESTIMATED_DATE_MIN)
  private String shippingEstimatedDateMin;

  public static final String SERIALIZED_NAME_AFFILIATE_ID = "affiliateId";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_ID)
  private String affiliateId;

  public static final String SERIALIZED_NAME_AUTHORIZED_DATE = "authorizedDate";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_DATE)
  private String authorizedDate;

  public static final String SERIALIZED_NAME_CALL_CENTER_OPERATOR_NAME = "callCenterOperatorName";
  @SerializedName(SERIALIZED_NAME_CALL_CENTER_OPERATOR_NAME)
  private String callCenterOperatorName;

  public static final String SERIALIZED_NAME_CLIENT_NAME = "clientName";
  @SerializedName(SERIALIZED_NAME_CLIENT_NAME)
  private String clientName;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Item2> items;

  public static final String SERIALIZED_NAME_LAST_MESSAGE_UNREAD = "lastMessageUnread";
  @SerializedName(SERIALIZED_NAME_LAST_MESSAGE_UNREAD)
  private String lastMessageUnread;

  public static final String SERIALIZED_NAME_LIST_ID = "listId";
  @SerializedName(SERIALIZED_NAME_LIST_ID)
  private String listId;

  public static final String SERIALIZED_NAME_LIST_TYPE = "listType";
  @SerializedName(SERIALIZED_NAME_LIST_TYPE)
  private String listType;

  public static final String SERIALIZED_NAME_MARKET_PLACE_ORDER_ID = "marketPlaceOrderId";
  @SerializedName(SERIALIZED_NAME_MARKET_PLACE_ORDER_ID)
  private String marketPlaceOrderId;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_IS_COMPLETE = "orderIsComplete";
  @SerializedName(SERIALIZED_NAME_ORDER_IS_COMPLETE)
  private Boolean orderIsComplete;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_PAYMENT_NAMES = "paymentNames";
  @SerializedName(SERIALIZED_NAME_PAYMENT_NAMES)
  private String paymentNames;

  public static final String SERIALIZED_NAME_SALES_CHANNEL = "salesChannel";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNEL)
  private String salesChannel;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private String sequence;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "statusDescription";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public static final String SERIALIZED_NAME_TOTAL_ITEMS = "totalItems";
  @SerializedName(SERIALIZED_NAME_TOTAL_ITEMS)
  private Integer totalItems;

  public static final String SERIALIZED_NAME_TOTAL_VALUE = "totalValue";
  @SerializedName(SERIALIZED_NAME_TOTAL_VALUE)
  private Integer totalValue;

  public static final String SERIALIZED_NAME_WORKFLOW_IN_ERROR_STATE = "workflowInErrorState";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_IN_ERROR_STATE)
  private Boolean workflowInErrorState;

  public static final String SERIALIZED_NAME_WORKFLOW_IN_RETRY = "workflowInRetry";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_IN_RETRY)
  private Boolean workflowInRetry;

  public List1() {
  }

  public List1 shippingEstimatedDate(String shippingEstimatedDate) {
    this.shippingEstimatedDate = shippingEstimatedDate;
    return this;
  }

  /**
   * Estimate shipping date.
   * @return shippingEstimatedDate
   */
  @javax.annotation.Nullable
  public String getShippingEstimatedDate() {
    return shippingEstimatedDate;
  }

  public void setShippingEstimatedDate(String shippingEstimatedDate) {
    this.shippingEstimatedDate = shippingEstimatedDate;
  }


  public List1 shippingEstimatedDateMax(String shippingEstimatedDateMax) {
    this.shippingEstimatedDateMax = shippingEstimatedDateMax;
    return this;
  }

  /**
   * The most extended shipping estimation possible.
   * @return shippingEstimatedDateMax
   */
  @javax.annotation.Nullable
  public String getShippingEstimatedDateMax() {
    return shippingEstimatedDateMax;
  }

  public void setShippingEstimatedDateMax(String shippingEstimatedDateMax) {
    this.shippingEstimatedDateMax = shippingEstimatedDateMax;
  }


  public List1 shippingEstimatedDateMin(String shippingEstimatedDateMin) {
    this.shippingEstimatedDateMin = shippingEstimatedDateMin;
    return this;
  }

  /**
   * The least extended shipping estimation possible.
   * @return shippingEstimatedDateMin
   */
  @javax.annotation.Nullable
  public String getShippingEstimatedDateMin() {
    return shippingEstimatedDateMin;
  }

  public void setShippingEstimatedDateMin(String shippingEstimatedDateMin) {
    this.shippingEstimatedDateMin = shippingEstimatedDateMin;
  }


  public List1 affiliateId(String affiliateId) {
    this.affiliateId = affiliateId;
    return this;
  }

  /**
   * Corresponds to the three-digits [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) identification code of the seller responsible for the order.
   * @return affiliateId
   */
  @javax.annotation.Nonnull
  public String getAffiliateId() {
    return affiliateId;
  }

  public void setAffiliateId(String affiliateId) {
    this.affiliateId = affiliateId;
  }


  public List1 authorizedDate(String authorizedDate) {
    this.authorizedDate = authorizedDate;
    return this;
  }

  /**
   * Authorized order date.
   * @return authorizedDate
   */
  @javax.annotation.Nullable
  public String getAuthorizedDate() {
    return authorizedDate;
  }

  public void setAuthorizedDate(String authorizedDate) {
    this.authorizedDate = authorizedDate;
  }


  public List1 callCenterOperatorName(String callCenterOperatorName) {
    this.callCenterOperatorName = callCenterOperatorName;
    return this;
  }

  /**
   * Call center operator responsible for the order.
   * @return callCenterOperatorName
   */
  @javax.annotation.Nullable
  public String getCallCenterOperatorName() {
    return callCenterOperatorName;
  }

  public void setCallCenterOperatorName(String callCenterOperatorName) {
    this.callCenterOperatorName = callCenterOperatorName;
  }


  public List1 clientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

  /**
   * Order&#39;s customer name.
   * @return clientName
   */
  @javax.annotation.Nonnull
  public String getClientName() {
    return clientName;
  }

  public void setClientName(String clientName) {
    this.clientName = clientName;
  }


  public List1 creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Order&#39;s creation date.
   * @return creationDate
   */
  @javax.annotation.Nonnull
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public List1 currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Currency code in ISO 4217. For example, &#x60;BRL&#x60;.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  @Deprecated
  public List1 items(List<Item2> items) {
    this.items = items;
    return this;
  }

  public List1 addItemsItem(Item2 itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Information about order&#39;s items
   * @return items
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<Item2> getItems() {
    return items;
  }

  @Deprecated
  public void setItems(List<Item2> items) {
    this.items = items;
  }


  public List1 lastMessageUnread(String lastMessageUnread) {
    this.lastMessageUnread = lastMessageUnread;
    return this;
  }

  /**
   * Last sent transactional message.
   * @return lastMessageUnread
   */
  @javax.annotation.Nullable
  public String getLastMessageUnread() {
    return lastMessageUnread;
  }

  public void setLastMessageUnread(String lastMessageUnread) {
    this.lastMessageUnread = lastMessageUnread;
  }


  public List1 listId(String listId) {
    this.listId = listId;
    return this;
  }

  /**
   * Related Gift List ID.
   * @return listId
   */
  @javax.annotation.Nullable
  public String getListId() {
    return listId;
  }

  public void setListId(String listId) {
    this.listId = listId;
  }


  public List1 listType(String listType) {
    this.listType = listType;
    return this;
  }

  /**
   * Related Gift list type.
   * @return listType
   */
  @javax.annotation.Nullable
  public String getListType() {
    return listType;
  }

  public void setListType(String listType) {
    this.listType = listType;
  }


  public List1 marketPlaceOrderId(String marketPlaceOrderId) {
    this.marketPlaceOrderId = marketPlaceOrderId;
    return this;
  }

  /**
   * Marketplace order ID.
   * @return marketPlaceOrderId
   */
  @javax.annotation.Nullable
  public String getMarketPlaceOrderId() {
    return marketPlaceOrderId;
  }

  public void setMarketPlaceOrderId(String marketPlaceOrderId) {
    this.marketPlaceOrderId = marketPlaceOrderId;
  }


  public List1 orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Order ID is a unique code that identifies an order.
   * @return orderId
   */
  @javax.annotation.Nonnull
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public List1 orderIsComplete(Boolean orderIsComplete) {
    this.orderIsComplete = orderIsComplete;
    return this;
  }

  /**
   * If it is a completed order (&#x60;true&#x60;) or not (&#x60;false&#x60;). For more information, see [Order flow and status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
   * @return orderIsComplete
   */
  @javax.annotation.Nonnull
  public Boolean getOrderIsComplete() {
    return orderIsComplete;
  }

  public void setOrderIsComplete(Boolean orderIsComplete) {
    this.orderIsComplete = orderIsComplete;
  }


  public List1 origin(String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Order Origin, if &#x60;Marketplace&#x60; or &#x60;Fulfillment&#x60;.
   * @return origin
   */
  @javax.annotation.Nonnull
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public List1 paymentNames(String paymentNames) {
    this.paymentNames = paymentNames;
    return this;
  }

  /**
   * Payment system name.
   * @return paymentNames
   */
  @javax.annotation.Nullable
  public String getPaymentNames() {
    return paymentNames;
  }

  public void setPaymentNames(String paymentNames) {
    this.paymentNames = paymentNames;
  }


  public List1 salesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
    return this;
  }

  /**
   * Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order.
   * @return salesChannel
   */
  @javax.annotation.Nonnull
  public String getSalesChannel() {
    return salesChannel;
  }

  public void setSalesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
  }


  public List1 sequence(String sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * Six-digit string that follows the order ID. For example, in order &#x60;1268540501456-01 (501456)&#x60;, the sequence is &#x60;501456&#x60;.
   * @return sequence
   */
  @javax.annotation.Nonnull
  public String getSequence() {
    return sequence;
  }

  public void setSequence(String sequence) {
    this.sequence = sequence;
  }


  public List1 status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Order [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  @Deprecated
  public List1 statusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
    return this;
  }

  /**
   * Status description which is displayed on the Admin panel. This field is deprecated and may not return any value.
   * @return statusDescription
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public String getStatusDescription() {
    return statusDescription;
  }

  @Deprecated
  public void setStatusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
  }


  public List1 totalItems(Integer totalItems) {
    this.totalItems = totalItems;
    return this;
  }

  /**
   * Order&#39;s total amount of items.
   * @return totalItems
   */
  @javax.annotation.Nonnull
  public Integer getTotalItems() {
    return totalItems;
  }

  public void setTotalItems(Integer totalItems) {
    this.totalItems = totalItems;
  }


  public List1 totalValue(Integer totalValue) {
    this.totalValue = totalValue;
    return this;
  }

  /**
   * Total value amount.
   * @return totalValue
   */
  @javax.annotation.Nonnull
  public Integer getTotalValue() {
    return totalValue;
  }

  public void setTotalValue(Integer totalValue) {
    this.totalValue = totalValue;
  }


  public List1 workflowInErrorState(Boolean workflowInErrorState) {
    this.workflowInErrorState = workflowInErrorState;
    return this;
  }

  /**
   * If there is a work flow error (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return workflowInErrorState
   */
  @javax.annotation.Nonnull
  public Boolean getWorkflowInErrorState() {
    return workflowInErrorState;
  }

  public void setWorkflowInErrorState(Boolean workflowInErrorState) {
    this.workflowInErrorState = workflowInErrorState;
  }


  public List1 workflowInRetry(Boolean workflowInRetry) {
    this.workflowInRetry = workflowInRetry;
    return this;
  }

  /**
   * If the order is in a work flow retry (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return workflowInRetry
   */
  @javax.annotation.Nonnull
  public Boolean getWorkflowInRetry() {
    return workflowInRetry;
  }

  public void setWorkflowInRetry(Boolean workflowInRetry) {
    this.workflowInRetry = workflowInRetry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    List1 list1 = (List1) o;
    return Objects.equals(this.shippingEstimatedDate, list1.shippingEstimatedDate) &&
        Objects.equals(this.shippingEstimatedDateMax, list1.shippingEstimatedDateMax) &&
        Objects.equals(this.shippingEstimatedDateMin, list1.shippingEstimatedDateMin) &&
        Objects.equals(this.affiliateId, list1.affiliateId) &&
        Objects.equals(this.authorizedDate, list1.authorizedDate) &&
        Objects.equals(this.callCenterOperatorName, list1.callCenterOperatorName) &&
        Objects.equals(this.clientName, list1.clientName) &&
        Objects.equals(this.creationDate, list1.creationDate) &&
        Objects.equals(this.currencyCode, list1.currencyCode) &&
        Objects.equals(this.items, list1.items) &&
        Objects.equals(this.lastMessageUnread, list1.lastMessageUnread) &&
        Objects.equals(this.listId, list1.listId) &&
        Objects.equals(this.listType, list1.listType) &&
        Objects.equals(this.marketPlaceOrderId, list1.marketPlaceOrderId) &&
        Objects.equals(this.orderId, list1.orderId) &&
        Objects.equals(this.orderIsComplete, list1.orderIsComplete) &&
        Objects.equals(this.origin, list1.origin) &&
        Objects.equals(this.paymentNames, list1.paymentNames) &&
        Objects.equals(this.salesChannel, list1.salesChannel) &&
        Objects.equals(this.sequence, list1.sequence) &&
        Objects.equals(this.status, list1.status) &&
        Objects.equals(this.statusDescription, list1.statusDescription) &&
        Objects.equals(this.totalItems, list1.totalItems) &&
        Objects.equals(this.totalValue, list1.totalValue) &&
        Objects.equals(this.workflowInErrorState, list1.workflowInErrorState) &&
        Objects.equals(this.workflowInRetry, list1.workflowInRetry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shippingEstimatedDate, shippingEstimatedDateMax, shippingEstimatedDateMin, affiliateId, authorizedDate, callCenterOperatorName, clientName, creationDate, currencyCode, items, lastMessageUnread, listId, listType, marketPlaceOrderId, orderId, orderIsComplete, origin, paymentNames, salesChannel, sequence, status, statusDescription, totalItems, totalValue, workflowInErrorState, workflowInRetry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class List1 {\n");
    sb.append("    shippingEstimatedDate: ").append(toIndentedString(shippingEstimatedDate)).append("\n");
    sb.append("    shippingEstimatedDateMax: ").append(toIndentedString(shippingEstimatedDateMax)).append("\n");
    sb.append("    shippingEstimatedDateMin: ").append(toIndentedString(shippingEstimatedDateMin)).append("\n");
    sb.append("    affiliateId: ").append(toIndentedString(affiliateId)).append("\n");
    sb.append("    authorizedDate: ").append(toIndentedString(authorizedDate)).append("\n");
    sb.append("    callCenterOperatorName: ").append(toIndentedString(callCenterOperatorName)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    lastMessageUnread: ").append(toIndentedString(lastMessageUnread)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    listType: ").append(toIndentedString(listType)).append("\n");
    sb.append("    marketPlaceOrderId: ").append(toIndentedString(marketPlaceOrderId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderIsComplete: ").append(toIndentedString(orderIsComplete)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    paymentNames: ").append(toIndentedString(paymentNames)).append("\n");
    sb.append("    salesChannel: ").append(toIndentedString(salesChannel)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    totalItems: ").append(toIndentedString(totalItems)).append("\n");
    sb.append("    totalValue: ").append(toIndentedString(totalValue)).append("\n");
    sb.append("    workflowInErrorState: ").append(toIndentedString(workflowInErrorState)).append("\n");
    sb.append("    workflowInRetry: ").append(toIndentedString(workflowInRetry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ShippingEstimatedDate");
    openapiFields.add("ShippingEstimatedDateMax");
    openapiFields.add("ShippingEstimatedDateMin");
    openapiFields.add("affiliateId");
    openapiFields.add("authorizedDate");
    openapiFields.add("callCenterOperatorName");
    openapiFields.add("clientName");
    openapiFields.add("creationDate");
    openapiFields.add("currencyCode");
    openapiFields.add("items");
    openapiFields.add("lastMessageUnread");
    openapiFields.add("listId");
    openapiFields.add("listType");
    openapiFields.add("marketPlaceOrderId");
    openapiFields.add("orderId");
    openapiFields.add("orderIsComplete");
    openapiFields.add("origin");
    openapiFields.add("paymentNames");
    openapiFields.add("salesChannel");
    openapiFields.add("sequence");
    openapiFields.add("status");
    openapiFields.add("statusDescription");
    openapiFields.add("totalItems");
    openapiFields.add("totalValue");
    openapiFields.add("workflowInErrorState");
    openapiFields.add("workflowInRetry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ShippingEstimatedDate");
    openapiRequiredFields.add("ShippingEstimatedDateMax");
    openapiRequiredFields.add("ShippingEstimatedDateMin");
    openapiRequiredFields.add("affiliateId");
    openapiRequiredFields.add("authorizedDate");
    openapiRequiredFields.add("callCenterOperatorName");
    openapiRequiredFields.add("clientName");
    openapiRequiredFields.add("creationDate");
    openapiRequiredFields.add("currencyCode");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("lastMessageUnread");
    openapiRequiredFields.add("listId");
    openapiRequiredFields.add("listType");
    openapiRequiredFields.add("marketPlaceOrderId");
    openapiRequiredFields.add("orderId");
    openapiRequiredFields.add("orderIsComplete");
    openapiRequiredFields.add("origin");
    openapiRequiredFields.add("paymentNames");
    openapiRequiredFields.add("salesChannel");
    openapiRequiredFields.add("sequence");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("statusDescription");
    openapiRequiredFields.add("totalItems");
    openapiRequiredFields.add("totalValue");
    openapiRequiredFields.add("workflowInErrorState");
    openapiRequiredFields.add("workflowInRetry");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to List1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!List1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in List1 is not found in the empty JSON string", List1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!List1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `List1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : List1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ShippingEstimatedDate") != null && !jsonObj.get("ShippingEstimatedDate").isJsonNull()) && !jsonObj.get("ShippingEstimatedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShippingEstimatedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShippingEstimatedDate").toString()));
      }
      if ((jsonObj.get("ShippingEstimatedDateMax") != null && !jsonObj.get("ShippingEstimatedDateMax").isJsonNull()) && !jsonObj.get("ShippingEstimatedDateMax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShippingEstimatedDateMax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShippingEstimatedDateMax").toString()));
      }
      if ((jsonObj.get("ShippingEstimatedDateMin") != null && !jsonObj.get("ShippingEstimatedDateMin").isJsonNull()) && !jsonObj.get("ShippingEstimatedDateMin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShippingEstimatedDateMin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShippingEstimatedDateMin").toString()));
      }
      if (!jsonObj.get("affiliateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affiliateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affiliateId").toString()));
      }
      if ((jsonObj.get("authorizedDate") != null && !jsonObj.get("authorizedDate").isJsonNull()) && !jsonObj.get("authorizedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizedDate").toString()));
      }
      if ((jsonObj.get("callCenterOperatorName") != null && !jsonObj.get("callCenterOperatorName").isJsonNull()) && !jsonObj.get("callCenterOperatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callCenterOperatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callCenterOperatorName").toString()));
      }
      if (!jsonObj.get("clientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientName").toString()));
      }
      if (!jsonObj.get("creationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationDate").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        Item2.validateJsonElement(jsonArrayitems.get(i));
      };
      if ((jsonObj.get("lastMessageUnread") != null && !jsonObj.get("lastMessageUnread").isJsonNull()) && !jsonObj.get("lastMessageUnread").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastMessageUnread` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastMessageUnread").toString()));
      }
      if ((jsonObj.get("listId") != null && !jsonObj.get("listId").isJsonNull()) && !jsonObj.get("listId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listId").toString()));
      }
      if ((jsonObj.get("listType") != null && !jsonObj.get("listType").isJsonNull()) && !jsonObj.get("listType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listType").toString()));
      }
      if ((jsonObj.get("marketPlaceOrderId") != null && !jsonObj.get("marketPlaceOrderId").isJsonNull()) && !jsonObj.get("marketPlaceOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketPlaceOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketPlaceOrderId").toString()));
      }
      if (!jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if (!jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if ((jsonObj.get("paymentNames") != null && !jsonObj.get("paymentNames").isJsonNull()) && !jsonObj.get("paymentNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentNames").toString()));
      }
      if (!jsonObj.get("salesChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesChannel").toString()));
      }
      if (!jsonObj.get("sequence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sequence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sequence").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("statusDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!List1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'List1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<List1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(List1.class));

       return (TypeAdapter<T>) new TypeAdapter<List1>() {
           @Override
           public void write(JsonWriter out, List1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public List1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of List1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of List1
   * @throws IOException if the JSON string is invalid with respect to List1
   */
  public static List1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, List1.class);
  }

  /**
   * Convert an instance of List1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

