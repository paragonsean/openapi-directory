/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportCompletedResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportCompletedResponse {
  public static final String SERIALIZED_NAME_CANCELLED = "cancelled";
  @SerializedName(SERIALIZED_NAME_CANCELLED)
  private Boolean cancelled;

  public static final String SERIALIZED_NAME_COMPLETED_DATE = "completedDate";
  @SerializedName(SERIALIZED_NAME_COMPLETED_DATE)
  private String completedDate;

  public static final String SERIALIZED_NAME_DATE_OF_REQUEST = "dateOfRequest";
  @SerializedName(SERIALIZED_NAME_DATE_OF_REQUEST)
  private String dateOfRequest;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_HOST_URI = "hostUri";
  @SerializedName(SERIALIZED_NAME_HOST_URI)
  private String hostUri;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_LAS_UPDATE_TIME = "lasUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAS_UPDATE_TIME)
  private String lasUpdateTime;

  public static final String SERIALIZED_NAME_LINK_TO_DOWNLOAD = "linkToDownload";
  @SerializedName(SERIALIZED_NAME_LINK_TO_DOWNLOAD)
  private String linkToDownload;

  public static final String SERIALIZED_NAME_PUBLISH_ID = "publishId";
  @SerializedName(SERIALIZED_NAME_PUBLISH_ID)
  private String publishId;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_ROW_NUMBER = "rowNumber";
  @SerializedName(SERIALIZED_NAME_ROW_NUMBER)
  private Integer rowNumber;

  public static final String SERIALIZED_NAME_ROWS_PROCESSED = "rowsProcessed";
  @SerializedName(SERIALIZED_NAME_ROWS_PROCESSED)
  private Integer rowsProcessed;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_UTC_TIME = "utcTime";
  @SerializedName(SERIALIZED_NAME_UTC_TIME)
  private String utcTime;

  public ExportCompletedResponse() {
  }

  public ExportCompletedResponse cancelled(Boolean cancelled) {
    this.cancelled = cancelled;
    return this;
  }

  /**
   * If the export request was cancelled (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return cancelled
   */
  @javax.annotation.Nonnull
  public Boolean getCancelled() {
    return cancelled;
  }

  public void setCancelled(Boolean cancelled) {
    this.cancelled = cancelled;
  }


  public ExportCompletedResponse completedDate(String completedDate) {
    this.completedDate = completedDate;
    return this;
  }

  /**
   * Order export process completed date.
   * @return completedDate
   */
  @javax.annotation.Nonnull
  public String getCompletedDate() {
    return completedDate;
  }

  public void setCompletedDate(String completedDate) {
    this.completedDate = completedDate;
  }


  public ExportCompletedResponse dateOfRequest(String dateOfRequest) {
    this.dateOfRequest = dateOfRequest;
    return this;
  }

  /**
   * Order export request date.
   * @return dateOfRequest
   */
  @javax.annotation.Nonnull
  public String getDateOfRequest() {
    return dateOfRequest;
  }

  public void setDateOfRequest(String dateOfRequest) {
    this.dateOfRequest = dateOfRequest;
  }


  public ExportCompletedResponse email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Order export requester email.
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ExportCompletedResponse filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Order export request filter.
   * @return filter
   */
  @javax.annotation.Nonnull
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public ExportCompletedResponse hostUri(String hostUri) {
    this.hostUri = hostUri;
    return this;
  }

  /**
   * Host URL.
   * @return hostUri
   */
  @javax.annotation.Nonnull
  public String getHostUri() {
    return hostUri;
  }

  public void setHostUri(String hostUri) {
    this.hostUri = hostUri;
  }


  public ExportCompletedResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Order export request ID.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ExportCompletedResponse instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Instance ID.
   * @return instanceId
   */
  @javax.annotation.Nonnull
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public ExportCompletedResponse lasUpdateTime(String lasUpdateTime) {
    this.lasUpdateTime = lasUpdateTime;
    return this;
  }

  /**
   * Order export process update time.
   * @return lasUpdateTime
   */
  @javax.annotation.Nonnull
  public String getLasUpdateTime() {
    return lasUpdateTime;
  }

  public void setLasUpdateTime(String lasUpdateTime) {
    this.lasUpdateTime = lasUpdateTime;
  }


  public ExportCompletedResponse linkToDownload(String linkToDownload) {
    this.linkToDownload = linkToDownload;
    return this;
  }

  /**
   * Link to order export download.
   * @return linkToDownload
   */
  @javax.annotation.Nonnull
  public String getLinkToDownload() {
    return linkToDownload;
  }

  public void setLinkToDownload(String linkToDownload) {
    this.linkToDownload = linkToDownload;
  }


  public ExportCompletedResponse publishId(String publishId) {
    this.publishId = publishId;
    return this;
  }

  /**
   * Order export publish ID.
   * @return publishId
   */
  @javax.annotation.Nonnull
  public String getPublishId() {
    return publishId;
  }

  public void setPublishId(String publishId) {
    this.publishId = publishId;
  }


  public ExportCompletedResponse query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Order export request filter query.
   * @return query
   */
  @javax.annotation.Nonnull
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public ExportCompletedResponse rowNumber(Integer rowNumber) {
    this.rowNumber = rowNumber;
    return this;
  }

  /**
   * Order export total rows.
   * @return rowNumber
   */
  @javax.annotation.Nonnull
  public Integer getRowNumber() {
    return rowNumber;
  }

  public void setRowNumber(Integer rowNumber) {
    this.rowNumber = rowNumber;
  }


  public ExportCompletedResponse rowsProcessed(Integer rowsProcessed) {
    this.rowsProcessed = rowsProcessed;
    return this;
  }

  /**
   * Order export total processed rows.
   * @return rowsProcessed
   */
  @javax.annotation.Nonnull
  public Integer getRowsProcessed() {
    return rowsProcessed;
  }

  public void setRowsProcessed(Integer rowsProcessed) {
    this.rowsProcessed = rowsProcessed;
  }


  public ExportCompletedResponse startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Order export process start date.
   * @return startDate
   */
  @javax.annotation.Nonnull
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public ExportCompletedResponse utcTime(String utcTime) {
    this.utcTime = utcTime;
    return this;
  }

  /**
   * UTC time.
   * @return utcTime
   */
  @javax.annotation.Nonnull
  public String getUtcTime() {
    return utcTime;
  }

  public void setUtcTime(String utcTime) {
    this.utcTime = utcTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportCompletedResponse exportCompletedResponse = (ExportCompletedResponse) o;
    return Objects.equals(this.cancelled, exportCompletedResponse.cancelled) &&
        Objects.equals(this.completedDate, exportCompletedResponse.completedDate) &&
        Objects.equals(this.dateOfRequest, exportCompletedResponse.dateOfRequest) &&
        Objects.equals(this.email, exportCompletedResponse.email) &&
        Objects.equals(this.filter, exportCompletedResponse.filter) &&
        Objects.equals(this.hostUri, exportCompletedResponse.hostUri) &&
        Objects.equals(this.id, exportCompletedResponse.id) &&
        Objects.equals(this.instanceId, exportCompletedResponse.instanceId) &&
        Objects.equals(this.lasUpdateTime, exportCompletedResponse.lasUpdateTime) &&
        Objects.equals(this.linkToDownload, exportCompletedResponse.linkToDownload) &&
        Objects.equals(this.publishId, exportCompletedResponse.publishId) &&
        Objects.equals(this.query, exportCompletedResponse.query) &&
        Objects.equals(this.rowNumber, exportCompletedResponse.rowNumber) &&
        Objects.equals(this.rowsProcessed, exportCompletedResponse.rowsProcessed) &&
        Objects.equals(this.startDate, exportCompletedResponse.startDate) &&
        Objects.equals(this.utcTime, exportCompletedResponse.utcTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancelled, completedDate, dateOfRequest, email, filter, hostUri, id, instanceId, lasUpdateTime, linkToDownload, publishId, query, rowNumber, rowsProcessed, startDate, utcTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportCompletedResponse {\n");
    sb.append("    cancelled: ").append(toIndentedString(cancelled)).append("\n");
    sb.append("    completedDate: ").append(toIndentedString(completedDate)).append("\n");
    sb.append("    dateOfRequest: ").append(toIndentedString(dateOfRequest)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    hostUri: ").append(toIndentedString(hostUri)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    lasUpdateTime: ").append(toIndentedString(lasUpdateTime)).append("\n");
    sb.append("    linkToDownload: ").append(toIndentedString(linkToDownload)).append("\n");
    sb.append("    publishId: ").append(toIndentedString(publishId)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    rowNumber: ").append(toIndentedString(rowNumber)).append("\n");
    sb.append("    rowsProcessed: ").append(toIndentedString(rowsProcessed)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    utcTime: ").append(toIndentedString(utcTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancelled");
    openapiFields.add("completedDate");
    openapiFields.add("dateOfRequest");
    openapiFields.add("email");
    openapiFields.add("filter");
    openapiFields.add("hostUri");
    openapiFields.add("id");
    openapiFields.add("instanceId");
    openapiFields.add("lasUpdateTime");
    openapiFields.add("linkToDownload");
    openapiFields.add("publishId");
    openapiFields.add("query");
    openapiFields.add("rowNumber");
    openapiFields.add("rowsProcessed");
    openapiFields.add("startDate");
    openapiFields.add("utcTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cancelled");
    openapiRequiredFields.add("completedDate");
    openapiRequiredFields.add("dateOfRequest");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("filter");
    openapiRequiredFields.add("hostUri");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("instanceId");
    openapiRequiredFields.add("lasUpdateTime");
    openapiRequiredFields.add("linkToDownload");
    openapiRequiredFields.add("publishId");
    openapiRequiredFields.add("query");
    openapiRequiredFields.add("rowNumber");
    openapiRequiredFields.add("rowsProcessed");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("utcTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportCompletedResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportCompletedResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportCompletedResponse is not found in the empty JSON string", ExportCompletedResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportCompletedResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportCompletedResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExportCompletedResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("completedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `completedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("completedDate").toString()));
      }
      if (!jsonObj.get("dateOfRequest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfRequest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfRequest").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if (!jsonObj.get("hostUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostUri").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      if (!jsonObj.get("lasUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lasUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lasUpdateTime").toString()));
      }
      if (!jsonObj.get("linkToDownload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkToDownload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkToDownload").toString()));
      }
      if (!jsonObj.get("publishId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishId").toString()));
      }
      if (!jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if (!jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if (!jsonObj.get("utcTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utcTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utcTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportCompletedResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportCompletedResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportCompletedResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportCompletedResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportCompletedResponse>() {
           @Override
           public void write(JsonWriter out, ExportCompletedResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportCompletedResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportCompletedResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportCompletedResponse
   * @throws IOException if the JSON string is invalid with respect to ExportCompletedResponse
   */
  public static ExportCompletedResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportCompletedResponse.class);
  }

  /**
   * Convert an instance of ExportCompletedResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

