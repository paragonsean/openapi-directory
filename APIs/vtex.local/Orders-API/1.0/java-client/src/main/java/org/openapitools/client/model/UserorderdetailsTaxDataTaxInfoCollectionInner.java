/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserorderdetailsTaxDataTaxInfoCollectionInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserorderdetailsTaxDataTaxInfoCollectionInner {
  public static final String SERIALIZED_NAME_ITEM_INDEX = "itemIndex";
  @SerializedName(SERIALIZED_NAME_ITEM_INDEX)
  private Integer itemIndex;

  public static final String SERIALIZED_NAME_PRICE_TAGS = "priceTags";
  @SerializedName(SERIALIZED_NAME_PRICE_TAGS)
  private List<UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner> priceTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public UserorderdetailsTaxDataTaxInfoCollectionInner() {
  }

  public UserorderdetailsTaxDataTaxInfoCollectionInner itemIndex(Integer itemIndex) {
    this.itemIndex = itemIndex;
    return this;
  }

  /**
   * Item&#39;s indexing number.
   * @return itemIndex
   */
  @javax.annotation.Nonnull
  public Integer getItemIndex() {
    return itemIndex;
  }

  public void setItemIndex(Integer itemIndex) {
    this.itemIndex = itemIndex;
  }


  public UserorderdetailsTaxDataTaxInfoCollectionInner priceTags(List<UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner> priceTags) {
    this.priceTags = priceTags;
    return this;
  }

  public UserorderdetailsTaxDataTaxInfoCollectionInner addPriceTagsItem(UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner priceTagsItem) {
    if (this.priceTags == null) {
      this.priceTags = new ArrayList<>();
    }
    this.priceTags.add(priceTagsItem);
    return this;
  }

  /**
   * Price tag information.
   * @return priceTags
   */
  @javax.annotation.Nonnull
  public List<UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner> getPriceTags() {
    return priceTags;
  }

  public void setPriceTags(List<UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner> priceTags) {
    this.priceTags = priceTags;
  }


  public UserorderdetailsTaxDataTaxInfoCollectionInner sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Alphanumeric sequence that identifies an SKU.
   * @return sku
   */
  @javax.annotation.Nonnull
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserorderdetailsTaxDataTaxInfoCollectionInner userorderdetailsTaxDataTaxInfoCollectionInner = (UserorderdetailsTaxDataTaxInfoCollectionInner) o;
    return Objects.equals(this.itemIndex, userorderdetailsTaxDataTaxInfoCollectionInner.itemIndex) &&
        Objects.equals(this.priceTags, userorderdetailsTaxDataTaxInfoCollectionInner.priceTags) &&
        Objects.equals(this.sku, userorderdetailsTaxDataTaxInfoCollectionInner.sku);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemIndex, priceTags, sku);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserorderdetailsTaxDataTaxInfoCollectionInner {\n");
    sb.append("    itemIndex: ").append(toIndentedString(itemIndex)).append("\n");
    sb.append("    priceTags: ").append(toIndentedString(priceTags)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemIndex");
    openapiFields.add("priceTags");
    openapiFields.add("sku");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("itemIndex");
    openapiRequiredFields.add("priceTags");
    openapiRequiredFields.add("sku");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserorderdetailsTaxDataTaxInfoCollectionInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserorderdetailsTaxDataTaxInfoCollectionInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserorderdetailsTaxDataTaxInfoCollectionInner is not found in the empty JSON string", UserorderdetailsTaxDataTaxInfoCollectionInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserorderdetailsTaxDataTaxInfoCollectionInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserorderdetailsTaxDataTaxInfoCollectionInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserorderdetailsTaxDataTaxInfoCollectionInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("priceTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceTags` to be an array in the JSON string but got `%s`", jsonObj.get("priceTags").toString()));
      }

      JsonArray jsonArraypriceTags = jsonObj.getAsJsonArray("priceTags");
      // validate the required field `priceTags` (array)
      for (int i = 0; i < jsonArraypriceTags.size(); i++) {
        UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.validateJsonElement(jsonArraypriceTags.get(i));
      };
      if (!jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserorderdetailsTaxDataTaxInfoCollectionInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserorderdetailsTaxDataTaxInfoCollectionInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserorderdetailsTaxDataTaxInfoCollectionInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserorderdetailsTaxDataTaxInfoCollectionInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UserorderdetailsTaxDataTaxInfoCollectionInner>() {
           @Override
           public void write(JsonWriter out, UserorderdetailsTaxDataTaxInfoCollectionInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserorderdetailsTaxDataTaxInfoCollectionInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserorderdetailsTaxDataTaxInfoCollectionInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserorderdetailsTaxDataTaxInfoCollectionInner
   * @throws IOException if the JSON string is invalid with respect to UserorderdetailsTaxDataTaxInfoCollectionInner
   */
  public static UserorderdetailsTaxDataTaxInfoCollectionInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserorderdetailsTaxDataTaxInfoCollectionInner.class);
  }

  /**
   * Convert an instance of UserorderdetailsTaxDataTaxInfoCollectionInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

