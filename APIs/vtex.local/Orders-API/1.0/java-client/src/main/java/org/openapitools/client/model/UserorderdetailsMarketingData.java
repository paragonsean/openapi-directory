/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about promotions and marketing. For example, coupon tracking information and internal or external UTMs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserorderdetailsMarketingData {
  public static final String SERIALIZED_NAME_COUPON = "coupon";
  @SerializedName(SERIALIZED_NAME_COUPON)
  private String coupon;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MARKETING_TAGS = "marketingTags";
  @SerializedName(SERIALIZED_NAME_MARKETING_TAGS)
  private List<String> marketingTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_UTM_CAMPAIGN = "utmCampaign";
  @SerializedName(SERIALIZED_NAME_UTM_CAMPAIGN)
  private String utmCampaign;

  public static final String SERIALIZED_NAME_UTM_MEDIUM = "utmMedium";
  @SerializedName(SERIALIZED_NAME_UTM_MEDIUM)
  private String utmMedium;

  public static final String SERIALIZED_NAME_UTM_PARTNER = "utmPartner";
  @SerializedName(SERIALIZED_NAME_UTM_PARTNER)
  private String utmPartner;

  public static final String SERIALIZED_NAME_UTM_SOURCE = "utmSource";
  @SerializedName(SERIALIZED_NAME_UTM_SOURCE)
  private String utmSource;

  public static final String SERIALIZED_NAME_UTMI_CAMPAIGN = "utmiCampaign";
  @SerializedName(SERIALIZED_NAME_UTMI_CAMPAIGN)
  private String utmiCampaign;

  public static final String SERIALIZED_NAME_UTMI_PART = "utmiPart";
  @SerializedName(SERIALIZED_NAME_UTMI_PART)
  private String utmiPart;

  public static final String SERIALIZED_NAME_UTMIPAGE = "utmipage";
  @SerializedName(SERIALIZED_NAME_UTMIPAGE)
  private String utmipage;

  public UserorderdetailsMarketingData() {
  }

  public UserorderdetailsMarketingData coupon(String coupon) {
    this.coupon = coupon;
    return this;
  }

  /**
   * Coupon&#39;s code information.
   * @return coupon
   */
  @javax.annotation.Nonnull
  public String getCoupon() {
    return coupon;
  }

  public void setCoupon(String coupon) {
    this.coupon = coupon;
  }


  public UserorderdetailsMarketingData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Object ID which expected value is &#x60;marketingData&#x60;.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UserorderdetailsMarketingData marketingTags(List<String> marketingTags) {
    this.marketingTags = marketingTags;
    return this;
  }

  public UserorderdetailsMarketingData addMarketingTagsItem(String marketingTagsItem) {
    if (this.marketingTags == null) {
      this.marketingTags = new ArrayList<>();
    }
    this.marketingTags.add(marketingTagsItem);
    return this;
  }

  /**
   * Marketing tags information. This field can be used to register campaign data or informative tags regarding promotions.
   * @return marketingTags
   */
  @javax.annotation.Nonnull
  public List<String> getMarketingTags() {
    return marketingTags;
  }

  public void setMarketingTags(List<String> marketingTags) {
    this.marketingTags = marketingTags;
  }


  public UserorderdetailsMarketingData utmCampaign(String utmCampaign) {
    this.utmCampaign = utmCampaign;
    return this;
  }

  /**
   * Value of the &#x60;utm_campaign&#x60; parameter of the URL that led to the request.
   * @return utmCampaign
   */
  @javax.annotation.Nonnull
  public String getUtmCampaign() {
    return utmCampaign;
  }

  public void setUtmCampaign(String utmCampaign) {
    this.utmCampaign = utmCampaign;
  }


  public UserorderdetailsMarketingData utmMedium(String utmMedium) {
    this.utmMedium = utmMedium;
    return this;
  }

  /**
   * Value of the &#x60;utm_medium&#x60; parameter of the URL that led to the request.
   * @return utmMedium
   */
  @javax.annotation.Nonnull
  public String getUtmMedium() {
    return utmMedium;
  }

  public void setUtmMedium(String utmMedium) {
    this.utmMedium = utmMedium;
  }


  public UserorderdetailsMarketingData utmPartner(String utmPartner) {
    this.utmPartner = utmPartner;
    return this;
  }

  /**
   * UTM Source Parameters.
   * @return utmPartner
   */
  @javax.annotation.Nonnull
  public String getUtmPartner() {
    return utmPartner;
  }

  public void setUtmPartner(String utmPartner) {
    this.utmPartner = utmPartner;
  }


  public UserorderdetailsMarketingData utmSource(String utmSource) {
    this.utmSource = utmSource;
    return this;
  }

  /**
   * Value of the &#x60;utm_source&#x60; parameter of the URL that led to the request.
   * @return utmSource
   */
  @javax.annotation.Nonnull
  public String getUtmSource() {
    return utmSource;
  }

  public void setUtmSource(String utmSource) {
    this.utmSource = utmSource;
  }


  public UserorderdetailsMarketingData utmiCampaign(String utmiCampaign) {
    this.utmiCampaign = utmiCampaign;
    return this;
  }

  /**
   * Internal UTM value &#x60;utmi_cp&#x60;.
   * @return utmiCampaign
   */
  @javax.annotation.Nonnull
  public String getUtmiCampaign() {
    return utmiCampaign;
  }

  public void setUtmiCampaign(String utmiCampaign) {
    this.utmiCampaign = utmiCampaign;
  }


  public UserorderdetailsMarketingData utmiPart(String utmiPart) {
    this.utmiPart = utmiPart;
    return this;
  }

  /**
   * Internal UTM value &#x60;utmi_pc&#x60;.
   * @return utmiPart
   */
  @javax.annotation.Nonnull
  public String getUtmiPart() {
    return utmiPart;
  }

  public void setUtmiPart(String utmiPart) {
    this.utmiPart = utmiPart;
  }


  public UserorderdetailsMarketingData utmipage(String utmipage) {
    this.utmipage = utmipage;
    return this;
  }

  /**
   * Internal UTM value &#x60;utmi_p&#x60;.
   * @return utmipage
   */
  @javax.annotation.Nonnull
  public String getUtmipage() {
    return utmipage;
  }

  public void setUtmipage(String utmipage) {
    this.utmipage = utmipage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserorderdetailsMarketingData userorderdetailsMarketingData = (UserorderdetailsMarketingData) o;
    return Objects.equals(this.coupon, userorderdetailsMarketingData.coupon) &&
        Objects.equals(this.id, userorderdetailsMarketingData.id) &&
        Objects.equals(this.marketingTags, userorderdetailsMarketingData.marketingTags) &&
        Objects.equals(this.utmCampaign, userorderdetailsMarketingData.utmCampaign) &&
        Objects.equals(this.utmMedium, userorderdetailsMarketingData.utmMedium) &&
        Objects.equals(this.utmPartner, userorderdetailsMarketingData.utmPartner) &&
        Objects.equals(this.utmSource, userorderdetailsMarketingData.utmSource) &&
        Objects.equals(this.utmiCampaign, userorderdetailsMarketingData.utmiCampaign) &&
        Objects.equals(this.utmiPart, userorderdetailsMarketingData.utmiPart) &&
        Objects.equals(this.utmipage, userorderdetailsMarketingData.utmipage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coupon, id, marketingTags, utmCampaign, utmMedium, utmPartner, utmSource, utmiCampaign, utmiPart, utmipage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserorderdetailsMarketingData {\n");
    sb.append("    coupon: ").append(toIndentedString(coupon)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    marketingTags: ").append(toIndentedString(marketingTags)).append("\n");
    sb.append("    utmCampaign: ").append(toIndentedString(utmCampaign)).append("\n");
    sb.append("    utmMedium: ").append(toIndentedString(utmMedium)).append("\n");
    sb.append("    utmPartner: ").append(toIndentedString(utmPartner)).append("\n");
    sb.append("    utmSource: ").append(toIndentedString(utmSource)).append("\n");
    sb.append("    utmiCampaign: ").append(toIndentedString(utmiCampaign)).append("\n");
    sb.append("    utmiPart: ").append(toIndentedString(utmiPart)).append("\n");
    sb.append("    utmipage: ").append(toIndentedString(utmipage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coupon");
    openapiFields.add("id");
    openapiFields.add("marketingTags");
    openapiFields.add("utmCampaign");
    openapiFields.add("utmMedium");
    openapiFields.add("utmPartner");
    openapiFields.add("utmSource");
    openapiFields.add("utmiCampaign");
    openapiFields.add("utmiPart");
    openapiFields.add("utmipage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("coupon");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("marketingTags");
    openapiRequiredFields.add("utmCampaign");
    openapiRequiredFields.add("utmMedium");
    openapiRequiredFields.add("utmPartner");
    openapiRequiredFields.add("utmSource");
    openapiRequiredFields.add("utmiCampaign");
    openapiRequiredFields.add("utmiPart");
    openapiRequiredFields.add("utmipage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserorderdetailsMarketingData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserorderdetailsMarketingData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserorderdetailsMarketingData is not found in the empty JSON string", UserorderdetailsMarketingData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserorderdetailsMarketingData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserorderdetailsMarketingData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserorderdetailsMarketingData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("coupon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coupon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coupon").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("marketingTags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("marketingTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketingTags` to be an array in the JSON string but got `%s`", jsonObj.get("marketingTags").toString()));
      }
      if (!jsonObj.get("utmCampaign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utmCampaign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utmCampaign").toString()));
      }
      if (!jsonObj.get("utmMedium").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utmMedium` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utmMedium").toString()));
      }
      if (!jsonObj.get("utmPartner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utmPartner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utmPartner").toString()));
      }
      if (!jsonObj.get("utmSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utmSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utmSource").toString()));
      }
      if (!jsonObj.get("utmiCampaign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utmiCampaign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utmiCampaign").toString()));
      }
      if (!jsonObj.get("utmiPart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utmiPart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utmiPart").toString()));
      }
      if (!jsonObj.get("utmipage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utmipage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utmipage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserorderdetailsMarketingData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserorderdetailsMarketingData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserorderdetailsMarketingData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserorderdetailsMarketingData.class));

       return (TypeAdapter<T>) new TypeAdapter<UserorderdetailsMarketingData>() {
           @Override
           public void write(JsonWriter out, UserorderdetailsMarketingData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserorderdetailsMarketingData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserorderdetailsMarketingData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserorderdetailsMarketingData
   * @throws IOException if the JSON string is invalid with respect to UserorderdetailsMarketingData
   */
  public static UserorderdetailsMarketingData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserorderdetailsMarketingData.class);
  }

  /**
   * Convert an instance of UserorderdetailsMarketingData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

