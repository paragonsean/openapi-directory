/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SelectedAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SelectedAddress {
  public static final String SERIALIZED_NAME_ADDRESS_ID = "addressId";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ID)
  private String addressId;

  public static final String SERIALIZED_NAME_ADDRESS_TYPE = "addressType";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TYPE)
  private String addressType;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPLEMENT = "complement";
  @SerializedName(SERIALIZED_NAME_COMPLEMENT)
  private String complement;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_GEO_COORDINATES = "geoCoordinates";
  @SerializedName(SERIALIZED_NAME_GEO_COORDINATES)
  private List<String> geoCoordinates = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEIGHBORHOOD = "neighborhood";
  @SerializedName(SERIALIZED_NAME_NEIGHBORHOOD)
  private String neighborhood;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_RECEIVER_NAME = "receiverName";
  @SerializedName(SERIALIZED_NAME_RECEIVER_NAME)
  private String receiverName;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_VERSION_ID = "versionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private String versionId;

  public SelectedAddress() {
  }

  public SelectedAddress addressId(String addressId) {
    this.addressId = addressId;
    return this;
  }

  /**
   * Selected address ID.
   * @return addressId
   */
  @javax.annotation.Nonnull
  public String getAddressId() {
    return addressId;
  }

  public void setAddressId(String addressId) {
    this.addressId = addressId;
  }


  public SelectedAddress addressType(String addressType) {
    this.addressType = addressType;
    return this;
  }

  /**
   * Selected adress&#39;s shipping type, which can be &#x60;pickup&#x60;, &#x60;residential&#x60;, &#x60;invoice&#x60;, &#x60;search&#x60;, &#x60;inStore&#x60;, &#x60;commercial&#x60; or &#x60;giftRegistry&#x60;.
   * @return addressType
   */
  @javax.annotation.Nonnull
  public String getAddressType() {
    return addressType;
  }

  public void setAddressType(String addressType) {
    this.addressType = addressType;
  }


  public SelectedAddress city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City of the selected address.
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public SelectedAddress complement(String complement) {
    this.complement = complement;
    return this;
  }

  /**
   * Complement to the selected address if it applies.
   * @return complement
   */
  @javax.annotation.Nonnull
  public String getComplement() {
    return complement;
  }

  public void setComplement(String complement) {
    this.complement = complement;
  }


  public SelectedAddress country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Three letters ISO code of the country of the selected address (ISO 3166 ALPHA-3).
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public SelectedAddress entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Shipping address entity ID  of the selected address.
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public SelectedAddress geoCoordinates(List<String> geoCoordinates) {
    this.geoCoordinates = geoCoordinates;
    return this;
  }

  public SelectedAddress addGeoCoordinatesItem(String geoCoordinatesItem) {
    if (this.geoCoordinates == null) {
      this.geoCoordinates = new ArrayList<>();
    }
    this.geoCoordinates.add(geoCoordinatesItem);
    return this;
  }

  /**
   * Array with two numbers with the selected address&#39;s geocoordinates, first longitude then latitude.
   * @return geoCoordinates
   */
  @javax.annotation.Nonnull
  public List<String> getGeoCoordinates() {
    return geoCoordinates;
  }

  public void setGeoCoordinates(List<String> geoCoordinates) {
    this.geoCoordinates = geoCoordinates;
  }


  public SelectedAddress neighborhood(String neighborhood) {
    this.neighborhood = neighborhood;
    return this;
  }

  /**
   * Neighborhood of the selected address.
   * @return neighborhood
   */
  @javax.annotation.Nonnull
  public String getNeighborhood() {
    return neighborhood;
  }

  public void setNeighborhood(String neighborhood) {
    this.neighborhood = neighborhood;
  }


  public SelectedAddress number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Number of the building, house or apartment of the selected address.
   * @return number
   */
  @javax.annotation.Nonnull
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public SelectedAddress postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Postal code of the selected address.
   * @return postalCode
   */
  @javax.annotation.Nonnull
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public SelectedAddress receiverName(String receiverName) {
    this.receiverName = receiverName;
    return this;
  }

  /**
   * Name of the person who is going to receive the order in the selected address.
   * @return receiverName
   */
  @javax.annotation.Nonnull
  public String getReceiverName() {
    return receiverName;
  }

  public void setReceiverName(String receiverName) {
    this.receiverName = receiverName;
  }


  public SelectedAddress reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Complement to help locate the selected address.
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public SelectedAddress state(String state) {
    this.state = state;
    return this;
  }

  /**
   * State of the selected address.
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public SelectedAddress street(String street) {
    this.street = street;
    return this;
  }

  /**
   * Street of the selected address.
   * @return street
   */
  @javax.annotation.Nonnull
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }


  public SelectedAddress versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * Shipping address version ID of the selected address.
   * @return versionId
   */
  @javax.annotation.Nullable
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SelectedAddress selectedAddress = (SelectedAddress) o;
    return Objects.equals(this.addressId, selectedAddress.addressId) &&
        Objects.equals(this.addressType, selectedAddress.addressType) &&
        Objects.equals(this.city, selectedAddress.city) &&
        Objects.equals(this.complement, selectedAddress.complement) &&
        Objects.equals(this.country, selectedAddress.country) &&
        Objects.equals(this.entityId, selectedAddress.entityId) &&
        Objects.equals(this.geoCoordinates, selectedAddress.geoCoordinates) &&
        Objects.equals(this.neighborhood, selectedAddress.neighborhood) &&
        Objects.equals(this.number, selectedAddress.number) &&
        Objects.equals(this.postalCode, selectedAddress.postalCode) &&
        Objects.equals(this.receiverName, selectedAddress.receiverName) &&
        Objects.equals(this.reference, selectedAddress.reference) &&
        Objects.equals(this.state, selectedAddress.state) &&
        Objects.equals(this.street, selectedAddress.street) &&
        Objects.equals(this.versionId, selectedAddress.versionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressId, addressType, city, complement, country, entityId, geoCoordinates, neighborhood, number, postalCode, receiverName, reference, state, street, versionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SelectedAddress {\n");
    sb.append("    addressId: ").append(toIndentedString(addressId)).append("\n");
    sb.append("    addressType: ").append(toIndentedString(addressType)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    complement: ").append(toIndentedString(complement)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    geoCoordinates: ").append(toIndentedString(geoCoordinates)).append("\n");
    sb.append("    neighborhood: ").append(toIndentedString(neighborhood)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    receiverName: ").append(toIndentedString(receiverName)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressId");
    openapiFields.add("addressType");
    openapiFields.add("city");
    openapiFields.add("complement");
    openapiFields.add("country");
    openapiFields.add("entityId");
    openapiFields.add("geoCoordinates");
    openapiFields.add("neighborhood");
    openapiFields.add("number");
    openapiFields.add("postalCode");
    openapiFields.add("receiverName");
    openapiFields.add("reference");
    openapiFields.add("state");
    openapiFields.add("street");
    openapiFields.add("versionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addressId");
    openapiRequiredFields.add("addressType");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("complement");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("entityId");
    openapiRequiredFields.add("geoCoordinates");
    openapiRequiredFields.add("neighborhood");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("postalCode");
    openapiRequiredFields.add("receiverName");
    openapiRequiredFields.add("reference");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("street");
    openapiRequiredFields.add("versionId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SelectedAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SelectedAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SelectedAddress is not found in the empty JSON string", SelectedAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SelectedAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SelectedAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SelectedAddress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("addressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressId").toString()));
      }
      if (!jsonObj.get("addressType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressType").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("complement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complement").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("geoCoordinates") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("geoCoordinates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `geoCoordinates` to be an array in the JSON string but got `%s`", jsonObj.get("geoCoordinates").toString()));
      }
      if (!jsonObj.get("neighborhood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `neighborhood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("neighborhood").toString()));
      }
      if (!jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if (!jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if (!jsonObj.get("receiverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverName").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("versionId") != null && !jsonObj.get("versionId").isJsonNull()) && !jsonObj.get("versionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SelectedAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SelectedAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SelectedAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SelectedAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<SelectedAddress>() {
           @Override
           public void write(JsonWriter out, SelectedAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SelectedAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SelectedAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SelectedAddress
   * @throws IOException if the JSON string is invalid with respect to SelectedAddress
   */
  public static SelectedAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SelectedAddress.class);
  }

  /**
   * Convert an instance of SelectedAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

