/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Origin2;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HookConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HookConfiguration {
  public static final String SERIALIZED_NAME_CURRENT_CHANGE = "CurrentChange";
  @SerializedName(SERIALIZED_NAME_CURRENT_CHANGE)
  private String currentChange;

  public static final String SERIALIZED_NAME_DOMAIN = "Domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_LAST_CHANGE = "LastChange";
  @SerializedName(SERIALIZED_NAME_LAST_CHANGE)
  private String lastChange;

  public static final String SERIALIZED_NAME_LAST_STATE = "LastState";
  @SerializedName(SERIALIZED_NAME_LAST_STATE)
  private String lastState;

  public static final String SERIALIZED_NAME_ORDER_ID = "OrderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORIGIN = "Origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private Origin2 origin;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public HookConfiguration() {
  }

  public HookConfiguration currentChange(String currentChange) {
    this.currentChange = currentChange;
    return this;
  }

  /**
   * Get currentChange
   * @return currentChange
   */
  @javax.annotation.Nonnull
  public String getCurrentChange() {
    return currentChange;
  }

  public void setCurrentChange(String currentChange) {
    this.currentChange = currentChange;
  }


  public HookConfiguration domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public HookConfiguration lastChange(String lastChange) {
    this.lastChange = lastChange;
    return this;
  }

  /**
   * Get lastChange
   * @return lastChange
   */
  @javax.annotation.Nonnull
  public String getLastChange() {
    return lastChange;
  }

  public void setLastChange(String lastChange) {
    this.lastChange = lastChange;
  }


  public HookConfiguration lastState(String lastState) {
    this.lastState = lastState;
    return this;
  }

  /**
   * Get lastState
   * @return lastState
   */
  @javax.annotation.Nonnull
  public String getLastState() {
    return lastState;
  }

  public void setLastState(String lastState) {
    this.lastState = lastState;
  }


  public HookConfiguration orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Get orderId
   * @return orderId
   */
  @javax.annotation.Nonnull
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public HookConfiguration origin(Origin2 origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Get origin
   * @return origin
   */
  @javax.annotation.Nonnull
  public Origin2 getOrigin() {
    return origin;
  }

  public void setOrigin(Origin2 origin) {
    this.origin = origin;
  }


  public HookConfiguration state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HookConfiguration hookConfiguration = (HookConfiguration) o;
    return Objects.equals(this.currentChange, hookConfiguration.currentChange) &&
        Objects.equals(this.domain, hookConfiguration.domain) &&
        Objects.equals(this.lastChange, hookConfiguration.lastChange) &&
        Objects.equals(this.lastState, hookConfiguration.lastState) &&
        Objects.equals(this.orderId, hookConfiguration.orderId) &&
        Objects.equals(this.origin, hookConfiguration.origin) &&
        Objects.equals(this.state, hookConfiguration.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentChange, domain, lastChange, lastState, orderId, origin, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HookConfiguration {\n");
    sb.append("    currentChange: ").append(toIndentedString(currentChange)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    lastChange: ").append(toIndentedString(lastChange)).append("\n");
    sb.append("    lastState: ").append(toIndentedString(lastState)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrentChange");
    openapiFields.add("Domain");
    openapiFields.add("LastChange");
    openapiFields.add("LastState");
    openapiFields.add("OrderId");
    openapiFields.add("Origin");
    openapiFields.add("State");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CurrentChange");
    openapiRequiredFields.add("Domain");
    openapiRequiredFields.add("LastChange");
    openapiRequiredFields.add("LastState");
    openapiRequiredFields.add("OrderId");
    openapiRequiredFields.add("Origin");
    openapiRequiredFields.add("State");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HookConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HookConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HookConfiguration is not found in the empty JSON string", HookConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HookConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HookConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HookConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CurrentChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentChange").toString()));
      }
      if (!jsonObj.get("Domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Domain").toString()));
      }
      if (!jsonObj.get("LastChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastChange").toString()));
      }
      if (!jsonObj.get("LastState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastState").toString()));
      }
      if (!jsonObj.get("OrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrderId").toString()));
      }
      // validate the required field `Origin`
      Origin2.validateJsonElement(jsonObj.get("Origin"));
      if (!jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HookConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HookConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HookConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HookConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<HookConfiguration>() {
           @Override
           public void write(JsonWriter out, HookConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HookConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HookConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HookConfiguration
   * @throws IOException if the JSON string is invalid with respect to HookConfiguration
   */
  public static HookConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HookConfiguration.class);
  }

  /**
   * Convert an instance of HookConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

