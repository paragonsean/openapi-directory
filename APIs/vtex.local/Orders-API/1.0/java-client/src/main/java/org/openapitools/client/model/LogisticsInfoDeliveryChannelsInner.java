/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LogisticsInfoDeliveryChannelsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogisticsInfoDeliveryChannelsInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_STOCK_BALANCE = "stockBalance";
  @SerializedName(SERIALIZED_NAME_STOCK_BALANCE)
  private Integer stockBalance;

  public LogisticsInfoDeliveryChannelsInner() {
  }

  public LogisticsInfoDeliveryChannelsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Delivery channel&#39;s shipping type, which can be &#x60;delivery&#x60; or &#x60;pickup-in-point&#x60;.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public LogisticsInfoDeliveryChannelsInner stockBalance(Integer stockBalance) {
    this.stockBalance = stockBalance;
    return this;
  }

  /**
   * Stock check for an SKU availability.
   * @return stockBalance
   */
  @javax.annotation.Nonnull
  public Integer getStockBalance() {
    return stockBalance;
  }

  public void setStockBalance(Integer stockBalance) {
    this.stockBalance = stockBalance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogisticsInfoDeliveryChannelsInner logisticsInfoDeliveryChannelsInner = (LogisticsInfoDeliveryChannelsInner) o;
    return Objects.equals(this.id, logisticsInfoDeliveryChannelsInner.id) &&
        Objects.equals(this.stockBalance, logisticsInfoDeliveryChannelsInner.stockBalance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, stockBalance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogisticsInfoDeliveryChannelsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    stockBalance: ").append(toIndentedString(stockBalance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("stockBalance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("stockBalance");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogisticsInfoDeliveryChannelsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogisticsInfoDeliveryChannelsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogisticsInfoDeliveryChannelsInner is not found in the empty JSON string", LogisticsInfoDeliveryChannelsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogisticsInfoDeliveryChannelsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogisticsInfoDeliveryChannelsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LogisticsInfoDeliveryChannelsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogisticsInfoDeliveryChannelsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogisticsInfoDeliveryChannelsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogisticsInfoDeliveryChannelsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogisticsInfoDeliveryChannelsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<LogisticsInfoDeliveryChannelsInner>() {
           @Override
           public void write(JsonWriter out, LogisticsInfoDeliveryChannelsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogisticsInfoDeliveryChannelsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogisticsInfoDeliveryChannelsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogisticsInfoDeliveryChannelsInner
   * @throws IOException if the JSON string is invalid with respect to LogisticsInfoDeliveryChannelsInner
   */
  public static LogisticsInfoDeliveryChannelsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogisticsInfoDeliveryChannelsInner.class);
  }

  /**
   * Convert an instance of LogisticsInfoDeliveryChannelsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

