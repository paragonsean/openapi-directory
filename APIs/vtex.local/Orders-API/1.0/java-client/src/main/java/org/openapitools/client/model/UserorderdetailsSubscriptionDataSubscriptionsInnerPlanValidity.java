/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the period during which the subscription will be valid.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity {
  public static final String SERIALIZED_NAME_BEGIN = "begin";
  @SerializedName(SERIALIZED_NAME_BEGIN)
  private String begin;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private String end;

  public UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity() {
  }

  public UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity begin(String begin) {
    this.begin = begin;
    return this;
  }

  /**
   * Subscriptions&#39; beginning date with the format &#x60;yyyy-mm-ddThh:mm:ss&#x60;.
   * @return begin
   */
  @javax.annotation.Nonnull
  public String getBegin() {
    return begin;
  }

  public void setBegin(String begin) {
    this.begin = begin;
  }


  public UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity end(String end) {
    this.end = end;
    return this;
  }

  /**
   * Subscriptions&#39; ending date with the format &#x60;yyyy-mm-ddThh:mm:ss&#x60;.
   * @return end
   */
  @javax.annotation.Nonnull
  public String getEnd() {
    return end;
  }

  public void setEnd(String end) {
    this.end = end;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity userorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity = (UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity) o;
    return Objects.equals(this.begin, userorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity.begin) &&
        Objects.equals(this.end, userorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity.end);
  }

  @Override
  public int hashCode() {
    return Objects.hash(begin, end);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity {\n");
    sb.append("    begin: ").append(toIndentedString(begin)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("begin");
    openapiFields.add("end");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("begin");
    openapiRequiredFields.add("end");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity is not found in the empty JSON string", UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("begin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `begin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("begin").toString()));
      }
      if (!jsonObj.get("end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity.class));

       return (TypeAdapter<T>) new TypeAdapter<UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity>() {
           @Override
           public void write(JsonWriter out, UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity
   * @throws IOException if the JSON string is invalid with respect to UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity
   */
  public static UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity.class);
  }

  /**
   * Convert an instance of UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

