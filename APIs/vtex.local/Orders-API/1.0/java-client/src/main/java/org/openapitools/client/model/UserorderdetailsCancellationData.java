/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about order cancellation, when it applies.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserorderdetailsCancellationData {
  public static final String SERIALIZED_NAME_CANCELLATION_DATE = "CancellationDate";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_DATE)
  private String cancellationDate;

  public static final String SERIALIZED_NAME_REASON = "Reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_REQUESTED_BY_PAYMENT_NOTIFICATION = "RequestedByPaymentNotification";
  @SerializedName(SERIALIZED_NAME_REQUESTED_BY_PAYMENT_NOTIFICATION)
  private Boolean requestedByPaymentNotification;

  public static final String SERIALIZED_NAME_REQUESTED_BY_SELLER_NOTIFICATION = "RequestedBySellerNotification";
  @SerializedName(SERIALIZED_NAME_REQUESTED_BY_SELLER_NOTIFICATION)
  private Boolean requestedBySellerNotification;

  public static final String SERIALIZED_NAME_REQUESTED_BY_SYSTEM = "RequestedBySystem";
  @SerializedName(SERIALIZED_NAME_REQUESTED_BY_SYSTEM)
  private Boolean requestedBySystem;

  public static final String SERIALIZED_NAME_REQUESTED_BY_USER = "RequestedByUser";
  @SerializedName(SERIALIZED_NAME_REQUESTED_BY_USER)
  private Boolean requestedByUser;

  public UserorderdetailsCancellationData() {
  }

  public UserorderdetailsCancellationData cancellationDate(String cancellationDate) {
    this.cancellationDate = cancellationDate;
    return this;
  }

  /**
   * The date when the order was cancelled.
   * @return cancellationDate
   */
  @javax.annotation.Nonnull
  public String getCancellationDate() {
    return cancellationDate;
  }

  public void setCancellationDate(String cancellationDate) {
    this.cancellationDate = cancellationDate;
  }


  public UserorderdetailsCancellationData reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The reason why the order was cancelled.
   * @return reason
   */
  @javax.annotation.Nonnull
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public UserorderdetailsCancellationData requestedByPaymentNotification(Boolean requestedByPaymentNotification) {
    this.requestedByPaymentNotification = requestedByPaymentNotification;
    return this;
  }

  /**
   * If the order cancellation was requested by the payment gateway (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return requestedByPaymentNotification
   */
  @javax.annotation.Nonnull
  public Boolean getRequestedByPaymentNotification() {
    return requestedByPaymentNotification;
  }

  public void setRequestedByPaymentNotification(Boolean requestedByPaymentNotification) {
    this.requestedByPaymentNotification = requestedByPaymentNotification;
  }


  public UserorderdetailsCancellationData requestedBySellerNotification(Boolean requestedBySellerNotification) {
    this.requestedBySellerNotification = requestedBySellerNotification;
    return this;
  }

  /**
   * If the order cancellation was requested by the seller (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return requestedBySellerNotification
   */
  @javax.annotation.Nonnull
  public Boolean getRequestedBySellerNotification() {
    return requestedBySellerNotification;
  }

  public void setRequestedBySellerNotification(Boolean requestedBySellerNotification) {
    this.requestedBySellerNotification = requestedBySellerNotification;
  }


  public UserorderdetailsCancellationData requestedBySystem(Boolean requestedBySystem) {
    this.requestedBySystem = requestedBySystem;
    return this;
  }

  /**
   * If the order cancellation was made by the system (&#x60;true&#x60;) or not (&#x60;false&#x60;). This type of order cancellation happens in [incomplete orders](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294), for example.
   * @return requestedBySystem
   */
  @javax.annotation.Nonnull
  public Boolean getRequestedBySystem() {
    return requestedBySystem;
  }

  public void setRequestedBySystem(Boolean requestedBySystem) {
    this.requestedBySystem = requestedBySystem;
  }


  public UserorderdetailsCancellationData requestedByUser(Boolean requestedByUser) {
    this.requestedByUser = requestedByUser;
    return this;
  }

  /**
   * If the order cancellation was requested by the costumer (&#x60;true&#x60;) or not (&#x60;false&#x60;).
   * @return requestedByUser
   */
  @javax.annotation.Nonnull
  public Boolean getRequestedByUser() {
    return requestedByUser;
  }

  public void setRequestedByUser(Boolean requestedByUser) {
    this.requestedByUser = requestedByUser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserorderdetailsCancellationData userorderdetailsCancellationData = (UserorderdetailsCancellationData) o;
    return Objects.equals(this.cancellationDate, userorderdetailsCancellationData.cancellationDate) &&
        Objects.equals(this.reason, userorderdetailsCancellationData.reason) &&
        Objects.equals(this.requestedByPaymentNotification, userorderdetailsCancellationData.requestedByPaymentNotification) &&
        Objects.equals(this.requestedBySellerNotification, userorderdetailsCancellationData.requestedBySellerNotification) &&
        Objects.equals(this.requestedBySystem, userorderdetailsCancellationData.requestedBySystem) &&
        Objects.equals(this.requestedByUser, userorderdetailsCancellationData.requestedByUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancellationDate, reason, requestedByPaymentNotification, requestedBySellerNotification, requestedBySystem, requestedByUser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserorderdetailsCancellationData {\n");
    sb.append("    cancellationDate: ").append(toIndentedString(cancellationDate)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    requestedByPaymentNotification: ").append(toIndentedString(requestedByPaymentNotification)).append("\n");
    sb.append("    requestedBySellerNotification: ").append(toIndentedString(requestedBySellerNotification)).append("\n");
    sb.append("    requestedBySystem: ").append(toIndentedString(requestedBySystem)).append("\n");
    sb.append("    requestedByUser: ").append(toIndentedString(requestedByUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CancellationDate");
    openapiFields.add("Reason");
    openapiFields.add("RequestedByPaymentNotification");
    openapiFields.add("RequestedBySellerNotification");
    openapiFields.add("RequestedBySystem");
    openapiFields.add("RequestedByUser");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CancellationDate");
    openapiRequiredFields.add("Reason");
    openapiRequiredFields.add("RequestedByPaymentNotification");
    openapiRequiredFields.add("RequestedBySellerNotification");
    openapiRequiredFields.add("RequestedBySystem");
    openapiRequiredFields.add("RequestedByUser");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserorderdetailsCancellationData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserorderdetailsCancellationData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserorderdetailsCancellationData is not found in the empty JSON string", UserorderdetailsCancellationData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserorderdetailsCancellationData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserorderdetailsCancellationData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserorderdetailsCancellationData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CancellationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CancellationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CancellationDate").toString()));
      }
      if (!jsonObj.get("Reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserorderdetailsCancellationData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserorderdetailsCancellationData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserorderdetailsCancellationData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserorderdetailsCancellationData.class));

       return (TypeAdapter<T>) new TypeAdapter<UserorderdetailsCancellationData>() {
           @Override
           public void write(JsonWriter out, UserorderdetailsCancellationData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserorderdetailsCancellationData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserorderdetailsCancellationData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserorderdetailsCancellationData
   * @throws IOException if the JSON string is invalid with respect to UserorderdetailsCancellationData
   */
  public static UserorderdetailsCancellationData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserorderdetailsCancellationData.class);
  }

  /**
   * Convert an instance of UserorderdetailsCancellationData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

