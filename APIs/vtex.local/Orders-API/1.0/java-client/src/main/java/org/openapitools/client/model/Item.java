/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalInfo;
import org.openapitools.client.model.ItemAttachment;
import org.openapitools.client.model.ItemAttachmentOfferingsInner;
import org.openapitools.client.model.ItemPriceDefinitions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Item {
  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private AdditionalInfo additionalInfo;

  public static final String SERIALIZED_NAME_ASSEMBLIES = "assemblies";
  @SerializedName(SERIALIZED_NAME_ASSEMBLIES)
  private List<Object> assemblies;

  public static final String SERIALIZED_NAME_ATTACHMENT_OFFERINGS = "attachmentOfferings";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_OFFERINGS)
  private List<ItemAttachmentOfferingsInner> attachmentOfferings;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<String> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUNDLE_ITEMS = "bundleItems";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ITEMS)
  private List<String> bundleItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_CALL_CENTER_OPERATOR = "callCenterOperator";
  @SerializedName(SERIALIZED_NAME_CALL_CENTER_OPERATOR)
  private String callCenterOperator;

  public static final String SERIALIZED_NAME_COMMISSION = "commission";
  @SerializedName(SERIALIZED_NAME_COMMISSION)
  private Integer commission;

  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private List<String> components = new ArrayList<>();

  public static final String SERIALIZED_NAME_COST_PRICE = "costPrice";
  @SerializedName(SERIALIZED_NAME_COST_PRICE)
  private Integer costPrice;

  public static final String SERIALIZED_NAME_DETAIL_URL = "detailUrl";
  @SerializedName(SERIALIZED_NAME_DETAIL_URL)
  private String detailUrl;

  public static final String SERIALIZED_NAME_EAN = "ean";
  @SerializedName(SERIALIZED_NAME_EAN)
  private String ean;

  public static final String SERIALIZED_NAME_FREIGHT_COMMISSION = "freightCommission";
  @SerializedName(SERIALIZED_NAME_FREIGHT_COMMISSION)
  private Integer freightCommission;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_IS_GIFT = "isGift";
  @SerializedName(SERIALIZED_NAME_IS_GIFT)
  private Boolean isGift;

  public static final String SERIALIZED_NAME_ITEM_ATTACHMENT = "itemAttachment";
  @SerializedName(SERIALIZED_NAME_ITEM_ATTACHMENT)
  private ItemAttachment itemAttachment;

  public static final String SERIALIZED_NAME_LIST_PRICE = "listPrice";
  @SerializedName(SERIALIZED_NAME_LIST_PRICE)
  private Integer listPrice;

  public static final String SERIALIZED_NAME_LOCK_ID = "lockId";
  @SerializedName(SERIALIZED_NAME_LOCK_ID)
  private String lockId;

  public static final String SERIALIZED_NAME_MANUAL_PRICE = "manualPrice";
  @SerializedName(SERIALIZED_NAME_MANUAL_PRICE)
  private String manualPrice;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private String measurementUnit;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OFFERINGS = "offerings";
  @SerializedName(SERIALIZED_NAME_OFFERINGS)
  private List<String> offerings = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private List<String> params = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT_ASSEMBLY_BINDING = "parentAssemblyBinding";
  @SerializedName(SERIALIZED_NAME_PARENT_ASSEMBLY_BINDING)
  private String parentAssemblyBinding;

  public static final String SERIALIZED_NAME_PARENT_ITEM_INDEX = "parentItemIndex";
  @SerializedName(SERIALIZED_NAME_PARENT_ITEM_INDEX)
  private String parentItemIndex;

  public static final String SERIALIZED_NAME_PRE_SALE_DATE = "preSaleDate";
  @SerializedName(SERIALIZED_NAME_PRE_SALE_DATE)
  private String preSaleDate;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_PRICE_DEFINITIONS = "priceDefinitions";
  @SerializedName(SERIALIZED_NAME_PRICE_DEFINITIONS)
  private ItemPriceDefinitions priceDefinitions;

  public static final String SERIALIZED_NAME_PRICE_TAGS = "priceTags";
  @SerializedName(SERIALIZED_NAME_PRICE_TAGS)
  private List<String> priceTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE_VALID_UNTIL = "priceValidUntil";
  @SerializedName(SERIALIZED_NAME_PRICE_VALID_UNTIL)
  private String priceValidUntil;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_REF_ID = "refId";
  @SerializedName(SERIALIZED_NAME_REF_ID)
  private String refId;

  public static final String SERIALIZED_NAME_REWARD_VALUE = "rewardValue";
  @SerializedName(SERIALIZED_NAME_REWARD_VALUE)
  private Integer rewardValue;

  public static final String SERIALIZED_NAME_SELLER = "seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  private String seller;

  public static final String SERIALIZED_NAME_SELLER_SKU = "sellerSku";
  @SerializedName(SERIALIZED_NAME_SELLER_SKU)
  private String sellerSku;

  public static final String SERIALIZED_NAME_SELLING_PRICE = "sellingPrice";
  @SerializedName(SERIALIZED_NAME_SELLING_PRICE)
  private Integer sellingPrice;

  public static final String SERIALIZED_NAME_SERIAL_NUMBERS = "serialNumbers";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBERS)
  private String serialNumbers;

  public static final String SERIALIZED_NAME_SHIPPING_PRICE = "shippingPrice";
  @SerializedName(SERIALIZED_NAME_SHIPPING_PRICE)
  private String shippingPrice;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Integer tax;

  public static final String SERIALIZED_NAME_TAX_CODE = "taxCode";
  @SerializedName(SERIALIZED_NAME_TAX_CODE)
  private String taxCode;

  public static final String SERIALIZED_NAME_UNIQUE_ID = "uniqueId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ID)
  private String uniqueId;

  public static final String SERIALIZED_NAME_UNIT_MULTIPLIER = "unitMultiplier";
  @SerializedName(SERIALIZED_NAME_UNIT_MULTIPLIER)
  private Integer unitMultiplier;

  public Item() {
  }

  public Item additionalInfo(AdditionalInfo additionalInfo) {
    this.additionalInfo = additionalInfo;
    return this;
  }

  /**
   * Get additionalInfo
   * @return additionalInfo
   */
  @javax.annotation.Nonnull
  public AdditionalInfo getAdditionalInfo() {
    return additionalInfo;
  }

  public void setAdditionalInfo(AdditionalInfo additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public Item assemblies(List<Object> assemblies) {
    this.assemblies = assemblies;
    return this;
  }

  public Item addAssembliesItem(Object assembliesItem) {
    if (this.assemblies == null) {
      this.assemblies = new ArrayList<>();
    }
    this.assemblies.add(assembliesItem);
    return this;
  }

  /**
   * Retrieves information about orders item&#39;s customizations.
   * @return assemblies
   */
  @javax.annotation.Nullable
  public List<Object> getAssemblies() {
    return assemblies;
  }

  public void setAssemblies(List<Object> assemblies) {
    this.assemblies = assemblies;
  }


  public Item attachmentOfferings(List<ItemAttachmentOfferingsInner> attachmentOfferings) {
    this.attachmentOfferings = attachmentOfferings;
    return this;
  }

  public Item addAttachmentOfferingsItem(ItemAttachmentOfferingsInner attachmentOfferingsItem) {
    if (this.attachmentOfferings == null) {
      this.attachmentOfferings = new ArrayList<>();
    }
    this.attachmentOfferings.add(attachmentOfferingsItem);
    return this;
  }

  /**
   * List of attachments details.
   * @return attachmentOfferings
   */
  @javax.annotation.Nullable
  public List<ItemAttachmentOfferingsInner> getAttachmentOfferings() {
    return attachmentOfferings;
  }

  public void setAttachmentOfferings(List<ItemAttachmentOfferingsInner> attachmentOfferings) {
    this.attachmentOfferings = attachmentOfferings;
  }


  public Item attachments(List<String> attachments) {
    this.attachments = attachments;
    return this;
  }

  public Item addAttachmentsItem(String attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Array containing information on attachments.
   * @return attachments
   */
  @javax.annotation.Nonnull
  public List<String> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<String> attachments) {
    this.attachments = attachments;
  }


  public Item bundleItems(List<String> bundleItems) {
    this.bundleItems = bundleItems;
    return this;
  }

  public Item addBundleItemsItem(String bundleItemsItem) {
    if (this.bundleItems == null) {
      this.bundleItems = new ArrayList<>();
    }
    this.bundleItems.add(bundleItemsItem);
    return this;
  }

  /**
   * Information on services sold along with the item&#39;s SKU. For example, a gift package.
   * @return bundleItems
   */
  @javax.annotation.Nonnull
  public List<String> getBundleItems() {
    return bundleItems;
  }

  public void setBundleItems(List<String> bundleItems) {
    this.bundleItems = bundleItems;
  }


  public Item callCenterOperator(String callCenterOperator) {
    this.callCenterOperator = callCenterOperator;
    return this;
  }

  /**
   * Call center operator responsible for the order.
   * @return callCenterOperator
   */
  @javax.annotation.Nullable
  public String getCallCenterOperator() {
    return callCenterOperator;
  }

  public void setCallCenterOperator(String callCenterOperator) {
    this.callCenterOperator = callCenterOperator;
  }


  public Item commission(Integer commission) {
    this.commission = commission;
    return this;
  }

  /**
   * Commission value registered for the seller.
   * @return commission
   */
  @javax.annotation.Nonnull
  public Integer getCommission() {
    return commission;
  }

  public void setCommission(Integer commission) {
    this.commission = commission;
  }


  public Item components(List<String> components) {
    this.components = components;
    return this;
  }

  public Item addComponentsItem(String componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<>();
    }
    this.components.add(componentsItem);
    return this;
  }

  /**
   * Item&#39;s components.
   * @return components
   */
  @javax.annotation.Nonnull
  public List<String> getComponents() {
    return components;
  }

  public void setComponents(List<String> components) {
    this.components = components;
  }


  public Item costPrice(Integer costPrice) {
    this.costPrice = costPrice;
    return this;
  }

  /**
   * Item&#39;s cost price.
   * @return costPrice
   */
  @javax.annotation.Nonnull
  public Integer getCostPrice() {
    return costPrice;
  }

  public void setCostPrice(Integer costPrice) {
    this.costPrice = costPrice;
  }


  public Item detailUrl(String detailUrl) {
    this.detailUrl = detailUrl;
    return this;
  }

  /**
   * URL slug of the item.
   * @return detailUrl
   */
  @javax.annotation.Nonnull
  public String getDetailUrl() {
    return detailUrl;
  }

  public void setDetailUrl(String detailUrl) {
    this.detailUrl = detailUrl;
  }


  public Item ean(String ean) {
    this.ean = ean;
    return this;
  }

  /**
   * EAN of the SKU.
   * @return ean
   */
  @javax.annotation.Nullable
  public String getEan() {
    return ean;
  }

  public void setEan(String ean) {
    this.ean = ean;
  }


  public Item freightCommission(Integer freightCommission) {
    this.freightCommission = freightCommission;
    return this;
  }

  /**
   * Value of the freight commission.
   * @return freightCommission
   */
  @javax.annotation.Nonnull
  public Integer getFreightCommission() {
    return freightCommission;
  }

  public void setFreightCommission(Integer freightCommission) {
    this.freightCommission = freightCommission;
  }


  public Item id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Item&#39;s SKU ID, which is a unique numerical identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Item imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Item&#39;s SKU image URL.
   * @return imageUrl
   */
  @javax.annotation.Nonnull
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public Item isGift(Boolean isGift) {
    this.isGift = isGift;
    return this;
  }

  /**
   * This field is &#x60;true&#x60; when the item is a gift in order context and &#x60;false&#x60; when it is not.
   * @return isGift
   */
  @javax.annotation.Nonnull
  public Boolean getIsGift() {
    return isGift;
  }

  public void setIsGift(Boolean isGift) {
    this.isGift = isGift;
  }


  public Item itemAttachment(ItemAttachment itemAttachment) {
    this.itemAttachment = itemAttachment;
    return this;
  }

  /**
   * Get itemAttachment
   * @return itemAttachment
   */
  @javax.annotation.Nonnull
  public ItemAttachment getItemAttachment() {
    return itemAttachment;
  }

  public void setItemAttachment(ItemAttachment itemAttachment) {
    this.itemAttachment = itemAttachment;
  }


  public Item listPrice(Integer listPrice) {
    this.listPrice = listPrice;
    return this;
  }

  /**
   * Item&#39;s list price.
   * @return listPrice
   */
  @javax.annotation.Nonnull
  public Integer getListPrice() {
    return listPrice;
  }

  public void setListPrice(Integer listPrice) {
    this.listPrice = listPrice;
  }


  public Item lockId(String lockId) {
    this.lockId = lockId;
    return this;
  }

  /**
   * Reservation ID.
   * @return lockId
   */
  @javax.annotation.Nonnull
  public String getLockId() {
    return lockId;
  }

  public void setLockId(String lockId) {
    this.lockId = lockId;
  }


  public Item manualPrice(String manualPrice) {
    this.manualPrice = manualPrice;
    return this;
  }

  /**
   * Item&#39;s manual price.
   * @return manualPrice
   */
  @javax.annotation.Nullable
  public String getManualPrice() {
    return manualPrice;
  }

  public void setManualPrice(String manualPrice) {
    this.manualPrice = manualPrice;
  }


  public Item measurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Item&#39;s measurement unit.
   * @return measurementUnit
   */
  @javax.annotation.Nonnull
  public String getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  public Item name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Item&#39;s name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Item offerings(List<String> offerings) {
    this.offerings = offerings;
    return this;
  }

  public Item addOfferingsItem(String offeringsItem) {
    if (this.offerings == null) {
      this.offerings = new ArrayList<>();
    }
    this.offerings.add(offeringsItem);
    return this;
  }

  /**
   * Item&#39;s offerings, which are services related to the item. For example, guarantee or installation.
   * @return offerings
   */
  @javax.annotation.Nonnull
  public List<String> getOfferings() {
    return offerings;
  }

  public void setOfferings(List<String> offerings) {
    this.offerings = offerings;
  }


  public Item params(List<String> params) {
    this.params = params;
    return this;
  }

  public Item addParamsItem(String paramsItem) {
    if (this.params == null) {
      this.params = new ArrayList<>();
    }
    this.params.add(paramsItem);
    return this;
  }

  /**
   * Information about params.
   * @return params
   */
  @javax.annotation.Nonnull
  public List<String> getParams() {
    return params;
  }

  public void setParams(List<String> params) {
    this.params = params;
  }


  public Item parentAssemblyBinding(String parentAssemblyBinding) {
    this.parentAssemblyBinding = parentAssemblyBinding;
    return this;
  }

  /**
   * Parent assembly binding.
   * @return parentAssemblyBinding
   */
  @javax.annotation.Nullable
  public String getParentAssemblyBinding() {
    return parentAssemblyBinding;
  }

  public void setParentAssemblyBinding(String parentAssemblyBinding) {
    this.parentAssemblyBinding = parentAssemblyBinding;
  }


  public Item parentItemIndex(String parentItemIndex) {
    this.parentItemIndex = parentItemIndex;
    return this;
  }

  /**
   * Parent item index.
   * @return parentItemIndex
   */
  @javax.annotation.Nullable
  public String getParentItemIndex() {
    return parentItemIndex;
  }

  public void setParentItemIndex(String parentItemIndex) {
    this.parentItemIndex = parentItemIndex;
  }


  public Item preSaleDate(String preSaleDate) {
    this.preSaleDate = preSaleDate;
    return this;
  }

  /**
   * Item&#39;s pre sale date.
   * @return preSaleDate
   */
  @javax.annotation.Nullable
  public String getPreSaleDate() {
    return preSaleDate;
  }

  public void setPreSaleDate(String preSaleDate) {
    this.preSaleDate = preSaleDate;
  }


  public Item price(Integer price) {
    this.price = price;
    return this;
  }

  /**
   * Item&#39;s price.
   * @return price
   */
  @javax.annotation.Nonnull
  public Integer getPrice() {
    return price;
  }

  public void setPrice(Integer price) {
    this.price = price;
  }


  public Item priceDefinitions(ItemPriceDefinitions priceDefinitions) {
    this.priceDefinitions = priceDefinitions;
    return this;
  }

  /**
   * Get priceDefinitions
   * @return priceDefinitions
   */
  @javax.annotation.Nonnull
  public ItemPriceDefinitions getPriceDefinitions() {
    return priceDefinitions;
  }

  public void setPriceDefinitions(ItemPriceDefinitions priceDefinitions) {
    this.priceDefinitions = priceDefinitions;
  }


  public Item priceTags(List<String> priceTags) {
    this.priceTags = priceTags;
    return this;
  }

  public Item addPriceTagsItem(String priceTagsItem) {
    if (this.priceTags == null) {
      this.priceTags = new ArrayList<>();
    }
    this.priceTags.add(priceTagsItem);
    return this;
  }

  /**
   * List of objects with item&#39;s price modifiers.
   * @return priceTags
   */
  @javax.annotation.Nonnull
  public List<String> getPriceTags() {
    return priceTags;
  }

  public void setPriceTags(List<String> priceTags) {
    this.priceTags = priceTags;
  }


  public Item priceValidUntil(String priceValidUntil) {
    this.priceValidUntil = priceValidUntil;
    return this;
  }

  /**
   * Date until when the price is going to be valid if there is a promotion.
   * @return priceValidUntil
   */
  @javax.annotation.Nullable
  public String getPriceValidUntil() {
    return priceValidUntil;
  }

  public void setPriceValidUntil(String priceValidUntil) {
    this.priceValidUntil = priceValidUntil;
  }


  public Item productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * ID of the Product associated with the item.
   * @return productId
   */
  @javax.annotation.Nonnull
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public Item quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity of items.
   * @return quantity
   */
  @javax.annotation.Nonnull
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public Item refId(String refId) {
    this.refId = refId;
    return this;
  }

  /**
   * Product referencial code associated with the item.
   * @return refId
   */
  @javax.annotation.Nonnull
  public String getRefId() {
    return refId;
  }

  public void setRefId(String refId) {
    this.refId = refId;
  }


  public Item rewardValue(Integer rewardValue) {
    this.rewardValue = rewardValue;
    return this;
  }

  /**
   * Item&#39;s reward value.
   * @return rewardValue
   */
  @javax.annotation.Nonnull
  public Integer getRewardValue() {
    return rewardValue;
  }

  public void setRewardValue(Integer rewardValue) {
    this.rewardValue = rewardValue;
  }


  public Item seller(String seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Seller related to the order.
   * @return seller
   */
  @javax.annotation.Nonnull
  public String getSeller() {
    return seller;
  }

  public void setSeller(String seller) {
    this.seller = seller;
  }


  public Item sellerSku(String sellerSku) {
    this.sellerSku = sellerSku;
    return this;
  }

  /**
   * SKU ID from the seller perspective.
   * @return sellerSku
   */
  @javax.annotation.Nonnull
  public String getSellerSku() {
    return sellerSku;
  }

  public void setSellerSku(String sellerSku) {
    this.sellerSku = sellerSku;
  }


  public Item sellingPrice(Integer sellingPrice) {
    this.sellingPrice = sellingPrice;
    return this;
  }

  /**
   * Item&#39;s selling price.
   * @return sellingPrice
   */
  @javax.annotation.Nonnull
  public Integer getSellingPrice() {
    return sellingPrice;
  }

  public void setSellingPrice(Integer sellingPrice) {
    this.sellingPrice = sellingPrice;
  }


  @Deprecated
  public Item serialNumbers(String serialNumbers) {
    this.serialNumbers = serialNumbers;
    return this;
  }

  /**
   * This field identifies the order in the &#x60;handling&#x60; status in the workflow, and it was used for VTEX internal control.
   * @return serialNumbers
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getSerialNumbers() {
    return serialNumbers;
  }

  @Deprecated
  public void setSerialNumbers(String serialNumbers) {
    this.serialNumbers = serialNumbers;
  }


  public Item shippingPrice(String shippingPrice) {
    this.shippingPrice = shippingPrice;
    return this;
  }

  /**
   * Item&#39;s shipping price.
   * @return shippingPrice
   */
  @javax.annotation.Nullable
  public String getShippingPrice() {
    return shippingPrice;
  }

  public void setShippingPrice(String shippingPrice) {
    this.shippingPrice = shippingPrice;
  }


  public Item tax(Integer tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Item&#39;s tax.
   * @return tax
   */
  @javax.annotation.Nonnull
  public Integer getTax() {
    return tax;
  }

  public void setTax(Integer tax) {
    this.tax = tax;
  }


  public Item taxCode(String taxCode) {
    this.taxCode = taxCode;
    return this;
  }

  /**
   *  Item&#39;s tax code.
   * @return taxCode
   */
  @javax.annotation.Nullable
  public String getTaxCode() {
    return taxCode;
  }

  public void setTaxCode(String taxCode) {
    this.taxCode = taxCode;
  }


  public Item uniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
    return this;
  }

  /**
   * Unique ID is an alphanumeric sequence that identifies an SKU in a given order.
   * @return uniqueId
   */
  @javax.annotation.Nonnull
  public String getUniqueId() {
    return uniqueId;
  }

  public void setUniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
  }


  public Item unitMultiplier(Integer unitMultiplier) {
    this.unitMultiplier = unitMultiplier;
    return this;
  }

  /**
   * Item&#39;s unit multiplier.
   * @return unitMultiplier
   */
  @javax.annotation.Nonnull
  public Integer getUnitMultiplier() {
    return unitMultiplier;
  }

  public void setUnitMultiplier(Integer unitMultiplier) {
    this.unitMultiplier = unitMultiplier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Item item = (Item) o;
    return Objects.equals(this.additionalInfo, item.additionalInfo) &&
        Objects.equals(this.assemblies, item.assemblies) &&
        Objects.equals(this.attachmentOfferings, item.attachmentOfferings) &&
        Objects.equals(this.attachments, item.attachments) &&
        Objects.equals(this.bundleItems, item.bundleItems) &&
        Objects.equals(this.callCenterOperator, item.callCenterOperator) &&
        Objects.equals(this.commission, item.commission) &&
        Objects.equals(this.components, item.components) &&
        Objects.equals(this.costPrice, item.costPrice) &&
        Objects.equals(this.detailUrl, item.detailUrl) &&
        Objects.equals(this.ean, item.ean) &&
        Objects.equals(this.freightCommission, item.freightCommission) &&
        Objects.equals(this.id, item.id) &&
        Objects.equals(this.imageUrl, item.imageUrl) &&
        Objects.equals(this.isGift, item.isGift) &&
        Objects.equals(this.itemAttachment, item.itemAttachment) &&
        Objects.equals(this.listPrice, item.listPrice) &&
        Objects.equals(this.lockId, item.lockId) &&
        Objects.equals(this.manualPrice, item.manualPrice) &&
        Objects.equals(this.measurementUnit, item.measurementUnit) &&
        Objects.equals(this.name, item.name) &&
        Objects.equals(this.offerings, item.offerings) &&
        Objects.equals(this.params, item.params) &&
        Objects.equals(this.parentAssemblyBinding, item.parentAssemblyBinding) &&
        Objects.equals(this.parentItemIndex, item.parentItemIndex) &&
        Objects.equals(this.preSaleDate, item.preSaleDate) &&
        Objects.equals(this.price, item.price) &&
        Objects.equals(this.priceDefinitions, item.priceDefinitions) &&
        Objects.equals(this.priceTags, item.priceTags) &&
        Objects.equals(this.priceValidUntil, item.priceValidUntil) &&
        Objects.equals(this.productId, item.productId) &&
        Objects.equals(this.quantity, item.quantity) &&
        Objects.equals(this.refId, item.refId) &&
        Objects.equals(this.rewardValue, item.rewardValue) &&
        Objects.equals(this.seller, item.seller) &&
        Objects.equals(this.sellerSku, item.sellerSku) &&
        Objects.equals(this.sellingPrice, item.sellingPrice) &&
        Objects.equals(this.serialNumbers, item.serialNumbers) &&
        Objects.equals(this.shippingPrice, item.shippingPrice) &&
        Objects.equals(this.tax, item.tax) &&
        Objects.equals(this.taxCode, item.taxCode) &&
        Objects.equals(this.uniqueId, item.uniqueId) &&
        Objects.equals(this.unitMultiplier, item.unitMultiplier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalInfo, assemblies, attachmentOfferings, attachments, bundleItems, callCenterOperator, commission, components, costPrice, detailUrl, ean, freightCommission, id, imageUrl, isGift, itemAttachment, listPrice, lockId, manualPrice, measurementUnit, name, offerings, params, parentAssemblyBinding, parentItemIndex, preSaleDate, price, priceDefinitions, priceTags, priceValidUntil, productId, quantity, refId, rewardValue, seller, sellerSku, sellingPrice, serialNumbers, shippingPrice, tax, taxCode, uniqueId, unitMultiplier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Item {\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    assemblies: ").append(toIndentedString(assemblies)).append("\n");
    sb.append("    attachmentOfferings: ").append(toIndentedString(attachmentOfferings)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    bundleItems: ").append(toIndentedString(bundleItems)).append("\n");
    sb.append("    callCenterOperator: ").append(toIndentedString(callCenterOperator)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    costPrice: ").append(toIndentedString(costPrice)).append("\n");
    sb.append("    detailUrl: ").append(toIndentedString(detailUrl)).append("\n");
    sb.append("    ean: ").append(toIndentedString(ean)).append("\n");
    sb.append("    freightCommission: ").append(toIndentedString(freightCommission)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    isGift: ").append(toIndentedString(isGift)).append("\n");
    sb.append("    itemAttachment: ").append(toIndentedString(itemAttachment)).append("\n");
    sb.append("    listPrice: ").append(toIndentedString(listPrice)).append("\n");
    sb.append("    lockId: ").append(toIndentedString(lockId)).append("\n");
    sb.append("    manualPrice: ").append(toIndentedString(manualPrice)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    offerings: ").append(toIndentedString(offerings)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    parentAssemblyBinding: ").append(toIndentedString(parentAssemblyBinding)).append("\n");
    sb.append("    parentItemIndex: ").append(toIndentedString(parentItemIndex)).append("\n");
    sb.append("    preSaleDate: ").append(toIndentedString(preSaleDate)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceDefinitions: ").append(toIndentedString(priceDefinitions)).append("\n");
    sb.append("    priceTags: ").append(toIndentedString(priceTags)).append("\n");
    sb.append("    priceValidUntil: ").append(toIndentedString(priceValidUntil)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    refId: ").append(toIndentedString(refId)).append("\n");
    sb.append("    rewardValue: ").append(toIndentedString(rewardValue)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("    sellerSku: ").append(toIndentedString(sellerSku)).append("\n");
    sb.append("    sellingPrice: ").append(toIndentedString(sellingPrice)).append("\n");
    sb.append("    serialNumbers: ").append(toIndentedString(serialNumbers)).append("\n");
    sb.append("    shippingPrice: ").append(toIndentedString(shippingPrice)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    taxCode: ").append(toIndentedString(taxCode)).append("\n");
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("    unitMultiplier: ").append(toIndentedString(unitMultiplier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalInfo");
    openapiFields.add("assemblies");
    openapiFields.add("attachmentOfferings");
    openapiFields.add("attachments");
    openapiFields.add("bundleItems");
    openapiFields.add("callCenterOperator");
    openapiFields.add("commission");
    openapiFields.add("components");
    openapiFields.add("costPrice");
    openapiFields.add("detailUrl");
    openapiFields.add("ean");
    openapiFields.add("freightCommission");
    openapiFields.add("id");
    openapiFields.add("imageUrl");
    openapiFields.add("isGift");
    openapiFields.add("itemAttachment");
    openapiFields.add("listPrice");
    openapiFields.add("lockId");
    openapiFields.add("manualPrice");
    openapiFields.add("measurementUnit");
    openapiFields.add("name");
    openapiFields.add("offerings");
    openapiFields.add("params");
    openapiFields.add("parentAssemblyBinding");
    openapiFields.add("parentItemIndex");
    openapiFields.add("preSaleDate");
    openapiFields.add("price");
    openapiFields.add("priceDefinitions");
    openapiFields.add("priceTags");
    openapiFields.add("priceValidUntil");
    openapiFields.add("productId");
    openapiFields.add("quantity");
    openapiFields.add("refId");
    openapiFields.add("rewardValue");
    openapiFields.add("seller");
    openapiFields.add("sellerSku");
    openapiFields.add("sellingPrice");
    openapiFields.add("serialNumbers");
    openapiFields.add("shippingPrice");
    openapiFields.add("tax");
    openapiFields.add("taxCode");
    openapiFields.add("uniqueId");
    openapiFields.add("unitMultiplier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("additionalInfo");
    openapiRequiredFields.add("assemblies");
    openapiRequiredFields.add("attachmentOfferings");
    openapiRequiredFields.add("attachments");
    openapiRequiredFields.add("bundleItems");
    openapiRequiredFields.add("callCenterOperator");
    openapiRequiredFields.add("commission");
    openapiRequiredFields.add("components");
    openapiRequiredFields.add("costPrice");
    openapiRequiredFields.add("detailUrl");
    openapiRequiredFields.add("ean");
    openapiRequiredFields.add("freightCommission");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("imageUrl");
    openapiRequiredFields.add("isGift");
    openapiRequiredFields.add("itemAttachment");
    openapiRequiredFields.add("listPrice");
    openapiRequiredFields.add("lockId");
    openapiRequiredFields.add("manualPrice");
    openapiRequiredFields.add("measurementUnit");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("offerings");
    openapiRequiredFields.add("params");
    openapiRequiredFields.add("parentAssemblyBinding");
    openapiRequiredFields.add("parentItemIndex");
    openapiRequiredFields.add("preSaleDate");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("priceDefinitions");
    openapiRequiredFields.add("priceTags");
    openapiRequiredFields.add("priceValidUntil");
    openapiRequiredFields.add("productId");
    openapiRequiredFields.add("quantity");
    openapiRequiredFields.add("refId");
    openapiRequiredFields.add("rewardValue");
    openapiRequiredFields.add("seller");
    openapiRequiredFields.add("sellerSku");
    openapiRequiredFields.add("sellingPrice");
    openapiRequiredFields.add("serialNumbers");
    openapiRequiredFields.add("shippingPrice");
    openapiRequiredFields.add("tax");
    openapiRequiredFields.add("taxCode");
    openapiRequiredFields.add("uniqueId");
    openapiRequiredFields.add("unitMultiplier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Item
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Item.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Item is not found in the empty JSON string", Item.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Item.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Item` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Item.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `additionalInfo`
      AdditionalInfo.validateJsonElement(jsonObj.get("additionalInfo"));
      // ensure the required json array is present
      if (jsonObj.get("assemblies") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("assemblies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `assemblies` to be an array in the JSON string but got `%s`", jsonObj.get("assemblies").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("attachmentOfferings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachmentOfferings` to be an array in the JSON string but got `%s`", jsonObj.get("attachmentOfferings").toString()));
      }

      JsonArray jsonArrayattachmentOfferings = jsonObj.getAsJsonArray("attachmentOfferings");
      // validate the required field `attachmentOfferings` (array)
      for (int i = 0; i < jsonArrayattachmentOfferings.size(); i++) {
        ItemAttachmentOfferingsInner.validateJsonElement(jsonArrayattachmentOfferings.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("attachments") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("bundleItems") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("bundleItems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundleItems` to be an array in the JSON string but got `%s`", jsonObj.get("bundleItems").toString()));
      }
      if ((jsonObj.get("callCenterOperator") != null && !jsonObj.get("callCenterOperator").isJsonNull()) && !jsonObj.get("callCenterOperator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callCenterOperator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callCenterOperator").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("components") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("components").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `components` to be an array in the JSON string but got `%s`", jsonObj.get("components").toString()));
      }
      if (!jsonObj.get("detailUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailUrl").toString()));
      }
      if ((jsonObj.get("ean") != null && !jsonObj.get("ean").isJsonNull()) && !jsonObj.get("ean").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ean` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ean").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      // validate the required field `itemAttachment`
      ItemAttachment.validateJsonElement(jsonObj.get("itemAttachment"));
      if (!jsonObj.get("lockId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockId").toString()));
      }
      if ((jsonObj.get("manualPrice") != null && !jsonObj.get("manualPrice").isJsonNull()) && !jsonObj.get("manualPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manualPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manualPrice").toString()));
      }
      if (!jsonObj.get("measurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementUnit").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("offerings") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("offerings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerings` to be an array in the JSON string but got `%s`", jsonObj.get("offerings").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("params") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("params").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `params` to be an array in the JSON string but got `%s`", jsonObj.get("params").toString()));
      }
      if ((jsonObj.get("parentAssemblyBinding") != null && !jsonObj.get("parentAssemblyBinding").isJsonNull()) && !jsonObj.get("parentAssemblyBinding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentAssemblyBinding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentAssemblyBinding").toString()));
      }
      if ((jsonObj.get("parentItemIndex") != null && !jsonObj.get("parentItemIndex").isJsonNull()) && !jsonObj.get("parentItemIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentItemIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentItemIndex").toString()));
      }
      if ((jsonObj.get("preSaleDate") != null && !jsonObj.get("preSaleDate").isJsonNull()) && !jsonObj.get("preSaleDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preSaleDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preSaleDate").toString()));
      }
      // validate the required field `priceDefinitions`
      ItemPriceDefinitions.validateJsonElement(jsonObj.get("priceDefinitions"));
      // ensure the required json array is present
      if (jsonObj.get("priceTags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("priceTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceTags` to be an array in the JSON string but got `%s`", jsonObj.get("priceTags").toString()));
      }
      if ((jsonObj.get("priceValidUntil") != null && !jsonObj.get("priceValidUntil").isJsonNull()) && !jsonObj.get("priceValidUntil").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceValidUntil` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceValidUntil").toString()));
      }
      if (!jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if (!jsonObj.get("refId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refId").toString()));
      }
      if (!jsonObj.get("seller").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller").toString()));
      }
      if (!jsonObj.get("sellerSku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerSku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerSku").toString()));
      }
      if ((jsonObj.get("serialNumbers") != null && !jsonObj.get("serialNumbers").isJsonNull()) && !jsonObj.get("serialNumbers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumbers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumbers").toString()));
      }
      if ((jsonObj.get("shippingPrice") != null && !jsonObj.get("shippingPrice").isJsonNull()) && !jsonObj.get("shippingPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingPrice").toString()));
      }
      if ((jsonObj.get("taxCode") != null && !jsonObj.get("taxCode").isJsonNull()) && !jsonObj.get("taxCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxCode").toString()));
      }
      if (!jsonObj.get("uniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Item.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Item' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Item> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Item.class));

       return (TypeAdapter<T>) new TypeAdapter<Item>() {
           @Override
           public void write(JsonWriter out, Item value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Item read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Item given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Item
   * @throws IOException if the JSON string is invalid with respect to Item
   */
  public static Item fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Item.class);
  }

  /**
   * Convert an instance of Item to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

