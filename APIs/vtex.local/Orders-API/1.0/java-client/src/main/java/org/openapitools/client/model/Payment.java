/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PaymentConnectorResponses;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Payment details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Payment {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_BANK_ISSUED_INVOICE_BAR_CODE_NUMBER = "bankIssuedInvoiceBarCodeNumber";
  @SerializedName(SERIALIZED_NAME_BANK_ISSUED_INVOICE_BAR_CODE_NUMBER)
  private String bankIssuedInvoiceBarCodeNumber;

  public static final String SERIALIZED_NAME_BANK_ISSUED_INVOICE_BAR_CODE_TYPE = "bankIssuedInvoiceBarCodeType";
  @SerializedName(SERIALIZED_NAME_BANK_ISSUED_INVOICE_BAR_CODE_TYPE)
  private String bankIssuedInvoiceBarCodeType;

  public static final String SERIALIZED_NAME_BANK_ISSUED_INVOICE_IDENTIFICATION_NUMBER = "bankIssuedInvoiceIdentificationNumber";
  @SerializedName(SERIALIZED_NAME_BANK_ISSUED_INVOICE_IDENTIFICATION_NUMBER)
  private String bankIssuedInvoiceIdentificationNumber;

  public static final String SERIALIZED_NAME_BANK_ISSUED_INVOICE_IDENTIFICATION_NUMBER_FORMATTED = "bankIssuedInvoiceIdentificationNumberFormatted";
  @SerializedName(SERIALIZED_NAME_BANK_ISSUED_INVOICE_IDENTIFICATION_NUMBER_FORMATTED)
  private String bankIssuedInvoiceIdentificationNumberFormatted;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private Object billingAddress;

  public static final String SERIALIZED_NAME_CARD_HOLDER = "cardHolder";
  @SerializedName(SERIALIZED_NAME_CARD_HOLDER)
  private String cardHolder;

  public static final String SERIALIZED_NAME_CARD_NUMBER = "cardNumber";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER)
  private String cardNumber;

  public static final String SERIALIZED_NAME_CONNECTOR_RESPONSES = "connectorResponses";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_RESPONSES)
  private PaymentConnectorResponses connectorResponses;

  public static final String SERIALIZED_NAME_CVV2 = "cvv2";
  @SerializedName(SERIALIZED_NAME_CVV2)
  private String cvv2;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_EXPIRE_MONTH = "expireMonth";
  @SerializedName(SERIALIZED_NAME_EXPIRE_MONTH)
  private String expireMonth;

  public static final String SERIALIZED_NAME_EXPIRE_YEAR = "expireYear";
  @SerializedName(SERIALIZED_NAME_EXPIRE_YEAR)
  private String expireYear;

  public static final String SERIALIZED_NAME_FIRST_DIGITS = "firstDigits";
  @SerializedName(SERIALIZED_NAME_FIRST_DIGITS)
  private String firstDigits;

  public static final String SERIALIZED_NAME_GIFT_CARD_AS_DISCOUNT = "giftCardAsDiscount";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_AS_DISCOUNT)
  private Boolean giftCardAsDiscount;

  public static final String SERIALIZED_NAME_GIFT_CARD_CAPTION = "giftCardCaption";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_CAPTION)
  private String giftCardCaption;

  public static final String SERIALIZED_NAME_GIFT_CARD_ID = "giftCardId";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_ID)
  private String giftCardId;

  public static final String SERIALIZED_NAME_GIFT_CARD_NAME = "giftCardName";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_NAME)
  private String giftCardName;

  public static final String SERIALIZED_NAME_GIFT_CARD_PROVIDER = "giftCardProvider";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_PROVIDER)
  private String giftCardProvider;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTALLMENTS = "installments";
  @SerializedName(SERIALIZED_NAME_INSTALLMENTS)
  private Integer installments;

  public static final String SERIALIZED_NAME_KOIN_URL = "koinUrl";
  @SerializedName(SERIALIZED_NAME_KOIN_URL)
  private String koinUrl;

  public static final String SERIALIZED_NAME_LAST_DIGITS = "lastDigits";
  @SerializedName(SERIALIZED_NAME_LAST_DIGITS)
  private String lastDigits;

  public static final String SERIALIZED_NAME_PARENT_ACCOUNT_ID = "parentAccountId";
  @SerializedName(SERIALIZED_NAME_PARENT_ACCOUNT_ID)
  private String parentAccountId;

  public static final String SERIALIZED_NAME_PAYMENT_SYSTEM = "paymentSystem";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SYSTEM)
  private String paymentSystem;

  public static final String SERIALIZED_NAME_PAYMENT_SYSTEM_NAME = "paymentSystemName";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SYSTEM_NAME)
  private String paymentSystemName;

  public static final String SERIALIZED_NAME_REDEMPTION_CODE = "redemptionCode";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_CODE)
  private String redemptionCode;

  public static final String SERIALIZED_NAME_REFERENCE_VALUE = "referenceValue";
  @SerializedName(SERIALIZED_NAME_REFERENCE_VALUE)
  private Integer referenceValue;

  public static final String SERIALIZED_NAME_TID = "tid";
  @SerializedName(SERIALIZED_NAME_TID)
  private String tid;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public Payment() {
  }

  public Payment accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Payment&#39;s account ID.
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public Payment bankIssuedInvoiceBarCodeNumber(String bankIssuedInvoiceBarCodeNumber) {
    this.bankIssuedInvoiceBarCodeNumber = bankIssuedInvoiceBarCodeNumber;
    return this;
  }

  /**
   * Number of the bank issued invoice bar code.
   * @return bankIssuedInvoiceBarCodeNumber
   */
  @javax.annotation.Nonnull
  public String getBankIssuedInvoiceBarCodeNumber() {
    return bankIssuedInvoiceBarCodeNumber;
  }

  public void setBankIssuedInvoiceBarCodeNumber(String bankIssuedInvoiceBarCodeNumber) {
    this.bankIssuedInvoiceBarCodeNumber = bankIssuedInvoiceBarCodeNumber;
  }


  public Payment bankIssuedInvoiceBarCodeType(String bankIssuedInvoiceBarCodeType) {
    this.bankIssuedInvoiceBarCodeType = bankIssuedInvoiceBarCodeType;
    return this;
  }

  /**
   * Type of the bank issued invoice bar code.
   * @return bankIssuedInvoiceBarCodeType
   */
  @javax.annotation.Nonnull
  public String getBankIssuedInvoiceBarCodeType() {
    return bankIssuedInvoiceBarCodeType;
  }

  public void setBankIssuedInvoiceBarCodeType(String bankIssuedInvoiceBarCodeType) {
    this.bankIssuedInvoiceBarCodeType = bankIssuedInvoiceBarCodeType;
  }


  public Payment bankIssuedInvoiceIdentificationNumber(String bankIssuedInvoiceIdentificationNumber) {
    this.bankIssuedInvoiceIdentificationNumber = bankIssuedInvoiceIdentificationNumber;
    return this;
  }

  /**
   * Numeric sequence that identifies the bank issued invoice.
   * @return bankIssuedInvoiceIdentificationNumber
   */
  @javax.annotation.Nonnull
  public String getBankIssuedInvoiceIdentificationNumber() {
    return bankIssuedInvoiceIdentificationNumber;
  }

  public void setBankIssuedInvoiceIdentificationNumber(String bankIssuedInvoiceIdentificationNumber) {
    this.bankIssuedInvoiceIdentificationNumber = bankIssuedInvoiceIdentificationNumber;
  }


  public Payment bankIssuedInvoiceIdentificationNumberFormatted(String bankIssuedInvoiceIdentificationNumberFormatted) {
    this.bankIssuedInvoiceIdentificationNumberFormatted = bankIssuedInvoiceIdentificationNumberFormatted;
    return this;
  }

  /**
   * Bank issued invoice ID formatted.
   * @return bankIssuedInvoiceIdentificationNumberFormatted
   */
  @javax.annotation.Nonnull
  public String getBankIssuedInvoiceIdentificationNumberFormatted() {
    return bankIssuedInvoiceIdentificationNumberFormatted;
  }

  public void setBankIssuedInvoiceIdentificationNumberFormatted(String bankIssuedInvoiceIdentificationNumberFormatted) {
    this.bankIssuedInvoiceIdentificationNumberFormatted = bankIssuedInvoiceIdentificationNumberFormatted;
  }


  public Payment billingAddress(Object billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Billing address information.
   * @return billingAddress
   */
  @javax.annotation.Nonnull
  public Object getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Object billingAddress) {
    this.billingAddress = billingAddress;
  }


  public Payment cardHolder(String cardHolder) {
    this.cardHolder = cardHolder;
    return this;
  }

  /**
   * Name of the person who owns the card.
   * @return cardHolder
   */
  @javax.annotation.Nullable
  public String getCardHolder() {
    return cardHolder;
  }

  public void setCardHolder(String cardHolder) {
    this.cardHolder = cardHolder;
  }


  public Payment cardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
    return this;
  }

  /**
   * Numeric sequence of the card used in the transaction.
   * @return cardNumber
   */
  @javax.annotation.Nullable
  public String getCardNumber() {
    return cardNumber;
  }

  public void setCardNumber(String cardNumber) {
    this.cardNumber = cardNumber;
  }


  public Payment connectorResponses(PaymentConnectorResponses connectorResponses) {
    this.connectorResponses = connectorResponses;
    return this;
  }

  /**
   * Get connectorResponses
   * @return connectorResponses
   */
  @javax.annotation.Nonnull
  public PaymentConnectorResponses getConnectorResponses() {
    return connectorResponses;
  }

  public void setConnectorResponses(PaymentConnectorResponses connectorResponses) {
    this.connectorResponses = connectorResponses;
  }


  public Payment cvv2(String cvv2) {
    this.cvv2 = cvv2;
    return this;
  }

  /**
   * Card Verification Value (CVV2) is a security code used by payment processors to reduce fraudulent credit and debit card transactions.
   * @return cvv2
   */
  @javax.annotation.Nullable
  public String getCvv2() {
    return cvv2;
  }

  public void setCvv2(String cvv2) {
    this.cvv2 = cvv2;
  }


  public Payment dueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Payment due date, with the format &#x60;yyyy-mm-dd&#x60;.
   * @return dueDate
   */
  @javax.annotation.Nonnull
  public String getDueDate() {
    return dueDate;
  }

  public void setDueDate(String dueDate) {
    this.dueDate = dueDate;
  }


  public Payment expireMonth(String expireMonth) {
    this.expireMonth = expireMonth;
    return this;
  }

  /**
   * Expire month of the card used in the transaction (2-digits).
   * @return expireMonth
   */
  @javax.annotation.Nullable
  public String getExpireMonth() {
    return expireMonth;
  }

  public void setExpireMonth(String expireMonth) {
    this.expireMonth = expireMonth;
  }


  public Payment expireYear(String expireYear) {
    this.expireYear = expireYear;
    return this;
  }

  /**
   * Expire year of the card used in the transaction (4-digits).
   * @return expireYear
   */
  @javax.annotation.Nullable
  public String getExpireYear() {
    return expireYear;
  }

  public void setExpireYear(String expireYear) {
    this.expireYear = expireYear;
  }


  public Payment firstDigits(String firstDigits) {
    this.firstDigits = firstDigits;
    return this;
  }

  /**
   * Fist digits of the card used in the transaction.
   * @return firstDigits
   */
  @javax.annotation.Nullable
  public String getFirstDigits() {
    return firstDigits;
  }

  public void setFirstDigits(String firstDigits) {
    this.firstDigits = firstDigits;
  }


  public Payment giftCardAsDiscount(Boolean giftCardAsDiscount) {
    this.giftCardAsDiscount = giftCardAsDiscount;
    return this;
  }

  /**
   * When this field is set as &#x60;true&#x60;, the Gift Card is a discount over the price, and when set as &#x60;false&#x60;, it is not a discount.
   * @return giftCardAsDiscount
   */
  @javax.annotation.Nonnull
  public Boolean getGiftCardAsDiscount() {
    return giftCardAsDiscount;
  }

  public void setGiftCardAsDiscount(Boolean giftCardAsDiscount) {
    this.giftCardAsDiscount = giftCardAsDiscount;
  }


  public Payment giftCardCaption(String giftCardCaption) {
    this.giftCardCaption = giftCardCaption;
    return this;
  }

  /**
   * Gift Card&#39;s caption.
   * @return giftCardCaption
   */
  @javax.annotation.Nullable
  public String getGiftCardCaption() {
    return giftCardCaption;
  }

  public void setGiftCardCaption(String giftCardCaption) {
    this.giftCardCaption = giftCardCaption;
  }


  public Payment giftCardId(String giftCardId) {
    this.giftCardId = giftCardId;
    return this;
  }

  /**
   * Gift Card&#39;s ID.
   * @return giftCardId
   */
  @javax.annotation.Nullable
  public String getGiftCardId() {
    return giftCardId;
  }

  public void setGiftCardId(String giftCardId) {
    this.giftCardId = giftCardId;
  }


  public Payment giftCardName(String giftCardName) {
    this.giftCardName = giftCardName;
    return this;
  }

  /**
   * Gift Card&#39;s name.
   * @return giftCardName
   */
  @javax.annotation.Nullable
  public String getGiftCardName() {
    return giftCardName;
  }

  public void setGiftCardName(String giftCardName) {
    this.giftCardName = giftCardName;
  }


  public Payment giftCardProvider(String giftCardProvider) {
    this.giftCardProvider = giftCardProvider;
    return this;
  }

  /**
   * Gift Card provider&#39;s ID.
   * @return giftCardProvider
   */
  @javax.annotation.Nonnull
  public String getGiftCardProvider() {
    return giftCardProvider;
  }

  public void setGiftCardProvider(String giftCardProvider) {
    this.giftCardProvider = giftCardProvider;
  }


  public Payment group(String group) {
    this.group = group;
    return this;
  }

  /**
   * Name of the collection the Gift Card belongs to.
   * @return group
   */
  @javax.annotation.Nonnull
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public Payment id(String id) {
    this.id = id;
    return this;
  }

  /**
   * VTEX payment ID that can be used as unique identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Payment installments(Integer installments) {
    this.installments = installments;
    return this;
  }

  /**
   * Number of payment installments.
   * @return installments
   */
  @javax.annotation.Nonnull
  public Integer getInstallments() {
    return installments;
  }

  public void setInstallments(Integer installments) {
    this.installments = installments;
  }


  public Payment koinUrl(String koinUrl) {
    this.koinUrl = koinUrl;
    return this;
  }

  /**
   * Payment&#39;s account ID.
   * @return koinUrl
   */
  @javax.annotation.Nonnull
  public String getKoinUrl() {
    return koinUrl;
  }

  public void setKoinUrl(String koinUrl) {
    this.koinUrl = koinUrl;
  }


  public Payment lastDigits(String lastDigits) {
    this.lastDigits = lastDigits;
    return this;
  }

  /**
   * Last digits of the card used in the transaction.
   * @return lastDigits
   */
  @javax.annotation.Nullable
  public String getLastDigits() {
    return lastDigits;
  }

  public void setLastDigits(String lastDigits) {
    this.lastDigits = lastDigits;
  }


  public Payment parentAccountId(String parentAccountId) {
    this.parentAccountId = parentAccountId;
    return this;
  }

  /**
   * This field retrieves the main account if the payment was made in a subaccount.
   * @return parentAccountId
   */
  @javax.annotation.Nonnull
  public String getParentAccountId() {
    return parentAccountId;
  }

  public void setParentAccountId(String parentAccountId) {
    this.parentAccountId = parentAccountId;
  }


  public Payment paymentSystem(String paymentSystem) {
    this.paymentSystem = paymentSystem;
    return this;
  }

  /**
   * Payment system&#39;s ID.
   * @return paymentSystem
   */
  @javax.annotation.Nonnull
  public String getPaymentSystem() {
    return paymentSystem;
  }

  public void setPaymentSystem(String paymentSystem) {
    this.paymentSystem = paymentSystem;
  }


  public Payment paymentSystemName(String paymentSystemName) {
    this.paymentSystemName = paymentSystemName;
    return this;
  }

  /**
   * Payment system&#39;s name.
   * @return paymentSystemName
   */
  @javax.annotation.Nonnull
  public String getPaymentSystemName() {
    return paymentSystemName;
  }

  public void setPaymentSystemName(String paymentSystemName) {
    this.paymentSystemName = paymentSystemName;
  }


  public Payment redemptionCode(String redemptionCode) {
    this.redemptionCode = redemptionCode;
    return this;
  }

  /**
   * Code for the customer to use the Gift Card.
   * @return redemptionCode
   */
  @javax.annotation.Nullable
  public String getRedemptionCode() {
    return redemptionCode;
  }

  public void setRedemptionCode(String redemptionCode) {
    this.redemptionCode = redemptionCode;
  }


  public Payment referenceValue(Integer referenceValue) {
    this.referenceValue = referenceValue;
    return this;
  }

  /**
   * Payment&#39;s reference value in cents.
   * @return referenceValue
   */
  @javax.annotation.Nonnull
  public Integer getReferenceValue() {
    return referenceValue;
  }

  public void setReferenceValue(Integer referenceValue) {
    this.referenceValue = referenceValue;
  }


  public Payment tid(String tid) {
    this.tid = tid;
    return this;
  }

  /**
   * Provider&#39;s unique identifier for the transaction.
   * @return tid
   */
  @javax.annotation.Nullable
  public String getTid() {
    return tid;
  }

  public void setTid(String tid) {
    this.tid = tid;
  }


  public Payment url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Payment&#39;s URL.
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Payment value(Integer value) {
    this.value = value;
    return this;
  }

  /**
   * Payment&#39;s final amount in cents.
   * @return value
   */
  @javax.annotation.Nonnull
  public Integer getValue() {
    return value;
  }

  public void setValue(Integer value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payment payment = (Payment) o;
    return Objects.equals(this.accountId, payment.accountId) &&
        Objects.equals(this.bankIssuedInvoiceBarCodeNumber, payment.bankIssuedInvoiceBarCodeNumber) &&
        Objects.equals(this.bankIssuedInvoiceBarCodeType, payment.bankIssuedInvoiceBarCodeType) &&
        Objects.equals(this.bankIssuedInvoiceIdentificationNumber, payment.bankIssuedInvoiceIdentificationNumber) &&
        Objects.equals(this.bankIssuedInvoiceIdentificationNumberFormatted, payment.bankIssuedInvoiceIdentificationNumberFormatted) &&
        Objects.equals(this.billingAddress, payment.billingAddress) &&
        Objects.equals(this.cardHolder, payment.cardHolder) &&
        Objects.equals(this.cardNumber, payment.cardNumber) &&
        Objects.equals(this.connectorResponses, payment.connectorResponses) &&
        Objects.equals(this.cvv2, payment.cvv2) &&
        Objects.equals(this.dueDate, payment.dueDate) &&
        Objects.equals(this.expireMonth, payment.expireMonth) &&
        Objects.equals(this.expireYear, payment.expireYear) &&
        Objects.equals(this.firstDigits, payment.firstDigits) &&
        Objects.equals(this.giftCardAsDiscount, payment.giftCardAsDiscount) &&
        Objects.equals(this.giftCardCaption, payment.giftCardCaption) &&
        Objects.equals(this.giftCardId, payment.giftCardId) &&
        Objects.equals(this.giftCardName, payment.giftCardName) &&
        Objects.equals(this.giftCardProvider, payment.giftCardProvider) &&
        Objects.equals(this.group, payment.group) &&
        Objects.equals(this.id, payment.id) &&
        Objects.equals(this.installments, payment.installments) &&
        Objects.equals(this.koinUrl, payment.koinUrl) &&
        Objects.equals(this.lastDigits, payment.lastDigits) &&
        Objects.equals(this.parentAccountId, payment.parentAccountId) &&
        Objects.equals(this.paymentSystem, payment.paymentSystem) &&
        Objects.equals(this.paymentSystemName, payment.paymentSystemName) &&
        Objects.equals(this.redemptionCode, payment.redemptionCode) &&
        Objects.equals(this.referenceValue, payment.referenceValue) &&
        Objects.equals(this.tid, payment.tid) &&
        Objects.equals(this.url, payment.url) &&
        Objects.equals(this.value, payment.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, bankIssuedInvoiceBarCodeNumber, bankIssuedInvoiceBarCodeType, bankIssuedInvoiceIdentificationNumber, bankIssuedInvoiceIdentificationNumberFormatted, billingAddress, cardHolder, cardNumber, connectorResponses, cvv2, dueDate, expireMonth, expireYear, firstDigits, giftCardAsDiscount, giftCardCaption, giftCardId, giftCardName, giftCardProvider, group, id, installments, koinUrl, lastDigits, parentAccountId, paymentSystem, paymentSystemName, redemptionCode, referenceValue, tid, url, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payment {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    bankIssuedInvoiceBarCodeNumber: ").append(toIndentedString(bankIssuedInvoiceBarCodeNumber)).append("\n");
    sb.append("    bankIssuedInvoiceBarCodeType: ").append(toIndentedString(bankIssuedInvoiceBarCodeType)).append("\n");
    sb.append("    bankIssuedInvoiceIdentificationNumber: ").append(toIndentedString(bankIssuedInvoiceIdentificationNumber)).append("\n");
    sb.append("    bankIssuedInvoiceIdentificationNumberFormatted: ").append(toIndentedString(bankIssuedInvoiceIdentificationNumberFormatted)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    cardHolder: ").append(toIndentedString(cardHolder)).append("\n");
    sb.append("    cardNumber: ").append(toIndentedString(cardNumber)).append("\n");
    sb.append("    connectorResponses: ").append(toIndentedString(connectorResponses)).append("\n");
    sb.append("    cvv2: ").append(toIndentedString(cvv2)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    expireMonth: ").append(toIndentedString(expireMonth)).append("\n");
    sb.append("    expireYear: ").append(toIndentedString(expireYear)).append("\n");
    sb.append("    firstDigits: ").append(toIndentedString(firstDigits)).append("\n");
    sb.append("    giftCardAsDiscount: ").append(toIndentedString(giftCardAsDiscount)).append("\n");
    sb.append("    giftCardCaption: ").append(toIndentedString(giftCardCaption)).append("\n");
    sb.append("    giftCardId: ").append(toIndentedString(giftCardId)).append("\n");
    sb.append("    giftCardName: ").append(toIndentedString(giftCardName)).append("\n");
    sb.append("    giftCardProvider: ").append(toIndentedString(giftCardProvider)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    installments: ").append(toIndentedString(installments)).append("\n");
    sb.append("    koinUrl: ").append(toIndentedString(koinUrl)).append("\n");
    sb.append("    lastDigits: ").append(toIndentedString(lastDigits)).append("\n");
    sb.append("    parentAccountId: ").append(toIndentedString(parentAccountId)).append("\n");
    sb.append("    paymentSystem: ").append(toIndentedString(paymentSystem)).append("\n");
    sb.append("    paymentSystemName: ").append(toIndentedString(paymentSystemName)).append("\n");
    sb.append("    redemptionCode: ").append(toIndentedString(redemptionCode)).append("\n");
    sb.append("    referenceValue: ").append(toIndentedString(referenceValue)).append("\n");
    sb.append("    tid: ").append(toIndentedString(tid)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("bankIssuedInvoiceBarCodeNumber");
    openapiFields.add("bankIssuedInvoiceBarCodeType");
    openapiFields.add("bankIssuedInvoiceIdentificationNumber");
    openapiFields.add("bankIssuedInvoiceIdentificationNumberFormatted");
    openapiFields.add("billingAddress");
    openapiFields.add("cardHolder");
    openapiFields.add("cardNumber");
    openapiFields.add("connectorResponses");
    openapiFields.add("cvv2");
    openapiFields.add("dueDate");
    openapiFields.add("expireMonth");
    openapiFields.add("expireYear");
    openapiFields.add("firstDigits");
    openapiFields.add("giftCardAsDiscount");
    openapiFields.add("giftCardCaption");
    openapiFields.add("giftCardId");
    openapiFields.add("giftCardName");
    openapiFields.add("giftCardProvider");
    openapiFields.add("group");
    openapiFields.add("id");
    openapiFields.add("installments");
    openapiFields.add("koinUrl");
    openapiFields.add("lastDigits");
    openapiFields.add("parentAccountId");
    openapiFields.add("paymentSystem");
    openapiFields.add("paymentSystemName");
    openapiFields.add("redemptionCode");
    openapiFields.add("referenceValue");
    openapiFields.add("tid");
    openapiFields.add("url");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("bankIssuedInvoiceBarCodeNumber");
    openapiRequiredFields.add("bankIssuedInvoiceBarCodeType");
    openapiRequiredFields.add("bankIssuedInvoiceIdentificationNumber");
    openapiRequiredFields.add("bankIssuedInvoiceIdentificationNumberFormatted");
    openapiRequiredFields.add("billingAddress");
    openapiRequiredFields.add("cardHolder");
    openapiRequiredFields.add("cardNumber");
    openapiRequiredFields.add("connectorResponses");
    openapiRequiredFields.add("cvv2");
    openapiRequiredFields.add("dueDate");
    openapiRequiredFields.add("expireMonth");
    openapiRequiredFields.add("expireYear");
    openapiRequiredFields.add("firstDigits");
    openapiRequiredFields.add("giftCardAsDiscount");
    openapiRequiredFields.add("giftCardCaption");
    openapiRequiredFields.add("giftCardId");
    openapiRequiredFields.add("giftCardName");
    openapiRequiredFields.add("giftCardProvider");
    openapiRequiredFields.add("group");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("installments");
    openapiRequiredFields.add("koinUrl");
    openapiRequiredFields.add("lastDigits");
    openapiRequiredFields.add("parentAccountId");
    openapiRequiredFields.add("paymentSystem");
    openapiRequiredFields.add("paymentSystemName");
    openapiRequiredFields.add("redemptionCode");
    openapiRequiredFields.add("referenceValue");
    openapiRequiredFields.add("tid");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Payment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Payment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Payment is not found in the empty JSON string", Payment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Payment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Payment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Payment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (!jsonObj.get("bankIssuedInvoiceBarCodeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankIssuedInvoiceBarCodeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankIssuedInvoiceBarCodeNumber").toString()));
      }
      if (!jsonObj.get("bankIssuedInvoiceBarCodeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankIssuedInvoiceBarCodeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankIssuedInvoiceBarCodeType").toString()));
      }
      if (!jsonObj.get("bankIssuedInvoiceIdentificationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankIssuedInvoiceIdentificationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankIssuedInvoiceIdentificationNumber").toString()));
      }
      if (!jsonObj.get("bankIssuedInvoiceIdentificationNumberFormatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankIssuedInvoiceIdentificationNumberFormatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankIssuedInvoiceIdentificationNumberFormatted").toString()));
      }
      if ((jsonObj.get("cardHolder") != null && !jsonObj.get("cardHolder").isJsonNull()) && !jsonObj.get("cardHolder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardHolder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardHolder").toString()));
      }
      if ((jsonObj.get("cardNumber") != null && !jsonObj.get("cardNumber").isJsonNull()) && !jsonObj.get("cardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNumber").toString()));
      }
      // validate the required field `connectorResponses`
      PaymentConnectorResponses.validateJsonElement(jsonObj.get("connectorResponses"));
      if ((jsonObj.get("cvv2") != null && !jsonObj.get("cvv2").isJsonNull()) && !jsonObj.get("cvv2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvv2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvv2").toString()));
      }
      if (!jsonObj.get("dueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dueDate").toString()));
      }
      if ((jsonObj.get("expireMonth") != null && !jsonObj.get("expireMonth").isJsonNull()) && !jsonObj.get("expireMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireMonth").toString()));
      }
      if ((jsonObj.get("expireYear") != null && !jsonObj.get("expireYear").isJsonNull()) && !jsonObj.get("expireYear").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireYear` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireYear").toString()));
      }
      if ((jsonObj.get("firstDigits") != null && !jsonObj.get("firstDigits").isJsonNull()) && !jsonObj.get("firstDigits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstDigits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstDigits").toString()));
      }
      if ((jsonObj.get("giftCardCaption") != null && !jsonObj.get("giftCardCaption").isJsonNull()) && !jsonObj.get("giftCardCaption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `giftCardCaption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("giftCardCaption").toString()));
      }
      if ((jsonObj.get("giftCardId") != null && !jsonObj.get("giftCardId").isJsonNull()) && !jsonObj.get("giftCardId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `giftCardId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("giftCardId").toString()));
      }
      if ((jsonObj.get("giftCardName") != null && !jsonObj.get("giftCardName").isJsonNull()) && !jsonObj.get("giftCardName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `giftCardName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("giftCardName").toString()));
      }
      if (!jsonObj.get("giftCardProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `giftCardProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("giftCardProvider").toString()));
      }
      if (!jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("koinUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `koinUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("koinUrl").toString()));
      }
      if ((jsonObj.get("lastDigits") != null && !jsonObj.get("lastDigits").isJsonNull()) && !jsonObj.get("lastDigits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastDigits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastDigits").toString()));
      }
      if (!jsonObj.get("parentAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentAccountId").toString()));
      }
      if (!jsonObj.get("paymentSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentSystem").toString()));
      }
      if (!jsonObj.get("paymentSystemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentSystemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentSystemName").toString()));
      }
      if ((jsonObj.get("redemptionCode") != null && !jsonObj.get("redemptionCode").isJsonNull()) && !jsonObj.get("redemptionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redemptionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redemptionCode").toString()));
      }
      if ((jsonObj.get("tid") != null && !jsonObj.get("tid").isJsonNull()) && !jsonObj.get("tid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tid").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Payment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Payment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Payment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Payment.class));

       return (TypeAdapter<T>) new TypeAdapter<Payment>() {
           @Override
           public void write(JsonWriter out, Payment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Payment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Payment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Payment
   * @throws IOException if the JSON string is invalid with respect to Payment
   */
  public static Payment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Payment.class);
  }

  /**
   * Convert an instance of Payment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

