/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Item1;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvoiceNotificationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoiceNotificationRequest {
  public static final String SERIALIZED_NAME_COURIER = "courier";
  @SerializedName(SERIALIZED_NAME_COURIER)
  private String courier;

  public static final String SERIALIZED_NAME_DISPATCHED_DATE = "dispatchedDate";
  @SerializedName(SERIALIZED_NAME_DISPATCHED_DATE)
  private String dispatchedDate = "2019-02-08T13:16:13.4617653+00:00";

  public static final String SERIALIZED_NAME_EMBEDDED_INVOICE = "embeddedInvoice";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_INVOICE)
  private String embeddedInvoice = "<NFe>  <infNFe Id=\"NFe34687999999090910270550010000000015180000000000\" versao=\"1.10\">  <ide>  <cUF>37</cUF>  <cNF>000005177</cNF>  <natOp>Venda a vista</natOp>  <indPag>0</indPag>  <mod>55</mod>  <serie>1</serie>  <nNF>1</nNF>  <dEmi>2018-07-06</dEmi>  <dSaiEnt>2018-07-06</dSaiEnt>  <tpNF>0</tpNF>  <cMunFG>79950308</cMunFG>  <tpImp>1</tpImp>  <tpEmis>1</tpEmis>  <cDV>3</cDV>  <tpAmb>2</tpAmb>  <finNFe>1</finNFe>  <procEmi>0</procEmi>  <verProc>NF-eletronica.com</verProc>  </ide>  <emit>  <CNPJ>99999090998760</CNPJ>  <xNome>NF-e Associacao NF-e</xNome>  <xFant>NF-e</xFant>  <enderEmit>  <xLgr>Rua Central</xLgr>  <nro>100</nro>  <xCpl>Fundos</xCpl>  <xBairro>Distrito Industrial</xBairro>  <cMun>0000000</cMun>  <xMun>Munic√≠pio</xMun>  <UF>SP</UF>  <CEP>0000000</CEP>  <cPais>1058</cPais>  <xPais>Brasil</xPais>  <fone>1733021717</fone>  </enderEmit>  <IE>123456789012</IE>  </emit>  <dest>  <CNPJ>00000000000000</CNPJ>  <xNome>DISTRIBUIDORA DE AGUAS MINERAIS</xNome>  <enderDest>  <xLgr>AV DAS FONTES</xLgr>  <nro>1777</nro>  <xCpl>1001 ANDAR</xCpl>  <xBairro>PARQUE</xBairro>  <cMun>0000000</cMun>  <xMun>Sao Paulo</xMun>  <UF>SP</UF>  <CEP>00000000</CEP>  <cPais>1058</cPais>  <xPais>BRASIL</xPais>  <fone>3900000000</fone>  </enderDest>  <IE> </IE>  </dest>  <retirada>  <CNPJ>000000000004</CNPJ>  <xLgr>AV PAULISTA</xLgr>  <nro>12345</nro>  <xCpl>TERREO</xCpl>  <xBairro>CERQUEIRA CESAR</xBairro>  <cMun>0000000</cMun>  <xMun>SAO PAULO</xMun>  <UF>SP</UF>  </retirada>  <entrega>  <CNPJ>00000000299000194</CNPJ>  <xLgr>AV FARIA LIMA</xLgr>  <nro>154400</nro>  <xCpl>156 ANDAR</xCpl>  <xBairro>PINHEIROS</xBairro>  <cMun>0000308</cMun>  <xMun>SAO PAULO</xMun>  <UF>SP</UF>  </entrega>  <det nItem=\"1\">  <prod>  <cProd>00001</cProd>  <cEAN/>  <xProd>Agua Mineral</xProd>  <CFOP>5101</CFOP>  <uCom>dz</uCom>  <qCom>1000000.0000</qCom>  <vUnCom>1</vUnCom>  <vProd>10000000.00</vProd>  <cEANTrib/>  <uTrib>und</uTrib>  <qTrib>12000000.0000</qTrib>  <vUnTrib>1</vUnTrib>  </prod>  <imposto>  <ICMS>  <ICMS00>  <orig>0</orig>  <CST>00</CST>  <modBC>0</modBC>  <vBC>10000000.00</vBC>  <pICMS>18.00</pICMS>  <vICMS>1800000.00</vICMS>  </ICMS00>  </ICMS>  <PIS>  <PISAliq>  <CST>01</CST>  <vBC>10000000.00</vBC>  <pPIS>0.65</pPIS>  <vPIS>65000</vPIS>  </PISAliq>  </PIS>  <COFINS>  <COFINSAliq>  <CST>01</CST>  <vBC>10000000.00</vBC>  <pCOFINS>2.00</pCOFINS>  <vCOFINS>200000.00</vCOFINS>  </COFINSAliq>  </COFINS>  </imposto>  </det>  <det nItem=\"2\">  <prod>  <cProd>00002</cProd>  <cEAN/>  <xProd>Agua Mineral</xProd>  <CFOP>5101</CFOP>  <uCom>pack</uCom>  <qCom>5000000.0000</qCom>  <vUnCom>2</vUnCom>  <vProd>10000000.00</vProd>  <cEANTrib/>  <uTrib>und</uTrib>  <qTrib>3000000.0000</qTrib>  <vUnTrib>0.3333</vUnTrib>  </prod>  <imposto>  <ICMS>  <ICMS00>  <orig>0</orig>  <CST>00</CST>  <modBC>0</modBC>  <vBC>10000000.00</vBC>  <pICMS>18.00</pICMS>  <vICMS>1800000.00</vICMS>  </ICMS00>  </ICMS>  <PIS>  <PISAliq>  <CST>01</CST>  <vBC>10000000.00</vBC>  <pPIS>0.65</pPIS>  <vPIS>65000</vPIS>  </PISAliq>  </PIS>  <COFINS>  <COFINSAliq>  <CST>01</CST>  <vBC>10000000.00</vBC>  <pCOFINS>2.00</pCOFINS>  <vCOFINS>200000.00</vCOFINS>  </COFINSAliq>  </COFINS>  </imposto>  </det>  <total>  <ICMSTot>  <vBC>20000000.00</vBC>  <vICMS>18.00</vICMS>  <vBCST>0</vBCST>  <vST>0</vST>  <vProd>20000000.00</vProd>  <vFrete>0</vFrete>  <vSeg>0</vSeg>  <vDesc>0</vDesc>  <vII>0</vII>  <vIPI>0</vIPI>  <vPIS>130000.00</vPIS>  <vCOFINS>400000.00</vCOFINS>  <vOutro>0</vOutro>  <vNF>20000000.00</vNF>  </ICMSTot>  </total>  <transp>  <modFrete>0</modFrete>  <transporta>  <CNPJ>00000000000000</CNPJ>  <xNome>Distribuidora de Bebidas Fazenda de SP Ltda.</xNome>  <IE>00000000999119</IE>  <xEnder>Rua Central 100 - Fundos - Distrito Industrial</xEnder>  <xMun>SAO PAULO</xMun>  <UF>SP</UF>  </transporta>  <veicTransp>  <placa>BXI1717</placa>  <UF>SP</UF>  <RNTC>123456789</RNTC>  </veicTransp>  <reboque>  <placa>UUU0000</placa>  <UF>SP</UF>  <RNTC>123456789</RNTC>  </reboque>  <vol>  <qVol>10000</qVol>  <esp>CAIXA</esp>  <marca>LINDOYA</marca>  <nVol>500</nVol>  <pesoL>1000000000.000</pesoL>  <pesoB>1200000000.000</pesoB>  <lacres>  <nLacre>XYZ10231486</nLacre>  </lacres>  </vol>  </transp>  <infAdic>  <infAdFisco>Nota Fiscal de exemplo NF-eletronica.com</infAdFisco>  </infAdic>  </infNFe>  <Signature>  <SignedInfo>  <CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-0321120010315\"/>  <SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/>  <Reference URI=\"#NFe3508059999977777777705500100000000000000000\">  <Transforms>  <Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/>  <Transform Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-66666615\"/>  </Transforms>  <DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/>  <DigestValue>xFzhgdgnhjSD1e9uqe04lnoHT4ZzLSY=</DigestValue>  </Reference>  </SignedInfo>  <SignatureValue>  Iz5Z3PLQbzZt9jnBtr6xsmHZMOu/3plXG9xxfFjRCQYGnD1rjlhzBGrqt026Ca2VHHM/bHNepi6FuFkAi595GScKVuHREUotzifE2OIjgavvTOrMwbXG7+0LYgkwPFiPCao2S33UpZe7MneaxcmKQGKQZw1fP8fsWmaQ4cczZT8=  </SignatureValue>  <KeyInfo>  <X509Data>  <X509Certificate>  MIIEuzCCA6OgAwIBAgIDMTMxMA0GasfFSDAGQUAMIGSMQswCQYDVQQGEwJCUjELMAkGA1UECBMCUlMxFTATBgNVBAcTDFBvcnRvIEFsZWdyZTEdMBsGA1UEChMUVGVzdGUgUHJvamV0byBORmUgUlMxHTAbBgNVBAsTFFRlc3RlIFByb2pldG8gTkZlIFJTMSEwHwYDVQQDExhORmUgLSBBQyBJbnRlcm1lZGlhcmlhIDEwHhcNMDgwNDI4MDkwMTAyWhcNMDkwNDMwMjM1OTU5WjCBnjELMAkGA1UECBMCUlMxHTAfvw4567DRhg76FByb2pldG8gTkZlIFJTMR0wGwYDVQQKExRUZXN0ZSBQcm9qZXRvIE5GZSBSUzEVMBMGA1UEBxMMUE9SVE8gQUxFR1JFMQswCQYDVQQGEwJCUjEtMCsGA1UEAxMkTkZlIC0gQXNzb2NpYWNhbyBORi1lOjk5OTk5MDkwOTEwMjcwMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDh6RRv0bj4RYX+tDQrZRb5opa77LBVVs+6LphIfSF3TSWPfnKh0+xLlBFdmnB5YGgbbW9Uon6pZQTfaC8jZhRhI5eFRRofY/Ugoeo0NGt6PcIQNZQd6lLQ/ASd1qWwjqJoEa7udriKjy3h351Mf1bng1VxS1urqC3Dn39ZWIEwQIDAQABo4IBjjCCAYowIgYDVR0jAQEABBgwFoAUPT5TqhNWAm+ZpcVsvB7malDBjEQwDwYDVR0TAQH/BAUwAwEBADAPBgNVHQ8BAf8EBQMDAOAAMAwGA1UdIAEBAAQCMAAwgbwGA1UdEQEBAASBsTCBrqA4BgVgTAEDBKAvBC0wNzA4MTk1MTE1MTk0NTMxMDg3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgHQYFYEwBAwKgFAQSRmVybmFuZG8gQ2FudG8gQWx0oBkGBWBMAQMDoBAEDjk5OTk5MDkwOTEwMjcwoBcGBWBMAQMHoA4EDDAwMDAwMDAwMDAwMIEfZmVybmFuZG8tYWx0QHByb2NlcmdzLnJzLmdvdi5icjAgBgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwQwUwYDVR0fAQEABEkwRzBFoEOgQYY/aHR0cDovL25mZWNlcnRpZmljYWRvLnNlZmF6LnJzLmdvdi5ici9MQ1IvQUNJbnRlcm1lZGlhcmlhMzguY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCNPpaZ3Byu3/70nObXE8NiM53j1ddIFXsb+v2ghCVd4ffExv3hYc+/a3lfgV8H/WfQsdSCTzS2cHrd4Aasr/eXfclVDmf2hcWz+R7iysOHuT6B6r+DvV3JcMdJJCDdynR5REa+zViMnVZo1G3KuceQ7/y5X3WFNVq4kwHvonJ9oExsWyw8rTwUK5bsjz0A2yEwXkmkJIngnF41sP31+9jCImiqkXcmsesFhxzX7iurAQAQCZOm7iwMWxQKcAjXCZrgSZWRQy6mU224sX3HTArHahmLJ9Iw+WYAua5qBJsiN6PC7v5tfhdsgGD46DHMnOecxvkkPolDUyBa7d7xwgm  </X509Certificate>  </X509Data>  </KeyInfo>  </Signature>  </NFe>";

  public static final String SERIALIZED_NAME_INVOICE_KEY = "invoiceKey";
  @SerializedName(SERIALIZED_NAME_INVOICE_KEY)
  private String invoiceKey;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoiceNumber";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_INVOICE_URL = "invoiceUrl";
  @SerializedName(SERIALIZED_NAME_INVOICE_URL)
  private String invoiceUrl;

  public static final String SERIALIZED_NAME_INVOICE_VALUE = "invoiceValue";
  @SerializedName(SERIALIZED_NAME_INVOICE_VALUE)
  private String invoiceValue = "2499";

  public static final String SERIALIZED_NAME_ISSUANCE_DATE = "issuanceDate";
  @SerializedName(SERIALIZED_NAME_ISSUANCE_DATE)
  private String issuanceDate;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Item1> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACKING_NUMBER = "trackingNumber";
  @SerializedName(SERIALIZED_NAME_TRACKING_NUMBER)
  private String trackingNumber;

  public static final String SERIALIZED_NAME_TRACKING_URL = "trackingUrl";
  @SerializedName(SERIALIZED_NAME_TRACKING_URL)
  private String trackingUrl;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public InvoiceNotificationRequest() {
  }

  public InvoiceNotificationRequest courier(String courier) {
    this.courier = courier;
    return this;
  }

  /**
   * The name of the carrier responsible for delivering the order. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (&#x60;\&quot;\&quot;&#x60;).*
   * @return courier
   */
  @javax.annotation.Nullable
  public String getCourier() {
    return courier;
  }

  public void setCourier(String courier) {
    this.courier = courier;
  }


  public InvoiceNotificationRequest dispatchedDate(String dispatchedDate) {
    this.dispatchedDate = dispatchedDate;
    return this;
  }

  /**
   * Order dispatch date. May be &#x60;null&#x60;.
   * @return dispatchedDate
   */
  @javax.annotation.Nullable
  public String getDispatchedDate() {
    return dispatchedDate;
  }

  public void setDispatchedDate(String dispatchedDate) {
    this.dispatchedDate = dispatchedDate;
  }


  public InvoiceNotificationRequest embeddedInvoice(String embeddedInvoice) {
    this.embeddedInvoice = embeddedInvoice;
    return this;
  }

  /**
   * XML text of the invoice, not the URL. This field is very important for external marketplace integrations such as Mercado Libre.
   * @return embeddedInvoice
   */
  @javax.annotation.Nullable
  public String getEmbeddedInvoice() {
    return embeddedInvoice;
  }

  public void setEmbeddedInvoice(String embeddedInvoice) {
    this.embeddedInvoice = embeddedInvoice;
  }


  public InvoiceNotificationRequest invoiceKey(String invoiceKey) {
    this.invoiceKey = invoiceKey;
    return this;
  }

  /**
   * 
   * @return invoiceKey
   */
  @javax.annotation.Nullable
  public String getInvoiceKey() {
    return invoiceKey;
  }

  public void setInvoiceKey(String invoiceKey) {
    this.invoiceKey = invoiceKey;
  }


  public InvoiceNotificationRequest invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * Number that identifies the invoice.
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  public InvoiceNotificationRequest invoiceUrl(String invoiceUrl) {
    this.invoiceUrl = invoiceUrl;
    return this;
  }

  /**
   * URL of the invoice. Can be used to send the URL of an XML file, for example, which is useful for some integrations.
   * @return invoiceUrl
   */
  @javax.annotation.Nullable
  public String getInvoiceUrl() {
    return invoiceUrl;
  }

  public void setInvoiceUrl(String invoiceUrl) {
    this.invoiceUrl = invoiceUrl;
  }


  public InvoiceNotificationRequest invoiceValue(String invoiceValue) {
    this.invoiceValue = invoiceValue;
    return this;
  }

  /**
   * Total amount being invoiced in cents. Do not use any decimal separator. For instance, &#x60;$24.99&#x60; should be represented as &#x60;2499&#x60;.
   * @return invoiceValue
   */
  @javax.annotation.Nonnull
  public String getInvoiceValue() {
    return invoiceValue;
  }

  public void setInvoiceValue(String invoiceValue) {
    this.invoiceValue = invoiceValue;
  }


  public InvoiceNotificationRequest issuanceDate(String issuanceDate) {
    this.issuanceDate = issuanceDate;
    return this;
  }

  /**
   * Issuance date of the invoice. You must add date and time in this field.
   * @return issuanceDate
   */
  @javax.annotation.Nonnull
  public String getIssuanceDate() {
    return issuanceDate;
  }

  public void setIssuanceDate(String issuanceDate) {
    this.issuanceDate = issuanceDate;
  }


  public InvoiceNotificationRequest items(List<Item1> items) {
    this.items = items;
    return this;
  }

  public InvoiceNotificationRequest addItemsItem(Item1 itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Array containing the SKUs that are being invoiced.
   * @return items
   */
  @javax.annotation.Nonnull
  public List<Item1> getItems() {
    return items;
  }

  public void setItems(List<Item1> items) {
    this.items = items;
  }


  public InvoiceNotificationRequest trackingNumber(String trackingNumber) {
    this.trackingNumber = trackingNumber;
    return this;
  }

  /**
   * The number code that identifies the order tracking. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (&#x60;\&quot;\&quot;&#x60;).*
   * @return trackingNumber
   */
  @javax.annotation.Nullable
  public String getTrackingNumber() {
    return trackingNumber;
  }

  public void setTrackingNumber(String trackingNumber) {
    this.trackingNumber = trackingNumber;
  }


  public InvoiceNotificationRequest trackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
    return this;
  }

  /**
   * The URL used to track the order. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (&#x60;\&quot;\&quot;&#x60;).*
   * @return trackingUrl
   */
  @javax.annotation.Nullable
  public String getTrackingUrl() {
    return trackingUrl;
  }

  public void setTrackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
  }


  public InvoiceNotificationRequest type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of invoice. There are two possible values: **Output** and **Input**. The Output type should be used when the invoice you are sending is a selling invoice. The Input type should be used when you send a return invoice.
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceNotificationRequest invoiceNotificationRequest = (InvoiceNotificationRequest) o;
    return Objects.equals(this.courier, invoiceNotificationRequest.courier) &&
        Objects.equals(this.dispatchedDate, invoiceNotificationRequest.dispatchedDate) &&
        Objects.equals(this.embeddedInvoice, invoiceNotificationRequest.embeddedInvoice) &&
        Objects.equals(this.invoiceKey, invoiceNotificationRequest.invoiceKey) &&
        Objects.equals(this.invoiceNumber, invoiceNotificationRequest.invoiceNumber) &&
        Objects.equals(this.invoiceUrl, invoiceNotificationRequest.invoiceUrl) &&
        Objects.equals(this.invoiceValue, invoiceNotificationRequest.invoiceValue) &&
        Objects.equals(this.issuanceDate, invoiceNotificationRequest.issuanceDate) &&
        Objects.equals(this.items, invoiceNotificationRequest.items) &&
        Objects.equals(this.trackingNumber, invoiceNotificationRequest.trackingNumber) &&
        Objects.equals(this.trackingUrl, invoiceNotificationRequest.trackingUrl) &&
        Objects.equals(this.type, invoiceNotificationRequest.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(courier, dispatchedDate, embeddedInvoice, invoiceKey, invoiceNumber, invoiceUrl, invoiceValue, issuanceDate, items, trackingNumber, trackingUrl, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceNotificationRequest {\n");
    sb.append("    courier: ").append(toIndentedString(courier)).append("\n");
    sb.append("    dispatchedDate: ").append(toIndentedString(dispatchedDate)).append("\n");
    sb.append("    embeddedInvoice: ").append(toIndentedString(embeddedInvoice)).append("\n");
    sb.append("    invoiceKey: ").append(toIndentedString(invoiceKey)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    invoiceUrl: ").append(toIndentedString(invoiceUrl)).append("\n");
    sb.append("    invoiceValue: ").append(toIndentedString(invoiceValue)).append("\n");
    sb.append("    issuanceDate: ").append(toIndentedString(issuanceDate)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    trackingNumber: ").append(toIndentedString(trackingNumber)).append("\n");
    sb.append("    trackingUrl: ").append(toIndentedString(trackingUrl)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("courier");
    openapiFields.add("dispatchedDate");
    openapiFields.add("embeddedInvoice");
    openapiFields.add("invoiceKey");
    openapiFields.add("invoiceNumber");
    openapiFields.add("invoiceUrl");
    openapiFields.add("invoiceValue");
    openapiFields.add("issuanceDate");
    openapiFields.add("items");
    openapiFields.add("trackingNumber");
    openapiFields.add("trackingUrl");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("invoiceNumber");
    openapiRequiredFields.add("invoiceValue");
    openapiRequiredFields.add("issuanceDate");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceNotificationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceNotificationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceNotificationRequest is not found in the empty JSON string", InvoiceNotificationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceNotificationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceNotificationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InvoiceNotificationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("courier") != null && !jsonObj.get("courier").isJsonNull()) && !jsonObj.get("courier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courier").toString()));
      }
      if ((jsonObj.get("dispatchedDate") != null && !jsonObj.get("dispatchedDate").isJsonNull()) && !jsonObj.get("dispatchedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispatchedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispatchedDate").toString()));
      }
      if ((jsonObj.get("embeddedInvoice") != null && !jsonObj.get("embeddedInvoice").isJsonNull()) && !jsonObj.get("embeddedInvoice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embeddedInvoice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embeddedInvoice").toString()));
      }
      if ((jsonObj.get("invoiceKey") != null && !jsonObj.get("invoiceKey").isJsonNull()) && !jsonObj.get("invoiceKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceKey").toString()));
      }
      if ((jsonObj.get("invoiceNumber") != null && !jsonObj.get("invoiceNumber").isJsonNull()) && !jsonObj.get("invoiceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceNumber").toString()));
      }
      if ((jsonObj.get("invoiceUrl") != null && !jsonObj.get("invoiceUrl").isJsonNull()) && !jsonObj.get("invoiceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceUrl").toString()));
      }
      if (!jsonObj.get("invoiceValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceValue").toString()));
      }
      if (!jsonObj.get("issuanceDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuanceDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuanceDate").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        Item1.validateJsonElement(jsonArrayitems.get(i));
      };
      if ((jsonObj.get("trackingNumber") != null && !jsonObj.get("trackingNumber").isJsonNull()) && !jsonObj.get("trackingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingNumber").toString()));
      }
      if ((jsonObj.get("trackingUrl") != null && !jsonObj.get("trackingUrl").isJsonNull()) && !jsonObj.get("trackingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingUrl").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceNotificationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceNotificationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceNotificationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceNotificationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceNotificationRequest>() {
           @Override
           public void write(JsonWriter out, InvoiceNotificationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceNotificationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceNotificationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceNotificationRequest
   * @throws IOException if the JSON string is invalid with respect to InvoiceNotificationRequest
   */
  public static InvoiceNotificationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceNotificationRequest.class);
  }

  /**
   * Convert an instance of InvoiceNotificationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

