/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BRL1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BRL1 {
  public static final String SERIALIZED_NAME_COUNT = "Count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_FACETS = "Facets";
  @SerializedName(SERIALIZED_NAME_FACETS)
  private String facets;

  public static final String SERIALIZED_NAME_MAX = "Max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Integer max;

  public static final String SERIALIZED_NAME_MEAN = "Mean";
  @SerializedName(SERIALIZED_NAME_MEAN)
  private BigDecimal mean;

  public static final String SERIALIZED_NAME_MIN = "Min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Integer min;

  public static final String SERIALIZED_NAME_MISSING = "Missing";
  @SerializedName(SERIALIZED_NAME_MISSING)
  private Integer missing;

  public static final String SERIALIZED_NAME_STD_DEV = "StdDev";
  @SerializedName(SERIALIZED_NAME_STD_DEV)
  private BigDecimal stdDev;

  public static final String SERIALIZED_NAME_SUM = "Sum";
  @SerializedName(SERIALIZED_NAME_SUM)
  private Integer sum;

  public static final String SERIALIZED_NAME_SUM_OF_SQUARES = "SumOfSquares";
  @SerializedName(SERIALIZED_NAME_SUM_OF_SQUARES)
  private Integer sumOfSquares;

  public BRL1() {
  }

  public BRL1 count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nonnull
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public BRL1 facets(String facets) {
    this.facets = facets;
    return this;
  }

  /**
   * Get facets
   * @return facets
   */
  @javax.annotation.Nullable
  public String getFacets() {
    return facets;
  }

  public void setFacets(String facets) {
    this.facets = facets;
  }


  public BRL1 max(Integer max) {
    this.max = max;
    return this;
  }

  /**
   * Get max
   * @return max
   */
  @javax.annotation.Nonnull
  public Integer getMax() {
    return max;
  }

  public void setMax(Integer max) {
    this.max = max;
  }


  public BRL1 mean(BigDecimal mean) {
    this.mean = mean;
    return this;
  }

  /**
   * Get mean
   * @return mean
   */
  @javax.annotation.Nonnull
  public BigDecimal getMean() {
    return mean;
  }

  public void setMean(BigDecimal mean) {
    this.mean = mean;
  }


  public BRL1 min(Integer min) {
    this.min = min;
    return this;
  }

  /**
   * Get min
   * @return min
   */
  @javax.annotation.Nonnull
  public Integer getMin() {
    return min;
  }

  public void setMin(Integer min) {
    this.min = min;
  }


  public BRL1 missing(Integer missing) {
    this.missing = missing;
    return this;
  }

  /**
   * Get missing
   * @return missing
   */
  @javax.annotation.Nonnull
  public Integer getMissing() {
    return missing;
  }

  public void setMissing(Integer missing) {
    this.missing = missing;
  }


  public BRL1 stdDev(BigDecimal stdDev) {
    this.stdDev = stdDev;
    return this;
  }

  /**
   * Get stdDev
   * @return stdDev
   */
  @javax.annotation.Nonnull
  public BigDecimal getStdDev() {
    return stdDev;
  }

  public void setStdDev(BigDecimal stdDev) {
    this.stdDev = stdDev;
  }


  public BRL1 sum(Integer sum) {
    this.sum = sum;
    return this;
  }

  /**
   * Get sum
   * @return sum
   */
  @javax.annotation.Nonnull
  public Integer getSum() {
    return sum;
  }

  public void setSum(Integer sum) {
    this.sum = sum;
  }


  public BRL1 sumOfSquares(Integer sumOfSquares) {
    this.sumOfSquares = sumOfSquares;
    return this;
  }

  /**
   * Get sumOfSquares
   * @return sumOfSquares
   */
  @javax.annotation.Nonnull
  public Integer getSumOfSquares() {
    return sumOfSquares;
  }

  public void setSumOfSquares(Integer sumOfSquares) {
    this.sumOfSquares = sumOfSquares;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BRL1 BRL1 = (BRL1) o;
    return Objects.equals(this.count, BRL1.count) &&
        Objects.equals(this.facets, BRL1.facets) &&
        Objects.equals(this.max, BRL1.max) &&
        Objects.equals(this.mean, BRL1.mean) &&
        Objects.equals(this.min, BRL1.min) &&
        Objects.equals(this.missing, BRL1.missing) &&
        Objects.equals(this.stdDev, BRL1.stdDev) &&
        Objects.equals(this.sum, BRL1.sum) &&
        Objects.equals(this.sumOfSquares, BRL1.sumOfSquares);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, facets, max, mean, min, missing, stdDev, sum, sumOfSquares);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BRL1 {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    facets: ").append(toIndentedString(facets)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    mean: ").append(toIndentedString(mean)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    missing: ").append(toIndentedString(missing)).append("\n");
    sb.append("    stdDev: ").append(toIndentedString(stdDev)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("    sumOfSquares: ").append(toIndentedString(sumOfSquares)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Count");
    openapiFields.add("Facets");
    openapiFields.add("Max");
    openapiFields.add("Mean");
    openapiFields.add("Min");
    openapiFields.add("Missing");
    openapiFields.add("StdDev");
    openapiFields.add("Sum");
    openapiFields.add("SumOfSquares");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Count");
    openapiRequiredFields.add("Facets");
    openapiRequiredFields.add("Max");
    openapiRequiredFields.add("Mean");
    openapiRequiredFields.add("Min");
    openapiRequiredFields.add("Missing");
    openapiRequiredFields.add("StdDev");
    openapiRequiredFields.add("Sum");
    openapiRequiredFields.add("SumOfSquares");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BRL1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BRL1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BRL1 is not found in the empty JSON string", BRL1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BRL1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BRL1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BRL1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Facets") != null && !jsonObj.get("Facets").isJsonNull()) && !jsonObj.get("Facets").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Facets` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Facets").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BRL1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BRL1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BRL1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BRL1.class));

       return (TypeAdapter<T>) new TypeAdapter<BRL1>() {
           @Override
           public void write(JsonWriter out, BRL1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BRL1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BRL1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BRL1
   * @throws IOException if the JSON string is invalid with respect to BRL1
   */
  public static BRL1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BRL1.class);
  }

  /**
   * Convert an instance of BRL1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

