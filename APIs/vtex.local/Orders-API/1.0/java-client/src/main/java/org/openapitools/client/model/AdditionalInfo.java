/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Dimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional information about the item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdditionalInfo {
  public static final String SERIALIZED_NAME_BRAND_ID = "brandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private String brandId;

  public static final String SERIALIZED_NAME_BRAND_NAME = "brandName";
  @SerializedName(SERIALIZED_NAME_BRAND_NAME)
  private String brandName;

  public static final String SERIALIZED_NAME_CATEGORIES_IDS = "categoriesIds";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_IDS)
  private String categoriesIds;

  public static final String SERIALIZED_NAME_COMMERCIAL_CONDITION_ID = "commercialConditionId";
  @SerializedName(SERIALIZED_NAME_COMMERCIAL_CONDITION_ID)
  private String commercialConditionId;

  public static final String SERIALIZED_NAME_DIMENSION = "dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private Dimension dimension;

  public static final String SERIALIZED_NAME_OFFERING_INFO = "offeringInfo";
  @SerializedName(SERIALIZED_NAME_OFFERING_INFO)
  private String offeringInfo;

  public static final String SERIALIZED_NAME_OFFERING_TYPE = "offeringType";
  @SerializedName(SERIALIZED_NAME_OFFERING_TYPE)
  private String offeringType;

  public static final String SERIALIZED_NAME_OFFERING_TYPE_ID = "offeringTypeId";
  @SerializedName(SERIALIZED_NAME_OFFERING_TYPE_ID)
  private String offeringTypeId;

  public static final String SERIALIZED_NAME_PRODUCT_CLUSTER_ID = "productClusterId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CLUSTER_ID)
  private String productClusterId;

  public AdditionalInfo() {
  }

  public AdditionalInfo brandId(String brandId) {
    this.brandId = brandId;
    return this;
  }

  /**
   * Item&#39;s brand ID.
   * @return brandId
   */
  @javax.annotation.Nonnull
  public String getBrandId() {
    return brandId;
  }

  public void setBrandId(String brandId) {
    this.brandId = brandId;
  }


  public AdditionalInfo brandName(String brandName) {
    this.brandName = brandName;
    return this;
  }

  /**
   * Item&#39;s brand name.
   * @return brandName
   */
  @javax.annotation.Nonnull
  public String getBrandName() {
    return brandName;
  }

  public void setBrandName(String brandName) {
    this.brandName = brandName;
  }


  public AdditionalInfo categoriesIds(String categoriesIds) {
    this.categoriesIds = categoriesIds;
    return this;
  }

  /**
   * Item&#39;s category ID.
   * @return categoriesIds
   */
  @javax.annotation.Nonnull
  public String getCategoriesIds() {
    return categoriesIds;
  }

  public void setCategoriesIds(String categoriesIds) {
    this.categoriesIds = categoriesIds;
  }


  public AdditionalInfo commercialConditionId(String commercialConditionId) {
    this.commercialConditionId = commercialConditionId;
    return this;
  }

  /**
   * Commercial conditions ID.
   * @return commercialConditionId
   */
  @javax.annotation.Nonnull
  public String getCommercialConditionId() {
    return commercialConditionId;
  }

  public void setCommercialConditionId(String commercialConditionId) {
    this.commercialConditionId = commercialConditionId;
  }


  public AdditionalInfo dimension(Dimension dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * Get dimension
   * @return dimension
   */
  @javax.annotation.Nonnull
  public Dimension getDimension() {
    return dimension;
  }

  public void setDimension(Dimension dimension) {
    this.dimension = dimension;
  }


  public AdditionalInfo offeringInfo(String offeringInfo) {
    this.offeringInfo = offeringInfo;
    return this;
  }

  /**
   * Information about services related to the item. For example: guarantee or installation.
   * @return offeringInfo
   */
  @javax.annotation.Nullable
  public String getOfferingInfo() {
    return offeringInfo;
  }

  public void setOfferingInfo(String offeringInfo) {
    this.offeringInfo = offeringInfo;
  }


  public AdditionalInfo offeringType(String offeringType) {
    this.offeringType = offeringType;
    return this;
  }

  /**
   * Offering type.
   * @return offeringType
   */
  @javax.annotation.Nullable
  public String getOfferingType() {
    return offeringType;
  }

  public void setOfferingType(String offeringType) {
    this.offeringType = offeringType;
  }


  public AdditionalInfo offeringTypeId(String offeringTypeId) {
    this.offeringTypeId = offeringTypeId;
    return this;
  }

  /**
   * Offering type ID.
   * @return offeringTypeId
   */
  @javax.annotation.Nullable
  public String getOfferingTypeId() {
    return offeringTypeId;
  }

  public void setOfferingTypeId(String offeringTypeId) {
    this.offeringTypeId = offeringTypeId;
  }


  public AdditionalInfo productClusterId(String productClusterId) {
    this.productClusterId = productClusterId;
    return this;
  }

  /**
   * All product clusters related to the item.
   * @return productClusterId
   */
  @javax.annotation.Nonnull
  public String getProductClusterId() {
    return productClusterId;
  }

  public void setProductClusterId(String productClusterId) {
    this.productClusterId = productClusterId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalInfo additionalInfo = (AdditionalInfo) o;
    return Objects.equals(this.brandId, additionalInfo.brandId) &&
        Objects.equals(this.brandName, additionalInfo.brandName) &&
        Objects.equals(this.categoriesIds, additionalInfo.categoriesIds) &&
        Objects.equals(this.commercialConditionId, additionalInfo.commercialConditionId) &&
        Objects.equals(this.dimension, additionalInfo.dimension) &&
        Objects.equals(this.offeringInfo, additionalInfo.offeringInfo) &&
        Objects.equals(this.offeringType, additionalInfo.offeringType) &&
        Objects.equals(this.offeringTypeId, additionalInfo.offeringTypeId) &&
        Objects.equals(this.productClusterId, additionalInfo.productClusterId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brandId, brandName, categoriesIds, commercialConditionId, dimension, offeringInfo, offeringType, offeringTypeId, productClusterId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalInfo {\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("    categoriesIds: ").append(toIndentedString(categoriesIds)).append("\n");
    sb.append("    commercialConditionId: ").append(toIndentedString(commercialConditionId)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    offeringInfo: ").append(toIndentedString(offeringInfo)).append("\n");
    sb.append("    offeringType: ").append(toIndentedString(offeringType)).append("\n");
    sb.append("    offeringTypeId: ").append(toIndentedString(offeringTypeId)).append("\n");
    sb.append("    productClusterId: ").append(toIndentedString(productClusterId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brandId");
    openapiFields.add("brandName");
    openapiFields.add("categoriesIds");
    openapiFields.add("commercialConditionId");
    openapiFields.add("dimension");
    openapiFields.add("offeringInfo");
    openapiFields.add("offeringType");
    openapiFields.add("offeringTypeId");
    openapiFields.add("productClusterId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("brandId");
    openapiRequiredFields.add("brandName");
    openapiRequiredFields.add("categoriesIds");
    openapiRequiredFields.add("commercialConditionId");
    openapiRequiredFields.add("dimension");
    openapiRequiredFields.add("offeringInfo");
    openapiRequiredFields.add("offeringType");
    openapiRequiredFields.add("offeringTypeId");
    openapiRequiredFields.add("productClusterId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalInfo is not found in the empty JSON string", AdditionalInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AdditionalInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("brandId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandId").toString()));
      }
      if (!jsonObj.get("brandName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandName").toString()));
      }
      if (!jsonObj.get("categoriesIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoriesIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoriesIds").toString()));
      }
      if (!jsonObj.get("commercialConditionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commercialConditionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commercialConditionId").toString()));
      }
      // validate the required field `dimension`
      Dimension.validateJsonElement(jsonObj.get("dimension"));
      if ((jsonObj.get("offeringInfo") != null && !jsonObj.get("offeringInfo").isJsonNull()) && !jsonObj.get("offeringInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offeringInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offeringInfo").toString()));
      }
      if ((jsonObj.get("offeringType") != null && !jsonObj.get("offeringType").isJsonNull()) && !jsonObj.get("offeringType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offeringType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offeringType").toString()));
      }
      if ((jsonObj.get("offeringTypeId") != null && !jsonObj.get("offeringTypeId").isJsonNull()) && !jsonObj.get("offeringTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offeringTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offeringTypeId").toString()));
      }
      if (!jsonObj.get("productClusterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productClusterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productClusterId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalInfo>() {
           @Override
           public void write(JsonWriter out, AdditionalInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalInfo
   * @throws IOException if the JSON string is invalid with respect to AdditionalInfo
   */
  public static AdditionalInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalInfo.class);
  }

  /**
   * Convert an instance of AdditionalInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

