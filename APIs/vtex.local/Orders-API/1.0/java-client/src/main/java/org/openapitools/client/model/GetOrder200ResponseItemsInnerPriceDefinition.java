/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetOrder200ResponseItemsInnerPriceDefinitionSellingPricesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Price information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetOrder200ResponseItemsInnerPriceDefinition {
  public static final String SERIALIZED_NAME_CALCULATED_SELLING_PRICE = "calculatedSellingPrice";
  @SerializedName(SERIALIZED_NAME_CALCULATED_SELLING_PRICE)
  private Integer calculatedSellingPrice;

  public static final String SERIALIZED_NAME_SELLING_PRICES = "sellingPrices";
  @SerializedName(SERIALIZED_NAME_SELLING_PRICES)
  private List<GetOrder200ResponseItemsInnerPriceDefinitionSellingPricesInner> sellingPrices = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public GetOrder200ResponseItemsInnerPriceDefinition() {
  }

  public GetOrder200ResponseItemsInnerPriceDefinition calculatedSellingPrice(Integer calculatedSellingPrice) {
    this.calculatedSellingPrice = calculatedSellingPrice;
    return this;
  }

  /**
   * Calculated selling price in cents.
   * @return calculatedSellingPrice
   */
  @javax.annotation.Nullable
  public Integer getCalculatedSellingPrice() {
    return calculatedSellingPrice;
  }

  public void setCalculatedSellingPrice(Integer calculatedSellingPrice) {
    this.calculatedSellingPrice = calculatedSellingPrice;
  }


  public GetOrder200ResponseItemsInnerPriceDefinition sellingPrices(List<GetOrder200ResponseItemsInnerPriceDefinitionSellingPricesInner> sellingPrices) {
    this.sellingPrices = sellingPrices;
    return this;
  }

  public GetOrder200ResponseItemsInnerPriceDefinition addSellingPricesItem(GetOrder200ResponseItemsInnerPriceDefinitionSellingPricesInner sellingPricesItem) {
    if (this.sellingPrices == null) {
      this.sellingPrices = new ArrayList<>();
    }
    this.sellingPrices.add(sellingPricesItem);
    return this;
  }

  /**
   * Selling prices.
   * @return sellingPrices
   */
  @javax.annotation.Nullable
  public List<GetOrder200ResponseItemsInnerPriceDefinitionSellingPricesInner> getSellingPrices() {
    return sellingPrices;
  }

  public void setSellingPrices(List<GetOrder200ResponseItemsInnerPriceDefinitionSellingPricesInner> sellingPrices) {
    this.sellingPrices = sellingPrices;
  }


  public GetOrder200ResponseItemsInnerPriceDefinition total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Total in cents.
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetOrder200ResponseItemsInnerPriceDefinition getOrder200ResponseItemsInnerPriceDefinition = (GetOrder200ResponseItemsInnerPriceDefinition) o;
    return Objects.equals(this.calculatedSellingPrice, getOrder200ResponseItemsInnerPriceDefinition.calculatedSellingPrice) &&
        Objects.equals(this.sellingPrices, getOrder200ResponseItemsInnerPriceDefinition.sellingPrices) &&
        Objects.equals(this.total, getOrder200ResponseItemsInnerPriceDefinition.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculatedSellingPrice, sellingPrices, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetOrder200ResponseItemsInnerPriceDefinition {\n");
    sb.append("    calculatedSellingPrice: ").append(toIndentedString(calculatedSellingPrice)).append("\n");
    sb.append("    sellingPrices: ").append(toIndentedString(sellingPrices)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calculatedSellingPrice");
    openapiFields.add("sellingPrices");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetOrder200ResponseItemsInnerPriceDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetOrder200ResponseItemsInnerPriceDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetOrder200ResponseItemsInnerPriceDefinition is not found in the empty JSON string", GetOrder200ResponseItemsInnerPriceDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetOrder200ResponseItemsInnerPriceDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOrder200ResponseItemsInnerPriceDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("sellingPrices") != null && !jsonObj.get("sellingPrices").isJsonNull()) {
        JsonArray jsonArraysellingPrices = jsonObj.getAsJsonArray("sellingPrices");
        if (jsonArraysellingPrices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sellingPrices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sellingPrices` to be an array in the JSON string but got `%s`", jsonObj.get("sellingPrices").toString()));
          }

          // validate the optional field `sellingPrices` (array)
          for (int i = 0; i < jsonArraysellingPrices.size(); i++) {
            GetOrder200ResponseItemsInnerPriceDefinitionSellingPricesInner.validateJsonElement(jsonArraysellingPrices.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetOrder200ResponseItemsInnerPriceDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetOrder200ResponseItemsInnerPriceDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetOrder200ResponseItemsInnerPriceDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetOrder200ResponseItemsInnerPriceDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<GetOrder200ResponseItemsInnerPriceDefinition>() {
           @Override
           public void write(JsonWriter out, GetOrder200ResponseItemsInnerPriceDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetOrder200ResponseItemsInnerPriceDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetOrder200ResponseItemsInnerPriceDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetOrder200ResponseItemsInnerPriceDefinition
   * @throws IOException if the JSON string is invalid with respect to GetOrder200ResponseItemsInnerPriceDefinition
   */
  public static GetOrder200ResponseItemsInnerPriceDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetOrder200ResponseItemsInnerPriceDefinition.class);
  }

  /**
   * Convert an instance of GetOrder200ResponseItemsInnerPriceDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

