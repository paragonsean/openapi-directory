/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information on how orders are filtered to show on the feed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetFeedConfiguration200ResponseFilter {
  public static final String SERIALIZED_NAME_DISABLE_SINGLE_FIRE = "disableSingleFire";
  @SerializedName(SERIALIZED_NAME_DISABLE_SINGLE_FIRE)
  private Boolean disableSingleFire;

  public static final String SERIALIZED_NAME_EXPRESSION = "expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List<String> status = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public GetFeedConfiguration200ResponseFilter() {
  }

  public GetFeedConfiguration200ResponseFilter disableSingleFire(Boolean disableSingleFire) {
    this.disableSingleFire = disableSingleFire;
    return this;
  }

  /**
   * Sets a limit to how many times a specific order shows on the feed, after it first meets filtering conditions. Using the &#x60;FromOrders&#x60; type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is &#x60;false&#x60; orders will appear in the feed only once.
   * @return disableSingleFire
   */
  @javax.annotation.Nullable
  public Boolean getDisableSingleFire() {
    return disableSingleFire;
  }

  public void setDisableSingleFire(Boolean disableSingleFire) {
    this.disableSingleFire = disableSingleFire;
  }


  public GetFeedConfiguration200ResponseFilter expression(String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * JSONata query expression that defines what conditions must be met for an order to be included in the feed. This should only be used in case &#x60;type&#x60; is &#x60;FromOrders&#x60;.
   * @return expression
   */
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }


  public GetFeedConfiguration200ResponseFilter status(List<String> status) {
    this.status = status;
    return this;
  }

  public GetFeedConfiguration200ResponseFilter addStatusItem(String statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>();
    }
    this.status.add(statusItem);
    return this;
  }

  /**
   * List of order statuses that should be included in the feed. This should only be used in case &#x60;type&#x60; is &#x60;FromWorkflow&#x60;.
   * @return status
   */
  @javax.annotation.Nullable
  public List<String> getStatus() {
    return status;
  }

  public void setStatus(List<String> status) {
    this.status = status;
  }


  public GetFeedConfiguration200ResponseFilter type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Determines what orders appear in the feed and how they are filtered. If a feed has the &#x60;FromWorkflow&#x60; type configuration, it will receive order updates only when orderâ€™s statuses change and orders can be filtered by status, using the &#x60;status&#x60; field. A feed with the &#x60;FromOrders&#x60; type configuration gets updates whenever any change is made to an order. in this case, orders can be filtered by any property, according to JSONata expressions set in the &#x60;expression&#x60; field.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetFeedConfiguration200ResponseFilter getFeedConfiguration200ResponseFilter = (GetFeedConfiguration200ResponseFilter) o;
    return Objects.equals(this.disableSingleFire, getFeedConfiguration200ResponseFilter.disableSingleFire) &&
        Objects.equals(this.expression, getFeedConfiguration200ResponseFilter.expression) &&
        Objects.equals(this.status, getFeedConfiguration200ResponseFilter.status) &&
        Objects.equals(this.type, getFeedConfiguration200ResponseFilter.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disableSingleFire, expression, status, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetFeedConfiguration200ResponseFilter {\n");
    sb.append("    disableSingleFire: ").append(toIndentedString(disableSingleFire)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disableSingleFire");
    openapiFields.add("expression");
    openapiFields.add("status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetFeedConfiguration200ResponseFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetFeedConfiguration200ResponseFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetFeedConfiguration200ResponseFilter is not found in the empty JSON string", GetFeedConfiguration200ResponseFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetFeedConfiguration200ResponseFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetFeedConfiguration200ResponseFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expression") != null && !jsonObj.get("expression").isJsonNull()) && !jsonObj.get("expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expression").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull() && !jsonObj.get("status").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be an array in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetFeedConfiguration200ResponseFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetFeedConfiguration200ResponseFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetFeedConfiguration200ResponseFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetFeedConfiguration200ResponseFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<GetFeedConfiguration200ResponseFilter>() {
           @Override
           public void write(JsonWriter out, GetFeedConfiguration200ResponseFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetFeedConfiguration200ResponseFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetFeedConfiguration200ResponseFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetFeedConfiguration200ResponseFilter
   * @throws IOException if the JSON string is invalid with respect to GetFeedConfiguration200ResponseFilter
   */
  public static GetFeedConfiguration200ResponseFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetFeedConfiguration200ResponseFilter.class);
  }

  /**
   * Convert an instance of GetFeedConfiguration200ResponseFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

