/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.From;
import org.openapitools.client.model.To;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetConversation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetConversation {
  public static final String SERIALIZED_NAME_ATTACHMENT_NAMES = "attachmentNames";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_NAMES)
  private List<String> attachmentNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_FIRST_WORDS = "firstWords";
  @SerializedName(SERIALIZED_NAME_FIRST_WORDS)
  private String firstWords;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private From from;

  public static final String SERIALIZED_NAME_HAS_ATTACHMENT = "hasAttachment";
  @SerializedName(SERIALIZED_NAME_HAS_ATTACHMENT)
  private Boolean hasAttachment;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private List<To> to = new ArrayList<>();

  public GetConversation() {
  }

  public GetConversation attachmentNames(List<String> attachmentNames) {
    this.attachmentNames = attachmentNames;
    return this;
  }

  public GetConversation addAttachmentNamesItem(String attachmentNamesItem) {
    if (this.attachmentNames == null) {
      this.attachmentNames = new ArrayList<>();
    }
    this.attachmentNames.add(attachmentNamesItem);
    return this;
  }

  /**
   * List with attachments&#39; names, if there are any.
   * @return attachmentNames
   */
  @javax.annotation.Nonnull
  public List<String> getAttachmentNames() {
    return attachmentNames;
  }

  public void setAttachmentNames(List<String> attachmentNames) {
    this.attachmentNames = attachmentNames;
  }


  public GetConversation body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Conversation content body.
   * @return body
   */
  @javax.annotation.Nonnull
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public GetConversation date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Conversation date.
   * @return date
   */
  @javax.annotation.Nonnull
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public GetConversation firstWords(String firstWords) {
    this.firstWords = firstWords;
    return this;
  }

  /**
   * First words of Conversation content.
   * @return firstWords
   */
  @javax.annotation.Nonnull
  public String getFirstWords() {
    return firstWords;
  }

  public void setFirstWords(String firstWords) {
    this.firstWords = firstWords;
  }


  public GetConversation from(From from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nonnull
  public From getFrom() {
    return from;
  }

  public void setFrom(From from) {
    this.from = from;
  }


  public GetConversation hasAttachment(Boolean hasAttachment) {
    this.hasAttachment = hasAttachment;
    return this;
  }

  /**
   * When set as &#x60;true&#x60;, it means there are attachments, when set as &#x60;false&#x60;, there are not.
   * @return hasAttachment
   */
  @javax.annotation.Nonnull
  public Boolean getHasAttachment() {
    return hasAttachment;
  }

  public void setHasAttachment(Boolean hasAttachment) {
    this.hasAttachment = hasAttachment;
  }


  public GetConversation id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Conversation ID.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetConversation subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Conversation content subject.
   * @return subject
   */
  @javax.annotation.Nonnull
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public GetConversation to(List<To> to) {
    this.to = to;
    return this;
  }

  public GetConversation addToItem(To toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * Conversation receiver.
   * @return to
   */
  @javax.annotation.Nonnull
  public List<To> getTo() {
    return to;
  }

  public void setTo(List<To> to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetConversation getConversation = (GetConversation) o;
    return Objects.equals(this.attachmentNames, getConversation.attachmentNames) &&
        Objects.equals(this.body, getConversation.body) &&
        Objects.equals(this.date, getConversation.date) &&
        Objects.equals(this.firstWords, getConversation.firstWords) &&
        Objects.equals(this.from, getConversation.from) &&
        Objects.equals(this.hasAttachment, getConversation.hasAttachment) &&
        Objects.equals(this.id, getConversation.id) &&
        Objects.equals(this.subject, getConversation.subject) &&
        Objects.equals(this.to, getConversation.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachmentNames, body, date, firstWords, from, hasAttachment, id, subject, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetConversation {\n");
    sb.append("    attachmentNames: ").append(toIndentedString(attachmentNames)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    firstWords: ").append(toIndentedString(firstWords)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    hasAttachment: ").append(toIndentedString(hasAttachment)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachmentNames");
    openapiFields.add("body");
    openapiFields.add("date");
    openapiFields.add("firstWords");
    openapiFields.add("from");
    openapiFields.add("hasAttachment");
    openapiFields.add("id");
    openapiFields.add("subject");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attachmentNames");
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("firstWords");
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("hasAttachment");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("subject");
    openapiRequiredFields.add("to");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetConversation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetConversation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetConversation is not found in the empty JSON string", GetConversation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetConversation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetConversation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetConversation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("attachmentNames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("attachmentNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachmentNames` to be an array in the JSON string but got `%s`", jsonObj.get("attachmentNames").toString()));
      }
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if (!jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if (!jsonObj.get("firstWords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstWords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstWords").toString()));
      }
      // validate the required field `from`
      From.validateJsonElement(jsonObj.get("from"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }

      JsonArray jsonArrayto = jsonObj.getAsJsonArray("to");
      // validate the required field `to` (array)
      for (int i = 0; i < jsonArrayto.size(); i++) {
        To.validateJsonElement(jsonArrayto.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetConversation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetConversation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetConversation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetConversation.class));

       return (TypeAdapter<T>) new TypeAdapter<GetConversation>() {
           @Override
           public void write(JsonWriter out, GetConversation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetConversation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetConversation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetConversation
   * @throws IOException if the JSON string is invalid with respect to GetConversation
   */
  public static GetConversation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetConversation.class);
  }

  /**
   * Convert an instance of GetConversation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

