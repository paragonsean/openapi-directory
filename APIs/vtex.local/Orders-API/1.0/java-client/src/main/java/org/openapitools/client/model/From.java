/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Conversation sender.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class From {
  public static final String SERIALIZED_NAME_ALIAS_MASK_TYPE = "aliasMaskType";
  @SerializedName(SERIALIZED_NAME_ALIAS_MASK_TYPE)
  private Integer aliasMaskType;

  public static final String SERIALIZED_NAME_CONVERSATION_RELATED_TO = "conversationRelatedTo";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_RELATED_TO)
  private String conversationRelatedTo;

  public static final String SERIALIZED_NAME_CONVERSATION_SUBJECT = "conversationSubject";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_SUBJECT)
  private String conversationSubject;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_ALIAS = "emailAlias";
  @SerializedName(SERIALIZED_NAME_EMAIL_ALIAS)
  private String emailAlias;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public From() {
  }

  public From aliasMaskType(Integer aliasMaskType) {
    this.aliasMaskType = aliasMaskType;
    return this;
  }

  /**
   * Conversation tracker mask type.
   * @return aliasMaskType
   */
  @javax.annotation.Nonnull
  public Integer getAliasMaskType() {
    return aliasMaskType;
  }

  public void setAliasMaskType(Integer aliasMaskType) {
    this.aliasMaskType = aliasMaskType;
  }


  public From conversationRelatedTo(String conversationRelatedTo) {
    this.conversationRelatedTo = conversationRelatedTo;
    return this;
  }

  /**
   * Related order ID.
   * @return conversationRelatedTo
   */
  @javax.annotation.Nonnull
  public String getConversationRelatedTo() {
    return conversationRelatedTo;
  }

  public void setConversationRelatedTo(String conversationRelatedTo) {
    this.conversationRelatedTo = conversationRelatedTo;
  }


  public From conversationSubject(String conversationSubject) {
    this.conversationSubject = conversationSubject;
    return this;
  }

  /**
   * Conversation subject.
   * @return conversationSubject
   */
  @javax.annotation.Nonnull
  public String getConversationSubject() {
    return conversationSubject;
  }

  public void setConversationSubject(String conversationSubject) {
    this.conversationSubject = conversationSubject;
  }


  public From email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Sender&#39;s email.
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public From emailAlias(String emailAlias) {
    this.emailAlias = emailAlias;
    return this;
  }

  /**
   * Sender transactional tracker email.
   * @return emailAlias
   */
  @javax.annotation.Nonnull
  public String getEmailAlias() {
    return emailAlias;
  }

  public void setEmailAlias(String emailAlias) {
    this.emailAlias = emailAlias;
  }


  public From name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Sender&#39;s name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public From role(String role) {
    this.role = role;
    return this;
  }

  /**
   * If it is a client or null, for transactional emails.
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    From from = (From) o;
    return Objects.equals(this.aliasMaskType, from.aliasMaskType) &&
        Objects.equals(this.conversationRelatedTo, from.conversationRelatedTo) &&
        Objects.equals(this.conversationSubject, from.conversationSubject) &&
        Objects.equals(this.email, from.email) &&
        Objects.equals(this.emailAlias, from.emailAlias) &&
        Objects.equals(this.name, from.name) &&
        Objects.equals(this.role, from.role);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aliasMaskType, conversationRelatedTo, conversationSubject, email, emailAlias, name, role);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class From {\n");
    sb.append("    aliasMaskType: ").append(toIndentedString(aliasMaskType)).append("\n");
    sb.append("    conversationRelatedTo: ").append(toIndentedString(conversationRelatedTo)).append("\n");
    sb.append("    conversationSubject: ").append(toIndentedString(conversationSubject)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailAlias: ").append(toIndentedString(emailAlias)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aliasMaskType");
    openapiFields.add("conversationRelatedTo");
    openapiFields.add("conversationSubject");
    openapiFields.add("email");
    openapiFields.add("emailAlias");
    openapiFields.add("name");
    openapiFields.add("role");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aliasMaskType");
    openapiRequiredFields.add("conversationRelatedTo");
    openapiRequiredFields.add("conversationSubject");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("emailAlias");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("role");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to From
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!From.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in From is not found in the empty JSON string", From.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!From.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `From` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : From.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("conversationRelatedTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversationRelatedTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversationRelatedTo").toString()));
      }
      if (!jsonObj.get("conversationSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversationSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversationSubject").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("emailAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailAlias").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!From.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'From' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<From> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(From.class));

       return (TypeAdapter<T>) new TypeAdapter<From>() {
           @Override
           public void write(JsonWriter out, From value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public From read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of From given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of From
   * @throws IOException if the JSON string is invalid with respect to From
   */
  public static From fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, From.class);
  }

  /**
   * Convert an instance of From to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

