/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CancelOrder200Response;
import org.openapitools.client.model.InvoiceNotificationRequest;
import org.openapitools.client.model.UpdatepartialinvoiceSendTrackingNumber;
import org.openapitools.client.model.UpdatepartialinvoiceSendTrackingNumberRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvoiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for invoiceNotification
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param orderId Unique code that identifies the order whose invoice is being sent. (required)
     * @param invoiceNotificationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceNotificationCall(String accept, String contentType, String orderId, InvoiceNotificationRequest invoiceNotificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoiceNotificationRequest;

        // create path and map variables
        String localVarPath = "/api/oms/pvt/orders/{orderId}/invoice"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoiceNotificationValidateBeforeCall(String accept, String contentType, String orderId, InvoiceNotificationRequest invoiceNotificationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling invoiceNotification(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling invoiceNotification(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling invoiceNotification(Async)");
        }

        // verify the required parameter 'invoiceNotificationRequest' is set
        if (invoiceNotificationRequest == null) {
            throw new ApiException("Missing the required parameter 'invoiceNotificationRequest' when calling invoiceNotification(Async)");
        }

        return invoiceNotificationCall(accept, contentType, orderId, invoiceNotificationRequest, _callback);

    }

    /**
     * Order invoice notification
     * Entering the [invoice in the order](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/2WgQrlHTyVo4hLjhUs1LMT) is a required step for its [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196#order-status-details) to change to Invoiced - a sign that the order has been successfully completed. Remember that once an order is read as invoiced by the system, this status cannot be changed.   The total value of the order will be updated after the insertion of the invoice, even when there&#39;s a [Partial invoice](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe) scenario. The updated value is settled by VTEX&#39;s Payment Gateway. The reimbursement for the shopper is automatic.   We strongly recommend that you always send the object of the invoiced items. With this practice, rounding errors will be avoided.   When returning items, an input invoice must be sent through this call. For that, the &#x60;type&#x60; field should be filled in with &#x60;input&#x60;.   It is not allowed to use the same &#x60;invoiceNumber&#x60; in more than one request to the Order Invoice Notification endpoint.  For marketplace integrations: once the order is invoiced, the seller should use this request to send the invoice information to the marketplace. Be aware that this endpoint is also used by the seller to send the order tracking information. This, however, should be done in a separate moment, once the seller has the tracking information.      &gt; The &#x60;Notify invoice&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).    &gt; ðŸ“˜ Onboarding guide   &gt;  &gt; Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer&#39;s journey.    
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param orderId Unique code that identifies the order whose invoice is being sent. (required)
     * @param invoiceNotificationRequest  (required)
     * @return CancelOrder200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CancelOrder200Response invoiceNotification(String accept, String contentType, String orderId, InvoiceNotificationRequest invoiceNotificationRequest) throws ApiException {
        ApiResponse<CancelOrder200Response> localVarResp = invoiceNotificationWithHttpInfo(accept, contentType, orderId, invoiceNotificationRequest);
        return localVarResp.getData();
    }

    /**
     * Order invoice notification
     * Entering the [invoice in the order](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/2WgQrlHTyVo4hLjhUs1LMT) is a required step for its [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196#order-status-details) to change to Invoiced - a sign that the order has been successfully completed. Remember that once an order is read as invoiced by the system, this status cannot be changed.   The total value of the order will be updated after the insertion of the invoice, even when there&#39;s a [Partial invoice](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe) scenario. The updated value is settled by VTEX&#39;s Payment Gateway. The reimbursement for the shopper is automatic.   We strongly recommend that you always send the object of the invoiced items. With this practice, rounding errors will be avoided.   When returning items, an input invoice must be sent through this call. For that, the &#x60;type&#x60; field should be filled in with &#x60;input&#x60;.   It is not allowed to use the same &#x60;invoiceNumber&#x60; in more than one request to the Order Invoice Notification endpoint.  For marketplace integrations: once the order is invoiced, the seller should use this request to send the invoice information to the marketplace. Be aware that this endpoint is also used by the seller to send the order tracking information. This, however, should be done in a separate moment, once the seller has the tracking information.      &gt; The &#x60;Notify invoice&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).    &gt; ðŸ“˜ Onboarding guide   &gt;  &gt; Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer&#39;s journey.    
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param orderId Unique code that identifies the order whose invoice is being sent. (required)
     * @param invoiceNotificationRequest  (required)
     * @return ApiResponse&lt;CancelOrder200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelOrder200Response> invoiceNotificationWithHttpInfo(String accept, String contentType, String orderId, InvoiceNotificationRequest invoiceNotificationRequest) throws ApiException {
        okhttp3.Call localVarCall = invoiceNotificationValidateBeforeCall(accept, contentType, orderId, invoiceNotificationRequest, null);
        Type localVarReturnType = new TypeToken<CancelOrder200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Order invoice notification (asynchronously)
     * Entering the [invoice in the order](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/2WgQrlHTyVo4hLjhUs1LMT) is a required step for its [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196#order-status-details) to change to Invoiced - a sign that the order has been successfully completed. Remember that once an order is read as invoiced by the system, this status cannot be changed.   The total value of the order will be updated after the insertion of the invoice, even when there&#39;s a [Partial invoice](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe) scenario. The updated value is settled by VTEX&#39;s Payment Gateway. The reimbursement for the shopper is automatic.   We strongly recommend that you always send the object of the invoiced items. With this practice, rounding errors will be avoided.   When returning items, an input invoice must be sent through this call. For that, the &#x60;type&#x60; field should be filled in with &#x60;input&#x60;.   It is not allowed to use the same &#x60;invoiceNumber&#x60; in more than one request to the Order Invoice Notification endpoint.  For marketplace integrations: once the order is invoiced, the seller should use this request to send the invoice information to the marketplace. Be aware that this endpoint is also used by the seller to send the order tracking information. This, however, should be done in a separate moment, once the seller has the tracking information.      &gt; The &#x60;Notify invoice&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).    &gt; ðŸ“˜ Onboarding guide   &gt;  &gt; Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer&#39;s journey.    
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param orderId Unique code that identifies the order whose invoice is being sent. (required)
     * @param invoiceNotificationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoiceNotificationAsync(String accept, String contentType, String orderId, InvoiceNotificationRequest invoiceNotificationRequest, final ApiCallback<CancelOrder200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoiceNotificationValidateBeforeCall(accept, contentType, orderId, invoiceNotificationRequest, _callback);
        Type localVarReturnType = new TypeToken<CancelOrder200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatepartialinvoiceSendTrackingNumber
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param orderId Unique code that identifies the order whose invoice is being sent. (required)
     * @param invoiceNumber Number that identifies the invoice. (required)
     * @param updatepartialinvoiceSendTrackingNumberRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatepartialinvoiceSendTrackingNumberCall(String contentType, String accept, String orderId, String invoiceNumber, UpdatepartialinvoiceSendTrackingNumberRequest updatepartialinvoiceSendTrackingNumberRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatepartialinvoiceSendTrackingNumberRequest;

        // create path and map variables
        String localVarPath = "/api/oms/pvt/orders/{orderId}/invoice/{invoiceNumber}"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "invoiceNumber" + "}", localVarApiClient.escapeString(invoiceNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatepartialinvoiceSendTrackingNumberValidateBeforeCall(String contentType, String accept, String orderId, String invoiceNumber, UpdatepartialinvoiceSendTrackingNumberRequest updatepartialinvoiceSendTrackingNumberRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updatepartialinvoiceSendTrackingNumber(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updatepartialinvoiceSendTrackingNumber(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updatepartialinvoiceSendTrackingNumber(Async)");
        }

        // verify the required parameter 'invoiceNumber' is set
        if (invoiceNumber == null) {
            throw new ApiException("Missing the required parameter 'invoiceNumber' when calling updatepartialinvoiceSendTrackingNumber(Async)");
        }

        // verify the required parameter 'updatepartialinvoiceSendTrackingNumberRequest' is set
        if (updatepartialinvoiceSendTrackingNumberRequest == null) {
            throw new ApiException("Missing the required parameter 'updatepartialinvoiceSendTrackingNumberRequest' when calling updatepartialinvoiceSendTrackingNumber(Async)");
        }

        return updatepartialinvoiceSendTrackingNumberCall(contentType, accept, orderId, invoiceNumber, updatepartialinvoiceSendTrackingNumberRequest, _callback);

    }

    /**
     * Update order&#39;s partial invoice (send tracking number)
     * Update a given order, adding its tracking number to its [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe).    After using this call to add a tracking number to an order, you can use the [Update order tracking status](https://developers.vtex.com/vtex-rest-api/reference/tracking#updatetrackingstatus) API request to add tracking events.    &gt; The &#x60;Notify invoice&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc).
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param orderId Unique code that identifies the order whose invoice is being sent. (required)
     * @param invoiceNumber Number that identifies the invoice. (required)
     * @param updatepartialinvoiceSendTrackingNumberRequest  (required)
     * @return UpdatepartialinvoiceSendTrackingNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdatepartialinvoiceSendTrackingNumber updatepartialinvoiceSendTrackingNumber(String contentType, String accept, String orderId, String invoiceNumber, UpdatepartialinvoiceSendTrackingNumberRequest updatepartialinvoiceSendTrackingNumberRequest) throws ApiException {
        ApiResponse<UpdatepartialinvoiceSendTrackingNumber> localVarResp = updatepartialinvoiceSendTrackingNumberWithHttpInfo(contentType, accept, orderId, invoiceNumber, updatepartialinvoiceSendTrackingNumberRequest);
        return localVarResp.getData();
    }

    /**
     * Update order&#39;s partial invoice (send tracking number)
     * Update a given order, adding its tracking number to its [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe).    After using this call to add a tracking number to an order, you can use the [Update order tracking status](https://developers.vtex.com/vtex-rest-api/reference/tracking#updatetrackingstatus) API request to add tracking events.    &gt; The &#x60;Notify invoice&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc).
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param orderId Unique code that identifies the order whose invoice is being sent. (required)
     * @param invoiceNumber Number that identifies the invoice. (required)
     * @param updatepartialinvoiceSendTrackingNumberRequest  (required)
     * @return ApiResponse&lt;UpdatepartialinvoiceSendTrackingNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatepartialinvoiceSendTrackingNumber> updatepartialinvoiceSendTrackingNumberWithHttpInfo(String contentType, String accept, String orderId, String invoiceNumber, UpdatepartialinvoiceSendTrackingNumberRequest updatepartialinvoiceSendTrackingNumberRequest) throws ApiException {
        okhttp3.Call localVarCall = updatepartialinvoiceSendTrackingNumberValidateBeforeCall(contentType, accept, orderId, invoiceNumber, updatepartialinvoiceSendTrackingNumberRequest, null);
        Type localVarReturnType = new TypeToken<UpdatepartialinvoiceSendTrackingNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update order&#39;s partial invoice (send tracking number) (asynchronously)
     * Update a given order, adding its tracking number to its [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe).    After using this call to add a tracking number to an order, you can use the [Update order tracking status](https://developers.vtex.com/vtex-rest-api/reference/tracking#updatetrackingstatus) API request to add tracking events.    &gt; The &#x60;Notify invoice&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc).
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param orderId Unique code that identifies the order whose invoice is being sent. (required)
     * @param invoiceNumber Number that identifies the invoice. (required)
     * @param updatepartialinvoiceSendTrackingNumberRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatepartialinvoiceSendTrackingNumberAsync(String contentType, String accept, String orderId, String invoiceNumber, UpdatepartialinvoiceSendTrackingNumberRequest updatepartialinvoiceSendTrackingNumberRequest, final ApiCallback<UpdatepartialinvoiceSendTrackingNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatepartialinvoiceSendTrackingNumberValidateBeforeCall(contentType, accept, orderId, invoiceNumber, updatepartialinvoiceSendTrackingNumberRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdatepartialinvoiceSendTrackingNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
