/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddLogRequest;
import org.openapitools.client.model.CancelOrder200Response;
import org.openapitools.client.model.CancelOrderRequest;
import org.openapitools.client.model.GetOrder200Response;
import org.openapitools.client.model.ListOrders;
import org.openapitools.client.model.RegisterChange;
import org.openapitools.client.model.RegisterChangeRequest;
import org.openapitools.client.model.StartHandling401Response;
import org.openapitools.client.model.StartHandling409Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addLog
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @param addLogRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLogCall(String contentType, String accept, String orderId, AddLogRequest addLogRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addLogRequest;

        // create path and map variables
        String localVarPath = "/api/oms/pvt/orders/{orderId}/interactions"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLogValidateBeforeCall(String contentType, String accept, String orderId, AddLogRequest addLogRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling addLog(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling addLog(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling addLog(Async)");
        }

        // verify the required parameter 'addLogRequest' is set
        if (addLogRequest == null) {
            throw new ApiException("Missing the required parameter 'addLogRequest' when calling addLog(Async)");
        }

        return addLogCall(contentType, accept, orderId, addLogRequest, _callback);

    }

    /**
     * Add log in orders
     * Add a Log in Interactions Order Array.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @param addLogRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void addLog(String contentType, String accept, String orderId, AddLogRequest addLogRequest) throws ApiException {
        addLogWithHttpInfo(contentType, accept, orderId, addLogRequest);
    }

    /**
     * Add log in orders
     * Add a Log in Interactions Order Array.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @param addLogRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addLogWithHttpInfo(String contentType, String accept, String orderId, AddLogRequest addLogRequest) throws ApiException {
        okhttp3.Call localVarCall = addLogValidateBeforeCall(contentType, accept, orderId, addLogRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add log in orders (asynchronously)
     * Add a Log in Interactions Order Array.
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @param addLogRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLogAsync(String contentType, String accept, String orderId, AddLogRequest addLogRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLogValidateBeforeCall(contentType, accept, orderId, addLogRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelOrder
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param orderId ID that identifies the order in the seller. (required)
     * @param cancelOrderRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The credentials are not enabled to access the service. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Value not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelOrderCall(String accept, String contentType, String orderId, CancelOrderRequest cancelOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelOrderRequest;

        // create path and map variables
        String localVarPath = "/api/oms/pvt/orders/{orderId}/cancel"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelOrderValidateBeforeCall(String accept, String contentType, String orderId, CancelOrderRequest cancelOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling cancelOrder(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling cancelOrder(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling cancelOrder(Async)");
        }

        return cancelOrderCall(accept, contentType, orderId, cancelOrderRequest, _callback);

    }

    /**
     * Cancel order
     * You should use this endpoint to cancel an order by its order identification number (the &#x60;orderId&#x60;).  A common scenario is one where the seller has a problem with the order fulfillment and needs to request the order cancellation to the marketplace. To do this, the seller would need to make this request, passing the &#x60;orderId&#x60; in the URL.  You should expect a response with the date when the notification was received, the orderId, and a receipt protocol code.  Be aware that if the order status is already &#x60;Invoiced&#x60;, the order can only be canceled if—before using this request—you send a return invoice through the [Order Invoice Notification endpoint](https://developers.vtex.com/reference/invoice#invoicenotification).    &gt; The &#x60;Cancel order&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param orderId ID that identifies the order in the seller. (required)
     * @param cancelOrderRequest  (optional)
     * @return CancelOrder200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The credentials are not enabled to access the service. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Value not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
     </table>
     */
    public CancelOrder200Response cancelOrder(String accept, String contentType, String orderId, CancelOrderRequest cancelOrderRequest) throws ApiException {
        ApiResponse<CancelOrder200Response> localVarResp = cancelOrderWithHttpInfo(accept, contentType, orderId, cancelOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel order
     * You should use this endpoint to cancel an order by its order identification number (the &#x60;orderId&#x60;).  A common scenario is one where the seller has a problem with the order fulfillment and needs to request the order cancellation to the marketplace. To do this, the seller would need to make this request, passing the &#x60;orderId&#x60; in the URL.  You should expect a response with the date when the notification was received, the orderId, and a receipt protocol code.  Be aware that if the order status is already &#x60;Invoiced&#x60;, the order can only be canceled if—before using this request—you send a return invoice through the [Order Invoice Notification endpoint](https://developers.vtex.com/reference/invoice#invoicenotification).    &gt; The &#x60;Cancel order&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param orderId ID that identifies the order in the seller. (required)
     * @param cancelOrderRequest  (optional)
     * @return ApiResponse&lt;CancelOrder200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The credentials are not enabled to access the service. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Value not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelOrder200Response> cancelOrderWithHttpInfo(String accept, String contentType, String orderId, CancelOrderRequest cancelOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = cancelOrderValidateBeforeCall(accept, contentType, orderId, cancelOrderRequest, null);
        Type localVarReturnType = new TypeToken<CancelOrder200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel order (asynchronously)
     * You should use this endpoint to cancel an order by its order identification number (the &#x60;orderId&#x60;).  A common scenario is one where the seller has a problem with the order fulfillment and needs to request the order cancellation to the marketplace. To do this, the seller would need to make this request, passing the &#x60;orderId&#x60; in the URL.  You should expect a response with the date when the notification was received, the orderId, and a receipt protocol code.  Be aware that if the order status is already &#x60;Invoiced&#x60;, the order can only be canceled if—before using this request—you send a return invoice through the [Order Invoice Notification endpoint](https://developers.vtex.com/reference/invoice#invoicenotification).    &gt; The &#x60;Cancel order&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param orderId ID that identifies the order in the seller. (required)
     * @param cancelOrderRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The credentials are not enabled to access the service. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Value not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelOrderAsync(String accept, String contentType, String orderId, CancelOrderRequest cancelOrderRequest, final ApiCallback<CancelOrder200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelOrderValidateBeforeCall(accept, contentType, orderId, cancelOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<CancelOrder200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrder
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. Instead of using &#x60;orderId&#x60;, you can also make the request using the sequence, a six-digit string that follows the order ID. For example, in order 1268540501456-01 (501456), the sequence is 501456. To use this parameter, replace the value between &#x60;{ }&#x60; keys in &#x60;seq{sequence-number}&#x60; with the sequence. For example: &#x60;seq501456&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderCall(String accept, String contentType, String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/oms/pvt/orders/{orderId}"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderValidateBeforeCall(String accept, String contentType, String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getOrder(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getOrder(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrder(Async)");
        }

        return getOrderCall(accept, contentType, orderId, _callback);

    }

    /**
     * Get order
     * This endpoint retrieves order details by searching a specific order ID or sequence number.    &gt; The &#x60;View order&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc).    &gt; 📘 Onboarding guide   &gt;  &gt; Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer&#39;s journey.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;orderId\&quot;: \&quot;1244730712239-01\&quot;,      \&quot;sequence\&quot;: \&quot;502790\&quot;,      \&quot;marketplaceOrderId\&quot;: \&quot;\&quot;,      \&quot;marketplaceServicesEndpoint\&quot;: null,      \&quot;sellerOrderId\&quot;: \&quot;SLR-1244730712239-01\&quot;,      \&quot;origin\&quot;: \&quot;Marketplace\&quot;,      \&quot;affiliateId\&quot;: \&quot;\&quot;,      \&quot;salesChannel\&quot;: \&quot;1\&quot;,      \&quot;merchantName\&quot;: null,      \&quot;status\&quot;: \&quot;payment-approved\&quot;,      \&quot;statusDescription\&quot;: \&quot;Pagamento Aprovado\&quot;,      \&quot;value\&quot;: 2012,      \&quot;creationDate\&quot;: \&quot;2022-07-06T09:11:51.4597231+00:00\&quot;,      \&quot;lastChange\&quot;: \&quot;2022-07-06T09:12:00.2849749+00:00\&quot;,      \&quot;orderGroup\&quot;: \&quot;1244730712239\&quot;,      \&quot;totals\&quot;: [          {              \&quot;id\&quot;: \&quot;Items\&quot;,              \&quot;name\&quot;: \&quot;Total dos Itens\&quot;,              \&quot;value\&quot;: 2265          },          {              \&quot;id\&quot;: \&quot;Discounts\&quot;,              \&quot;name\&quot;: \&quot;Total dos Descontos\&quot;,              \&quot;value\&quot;: -453          },          {              \&quot;id\&quot;: \&quot;Shipping\&quot;,              \&quot;name\&quot;: \&quot;Total do Frete\&quot;,              \&quot;value\&quot;: 200          },          {              \&quot;id\&quot;: \&quot;Tax\&quot;,              \&quot;name\&quot;: \&quot;Total da Taxa\&quot;,              \&quot;value\&quot;: 0          }      ],      \&quot;items\&quot;: [          {              \&quot;uniqueId\&quot;: \&quot;A14AD652AC5D40FBB0137D3ADA3CB800\&quot;,              \&quot;id\&quot;: \&quot;12\&quot;,              \&quot;productId\&quot;: \&quot;8\&quot;,              \&quot;ean\&quot;: null,              \&quot;lockId\&quot;: null,              \&quot;itemAttachment\&quot;: {                  \&quot;content\&quot;: {},                  \&quot;name\&quot;: null              },              \&quot;attachments\&quot;: [],              \&quot;quantity\&quot;: 1,              \&quot;seller\&quot;: \&quot;ppxpssp\&quot;,              \&quot;name\&quot;: \&quot;Camiseta P Azul\&quot;,              \&quot;refId\&quot;: \&quot;COP01_P-A\&quot;,              \&quot;price\&quot;: 2265,              \&quot;listPrice\&quot;: 2265,              \&quot;manualPrice\&quot;: null,              \&quot;priceTags\&quot;: [                  {                      \&quot;name\&quot;: \&quot;discount@price-d0231eb3-e9a4-47b2-9c74-bc346df11ce4#e9bb430d-30b3-4461-a86e-f66f35b2915d\&quot;,                      \&quot;value\&quot;: -453,                      \&quot;isPercentual\&quot;: false,                      \&quot;identifier\&quot;: \&quot;d0231eb3-e9a4-47b2-9c74-bc346df11ce4\&quot;,                      \&quot;rawValue\&quot;: -4.53,                      \&quot;rate\&quot;: null,                      \&quot;jurisCode\&quot;: null,                      \&quot;jurisType\&quot;: null,                      \&quot;jurisName\&quot;: null                  }              ],              \&quot;imageUrl\&quot;: \&quot;https://ppxps.vteximg.com.br/arquivos/ids/155407-55-55/EE803C74-37A5-4804-B1A6-9F12D22EA505.png?v&#x3D;637559269453730000\&quot;,              \&quot;detailUrl\&quot;: \&quot;/camiseta/p\&quot;,              \&quot;components\&quot;: [],              \&quot;bundleItems\&quot;: [],              \&quot;params\&quot;: [],              \&quot;offerings\&quot;: [],              \&quot;sellerSku\&quot;: \&quot;12\&quot;,              \&quot;priceValidUntil\&quot;: \&quot;2023-07-06T09:11:04.0000000+00:00\&quot;,              \&quot;commission\&quot;: 0,              \&quot;tax\&quot;: 0,              \&quot;preSaleDate\&quot;: null,              \&quot;additionalInfo\&quot;: {                  \&quot;brandName\&quot;: \&quot;Marca TOP\&quot;,                  \&quot;brandId\&quot;: \&quot;2000001\&quot;,                  \&quot;categoriesIds\&quot;: \&quot;/7/\&quot;,                  \&quot;categories\&quot;: [                      {                          \&quot;id\&quot;: 7,                          \&quot;name\&quot;: \&quot;Roupas\&quot;                      }                  ],                  \&quot;productClusterId\&quot;: \&quot;\&quot;,                  \&quot;commercialConditionId\&quot;: \&quot;1\&quot;,                  \&quot;dimension\&quot;: {                      \&quot;cubicweight\&quot;: 1.0000,                      \&quot;height\&quot;: 6.0000,                      \&quot;length\&quot;: 10.0000,                      \&quot;weight\&quot;: 4.0000,                      \&quot;width\&quot;: 8.0000                  },                  \&quot;offeringInfo\&quot;: null,                  \&quot;offeringType\&quot;: null,                  \&quot;offeringTypeId\&quot;: null              },              \&quot;measurementUnit\&quot;: \&quot;un\&quot;,              \&quot;unitMultiplier\&quot;: 1.0000,              \&quot;sellingPrice\&quot;: 1812,              \&quot;isGift\&quot;: false,              \&quot;shippingPrice\&quot;: null,              \&quot;rewardValue\&quot;: 0,              \&quot;freightCommission\&quot;: 0,              \&quot;priceDefinition\&quot;: {                  \&quot;sellingPrices\&quot;: [                      {                          \&quot;value\&quot;: 1812,                          \&quot;quantity\&quot;: 1                      }                  ],                  \&quot;calculatedSellingPrice\&quot;: 1812,                  \&quot;total\&quot;: 1812              },              \&quot;taxCode\&quot;: \&quot;1122\&quot;,              \&quot;parentItemIndex\&quot;: null,              \&quot;parentAssemblyBinding\&quot;: null,              \&quot;callCenterOperator\&quot;: null,              \&quot;serialNumbers\&quot;: null,              \&quot;assemblies\&quot;: [],              \&quot;costPrice\&quot;: null          }      ],      \&quot;marketplaceItems\&quot;: [],      \&quot;clientProfileData\&quot;: {          \&quot;id\&quot;: \&quot;clientProfileData\&quot;,          \&quot;email\&quot;: \&quot;0bf94cbf23ff410aaaf7c707dd8a808c@ct.vtex.com.br\&quot;,          \&quot;firstName\&quot;: \&quot;Paulo\&quot;,          \&quot;lastName\&quot;: \&quot;Filho\&quot;,          \&quot;documentType\&quot;: \&quot;cpf\&quot;,          \&quot;document\&quot;: \&quot;11156703794\&quot;,          \&quot;phone\&quot;: \&quot;+5521971126360\&quot;,          \&quot;corporateName\&quot;: null,          \&quot;tradeName\&quot;: null,          \&quot;corporateDocument\&quot;: null,          \&quot;stateInscription\&quot;: null,          \&quot;corporatePhone\&quot;: null,          \&quot;isCorporate\&quot;: false,          \&quot;userProfileId\&quot;: \&quot;ca0695a8-df34-4076-8663-725041930c75\&quot;,          \&quot;customerClass\&quot;: null      },      \&quot;giftRegistryData\&quot;: null,      \&quot;marketingData\&quot;: {          \&quot;id\&quot;: \&quot;marketingData\&quot;,          \&quot;utmSource\&quot;: null,          \&quot;utmPartner\&quot;: null,          \&quot;utmMedium\&quot;: null,          \&quot;utmCampaign\&quot;: null,          \&quot;coupon\&quot;: null,          \&quot;utmiCampaign\&quot;: null,          \&quot;utmipage\&quot;: null,          \&quot;utmiPart\&quot;: null,          \&quot;marketingTags\&quot;: [              \&quot;vtex-subscription\&quot;          ]      },      \&quot;ratesAndBenefitsData\&quot;: {          \&quot;id\&quot;: \&quot;ratesAndBenefitsData\&quot;,          \&quot;rateAndBenefitsIdentifiers\&quot;: [              {                  \&quot;description\&quot;: \&quot;Desconto de 20% no pedido para assinatura\&quot;,                  \&quot;featured\&quot;: true,                  \&quot;id\&quot;: \&quot;d0231eb3-e9a4-47b2-9c74-bc346df11ce4\&quot;,                  \&quot;name\&quot;: \&quot;Desconto 20% assinante\&quot;,                  \&quot;matchedParameters\&quot;: {},                  \&quot;additionalInfo\&quot;: null              }          ]      },      \&quot;shippingData\&quot;: {          \&quot;id\&quot;: \&quot;shippingData\&quot;,          \&quot;address\&quot;: {              \&quot;addressType\&quot;: \&quot;residential\&quot;,              \&quot;receiverName\&quot;: \&quot;Paulo Filho\&quot;,              \&quot;addressId\&quot;: \&quot;1651158093975\&quot;,              \&quot;postalCode\&quot;: \&quot;21341-270\&quot;,              \&quot;city\&quot;: \&quot;Rio de Janeiro\&quot;,              \&quot;state\&quot;: \&quot;RJ\&quot;,              \&quot;country\&quot;: \&quot;BRA\&quot;,              \&quot;street\&quot;: \&quot;Rua Pinto Teles\&quot;,              \&quot;number\&quot;: \&quot;1\&quot;,              \&quot;neighborhood\&quot;: \&quot;Praça Seca\&quot;,              \&quot;complement\&quot;: null,              \&quot;reference\&quot;: null,              \&quot;geoCoordinates\&quot;: [                  -43.350608825683594,                  -22.886520385742188              ]          },          \&quot;logisticsInfo\&quot;: [              {                  \&quot;itemIndex\&quot;: 0,                  \&quot;selectedSla\&quot;: \&quot;Normal\&quot;,                  \&quot;lockTTL\&quot;: \&quot;12d\&quot;,                  \&quot;price\&quot;: 200,                  \&quot;listPrice\&quot;: 200,                  \&quot;sellingPrice\&quot;: 200,                  \&quot;deliveryWindow\&quot;: null,                  \&quot;deliveryCompany\&quot;: \&quot;Transportadora\&quot;,                  \&quot;shippingEstimate\&quot;: \&quot;2bd\&quot;,                  \&quot;shippingEstimateDate\&quot;: \&quot;2022-07-08T09:11:57.8421126+00:00\&quot;,                  \&quot;slas\&quot;: [                      {                          \&quot;id\&quot;: \&quot;Normal\&quot;,                          \&quot;name\&quot;: \&quot;Normal\&quot;,                          \&quot;shippingEstimate\&quot;: \&quot;2bd\&quot;,                          \&quot;deliveryWindow\&quot;: null,                          \&quot;price\&quot;: 200,                          \&quot;deliveryChannel\&quot;: \&quot;delivery\&quot;,                          \&quot;pickupStoreInfo\&quot;: {                              \&quot;additionalInfo\&quot;: null,                              \&quot;address\&quot;: null,                              \&quot;dockId\&quot;: null,                              \&quot;friendlyName\&quot;: null,                              \&quot;isPickupStore\&quot;: false                          },                          \&quot;polygonName\&quot;: \&quot;\&quot;,                          \&quot;lockTTL\&quot;: \&quot;12d\&quot;,                          \&quot;pickupPointId\&quot;: null,                          \&quot;transitTime\&quot;: \&quot;2bd\&quot;                      }                  ],                  \&quot;shipsTo\&quot;: [                      \&quot;BRA\&quot;                  ],                  \&quot;deliveryIds\&quot;: [                      {                          \&quot;courierId\&quot;: \&quot;1\&quot;,                          \&quot;courierName\&quot;: \&quot;Transportadora\&quot;,                          \&quot;dockId\&quot;: \&quot;169fe66\&quot;,                          \&quot;quantity\&quot;: 1,                          \&quot;warehouseId\&quot;: \&quot;166cb0c\&quot;,                          \&quot;accountCarrierName\&quot;: null                      }                  ],                  \&quot;deliveryChannel\&quot;: \&quot;delivery\&quot;,                  \&quot;pickupStoreInfo\&quot;: {                      \&quot;additionalInfo\&quot;: null,                      \&quot;address\&quot;: null,                      \&quot;dockId\&quot;: null,                      \&quot;friendlyName\&quot;: null,                      \&quot;isPickupStore\&quot;: false                  },                  \&quot;addressId\&quot;: \&quot;1651158093975\&quot;,                  \&quot;polygonName\&quot;: \&quot;\&quot;,                  \&quot;pickupPointId\&quot;: null,                  \&quot;transitTime\&quot;: \&quot;2bd\&quot;              }          ],          \&quot;trackingHints\&quot;: null,          \&quot;selectedAddresses\&quot;: [              {                  \&quot;addressId\&quot;: \&quot;1651158093975\&quot;,                  \&quot;addressType\&quot;: \&quot;residential\&quot;,                  \&quot;receiverName\&quot;: \&quot;Paulo Filho\&quot;,                  \&quot;street\&quot;: \&quot;Rua Pinto Teles\&quot;,                  \&quot;number\&quot;: \&quot;1\&quot;,                  \&quot;complement\&quot;: null,                  \&quot;neighborhood\&quot;: \&quot;Praça Seca\&quot;,                  \&quot;postalCode\&quot;: \&quot;21341-270\&quot;,                  \&quot;city\&quot;: \&quot;Rio de Janeiro\&quot;,                  \&quot;state\&quot;: \&quot;RJ\&quot;,                  \&quot;country\&quot;: \&quot;BRA\&quot;,                  \&quot;reference\&quot;: null,                  \&quot;geoCoordinates\&quot;: [                      -43.350608825683594,                      -22.886520385742188                  ]              }          ]      },      \&quot;paymentData\&quot;: {          \&quot;giftCards\&quot;: [],          \&quot;transactions\&quot;: [              {                  \&quot;isActive\&quot;: true,                  \&quot;transactionId\&quot;: \&quot;A5BF0F884F314F788F4778B464EE1648\&quot;,                  \&quot;merchantName\&quot;: \&quot;PPXPS\&quot;,                  \&quot;payments\&quot;: [                      {                          \&quot;id\&quot;: \&quot;06D8D76D4BD549EF9CC209D969ACBA84\&quot;,                          \&quot;paymentSystem\&quot;: \&quot;47\&quot;,                          \&quot;paymentSystemName\&quot;: \&quot;Cash\&quot;,                          \&quot;value\&quot;: 2012,                          \&quot;installments\&quot;: 1,                          \&quot;referenceValue\&quot;: 2012,                          \&quot;cardHolder\&quot;: null,                          \&quot;cardNumber\&quot;: null,                          \&quot;firstDigits\&quot;: null,                          \&quot;lastDigits\&quot;: null,                          \&quot;cvv2\&quot;: null,                          \&quot;expireMonth\&quot;: null,                          \&quot;expireYear\&quot;: null,                          \&quot;url\&quot;: null,                          \&quot;giftCardId\&quot;: null,                          \&quot;giftCardName\&quot;: null,                          \&quot;giftCardCaption\&quot;: null,                          \&quot;redemptionCode\&quot;: null,                          \&quot;group\&quot;: \&quot;cash\&quot;,                          \&quot;tid\&quot;: null,                          \&quot;dueDate\&quot;: null,                          \&quot;connectorResponses\&quot;: {},                          \&quot;giftCardProvider\&quot;: null,                          \&quot;giftCardAsDiscount\&quot;: null,                          \&quot;koinUrl\&quot;: null,                          \&quot;accountId\&quot;: null,                          \&quot;parentAccountId\&quot;: null,                          \&quot;bankIssuedInvoiceIdentificationNumber\&quot;: null,                          \&quot;bankIssuedInvoiceIdentificationNumberFormatted\&quot;: null,                          \&quot;bankIssuedInvoiceBarCodeNumber\&quot;: null,                          \&quot;bankIssuedInvoiceBarCodeType\&quot;: null,                          \&quot;billingAddress\&quot;: null                      }                  ]              }          ]      },      \&quot;packageAttachment\&quot;: {          \&quot;packages\&quot;: []      },      \&quot;sellers\&quot;: [          {              \&quot;id\&quot;: \&quot;ppxpssp\&quot;,              \&quot;name\&quot;: \&quot;ppxpssp\&quot;,              \&quot;logo\&quot;: \&quot;\&quot;,              \&quot;fulfillmentEndpoint\&quot;: \&quot;http://fulfillment.vtexcommerce.com.br/api/fulfillment?an&#x3D;ppxpssp&amp;affiliateId&#x3D;SLR&amp;sc&#x3D;1\&quot;          }      ],      \&quot;callCenterOperatorData\&quot;: null,      \&quot;followUpEmail\&quot;: \&quot;0a902f64ba1443c3b26ab5cb0b2aad9e@ct.vtex.com.br\&quot;,      \&quot;lastMessage\&quot;: null,      \&quot;hostname\&quot;: \&quot;ppxps\&quot;,      \&quot;invoiceData\&quot;: null,      \&quot;changesAttachment\&quot;: null,      \&quot;openTextField\&quot;: {          \&quot;value\&quot;: \&quot;Order Created By VTEX Subscription System\&quot;      },      \&quot;roundingError\&quot;: 0,      \&quot;orderFormId\&quot;: \&quot;3d59650b4e9a447d80ecfac4830926d9\&quot;,      \&quot;commercialConditionData\&quot;: null,      \&quot;isCompleted\&quot;: true,      \&quot;customData\&quot;: null,      \&quot;storePreferencesData\&quot;: {          \&quot;countryCode\&quot;: \&quot;BRA\&quot;,          \&quot;currencyCode\&quot;: \&quot;BRL\&quot;,          \&quot;currencyFormatInfo\&quot;: {              \&quot;CurrencyDecimalDigits\&quot;: 2,              \&quot;CurrencyDecimalSeparator\&quot;: \&quot;,\&quot;,              \&quot;CurrencyGroupSeparator\&quot;: \&quot;.\&quot;,              \&quot;CurrencyGroupSize\&quot;: 3,              \&quot;StartsWithCurrencySymbol\&quot;: true          },          \&quot;currencyLocale\&quot;: 1046,          \&quot;currencySymbol\&quot;: \&quot;R$\&quot;,          \&quot;timeZone\&quot;: \&quot;E. South America Standard Time\&quot;      },      \&quot;allowCancellation\&quot;: true,      \&quot;allowEdition\&quot;: false,      \&quot;isCheckedIn\&quot;: false,      \&quot;marketplace\&quot;: null,      \&quot;authorizedDate\&quot;: \&quot;2022-07-06T09:11:56.0006230+00:00\&quot;,      \&quot;invoicedDate\&quot;: null,      \&quot;cancelReason\&quot;: null,      \&quot;itemMetadata\&quot;: {          \&quot;Items\&quot;: [              {                  \&quot;Id\&quot;: \&quot;12\&quot;,                  \&quot;Seller\&quot;: \&quot;1\&quot;,                  \&quot;Name\&quot;: \&quot;Camiseta P Azul\&quot;,                  \&quot;SkuName\&quot;: \&quot;P Azul\&quot;,                  \&quot;ProductId\&quot;: \&quot;8\&quot;,                  \&quot;RefId\&quot;: \&quot;COP01_P-A\&quot;,                  \&quot;Ean\&quot;: null,                  \&quot;ImageUrl\&quot;: \&quot;http://ppxps.vteximg.com.br/arquivos/ids/155407-55-55/EE803C74-37A5-4804-B1A6-9F12D22EA505.png?v&#x3D;637559269453730000\&quot;,                  \&quot;DetailUrl\&quot;: \&quot;/camiseta/p\&quot;,                  \&quot;AssemblyOptions\&quot;: []              }          ]      },      \&quot;subscriptionData\&quot;: {          \&quot;SubscriptionGroupId\&quot;: \&quot;C191822AF072C7508F9BBBC655FE8E60\&quot;,          \&quot;Subscriptions\&quot;: [              {                  \&quot;ExecutionCount\&quot;: 274,                  \&quot;PriceAtSubscriptionDate\&quot;: 2265.0,                  \&quot;ItemIndex\&quot;: 0,                  \&quot;Plan\&quot;: {                      \&quot;type\&quot;: \&quot;RECURRING_PAYMENT\&quot;,                      \&quot;frequency\&quot;: {                          \&quot;periodicity\&quot;: \&quot;DAILY\&quot;,                          \&quot;interval\&quot;: 1                      },                      \&quot;validity\&quot;: {                          \&quot;begin\&quot;: \&quot;2021-10-05T00:00:00.0000000+00:00\&quot;,                          \&quot;end\&quot;: null                      }                  }              }          ]      },      \&quot;taxData\&quot;: null,      \&quot;checkedInPickupPointId\&quot;: null,      \&quot;cancellationData\&quot;: null  }  &#x60;&#x60;&#x60;
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. Instead of using &#x60;orderId&#x60;, you can also make the request using the sequence, a six-digit string that follows the order ID. For example, in order 1268540501456-01 (501456), the sequence is 501456. To use this parameter, replace the value between &#x60;{ }&#x60; keys in &#x60;seq{sequence-number}&#x60; with the sequence. For example: &#x60;seq501456&#x60;. (required)
     * @return GetOrder200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetOrder200Response getOrder(String accept, String contentType, String orderId) throws ApiException {
        ApiResponse<GetOrder200Response> localVarResp = getOrderWithHttpInfo(accept, contentType, orderId);
        return localVarResp.getData();
    }

    /**
     * Get order
     * This endpoint retrieves order details by searching a specific order ID or sequence number.    &gt; The &#x60;View order&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc).    &gt; 📘 Onboarding guide   &gt;  &gt; Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer&#39;s journey.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;orderId\&quot;: \&quot;1244730712239-01\&quot;,      \&quot;sequence\&quot;: \&quot;502790\&quot;,      \&quot;marketplaceOrderId\&quot;: \&quot;\&quot;,      \&quot;marketplaceServicesEndpoint\&quot;: null,      \&quot;sellerOrderId\&quot;: \&quot;SLR-1244730712239-01\&quot;,      \&quot;origin\&quot;: \&quot;Marketplace\&quot;,      \&quot;affiliateId\&quot;: \&quot;\&quot;,      \&quot;salesChannel\&quot;: \&quot;1\&quot;,      \&quot;merchantName\&quot;: null,      \&quot;status\&quot;: \&quot;payment-approved\&quot;,      \&quot;statusDescription\&quot;: \&quot;Pagamento Aprovado\&quot;,      \&quot;value\&quot;: 2012,      \&quot;creationDate\&quot;: \&quot;2022-07-06T09:11:51.4597231+00:00\&quot;,      \&quot;lastChange\&quot;: \&quot;2022-07-06T09:12:00.2849749+00:00\&quot;,      \&quot;orderGroup\&quot;: \&quot;1244730712239\&quot;,      \&quot;totals\&quot;: [          {              \&quot;id\&quot;: \&quot;Items\&quot;,              \&quot;name\&quot;: \&quot;Total dos Itens\&quot;,              \&quot;value\&quot;: 2265          },          {              \&quot;id\&quot;: \&quot;Discounts\&quot;,              \&quot;name\&quot;: \&quot;Total dos Descontos\&quot;,              \&quot;value\&quot;: -453          },          {              \&quot;id\&quot;: \&quot;Shipping\&quot;,              \&quot;name\&quot;: \&quot;Total do Frete\&quot;,              \&quot;value\&quot;: 200          },          {              \&quot;id\&quot;: \&quot;Tax\&quot;,              \&quot;name\&quot;: \&quot;Total da Taxa\&quot;,              \&quot;value\&quot;: 0          }      ],      \&quot;items\&quot;: [          {              \&quot;uniqueId\&quot;: \&quot;A14AD652AC5D40FBB0137D3ADA3CB800\&quot;,              \&quot;id\&quot;: \&quot;12\&quot;,              \&quot;productId\&quot;: \&quot;8\&quot;,              \&quot;ean\&quot;: null,              \&quot;lockId\&quot;: null,              \&quot;itemAttachment\&quot;: {                  \&quot;content\&quot;: {},                  \&quot;name\&quot;: null              },              \&quot;attachments\&quot;: [],              \&quot;quantity\&quot;: 1,              \&quot;seller\&quot;: \&quot;ppxpssp\&quot;,              \&quot;name\&quot;: \&quot;Camiseta P Azul\&quot;,              \&quot;refId\&quot;: \&quot;COP01_P-A\&quot;,              \&quot;price\&quot;: 2265,              \&quot;listPrice\&quot;: 2265,              \&quot;manualPrice\&quot;: null,              \&quot;priceTags\&quot;: [                  {                      \&quot;name\&quot;: \&quot;discount@price-d0231eb3-e9a4-47b2-9c74-bc346df11ce4#e9bb430d-30b3-4461-a86e-f66f35b2915d\&quot;,                      \&quot;value\&quot;: -453,                      \&quot;isPercentual\&quot;: false,                      \&quot;identifier\&quot;: \&quot;d0231eb3-e9a4-47b2-9c74-bc346df11ce4\&quot;,                      \&quot;rawValue\&quot;: -4.53,                      \&quot;rate\&quot;: null,                      \&quot;jurisCode\&quot;: null,                      \&quot;jurisType\&quot;: null,                      \&quot;jurisName\&quot;: null                  }              ],              \&quot;imageUrl\&quot;: \&quot;https://ppxps.vteximg.com.br/arquivos/ids/155407-55-55/EE803C74-37A5-4804-B1A6-9F12D22EA505.png?v&#x3D;637559269453730000\&quot;,              \&quot;detailUrl\&quot;: \&quot;/camiseta/p\&quot;,              \&quot;components\&quot;: [],              \&quot;bundleItems\&quot;: [],              \&quot;params\&quot;: [],              \&quot;offerings\&quot;: [],              \&quot;sellerSku\&quot;: \&quot;12\&quot;,              \&quot;priceValidUntil\&quot;: \&quot;2023-07-06T09:11:04.0000000+00:00\&quot;,              \&quot;commission\&quot;: 0,              \&quot;tax\&quot;: 0,              \&quot;preSaleDate\&quot;: null,              \&quot;additionalInfo\&quot;: {                  \&quot;brandName\&quot;: \&quot;Marca TOP\&quot;,                  \&quot;brandId\&quot;: \&quot;2000001\&quot;,                  \&quot;categoriesIds\&quot;: \&quot;/7/\&quot;,                  \&quot;categories\&quot;: [                      {                          \&quot;id\&quot;: 7,                          \&quot;name\&quot;: \&quot;Roupas\&quot;                      }                  ],                  \&quot;productClusterId\&quot;: \&quot;\&quot;,                  \&quot;commercialConditionId\&quot;: \&quot;1\&quot;,                  \&quot;dimension\&quot;: {                      \&quot;cubicweight\&quot;: 1.0000,                      \&quot;height\&quot;: 6.0000,                      \&quot;length\&quot;: 10.0000,                      \&quot;weight\&quot;: 4.0000,                      \&quot;width\&quot;: 8.0000                  },                  \&quot;offeringInfo\&quot;: null,                  \&quot;offeringType\&quot;: null,                  \&quot;offeringTypeId\&quot;: null              },              \&quot;measurementUnit\&quot;: \&quot;un\&quot;,              \&quot;unitMultiplier\&quot;: 1.0000,              \&quot;sellingPrice\&quot;: 1812,              \&quot;isGift\&quot;: false,              \&quot;shippingPrice\&quot;: null,              \&quot;rewardValue\&quot;: 0,              \&quot;freightCommission\&quot;: 0,              \&quot;priceDefinition\&quot;: {                  \&quot;sellingPrices\&quot;: [                      {                          \&quot;value\&quot;: 1812,                          \&quot;quantity\&quot;: 1                      }                  ],                  \&quot;calculatedSellingPrice\&quot;: 1812,                  \&quot;total\&quot;: 1812              },              \&quot;taxCode\&quot;: \&quot;1122\&quot;,              \&quot;parentItemIndex\&quot;: null,              \&quot;parentAssemblyBinding\&quot;: null,              \&quot;callCenterOperator\&quot;: null,              \&quot;serialNumbers\&quot;: null,              \&quot;assemblies\&quot;: [],              \&quot;costPrice\&quot;: null          }      ],      \&quot;marketplaceItems\&quot;: [],      \&quot;clientProfileData\&quot;: {          \&quot;id\&quot;: \&quot;clientProfileData\&quot;,          \&quot;email\&quot;: \&quot;0bf94cbf23ff410aaaf7c707dd8a808c@ct.vtex.com.br\&quot;,          \&quot;firstName\&quot;: \&quot;Paulo\&quot;,          \&quot;lastName\&quot;: \&quot;Filho\&quot;,          \&quot;documentType\&quot;: \&quot;cpf\&quot;,          \&quot;document\&quot;: \&quot;11156703794\&quot;,          \&quot;phone\&quot;: \&quot;+5521971126360\&quot;,          \&quot;corporateName\&quot;: null,          \&quot;tradeName\&quot;: null,          \&quot;corporateDocument\&quot;: null,          \&quot;stateInscription\&quot;: null,          \&quot;corporatePhone\&quot;: null,          \&quot;isCorporate\&quot;: false,          \&quot;userProfileId\&quot;: \&quot;ca0695a8-df34-4076-8663-725041930c75\&quot;,          \&quot;customerClass\&quot;: null      },      \&quot;giftRegistryData\&quot;: null,      \&quot;marketingData\&quot;: {          \&quot;id\&quot;: \&quot;marketingData\&quot;,          \&quot;utmSource\&quot;: null,          \&quot;utmPartner\&quot;: null,          \&quot;utmMedium\&quot;: null,          \&quot;utmCampaign\&quot;: null,          \&quot;coupon\&quot;: null,          \&quot;utmiCampaign\&quot;: null,          \&quot;utmipage\&quot;: null,          \&quot;utmiPart\&quot;: null,          \&quot;marketingTags\&quot;: [              \&quot;vtex-subscription\&quot;          ]      },      \&quot;ratesAndBenefitsData\&quot;: {          \&quot;id\&quot;: \&quot;ratesAndBenefitsData\&quot;,          \&quot;rateAndBenefitsIdentifiers\&quot;: [              {                  \&quot;description\&quot;: \&quot;Desconto de 20% no pedido para assinatura\&quot;,                  \&quot;featured\&quot;: true,                  \&quot;id\&quot;: \&quot;d0231eb3-e9a4-47b2-9c74-bc346df11ce4\&quot;,                  \&quot;name\&quot;: \&quot;Desconto 20% assinante\&quot;,                  \&quot;matchedParameters\&quot;: {},                  \&quot;additionalInfo\&quot;: null              }          ]      },      \&quot;shippingData\&quot;: {          \&quot;id\&quot;: \&quot;shippingData\&quot;,          \&quot;address\&quot;: {              \&quot;addressType\&quot;: \&quot;residential\&quot;,              \&quot;receiverName\&quot;: \&quot;Paulo Filho\&quot;,              \&quot;addressId\&quot;: \&quot;1651158093975\&quot;,              \&quot;postalCode\&quot;: \&quot;21341-270\&quot;,              \&quot;city\&quot;: \&quot;Rio de Janeiro\&quot;,              \&quot;state\&quot;: \&quot;RJ\&quot;,              \&quot;country\&quot;: \&quot;BRA\&quot;,              \&quot;street\&quot;: \&quot;Rua Pinto Teles\&quot;,              \&quot;number\&quot;: \&quot;1\&quot;,              \&quot;neighborhood\&quot;: \&quot;Praça Seca\&quot;,              \&quot;complement\&quot;: null,              \&quot;reference\&quot;: null,              \&quot;geoCoordinates\&quot;: [                  -43.350608825683594,                  -22.886520385742188              ]          },          \&quot;logisticsInfo\&quot;: [              {                  \&quot;itemIndex\&quot;: 0,                  \&quot;selectedSla\&quot;: \&quot;Normal\&quot;,                  \&quot;lockTTL\&quot;: \&quot;12d\&quot;,                  \&quot;price\&quot;: 200,                  \&quot;listPrice\&quot;: 200,                  \&quot;sellingPrice\&quot;: 200,                  \&quot;deliveryWindow\&quot;: null,                  \&quot;deliveryCompany\&quot;: \&quot;Transportadora\&quot;,                  \&quot;shippingEstimate\&quot;: \&quot;2bd\&quot;,                  \&quot;shippingEstimateDate\&quot;: \&quot;2022-07-08T09:11:57.8421126+00:00\&quot;,                  \&quot;slas\&quot;: [                      {                          \&quot;id\&quot;: \&quot;Normal\&quot;,                          \&quot;name\&quot;: \&quot;Normal\&quot;,                          \&quot;shippingEstimate\&quot;: \&quot;2bd\&quot;,                          \&quot;deliveryWindow\&quot;: null,                          \&quot;price\&quot;: 200,                          \&quot;deliveryChannel\&quot;: \&quot;delivery\&quot;,                          \&quot;pickupStoreInfo\&quot;: {                              \&quot;additionalInfo\&quot;: null,                              \&quot;address\&quot;: null,                              \&quot;dockId\&quot;: null,                              \&quot;friendlyName\&quot;: null,                              \&quot;isPickupStore\&quot;: false                          },                          \&quot;polygonName\&quot;: \&quot;\&quot;,                          \&quot;lockTTL\&quot;: \&quot;12d\&quot;,                          \&quot;pickupPointId\&quot;: null,                          \&quot;transitTime\&quot;: \&quot;2bd\&quot;                      }                  ],                  \&quot;shipsTo\&quot;: [                      \&quot;BRA\&quot;                  ],                  \&quot;deliveryIds\&quot;: [                      {                          \&quot;courierId\&quot;: \&quot;1\&quot;,                          \&quot;courierName\&quot;: \&quot;Transportadora\&quot;,                          \&quot;dockId\&quot;: \&quot;169fe66\&quot;,                          \&quot;quantity\&quot;: 1,                          \&quot;warehouseId\&quot;: \&quot;166cb0c\&quot;,                          \&quot;accountCarrierName\&quot;: null                      }                  ],                  \&quot;deliveryChannel\&quot;: \&quot;delivery\&quot;,                  \&quot;pickupStoreInfo\&quot;: {                      \&quot;additionalInfo\&quot;: null,                      \&quot;address\&quot;: null,                      \&quot;dockId\&quot;: null,                      \&quot;friendlyName\&quot;: null,                      \&quot;isPickupStore\&quot;: false                  },                  \&quot;addressId\&quot;: \&quot;1651158093975\&quot;,                  \&quot;polygonName\&quot;: \&quot;\&quot;,                  \&quot;pickupPointId\&quot;: null,                  \&quot;transitTime\&quot;: \&quot;2bd\&quot;              }          ],          \&quot;trackingHints\&quot;: null,          \&quot;selectedAddresses\&quot;: [              {                  \&quot;addressId\&quot;: \&quot;1651158093975\&quot;,                  \&quot;addressType\&quot;: \&quot;residential\&quot;,                  \&quot;receiverName\&quot;: \&quot;Paulo Filho\&quot;,                  \&quot;street\&quot;: \&quot;Rua Pinto Teles\&quot;,                  \&quot;number\&quot;: \&quot;1\&quot;,                  \&quot;complement\&quot;: null,                  \&quot;neighborhood\&quot;: \&quot;Praça Seca\&quot;,                  \&quot;postalCode\&quot;: \&quot;21341-270\&quot;,                  \&quot;city\&quot;: \&quot;Rio de Janeiro\&quot;,                  \&quot;state\&quot;: \&quot;RJ\&quot;,                  \&quot;country\&quot;: \&quot;BRA\&quot;,                  \&quot;reference\&quot;: null,                  \&quot;geoCoordinates\&quot;: [                      -43.350608825683594,                      -22.886520385742188                  ]              }          ]      },      \&quot;paymentData\&quot;: {          \&quot;giftCards\&quot;: [],          \&quot;transactions\&quot;: [              {                  \&quot;isActive\&quot;: true,                  \&quot;transactionId\&quot;: \&quot;A5BF0F884F314F788F4778B464EE1648\&quot;,                  \&quot;merchantName\&quot;: \&quot;PPXPS\&quot;,                  \&quot;payments\&quot;: [                      {                          \&quot;id\&quot;: \&quot;06D8D76D4BD549EF9CC209D969ACBA84\&quot;,                          \&quot;paymentSystem\&quot;: \&quot;47\&quot;,                          \&quot;paymentSystemName\&quot;: \&quot;Cash\&quot;,                          \&quot;value\&quot;: 2012,                          \&quot;installments\&quot;: 1,                          \&quot;referenceValue\&quot;: 2012,                          \&quot;cardHolder\&quot;: null,                          \&quot;cardNumber\&quot;: null,                          \&quot;firstDigits\&quot;: null,                          \&quot;lastDigits\&quot;: null,                          \&quot;cvv2\&quot;: null,                          \&quot;expireMonth\&quot;: null,                          \&quot;expireYear\&quot;: null,                          \&quot;url\&quot;: null,                          \&quot;giftCardId\&quot;: null,                          \&quot;giftCardName\&quot;: null,                          \&quot;giftCardCaption\&quot;: null,                          \&quot;redemptionCode\&quot;: null,                          \&quot;group\&quot;: \&quot;cash\&quot;,                          \&quot;tid\&quot;: null,                          \&quot;dueDate\&quot;: null,                          \&quot;connectorResponses\&quot;: {},                          \&quot;giftCardProvider\&quot;: null,                          \&quot;giftCardAsDiscount\&quot;: null,                          \&quot;koinUrl\&quot;: null,                          \&quot;accountId\&quot;: null,                          \&quot;parentAccountId\&quot;: null,                          \&quot;bankIssuedInvoiceIdentificationNumber\&quot;: null,                          \&quot;bankIssuedInvoiceIdentificationNumberFormatted\&quot;: null,                          \&quot;bankIssuedInvoiceBarCodeNumber\&quot;: null,                          \&quot;bankIssuedInvoiceBarCodeType\&quot;: null,                          \&quot;billingAddress\&quot;: null                      }                  ]              }          ]      },      \&quot;packageAttachment\&quot;: {          \&quot;packages\&quot;: []      },      \&quot;sellers\&quot;: [          {              \&quot;id\&quot;: \&quot;ppxpssp\&quot;,              \&quot;name\&quot;: \&quot;ppxpssp\&quot;,              \&quot;logo\&quot;: \&quot;\&quot;,              \&quot;fulfillmentEndpoint\&quot;: \&quot;http://fulfillment.vtexcommerce.com.br/api/fulfillment?an&#x3D;ppxpssp&amp;affiliateId&#x3D;SLR&amp;sc&#x3D;1\&quot;          }      ],      \&quot;callCenterOperatorData\&quot;: null,      \&quot;followUpEmail\&quot;: \&quot;0a902f64ba1443c3b26ab5cb0b2aad9e@ct.vtex.com.br\&quot;,      \&quot;lastMessage\&quot;: null,      \&quot;hostname\&quot;: \&quot;ppxps\&quot;,      \&quot;invoiceData\&quot;: null,      \&quot;changesAttachment\&quot;: null,      \&quot;openTextField\&quot;: {          \&quot;value\&quot;: \&quot;Order Created By VTEX Subscription System\&quot;      },      \&quot;roundingError\&quot;: 0,      \&quot;orderFormId\&quot;: \&quot;3d59650b4e9a447d80ecfac4830926d9\&quot;,      \&quot;commercialConditionData\&quot;: null,      \&quot;isCompleted\&quot;: true,      \&quot;customData\&quot;: null,      \&quot;storePreferencesData\&quot;: {          \&quot;countryCode\&quot;: \&quot;BRA\&quot;,          \&quot;currencyCode\&quot;: \&quot;BRL\&quot;,          \&quot;currencyFormatInfo\&quot;: {              \&quot;CurrencyDecimalDigits\&quot;: 2,              \&quot;CurrencyDecimalSeparator\&quot;: \&quot;,\&quot;,              \&quot;CurrencyGroupSeparator\&quot;: \&quot;.\&quot;,              \&quot;CurrencyGroupSize\&quot;: 3,              \&quot;StartsWithCurrencySymbol\&quot;: true          },          \&quot;currencyLocale\&quot;: 1046,          \&quot;currencySymbol\&quot;: \&quot;R$\&quot;,          \&quot;timeZone\&quot;: \&quot;E. South America Standard Time\&quot;      },      \&quot;allowCancellation\&quot;: true,      \&quot;allowEdition\&quot;: false,      \&quot;isCheckedIn\&quot;: false,      \&quot;marketplace\&quot;: null,      \&quot;authorizedDate\&quot;: \&quot;2022-07-06T09:11:56.0006230+00:00\&quot;,      \&quot;invoicedDate\&quot;: null,      \&quot;cancelReason\&quot;: null,      \&quot;itemMetadata\&quot;: {          \&quot;Items\&quot;: [              {                  \&quot;Id\&quot;: \&quot;12\&quot;,                  \&quot;Seller\&quot;: \&quot;1\&quot;,                  \&quot;Name\&quot;: \&quot;Camiseta P Azul\&quot;,                  \&quot;SkuName\&quot;: \&quot;P Azul\&quot;,                  \&quot;ProductId\&quot;: \&quot;8\&quot;,                  \&quot;RefId\&quot;: \&quot;COP01_P-A\&quot;,                  \&quot;Ean\&quot;: null,                  \&quot;ImageUrl\&quot;: \&quot;http://ppxps.vteximg.com.br/arquivos/ids/155407-55-55/EE803C74-37A5-4804-B1A6-9F12D22EA505.png?v&#x3D;637559269453730000\&quot;,                  \&quot;DetailUrl\&quot;: \&quot;/camiseta/p\&quot;,                  \&quot;AssemblyOptions\&quot;: []              }          ]      },      \&quot;subscriptionData\&quot;: {          \&quot;SubscriptionGroupId\&quot;: \&quot;C191822AF072C7508F9BBBC655FE8E60\&quot;,          \&quot;Subscriptions\&quot;: [              {                  \&quot;ExecutionCount\&quot;: 274,                  \&quot;PriceAtSubscriptionDate\&quot;: 2265.0,                  \&quot;ItemIndex\&quot;: 0,                  \&quot;Plan\&quot;: {                      \&quot;type\&quot;: \&quot;RECURRING_PAYMENT\&quot;,                      \&quot;frequency\&quot;: {                          \&quot;periodicity\&quot;: \&quot;DAILY\&quot;,                          \&quot;interval\&quot;: 1                      },                      \&quot;validity\&quot;: {                          \&quot;begin\&quot;: \&quot;2021-10-05T00:00:00.0000000+00:00\&quot;,                          \&quot;end\&quot;: null                      }                  }              }          ]      },      \&quot;taxData\&quot;: null,      \&quot;checkedInPickupPointId\&quot;: null,      \&quot;cancellationData\&quot;: null  }  &#x60;&#x60;&#x60;
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. Instead of using &#x60;orderId&#x60;, you can also make the request using the sequence, a six-digit string that follows the order ID. For example, in order 1268540501456-01 (501456), the sequence is 501456. To use this parameter, replace the value between &#x60;{ }&#x60; keys in &#x60;seq{sequence-number}&#x60; with the sequence. For example: &#x60;seq501456&#x60;. (required)
     * @return ApiResponse&lt;GetOrder200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrder200Response> getOrderWithHttpInfo(String accept, String contentType, String orderId) throws ApiException {
        okhttp3.Call localVarCall = getOrderValidateBeforeCall(accept, contentType, orderId, null);
        Type localVarReturnType = new TypeToken<GetOrder200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get order (asynchronously)
     * This endpoint retrieves order details by searching a specific order ID or sequence number.    &gt; The &#x60;View order&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc).    &gt; 📘 Onboarding guide   &gt;  &gt; Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer&#39;s journey.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;orderId\&quot;: \&quot;1244730712239-01\&quot;,      \&quot;sequence\&quot;: \&quot;502790\&quot;,      \&quot;marketplaceOrderId\&quot;: \&quot;\&quot;,      \&quot;marketplaceServicesEndpoint\&quot;: null,      \&quot;sellerOrderId\&quot;: \&quot;SLR-1244730712239-01\&quot;,      \&quot;origin\&quot;: \&quot;Marketplace\&quot;,      \&quot;affiliateId\&quot;: \&quot;\&quot;,      \&quot;salesChannel\&quot;: \&quot;1\&quot;,      \&quot;merchantName\&quot;: null,      \&quot;status\&quot;: \&quot;payment-approved\&quot;,      \&quot;statusDescription\&quot;: \&quot;Pagamento Aprovado\&quot;,      \&quot;value\&quot;: 2012,      \&quot;creationDate\&quot;: \&quot;2022-07-06T09:11:51.4597231+00:00\&quot;,      \&quot;lastChange\&quot;: \&quot;2022-07-06T09:12:00.2849749+00:00\&quot;,      \&quot;orderGroup\&quot;: \&quot;1244730712239\&quot;,      \&quot;totals\&quot;: [          {              \&quot;id\&quot;: \&quot;Items\&quot;,              \&quot;name\&quot;: \&quot;Total dos Itens\&quot;,              \&quot;value\&quot;: 2265          },          {              \&quot;id\&quot;: \&quot;Discounts\&quot;,              \&quot;name\&quot;: \&quot;Total dos Descontos\&quot;,              \&quot;value\&quot;: -453          },          {              \&quot;id\&quot;: \&quot;Shipping\&quot;,              \&quot;name\&quot;: \&quot;Total do Frete\&quot;,              \&quot;value\&quot;: 200          },          {              \&quot;id\&quot;: \&quot;Tax\&quot;,              \&quot;name\&quot;: \&quot;Total da Taxa\&quot;,              \&quot;value\&quot;: 0          }      ],      \&quot;items\&quot;: [          {              \&quot;uniqueId\&quot;: \&quot;A14AD652AC5D40FBB0137D3ADA3CB800\&quot;,              \&quot;id\&quot;: \&quot;12\&quot;,              \&quot;productId\&quot;: \&quot;8\&quot;,              \&quot;ean\&quot;: null,              \&quot;lockId\&quot;: null,              \&quot;itemAttachment\&quot;: {                  \&quot;content\&quot;: {},                  \&quot;name\&quot;: null              },              \&quot;attachments\&quot;: [],              \&quot;quantity\&quot;: 1,              \&quot;seller\&quot;: \&quot;ppxpssp\&quot;,              \&quot;name\&quot;: \&quot;Camiseta P Azul\&quot;,              \&quot;refId\&quot;: \&quot;COP01_P-A\&quot;,              \&quot;price\&quot;: 2265,              \&quot;listPrice\&quot;: 2265,              \&quot;manualPrice\&quot;: null,              \&quot;priceTags\&quot;: [                  {                      \&quot;name\&quot;: \&quot;discount@price-d0231eb3-e9a4-47b2-9c74-bc346df11ce4#e9bb430d-30b3-4461-a86e-f66f35b2915d\&quot;,                      \&quot;value\&quot;: -453,                      \&quot;isPercentual\&quot;: false,                      \&quot;identifier\&quot;: \&quot;d0231eb3-e9a4-47b2-9c74-bc346df11ce4\&quot;,                      \&quot;rawValue\&quot;: -4.53,                      \&quot;rate\&quot;: null,                      \&quot;jurisCode\&quot;: null,                      \&quot;jurisType\&quot;: null,                      \&quot;jurisName\&quot;: null                  }              ],              \&quot;imageUrl\&quot;: \&quot;https://ppxps.vteximg.com.br/arquivos/ids/155407-55-55/EE803C74-37A5-4804-B1A6-9F12D22EA505.png?v&#x3D;637559269453730000\&quot;,              \&quot;detailUrl\&quot;: \&quot;/camiseta/p\&quot;,              \&quot;components\&quot;: [],              \&quot;bundleItems\&quot;: [],              \&quot;params\&quot;: [],              \&quot;offerings\&quot;: [],              \&quot;sellerSku\&quot;: \&quot;12\&quot;,              \&quot;priceValidUntil\&quot;: \&quot;2023-07-06T09:11:04.0000000+00:00\&quot;,              \&quot;commission\&quot;: 0,              \&quot;tax\&quot;: 0,              \&quot;preSaleDate\&quot;: null,              \&quot;additionalInfo\&quot;: {                  \&quot;brandName\&quot;: \&quot;Marca TOP\&quot;,                  \&quot;brandId\&quot;: \&quot;2000001\&quot;,                  \&quot;categoriesIds\&quot;: \&quot;/7/\&quot;,                  \&quot;categories\&quot;: [                      {                          \&quot;id\&quot;: 7,                          \&quot;name\&quot;: \&quot;Roupas\&quot;                      }                  ],                  \&quot;productClusterId\&quot;: \&quot;\&quot;,                  \&quot;commercialConditionId\&quot;: \&quot;1\&quot;,                  \&quot;dimension\&quot;: {                      \&quot;cubicweight\&quot;: 1.0000,                      \&quot;height\&quot;: 6.0000,                      \&quot;length\&quot;: 10.0000,                      \&quot;weight\&quot;: 4.0000,                      \&quot;width\&quot;: 8.0000                  },                  \&quot;offeringInfo\&quot;: null,                  \&quot;offeringType\&quot;: null,                  \&quot;offeringTypeId\&quot;: null              },              \&quot;measurementUnit\&quot;: \&quot;un\&quot;,              \&quot;unitMultiplier\&quot;: 1.0000,              \&quot;sellingPrice\&quot;: 1812,              \&quot;isGift\&quot;: false,              \&quot;shippingPrice\&quot;: null,              \&quot;rewardValue\&quot;: 0,              \&quot;freightCommission\&quot;: 0,              \&quot;priceDefinition\&quot;: {                  \&quot;sellingPrices\&quot;: [                      {                          \&quot;value\&quot;: 1812,                          \&quot;quantity\&quot;: 1                      }                  ],                  \&quot;calculatedSellingPrice\&quot;: 1812,                  \&quot;total\&quot;: 1812              },              \&quot;taxCode\&quot;: \&quot;1122\&quot;,              \&quot;parentItemIndex\&quot;: null,              \&quot;parentAssemblyBinding\&quot;: null,              \&quot;callCenterOperator\&quot;: null,              \&quot;serialNumbers\&quot;: null,              \&quot;assemblies\&quot;: [],              \&quot;costPrice\&quot;: null          }      ],      \&quot;marketplaceItems\&quot;: [],      \&quot;clientProfileData\&quot;: {          \&quot;id\&quot;: \&quot;clientProfileData\&quot;,          \&quot;email\&quot;: \&quot;0bf94cbf23ff410aaaf7c707dd8a808c@ct.vtex.com.br\&quot;,          \&quot;firstName\&quot;: \&quot;Paulo\&quot;,          \&quot;lastName\&quot;: \&quot;Filho\&quot;,          \&quot;documentType\&quot;: \&quot;cpf\&quot;,          \&quot;document\&quot;: \&quot;11156703794\&quot;,          \&quot;phone\&quot;: \&quot;+5521971126360\&quot;,          \&quot;corporateName\&quot;: null,          \&quot;tradeName\&quot;: null,          \&quot;corporateDocument\&quot;: null,          \&quot;stateInscription\&quot;: null,          \&quot;corporatePhone\&quot;: null,          \&quot;isCorporate\&quot;: false,          \&quot;userProfileId\&quot;: \&quot;ca0695a8-df34-4076-8663-725041930c75\&quot;,          \&quot;customerClass\&quot;: null      },      \&quot;giftRegistryData\&quot;: null,      \&quot;marketingData\&quot;: {          \&quot;id\&quot;: \&quot;marketingData\&quot;,          \&quot;utmSource\&quot;: null,          \&quot;utmPartner\&quot;: null,          \&quot;utmMedium\&quot;: null,          \&quot;utmCampaign\&quot;: null,          \&quot;coupon\&quot;: null,          \&quot;utmiCampaign\&quot;: null,          \&quot;utmipage\&quot;: null,          \&quot;utmiPart\&quot;: null,          \&quot;marketingTags\&quot;: [              \&quot;vtex-subscription\&quot;          ]      },      \&quot;ratesAndBenefitsData\&quot;: {          \&quot;id\&quot;: \&quot;ratesAndBenefitsData\&quot;,          \&quot;rateAndBenefitsIdentifiers\&quot;: [              {                  \&quot;description\&quot;: \&quot;Desconto de 20% no pedido para assinatura\&quot;,                  \&quot;featured\&quot;: true,                  \&quot;id\&quot;: \&quot;d0231eb3-e9a4-47b2-9c74-bc346df11ce4\&quot;,                  \&quot;name\&quot;: \&quot;Desconto 20% assinante\&quot;,                  \&quot;matchedParameters\&quot;: {},                  \&quot;additionalInfo\&quot;: null              }          ]      },      \&quot;shippingData\&quot;: {          \&quot;id\&quot;: \&quot;shippingData\&quot;,          \&quot;address\&quot;: {              \&quot;addressType\&quot;: \&quot;residential\&quot;,              \&quot;receiverName\&quot;: \&quot;Paulo Filho\&quot;,              \&quot;addressId\&quot;: \&quot;1651158093975\&quot;,              \&quot;postalCode\&quot;: \&quot;21341-270\&quot;,              \&quot;city\&quot;: \&quot;Rio de Janeiro\&quot;,              \&quot;state\&quot;: \&quot;RJ\&quot;,              \&quot;country\&quot;: \&quot;BRA\&quot;,              \&quot;street\&quot;: \&quot;Rua Pinto Teles\&quot;,              \&quot;number\&quot;: \&quot;1\&quot;,              \&quot;neighborhood\&quot;: \&quot;Praça Seca\&quot;,              \&quot;complement\&quot;: null,              \&quot;reference\&quot;: null,              \&quot;geoCoordinates\&quot;: [                  -43.350608825683594,                  -22.886520385742188              ]          },          \&quot;logisticsInfo\&quot;: [              {                  \&quot;itemIndex\&quot;: 0,                  \&quot;selectedSla\&quot;: \&quot;Normal\&quot;,                  \&quot;lockTTL\&quot;: \&quot;12d\&quot;,                  \&quot;price\&quot;: 200,                  \&quot;listPrice\&quot;: 200,                  \&quot;sellingPrice\&quot;: 200,                  \&quot;deliveryWindow\&quot;: null,                  \&quot;deliveryCompany\&quot;: \&quot;Transportadora\&quot;,                  \&quot;shippingEstimate\&quot;: \&quot;2bd\&quot;,                  \&quot;shippingEstimateDate\&quot;: \&quot;2022-07-08T09:11:57.8421126+00:00\&quot;,                  \&quot;slas\&quot;: [                      {                          \&quot;id\&quot;: \&quot;Normal\&quot;,                          \&quot;name\&quot;: \&quot;Normal\&quot;,                          \&quot;shippingEstimate\&quot;: \&quot;2bd\&quot;,                          \&quot;deliveryWindow\&quot;: null,                          \&quot;price\&quot;: 200,                          \&quot;deliveryChannel\&quot;: \&quot;delivery\&quot;,                          \&quot;pickupStoreInfo\&quot;: {                              \&quot;additionalInfo\&quot;: null,                              \&quot;address\&quot;: null,                              \&quot;dockId\&quot;: null,                              \&quot;friendlyName\&quot;: null,                              \&quot;isPickupStore\&quot;: false                          },                          \&quot;polygonName\&quot;: \&quot;\&quot;,                          \&quot;lockTTL\&quot;: \&quot;12d\&quot;,                          \&quot;pickupPointId\&quot;: null,                          \&quot;transitTime\&quot;: \&quot;2bd\&quot;                      }                  ],                  \&quot;shipsTo\&quot;: [                      \&quot;BRA\&quot;                  ],                  \&quot;deliveryIds\&quot;: [                      {                          \&quot;courierId\&quot;: \&quot;1\&quot;,                          \&quot;courierName\&quot;: \&quot;Transportadora\&quot;,                          \&quot;dockId\&quot;: \&quot;169fe66\&quot;,                          \&quot;quantity\&quot;: 1,                          \&quot;warehouseId\&quot;: \&quot;166cb0c\&quot;,                          \&quot;accountCarrierName\&quot;: null                      }                  ],                  \&quot;deliveryChannel\&quot;: \&quot;delivery\&quot;,                  \&quot;pickupStoreInfo\&quot;: {                      \&quot;additionalInfo\&quot;: null,                      \&quot;address\&quot;: null,                      \&quot;dockId\&quot;: null,                      \&quot;friendlyName\&quot;: null,                      \&quot;isPickupStore\&quot;: false                  },                  \&quot;addressId\&quot;: \&quot;1651158093975\&quot;,                  \&quot;polygonName\&quot;: \&quot;\&quot;,                  \&quot;pickupPointId\&quot;: null,                  \&quot;transitTime\&quot;: \&quot;2bd\&quot;              }          ],          \&quot;trackingHints\&quot;: null,          \&quot;selectedAddresses\&quot;: [              {                  \&quot;addressId\&quot;: \&quot;1651158093975\&quot;,                  \&quot;addressType\&quot;: \&quot;residential\&quot;,                  \&quot;receiverName\&quot;: \&quot;Paulo Filho\&quot;,                  \&quot;street\&quot;: \&quot;Rua Pinto Teles\&quot;,                  \&quot;number\&quot;: \&quot;1\&quot;,                  \&quot;complement\&quot;: null,                  \&quot;neighborhood\&quot;: \&quot;Praça Seca\&quot;,                  \&quot;postalCode\&quot;: \&quot;21341-270\&quot;,                  \&quot;city\&quot;: \&quot;Rio de Janeiro\&quot;,                  \&quot;state\&quot;: \&quot;RJ\&quot;,                  \&quot;country\&quot;: \&quot;BRA\&quot;,                  \&quot;reference\&quot;: null,                  \&quot;geoCoordinates\&quot;: [                      -43.350608825683594,                      -22.886520385742188                  ]              }          ]      },      \&quot;paymentData\&quot;: {          \&quot;giftCards\&quot;: [],          \&quot;transactions\&quot;: [              {                  \&quot;isActive\&quot;: true,                  \&quot;transactionId\&quot;: \&quot;A5BF0F884F314F788F4778B464EE1648\&quot;,                  \&quot;merchantName\&quot;: \&quot;PPXPS\&quot;,                  \&quot;payments\&quot;: [                      {                          \&quot;id\&quot;: \&quot;06D8D76D4BD549EF9CC209D969ACBA84\&quot;,                          \&quot;paymentSystem\&quot;: \&quot;47\&quot;,                          \&quot;paymentSystemName\&quot;: \&quot;Cash\&quot;,                          \&quot;value\&quot;: 2012,                          \&quot;installments\&quot;: 1,                          \&quot;referenceValue\&quot;: 2012,                          \&quot;cardHolder\&quot;: null,                          \&quot;cardNumber\&quot;: null,                          \&quot;firstDigits\&quot;: null,                          \&quot;lastDigits\&quot;: null,                          \&quot;cvv2\&quot;: null,                          \&quot;expireMonth\&quot;: null,                          \&quot;expireYear\&quot;: null,                          \&quot;url\&quot;: null,                          \&quot;giftCardId\&quot;: null,                          \&quot;giftCardName\&quot;: null,                          \&quot;giftCardCaption\&quot;: null,                          \&quot;redemptionCode\&quot;: null,                          \&quot;group\&quot;: \&quot;cash\&quot;,                          \&quot;tid\&quot;: null,                          \&quot;dueDate\&quot;: null,                          \&quot;connectorResponses\&quot;: {},                          \&quot;giftCardProvider\&quot;: null,                          \&quot;giftCardAsDiscount\&quot;: null,                          \&quot;koinUrl\&quot;: null,                          \&quot;accountId\&quot;: null,                          \&quot;parentAccountId\&quot;: null,                          \&quot;bankIssuedInvoiceIdentificationNumber\&quot;: null,                          \&quot;bankIssuedInvoiceIdentificationNumberFormatted\&quot;: null,                          \&quot;bankIssuedInvoiceBarCodeNumber\&quot;: null,                          \&quot;bankIssuedInvoiceBarCodeType\&quot;: null,                          \&quot;billingAddress\&quot;: null                      }                  ]              }          ]      },      \&quot;packageAttachment\&quot;: {          \&quot;packages\&quot;: []      },      \&quot;sellers\&quot;: [          {              \&quot;id\&quot;: \&quot;ppxpssp\&quot;,              \&quot;name\&quot;: \&quot;ppxpssp\&quot;,              \&quot;logo\&quot;: \&quot;\&quot;,              \&quot;fulfillmentEndpoint\&quot;: \&quot;http://fulfillment.vtexcommerce.com.br/api/fulfillment?an&#x3D;ppxpssp&amp;affiliateId&#x3D;SLR&amp;sc&#x3D;1\&quot;          }      ],      \&quot;callCenterOperatorData\&quot;: null,      \&quot;followUpEmail\&quot;: \&quot;0a902f64ba1443c3b26ab5cb0b2aad9e@ct.vtex.com.br\&quot;,      \&quot;lastMessage\&quot;: null,      \&quot;hostname\&quot;: \&quot;ppxps\&quot;,      \&quot;invoiceData\&quot;: null,      \&quot;changesAttachment\&quot;: null,      \&quot;openTextField\&quot;: {          \&quot;value\&quot;: \&quot;Order Created By VTEX Subscription System\&quot;      },      \&quot;roundingError\&quot;: 0,      \&quot;orderFormId\&quot;: \&quot;3d59650b4e9a447d80ecfac4830926d9\&quot;,      \&quot;commercialConditionData\&quot;: null,      \&quot;isCompleted\&quot;: true,      \&quot;customData\&quot;: null,      \&quot;storePreferencesData\&quot;: {          \&quot;countryCode\&quot;: \&quot;BRA\&quot;,          \&quot;currencyCode\&quot;: \&quot;BRL\&quot;,          \&quot;currencyFormatInfo\&quot;: {              \&quot;CurrencyDecimalDigits\&quot;: 2,              \&quot;CurrencyDecimalSeparator\&quot;: \&quot;,\&quot;,              \&quot;CurrencyGroupSeparator\&quot;: \&quot;.\&quot;,              \&quot;CurrencyGroupSize\&quot;: 3,              \&quot;StartsWithCurrencySymbol\&quot;: true          },          \&quot;currencyLocale\&quot;: 1046,          \&quot;currencySymbol\&quot;: \&quot;R$\&quot;,          \&quot;timeZone\&quot;: \&quot;E. South America Standard Time\&quot;      },      \&quot;allowCancellation\&quot;: true,      \&quot;allowEdition\&quot;: false,      \&quot;isCheckedIn\&quot;: false,      \&quot;marketplace\&quot;: null,      \&quot;authorizedDate\&quot;: \&quot;2022-07-06T09:11:56.0006230+00:00\&quot;,      \&quot;invoicedDate\&quot;: null,      \&quot;cancelReason\&quot;: null,      \&quot;itemMetadata\&quot;: {          \&quot;Items\&quot;: [              {                  \&quot;Id\&quot;: \&quot;12\&quot;,                  \&quot;Seller\&quot;: \&quot;1\&quot;,                  \&quot;Name\&quot;: \&quot;Camiseta P Azul\&quot;,                  \&quot;SkuName\&quot;: \&quot;P Azul\&quot;,                  \&quot;ProductId\&quot;: \&quot;8\&quot;,                  \&quot;RefId\&quot;: \&quot;COP01_P-A\&quot;,                  \&quot;Ean\&quot;: null,                  \&quot;ImageUrl\&quot;: \&quot;http://ppxps.vteximg.com.br/arquivos/ids/155407-55-55/EE803C74-37A5-4804-B1A6-9F12D22EA505.png?v&#x3D;637559269453730000\&quot;,                  \&quot;DetailUrl\&quot;: \&quot;/camiseta/p\&quot;,                  \&quot;AssemblyOptions\&quot;: []              }          ]      },      \&quot;subscriptionData\&quot;: {          \&quot;SubscriptionGroupId\&quot;: \&quot;C191822AF072C7508F9BBBC655FE8E60\&quot;,          \&quot;Subscriptions\&quot;: [              {                  \&quot;ExecutionCount\&quot;: 274,                  \&quot;PriceAtSubscriptionDate\&quot;: 2265.0,                  \&quot;ItemIndex\&quot;: 0,                  \&quot;Plan\&quot;: {                      \&quot;type\&quot;: \&quot;RECURRING_PAYMENT\&quot;,                      \&quot;frequency\&quot;: {                          \&quot;periodicity\&quot;: \&quot;DAILY\&quot;,                          \&quot;interval\&quot;: 1                      },                      \&quot;validity\&quot;: {                          \&quot;begin\&quot;: \&quot;2021-10-05T00:00:00.0000000+00:00\&quot;,                          \&quot;end\&quot;: null                      }                  }              }          ]      },      \&quot;taxData\&quot;: null,      \&quot;checkedInPickupPointId\&quot;: null,      \&quot;cancellationData\&quot;: null  }  &#x60;&#x60;&#x60;
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. Instead of using &#x60;orderId&#x60;, you can also make the request using the sequence, a six-digit string that follows the order ID. For example, in order 1268540501456-01 (501456), the sequence is 501456. To use this parameter, replace the value between &#x60;{ }&#x60; keys in &#x60;seq{sequence-number}&#x60; with the sequence. For example: &#x60;seq501456&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderAsync(String accept, String contentType, String orderId, final ApiCallback<GetOrder200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderValidateBeforeCall(accept, contentType, orderId, _callback);
        Type localVarReturnType = new TypeToken<GetOrder200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOrders
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param fCreationDate Concatened value sufix &#x60;{{creationDate}}&#x60; and range date in Timestamp format. To use the &#x60;utc&#x60; query parameter, to filter orders by time zone, you must also fill the &#x60;f_creationDate&#x60; date parameter. (required)
     * @param orderBy You can retrieve orders lists filtering by an &#x60;OrderField&#x60; combined with an &#x60;OrderType&#x60;. To do so, you have to concatenate them: &#x60;orderBy&#x3D;{{OrderField}},{{OrderType}}&#x60;.   - &#x60;OrderField&#x60; values accepted: &#x60;creationDate&#x60;, &#x60;orderId&#x60;, &#x60;items&#x60;, &#x60;totalValue&#x60; and &#x60;origin&#x60;.   - &#x60;OrderType&#x60; values accepted: &#x60;asc&#x60; and &#x60;desc&#x60;. (optional, default to v502556llux-01,asc)
     * @param page Define the number of pages you wish to retrieve, restricted to the limit of 30 pages. (optional, default to 10)
     * @param perPage Quantity of orders for each page, the default value is 15 and it goes up to 100 orders per page. Be aware that the limit of retrieval ofthis endpoint is 30 pages. (optional, default to 15)
     * @param fHasInputInvoice Filters list to return only orders with non &#x60;null&#x60; values for the &#x60;invoiceInput&#x60; field. (optional, default to false)
     * @param q This parameter filters using Fulltext and accepts the values below. Be aware that the &#x60;+&#x60; caracter is not allowed in Fulltext Search.   - Order Id   - Client email   - Client document   - Client name (optional, default to - OrderID: v212333lux-02 
- Client email: taylor@email.com 
- Client document: 21133355524 
- Client name: Taylor)
     * @param utc Converts orders&#39; time zone to the Universal Time Coordinated (UTC) format and shows the amount of orders set for that UTC, up to the limit of 30 pages. For it to work properly, you have to associate it with the &#x60;f_creationDate&#x60; parameter. (optional, default to -2000)
     * @param fShippingEstimate You can filter orders by shipping estimate time in days by concatenating the desired number of days with the sufix &#x60;.days&#x60;. For example:   - Next 7 days: &#x60;7.days&#x60;   - Tomorrow: &#x60;1.days&#x60;   - Today: &#x60;0.days&#x60;   - Late: &#x60;-1.days&#x60; (optional, default to 0.days)
     * @param fInvoicedDate You can filter orders by invoiced date by concatenating the sufix &#x60;invoicedDate:&#x60; with the range date in Timestamp format. For example:   - 1 Day: &#x60;invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]&#x60;  - 1 Month: &#x60;invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-02-01T01:59:59.999Z]&#x60;   - 1 Year: &#x60;invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-01T01:59:59.999Z]&#x60; (optional, default to invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z])
     * @param fAuthorizedDate You can filter orders by creation date by concatenating the sufix &#x60;authorizedDate:&#x60; with the range date in Timestamp format. For example:   - 1 Day: &#x60;authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]&#x60;  - 1 Month: &#x60;authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-02-01T01:59:59.999Z]&#x60;   - 1 Year: &#x60;authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-01-01T01:59:59.999Z]&#x60; (optional, default to creationDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z])
     * @param fUtmSource You can filter orders by using a Universal Transverse Mercator (UTM) source. (optional, default to christmas_campaign)
     * @param fSellerNames You can filter orders by using a seller&#39;s name. (optional, default to SellerName)
     * @param fCallCenterOperatorName You can filter orders by using a Call Center Operator&#39;s identification. (optional, default to Operator%20Name)
     * @param fSalesChannel You can filter orders by sales channel&#39;s ([or trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) name. (optional, default to Main)
     * @param salesChannelId You can filter orders by sales channel&#39;s ([or trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID. (optional, default to 1)
     * @param fAffiliateId You can filter orders by affiliate ID. (optional, default to WLM)
     * @param fStatus You can filter orders by the following [order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196):   - &#x60;waiting-for-sellers-confirmation&#x60;   - &#x60;payment-pending&#x60;   - &#x60;payment-approved&#x60;   - &#x60;ready-for-handling&#x60;   - &#x60;handling&#x60;   - &#x60;invoiced&#x60;   - &#x60;canceled&#x60; (optional, default to ready-for-handling)
     * @param incompleteOrders When set as &#x60;true&#x60;, you retrieve [incomplete orders](https://help.vtex.com/en/tutorial/understanding-incomplete-orders), when set as &#x60;false&#x60;, you retrieve orders that are not incomplete. (optional, default to true)
     * @param fPaymentNames You can filter orders by payment type. (optional, default to Visa)
     * @param fRnB You can filter orders by rates and benefits (promotions). (optional, default to Free+Shipping)
     * @param searchField You can search orders by using one of the following criterias:   - SKU ID - &#x60;sku_Ids&amp;sku_Ids&#x60;   - Gift List ID - &#x60;listId&amp;listId&#x60;   - Transaction ID (TID) - &#x60;tid&amp;tid&#x60;   - PCI Connector&#39;s Transaction ID (TID) - &#x60;pci_tid&amp;pci_tid&#x60;   - Payment ID (PID) - &#x60;paymentId&amp;paymentId&#x60;   - Connector&#39;s NSU - &#x60;nsu&amp;nsu&#x60; (optional, default to 
- SKU ID: &#x60;25&#x60; 
- Gift List ID: &#x60;11223&#x60; 
- Transaction ID (TID): &#x60;54546300238810034995829230012&#x60; 
- PCI Connector&#39;s Transaction ID (TID): &#x60;7032909234899834298423209&#x60; 
- Payment ID (PID): &#x60;2&#x60; 
- Connector&#39;s NSU: &#x60;2437281&#x60;)
     * @param fIsInstore When set as &#x60;true&#x60;, this parameter filters orders made via [inStore](https://help.vtex.com/en/tracks/what-is-instore--zav76TFEZlAjnyBVL5tRc), and when set as &#x60;false&#x60;, it filters orders that were not made via inStore. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listOrdersCall(String accept, String contentType, String fCreationDate, String orderBy, Integer page, Integer perPage, Boolean fHasInputInvoice, String q, Integer utc, String fShippingEstimate, String fInvoicedDate, String fAuthorizedDate, String fUtmSource, String fSellerNames, String fCallCenterOperatorName, String fSalesChannel, String salesChannelId, String fAffiliateId, String fStatus, Boolean incompleteOrders, String fPaymentNames, String fRnB, String searchField, Boolean fIsInstore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/oms/pvt/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (fCreationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f_creationDate", fCreationDate));
        }

        if (fHasInputInvoice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f_hasInputInvoice", fHasInputInvoice));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (utc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("utc", utc));
        }

        if (fShippingEstimate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f_shippingEstimate", fShippingEstimate));
        }

        if (fInvoicedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f_invoicedDate", fInvoicedDate));
        }

        if (fAuthorizedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f_authorizedDate", fAuthorizedDate));
        }

        if (fUtmSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f_UtmSource", fUtmSource));
        }

        if (fSellerNames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f_sellerNames", fSellerNames));
        }

        if (fCallCenterOperatorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f_callCenterOperatorName", fCallCenterOperatorName));
        }

        if (fSalesChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f_salesChannel", fSalesChannel));
        }

        if (salesChannelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("salesChannelId", salesChannelId));
        }

        if (fAffiliateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f_affiliateId", fAffiliateId));
        }

        if (fStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f_status", fStatus));
        }

        if (incompleteOrders != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("incompleteOrders", incompleteOrders));
        }

        if (fPaymentNames != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f_paymentNames", fPaymentNames));
        }

        if (fRnB != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f_RnB", fRnB));
        }

        if (searchField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchField", searchField));
        }

        if (fIsInstore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("f_isInstore", fIsInstore));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrdersValidateBeforeCall(String accept, String contentType, String fCreationDate, String orderBy, Integer page, Integer perPage, Boolean fHasInputInvoice, String q, Integer utc, String fShippingEstimate, String fInvoicedDate, String fAuthorizedDate, String fUtmSource, String fSellerNames, String fCallCenterOperatorName, String fSalesChannel, String salesChannelId, String fAffiliateId, String fStatus, Boolean incompleteOrders, String fPaymentNames, String fRnB, String searchField, Boolean fIsInstore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling listOrders(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listOrders(Async)");
        }

        // verify the required parameter 'fCreationDate' is set
        if (fCreationDate == null) {
            throw new ApiException("Missing the required parameter 'fCreationDate' when calling listOrders(Async)");
        }

        return listOrdersCall(accept, contentType, fCreationDate, orderBy, page, perPage, fHasInputInvoice, q, utc, fShippingEstimate, fInvoicedDate, fAuthorizedDate, fUtmSource, fSellerNames, fCallCenterOperatorName, fSalesChannel, salesChannelId, fAffiliateId, fStatus, incompleteOrders, fPaymentNames, fRnB, searchField, fIsInstore, _callback);

    }

    /**
     * List orders
     * Retrieves a list of orders according to the filters described below.     The limit of information retrieval is 30 pages, the default number of orders per page is 15 and it is possible to configure it up to 100 using the  &#x60;per_page&#x60; parameter.      Be aware that as of October 3rd, 2018, this endpoint will not return the &#x60;items&#x60; property.     &gt; This should **not** be used for integrations. Use the [orders Feed or hook](https://developers.vtex.com/docs/guides/orders-feed) for this purpose.    This endpoint returns only orders that already have been indexed, which takes approximately four minutes. Because of this, the data retrieved may present inconsistencies. To get live up-to-date information and [build order integrations](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration) use the [orders Feed or hook](https://developers.vtex.com/docs/guides/orders-feed).   &gt; 📘 Onboarding guide   &gt;  &gt; Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer&#39;s journey.    
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param fCreationDate Concatened value sufix &#x60;{{creationDate}}&#x60; and range date in Timestamp format. To use the &#x60;utc&#x60; query parameter, to filter orders by time zone, you must also fill the &#x60;f_creationDate&#x60; date parameter. (required)
     * @param orderBy You can retrieve orders lists filtering by an &#x60;OrderField&#x60; combined with an &#x60;OrderType&#x60;. To do so, you have to concatenate them: &#x60;orderBy&#x3D;{{OrderField}},{{OrderType}}&#x60;.   - &#x60;OrderField&#x60; values accepted: &#x60;creationDate&#x60;, &#x60;orderId&#x60;, &#x60;items&#x60;, &#x60;totalValue&#x60; and &#x60;origin&#x60;.   - &#x60;OrderType&#x60; values accepted: &#x60;asc&#x60; and &#x60;desc&#x60;. (optional, default to v502556llux-01,asc)
     * @param page Define the number of pages you wish to retrieve, restricted to the limit of 30 pages. (optional, default to 10)
     * @param perPage Quantity of orders for each page, the default value is 15 and it goes up to 100 orders per page. Be aware that the limit of retrieval ofthis endpoint is 30 pages. (optional, default to 15)
     * @param fHasInputInvoice Filters list to return only orders with non &#x60;null&#x60; values for the &#x60;invoiceInput&#x60; field. (optional, default to false)
     * @param q This parameter filters using Fulltext and accepts the values below. Be aware that the &#x60;+&#x60; caracter is not allowed in Fulltext Search.   - Order Id   - Client email   - Client document   - Client name (optional, default to - OrderID: v212333lux-02 
- Client email: taylor@email.com 
- Client document: 21133355524 
- Client name: Taylor)
     * @param utc Converts orders&#39; time zone to the Universal Time Coordinated (UTC) format and shows the amount of orders set for that UTC, up to the limit of 30 pages. For it to work properly, you have to associate it with the &#x60;f_creationDate&#x60; parameter. (optional, default to -2000)
     * @param fShippingEstimate You can filter orders by shipping estimate time in days by concatenating the desired number of days with the sufix &#x60;.days&#x60;. For example:   - Next 7 days: &#x60;7.days&#x60;   - Tomorrow: &#x60;1.days&#x60;   - Today: &#x60;0.days&#x60;   - Late: &#x60;-1.days&#x60; (optional, default to 0.days)
     * @param fInvoicedDate You can filter orders by invoiced date by concatenating the sufix &#x60;invoicedDate:&#x60; with the range date in Timestamp format. For example:   - 1 Day: &#x60;invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]&#x60;  - 1 Month: &#x60;invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-02-01T01:59:59.999Z]&#x60;   - 1 Year: &#x60;invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-01T01:59:59.999Z]&#x60; (optional, default to invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z])
     * @param fAuthorizedDate You can filter orders by creation date by concatenating the sufix &#x60;authorizedDate:&#x60; with the range date in Timestamp format. For example:   - 1 Day: &#x60;authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]&#x60;  - 1 Month: &#x60;authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-02-01T01:59:59.999Z]&#x60;   - 1 Year: &#x60;authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-01-01T01:59:59.999Z]&#x60; (optional, default to creationDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z])
     * @param fUtmSource You can filter orders by using a Universal Transverse Mercator (UTM) source. (optional, default to christmas_campaign)
     * @param fSellerNames You can filter orders by using a seller&#39;s name. (optional, default to SellerName)
     * @param fCallCenterOperatorName You can filter orders by using a Call Center Operator&#39;s identification. (optional, default to Operator%20Name)
     * @param fSalesChannel You can filter orders by sales channel&#39;s ([or trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) name. (optional, default to Main)
     * @param salesChannelId You can filter orders by sales channel&#39;s ([or trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID. (optional, default to 1)
     * @param fAffiliateId You can filter orders by affiliate ID. (optional, default to WLM)
     * @param fStatus You can filter orders by the following [order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196):   - &#x60;waiting-for-sellers-confirmation&#x60;   - &#x60;payment-pending&#x60;   - &#x60;payment-approved&#x60;   - &#x60;ready-for-handling&#x60;   - &#x60;handling&#x60;   - &#x60;invoiced&#x60;   - &#x60;canceled&#x60; (optional, default to ready-for-handling)
     * @param incompleteOrders When set as &#x60;true&#x60;, you retrieve [incomplete orders](https://help.vtex.com/en/tutorial/understanding-incomplete-orders), when set as &#x60;false&#x60;, you retrieve orders that are not incomplete. (optional, default to true)
     * @param fPaymentNames You can filter orders by payment type. (optional, default to Visa)
     * @param fRnB You can filter orders by rates and benefits (promotions). (optional, default to Free+Shipping)
     * @param searchField You can search orders by using one of the following criterias:   - SKU ID - &#x60;sku_Ids&amp;sku_Ids&#x60;   - Gift List ID - &#x60;listId&amp;listId&#x60;   - Transaction ID (TID) - &#x60;tid&amp;tid&#x60;   - PCI Connector&#39;s Transaction ID (TID) - &#x60;pci_tid&amp;pci_tid&#x60;   - Payment ID (PID) - &#x60;paymentId&amp;paymentId&#x60;   - Connector&#39;s NSU - &#x60;nsu&amp;nsu&#x60; (optional, default to 
- SKU ID: &#x60;25&#x60; 
- Gift List ID: &#x60;11223&#x60; 
- Transaction ID (TID): &#x60;54546300238810034995829230012&#x60; 
- PCI Connector&#39;s Transaction ID (TID): &#x60;7032909234899834298423209&#x60; 
- Payment ID (PID): &#x60;2&#x60; 
- Connector&#39;s NSU: &#x60;2437281&#x60;)
     * @param fIsInstore When set as &#x60;true&#x60;, this parameter filters orders made via [inStore](https://help.vtex.com/en/tracks/what-is-instore--zav76TFEZlAjnyBVL5tRc), and when set as &#x60;false&#x60;, it filters orders that were not made via inStore. (optional, default to true)
     * @return ListOrders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ListOrders listOrders(String accept, String contentType, String fCreationDate, String orderBy, Integer page, Integer perPage, Boolean fHasInputInvoice, String q, Integer utc, String fShippingEstimate, String fInvoicedDate, String fAuthorizedDate, String fUtmSource, String fSellerNames, String fCallCenterOperatorName, String fSalesChannel, String salesChannelId, String fAffiliateId, String fStatus, Boolean incompleteOrders, String fPaymentNames, String fRnB, String searchField, Boolean fIsInstore) throws ApiException {
        ApiResponse<ListOrders> localVarResp = listOrdersWithHttpInfo(accept, contentType, fCreationDate, orderBy, page, perPage, fHasInputInvoice, q, utc, fShippingEstimate, fInvoicedDate, fAuthorizedDate, fUtmSource, fSellerNames, fCallCenterOperatorName, fSalesChannel, salesChannelId, fAffiliateId, fStatus, incompleteOrders, fPaymentNames, fRnB, searchField, fIsInstore);
        return localVarResp.getData();
    }

    /**
     * List orders
     * Retrieves a list of orders according to the filters described below.     The limit of information retrieval is 30 pages, the default number of orders per page is 15 and it is possible to configure it up to 100 using the  &#x60;per_page&#x60; parameter.      Be aware that as of October 3rd, 2018, this endpoint will not return the &#x60;items&#x60; property.     &gt; This should **not** be used for integrations. Use the [orders Feed or hook](https://developers.vtex.com/docs/guides/orders-feed) for this purpose.    This endpoint returns only orders that already have been indexed, which takes approximately four minutes. Because of this, the data retrieved may present inconsistencies. To get live up-to-date information and [build order integrations](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration) use the [orders Feed or hook](https://developers.vtex.com/docs/guides/orders-feed).   &gt; 📘 Onboarding guide   &gt;  &gt; Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer&#39;s journey.    
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param fCreationDate Concatened value sufix &#x60;{{creationDate}}&#x60; and range date in Timestamp format. To use the &#x60;utc&#x60; query parameter, to filter orders by time zone, you must also fill the &#x60;f_creationDate&#x60; date parameter. (required)
     * @param orderBy You can retrieve orders lists filtering by an &#x60;OrderField&#x60; combined with an &#x60;OrderType&#x60;. To do so, you have to concatenate them: &#x60;orderBy&#x3D;{{OrderField}},{{OrderType}}&#x60;.   - &#x60;OrderField&#x60; values accepted: &#x60;creationDate&#x60;, &#x60;orderId&#x60;, &#x60;items&#x60;, &#x60;totalValue&#x60; and &#x60;origin&#x60;.   - &#x60;OrderType&#x60; values accepted: &#x60;asc&#x60; and &#x60;desc&#x60;. (optional, default to v502556llux-01,asc)
     * @param page Define the number of pages you wish to retrieve, restricted to the limit of 30 pages. (optional, default to 10)
     * @param perPage Quantity of orders for each page, the default value is 15 and it goes up to 100 orders per page. Be aware that the limit of retrieval ofthis endpoint is 30 pages. (optional, default to 15)
     * @param fHasInputInvoice Filters list to return only orders with non &#x60;null&#x60; values for the &#x60;invoiceInput&#x60; field. (optional, default to false)
     * @param q This parameter filters using Fulltext and accepts the values below. Be aware that the &#x60;+&#x60; caracter is not allowed in Fulltext Search.   - Order Id   - Client email   - Client document   - Client name (optional, default to - OrderID: v212333lux-02 
- Client email: taylor@email.com 
- Client document: 21133355524 
- Client name: Taylor)
     * @param utc Converts orders&#39; time zone to the Universal Time Coordinated (UTC) format and shows the amount of orders set for that UTC, up to the limit of 30 pages. For it to work properly, you have to associate it with the &#x60;f_creationDate&#x60; parameter. (optional, default to -2000)
     * @param fShippingEstimate You can filter orders by shipping estimate time in days by concatenating the desired number of days with the sufix &#x60;.days&#x60;. For example:   - Next 7 days: &#x60;7.days&#x60;   - Tomorrow: &#x60;1.days&#x60;   - Today: &#x60;0.days&#x60;   - Late: &#x60;-1.days&#x60; (optional, default to 0.days)
     * @param fInvoicedDate You can filter orders by invoiced date by concatenating the sufix &#x60;invoicedDate:&#x60; with the range date in Timestamp format. For example:   - 1 Day: &#x60;invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]&#x60;  - 1 Month: &#x60;invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-02-01T01:59:59.999Z]&#x60;   - 1 Year: &#x60;invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-01T01:59:59.999Z]&#x60; (optional, default to invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z])
     * @param fAuthorizedDate You can filter orders by creation date by concatenating the sufix &#x60;authorizedDate:&#x60; with the range date in Timestamp format. For example:   - 1 Day: &#x60;authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]&#x60;  - 1 Month: &#x60;authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-02-01T01:59:59.999Z]&#x60;   - 1 Year: &#x60;authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-01-01T01:59:59.999Z]&#x60; (optional, default to creationDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z])
     * @param fUtmSource You can filter orders by using a Universal Transverse Mercator (UTM) source. (optional, default to christmas_campaign)
     * @param fSellerNames You can filter orders by using a seller&#39;s name. (optional, default to SellerName)
     * @param fCallCenterOperatorName You can filter orders by using a Call Center Operator&#39;s identification. (optional, default to Operator%20Name)
     * @param fSalesChannel You can filter orders by sales channel&#39;s ([or trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) name. (optional, default to Main)
     * @param salesChannelId You can filter orders by sales channel&#39;s ([or trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID. (optional, default to 1)
     * @param fAffiliateId You can filter orders by affiliate ID. (optional, default to WLM)
     * @param fStatus You can filter orders by the following [order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196):   - &#x60;waiting-for-sellers-confirmation&#x60;   - &#x60;payment-pending&#x60;   - &#x60;payment-approved&#x60;   - &#x60;ready-for-handling&#x60;   - &#x60;handling&#x60;   - &#x60;invoiced&#x60;   - &#x60;canceled&#x60; (optional, default to ready-for-handling)
     * @param incompleteOrders When set as &#x60;true&#x60;, you retrieve [incomplete orders](https://help.vtex.com/en/tutorial/understanding-incomplete-orders), when set as &#x60;false&#x60;, you retrieve orders that are not incomplete. (optional, default to true)
     * @param fPaymentNames You can filter orders by payment type. (optional, default to Visa)
     * @param fRnB You can filter orders by rates and benefits (promotions). (optional, default to Free+Shipping)
     * @param searchField You can search orders by using one of the following criterias:   - SKU ID - &#x60;sku_Ids&amp;sku_Ids&#x60;   - Gift List ID - &#x60;listId&amp;listId&#x60;   - Transaction ID (TID) - &#x60;tid&amp;tid&#x60;   - PCI Connector&#39;s Transaction ID (TID) - &#x60;pci_tid&amp;pci_tid&#x60;   - Payment ID (PID) - &#x60;paymentId&amp;paymentId&#x60;   - Connector&#39;s NSU - &#x60;nsu&amp;nsu&#x60; (optional, default to 
- SKU ID: &#x60;25&#x60; 
- Gift List ID: &#x60;11223&#x60; 
- Transaction ID (TID): &#x60;54546300238810034995829230012&#x60; 
- PCI Connector&#39;s Transaction ID (TID): &#x60;7032909234899834298423209&#x60; 
- Payment ID (PID): &#x60;2&#x60; 
- Connector&#39;s NSU: &#x60;2437281&#x60;)
     * @param fIsInstore When set as &#x60;true&#x60;, this parameter filters orders made via [inStore](https://help.vtex.com/en/tracks/what-is-instore--zav76TFEZlAjnyBVL5tRc), and when set as &#x60;false&#x60;, it filters orders that were not made via inStore. (optional, default to true)
     * @return ApiResponse&lt;ListOrders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ListOrders> listOrdersWithHttpInfo(String accept, String contentType, String fCreationDate, String orderBy, Integer page, Integer perPage, Boolean fHasInputInvoice, String q, Integer utc, String fShippingEstimate, String fInvoicedDate, String fAuthorizedDate, String fUtmSource, String fSellerNames, String fCallCenterOperatorName, String fSalesChannel, String salesChannelId, String fAffiliateId, String fStatus, Boolean incompleteOrders, String fPaymentNames, String fRnB, String searchField, Boolean fIsInstore) throws ApiException {
        okhttp3.Call localVarCall = listOrdersValidateBeforeCall(accept, contentType, fCreationDate, orderBy, page, perPage, fHasInputInvoice, q, utc, fShippingEstimate, fInvoicedDate, fAuthorizedDate, fUtmSource, fSellerNames, fCallCenterOperatorName, fSalesChannel, salesChannelId, fAffiliateId, fStatus, incompleteOrders, fPaymentNames, fRnB, searchField, fIsInstore, null);
        Type localVarReturnType = new TypeToken<ListOrders>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List orders (asynchronously)
     * Retrieves a list of orders according to the filters described below.     The limit of information retrieval is 30 pages, the default number of orders per page is 15 and it is possible to configure it up to 100 using the  &#x60;per_page&#x60; parameter.      Be aware that as of October 3rd, 2018, this endpoint will not return the &#x60;items&#x60; property.     &gt; This should **not** be used for integrations. Use the [orders Feed or hook](https://developers.vtex.com/docs/guides/orders-feed) for this purpose.    This endpoint returns only orders that already have been indexed, which takes approximately four minutes. Because of this, the data retrieved may present inconsistencies. To get live up-to-date information and [build order integrations](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration) use the [orders Feed or hook](https://developers.vtex.com/docs/guides/orders-feed).   &gt; 📘 Onboarding guide   &gt;  &gt; Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer&#39;s journey.    
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param fCreationDate Concatened value sufix &#x60;{{creationDate}}&#x60; and range date in Timestamp format. To use the &#x60;utc&#x60; query parameter, to filter orders by time zone, you must also fill the &#x60;f_creationDate&#x60; date parameter. (required)
     * @param orderBy You can retrieve orders lists filtering by an &#x60;OrderField&#x60; combined with an &#x60;OrderType&#x60;. To do so, you have to concatenate them: &#x60;orderBy&#x3D;{{OrderField}},{{OrderType}}&#x60;.   - &#x60;OrderField&#x60; values accepted: &#x60;creationDate&#x60;, &#x60;orderId&#x60;, &#x60;items&#x60;, &#x60;totalValue&#x60; and &#x60;origin&#x60;.   - &#x60;OrderType&#x60; values accepted: &#x60;asc&#x60; and &#x60;desc&#x60;. (optional, default to v502556llux-01,asc)
     * @param page Define the number of pages you wish to retrieve, restricted to the limit of 30 pages. (optional, default to 10)
     * @param perPage Quantity of orders for each page, the default value is 15 and it goes up to 100 orders per page. Be aware that the limit of retrieval ofthis endpoint is 30 pages. (optional, default to 15)
     * @param fHasInputInvoice Filters list to return only orders with non &#x60;null&#x60; values for the &#x60;invoiceInput&#x60; field. (optional, default to false)
     * @param q This parameter filters using Fulltext and accepts the values below. Be aware that the &#x60;+&#x60; caracter is not allowed in Fulltext Search.   - Order Id   - Client email   - Client document   - Client name (optional, default to - OrderID: v212333lux-02 
- Client email: taylor@email.com 
- Client document: 21133355524 
- Client name: Taylor)
     * @param utc Converts orders&#39; time zone to the Universal Time Coordinated (UTC) format and shows the amount of orders set for that UTC, up to the limit of 30 pages. For it to work properly, you have to associate it with the &#x60;f_creationDate&#x60; parameter. (optional, default to -2000)
     * @param fShippingEstimate You can filter orders by shipping estimate time in days by concatenating the desired number of days with the sufix &#x60;.days&#x60;. For example:   - Next 7 days: &#x60;7.days&#x60;   - Tomorrow: &#x60;1.days&#x60;   - Today: &#x60;0.days&#x60;   - Late: &#x60;-1.days&#x60; (optional, default to 0.days)
     * @param fInvoicedDate You can filter orders by invoiced date by concatenating the sufix &#x60;invoicedDate:&#x60; with the range date in Timestamp format. For example:   - 1 Day: &#x60;invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]&#x60;  - 1 Month: &#x60;invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-02-01T01:59:59.999Z]&#x60;   - 1 Year: &#x60;invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-01T01:59:59.999Z]&#x60; (optional, default to invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z])
     * @param fAuthorizedDate You can filter orders by creation date by concatenating the sufix &#x60;authorizedDate:&#x60; with the range date in Timestamp format. For example:   - 1 Day: &#x60;authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]&#x60;  - 1 Month: &#x60;authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-02-01T01:59:59.999Z]&#x60;   - 1 Year: &#x60;authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-01-01T01:59:59.999Z]&#x60; (optional, default to creationDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z])
     * @param fUtmSource You can filter orders by using a Universal Transverse Mercator (UTM) source. (optional, default to christmas_campaign)
     * @param fSellerNames You can filter orders by using a seller&#39;s name. (optional, default to SellerName)
     * @param fCallCenterOperatorName You can filter orders by using a Call Center Operator&#39;s identification. (optional, default to Operator%20Name)
     * @param fSalesChannel You can filter orders by sales channel&#39;s ([or trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) name. (optional, default to Main)
     * @param salesChannelId You can filter orders by sales channel&#39;s ([or trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID. (optional, default to 1)
     * @param fAffiliateId You can filter orders by affiliate ID. (optional, default to WLM)
     * @param fStatus You can filter orders by the following [order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196):   - &#x60;waiting-for-sellers-confirmation&#x60;   - &#x60;payment-pending&#x60;   - &#x60;payment-approved&#x60;   - &#x60;ready-for-handling&#x60;   - &#x60;handling&#x60;   - &#x60;invoiced&#x60;   - &#x60;canceled&#x60; (optional, default to ready-for-handling)
     * @param incompleteOrders When set as &#x60;true&#x60;, you retrieve [incomplete orders](https://help.vtex.com/en/tutorial/understanding-incomplete-orders), when set as &#x60;false&#x60;, you retrieve orders that are not incomplete. (optional, default to true)
     * @param fPaymentNames You can filter orders by payment type. (optional, default to Visa)
     * @param fRnB You can filter orders by rates and benefits (promotions). (optional, default to Free+Shipping)
     * @param searchField You can search orders by using one of the following criterias:   - SKU ID - &#x60;sku_Ids&amp;sku_Ids&#x60;   - Gift List ID - &#x60;listId&amp;listId&#x60;   - Transaction ID (TID) - &#x60;tid&amp;tid&#x60;   - PCI Connector&#39;s Transaction ID (TID) - &#x60;pci_tid&amp;pci_tid&#x60;   - Payment ID (PID) - &#x60;paymentId&amp;paymentId&#x60;   - Connector&#39;s NSU - &#x60;nsu&amp;nsu&#x60; (optional, default to 
- SKU ID: &#x60;25&#x60; 
- Gift List ID: &#x60;11223&#x60; 
- Transaction ID (TID): &#x60;54546300238810034995829230012&#x60; 
- PCI Connector&#39;s Transaction ID (TID): &#x60;7032909234899834298423209&#x60; 
- Payment ID (PID): &#x60;2&#x60; 
- Connector&#39;s NSU: &#x60;2437281&#x60;)
     * @param fIsInstore When set as &#x60;true&#x60;, this parameter filters orders made via [inStore](https://help.vtex.com/en/tracks/what-is-instore--zav76TFEZlAjnyBVL5tRc), and when set as &#x60;false&#x60;, it filters orders that were not made via inStore. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Cache-Control -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * Expires -  <br>  * Pragma -  <br>  * Server -  <br>  * Vary -  <br>  * X-CDNIgnore -  <br>  * X-Powered-by-VTEX-Janus-Edge -  <br>  * X-Track -  <br>  * X-VTEX-Janus-Router-Backend-App -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listOrdersAsync(String accept, String contentType, String fCreationDate, String orderBy, Integer page, Integer perPage, Boolean fHasInputInvoice, String q, Integer utc, String fShippingEstimate, String fInvoicedDate, String fAuthorizedDate, String fUtmSource, String fSellerNames, String fCallCenterOperatorName, String fSalesChannel, String salesChannelId, String fAffiliateId, String fStatus, Boolean incompleteOrders, String fPaymentNames, String fRnB, String searchField, Boolean fIsInstore, final ApiCallback<ListOrders> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrdersValidateBeforeCall(accept, contentType, fCreationDate, orderBy, page, perPage, fHasInputInvoice, q, utc, fShippingEstimate, fInvoicedDate, fAuthorizedDate, fUtmSource, fSellerNames, fCallCenterOperatorName, fSalesChannel, salesChannelId, fAffiliateId, fStatus, incompleteOrders, fPaymentNames, fRnB, searchField, fIsInstore, _callback);
        Type localVarReturnType = new TypeToken<ListOrders>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerChange
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param orderId ID that identifies the order in the seller. (required)
     * @param registerChangeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerChangeCall(String contentType, String accept, String orderId, RegisterChangeRequest registerChangeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerChangeRequest;

        // create path and map variables
        String localVarPath = "/api/oms/pvt/orders/{orderId}/changes"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerChangeValidateBeforeCall(String contentType, String accept, String orderId, RegisterChangeRequest registerChangeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling registerChange(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling registerChange(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling registerChange(Async)");
        }

        // verify the required parameter 'registerChangeRequest' is set
        if (registerChangeRequest == null) {
            throw new ApiException("Missing the required parameter 'registerChangeRequest' when calling registerChange(Async)");
        }

        return registerChangeCall(contentType, accept, orderId, registerChangeRequest, _callback);

    }

    /**
     * Register change on order
     *   &gt; Timeout settings  &gt;  &gt; This is a synchronous API, which means the application requests data and waits until a value is returned. This behavior can cause timeout errors; to avoid them, we recommend setting the timeout in 20 seconds.     This request allows [changing an order](https://help.vtex.com/en/tutorial/changing-items-from-a-completed-order--tutorials_190) by:  - Adding items to an order  - Removing items from an order  - Applying discounts to the total value of the order  - Incrementing the total value of the order.   In those scenarios of order changes, it is possible to insert a [Partial invoice](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe). The total value of the order will be updated after the insertion of the invoice, even when there is a partial invoice scenario. The updated value is settled by VTEX&#39;s Payment Gateway. The reimbursement for the shopper is automatic.     This action can only be done for orders in these status:  - &#x60;handling&#x60;  - &#x60;waiting-for-fulfillment&#x60;     &gt; The &#x60;Change order&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param orderId ID that identifies the order in the seller. (required)
     * @param registerChangeRequest  (required)
     * @return RegisterChange
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RegisterChange registerChange(String contentType, String accept, String orderId, RegisterChangeRequest registerChangeRequest) throws ApiException {
        ApiResponse<RegisterChange> localVarResp = registerChangeWithHttpInfo(contentType, accept, orderId, registerChangeRequest);
        return localVarResp.getData();
    }

    /**
     * Register change on order
     *   &gt; Timeout settings  &gt;  &gt; This is a synchronous API, which means the application requests data and waits until a value is returned. This behavior can cause timeout errors; to avoid them, we recommend setting the timeout in 20 seconds.     This request allows [changing an order](https://help.vtex.com/en/tutorial/changing-items-from-a-completed-order--tutorials_190) by:  - Adding items to an order  - Removing items from an order  - Applying discounts to the total value of the order  - Incrementing the total value of the order.   In those scenarios of order changes, it is possible to insert a [Partial invoice](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe). The total value of the order will be updated after the insertion of the invoice, even when there is a partial invoice scenario. The updated value is settled by VTEX&#39;s Payment Gateway. The reimbursement for the shopper is automatic.     This action can only be done for orders in these status:  - &#x60;handling&#x60;  - &#x60;waiting-for-fulfillment&#x60;     &gt; The &#x60;Change order&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param orderId ID that identifies the order in the seller. (required)
     * @param registerChangeRequest  (required)
     * @return ApiResponse&lt;RegisterChange&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterChange> registerChangeWithHttpInfo(String contentType, String accept, String orderId, RegisterChangeRequest registerChangeRequest) throws ApiException {
        okhttp3.Call localVarCall = registerChangeValidateBeforeCall(contentType, accept, orderId, registerChangeRequest, null);
        Type localVarReturnType = new TypeToken<RegisterChange>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register change on order (asynchronously)
     *   &gt; Timeout settings  &gt;  &gt; This is a synchronous API, which means the application requests data and waits until a value is returned. This behavior can cause timeout errors; to avoid them, we recommend setting the timeout in 20 seconds.     This request allows [changing an order](https://help.vtex.com/en/tutorial/changing-items-from-a-completed-order--tutorials_190) by:  - Adding items to an order  - Removing items from an order  - Applying discounts to the total value of the order  - Incrementing the total value of the order.   In those scenarios of order changes, it is possible to insert a [Partial invoice](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe). The total value of the order will be updated after the insertion of the invoice, even when there is a partial invoice scenario. The updated value is settled by VTEX&#39;s Payment Gateway. The reimbursement for the shopper is automatic.     This action can only be done for orders in these status:  - &#x60;handling&#x60;  - &#x60;waiting-for-fulfillment&#x60;     &gt; The &#x60;Change order&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param orderId ID that identifies the order in the seller. (required)
     * @param registerChangeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerChangeAsync(String contentType, String accept, String orderId, RegisterChangeRequest registerChangeRequest, final ApiCallback<RegisterChange> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerChangeValidateBeforeCall(contentType, accept, orderId, registerChangeRequest, _callback);
        Type localVarReturnType = new TypeToken<RegisterChange>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startHandling
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> [No content](https://httpstatuses.com/204) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> [Unauthorized](https://httpstatuses.com/401) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> [Forbidden](https://httpstatuses.com/403) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> [Not found](https://httpstatuses.com/404) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> [Conflict](https://httpstatuses.com/409) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> [Too many requests](https://httpstatuses.com/429) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startHandlingCall(String accept, String contentType, String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/oms/pvt/orders/{orderId}/start-handling"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startHandlingValidateBeforeCall(String accept, String contentType, String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling startHandling(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling startHandling(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling startHandling(Async)");
        }

        return startHandlingCall(accept, contentType, orderId, _callback);

    }

    /**
     * Start handling order
     * Changes the status of an order to indicate that it is in &#x60;handling&#x60;.    &gt; Expect a &#x60;status 204&#x60; response with no content in case of a successful request. The store must validate this response to retry the call if the response differs from the &#x60;204&#x60; code, making this flow the store&#39;s responsibility. This endpoint can also respond with &#x60;status 500&#x60;.     &gt; The &#x60;Change order workflow status&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> [No content](https://httpstatuses.com/204) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> [Unauthorized](https://httpstatuses.com/401) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> [Forbidden](https://httpstatuses.com/403) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> [Not found](https://httpstatuses.com/404) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> [Conflict](https://httpstatuses.com/409) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> [Too many requests](https://httpstatuses.com/429) </td><td>  -  </td></tr>
     </table>
     */
    public void startHandling(String accept, String contentType, String orderId) throws ApiException {
        startHandlingWithHttpInfo(accept, contentType, orderId);
    }

    /**
     * Start handling order
     * Changes the status of an order to indicate that it is in &#x60;handling&#x60;.    &gt; Expect a &#x60;status 204&#x60; response with no content in case of a successful request. The store must validate this response to retry the call if the response differs from the &#x60;204&#x60; code, making this flow the store&#39;s responsibility. This endpoint can also respond with &#x60;status 500&#x60;.     &gt; The &#x60;Change order workflow status&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> [No content](https://httpstatuses.com/204) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> [Unauthorized](https://httpstatuses.com/401) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> [Forbidden](https://httpstatuses.com/403) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> [Not found](https://httpstatuses.com/404) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> [Conflict](https://httpstatuses.com/409) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> [Too many requests](https://httpstatuses.com/429) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> startHandlingWithHttpInfo(String accept, String contentType, String orderId) throws ApiException {
        okhttp3.Call localVarCall = startHandlingValidateBeforeCall(accept, contentType, orderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start handling order (asynchronously)
     * Changes the status of an order to indicate that it is in &#x60;handling&#x60;.    &gt; Expect a &#x60;status 204&#x60; response with no content in case of a successful request. The store must validate this response to retry the call if the response differs from the &#x60;204&#x60; code, making this flow the store&#39;s responsibility. This endpoint can also respond with &#x60;status 500&#x60;.     &gt; The &#x60;Change order workflow status&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> [No content](https://httpstatuses.com/204) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> [Unauthorized](https://httpstatuses.com/401) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> [Forbidden](https://httpstatuses.com/403) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> [Not found](https://httpstatuses.com/404) </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> [Conflict](https://httpstatuses.com/409) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> [Too many requests](https://httpstatuses.com/429) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startHandlingAsync(String accept, String contentType, String orderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = startHandlingValidateBeforeCall(accept, contentType, orderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
