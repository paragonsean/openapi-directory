/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetPaymenttransaction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getPaymenttransaction
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymenttransactionCall(String accept, String contentType, String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/oms/pvt/orders/{orderId}/payment-transaction"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymenttransactionValidateBeforeCall(String accept, String contentType, String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getPaymenttransaction(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getPaymenttransaction(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getPaymenttransaction(Async)");
        }

        return getPaymenttransactionCall(accept, contentType, orderId, _callback);

    }

    /**
     * Retrieve payment transaction
     * Retrieves transaction details by order ID. All events in the transaction will be registered in this call&#39;s response body.   In scenarios of [order changes](https://developers.vtex.com/vtex-rest-api/reference/registerchange), it is possible to insert a [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe). The total value of the order will be updated after the insertion of the invoice, even when there is a [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe) scenario. The updated value is settled by VTEX&#39;s Payment Gateway. The reimbursement for the shopper is automatic.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @return GetPaymenttransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPaymenttransaction getPaymenttransaction(String accept, String contentType, String orderId) throws ApiException {
        ApiResponse<GetPaymenttransaction> localVarResp = getPaymenttransactionWithHttpInfo(accept, contentType, orderId);
        return localVarResp.getData();
    }

    /**
     * Retrieve payment transaction
     * Retrieves transaction details by order ID. All events in the transaction will be registered in this call&#39;s response body.   In scenarios of [order changes](https://developers.vtex.com/vtex-rest-api/reference/registerchange), it is possible to insert a [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe). The total value of the order will be updated after the insertion of the invoice, even when there is a [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe) scenario. The updated value is settled by VTEX&#39;s Payment Gateway. The reimbursement for the shopper is automatic.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @return ApiResponse&lt;GetPaymenttransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPaymenttransaction> getPaymenttransactionWithHttpInfo(String accept, String contentType, String orderId) throws ApiException {
        okhttp3.Call localVarCall = getPaymenttransactionValidateBeforeCall(accept, contentType, orderId, null);
        Type localVarReturnType = new TypeToken<GetPaymenttransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve payment transaction (asynchronously)
     * Retrieves transaction details by order ID. All events in the transaction will be registered in this call&#39;s response body.   In scenarios of [order changes](https://developers.vtex.com/vtex-rest-api/reference/registerchange), it is possible to insert a [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe). The total value of the order will be updated after the insertion of the invoice, even when there is a [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe) scenario. The updated value is settled by VTEX&#39;s Payment Gateway. The reimbursement for the shopper is automatic.
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymenttransactionAsync(String accept, String contentType, String orderId, final ApiCallback<GetPaymenttransaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymenttransactionValidateBeforeCall(accept, contentType, orderId, _callback);
        Type localVarReturnType = new TypeToken<GetPaymenttransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendPaymentNotification
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @param paymentId VTEX payment identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The credentials are not enabled to access the service. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Value not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendPaymentNotificationCall(String accept, String contentType, String orderId, String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/oms/pvt/orders/{orderId}/payments/{paymentId}/payment-notification"
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()))
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendPaymentNotificationValidateBeforeCall(String accept, String contentType, String orderId, String paymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling sendPaymentNotification(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling sendPaymentNotification(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling sendPaymentNotification(Async)");
        }

        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling sendPaymentNotification(Async)");
        }

        return sendPaymentNotificationCall(accept, contentType, orderId, paymentId, _callback);

    }

    /**
     * Send payment notification
     * Send a payment notification of a given order, by order ID.    &gt; The &#x60;Notify payment&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @param paymentId VTEX payment identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The credentials are not enabled to access the service. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Value not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
     </table>
     */
    public void sendPaymentNotification(String accept, String contentType, String orderId, String paymentId) throws ApiException {
        sendPaymentNotificationWithHttpInfo(accept, contentType, orderId, paymentId);
    }

    /**
     * Send payment notification
     * Send a payment notification of a given order, by order ID.    &gt; The &#x60;Notify payment&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @param paymentId VTEX payment identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The credentials are not enabled to access the service. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Value not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sendPaymentNotificationWithHttpInfo(String accept, String contentType, String orderId, String paymentId) throws ApiException {
        okhttp3.Call localVarCall = sendPaymentNotificationValidateBeforeCall(accept, contentType, orderId, paymentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Send payment notification (asynchronously)
     * Send a payment notification of a given order, by order ID.    &gt; The &#x60;Notify payment&#x60; resource is needed to use this API request. This is included in &#x60;OMS - Full access&#x60; and &#x60;IntegrationProfile - Fulfillment Oms&#x60;, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param orderId Order ID is a unique code that identifies an order. (required)
     * @param paymentId VTEX payment identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The credentials are not enabled to access the service. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Value not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendPaymentNotificationAsync(String accept, String contentType, String orderId, String paymentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendPaymentNotificationValidateBeforeCall(accept, contentType, orderId, paymentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
