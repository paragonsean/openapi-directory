/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency;
import org.openapitools.client.model.UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the subscription&#39;s validility and frequency.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserorderdetailsSubscriptionDataSubscriptionsInnerPlan {
  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency frequency;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VALIDITY = "validity";
  @SerializedName(SERIALIZED_NAME_VALIDITY)
  private UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity validity;

  public UserorderdetailsSubscriptionDataSubscriptionsInnerPlan() {
  }

  public UserorderdetailsSubscriptionDataSubscriptionsInnerPlan frequency(UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nonnull
  public UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency getFrequency() {
    return frequency;
  }

  public void setFrequency(UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency frequency) {
    this.frequency = frequency;
  }


  public UserorderdetailsSubscriptionDataSubscriptionsInnerPlan type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of plan.
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public UserorderdetailsSubscriptionDataSubscriptionsInnerPlan validity(UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity validity) {
    this.validity = validity;
    return this;
  }

  /**
   * Get validity
   * @return validity
   */
  @javax.annotation.Nonnull
  public UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity getValidity() {
    return validity;
  }

  public void setValidity(UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity validity) {
    this.validity = validity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserorderdetailsSubscriptionDataSubscriptionsInnerPlan userorderdetailsSubscriptionDataSubscriptionsInnerPlan = (UserorderdetailsSubscriptionDataSubscriptionsInnerPlan) o;
    return Objects.equals(this.frequency, userorderdetailsSubscriptionDataSubscriptionsInnerPlan.frequency) &&
        Objects.equals(this.type, userorderdetailsSubscriptionDataSubscriptionsInnerPlan.type) &&
        Objects.equals(this.validity, userorderdetailsSubscriptionDataSubscriptionsInnerPlan.validity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frequency, type, validity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserorderdetailsSubscriptionDataSubscriptionsInnerPlan {\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validity: ").append(toIndentedString(validity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("frequency");
    openapiFields.add("type");
    openapiFields.add("validity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("frequency");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("validity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserorderdetailsSubscriptionDataSubscriptionsInnerPlan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserorderdetailsSubscriptionDataSubscriptionsInnerPlan is not found in the empty JSON string", UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserorderdetailsSubscriptionDataSubscriptionsInnerPlan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `frequency`
      UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency.validateJsonElement(jsonObj.get("frequency"));
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `validity`
      UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity.validateJsonElement(jsonObj.get("validity"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserorderdetailsSubscriptionDataSubscriptionsInnerPlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserorderdetailsSubscriptionDataSubscriptionsInnerPlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.class));

       return (TypeAdapter<T>) new TypeAdapter<UserorderdetailsSubscriptionDataSubscriptionsInnerPlan>() {
           @Override
           public void write(JsonWriter out, UserorderdetailsSubscriptionDataSubscriptionsInnerPlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserorderdetailsSubscriptionDataSubscriptionsInnerPlan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserorderdetailsSubscriptionDataSubscriptionsInnerPlan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserorderdetailsSubscriptionDataSubscriptionsInnerPlan
   * @throws IOException if the JSON string is invalid with respect to UserorderdetailsSubscriptionDataSubscriptionsInnerPlan
   */
  public static UserorderdetailsSubscriptionDataSubscriptionsInnerPlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.class);
  }

  /**
   * Convert an instance of UserorderdetailsSubscriptionDataSubscriptionsInnerPlan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

