/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetOrder200ResponseItemsInnerAdditionalInfo;
import org.openapitools.client.model.GetOrder200ResponseItemsInnerBundleItemsInner;
import org.openapitools.client.model.GetOrder200ResponseItemsInnerPriceDefinition;
import org.openapitools.client.model.GetOrder200ResponseItemsInnerPriceTagsInner;
import org.openapitools.client.model.GetOrder200ResponseItemsInnerProductCategories;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetOrder200ResponseItemsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetOrder200ResponseItemsInner {
  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private GetOrder200ResponseItemsInnerAdditionalInfo additionalInfo;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<String> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABILITY = "availability";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY)
  private String availability;

  public static final String SERIALIZED_NAME_BUNDLE_ITEMS = "bundleItems";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ITEMS)
  private List<GetOrder200ResponseItemsInnerBundleItemsInner> bundleItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETAIL_URL = "detailUrl";
  @SerializedName(SERIALIZED_NAME_DETAIL_URL)
  private String detailUrl;

  public static final String SERIALIZED_NAME_EAN = "ean";
  @SerializedName(SERIALIZED_NAME_EAN)
  private String ean;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_IS_GIFT = "isGift";
  @SerializedName(SERIALIZED_NAME_IS_GIFT)
  private Boolean isGift;

  public static final String SERIALIZED_NAME_LIST_PRICE = "listPrice";
  @SerializedName(SERIALIZED_NAME_LIST_PRICE)
  private Integer listPrice;

  public static final String SERIALIZED_NAME_MANUAL_PRICE = "manualPrice";
  @SerializedName(SERIALIZED_NAME_MANUAL_PRICE)
  private Integer manualPrice;

  public static final String SERIALIZED_NAME_MANUAL_PRICE_APPLIED_BY = "manualPriceAppliedBy";
  @SerializedName(SERIALIZED_NAME_MANUAL_PRICE_APPLIED_BY)
  private String manualPriceAppliedBy;

  public static final String SERIALIZED_NAME_MANUFACTURER_CODE = "manufacturerCode";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER_CODE)
  private String manufacturerCode;

  public static final String SERIALIZED_NAME_MEASUREMENT_UNIT = "measurementUnit";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_UNIT)
  private String measurementUnit;

  public static final String SERIALIZED_NAME_MODAL_TYPE = "modalType";
  @SerializedName(SERIALIZED_NAME_MODAL_TYPE)
  private String modalType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_ASSEMBLY_BINDING = "parentAssemblyBinding";
  @SerializedName(SERIALIZED_NAME_PARENT_ASSEMBLY_BINDING)
  private String parentAssemblyBinding;

  public static final String SERIALIZED_NAME_PARENT_ITEM_INDEX = "parentItemIndex";
  @SerializedName(SERIALIZED_NAME_PARENT_ITEM_INDEX)
  private Integer parentItemIndex;

  public static final String SERIALIZED_NAME_PRE_SALE_DATE = "preSaleDate";
  @SerializedName(SERIALIZED_NAME_PRE_SALE_DATE)
  private String preSaleDate;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_PRICE_DEFINITION = "priceDefinition";
  @SerializedName(SERIALIZED_NAME_PRICE_DEFINITION)
  private GetOrder200ResponseItemsInnerPriceDefinition priceDefinition;

  public static final String SERIALIZED_NAME_PRICE_TAGS = "priceTags";
  @SerializedName(SERIALIZED_NAME_PRICE_TAGS)
  private List<GetOrder200ResponseItemsInnerPriceTagsInner> priceTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE_VALID_UNTIL = "priceValidUntil";
  @SerializedName(SERIALIZED_NAME_PRICE_VALID_UNTIL)
  private String priceValidUntil;

  public static final String SERIALIZED_NAME_PRODUCT_CATEGORIES = "productCategories";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CATEGORIES)
  private GetOrder200ResponseItemsInnerProductCategories productCategories;

  public static final String SERIALIZED_NAME_PRODUCT_CATEGORY_IDS = "productCategoryIds";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CATEGORY_IDS)
  private String productCategoryIds;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_PRODUCT_REF_ID = "productRefId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_REF_ID)
  private String productRefId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_REF_ID = "refId";
  @SerializedName(SERIALIZED_NAME_REF_ID)
  private String refId;

  public static final String SERIALIZED_NAME_REWARD_VALUE = "rewardValue";
  @SerializedName(SERIALIZED_NAME_REWARD_VALUE)
  private Integer rewardValue;

  public static final String SERIALIZED_NAME_SELLER = "seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  private String seller;

  public static final String SERIALIZED_NAME_SELLER_CHAIN = "sellerChain";
  @SerializedName(SERIALIZED_NAME_SELLER_CHAIN)
  private List<String> sellerChain = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLING_PRICE = "sellingPrice";
  @SerializedName(SERIALIZED_NAME_SELLING_PRICE)
  private Integer sellingPrice;

  public static final String SERIALIZED_NAME_SKU_NAME = "skuName";
  @SerializedName(SERIALIZED_NAME_SKU_NAME)
  private String skuName;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Integer tax;

  public static final String SERIALIZED_NAME_UNIQUE_ID = "uniqueId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ID)
  private String uniqueId;

  public static final String SERIALIZED_NAME_UNIT_MULTIPLIER = "unitMultiplier";
  @SerializedName(SERIALIZED_NAME_UNIT_MULTIPLIER)
  private Integer unitMultiplier;

  public GetOrder200ResponseItemsInner() {
  }

  public GetOrder200ResponseItemsInner additionalInfo(GetOrder200ResponseItemsInnerAdditionalInfo additionalInfo) {
    this.additionalInfo = additionalInfo;
    return this;
  }

  /**
   * Get additionalInfo
   * @return additionalInfo
   */
  @javax.annotation.Nullable
  public GetOrder200ResponseItemsInnerAdditionalInfo getAdditionalInfo() {
    return additionalInfo;
  }

  public void setAdditionalInfo(GetOrder200ResponseItemsInnerAdditionalInfo additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public GetOrder200ResponseItemsInner attachments(List<String> attachments) {
    this.attachments = attachments;
    return this;
  }

  public GetOrder200ResponseItemsInner addAttachmentsItem(String attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Array containing information on attachments.
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<String> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<String> attachments) {
    this.attachments = attachments;
  }


  public GetOrder200ResponseItemsInner availability(String availability) {
    this.availability = availability;
    return this;
  }

  /**
   * Availability
   * @return availability
   */
  @javax.annotation.Nullable
  public String getAvailability() {
    return availability;
  }

  public void setAvailability(String availability) {
    this.availability = availability;
  }


  public GetOrder200ResponseItemsInner bundleItems(List<GetOrder200ResponseItemsInnerBundleItemsInner> bundleItems) {
    this.bundleItems = bundleItems;
    return this;
  }

  public GetOrder200ResponseItemsInner addBundleItemsItem(GetOrder200ResponseItemsInnerBundleItemsInner bundleItemsItem) {
    if (this.bundleItems == null) {
      this.bundleItems = new ArrayList<>();
    }
    this.bundleItems.add(bundleItemsItem);
    return this;
  }

  /**
   * Information on services sold along with the SKU. Example: a gift package.
   * @return bundleItems
   */
  @javax.annotation.Nullable
  public List<GetOrder200ResponseItemsInnerBundleItemsInner> getBundleItems() {
    return bundleItems;
  }

  public void setBundleItems(List<GetOrder200ResponseItemsInnerBundleItemsInner> bundleItems) {
    this.bundleItems = bundleItems;
  }


  public GetOrder200ResponseItemsInner detailUrl(String detailUrl) {
    this.detailUrl = detailUrl;
    return this;
  }

  /**
   * Detail URL.
   * @return detailUrl
   */
  @javax.annotation.Nullable
  public String getDetailUrl() {
    return detailUrl;
  }

  public void setDetailUrl(String detailUrl) {
    this.detailUrl = detailUrl;
  }


  public GetOrder200ResponseItemsInner ean(String ean) {
    this.ean = ean;
    return this;
  }

  /**
   * European Article Number.
   * @return ean
   */
  @javax.annotation.Nullable
  public String getEan() {
    return ean;
  }

  public void setEan(String ean) {
    this.ean = ean;
  }


  public GetOrder200ResponseItemsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GetOrder200ResponseItemsInner imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Image URL.
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public GetOrder200ResponseItemsInner isGift(Boolean isGift) {
    this.isGift = isGift;
    return this;
  }

  /**
   * Indicates whether item is a gift.
   * @return isGift
   */
  @javax.annotation.Nullable
  public Boolean getIsGift() {
    return isGift;
  }

  public void setIsGift(Boolean isGift) {
    this.isGift = isGift;
  }


  public GetOrder200ResponseItemsInner listPrice(Integer listPrice) {
    this.listPrice = listPrice;
    return this;
  }

  /**
   * List price in cents.
   * @return listPrice
   */
  @javax.annotation.Nullable
  public Integer getListPrice() {
    return listPrice;
  }

  public void setListPrice(Integer listPrice) {
    this.listPrice = listPrice;
  }


  public GetOrder200ResponseItemsInner manualPrice(Integer manualPrice) {
    this.manualPrice = manualPrice;
    return this;
  }

  /**
   * Manual price in cents.
   * @return manualPrice
   */
  @javax.annotation.Nullable
  public Integer getManualPrice() {
    return manualPrice;
  }

  public void setManualPrice(Integer manualPrice) {
    this.manualPrice = manualPrice;
  }


  public GetOrder200ResponseItemsInner manualPriceAppliedBy(String manualPriceAppliedBy) {
    this.manualPriceAppliedBy = manualPriceAppliedBy;
    return this;
  }

  /**
   * User that applied the manual price, if that is the case.
   * @return manualPriceAppliedBy
   */
  @javax.annotation.Nullable
  public String getManualPriceAppliedBy() {
    return manualPriceAppliedBy;
  }

  public void setManualPriceAppliedBy(String manualPriceAppliedBy) {
    this.manualPriceAppliedBy = manualPriceAppliedBy;
  }


  public GetOrder200ResponseItemsInner manufacturerCode(String manufacturerCode) {
    this.manufacturerCode = manufacturerCode;
    return this;
  }

  /**
   * Manufacturer code.
   * @return manufacturerCode
   */
  @javax.annotation.Nullable
  public String getManufacturerCode() {
    return manufacturerCode;
  }

  public void setManufacturerCode(String manufacturerCode) {
    this.manufacturerCode = manufacturerCode;
  }


  public GetOrder200ResponseItemsInner measurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
    return this;
  }

  /**
   * Measurement unit
   * @return measurementUnit
   */
  @javax.annotation.Nullable
  public String getMeasurementUnit() {
    return measurementUnit;
  }

  public void setMeasurementUnit(String measurementUnit) {
    this.measurementUnit = measurementUnit;
  }


  public GetOrder200ResponseItemsInner modalType(String modalType) {
    this.modalType = modalType;
    return this;
  }

  /**
   * Modal type.
   * @return modalType
   */
  @javax.annotation.Nullable
  public String getModalType() {
    return modalType;
  }

  public void setModalType(String modalType) {
    this.modalType = modalType;
  }


  public GetOrder200ResponseItemsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetOrder200ResponseItemsInner parentAssemblyBinding(String parentAssemblyBinding) {
    this.parentAssemblyBinding = parentAssemblyBinding;
    return this;
  }

  /**
   * Parent assembly binding.
   * @return parentAssemblyBinding
   */
  @javax.annotation.Nullable
  public String getParentAssemblyBinding() {
    return parentAssemblyBinding;
  }

  public void setParentAssemblyBinding(String parentAssemblyBinding) {
    this.parentAssemblyBinding = parentAssemblyBinding;
  }


  public GetOrder200ResponseItemsInner parentItemIndex(Integer parentItemIndex) {
    this.parentItemIndex = parentItemIndex;
    return this;
  }

  /**
   * Parent item index.
   * @return parentItemIndex
   */
  @javax.annotation.Nullable
  public Integer getParentItemIndex() {
    return parentItemIndex;
  }

  public void setParentItemIndex(Integer parentItemIndex) {
    this.parentItemIndex = parentItemIndex;
  }


  public GetOrder200ResponseItemsInner preSaleDate(String preSaleDate) {
    this.preSaleDate = preSaleDate;
    return this;
  }

  /**
   * Presale date.
   * @return preSaleDate
   */
  @javax.annotation.Nullable
  public String getPreSaleDate() {
    return preSaleDate;
  }

  public void setPreSaleDate(String preSaleDate) {
    this.preSaleDate = preSaleDate;
  }


  public GetOrder200ResponseItemsInner price(Integer price) {
    this.price = price;
    return this;
  }

  /**
   * Price in cents.
   * @return price
   */
  @javax.annotation.Nullable
  public Integer getPrice() {
    return price;
  }

  public void setPrice(Integer price) {
    this.price = price;
  }


  public GetOrder200ResponseItemsInner priceDefinition(GetOrder200ResponseItemsInnerPriceDefinition priceDefinition) {
    this.priceDefinition = priceDefinition;
    return this;
  }

  /**
   * Get priceDefinition
   * @return priceDefinition
   */
  @javax.annotation.Nullable
  public GetOrder200ResponseItemsInnerPriceDefinition getPriceDefinition() {
    return priceDefinition;
  }

  public void setPriceDefinition(GetOrder200ResponseItemsInnerPriceDefinition priceDefinition) {
    this.priceDefinition = priceDefinition;
  }


  public GetOrder200ResponseItemsInner priceTags(List<GetOrder200ResponseItemsInnerPriceTagsInner> priceTags) {
    this.priceTags = priceTags;
    return this;
  }

  public GetOrder200ResponseItemsInner addPriceTagsItem(GetOrder200ResponseItemsInnerPriceTagsInner priceTagsItem) {
    if (this.priceTags == null) {
      this.priceTags = new ArrayList<>();
    }
    this.priceTags.add(priceTagsItem);
    return this;
  }

  /**
   * Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.
   * @return priceTags
   */
  @javax.annotation.Nullable
  public List<GetOrder200ResponseItemsInnerPriceTagsInner> getPriceTags() {
    return priceTags;
  }

  public void setPriceTags(List<GetOrder200ResponseItemsInnerPriceTagsInner> priceTags) {
    this.priceTags = priceTags;
  }


  public GetOrder200ResponseItemsInner priceValidUntil(String priceValidUntil) {
    this.priceValidUntil = priceValidUntil;
    return this;
  }

  /**
   * Price expiration date and time.
   * @return priceValidUntil
   */
  @javax.annotation.Nullable
  public String getPriceValidUntil() {
    return priceValidUntil;
  }

  public void setPriceValidUntil(String priceValidUntil) {
    this.priceValidUntil = priceValidUntil;
  }


  public GetOrder200ResponseItemsInner productCategories(GetOrder200ResponseItemsInnerProductCategories productCategories) {
    this.productCategories = productCategories;
    return this;
  }

  /**
   * Get productCategories
   * @return productCategories
   */
  @javax.annotation.Nullable
  public GetOrder200ResponseItemsInnerProductCategories getProductCategories() {
    return productCategories;
  }

  public void setProductCategories(GetOrder200ResponseItemsInnerProductCategories productCategories) {
    this.productCategories = productCategories;
  }


  public GetOrder200ResponseItemsInner productCategoryIds(String productCategoryIds) {
    this.productCategoryIds = productCategoryIds;
    return this;
  }

  /**
   * Product category IDs.
   * @return productCategoryIds
   */
  @javax.annotation.Nullable
  public String getProductCategoryIds() {
    return productCategoryIds;
  }

  public void setProductCategoryIds(String productCategoryIds) {
    this.productCategoryIds = productCategoryIds;
  }


  public GetOrder200ResponseItemsInner productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Product ID.
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public GetOrder200ResponseItemsInner productRefId(String productRefId) {
    this.productRefId = productRefId;
    return this;
  }

  /**
   * Product Ref ID.
   * @return productRefId
   */
  @javax.annotation.Nullable
  public String getProductRefId() {
    return productRefId;
  }

  public void setProductRefId(String productRefId) {
    this.productRefId = productRefId;
  }


  public GetOrder200ResponseItemsInner quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public GetOrder200ResponseItemsInner refId(String refId) {
    this.refId = refId;
    return this;
  }

  /**
   * Ref ID.
   * @return refId
   */
  @javax.annotation.Nullable
  public String getRefId() {
    return refId;
  }

  public void setRefId(String refId) {
    this.refId = refId;
  }


  public GetOrder200ResponseItemsInner rewardValue(Integer rewardValue) {
    this.rewardValue = rewardValue;
    return this;
  }

  /**
   * Reward value in cents.
   * @return rewardValue
   */
  @javax.annotation.Nullable
  public Integer getRewardValue() {
    return rewardValue;
  }

  public void setRewardValue(Integer rewardValue) {
    this.rewardValue = rewardValue;
  }


  public GetOrder200ResponseItemsInner seller(String seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Seller.
   * @return seller
   */
  @javax.annotation.Nullable
  public String getSeller() {
    return seller;
  }

  public void setSeller(String seller) {
    this.seller = seller;
  }


  public GetOrder200ResponseItemsInner sellerChain(List<String> sellerChain) {
    this.sellerChain = sellerChain;
    return this;
  }

  public GetOrder200ResponseItemsInner addSellerChainItem(String sellerChainItem) {
    if (this.sellerChain == null) {
      this.sellerChain = new ArrayList<>();
    }
    this.sellerChain.add(sellerChainItem);
    return this;
  }

  /**
   * Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/pt/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.
   * @return sellerChain
   */
  @javax.annotation.Nullable
  public List<String> getSellerChain() {
    return sellerChain;
  }

  public void setSellerChain(List<String> sellerChain) {
    this.sellerChain = sellerChain;
  }


  public GetOrder200ResponseItemsInner sellingPrice(Integer sellingPrice) {
    this.sellingPrice = sellingPrice;
    return this;
  }

  /**
   * Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the &#x60;priceDefinition&#x60; data structure instead.
   * @return sellingPrice
   */
  @javax.annotation.Nullable
  public Integer getSellingPrice() {
    return sellingPrice;
  }

  public void setSellingPrice(Integer sellingPrice) {
    this.sellingPrice = sellingPrice;
  }


  public GetOrder200ResponseItemsInner skuName(String skuName) {
    this.skuName = skuName;
    return this;
  }

  /**
   * SKU name.
   * @return skuName
   */
  @javax.annotation.Nullable
  public String getSkuName() {
    return skuName;
  }

  public void setSkuName(String skuName) {
    this.skuName = skuName;
  }


  public GetOrder200ResponseItemsInner tax(Integer tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Tax value in cents.
   * @return tax
   */
  @javax.annotation.Nullable
  public Integer getTax() {
    return tax;
  }

  public void setTax(Integer tax) {
    this.tax = tax;
  }


  public GetOrder200ResponseItemsInner uniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
    return this;
  }

  /**
   * Order&#39;s item unique ID.
   * @return uniqueId
   */
  @javax.annotation.Nullable
  public String getUniqueId() {
    return uniqueId;
  }

  public void setUniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
  }


  public GetOrder200ResponseItemsInner unitMultiplier(Integer unitMultiplier) {
    this.unitMultiplier = unitMultiplier;
    return this;
  }

  /**
   * Unit multiplier
   * @return unitMultiplier
   */
  @javax.annotation.Nullable
  public Integer getUnitMultiplier() {
    return unitMultiplier;
  }

  public void setUnitMultiplier(Integer unitMultiplier) {
    this.unitMultiplier = unitMultiplier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetOrder200ResponseItemsInner getOrder200ResponseItemsInner = (GetOrder200ResponseItemsInner) o;
    return Objects.equals(this.additionalInfo, getOrder200ResponseItemsInner.additionalInfo) &&
        Objects.equals(this.attachments, getOrder200ResponseItemsInner.attachments) &&
        Objects.equals(this.availability, getOrder200ResponseItemsInner.availability) &&
        Objects.equals(this.bundleItems, getOrder200ResponseItemsInner.bundleItems) &&
        Objects.equals(this.detailUrl, getOrder200ResponseItemsInner.detailUrl) &&
        Objects.equals(this.ean, getOrder200ResponseItemsInner.ean) &&
        Objects.equals(this.id, getOrder200ResponseItemsInner.id) &&
        Objects.equals(this.imageUrl, getOrder200ResponseItemsInner.imageUrl) &&
        Objects.equals(this.isGift, getOrder200ResponseItemsInner.isGift) &&
        Objects.equals(this.listPrice, getOrder200ResponseItemsInner.listPrice) &&
        Objects.equals(this.manualPrice, getOrder200ResponseItemsInner.manualPrice) &&
        Objects.equals(this.manualPriceAppliedBy, getOrder200ResponseItemsInner.manualPriceAppliedBy) &&
        Objects.equals(this.manufacturerCode, getOrder200ResponseItemsInner.manufacturerCode) &&
        Objects.equals(this.measurementUnit, getOrder200ResponseItemsInner.measurementUnit) &&
        Objects.equals(this.modalType, getOrder200ResponseItemsInner.modalType) &&
        Objects.equals(this.name, getOrder200ResponseItemsInner.name) &&
        Objects.equals(this.parentAssemblyBinding, getOrder200ResponseItemsInner.parentAssemblyBinding) &&
        Objects.equals(this.parentItemIndex, getOrder200ResponseItemsInner.parentItemIndex) &&
        Objects.equals(this.preSaleDate, getOrder200ResponseItemsInner.preSaleDate) &&
        Objects.equals(this.price, getOrder200ResponseItemsInner.price) &&
        Objects.equals(this.priceDefinition, getOrder200ResponseItemsInner.priceDefinition) &&
        Objects.equals(this.priceTags, getOrder200ResponseItemsInner.priceTags) &&
        Objects.equals(this.priceValidUntil, getOrder200ResponseItemsInner.priceValidUntil) &&
        Objects.equals(this.productCategories, getOrder200ResponseItemsInner.productCategories) &&
        Objects.equals(this.productCategoryIds, getOrder200ResponseItemsInner.productCategoryIds) &&
        Objects.equals(this.productId, getOrder200ResponseItemsInner.productId) &&
        Objects.equals(this.productRefId, getOrder200ResponseItemsInner.productRefId) &&
        Objects.equals(this.quantity, getOrder200ResponseItemsInner.quantity) &&
        Objects.equals(this.refId, getOrder200ResponseItemsInner.refId) &&
        Objects.equals(this.rewardValue, getOrder200ResponseItemsInner.rewardValue) &&
        Objects.equals(this.seller, getOrder200ResponseItemsInner.seller) &&
        Objects.equals(this.sellerChain, getOrder200ResponseItemsInner.sellerChain) &&
        Objects.equals(this.sellingPrice, getOrder200ResponseItemsInner.sellingPrice) &&
        Objects.equals(this.skuName, getOrder200ResponseItemsInner.skuName) &&
        Objects.equals(this.tax, getOrder200ResponseItemsInner.tax) &&
        Objects.equals(this.uniqueId, getOrder200ResponseItemsInner.uniqueId) &&
        Objects.equals(this.unitMultiplier, getOrder200ResponseItemsInner.unitMultiplier);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalInfo, attachments, availability, bundleItems, detailUrl, ean, id, imageUrl, isGift, listPrice, manualPrice, manualPriceAppliedBy, manufacturerCode, measurementUnit, modalType, name, parentAssemblyBinding, parentItemIndex, preSaleDate, price, priceDefinition, priceTags, priceValidUntil, productCategories, productCategoryIds, productId, productRefId, quantity, refId, rewardValue, seller, sellerChain, sellingPrice, skuName, tax, uniqueId, unitMultiplier);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetOrder200ResponseItemsInner {\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    bundleItems: ").append(toIndentedString(bundleItems)).append("\n");
    sb.append("    detailUrl: ").append(toIndentedString(detailUrl)).append("\n");
    sb.append("    ean: ").append(toIndentedString(ean)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    isGift: ").append(toIndentedString(isGift)).append("\n");
    sb.append("    listPrice: ").append(toIndentedString(listPrice)).append("\n");
    sb.append("    manualPrice: ").append(toIndentedString(manualPrice)).append("\n");
    sb.append("    manualPriceAppliedBy: ").append(toIndentedString(manualPriceAppliedBy)).append("\n");
    sb.append("    manufacturerCode: ").append(toIndentedString(manufacturerCode)).append("\n");
    sb.append("    measurementUnit: ").append(toIndentedString(measurementUnit)).append("\n");
    sb.append("    modalType: ").append(toIndentedString(modalType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentAssemblyBinding: ").append(toIndentedString(parentAssemblyBinding)).append("\n");
    sb.append("    parentItemIndex: ").append(toIndentedString(parentItemIndex)).append("\n");
    sb.append("    preSaleDate: ").append(toIndentedString(preSaleDate)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceDefinition: ").append(toIndentedString(priceDefinition)).append("\n");
    sb.append("    priceTags: ").append(toIndentedString(priceTags)).append("\n");
    sb.append("    priceValidUntil: ").append(toIndentedString(priceValidUntil)).append("\n");
    sb.append("    productCategories: ").append(toIndentedString(productCategories)).append("\n");
    sb.append("    productCategoryIds: ").append(toIndentedString(productCategoryIds)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    productRefId: ").append(toIndentedString(productRefId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    refId: ").append(toIndentedString(refId)).append("\n");
    sb.append("    rewardValue: ").append(toIndentedString(rewardValue)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("    sellerChain: ").append(toIndentedString(sellerChain)).append("\n");
    sb.append("    sellingPrice: ").append(toIndentedString(sellingPrice)).append("\n");
    sb.append("    skuName: ").append(toIndentedString(skuName)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("    unitMultiplier: ").append(toIndentedString(unitMultiplier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalInfo");
    openapiFields.add("attachments");
    openapiFields.add("availability");
    openapiFields.add("bundleItems");
    openapiFields.add("detailUrl");
    openapiFields.add("ean");
    openapiFields.add("id");
    openapiFields.add("imageUrl");
    openapiFields.add("isGift");
    openapiFields.add("listPrice");
    openapiFields.add("manualPrice");
    openapiFields.add("manualPriceAppliedBy");
    openapiFields.add("manufacturerCode");
    openapiFields.add("measurementUnit");
    openapiFields.add("modalType");
    openapiFields.add("name");
    openapiFields.add("parentAssemblyBinding");
    openapiFields.add("parentItemIndex");
    openapiFields.add("preSaleDate");
    openapiFields.add("price");
    openapiFields.add("priceDefinition");
    openapiFields.add("priceTags");
    openapiFields.add("priceValidUntil");
    openapiFields.add("productCategories");
    openapiFields.add("productCategoryIds");
    openapiFields.add("productId");
    openapiFields.add("productRefId");
    openapiFields.add("quantity");
    openapiFields.add("refId");
    openapiFields.add("rewardValue");
    openapiFields.add("seller");
    openapiFields.add("sellerChain");
    openapiFields.add("sellingPrice");
    openapiFields.add("skuName");
    openapiFields.add("tax");
    openapiFields.add("uniqueId");
    openapiFields.add("unitMultiplier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetOrder200ResponseItemsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetOrder200ResponseItemsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetOrder200ResponseItemsInner is not found in the empty JSON string", GetOrder200ResponseItemsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetOrder200ResponseItemsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOrder200ResponseItemsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additionalInfo`
      if (jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) {
        GetOrder200ResponseItemsInnerAdditionalInfo.validateJsonElement(jsonObj.get("additionalInfo"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull() && !jsonObj.get("attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }
      if ((jsonObj.get("availability") != null && !jsonObj.get("availability").isJsonNull()) && !jsonObj.get("availability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availability").toString()));
      }
      if (jsonObj.get("bundleItems") != null && !jsonObj.get("bundleItems").isJsonNull()) {
        JsonArray jsonArraybundleItems = jsonObj.getAsJsonArray("bundleItems");
        if (jsonArraybundleItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bundleItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bundleItems` to be an array in the JSON string but got `%s`", jsonObj.get("bundleItems").toString()));
          }

          // validate the optional field `bundleItems` (array)
          for (int i = 0; i < jsonArraybundleItems.size(); i++) {
            GetOrder200ResponseItemsInnerBundleItemsInner.validateJsonElement(jsonArraybundleItems.get(i));
          };
        }
      }
      if ((jsonObj.get("detailUrl") != null && !jsonObj.get("detailUrl").isJsonNull()) && !jsonObj.get("detailUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detailUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detailUrl").toString()));
      }
      if ((jsonObj.get("ean") != null && !jsonObj.get("ean").isJsonNull()) && !jsonObj.get("ean").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ean` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ean").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) && !jsonObj.get("imageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageUrl").toString()));
      }
      if ((jsonObj.get("manualPriceAppliedBy") != null && !jsonObj.get("manualPriceAppliedBy").isJsonNull()) && !jsonObj.get("manualPriceAppliedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manualPriceAppliedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manualPriceAppliedBy").toString()));
      }
      if ((jsonObj.get("manufacturerCode") != null && !jsonObj.get("manufacturerCode").isJsonNull()) && !jsonObj.get("manufacturerCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturerCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturerCode").toString()));
      }
      if ((jsonObj.get("measurementUnit") != null && !jsonObj.get("measurementUnit").isJsonNull()) && !jsonObj.get("measurementUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementUnit").toString()));
      }
      if ((jsonObj.get("modalType") != null && !jsonObj.get("modalType").isJsonNull()) && !jsonObj.get("modalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modalType").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parentAssemblyBinding") != null && !jsonObj.get("parentAssemblyBinding").isJsonNull()) && !jsonObj.get("parentAssemblyBinding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentAssemblyBinding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentAssemblyBinding").toString()));
      }
      if ((jsonObj.get("preSaleDate") != null && !jsonObj.get("preSaleDate").isJsonNull()) && !jsonObj.get("preSaleDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preSaleDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preSaleDate").toString()));
      }
      // validate the optional field `priceDefinition`
      if (jsonObj.get("priceDefinition") != null && !jsonObj.get("priceDefinition").isJsonNull()) {
        GetOrder200ResponseItemsInnerPriceDefinition.validateJsonElement(jsonObj.get("priceDefinition"));
      }
      if (jsonObj.get("priceTags") != null && !jsonObj.get("priceTags").isJsonNull()) {
        JsonArray jsonArraypriceTags = jsonObj.getAsJsonArray("priceTags");
        if (jsonArraypriceTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("priceTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `priceTags` to be an array in the JSON string but got `%s`", jsonObj.get("priceTags").toString()));
          }

          // validate the optional field `priceTags` (array)
          for (int i = 0; i < jsonArraypriceTags.size(); i++) {
            GetOrder200ResponseItemsInnerPriceTagsInner.validateJsonElement(jsonArraypriceTags.get(i));
          };
        }
      }
      if ((jsonObj.get("priceValidUntil") != null && !jsonObj.get("priceValidUntil").isJsonNull()) && !jsonObj.get("priceValidUntil").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceValidUntil` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceValidUntil").toString()));
      }
      // validate the optional field `productCategories`
      if (jsonObj.get("productCategories") != null && !jsonObj.get("productCategories").isJsonNull()) {
        GetOrder200ResponseItemsInnerProductCategories.validateJsonElement(jsonObj.get("productCategories"));
      }
      if ((jsonObj.get("productCategoryIds") != null && !jsonObj.get("productCategoryIds").isJsonNull()) && !jsonObj.get("productCategoryIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productCategoryIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productCategoryIds").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if ((jsonObj.get("productRefId") != null && !jsonObj.get("productRefId").isJsonNull()) && !jsonObj.get("productRefId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productRefId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productRefId").toString()));
      }
      if ((jsonObj.get("refId") != null && !jsonObj.get("refId").isJsonNull()) && !jsonObj.get("refId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refId").toString()));
      }
      if ((jsonObj.get("seller") != null && !jsonObj.get("seller").isJsonNull()) && !jsonObj.get("seller").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sellerChain") != null && !jsonObj.get("sellerChain").isJsonNull() && !jsonObj.get("sellerChain").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerChain` to be an array in the JSON string but got `%s`", jsonObj.get("sellerChain").toString()));
      }
      if ((jsonObj.get("skuName") != null && !jsonObj.get("skuName").isJsonNull()) && !jsonObj.get("skuName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuName").toString()));
      }
      if ((jsonObj.get("uniqueId") != null && !jsonObj.get("uniqueId").isJsonNull()) && !jsonObj.get("uniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetOrder200ResponseItemsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetOrder200ResponseItemsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetOrder200ResponseItemsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetOrder200ResponseItemsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetOrder200ResponseItemsInner>() {
           @Override
           public void write(JsonWriter out, GetOrder200ResponseItemsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetOrder200ResponseItemsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetOrder200ResponseItemsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetOrder200ResponseItemsInner
   * @throws IOException if the JSON string is invalid with respect to GetOrder200ResponseItemsInner
   */
  public static GetOrder200ResponseItemsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetOrder200ResponseItemsInner.class);
  }

  /**
   * Convert an instance of GetOrder200ResponseItemsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

