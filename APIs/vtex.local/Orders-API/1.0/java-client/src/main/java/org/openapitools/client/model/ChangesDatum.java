/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ItemsRemoved;
import org.openapitools.client.model.Receipt;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChangesDatum
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChangesDatum {
  public static final String SERIALIZED_NAME_DISCOUNT_VALUE = "discountValue";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_VALUE)
  private Integer discountValue;

  public static final String SERIALIZED_NAME_INCREMENT_VALUE = "incrementValue";
  @SerializedName(SERIALIZED_NAME_INCREMENT_VALUE)
  private Integer incrementValue;

  public static final String SERIALIZED_NAME_ITEMS_ADDED = "itemsAdded";
  @SerializedName(SERIALIZED_NAME_ITEMS_ADDED)
  private List<String> itemsAdded = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEMS_REMOVED = "itemsRemoved";
  @SerializedName(SERIALIZED_NAME_ITEMS_REMOVED)
  private List<ItemsRemoved> itemsRemoved = new ArrayList<>();

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_RECEIPT = "receipt";
  @SerializedName(SERIALIZED_NAME_RECEIPT)
  private Receipt receipt;

  public ChangesDatum() {
  }

  public ChangesDatum discountValue(Integer discountValue) {
    this.discountValue = discountValue;
    return this;
  }

  /**
   * Order change discount value.
   * @return discountValue
   */
  @javax.annotation.Nonnull
  public Integer getDiscountValue() {
    return discountValue;
  }

  public void setDiscountValue(Integer discountValue) {
    this.discountValue = discountValue;
  }


  public ChangesDatum incrementValue(Integer incrementValue) {
    this.incrementValue = incrementValue;
    return this;
  }

  /**
   * Order change increment value.
   * @return incrementValue
   */
  @javax.annotation.Nonnull
  public Integer getIncrementValue() {
    return incrementValue;
  }

  public void setIncrementValue(Integer incrementValue) {
    this.incrementValue = incrementValue;
  }


  public ChangesDatum itemsAdded(List<String> itemsAdded) {
    this.itemsAdded = itemsAdded;
    return this;
  }

  public ChangesDatum addItemsAddedItem(String itemsAddedItem) {
    if (this.itemsAdded == null) {
      this.itemsAdded = new ArrayList<>();
    }
    this.itemsAdded.add(itemsAddedItem);
    return this;
  }

  /**
   * List of items added to the order.
   * @return itemsAdded
   */
  @javax.annotation.Nonnull
  public List<String> getItemsAdded() {
    return itemsAdded;
  }

  public void setItemsAdded(List<String> itemsAdded) {
    this.itemsAdded = itemsAdded;
  }


  public ChangesDatum itemsRemoved(List<ItemsRemoved> itemsRemoved) {
    this.itemsRemoved = itemsRemoved;
    return this;
  }

  public ChangesDatum addItemsRemovedItem(ItemsRemoved itemsRemovedItem) {
    if (this.itemsRemoved == null) {
      this.itemsRemoved = new ArrayList<>();
    }
    this.itemsRemoved.add(itemsRemovedItem);
    return this;
  }

  /**
   * List of items removed from the order.
   * @return itemsRemoved
   */
  @javax.annotation.Nonnull
  public List<ItemsRemoved> getItemsRemoved() {
    return itemsRemoved;
  }

  public void setItemsRemoved(List<ItemsRemoved> itemsRemoved) {
    this.itemsRemoved = itemsRemoved;
  }


  public ChangesDatum reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Text explaining why there was a change in the order. This information may be shown to the customer in the UI or transactional emails.
   * @return reason
   */
  @javax.annotation.Nonnull
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public ChangesDatum receipt(Receipt receipt) {
    this.receipt = receipt;
    return this;
  }

  /**
   * Get receipt
   * @return receipt
   */
  @javax.annotation.Nonnull
  public Receipt getReceipt() {
    return receipt;
  }

  public void setReceipt(Receipt receipt) {
    this.receipt = receipt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangesDatum changesDatum = (ChangesDatum) o;
    return Objects.equals(this.discountValue, changesDatum.discountValue) &&
        Objects.equals(this.incrementValue, changesDatum.incrementValue) &&
        Objects.equals(this.itemsAdded, changesDatum.itemsAdded) &&
        Objects.equals(this.itemsRemoved, changesDatum.itemsRemoved) &&
        Objects.equals(this.reason, changesDatum.reason) &&
        Objects.equals(this.receipt, changesDatum.receipt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(discountValue, incrementValue, itemsAdded, itemsRemoved, reason, receipt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangesDatum {\n");
    sb.append("    discountValue: ").append(toIndentedString(discountValue)).append("\n");
    sb.append("    incrementValue: ").append(toIndentedString(incrementValue)).append("\n");
    sb.append("    itemsAdded: ").append(toIndentedString(itemsAdded)).append("\n");
    sb.append("    itemsRemoved: ").append(toIndentedString(itemsRemoved)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    receipt: ").append(toIndentedString(receipt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("discountValue");
    openapiFields.add("incrementValue");
    openapiFields.add("itemsAdded");
    openapiFields.add("itemsRemoved");
    openapiFields.add("reason");
    openapiFields.add("receipt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("discountValue");
    openapiRequiredFields.add("incrementValue");
    openapiRequiredFields.add("itemsAdded");
    openapiRequiredFields.add("itemsRemoved");
    openapiRequiredFields.add("reason");
    openapiRequiredFields.add("receipt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChangesDatum
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChangesDatum.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangesDatum is not found in the empty JSON string", ChangesDatum.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChangesDatum.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChangesDatum` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChangesDatum.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("itemsAdded") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("itemsAdded").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemsAdded` to be an array in the JSON string but got `%s`", jsonObj.get("itemsAdded").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("itemsRemoved").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemsRemoved` to be an array in the JSON string but got `%s`", jsonObj.get("itemsRemoved").toString()));
      }

      JsonArray jsonArrayitemsRemoved = jsonObj.getAsJsonArray("itemsRemoved");
      // validate the required field `itemsRemoved` (array)
      for (int i = 0; i < jsonArrayitemsRemoved.size(); i++) {
        ItemsRemoved.validateJsonElement(jsonArrayitemsRemoved.get(i));
      };
      if (!jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the required field `receipt`
      Receipt.validateJsonElement(jsonObj.get("receipt"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangesDatum.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangesDatum' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangesDatum> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangesDatum.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangesDatum>() {
           @Override
           public void write(JsonWriter out, ChangesDatum value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangesDatum read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChangesDatum given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChangesDatum
   * @throws IOException if the JSON string is invalid with respect to ChangesDatum
   */
  public static ChangesDatum fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangesDatum.class);
  }

  /**
   * Convert an instance of ChangesDatum to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

