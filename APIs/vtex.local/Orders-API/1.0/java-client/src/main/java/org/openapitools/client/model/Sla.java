/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.PickupStoreInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sla
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sla {
  public static final String SERIALIZED_NAME_DELIVERY_CHANNEL = "deliveryChannel";
  @SerializedName(SERIALIZED_NAME_DELIVERY_CHANNEL)
  private String deliveryChannel;

  public static final String SERIALIZED_NAME_DELIVERY_WINDOW = "deliveryWindow";
  @SerializedName(SERIALIZED_NAME_DELIVERY_WINDOW)
  private String deliveryWindow;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCK_T_T_L = "lockTTL";
  @SerializedName(SERIALIZED_NAME_LOCK_T_T_L)
  private String lockTTL;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PICKUP_DISTANCE = "pickupDistance";
  @SerializedName(SERIALIZED_NAME_PICKUP_DISTANCE)
  private BigDecimal pickupDistance;

  public static final String SERIALIZED_NAME_PICKUP_POINT_ID = "pickupPointId";
  @SerializedName(SERIALIZED_NAME_PICKUP_POINT_ID)
  private String pickupPointId;

  public static final String SERIALIZED_NAME_PICKUP_STORE_INFO = "pickupStoreInfo";
  @SerializedName(SERIALIZED_NAME_PICKUP_STORE_INFO)
  private PickupStoreInfo pickupStoreInfo;

  public static final String SERIALIZED_NAME_POLYGON_NAME = "polygonName";
  @SerializedName(SERIALIZED_NAME_POLYGON_NAME)
  private String polygonName;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_SHIPPING_ESTIMATE = "shippingEstimate";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ESTIMATE)
  private String shippingEstimate;

  public static final String SERIALIZED_NAME_TRANSIT_TIME = "transitTime";
  @SerializedName(SERIALIZED_NAME_TRANSIT_TIME)
  private String transitTime;

  public Sla() {
  }

  public Sla deliveryChannel(String deliveryChannel) {
    this.deliveryChannel = deliveryChannel;
    return this;
  }

  /**
   * If the delivery channel is &#x60;delivery&#x60; or &#x60;pickup-in-point&#x60;.
   * @return deliveryChannel
   */
  @javax.annotation.Nonnull
  public String getDeliveryChannel() {
    return deliveryChannel;
  }

  public void setDeliveryChannel(String deliveryChannel) {
    this.deliveryChannel = deliveryChannel;
  }


  public Sla deliveryWindow(String deliveryWindow) {
    this.deliveryWindow = deliveryWindow;
    return this;
  }

  /**
   * [Scheduled delivery window](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, if it applies to the item.
   * @return deliveryWindow
   */
  @javax.annotation.Nullable
  public String getDeliveryWindow() {
    return deliveryWindow;
  }

  public void setDeliveryWindow(String deliveryWindow) {
    this.deliveryWindow = deliveryWindow;
  }


  public Sla id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the shipping method used in the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Sla lockTTL(String lockTTL) {
    this.lockTTL = lockTTL;
    return this;
  }

  /**
   * Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time of the SLA.
   * @return lockTTL
   */
  @javax.annotation.Nonnull
  public String getLockTTL() {
    return lockTTL;
  }

  public void setLockTTL(String lockTTL) {
    this.lockTTL = lockTTL;
  }


  public Sla name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the shipping policy.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Sla pickupDistance(BigDecimal pickupDistance) {
    this.pickupDistance = pickupDistance;
    return this;
  }

  /**
   * Distance in kilometers between the pickup point and the customer&#39;s address. The distance is measured as a straight line.
   * @return pickupDistance
   */
  @javax.annotation.Nonnull
  public BigDecimal getPickupDistance() {
    return pickupDistance;
  }

  public void setPickupDistance(BigDecimal pickupDistance) {
    this.pickupDistance = pickupDistance;
  }


  public Sla pickupPointId(String pickupPointId) {
    this.pickupPointId = pickupPointId;
    return this;
  }

  /**
   * [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) ID related to the SLA.
   * @return pickupPointId
   */
  @javax.annotation.Nonnull
  public String getPickupPointId() {
    return pickupPointId;
  }

  public void setPickupPointId(String pickupPointId) {
    this.pickupPointId = pickupPointId;
  }


  public Sla pickupStoreInfo(PickupStoreInfo pickupStoreInfo) {
    this.pickupStoreInfo = pickupStoreInfo;
    return this;
  }

  /**
   * Get pickupStoreInfo
   * @return pickupStoreInfo
   */
  @javax.annotation.Nonnull
  public PickupStoreInfo getPickupStoreInfo() {
    return pickupStoreInfo;
  }

  public void setPickupStoreInfo(PickupStoreInfo pickupStoreInfo) {
    this.pickupStoreInfo = pickupStoreInfo;
  }


  public Sla polygonName(String polygonName) {
    this.polygonName = polygonName;
    return this;
  }

  /**
   * Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.
   * @return polygonName
   */
  @javax.annotation.Nullable
  public String getPolygonName() {
    return polygonName;
  }

  public void setPolygonName(String polygonName) {
    this.polygonName = polygonName;
  }


  public Sla price(Integer price) {
    this.price = price;
    return this;
  }

  /**
   * Shipping price for the item in cents. Does not account for the whole order&#39;s shipping price.
   * @return price
   */
  @javax.annotation.Nonnull
  public Integer getPrice() {
    return price;
  }

  public void setPrice(Integer price) {
    this.price = price;
  }


  public Sla shippingEstimate(String shippingEstimate) {
    this.shippingEstimate = shippingEstimate;
    return this;
  }

  /**
   * Total shipping estimate time in days. For instance, three business days is represented &#x60;3bd&#x60;.
   * @return shippingEstimate
   */
  @javax.annotation.Nonnull
  public String getShippingEstimate() {
    return shippingEstimate;
  }

  public void setShippingEstimate(String shippingEstimate) {
    this.shippingEstimate = shippingEstimate;
  }


  public Sla transitTime(String transitTime) {
    this.transitTime = transitTime;
    return this;
  }

  /**
   * Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented &#x60;3bd&#x60;.
   * @return transitTime
   */
  @javax.annotation.Nonnull
  public String getTransitTime() {
    return transitTime;
  }

  public void setTransitTime(String transitTime) {
    this.transitTime = transitTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sla sla = (Sla) o;
    return Objects.equals(this.deliveryChannel, sla.deliveryChannel) &&
        Objects.equals(this.deliveryWindow, sla.deliveryWindow) &&
        Objects.equals(this.id, sla.id) &&
        Objects.equals(this.lockTTL, sla.lockTTL) &&
        Objects.equals(this.name, sla.name) &&
        Objects.equals(this.pickupDistance, sla.pickupDistance) &&
        Objects.equals(this.pickupPointId, sla.pickupPointId) &&
        Objects.equals(this.pickupStoreInfo, sla.pickupStoreInfo) &&
        Objects.equals(this.polygonName, sla.polygonName) &&
        Objects.equals(this.price, sla.price) &&
        Objects.equals(this.shippingEstimate, sla.shippingEstimate) &&
        Objects.equals(this.transitTime, sla.transitTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryChannel, deliveryWindow, id, lockTTL, name, pickupDistance, pickupPointId, pickupStoreInfo, polygonName, price, shippingEstimate, transitTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sla {\n");
    sb.append("    deliveryChannel: ").append(toIndentedString(deliveryChannel)).append("\n");
    sb.append("    deliveryWindow: ").append(toIndentedString(deliveryWindow)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lockTTL: ").append(toIndentedString(lockTTL)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pickupDistance: ").append(toIndentedString(pickupDistance)).append("\n");
    sb.append("    pickupPointId: ").append(toIndentedString(pickupPointId)).append("\n");
    sb.append("    pickupStoreInfo: ").append(toIndentedString(pickupStoreInfo)).append("\n");
    sb.append("    polygonName: ").append(toIndentedString(polygonName)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    shippingEstimate: ").append(toIndentedString(shippingEstimate)).append("\n");
    sb.append("    transitTime: ").append(toIndentedString(transitTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deliveryChannel");
    openapiFields.add("deliveryWindow");
    openapiFields.add("id");
    openapiFields.add("lockTTL");
    openapiFields.add("name");
    openapiFields.add("pickupDistance");
    openapiFields.add("pickupPointId");
    openapiFields.add("pickupStoreInfo");
    openapiFields.add("polygonName");
    openapiFields.add("price");
    openapiFields.add("shippingEstimate");
    openapiFields.add("transitTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deliveryChannel");
    openapiRequiredFields.add("deliveryWindow");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("lockTTL");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pickupDistance");
    openapiRequiredFields.add("pickupPointId");
    openapiRequiredFields.add("pickupStoreInfo");
    openapiRequiredFields.add("polygonName");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("shippingEstimate");
    openapiRequiredFields.add("transitTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sla
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sla.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sla is not found in the empty JSON string", Sla.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sla.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sla` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Sla.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("deliveryChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryChannel").toString()));
      }
      if ((jsonObj.get("deliveryWindow") != null && !jsonObj.get("deliveryWindow").isJsonNull()) && !jsonObj.get("deliveryWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryWindow").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("lockTTL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockTTL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockTTL").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("pickupPointId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickupPointId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickupPointId").toString()));
      }
      // validate the required field `pickupStoreInfo`
      PickupStoreInfo.validateJsonElement(jsonObj.get("pickupStoreInfo"));
      if ((jsonObj.get("polygonName") != null && !jsonObj.get("polygonName").isJsonNull()) && !jsonObj.get("polygonName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `polygonName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("polygonName").toString()));
      }
      if (!jsonObj.get("shippingEstimate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingEstimate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingEstimate").toString()));
      }
      if (!jsonObj.get("transitTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transitTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transitTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sla.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sla' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sla> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sla.class));

       return (TypeAdapter<T>) new TypeAdapter<Sla>() {
           @Override
           public void write(JsonWriter out, Sla value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sla read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sla given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sla
   * @throws IOException if the JSON string is invalid with respect to Sla
   */
  public static Sla fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sla.class);
  }

  /**
   * Convert an instance of Sla to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

