/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.UserorderdetailsSubscriptionDataSubscriptionsInnerPlan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserorderdetailsSubscriptionDataSubscriptionsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserorderdetailsSubscriptionDataSubscriptionsInner {
  public static final String SERIALIZED_NAME_EXECUTION_COUNT = "ExecutionCount";
  @SerializedName(SERIALIZED_NAME_EXECUTION_COUNT)
  private Integer executionCount;

  public static final String SERIALIZED_NAME_ITEM_INDEX = "ItemIndex";
  @SerializedName(SERIALIZED_NAME_ITEM_INDEX)
  private Integer itemIndex;

  public static final String SERIALIZED_NAME_PLAN = "Plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private UserorderdetailsSubscriptionDataSubscriptionsInnerPlan plan;

  public static final String SERIALIZED_NAME_PRICE_AT_SUBSCRIPTION_DATE = "PriceAtSubscriptionDate";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PRICE_AT_SUBSCRIPTION_DATE)
  private BigDecimal priceAtSubscriptionDate;

  public UserorderdetailsSubscriptionDataSubscriptionsInner() {
  }

  public UserorderdetailsSubscriptionDataSubscriptionsInner executionCount(Integer executionCount) {
    this.executionCount = executionCount;
    return this;
  }

  /**
   * Position of the order in the subscription cycle. The first order will have the value &#x60;0&#x60;, the second will have the value &#x60;1&#x60;, and so on.
   * @return executionCount
   */
  @javax.annotation.Nonnull
  public Integer getExecutionCount() {
    return executionCount;
  }

  public void setExecutionCount(Integer executionCount) {
    this.executionCount = executionCount;
  }


  public UserorderdetailsSubscriptionDataSubscriptionsInner itemIndex(Integer itemIndex) {
    this.itemIndex = itemIndex;
    return this;
  }

  /**
   * Each item in the subscriptions&#39; order is identified by an index. The position starts in&#x60;0&#x60;, followed by &#x60;1&#x60;, &#x60;2&#x60;, and so on.
   * @return itemIndex
   */
  @javax.annotation.Nonnull
  public Integer getItemIndex() {
    return itemIndex;
  }

  public void setItemIndex(Integer itemIndex) {
    this.itemIndex = itemIndex;
  }


  public UserorderdetailsSubscriptionDataSubscriptionsInner plan(UserorderdetailsSubscriptionDataSubscriptionsInnerPlan plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Get plan
   * @return plan
   */
  @javax.annotation.Nonnull
  public UserorderdetailsSubscriptionDataSubscriptionsInnerPlan getPlan() {
    return plan;
  }

  public void setPlan(UserorderdetailsSubscriptionDataSubscriptionsInnerPlan plan) {
    this.plan = plan;
  }


  @Deprecated
  public UserorderdetailsSubscriptionDataSubscriptionsInner priceAtSubscriptionDate(BigDecimal priceAtSubscriptionDate) {
    this.priceAtSubscriptionDate = priceAtSubscriptionDate;
    return this;
  }

  /**
   * Price of the order when the customer signed up for subscriptions. Subscriptions created from Admin UI or APIs do not have an original order, so the field returns &#x60;0.0&#x60;. This field was valid only for Subscriptions v2 and is deprecated in Subscriptions v3.
   * @return priceAtSubscriptionDate
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public BigDecimal getPriceAtSubscriptionDate() {
    return priceAtSubscriptionDate;
  }

  @Deprecated
  public void setPriceAtSubscriptionDate(BigDecimal priceAtSubscriptionDate) {
    this.priceAtSubscriptionDate = priceAtSubscriptionDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserorderdetailsSubscriptionDataSubscriptionsInner userorderdetailsSubscriptionDataSubscriptionsInner = (UserorderdetailsSubscriptionDataSubscriptionsInner) o;
    return Objects.equals(this.executionCount, userorderdetailsSubscriptionDataSubscriptionsInner.executionCount) &&
        Objects.equals(this.itemIndex, userorderdetailsSubscriptionDataSubscriptionsInner.itemIndex) &&
        Objects.equals(this.plan, userorderdetailsSubscriptionDataSubscriptionsInner.plan) &&
        Objects.equals(this.priceAtSubscriptionDate, userorderdetailsSubscriptionDataSubscriptionsInner.priceAtSubscriptionDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionCount, itemIndex, plan, priceAtSubscriptionDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserorderdetailsSubscriptionDataSubscriptionsInner {\n");
    sb.append("    executionCount: ").append(toIndentedString(executionCount)).append("\n");
    sb.append("    itemIndex: ").append(toIndentedString(itemIndex)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    priceAtSubscriptionDate: ").append(toIndentedString(priceAtSubscriptionDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExecutionCount");
    openapiFields.add("ItemIndex");
    openapiFields.add("Plan");
    openapiFields.add("PriceAtSubscriptionDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ExecutionCount");
    openapiRequiredFields.add("ItemIndex");
    openapiRequiredFields.add("Plan");
    openapiRequiredFields.add("PriceAtSubscriptionDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserorderdetailsSubscriptionDataSubscriptionsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserorderdetailsSubscriptionDataSubscriptionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserorderdetailsSubscriptionDataSubscriptionsInner is not found in the empty JSON string", UserorderdetailsSubscriptionDataSubscriptionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserorderdetailsSubscriptionDataSubscriptionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserorderdetailsSubscriptionDataSubscriptionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserorderdetailsSubscriptionDataSubscriptionsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Plan`
      UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.validateJsonElement(jsonObj.get("Plan"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserorderdetailsSubscriptionDataSubscriptionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserorderdetailsSubscriptionDataSubscriptionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserorderdetailsSubscriptionDataSubscriptionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserorderdetailsSubscriptionDataSubscriptionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UserorderdetailsSubscriptionDataSubscriptionsInner>() {
           @Override
           public void write(JsonWriter out, UserorderdetailsSubscriptionDataSubscriptionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserorderdetailsSubscriptionDataSubscriptionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserorderdetailsSubscriptionDataSubscriptionsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserorderdetailsSubscriptionDataSubscriptionsInner
   * @throws IOException if the JSON string is invalid with respect to UserorderdetailsSubscriptionDataSubscriptionsInner
   */
  public static UserorderdetailsSubscriptionDataSubscriptionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserorderdetailsSubscriptionDataSubscriptionsInner.class);
  }

  /**
   * Convert an instance of UserorderdetailsSubscriptionDataSubscriptionsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

