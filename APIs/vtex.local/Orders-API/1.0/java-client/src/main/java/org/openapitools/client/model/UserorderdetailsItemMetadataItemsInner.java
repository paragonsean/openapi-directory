/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserorderdetailsItemMetadataItemsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserorderdetailsItemMetadataItemsInner {
  public static final String SERIALIZED_NAME_ASSEMBLY_OPTIONS = "AssemblyOptions";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY_OPTIONS)
  private List<UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner> assemblyOptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETAIL_URL = "DetailUrl";
  @SerializedName(SERIALIZED_NAME_DETAIL_URL)
  private String detailUrl;

  public static final String SERIALIZED_NAME_EAN = "Ean";
  @SerializedName(SERIALIZED_NAME_EAN)
  private String ean;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_URL = "ImageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "ProductId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_REF_ID = "RefId";
  @SerializedName(SERIALIZED_NAME_REF_ID)
  private String refId;

  public static final String SERIALIZED_NAME_SELLER = "Seller";
  @SerializedName(SERIALIZED_NAME_SELLER)
  private String seller;

  public static final String SERIALIZED_NAME_SKU_NAME = "SkuName";
  @SerializedName(SERIALIZED_NAME_SKU_NAME)
  private String skuName;

  public UserorderdetailsItemMetadataItemsInner() {
  }

  public UserorderdetailsItemMetadataItemsInner assemblyOptions(List<UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner> assemblyOptions) {
    this.assemblyOptions = assemblyOptions;
    return this;
  }

  public UserorderdetailsItemMetadataItemsInner addAssemblyOptionsItem(UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner assemblyOptionsItem) {
    if (this.assemblyOptions == null) {
      this.assemblyOptions = new ArrayList<>();
    }
    this.assemblyOptions.add(assemblyOptionsItem);
    return this;
  }

  /**
   * Displays information about [assembly options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH) related to the item, if there are any.
   * @return assemblyOptions
   */
  @javax.annotation.Nonnull
  public List<UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner> getAssemblyOptions() {
    return assemblyOptions;
  }

  public void setAssemblyOptions(List<UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner> assemblyOptions) {
    this.assemblyOptions = assemblyOptions;
  }


  public UserorderdetailsItemMetadataItemsInner detailUrl(String detailUrl) {
    this.detailUrl = detailUrl;
    return this;
  }

  /**
   * URL slug of the item.
   * @return detailUrl
   */
  @javax.annotation.Nonnull
  public String getDetailUrl() {
    return detailUrl;
  }

  public void setDetailUrl(String detailUrl) {
    this.detailUrl = detailUrl;
  }


  public UserorderdetailsItemMetadataItemsInner ean(String ean) {
    this.ean = ean;
    return this;
  }

  /**
   * EAN of the item.
   * @return ean
   */
  @javax.annotation.Nonnull
  public String getEan() {
    return ean;
  }

  public void setEan(String ean) {
    this.ean = ean;
  }


  public UserorderdetailsItemMetadataItemsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Item&#39;s SKU ID, which is a unique numerical identifier.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UserorderdetailsItemMetadataItemsInner imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Item&#39;s SKU image URL.
   * @return imageUrl
   */
  @javax.annotation.Nonnull
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public UserorderdetailsItemMetadataItemsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the item as displayed to customers in the storefront.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UserorderdetailsItemMetadataItemsInner productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * ID of the Product associated with the item.
   * @return productId
   */
  @javax.annotation.Nonnull
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public UserorderdetailsItemMetadataItemsInner refId(String refId) {
    this.refId = refId;
    return this;
  }

  /**
   * Item&#39;s reference ID.
   * @return refId
   */
  @javax.annotation.Nonnull
  public String getRefId() {
    return refId;
  }

  public void setRefId(String refId) {
    this.refId = refId;
  }


  public UserorderdetailsItemMetadataItemsInner seller(String seller) {
    this.seller = seller;
    return this;
  }

  /**
   * Seller ID that identifies the seller the item belongs to.
   * @return seller
   */
  @javax.annotation.Nonnull
  public String getSeller() {
    return seller;
  }

  public void setSeller(String seller) {
    this.seller = seller;
  }


  public UserorderdetailsItemMetadataItemsInner skuName(String skuName) {
    this.skuName = skuName;
    return this;
  }

  /**
   * Name of the SKU corresponding to the item.
   * @return skuName
   */
  @javax.annotation.Nonnull
  public String getSkuName() {
    return skuName;
  }

  public void setSkuName(String skuName) {
    this.skuName = skuName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserorderdetailsItemMetadataItemsInner userorderdetailsItemMetadataItemsInner = (UserorderdetailsItemMetadataItemsInner) o;
    return Objects.equals(this.assemblyOptions, userorderdetailsItemMetadataItemsInner.assemblyOptions) &&
        Objects.equals(this.detailUrl, userorderdetailsItemMetadataItemsInner.detailUrl) &&
        Objects.equals(this.ean, userorderdetailsItemMetadataItemsInner.ean) &&
        Objects.equals(this.id, userorderdetailsItemMetadataItemsInner.id) &&
        Objects.equals(this.imageUrl, userorderdetailsItemMetadataItemsInner.imageUrl) &&
        Objects.equals(this.name, userorderdetailsItemMetadataItemsInner.name) &&
        Objects.equals(this.productId, userorderdetailsItemMetadataItemsInner.productId) &&
        Objects.equals(this.refId, userorderdetailsItemMetadataItemsInner.refId) &&
        Objects.equals(this.seller, userorderdetailsItemMetadataItemsInner.seller) &&
        Objects.equals(this.skuName, userorderdetailsItemMetadataItemsInner.skuName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assemblyOptions, detailUrl, ean, id, imageUrl, name, productId, refId, seller, skuName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserorderdetailsItemMetadataItemsInner {\n");
    sb.append("    assemblyOptions: ").append(toIndentedString(assemblyOptions)).append("\n");
    sb.append("    detailUrl: ").append(toIndentedString(detailUrl)).append("\n");
    sb.append("    ean: ").append(toIndentedString(ean)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    refId: ").append(toIndentedString(refId)).append("\n");
    sb.append("    seller: ").append(toIndentedString(seller)).append("\n");
    sb.append("    skuName: ").append(toIndentedString(skuName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssemblyOptions");
    openapiFields.add("DetailUrl");
    openapiFields.add("Ean");
    openapiFields.add("Id");
    openapiFields.add("ImageUrl");
    openapiFields.add("Name");
    openapiFields.add("ProductId");
    openapiFields.add("RefId");
    openapiFields.add("Seller");
    openapiFields.add("SkuName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AssemblyOptions");
    openapiRequiredFields.add("DetailUrl");
    openapiRequiredFields.add("Ean");
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("ImageUrl");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("ProductId");
    openapiRequiredFields.add("RefId");
    openapiRequiredFields.add("Seller");
    openapiRequiredFields.add("SkuName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserorderdetailsItemMetadataItemsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserorderdetailsItemMetadataItemsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserorderdetailsItemMetadataItemsInner is not found in the empty JSON string", UserorderdetailsItemMetadataItemsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserorderdetailsItemMetadataItemsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserorderdetailsItemMetadataItemsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserorderdetailsItemMetadataItemsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("AssemblyOptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssemblyOptions` to be an array in the JSON string but got `%s`", jsonObj.get("AssemblyOptions").toString()));
      }

      JsonArray jsonArrayassemblyOptions = jsonObj.getAsJsonArray("AssemblyOptions");
      // validate the required field `AssemblyOptions` (array)
      for (int i = 0; i < jsonArrayassemblyOptions.size(); i++) {
        UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.validateJsonElement(jsonArrayassemblyOptions.get(i));
      };
      if (!jsonObj.get("DetailUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DetailUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DetailUrl").toString()));
      }
      if (!jsonObj.get("Ean").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Ean` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Ean").toString()));
      }
      if (!jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if (!jsonObj.get("ImageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageUrl").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("ProductId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProductId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProductId").toString()));
      }
      if (!jsonObj.get("RefId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RefId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RefId").toString()));
      }
      if (!jsonObj.get("Seller").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Seller` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Seller").toString()));
      }
      if (!jsonObj.get("SkuName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SkuName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SkuName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserorderdetailsItemMetadataItemsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserorderdetailsItemMetadataItemsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserorderdetailsItemMetadataItemsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserorderdetailsItemMetadataItemsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<UserorderdetailsItemMetadataItemsInner>() {
           @Override
           public void write(JsonWriter out, UserorderdetailsItemMetadataItemsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserorderdetailsItemMetadataItemsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserorderdetailsItemMetadataItemsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserorderdetailsItemMetadataItemsInner
   * @throws IOException if the JSON string is invalid with respect to UserorderdetailsItemMetadataItemsInner
   */
  public static UserorderdetailsItemMetadataItemsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserorderdetailsItemMetadataItemsInner.class);
  }

  /**
   * Convert an instance of UserorderdetailsItemMetadataItemsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

