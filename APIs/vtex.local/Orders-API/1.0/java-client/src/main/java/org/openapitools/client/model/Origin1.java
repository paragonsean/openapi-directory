/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Fulfillment1;
import org.openapitools.client.model.Marketplace2;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Origin1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:33.631540-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Origin1 {
  public static final String SERIALIZED_NAME_FULFILLMENT = "Fulfillment";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT)
  private Fulfillment1 fulfillment;

  public static final String SERIALIZED_NAME_MARKETPLACE = "Marketplace";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE)
  private Marketplace2 marketplace;

  public Origin1() {
  }

  public Origin1 fulfillment(Fulfillment1 fulfillment) {
    this.fulfillment = fulfillment;
    return this;
  }

  /**
   * Get fulfillment
   * @return fulfillment
   */
  @javax.annotation.Nonnull
  public Fulfillment1 getFulfillment() {
    return fulfillment;
  }

  public void setFulfillment(Fulfillment1 fulfillment) {
    this.fulfillment = fulfillment;
  }


  public Origin1 marketplace(Marketplace2 marketplace) {
    this.marketplace = marketplace;
    return this;
  }

  /**
   * Get marketplace
   * @return marketplace
   */
  @javax.annotation.Nonnull
  public Marketplace2 getMarketplace() {
    return marketplace;
  }

  public void setMarketplace(Marketplace2 marketplace) {
    this.marketplace = marketplace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Origin1 origin1 = (Origin1) o;
    return Objects.equals(this.fulfillment, origin1.fulfillment) &&
        Objects.equals(this.marketplace, origin1.marketplace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fulfillment, marketplace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Origin1 {\n");
    sb.append("    fulfillment: ").append(toIndentedString(fulfillment)).append("\n");
    sb.append("    marketplace: ").append(toIndentedString(marketplace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Fulfillment");
    openapiFields.add("Marketplace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Fulfillment");
    openapiRequiredFields.add("Marketplace");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Origin1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Origin1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Origin1 is not found in the empty JSON string", Origin1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Origin1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Origin1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Origin1.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Fulfillment`
      Fulfillment1.validateJsonElement(jsonObj.get("Fulfillment"));
      // validate the required field `Marketplace`
      Marketplace2.validateJsonElement(jsonObj.get("Marketplace"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Origin1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Origin1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Origin1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Origin1.class));

       return (TypeAdapter<T>) new TypeAdapter<Origin1>() {
           @Override
           public void write(JsonWriter out, Origin1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Origin1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Origin1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Origin1
   * @throws IOException if the JSON string is invalid with respect to Origin1
   */
  public static Origin1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Origin1.class);
  }

  /**
   * Convert an instance of Origin1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

