/*
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CommititemfeedorderstatusRequest;
import org.openapitools.client.model.FeedConfigurationRequest;
import org.openapitools.client.model.GetFeedConfiguration200Response;
import org.openapitools.client.model.Getfeedorderstatus;
import org.openapitools.client.model.TestJSONataExpression;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FeedV3Api
 */
@Disabled
public class FeedV3ApiTest {

    private final FeedV3Api api = new FeedV3Api();

    /**
     * Commit feed items
     *
     * Commit items in the [feed](https://developers.vtex.com/docs/guides/orders-feed) queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commititemfeedorderstatusTest() throws ApiException {
        String contentType = null;
        String accept = null;
        CommititemfeedorderstatusRequest commititemfeedorderstatusRequest = null;
        Object response = api.commititemfeedorderstatus(contentType, accept, commititemfeedorderstatusRequest);
        // TODO: test validations
    }

    /**
     * Create or update feed configuration
     *
     * The Orders Feed v3 is the best way to create order integrations. Below you can find details on the configuration API specification, and to know more see our [Feed v3 guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed) and our [order integration guide](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration)    There are two types of filtering that can be used. The &#x60;FromWorkflow&#x60; type filters orders by status, whereas the &#x60;FromOrders&#x60; type uses JSONata expressions to filter orders according to any property in the orders JSON document. This enables stores to filter delivered orders and orders in which products have been added or removed, for example. To learn more, access the [JSONata documentation](https://docs.jsonata.org/overview.html) and test filtering JSONata expressions with our [Test JSONata expression](https://developers.vtex.com/docs/api-reference/orders-api#post-/api/orders/expressions/jsonata) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void feedConfigurationTest() throws ApiException {
        String accept = null;
        String contentType = null;
        FeedConfigurationRequest feedConfigurationRequest = null;
        api.feedConfiguration(accept, contentType, feedConfigurationRequest);
        // TODO: test validations
    }

    /**
     * Delete feed configuration
     *
     * Deletes the configuration set up in [Feed v3](https://developers.vtex.com/docs/guides/orders-feed).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void feedConfigurationDeleteTest() throws ApiException {
        String accept = null;
        String contentType = null;
        api.feedConfigurationDelete(accept, contentType);
        // TODO: test validations
    }

    /**
     * Get feed configuration
     *
     * The Orders Feed v3 is the best way to create order integrations. Below you can find details on the configuration API specification, and to know more see our [Feed v3 guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed) and our [order integration guide](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration).   &gt; ðŸ“˜ Onboarding guide   &gt;  &gt; Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer&#39;s journey.    
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeedConfigurationTest() throws ApiException {
        String contentType = null;
        String accept = null;
        GetFeedConfiguration200Response response = api.getFeedConfiguration(contentType, accept);
        // TODO: test validations
    }

    /**
     * Retrieve feed items
     *
     * Retrieve items from [feed](https://developers.vtex.com/docs/guides/orders-feed) queue.    The event will be removed if the message &#x60;send retry&#x60; is equal to, or greater than the maximum retention period.    &gt; This API will return &#x60;404 Not Found&#x60; if there is no [Feed Configuration](https://developers.vtex.com/docs/guides/orders-feed) available for the given X-VTEX-API-AppKey.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getfeedorderstatus1Test() throws ApiException {
        String maxlot = null;
        String accept = null;
        String contentType = null;
        List<Getfeedorderstatus> response = api.getfeedorderstatus1(maxlot, accept, contentType);
        // TODO: test validations
    }

    /**
     * Test JSONata expression
     *
     * This endpoint allows you to test a JSON document with a JSONata expression, returning &#x60;true&#x60; if the document meets the criteria posed in the expression, or &#x60;false&#x60; if it does not.    Since JSONata expressions can be used to filter order updates in the [Orders API feed and hook](https://developers.vtex.com/docs/guides/orders-feed), this endpoint can be used to test an expression&#39;s results before configuring the [feed or hook](https://developers.vtex.com/docs/guides/orders-feed).    Learn more about how to use JSONata expressions, in the [JSONata documentation](https://docs.jsonata.org/overview.html).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testJSONataExpressionTest() throws ApiException {
        String accept = null;
        String contentType = null;
        TestJSONataExpression testJSONataExpression = null;
        api.testJSONataExpression(accept, contentType, testJSONataExpression);
        // TODO: test validations
    }

}
