# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.origin2 import Origin2
from openapi_server import util


class HookConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_change: str=None, domain: str=None, last_change: str=None, last_state: str=None, order_id: str=None, origin: Origin2=None, state: str=None):
        """HookConfiguration - a model defined in OpenAPI

        :param current_change: The current_change of this HookConfiguration.
        :param domain: The domain of this HookConfiguration.
        :param last_change: The last_change of this HookConfiguration.
        :param last_state: The last_state of this HookConfiguration.
        :param order_id: The order_id of this HookConfiguration.
        :param origin: The origin of this HookConfiguration.
        :param state: The state of this HookConfiguration.
        """
        self.openapi_types = {
            'current_change': str,
            'domain': str,
            'last_change': str,
            'last_state': str,
            'order_id': str,
            'origin': Origin2,
            'state': str
        }

        self.attribute_map = {
            'current_change': 'CurrentChange',
            'domain': 'Domain',
            'last_change': 'LastChange',
            'last_state': 'LastState',
            'order_id': 'OrderId',
            'origin': 'Origin',
            'state': 'State'
        }

        self._current_change = current_change
        self._domain = domain
        self._last_change = last_change
        self._last_state = last_state
        self._order_id = order_id
        self._origin = origin
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HookConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HookConfiguration of this HookConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_change(self):
        """Gets the current_change of this HookConfiguration.


        :return: The current_change of this HookConfiguration.
        :rtype: str
        """
        return self._current_change

    @current_change.setter
    def current_change(self, current_change):
        """Sets the current_change of this HookConfiguration.


        :param current_change: The current_change of this HookConfiguration.
        :type current_change: str
        """
        if current_change is None:
            raise ValueError("Invalid value for `current_change`, must not be `None`")

        self._current_change = current_change

    @property
    def domain(self):
        """Gets the domain of this HookConfiguration.


        :return: The domain of this HookConfiguration.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this HookConfiguration.


        :param domain: The domain of this HookConfiguration.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def last_change(self):
        """Gets the last_change of this HookConfiguration.


        :return: The last_change of this HookConfiguration.
        :rtype: str
        """
        return self._last_change

    @last_change.setter
    def last_change(self, last_change):
        """Sets the last_change of this HookConfiguration.


        :param last_change: The last_change of this HookConfiguration.
        :type last_change: str
        """
        if last_change is None:
            raise ValueError("Invalid value for `last_change`, must not be `None`")

        self._last_change = last_change

    @property
    def last_state(self):
        """Gets the last_state of this HookConfiguration.


        :return: The last_state of this HookConfiguration.
        :rtype: str
        """
        return self._last_state

    @last_state.setter
    def last_state(self, last_state):
        """Sets the last_state of this HookConfiguration.


        :param last_state: The last_state of this HookConfiguration.
        :type last_state: str
        """
        if last_state is None:
            raise ValueError("Invalid value for `last_state`, must not be `None`")

        self._last_state = last_state

    @property
    def order_id(self):
        """Gets the order_id of this HookConfiguration.


        :return: The order_id of this HookConfiguration.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this HookConfiguration.


        :param order_id: The order_id of this HookConfiguration.
        :type order_id: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def origin(self):
        """Gets the origin of this HookConfiguration.


        :return: The origin of this HookConfiguration.
        :rtype: Origin2
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this HookConfiguration.


        :param origin: The origin of this HookConfiguration.
        :type origin: Origin2
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")

        self._origin = origin

    @property
    def state(self):
        """Gets the state of this HookConfiguration.


        :return: The state of this HookConfiguration.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this HookConfiguration.


        :param state: The state of this HookConfiguration.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
