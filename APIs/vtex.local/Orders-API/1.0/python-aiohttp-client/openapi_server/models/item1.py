# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Item1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str='335', id: str=None, price: int=2499, quantity: int=2):
        """Item1 - a model defined in OpenAPI

        :param description: The description of this Item1.
        :param id: The id of this Item1.
        :param price: The price of this Item1.
        :param quantity: The quantity of this Item1.
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'price': int,
            'quantity': int
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'price': 'price',
            'quantity': 'quantity'
        }

        self._description = description
        self._id = id
        self._price = price
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item1 of this Item1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Item1.

        You can use this field for additional information about the SKU being invoiced.

        :return: The description of this Item1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Item1.

        You can use this field for additional information about the SKU being invoiced.

        :param description: The description of this Item1.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Item1.

        ID of the SKU being invoiced.

        :return: The id of this Item1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Item1.

        ID of the SKU being invoiced.

        :param id: The id of this Item1.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def price(self):
        """Gets the price of this Item1.

        Total price of the SKU being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.

        :return: The price of this Item1.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Item1.

        Total price of the SKU being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.

        :param price: The price of this Item1.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this Item1.

        Quantity currently in inventory of the SKU being invoiced.

        :return: The quantity of this Item1.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Item1.

        Quantity currently in inventory of the SKU being invoiced.

        :param quantity: The quantity of this Item1.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity
