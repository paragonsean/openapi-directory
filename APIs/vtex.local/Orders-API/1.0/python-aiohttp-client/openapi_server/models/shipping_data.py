# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.logistics_info import LogisticsInfo
from openapi_server.models.selected_address import SelectedAddress
from openapi_server import util


class ShippingData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, id: str=None, logistics_info: List[LogisticsInfo]=None, selected_addresses: List[SelectedAddress]=None, tracking_hints: str=None):
        """ShippingData - a model defined in OpenAPI

        :param address: The address of this ShippingData.
        :param id: The id of this ShippingData.
        :param logistics_info: The logistics_info of this ShippingData.
        :param selected_addresses: The selected_addresses of this ShippingData.
        :param tracking_hints: The tracking_hints of this ShippingData.
        """
        self.openapi_types = {
            'address': Address,
            'id': str,
            'logistics_info': List[LogisticsInfo],
            'selected_addresses': List[SelectedAddress],
            'tracking_hints': str
        }

        self.attribute_map = {
            'address': 'address',
            'id': 'id',
            'logistics_info': 'logisticsInfo',
            'selected_addresses': 'selectedAddresses',
            'tracking_hints': 'trackingHints'
        }

        self._address = address
        self._id = id
        self._logistics_info = logistics_info
        self._selected_addresses = selected_addresses
        self._tracking_hints = tracking_hints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShippingData of this ShippingData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ShippingData.


        :return: The address of this ShippingData.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ShippingData.


        :param address: The address of this ShippingData.
        :type address: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def id(self):
        """Gets the id of this ShippingData.

        Object ID, the expected value is `shippingData`.

        :return: The id of this ShippingData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShippingData.

        Object ID, the expected value is `shippingData`.

        :param id: The id of this ShippingData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def logistics_info(self):
        """Gets the logistics_info of this ShippingData.

        Array of objects containing item's logistics information.

        :return: The logistics_info of this ShippingData.
        :rtype: List[LogisticsInfo]
        """
        return self._logistics_info

    @logistics_info.setter
    def logistics_info(self, logistics_info):
        """Sets the logistics_info of this ShippingData.

        Array of objects containing item's logistics information.

        :param logistics_info: The logistics_info of this ShippingData.
        :type logistics_info: List[LogisticsInfo]
        """
        if logistics_info is None:
            raise ValueError("Invalid value for `logistics_info`, must not be `None`")

        self._logistics_info = logistics_info

    @property
    def selected_addresses(self):
        """Gets the selected_addresses of this ShippingData.

        Information about selected adresses.

        :return: The selected_addresses of this ShippingData.
        :rtype: List[SelectedAddress]
        """
        return self._selected_addresses

    @selected_addresses.setter
    def selected_addresses(self, selected_addresses):
        """Sets the selected_addresses of this ShippingData.

        Information about selected adresses.

        :param selected_addresses: The selected_addresses of this ShippingData.
        :type selected_addresses: List[SelectedAddress]
        """
        if selected_addresses is None:
            raise ValueError("Invalid value for `selected_addresses`, must not be `None`")

        self._selected_addresses = selected_addresses

    @property
    def tracking_hints(self):
        """Gets the tracking_hints of this ShippingData.


        :return: The tracking_hints of this ShippingData.
        :rtype: str
        """
        return self._tracking_hints

    @tracking_hints.setter
    def tracking_hints(self, tracking_hints):
        """Sets the tracking_hints of this ShippingData.


        :param tracking_hints: The tracking_hints of this ShippingData.
        :type tracking_hints: str
        """
        if tracking_hints is None:
            raise ValueError("Invalid value for `tracking_hints`, must not be `None`")

        self._tracking_hints = tracking_hints
