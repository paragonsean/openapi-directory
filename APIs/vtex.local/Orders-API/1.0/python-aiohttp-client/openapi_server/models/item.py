# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_info import AdditionalInfo
from openapi_server.models.item_attachment import ItemAttachment
from openapi_server.models.item_attachment_offerings_inner import ItemAttachmentOfferingsInner
from openapi_server.models.item_price_definitions import ItemPriceDefinitions
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_info: AdditionalInfo=None, assemblies: List[object]=None, attachment_offerings: List[ItemAttachmentOfferingsInner]=None, attachments: List[str]=None, bundle_items: List[str]=None, call_center_operator: str=None, commission: int=None, components: List[str]=None, cost_price: int=None, detail_url: str=None, ean: str=None, freight_commission: int=None, id: str=None, image_url: str=None, is_gift: bool=None, item_attachment: ItemAttachment=None, list_price: int=None, lock_id: str=None, manual_price: str=None, measurement_unit: str=None, name: str=None, offerings: List[str]=None, params: List[str]=None, parent_assembly_binding: str=None, parent_item_index: str=None, pre_sale_date: str=None, price: int=None, price_definitions: ItemPriceDefinitions=None, price_tags: List[str]=None, price_valid_until: str=None, product_id: str=None, quantity: int=None, ref_id: str=None, reward_value: int=None, seller: str=None, seller_sku: str=None, selling_price: int=None, serial_numbers: str=None, shipping_price: str=None, tax: int=None, tax_code: str=None, unique_id: str=None, unit_multiplier: int=None):
        """Item - a model defined in OpenAPI

        :param additional_info: The additional_info of this Item.
        :param assemblies: The assemblies of this Item.
        :param attachment_offerings: The attachment_offerings of this Item.
        :param attachments: The attachments of this Item.
        :param bundle_items: The bundle_items of this Item.
        :param call_center_operator: The call_center_operator of this Item.
        :param commission: The commission of this Item.
        :param components: The components of this Item.
        :param cost_price: The cost_price of this Item.
        :param detail_url: The detail_url of this Item.
        :param ean: The ean of this Item.
        :param freight_commission: The freight_commission of this Item.
        :param id: The id of this Item.
        :param image_url: The image_url of this Item.
        :param is_gift: The is_gift of this Item.
        :param item_attachment: The item_attachment of this Item.
        :param list_price: The list_price of this Item.
        :param lock_id: The lock_id of this Item.
        :param manual_price: The manual_price of this Item.
        :param measurement_unit: The measurement_unit of this Item.
        :param name: The name of this Item.
        :param offerings: The offerings of this Item.
        :param params: The params of this Item.
        :param parent_assembly_binding: The parent_assembly_binding of this Item.
        :param parent_item_index: The parent_item_index of this Item.
        :param pre_sale_date: The pre_sale_date of this Item.
        :param price: The price of this Item.
        :param price_definitions: The price_definitions of this Item.
        :param price_tags: The price_tags of this Item.
        :param price_valid_until: The price_valid_until of this Item.
        :param product_id: The product_id of this Item.
        :param quantity: The quantity of this Item.
        :param ref_id: The ref_id of this Item.
        :param reward_value: The reward_value of this Item.
        :param seller: The seller of this Item.
        :param seller_sku: The seller_sku of this Item.
        :param selling_price: The selling_price of this Item.
        :param serial_numbers: The serial_numbers of this Item.
        :param shipping_price: The shipping_price of this Item.
        :param tax: The tax of this Item.
        :param tax_code: The tax_code of this Item.
        :param unique_id: The unique_id of this Item.
        :param unit_multiplier: The unit_multiplier of this Item.
        """
        self.openapi_types = {
            'additional_info': AdditionalInfo,
            'assemblies': List[object],
            'attachment_offerings': List[ItemAttachmentOfferingsInner],
            'attachments': List[str],
            'bundle_items': List[str],
            'call_center_operator': str,
            'commission': int,
            'components': List[str],
            'cost_price': int,
            'detail_url': str,
            'ean': str,
            'freight_commission': int,
            'id': str,
            'image_url': str,
            'is_gift': bool,
            'item_attachment': ItemAttachment,
            'list_price': int,
            'lock_id': str,
            'manual_price': str,
            'measurement_unit': str,
            'name': str,
            'offerings': List[str],
            'params': List[str],
            'parent_assembly_binding': str,
            'parent_item_index': str,
            'pre_sale_date': str,
            'price': int,
            'price_definitions': ItemPriceDefinitions,
            'price_tags': List[str],
            'price_valid_until': str,
            'product_id': str,
            'quantity': int,
            'ref_id': str,
            'reward_value': int,
            'seller': str,
            'seller_sku': str,
            'selling_price': int,
            'serial_numbers': str,
            'shipping_price': str,
            'tax': int,
            'tax_code': str,
            'unique_id': str,
            'unit_multiplier': int
        }

        self.attribute_map = {
            'additional_info': 'additionalInfo',
            'assemblies': 'assemblies',
            'attachment_offerings': 'attachmentOfferings',
            'attachments': 'attachments',
            'bundle_items': 'bundleItems',
            'call_center_operator': 'callCenterOperator',
            'commission': 'commission',
            'components': 'components',
            'cost_price': 'costPrice',
            'detail_url': 'detailUrl',
            'ean': 'ean',
            'freight_commission': 'freightCommission',
            'id': 'id',
            'image_url': 'imageUrl',
            'is_gift': 'isGift',
            'item_attachment': 'itemAttachment',
            'list_price': 'listPrice',
            'lock_id': 'lockId',
            'manual_price': 'manualPrice',
            'measurement_unit': 'measurementUnit',
            'name': 'name',
            'offerings': 'offerings',
            'params': 'params',
            'parent_assembly_binding': 'parentAssemblyBinding',
            'parent_item_index': 'parentItemIndex',
            'pre_sale_date': 'preSaleDate',
            'price': 'price',
            'price_definitions': 'priceDefinitions',
            'price_tags': 'priceTags',
            'price_valid_until': 'priceValidUntil',
            'product_id': 'productId',
            'quantity': 'quantity',
            'ref_id': 'refId',
            'reward_value': 'rewardValue',
            'seller': 'seller',
            'seller_sku': 'sellerSku',
            'selling_price': 'sellingPrice',
            'serial_numbers': 'serialNumbers',
            'shipping_price': 'shippingPrice',
            'tax': 'tax',
            'tax_code': 'taxCode',
            'unique_id': 'uniqueId',
            'unit_multiplier': 'unitMultiplier'
        }

        self._additional_info = additional_info
        self._assemblies = assemblies
        self._attachment_offerings = attachment_offerings
        self._attachments = attachments
        self._bundle_items = bundle_items
        self._call_center_operator = call_center_operator
        self._commission = commission
        self._components = components
        self._cost_price = cost_price
        self._detail_url = detail_url
        self._ean = ean
        self._freight_commission = freight_commission
        self._id = id
        self._image_url = image_url
        self._is_gift = is_gift
        self._item_attachment = item_attachment
        self._list_price = list_price
        self._lock_id = lock_id
        self._manual_price = manual_price
        self._measurement_unit = measurement_unit
        self._name = name
        self._offerings = offerings
        self._params = params
        self._parent_assembly_binding = parent_assembly_binding
        self._parent_item_index = parent_item_index
        self._pre_sale_date = pre_sale_date
        self._price = price
        self._price_definitions = price_definitions
        self._price_tags = price_tags
        self._price_valid_until = price_valid_until
        self._product_id = product_id
        self._quantity = quantity
        self._ref_id = ref_id
        self._reward_value = reward_value
        self._seller = seller
        self._seller_sku = seller_sku
        self._selling_price = selling_price
        self._serial_numbers = serial_numbers
        self._shipping_price = shipping_price
        self._tax = tax
        self._tax_code = tax_code
        self._unique_id = unique_id
        self._unit_multiplier = unit_multiplier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item of this Item.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_info(self):
        """Gets the additional_info of this Item.


        :return: The additional_info of this Item.
        :rtype: AdditionalInfo
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this Item.


        :param additional_info: The additional_info of this Item.
        :type additional_info: AdditionalInfo
        """
        if additional_info is None:
            raise ValueError("Invalid value for `additional_info`, must not be `None`")

        self._additional_info = additional_info

    @property
    def assemblies(self):
        """Gets the assemblies of this Item.

        Retrieves information about orders item's customizations.

        :return: The assemblies of this Item.
        :rtype: List[object]
        """
        return self._assemblies

    @assemblies.setter
    def assemblies(self, assemblies):
        """Sets the assemblies of this Item.

        Retrieves information about orders item's customizations.

        :param assemblies: The assemblies of this Item.
        :type assemblies: List[object]
        """
        if assemblies is None:
            raise ValueError("Invalid value for `assemblies`, must not be `None`")

        self._assemblies = assemblies

    @property
    def attachment_offerings(self):
        """Gets the attachment_offerings of this Item.

        List of attachments details.

        :return: The attachment_offerings of this Item.
        :rtype: List[ItemAttachmentOfferingsInner]
        """
        return self._attachment_offerings

    @attachment_offerings.setter
    def attachment_offerings(self, attachment_offerings):
        """Sets the attachment_offerings of this Item.

        List of attachments details.

        :param attachment_offerings: The attachment_offerings of this Item.
        :type attachment_offerings: List[ItemAttachmentOfferingsInner]
        """
        if attachment_offerings is None:
            raise ValueError("Invalid value for `attachment_offerings`, must not be `None`")

        self._attachment_offerings = attachment_offerings

    @property
    def attachments(self):
        """Gets the attachments of this Item.

        Array containing information on attachments.

        :return: The attachments of this Item.
        :rtype: List[str]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Item.

        Array containing information on attachments.

        :param attachments: The attachments of this Item.
        :type attachments: List[str]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")

        self._attachments = attachments

    @property
    def bundle_items(self):
        """Gets the bundle_items of this Item.

        Information on services sold along with the item's SKU. For example, a gift package.

        :return: The bundle_items of this Item.
        :rtype: List[str]
        """
        return self._bundle_items

    @bundle_items.setter
    def bundle_items(self, bundle_items):
        """Sets the bundle_items of this Item.

        Information on services sold along with the item's SKU. For example, a gift package.

        :param bundle_items: The bundle_items of this Item.
        :type bundle_items: List[str]
        """
        if bundle_items is None:
            raise ValueError("Invalid value for `bundle_items`, must not be `None`")

        self._bundle_items = bundle_items

    @property
    def call_center_operator(self):
        """Gets the call_center_operator of this Item.

        Call center operator responsible for the order.

        :return: The call_center_operator of this Item.
        :rtype: str
        """
        return self._call_center_operator

    @call_center_operator.setter
    def call_center_operator(self, call_center_operator):
        """Sets the call_center_operator of this Item.

        Call center operator responsible for the order.

        :param call_center_operator: The call_center_operator of this Item.
        :type call_center_operator: str
        """
        if call_center_operator is None:
            raise ValueError("Invalid value for `call_center_operator`, must not be `None`")

        self._call_center_operator = call_center_operator

    @property
    def commission(self):
        """Gets the commission of this Item.

        Commission value registered for the seller.

        :return: The commission of this Item.
        :rtype: int
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this Item.

        Commission value registered for the seller.

        :param commission: The commission of this Item.
        :type commission: int
        """
        if commission is None:
            raise ValueError("Invalid value for `commission`, must not be `None`")

        self._commission = commission

    @property
    def components(self):
        """Gets the components of this Item.

        Item's components.

        :return: The components of this Item.
        :rtype: List[str]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this Item.

        Item's components.

        :param components: The components of this Item.
        :type components: List[str]
        """
        if components is None:
            raise ValueError("Invalid value for `components`, must not be `None`")

        self._components = components

    @property
    def cost_price(self):
        """Gets the cost_price of this Item.

        Item's cost price.

        :return: The cost_price of this Item.
        :rtype: int
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this Item.

        Item's cost price.

        :param cost_price: The cost_price of this Item.
        :type cost_price: int
        """
        if cost_price is None:
            raise ValueError("Invalid value for `cost_price`, must not be `None`")

        self._cost_price = cost_price

    @property
    def detail_url(self):
        """Gets the detail_url of this Item.

        URL slug of the item.

        :return: The detail_url of this Item.
        :rtype: str
        """
        return self._detail_url

    @detail_url.setter
    def detail_url(self, detail_url):
        """Sets the detail_url of this Item.

        URL slug of the item.

        :param detail_url: The detail_url of this Item.
        :type detail_url: str
        """
        if detail_url is None:
            raise ValueError("Invalid value for `detail_url`, must not be `None`")

        self._detail_url = detail_url

    @property
    def ean(self):
        """Gets the ean of this Item.

        EAN of the SKU.

        :return: The ean of this Item.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this Item.

        EAN of the SKU.

        :param ean: The ean of this Item.
        :type ean: str
        """
        if ean is None:
            raise ValueError("Invalid value for `ean`, must not be `None`")

        self._ean = ean

    @property
    def freight_commission(self):
        """Gets the freight_commission of this Item.

        Value of the freight commission.

        :return: The freight_commission of this Item.
        :rtype: int
        """
        return self._freight_commission

    @freight_commission.setter
    def freight_commission(self, freight_commission):
        """Sets the freight_commission of this Item.

        Value of the freight commission.

        :param freight_commission: The freight_commission of this Item.
        :type freight_commission: int
        """
        if freight_commission is None:
            raise ValueError("Invalid value for `freight_commission`, must not be `None`")

        self._freight_commission = freight_commission

    @property
    def id(self):
        """Gets the id of this Item.

        Item's SKU ID, which is a unique numerical identifier.

        :return: The id of this Item.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Item.

        Item's SKU ID, which is a unique numerical identifier.

        :param id: The id of this Item.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this Item.

        Item's SKU image URL.

        :return: The image_url of this Item.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Item.

        Item's SKU image URL.

        :param image_url: The image_url of this Item.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")

        self._image_url = image_url

    @property
    def is_gift(self):
        """Gets the is_gift of this Item.

        This field is `true` when the item is a gift in order context and `false` when it is not.

        :return: The is_gift of this Item.
        :rtype: bool
        """
        return self._is_gift

    @is_gift.setter
    def is_gift(self, is_gift):
        """Sets the is_gift of this Item.

        This field is `true` when the item is a gift in order context and `false` when it is not.

        :param is_gift: The is_gift of this Item.
        :type is_gift: bool
        """
        if is_gift is None:
            raise ValueError("Invalid value for `is_gift`, must not be `None`")

        self._is_gift = is_gift

    @property
    def item_attachment(self):
        """Gets the item_attachment of this Item.


        :return: The item_attachment of this Item.
        :rtype: ItemAttachment
        """
        return self._item_attachment

    @item_attachment.setter
    def item_attachment(self, item_attachment):
        """Sets the item_attachment of this Item.


        :param item_attachment: The item_attachment of this Item.
        :type item_attachment: ItemAttachment
        """
        if item_attachment is None:
            raise ValueError("Invalid value for `item_attachment`, must not be `None`")

        self._item_attachment = item_attachment

    @property
    def list_price(self):
        """Gets the list_price of this Item.

        Item's list price.

        :return: The list_price of this Item.
        :rtype: int
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this Item.

        Item's list price.

        :param list_price: The list_price of this Item.
        :type list_price: int
        """
        if list_price is None:
            raise ValueError("Invalid value for `list_price`, must not be `None`")

        self._list_price = list_price

    @property
    def lock_id(self):
        """Gets the lock_id of this Item.

        Reservation ID.

        :return: The lock_id of this Item.
        :rtype: str
        """
        return self._lock_id

    @lock_id.setter
    def lock_id(self, lock_id):
        """Sets the lock_id of this Item.

        Reservation ID.

        :param lock_id: The lock_id of this Item.
        :type lock_id: str
        """
        if lock_id is None:
            raise ValueError("Invalid value for `lock_id`, must not be `None`")

        self._lock_id = lock_id

    @property
    def manual_price(self):
        """Gets the manual_price of this Item.

        Item's manual price.

        :return: The manual_price of this Item.
        :rtype: str
        """
        return self._manual_price

    @manual_price.setter
    def manual_price(self, manual_price):
        """Sets the manual_price of this Item.

        Item's manual price.

        :param manual_price: The manual_price of this Item.
        :type manual_price: str
        """
        if manual_price is None:
            raise ValueError("Invalid value for `manual_price`, must not be `None`")

        self._manual_price = manual_price

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this Item.

        Item's measurement unit.

        :return: The measurement_unit of this Item.
        :rtype: str
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this Item.

        Item's measurement unit.

        :param measurement_unit: The measurement_unit of this Item.
        :type measurement_unit: str
        """
        if measurement_unit is None:
            raise ValueError("Invalid value for `measurement_unit`, must not be `None`")

        self._measurement_unit = measurement_unit

    @property
    def name(self):
        """Gets the name of this Item.

        Item's name.

        :return: The name of this Item.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Item.

        Item's name.

        :param name: The name of this Item.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def offerings(self):
        """Gets the offerings of this Item.

        Item's offerings, which are services related to the item. For example, guarantee or installation.

        :return: The offerings of this Item.
        :rtype: List[str]
        """
        return self._offerings

    @offerings.setter
    def offerings(self, offerings):
        """Sets the offerings of this Item.

        Item's offerings, which are services related to the item. For example, guarantee or installation.

        :param offerings: The offerings of this Item.
        :type offerings: List[str]
        """
        if offerings is None:
            raise ValueError("Invalid value for `offerings`, must not be `None`")

        self._offerings = offerings

    @property
    def params(self):
        """Gets the params of this Item.

        Information about params.

        :return: The params of this Item.
        :rtype: List[str]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Item.

        Information about params.

        :param params: The params of this Item.
        :type params: List[str]
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")

        self._params = params

    @property
    def parent_assembly_binding(self):
        """Gets the parent_assembly_binding of this Item.

        Parent assembly binding.

        :return: The parent_assembly_binding of this Item.
        :rtype: str
        """
        return self._parent_assembly_binding

    @parent_assembly_binding.setter
    def parent_assembly_binding(self, parent_assembly_binding):
        """Sets the parent_assembly_binding of this Item.

        Parent assembly binding.

        :param parent_assembly_binding: The parent_assembly_binding of this Item.
        :type parent_assembly_binding: str
        """
        if parent_assembly_binding is None:
            raise ValueError("Invalid value for `parent_assembly_binding`, must not be `None`")

        self._parent_assembly_binding = parent_assembly_binding

    @property
    def parent_item_index(self):
        """Gets the parent_item_index of this Item.

        Parent item index.

        :return: The parent_item_index of this Item.
        :rtype: str
        """
        return self._parent_item_index

    @parent_item_index.setter
    def parent_item_index(self, parent_item_index):
        """Sets the parent_item_index of this Item.

        Parent item index.

        :param parent_item_index: The parent_item_index of this Item.
        :type parent_item_index: str
        """
        if parent_item_index is None:
            raise ValueError("Invalid value for `parent_item_index`, must not be `None`")

        self._parent_item_index = parent_item_index

    @property
    def pre_sale_date(self):
        """Gets the pre_sale_date of this Item.

        Item's pre sale date.

        :return: The pre_sale_date of this Item.
        :rtype: str
        """
        return self._pre_sale_date

    @pre_sale_date.setter
    def pre_sale_date(self, pre_sale_date):
        """Sets the pre_sale_date of this Item.

        Item's pre sale date.

        :param pre_sale_date: The pre_sale_date of this Item.
        :type pre_sale_date: str
        """
        if pre_sale_date is None:
            raise ValueError("Invalid value for `pre_sale_date`, must not be `None`")

        self._pre_sale_date = pre_sale_date

    @property
    def price(self):
        """Gets the price of this Item.

        Item's price.

        :return: The price of this Item.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Item.

        Item's price.

        :param price: The price of this Item.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def price_definitions(self):
        """Gets the price_definitions of this Item.


        :return: The price_definitions of this Item.
        :rtype: ItemPriceDefinitions
        """
        return self._price_definitions

    @price_definitions.setter
    def price_definitions(self, price_definitions):
        """Sets the price_definitions of this Item.


        :param price_definitions: The price_definitions of this Item.
        :type price_definitions: ItemPriceDefinitions
        """
        if price_definitions is None:
            raise ValueError("Invalid value for `price_definitions`, must not be `None`")

        self._price_definitions = price_definitions

    @property
    def price_tags(self):
        """Gets the price_tags of this Item.

        List of objects with item's price modifiers.

        :return: The price_tags of this Item.
        :rtype: List[str]
        """
        return self._price_tags

    @price_tags.setter
    def price_tags(self, price_tags):
        """Sets the price_tags of this Item.

        List of objects with item's price modifiers.

        :param price_tags: The price_tags of this Item.
        :type price_tags: List[str]
        """
        if price_tags is None:
            raise ValueError("Invalid value for `price_tags`, must not be `None`")

        self._price_tags = price_tags

    @property
    def price_valid_until(self):
        """Gets the price_valid_until of this Item.

        Date until when the price is going to be valid if there is a promotion.

        :return: The price_valid_until of this Item.
        :rtype: str
        """
        return self._price_valid_until

    @price_valid_until.setter
    def price_valid_until(self, price_valid_until):
        """Sets the price_valid_until of this Item.

        Date until when the price is going to be valid if there is a promotion.

        :param price_valid_until: The price_valid_until of this Item.
        :type price_valid_until: str
        """
        if price_valid_until is None:
            raise ValueError("Invalid value for `price_valid_until`, must not be `None`")

        self._price_valid_until = price_valid_until

    @property
    def product_id(self):
        """Gets the product_id of this Item.

        ID of the Product associated with the item.

        :return: The product_id of this Item.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Item.

        ID of the Product associated with the item.

        :param product_id: The product_id of this Item.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this Item.

        Quantity of items.

        :return: The quantity of this Item.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Item.

        Quantity of items.

        :param quantity: The quantity of this Item.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def ref_id(self):
        """Gets the ref_id of this Item.

        Product referencial code associated with the item.

        :return: The ref_id of this Item.
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this Item.

        Product referencial code associated with the item.

        :param ref_id: The ref_id of this Item.
        :type ref_id: str
        """
        if ref_id is None:
            raise ValueError("Invalid value for `ref_id`, must not be `None`")

        self._ref_id = ref_id

    @property
    def reward_value(self):
        """Gets the reward_value of this Item.

        Item's reward value.

        :return: The reward_value of this Item.
        :rtype: int
        """
        return self._reward_value

    @reward_value.setter
    def reward_value(self, reward_value):
        """Sets the reward_value of this Item.

        Item's reward value.

        :param reward_value: The reward_value of this Item.
        :type reward_value: int
        """
        if reward_value is None:
            raise ValueError("Invalid value for `reward_value`, must not be `None`")

        self._reward_value = reward_value

    @property
    def seller(self):
        """Gets the seller of this Item.

        Seller related to the order.

        :return: The seller of this Item.
        :rtype: str
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this Item.

        Seller related to the order.

        :param seller: The seller of this Item.
        :type seller: str
        """
        if seller is None:
            raise ValueError("Invalid value for `seller`, must not be `None`")

        self._seller = seller

    @property
    def seller_sku(self):
        """Gets the seller_sku of this Item.

        SKU ID from the seller perspective.

        :return: The seller_sku of this Item.
        :rtype: str
        """
        return self._seller_sku

    @seller_sku.setter
    def seller_sku(self, seller_sku):
        """Sets the seller_sku of this Item.

        SKU ID from the seller perspective.

        :param seller_sku: The seller_sku of this Item.
        :type seller_sku: str
        """
        if seller_sku is None:
            raise ValueError("Invalid value for `seller_sku`, must not be `None`")

        self._seller_sku = seller_sku

    @property
    def selling_price(self):
        """Gets the selling_price of this Item.

        Item's selling price.

        :return: The selling_price of this Item.
        :rtype: int
        """
        return self._selling_price

    @selling_price.setter
    def selling_price(self, selling_price):
        """Sets the selling_price of this Item.

        Item's selling price.

        :param selling_price: The selling_price of this Item.
        :type selling_price: int
        """
        if selling_price is None:
            raise ValueError("Invalid value for `selling_price`, must not be `None`")

        self._selling_price = selling_price

    @property
    def serial_numbers(self):
        """Gets the serial_numbers of this Item.

        This field identifies the order in the `handling` status in the workflow, and it was used for VTEX internal control.

        :return: The serial_numbers of this Item.
        :rtype: str
        """
        return self._serial_numbers

    @serial_numbers.setter
    def serial_numbers(self, serial_numbers):
        """Sets the serial_numbers of this Item.

        This field identifies the order in the `handling` status in the workflow, and it was used for VTEX internal control.

        :param serial_numbers: The serial_numbers of this Item.
        :type serial_numbers: str
        """
        if serial_numbers is None:
            raise ValueError("Invalid value for `serial_numbers`, must not be `None`")

        self._serial_numbers = serial_numbers

    @property
    def shipping_price(self):
        """Gets the shipping_price of this Item.

        Item's shipping price.

        :return: The shipping_price of this Item.
        :rtype: str
        """
        return self._shipping_price

    @shipping_price.setter
    def shipping_price(self, shipping_price):
        """Sets the shipping_price of this Item.

        Item's shipping price.

        :param shipping_price: The shipping_price of this Item.
        :type shipping_price: str
        """
        if shipping_price is None:
            raise ValueError("Invalid value for `shipping_price`, must not be `None`")

        self._shipping_price = shipping_price

    @property
    def tax(self):
        """Gets the tax of this Item.

        Item's tax.

        :return: The tax of this Item.
        :rtype: int
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this Item.

        Item's tax.

        :param tax: The tax of this Item.
        :type tax: int
        """
        if tax is None:
            raise ValueError("Invalid value for `tax`, must not be `None`")

        self._tax = tax

    @property
    def tax_code(self):
        """Gets the tax_code of this Item.

         Item's tax code.

        :return: The tax_code of this Item.
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this Item.

         Item's tax code.

        :param tax_code: The tax_code of this Item.
        :type tax_code: str
        """
        if tax_code is None:
            raise ValueError("Invalid value for `tax_code`, must not be `None`")

        self._tax_code = tax_code

    @property
    def unique_id(self):
        """Gets the unique_id of this Item.

        Unique ID is an alphanumeric sequence that identifies an SKU in a given order.

        :return: The unique_id of this Item.
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Item.

        Unique ID is an alphanumeric sequence that identifies an SKU in a given order.

        :param unique_id: The unique_id of this Item.
        :type unique_id: str
        """
        if unique_id is None:
            raise ValueError("Invalid value for `unique_id`, must not be `None`")

        self._unique_id = unique_id

    @property
    def unit_multiplier(self):
        """Gets the unit_multiplier of this Item.

        Item's unit multiplier.

        :return: The unit_multiplier of this Item.
        :rtype: int
        """
        return self._unit_multiplier

    @unit_multiplier.setter
    def unit_multiplier(self, unit_multiplier):
        """Sets the unit_multiplier of this Item.

        Item's unit multiplier.

        :param unit_multiplier: The unit_multiplier of this Item.
        :type unit_multiplier: int
        """
        if unit_multiplier is None:
            raise ValueError("Invalid value for `unit_multiplier`, must not be `None`")

        self._unit_multiplier = unit_multiplier
