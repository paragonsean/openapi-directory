# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.userorderdetails_tax_data_tax_info_collection_inner import UserorderdetailsTaxDataTaxInfoCollectionInner
from openapi_server import util


class UserorderdetailsTaxData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, are_taxes_designated_by_marketplace: bool=None, tax_info_collection: List[UserorderdetailsTaxDataTaxInfoCollectionInner]=None):
        """UserorderdetailsTaxData - a model defined in OpenAPI

        :param are_taxes_designated_by_marketplace: The are_taxes_designated_by_marketplace of this UserorderdetailsTaxData.
        :param tax_info_collection: The tax_info_collection of this UserorderdetailsTaxData.
        """
        self.openapi_types = {
            'are_taxes_designated_by_marketplace': bool,
            'tax_info_collection': List[UserorderdetailsTaxDataTaxInfoCollectionInner]
        }

        self.attribute_map = {
            'are_taxes_designated_by_marketplace': 'areTaxesDesignatedByMarketplace',
            'tax_info_collection': 'taxInfoCollection'
        }

        self._are_taxes_designated_by_marketplace = are_taxes_designated_by_marketplace
        self._tax_info_collection = tax_info_collection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserorderdetailsTaxData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Userorderdetails_taxData of this UserorderdetailsTaxData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def are_taxes_designated_by_marketplace(self):
        """Gets the are_taxes_designated_by_marketplace of this UserorderdetailsTaxData.

        If the taxes were designated by the marketplace (`true`), or not (`false`).

        :return: The are_taxes_designated_by_marketplace of this UserorderdetailsTaxData.
        :rtype: bool
        """
        return self._are_taxes_designated_by_marketplace

    @are_taxes_designated_by_marketplace.setter
    def are_taxes_designated_by_marketplace(self, are_taxes_designated_by_marketplace):
        """Sets the are_taxes_designated_by_marketplace of this UserorderdetailsTaxData.

        If the taxes were designated by the marketplace (`true`), or not (`false`).

        :param are_taxes_designated_by_marketplace: The are_taxes_designated_by_marketplace of this UserorderdetailsTaxData.
        :type are_taxes_designated_by_marketplace: bool
        """
        if are_taxes_designated_by_marketplace is None:
            raise ValueError("Invalid value for `are_taxes_designated_by_marketplace`, must not be `None`")

        self._are_taxes_designated_by_marketplace = are_taxes_designated_by_marketplace

    @property
    def tax_info_collection(self):
        """Gets the tax_info_collection of this UserorderdetailsTaxData.

        Array with taxes' details.

        :return: The tax_info_collection of this UserorderdetailsTaxData.
        :rtype: List[UserorderdetailsTaxDataTaxInfoCollectionInner]
        """
        return self._tax_info_collection

    @tax_info_collection.setter
    def tax_info_collection(self, tax_info_collection):
        """Sets the tax_info_collection of this UserorderdetailsTaxData.

        Array with taxes' details.

        :param tax_info_collection: The tax_info_collection of this UserorderdetailsTaxData.
        :type tax_info_collection: List[UserorderdetailsTaxDataTaxInfoCollectionInner]
        """
        if tax_info_collection is None:
            raise ValueError("Invalid value for `tax_info_collection`, must not be `None`")

        self._tax_info_collection = tax_info_collection
