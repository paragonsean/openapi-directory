# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interval: int=None, periodicity: str=None):
        """UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency - a model defined in OpenAPI

        :param interval: The interval of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency.
        :param periodicity: The periodicity of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency.
        """
        self.openapi_types = {
            'interval': int,
            'periodicity': str
        }

        self.attribute_map = {
            'interval': 'interval',
            'periodicity': 'periodicity'
        }

        self._interval = interval
        self._periodicity = periodicity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Userorderdetails_subscriptionData_Subscriptions_inner_Plan_frequency of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interval(self):
        """Gets the interval of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency.

        Number of the time interval configured between subscription orders, which depends on the periodicity. For a `DAILY` periodicity, the field's value will correspond to days, for `MONTHLY` to months, and so on.

        :return: The interval of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency.

        Number of the time interval configured between subscription orders, which depends on the periodicity. For a `DAILY` periodicity, the field's value will correspond to days, for `MONTHLY` to months, and so on.

        :param interval: The interval of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency.
        :type interval: int
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")

        self._interval = interval

    @property
    def periodicity(self):
        """Gets the periodicity of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency.

        Defines the subscriptions recurrence period. The possible values are `DAILY`,`WEEKLY`, `MONTHLY` and `YEARLY`.

        :return: The periodicity of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency.
        :rtype: str
        """
        return self._periodicity

    @periodicity.setter
    def periodicity(self, periodicity):
        """Sets the periodicity of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency.

        Defines the subscriptions recurrence period. The possible values are `DAILY`,`WEEKLY`, `MONTHLY` and `YEARLY`.

        :param periodicity: The periodicity of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency.
        :type periodicity: str
        """
        if periodicity is None:
            raise ValueError("Invalid value for `periodicity`, must not be `None`")

        self._periodicity = periodicity
