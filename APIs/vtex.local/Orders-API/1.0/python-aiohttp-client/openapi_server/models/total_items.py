# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.facets1 import Facets1
from openapi_server import util


class TotalItems(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, facets: Facets1=None, max: int=None, mean: float=None, min: int=None, missing: int=None, std_dev: float=None, sum: int=None, sum_of_squares: int=None):
        """TotalItems - a model defined in OpenAPI

        :param count: The count of this TotalItems.
        :param facets: The facets of this TotalItems.
        :param max: The max of this TotalItems.
        :param mean: The mean of this TotalItems.
        :param min: The min of this TotalItems.
        :param missing: The missing of this TotalItems.
        :param std_dev: The std_dev of this TotalItems.
        :param sum: The sum of this TotalItems.
        :param sum_of_squares: The sum_of_squares of this TotalItems.
        """
        self.openapi_types = {
            'count': int,
            'facets': Facets1,
            'max': int,
            'mean': float,
            'min': int,
            'missing': int,
            'std_dev': float,
            'sum': int,
            'sum_of_squares': int
        }

        self.attribute_map = {
            'count': 'Count',
            'facets': 'Facets',
            'max': 'Max',
            'mean': 'Mean',
            'min': 'Min',
            'missing': 'Missing',
            'std_dev': 'StdDev',
            'sum': 'Sum',
            'sum_of_squares': 'SumOfSquares'
        }

        self._count = count
        self._facets = facets
        self._max = max
        self._mean = mean
        self._min = min
        self._missing = missing
        self._std_dev = std_dev
        self._sum = sum
        self._sum_of_squares = sum_of_squares

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TotalItems':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TotalItems of this TotalItems.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this TotalItems.


        :return: The count of this TotalItems.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TotalItems.


        :param count: The count of this TotalItems.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def facets(self):
        """Gets the facets of this TotalItems.


        :return: The facets of this TotalItems.
        :rtype: Facets1
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this TotalItems.


        :param facets: The facets of this TotalItems.
        :type facets: Facets1
        """
        if facets is None:
            raise ValueError("Invalid value for `facets`, must not be `None`")

        self._facets = facets

    @property
    def max(self):
        """Gets the max of this TotalItems.


        :return: The max of this TotalItems.
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this TotalItems.


        :param max: The max of this TotalItems.
        :type max: int
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")

        self._max = max

    @property
    def mean(self):
        """Gets the mean of this TotalItems.


        :return: The mean of this TotalItems.
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this TotalItems.


        :param mean: The mean of this TotalItems.
        :type mean: float
        """
        if mean is None:
            raise ValueError("Invalid value for `mean`, must not be `None`")

        self._mean = mean

    @property
    def min(self):
        """Gets the min of this TotalItems.


        :return: The min of this TotalItems.
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this TotalItems.


        :param min: The min of this TotalItems.
        :type min: int
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")

        self._min = min

    @property
    def missing(self):
        """Gets the missing of this TotalItems.


        :return: The missing of this TotalItems.
        :rtype: int
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this TotalItems.


        :param missing: The missing of this TotalItems.
        :type missing: int
        """
        if missing is None:
            raise ValueError("Invalid value for `missing`, must not be `None`")

        self._missing = missing

    @property
    def std_dev(self):
        """Gets the std_dev of this TotalItems.


        :return: The std_dev of this TotalItems.
        :rtype: float
        """
        return self._std_dev

    @std_dev.setter
    def std_dev(self, std_dev):
        """Sets the std_dev of this TotalItems.


        :param std_dev: The std_dev of this TotalItems.
        :type std_dev: float
        """
        if std_dev is None:
            raise ValueError("Invalid value for `std_dev`, must not be `None`")

        self._std_dev = std_dev

    @property
    def sum(self):
        """Gets the sum of this TotalItems.


        :return: The sum of this TotalItems.
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this TotalItems.


        :param sum: The sum of this TotalItems.
        :type sum: int
        """
        if sum is None:
            raise ValueError("Invalid value for `sum`, must not be `None`")

        self._sum = sum

    @property
    def sum_of_squares(self):
        """Gets the sum_of_squares of this TotalItems.


        :return: The sum_of_squares of this TotalItems.
        :rtype: int
        """
        return self._sum_of_squares

    @sum_of_squares.setter
    def sum_of_squares(self, sum_of_squares):
        """Sets the sum_of_squares of this TotalItems.


        :param sum_of_squares: The sum_of_squares of this TotalItems.
        :type sum_of_squares: int
        """
        if sum_of_squares is None:
            raise ValueError("Invalid value for `sum_of_squares`, must not be `None`")

        self._sum_of_squares = sum_of_squares
