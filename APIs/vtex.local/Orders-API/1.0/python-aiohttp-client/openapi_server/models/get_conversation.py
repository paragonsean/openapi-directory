# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_from import ModelFrom
from openapi_server.models.to import To
from openapi_server import util


class GetConversation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment_names: List[str]=None, body: str=None, _date: str=None, first_words: str=None, _from: ModelFrom=None, has_attachment: bool=None, id: str=None, subject: str=None, to: List[To]=None):
        """GetConversation - a model defined in OpenAPI

        :param attachment_names: The attachment_names of this GetConversation.
        :param body: The body of this GetConversation.
        :param _date: The _date of this GetConversation.
        :param first_words: The first_words of this GetConversation.
        :param _from: The _from of this GetConversation.
        :param has_attachment: The has_attachment of this GetConversation.
        :param id: The id of this GetConversation.
        :param subject: The subject of this GetConversation.
        :param to: The to of this GetConversation.
        """
        self.openapi_types = {
            'attachment_names': List[str],
            'body': str,
            '_date': str,
            'first_words': str,
            '_from': ModelFrom,
            'has_attachment': bool,
            'id': str,
            'subject': str,
            'to': List[To]
        }

        self.attribute_map = {
            'attachment_names': 'attachmentNames',
            'body': 'body',
            '_date': 'date',
            'first_words': 'firstWords',
            '_from': 'from',
            'has_attachment': 'hasAttachment',
            'id': 'id',
            'subject': 'subject',
            'to': 'to'
        }

        self._attachment_names = attachment_names
        self._body = body
        self.__date = _date
        self._first_words = first_words
        self.__from = _from
        self._has_attachment = has_attachment
        self._id = id
        self._subject = subject
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetConversation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetConversation of this GetConversation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment_names(self):
        """Gets the attachment_names of this GetConversation.

        List with attachments' names, if there are any.

        :return: The attachment_names of this GetConversation.
        :rtype: List[str]
        """
        return self._attachment_names

    @attachment_names.setter
    def attachment_names(self, attachment_names):
        """Sets the attachment_names of this GetConversation.

        List with attachments' names, if there are any.

        :param attachment_names: The attachment_names of this GetConversation.
        :type attachment_names: List[str]
        """
        if attachment_names is None:
            raise ValueError("Invalid value for `attachment_names`, must not be `None`")

        self._attachment_names = attachment_names

    @property
    def body(self):
        """Gets the body of this GetConversation.

        Conversation content body.

        :return: The body of this GetConversation.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this GetConversation.

        Conversation content body.

        :param body: The body of this GetConversation.
        :type body: str
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def _date(self):
        """Gets the _date of this GetConversation.

        Conversation date.

        :return: The _date of this GetConversation.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GetConversation.

        Conversation date.

        :param _date: The _date of this GetConversation.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def first_words(self):
        """Gets the first_words of this GetConversation.

        First words of Conversation content.

        :return: The first_words of this GetConversation.
        :rtype: str
        """
        return self._first_words

    @first_words.setter
    def first_words(self, first_words):
        """Sets the first_words of this GetConversation.

        First words of Conversation content.

        :param first_words: The first_words of this GetConversation.
        :type first_words: str
        """
        if first_words is None:
            raise ValueError("Invalid value for `first_words`, must not be `None`")

        self._first_words = first_words

    @property
    def _from(self):
        """Gets the _from of this GetConversation.


        :return: The _from of this GetConversation.
        :rtype: ModelFrom
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this GetConversation.


        :param _from: The _from of this GetConversation.
        :type _from: ModelFrom
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def has_attachment(self):
        """Gets the has_attachment of this GetConversation.

        When set as `true`, it means there are attachments, when set as `false`, there are not.

        :return: The has_attachment of this GetConversation.
        :rtype: bool
        """
        return self._has_attachment

    @has_attachment.setter
    def has_attachment(self, has_attachment):
        """Sets the has_attachment of this GetConversation.

        When set as `true`, it means there are attachments, when set as `false`, there are not.

        :param has_attachment: The has_attachment of this GetConversation.
        :type has_attachment: bool
        """
        if has_attachment is None:
            raise ValueError("Invalid value for `has_attachment`, must not be `None`")

        self._has_attachment = has_attachment

    @property
    def id(self):
        """Gets the id of this GetConversation.

        Conversation ID.

        :return: The id of this GetConversation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetConversation.

        Conversation ID.

        :param id: The id of this GetConversation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def subject(self):
        """Gets the subject of this GetConversation.

        Conversation content subject.

        :return: The subject of this GetConversation.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this GetConversation.

        Conversation content subject.

        :param subject: The subject of this GetConversation.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def to(self):
        """Gets the to of this GetConversation.

        Conversation receiver.

        :return: The to of this GetConversation.
        :rtype: List[To]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this GetConversation.

        Conversation receiver.

        :param to: The to of this GetConversation.
        :type to: List[To]
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to
