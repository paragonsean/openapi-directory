# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, _date: str=None, description: str=None, state: str=None):
        """Event - a model defined in OpenAPI

        :param city: The city of this Event.
        :param _date: The _date of this Event.
        :param description: The description of this Event.
        :param state: The state of this Event.
        """
        self.openapi_types = {
            'city': str,
            '_date': str,
            'description': str,
            'state': str
        }

        self.attribute_map = {
            'city': 'city',
            '_date': 'date',
            'description': 'description',
            'state': 'state'
        }

        self._city = city
        self.__date = _date
        self._description = description
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Event.


        :return: The city of this Event.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Event.


        :param city: The city of this Event.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def _date(self):
        """Gets the _date of this Event.


        :return: The _date of this Event.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Event.


        :param _date: The _date of this Event.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this Event.


        :return: The description of this Event.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Event.


        :param description: The description of this Event.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def state(self):
        """Gets the state of this Event.


        :return: The state of this Event.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Event.


        :param state: The state of this Event.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
