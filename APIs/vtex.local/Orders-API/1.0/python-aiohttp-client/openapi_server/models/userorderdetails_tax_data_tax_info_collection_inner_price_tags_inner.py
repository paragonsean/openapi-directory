# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_percentual: bool=None, name: str=None, raw_value: str=None):
        """UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner - a model defined in OpenAPI

        :param is_percentual: The is_percentual of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.
        :param name: The name of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.
        :param raw_value: The raw_value of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.
        """
        self.openapi_types = {
            'is_percentual': bool,
            'name': str,
            'raw_value': str
        }

        self.attribute_map = {
            'is_percentual': 'isPercentual',
            'name': 'name',
            'raw_value': 'rawValue'
        }

        self._is_percentual = is_percentual
        self._name = name
        self._raw_value = raw_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Userorderdetails_taxData_taxInfoCollection_inner_priceTags_inner of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_percentual(self):
        """Gets the is_percentual of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.

        If the tax is a percentage (`true`) or note (`false`).

        :return: The is_percentual of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.
        :rtype: bool
        """
        return self._is_percentual

    @is_percentual.setter
    def is_percentual(self, is_percentual):
        """Sets the is_percentual of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.

        If the tax is a percentage (`true`) or note (`false`).

        :param is_percentual: The is_percentual of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.
        :type is_percentual: bool
        """
        if is_percentual is None:
            raise ValueError("Invalid value for `is_percentual`, must not be `None`")

        self._is_percentual = is_percentual

    @property
    def name(self):
        """Gets the name of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.

        Name that identifies the tax.

        :return: The name of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.

        Name that identifies the tax.

        :param name: The name of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def raw_value(self):
        """Gets the raw_value of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.

        The amount that corresponds to the tax.

        :return: The raw_value of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.
        :rtype: str
        """
        return self._raw_value

    @raw_value.setter
    def raw_value(self, raw_value):
        """Sets the raw_value of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.

        The amount that corresponds to the tax.

        :param raw_value: The raw_value of this UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner.
        :type raw_value: str
        """
        if raw_value is None:
            raise ValueError("Invalid value for `raw_value`, must not be `None`")

        self._raw_value = raw_value
