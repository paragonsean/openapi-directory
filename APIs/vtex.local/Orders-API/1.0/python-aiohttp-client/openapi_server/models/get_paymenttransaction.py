# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment1 import Payment1
from openapi_server import util


class GetPaymenttransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_active: bool=None, merchant_name: str=None, payments: List[Payment1]=None, status: str=None, transaction_id: str=None):
        """GetPaymenttransaction - a model defined in OpenAPI

        :param is_active: The is_active of this GetPaymenttransaction.
        :param merchant_name: The merchant_name of this GetPaymenttransaction.
        :param payments: The payments of this GetPaymenttransaction.
        :param status: The status of this GetPaymenttransaction.
        :param transaction_id: The transaction_id of this GetPaymenttransaction.
        """
        self.openapi_types = {
            'is_active': bool,
            'merchant_name': str,
            'payments': List[Payment1],
            'status': str,
            'transaction_id': str
        }

        self.attribute_map = {
            'is_active': 'isActive',
            'merchant_name': 'merchantName',
            'payments': 'payments',
            'status': 'status',
            'transaction_id': 'transactionId'
        }

        self._is_active = is_active
        self._merchant_name = merchant_name
        self._payments = payments
        self._status = status
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetPaymenttransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetPaymenttransaction of this GetPaymenttransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_active(self):
        """Gets the is_active of this GetPaymenttransaction.

        If it is an active transaction (`true`) or not (`false`).

        :return: The is_active of this GetPaymenttransaction.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this GetPaymenttransaction.

        If it is an active transaction (`true`) or not (`false`).

        :param is_active: The is_active of this GetPaymenttransaction.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def merchant_name(self):
        """Gets the merchant_name of this GetPaymenttransaction.

        Transaction merchant's name.

        :return: The merchant_name of this GetPaymenttransaction.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this GetPaymenttransaction.

        Transaction merchant's name.

        :param merchant_name: The merchant_name of this GetPaymenttransaction.
        :type merchant_name: str
        """
        if merchant_name is None:
            raise ValueError("Invalid value for `merchant_name`, must not be `None`")

        self._merchant_name = merchant_name

    @property
    def payments(self):
        """Gets the payments of this GetPaymenttransaction.

        Payments' details object.

        :return: The payments of this GetPaymenttransaction.
        :rtype: List[Payment1]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this GetPaymenttransaction.

        Payments' details object.

        :param payments: The payments of this GetPaymenttransaction.
        :type payments: List[Payment1]
        """
        if payments is None:
            raise ValueError("Invalid value for `payments`, must not be `None`")

        self._payments = payments

    @property
    def status(self):
        """Gets the status of this GetPaymenttransaction.

        Transaction status.

        :return: The status of this GetPaymenttransaction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetPaymenttransaction.

        Transaction status.

        :param status: The status of this GetPaymenttransaction.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def transaction_id(self):
        """Gets the transaction_id of this GetPaymenttransaction.

        Transaction ID.

        :return: The transaction_id of this GetPaymenttransaction.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this GetPaymenttransaction.

        Transaction ID.

        :param transaction_id: The transaction_id of this GetPaymenttransaction.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id
