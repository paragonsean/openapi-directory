# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetFeedConfiguration200ResponseFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_single_fire: bool=None, expression: str=None, status: List[str]=None, type: str=None):
        """GetFeedConfiguration200ResponseFilter - a model defined in OpenAPI

        :param disable_single_fire: The disable_single_fire of this GetFeedConfiguration200ResponseFilter.
        :param expression: The expression of this GetFeedConfiguration200ResponseFilter.
        :param status: The status of this GetFeedConfiguration200ResponseFilter.
        :param type: The type of this GetFeedConfiguration200ResponseFilter.
        """
        self.openapi_types = {
            'disable_single_fire': bool,
            'expression': str,
            'status': List[str],
            'type': str
        }

        self.attribute_map = {
            'disable_single_fire': 'disableSingleFire',
            'expression': 'expression',
            'status': 'status',
            'type': 'type'
        }

        self._disable_single_fire = disable_single_fire
        self._expression = expression
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFeedConfiguration200ResponseFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetFeedConfiguration_200_response_filter of this GetFeedConfiguration200ResponseFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_single_fire(self):
        """Gets the disable_single_fire of this GetFeedConfiguration200ResponseFilter.

        Sets a limit to how many times a specific order shows on the feed, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the feed only once.

        :return: The disable_single_fire of this GetFeedConfiguration200ResponseFilter.
        :rtype: bool
        """
        return self._disable_single_fire

    @disable_single_fire.setter
    def disable_single_fire(self, disable_single_fire):
        """Sets the disable_single_fire of this GetFeedConfiguration200ResponseFilter.

        Sets a limit to how many times a specific order shows on the feed, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the feed only once.

        :param disable_single_fire: The disable_single_fire of this GetFeedConfiguration200ResponseFilter.
        :type disable_single_fire: bool
        """

        self._disable_single_fire = disable_single_fire

    @property
    def expression(self):
        """Gets the expression of this GetFeedConfiguration200ResponseFilter.

        JSONata query expression that defines what conditions must be met for an order to be included in the feed. This should only be used in case `type` is `FromOrders`.

        :return: The expression of this GetFeedConfiguration200ResponseFilter.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this GetFeedConfiguration200ResponseFilter.

        JSONata query expression that defines what conditions must be met for an order to be included in the feed. This should only be used in case `type` is `FromOrders`.

        :param expression: The expression of this GetFeedConfiguration200ResponseFilter.
        :type expression: str
        """

        self._expression = expression

    @property
    def status(self):
        """Gets the status of this GetFeedConfiguration200ResponseFilter.

        List of order statuses that should be included in the feed. This should only be used in case `type` is `FromWorkflow`.

        :return: The status of this GetFeedConfiguration200ResponseFilter.
        :rtype: List[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetFeedConfiguration200ResponseFilter.

        List of order statuses that should be included in the feed. This should only be used in case `type` is `FromWorkflow`.

        :param status: The status of this GetFeedConfiguration200ResponseFilter.
        :type status: List[str]
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this GetFeedConfiguration200ResponseFilter.

        Determines what orders appear in the feed and how they are filtered. If a feed has the `FromWorkflow` type configuration, it will receive order updates only when order’s statuses change and orders can be filtered by status, using the `status` field. A feed with the `FromOrders` type configuration gets updates whenever any change is made to an order. in this case, orders can be filtered by any property, according to JSONata expressions set in the `expression` field.

        :return: The type of this GetFeedConfiguration200ResponseFilter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetFeedConfiguration200ResponseFilter.

        Determines what orders appear in the feed and how they are filtered. If a feed has the `FromWorkflow` type configuration, it will receive order updates only when order’s statuses change and orders can be filtered by status, using the `status` field. A feed with the `FromOrders` type configuration gets updates whenever any change is made to an order. in this case, orders can be filtered by any property, according to JSONata expressions set in the `expression` field.

        :param type: The type of this GetFeedConfiguration200ResponseFilter.
        :type type: str
        """

        self._type = type
