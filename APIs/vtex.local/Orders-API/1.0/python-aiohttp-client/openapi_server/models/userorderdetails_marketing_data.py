# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserorderdetailsMarketingData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coupon: str=None, id: str=None, marketing_tags: List[str]=None, utm_campaign: str=None, utm_medium: str=None, utm_partner: str=None, utm_source: str=None, utmi_campaign: str=None, utmi_part: str=None, utmipage: str=None):
        """UserorderdetailsMarketingData - a model defined in OpenAPI

        :param coupon: The coupon of this UserorderdetailsMarketingData.
        :param id: The id of this UserorderdetailsMarketingData.
        :param marketing_tags: The marketing_tags of this UserorderdetailsMarketingData.
        :param utm_campaign: The utm_campaign of this UserorderdetailsMarketingData.
        :param utm_medium: The utm_medium of this UserorderdetailsMarketingData.
        :param utm_partner: The utm_partner of this UserorderdetailsMarketingData.
        :param utm_source: The utm_source of this UserorderdetailsMarketingData.
        :param utmi_campaign: The utmi_campaign of this UserorderdetailsMarketingData.
        :param utmi_part: The utmi_part of this UserorderdetailsMarketingData.
        :param utmipage: The utmipage of this UserorderdetailsMarketingData.
        """
        self.openapi_types = {
            'coupon': str,
            'id': str,
            'marketing_tags': List[str],
            'utm_campaign': str,
            'utm_medium': str,
            'utm_partner': str,
            'utm_source': str,
            'utmi_campaign': str,
            'utmi_part': str,
            'utmipage': str
        }

        self.attribute_map = {
            'coupon': 'coupon',
            'id': 'id',
            'marketing_tags': 'marketingTags',
            'utm_campaign': 'utmCampaign',
            'utm_medium': 'utmMedium',
            'utm_partner': 'utmPartner',
            'utm_source': 'utmSource',
            'utmi_campaign': 'utmiCampaign',
            'utmi_part': 'utmiPart',
            'utmipage': 'utmipage'
        }

        self._coupon = coupon
        self._id = id
        self._marketing_tags = marketing_tags
        self._utm_campaign = utm_campaign
        self._utm_medium = utm_medium
        self._utm_partner = utm_partner
        self._utm_source = utm_source
        self._utmi_campaign = utmi_campaign
        self._utmi_part = utmi_part
        self._utmipage = utmipage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserorderdetailsMarketingData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Userorderdetails_marketingData of this UserorderdetailsMarketingData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coupon(self):
        """Gets the coupon of this UserorderdetailsMarketingData.

        Coupon's code information.

        :return: The coupon of this UserorderdetailsMarketingData.
        :rtype: str
        """
        return self._coupon

    @coupon.setter
    def coupon(self, coupon):
        """Sets the coupon of this UserorderdetailsMarketingData.

        Coupon's code information.

        :param coupon: The coupon of this UserorderdetailsMarketingData.
        :type coupon: str
        """
        if coupon is None:
            raise ValueError("Invalid value for `coupon`, must not be `None`")

        self._coupon = coupon

    @property
    def id(self):
        """Gets the id of this UserorderdetailsMarketingData.

        Object ID which expected value is `marketingData`.

        :return: The id of this UserorderdetailsMarketingData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserorderdetailsMarketingData.

        Object ID which expected value is `marketingData`.

        :param id: The id of this UserorderdetailsMarketingData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def marketing_tags(self):
        """Gets the marketing_tags of this UserorderdetailsMarketingData.

        Marketing tags information. This field can be used to register campaign data or informative tags regarding promotions.

        :return: The marketing_tags of this UserorderdetailsMarketingData.
        :rtype: List[str]
        """
        return self._marketing_tags

    @marketing_tags.setter
    def marketing_tags(self, marketing_tags):
        """Sets the marketing_tags of this UserorderdetailsMarketingData.

        Marketing tags information. This field can be used to register campaign data or informative tags regarding promotions.

        :param marketing_tags: The marketing_tags of this UserorderdetailsMarketingData.
        :type marketing_tags: List[str]
        """
        if marketing_tags is None:
            raise ValueError("Invalid value for `marketing_tags`, must not be `None`")

        self._marketing_tags = marketing_tags

    @property
    def utm_campaign(self):
        """Gets the utm_campaign of this UserorderdetailsMarketingData.

        Value of the `utm_campaign` parameter of the URL that led to the request.

        :return: The utm_campaign of this UserorderdetailsMarketingData.
        :rtype: str
        """
        return self._utm_campaign

    @utm_campaign.setter
    def utm_campaign(self, utm_campaign):
        """Sets the utm_campaign of this UserorderdetailsMarketingData.

        Value of the `utm_campaign` parameter of the URL that led to the request.

        :param utm_campaign: The utm_campaign of this UserorderdetailsMarketingData.
        :type utm_campaign: str
        """
        if utm_campaign is None:
            raise ValueError("Invalid value for `utm_campaign`, must not be `None`")

        self._utm_campaign = utm_campaign

    @property
    def utm_medium(self):
        """Gets the utm_medium of this UserorderdetailsMarketingData.

        Value of the `utm_medium` parameter of the URL that led to the request.

        :return: The utm_medium of this UserorderdetailsMarketingData.
        :rtype: str
        """
        return self._utm_medium

    @utm_medium.setter
    def utm_medium(self, utm_medium):
        """Sets the utm_medium of this UserorderdetailsMarketingData.

        Value of the `utm_medium` parameter of the URL that led to the request.

        :param utm_medium: The utm_medium of this UserorderdetailsMarketingData.
        :type utm_medium: str
        """
        if utm_medium is None:
            raise ValueError("Invalid value for `utm_medium`, must not be `None`")

        self._utm_medium = utm_medium

    @property
    def utm_partner(self):
        """Gets the utm_partner of this UserorderdetailsMarketingData.

        UTM Source Parameters.

        :return: The utm_partner of this UserorderdetailsMarketingData.
        :rtype: str
        """
        return self._utm_partner

    @utm_partner.setter
    def utm_partner(self, utm_partner):
        """Sets the utm_partner of this UserorderdetailsMarketingData.

        UTM Source Parameters.

        :param utm_partner: The utm_partner of this UserorderdetailsMarketingData.
        :type utm_partner: str
        """
        if utm_partner is None:
            raise ValueError("Invalid value for `utm_partner`, must not be `None`")

        self._utm_partner = utm_partner

    @property
    def utm_source(self):
        """Gets the utm_source of this UserorderdetailsMarketingData.

        Value of the `utm_source` parameter of the URL that led to the request.

        :return: The utm_source of this UserorderdetailsMarketingData.
        :rtype: str
        """
        return self._utm_source

    @utm_source.setter
    def utm_source(self, utm_source):
        """Sets the utm_source of this UserorderdetailsMarketingData.

        Value of the `utm_source` parameter of the URL that led to the request.

        :param utm_source: The utm_source of this UserorderdetailsMarketingData.
        :type utm_source: str
        """
        if utm_source is None:
            raise ValueError("Invalid value for `utm_source`, must not be `None`")

        self._utm_source = utm_source

    @property
    def utmi_campaign(self):
        """Gets the utmi_campaign of this UserorderdetailsMarketingData.

        Internal UTM value `utmi_cp`.

        :return: The utmi_campaign of this UserorderdetailsMarketingData.
        :rtype: str
        """
        return self._utmi_campaign

    @utmi_campaign.setter
    def utmi_campaign(self, utmi_campaign):
        """Sets the utmi_campaign of this UserorderdetailsMarketingData.

        Internal UTM value `utmi_cp`.

        :param utmi_campaign: The utmi_campaign of this UserorderdetailsMarketingData.
        :type utmi_campaign: str
        """
        if utmi_campaign is None:
            raise ValueError("Invalid value for `utmi_campaign`, must not be `None`")

        self._utmi_campaign = utmi_campaign

    @property
    def utmi_part(self):
        """Gets the utmi_part of this UserorderdetailsMarketingData.

        Internal UTM value `utmi_pc`.

        :return: The utmi_part of this UserorderdetailsMarketingData.
        :rtype: str
        """
        return self._utmi_part

    @utmi_part.setter
    def utmi_part(self, utmi_part):
        """Sets the utmi_part of this UserorderdetailsMarketingData.

        Internal UTM value `utmi_pc`.

        :param utmi_part: The utmi_part of this UserorderdetailsMarketingData.
        :type utmi_part: str
        """
        if utmi_part is None:
            raise ValueError("Invalid value for `utmi_part`, must not be `None`")

        self._utmi_part = utmi_part

    @property
    def utmipage(self):
        """Gets the utmipage of this UserorderdetailsMarketingData.

        Internal UTM value `utmi_p`.

        :return: The utmipage of this UserorderdetailsMarketingData.
        :rtype: str
        """
        return self._utmipage

    @utmipage.setter
    def utmipage(self, utmipage):
        """Sets the utmipage of this UserorderdetailsMarketingData.

        Internal UTM value `utmi_p`.

        :param utmipage: The utmipage of this UserorderdetailsMarketingData.
        :type utmipage: str
        """
        if utmipage is None:
            raise ValueError("Invalid value for `utmipage`, must not be `None`")

        self._utmipage = utmipage
