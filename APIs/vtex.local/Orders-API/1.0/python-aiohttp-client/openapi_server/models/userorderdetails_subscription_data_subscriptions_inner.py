# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.userorderdetails_subscription_data_subscriptions_inner_plan import UserorderdetailsSubscriptionDataSubscriptionsInnerPlan
from openapi_server import util


class UserorderdetailsSubscriptionDataSubscriptionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution_count: int=None, item_index: int=None, plan: UserorderdetailsSubscriptionDataSubscriptionsInnerPlan=None, price_at_subscription_date: float=None):
        """UserorderdetailsSubscriptionDataSubscriptionsInner - a model defined in OpenAPI

        :param execution_count: The execution_count of this UserorderdetailsSubscriptionDataSubscriptionsInner.
        :param item_index: The item_index of this UserorderdetailsSubscriptionDataSubscriptionsInner.
        :param plan: The plan of this UserorderdetailsSubscriptionDataSubscriptionsInner.
        :param price_at_subscription_date: The price_at_subscription_date of this UserorderdetailsSubscriptionDataSubscriptionsInner.
        """
        self.openapi_types = {
            'execution_count': int,
            'item_index': int,
            'plan': UserorderdetailsSubscriptionDataSubscriptionsInnerPlan,
            'price_at_subscription_date': float
        }

        self.attribute_map = {
            'execution_count': 'ExecutionCount',
            'item_index': 'ItemIndex',
            'plan': 'Plan',
            'price_at_subscription_date': 'PriceAtSubscriptionDate'
        }

        self._execution_count = execution_count
        self._item_index = item_index
        self._plan = plan
        self._price_at_subscription_date = price_at_subscription_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserorderdetailsSubscriptionDataSubscriptionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Userorderdetails_subscriptionData_Subscriptions_inner of this UserorderdetailsSubscriptionDataSubscriptionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution_count(self):
        """Gets the execution_count of this UserorderdetailsSubscriptionDataSubscriptionsInner.

        Position of the order in the subscription cycle. The first order will have the value `0`, the second will have the value `1`, and so on.

        :return: The execution_count of this UserorderdetailsSubscriptionDataSubscriptionsInner.
        :rtype: int
        """
        return self._execution_count

    @execution_count.setter
    def execution_count(self, execution_count):
        """Sets the execution_count of this UserorderdetailsSubscriptionDataSubscriptionsInner.

        Position of the order in the subscription cycle. The first order will have the value `0`, the second will have the value `1`, and so on.

        :param execution_count: The execution_count of this UserorderdetailsSubscriptionDataSubscriptionsInner.
        :type execution_count: int
        """
        if execution_count is None:
            raise ValueError("Invalid value for `execution_count`, must not be `None`")

        self._execution_count = execution_count

    @property
    def item_index(self):
        """Gets the item_index of this UserorderdetailsSubscriptionDataSubscriptionsInner.

        Each item in the subscriptions' order is identified by an index. The position starts in`0`, followed by `1`, `2`, and so on.

        :return: The item_index of this UserorderdetailsSubscriptionDataSubscriptionsInner.
        :rtype: int
        """
        return self._item_index

    @item_index.setter
    def item_index(self, item_index):
        """Sets the item_index of this UserorderdetailsSubscriptionDataSubscriptionsInner.

        Each item in the subscriptions' order is identified by an index. The position starts in`0`, followed by `1`, `2`, and so on.

        :param item_index: The item_index of this UserorderdetailsSubscriptionDataSubscriptionsInner.
        :type item_index: int
        """
        if item_index is None:
            raise ValueError("Invalid value for `item_index`, must not be `None`")

        self._item_index = item_index

    @property
    def plan(self):
        """Gets the plan of this UserorderdetailsSubscriptionDataSubscriptionsInner.


        :return: The plan of this UserorderdetailsSubscriptionDataSubscriptionsInner.
        :rtype: UserorderdetailsSubscriptionDataSubscriptionsInnerPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this UserorderdetailsSubscriptionDataSubscriptionsInner.


        :param plan: The plan of this UserorderdetailsSubscriptionDataSubscriptionsInner.
        :type plan: UserorderdetailsSubscriptionDataSubscriptionsInnerPlan
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def price_at_subscription_date(self):
        """Gets the price_at_subscription_date of this UserorderdetailsSubscriptionDataSubscriptionsInner.

        Price of the order when the customer signed up for subscriptions. Subscriptions created from Admin UI or APIs do not have an original order, so the field returns `0.0`. This field was valid only for Subscriptions v2 and is deprecated in Subscriptions v3.

        :return: The price_at_subscription_date of this UserorderdetailsSubscriptionDataSubscriptionsInner.
        :rtype: float
        """
        return self._price_at_subscription_date

    @price_at_subscription_date.setter
    def price_at_subscription_date(self, price_at_subscription_date):
        """Sets the price_at_subscription_date of this UserorderdetailsSubscriptionDataSubscriptionsInner.

        Price of the order when the customer signed up for subscriptions. Subscriptions created from Admin UI or APIs do not have an original order, so the field returns `0.0`. This field was valid only for Subscriptions v2 and is deprecated in Subscriptions v3.

        :param price_at_subscription_date: The price_at_subscription_date of this UserorderdetailsSubscriptionDataSubscriptionsInner.
        :type price_at_subscription_date: float
        """
        if price_at_subscription_date is None:
            raise ValueError("Invalid value for `price_at_subscription_date`, must not be `None`")

        self._price_at_subscription_date = price_at_subscription_date
