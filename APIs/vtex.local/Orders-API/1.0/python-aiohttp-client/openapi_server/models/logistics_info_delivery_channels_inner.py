# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogisticsInfoDeliveryChannelsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, stock_balance: int=None):
        """LogisticsInfoDeliveryChannelsInner - a model defined in OpenAPI

        :param id: The id of this LogisticsInfoDeliveryChannelsInner.
        :param stock_balance: The stock_balance of this LogisticsInfoDeliveryChannelsInner.
        """
        self.openapi_types = {
            'id': str,
            'stock_balance': int
        }

        self.attribute_map = {
            'id': 'id',
            'stock_balance': 'stockBalance'
        }

        self._id = id
        self._stock_balance = stock_balance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogisticsInfoDeliveryChannelsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogisticsInfo_deliveryChannels_inner of this LogisticsInfoDeliveryChannelsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this LogisticsInfoDeliveryChannelsInner.

        Delivery channel's shipping type, which can be `delivery` or `pickup-in-point`.

        :return: The id of this LogisticsInfoDeliveryChannelsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LogisticsInfoDeliveryChannelsInner.

        Delivery channel's shipping type, which can be `delivery` or `pickup-in-point`.

        :param id: The id of this LogisticsInfoDeliveryChannelsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def stock_balance(self):
        """Gets the stock_balance of this LogisticsInfoDeliveryChannelsInner.

        Stock check for an SKU availability.

        :return: The stock_balance of this LogisticsInfoDeliveryChannelsInner.
        :rtype: int
        """
        return self._stock_balance

    @stock_balance.setter
    def stock_balance(self, stock_balance):
        """Sets the stock_balance of this LogisticsInfoDeliveryChannelsInner.

        Stock check for an SKU availability.

        :param stock_balance: The stock_balance of this LogisticsInfoDeliveryChannelsInner.
        :type stock_balance: int
        """
        if stock_balance is None:
            raise ValueError("Invalid value for `stock_balance`, must not be `None`")

        self._stock_balance = stock_balance
