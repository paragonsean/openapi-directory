# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fulfillment import Fulfillment
from openapi_server.models.marketplace1 import Marketplace1
from openapi_server import util


class Origin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fulfillment: Fulfillment=None, marketplace: Marketplace1=None):
        """Origin - a model defined in OpenAPI

        :param fulfillment: The fulfillment of this Origin.
        :param marketplace: The marketplace of this Origin.
        """
        self.openapi_types = {
            'fulfillment': Fulfillment,
            'marketplace': Marketplace1
        }

        self.attribute_map = {
            'fulfillment': 'Fulfillment',
            'marketplace': 'Marketplace'
        }

        self._fulfillment = fulfillment
        self._marketplace = marketplace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Origin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Origin of this Origin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fulfillment(self):
        """Gets the fulfillment of this Origin.


        :return: The fulfillment of this Origin.
        :rtype: Fulfillment
        """
        return self._fulfillment

    @fulfillment.setter
    def fulfillment(self, fulfillment):
        """Sets the fulfillment of this Origin.


        :param fulfillment: The fulfillment of this Origin.
        :type fulfillment: Fulfillment
        """
        if fulfillment is None:
            raise ValueError("Invalid value for `fulfillment`, must not be `None`")

        self._fulfillment = fulfillment

    @property
    def marketplace(self):
        """Gets the marketplace of this Origin.


        :return: The marketplace of this Origin.
        :rtype: Marketplace1
        """
        return self._marketplace

    @marketplace.setter
    def marketplace(self, marketplace):
        """Sets the marketplace of this Origin.


        :param marketplace: The marketplace of this Origin.
        :type marketplace: Marketplace1
        """
        if marketplace is None:
            raise ValueError("Invalid value for `marketplace`, must not be `None`")

        self._marketplace = marketplace
