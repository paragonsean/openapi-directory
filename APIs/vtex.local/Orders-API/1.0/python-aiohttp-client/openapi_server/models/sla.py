# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pickup_store_info import PickupStoreInfo
from openapi_server import util


class Sla(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_channel: str=None, delivery_window: str=None, id: str=None, lock_ttl: str=None, name: str=None, pickup_distance: float=None, pickup_point_id: str=None, pickup_store_info: PickupStoreInfo=None, polygon_name: str=None, price: int=None, shipping_estimate: str=None, transit_time: str=None):
        """Sla - a model defined in OpenAPI

        :param delivery_channel: The delivery_channel of this Sla.
        :param delivery_window: The delivery_window of this Sla.
        :param id: The id of this Sla.
        :param lock_ttl: The lock_ttl of this Sla.
        :param name: The name of this Sla.
        :param pickup_distance: The pickup_distance of this Sla.
        :param pickup_point_id: The pickup_point_id of this Sla.
        :param pickup_store_info: The pickup_store_info of this Sla.
        :param polygon_name: The polygon_name of this Sla.
        :param price: The price of this Sla.
        :param shipping_estimate: The shipping_estimate of this Sla.
        :param transit_time: The transit_time of this Sla.
        """
        self.openapi_types = {
            'delivery_channel': str,
            'delivery_window': str,
            'id': str,
            'lock_ttl': str,
            'name': str,
            'pickup_distance': float,
            'pickup_point_id': str,
            'pickup_store_info': PickupStoreInfo,
            'polygon_name': str,
            'price': int,
            'shipping_estimate': str,
            'transit_time': str
        }

        self.attribute_map = {
            'delivery_channel': 'deliveryChannel',
            'delivery_window': 'deliveryWindow',
            'id': 'id',
            'lock_ttl': 'lockTTL',
            'name': 'name',
            'pickup_distance': 'pickupDistance',
            'pickup_point_id': 'pickupPointId',
            'pickup_store_info': 'pickupStoreInfo',
            'polygon_name': 'polygonName',
            'price': 'price',
            'shipping_estimate': 'shippingEstimate',
            'transit_time': 'transitTime'
        }

        self._delivery_channel = delivery_channel
        self._delivery_window = delivery_window
        self._id = id
        self._lock_ttl = lock_ttl
        self._name = name
        self._pickup_distance = pickup_distance
        self._pickup_point_id = pickup_point_id
        self._pickup_store_info = pickup_store_info
        self._polygon_name = polygon_name
        self._price = price
        self._shipping_estimate = shipping_estimate
        self._transit_time = transit_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sla':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sla of this Sla.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_channel(self):
        """Gets the delivery_channel of this Sla.

        If the delivery channel is `delivery` or `pickup-in-point`.

        :return: The delivery_channel of this Sla.
        :rtype: str
        """
        return self._delivery_channel

    @delivery_channel.setter
    def delivery_channel(self, delivery_channel):
        """Sets the delivery_channel of this Sla.

        If the delivery channel is `delivery` or `pickup-in-point`.

        :param delivery_channel: The delivery_channel of this Sla.
        :type delivery_channel: str
        """
        if delivery_channel is None:
            raise ValueError("Invalid value for `delivery_channel`, must not be `None`")

        self._delivery_channel = delivery_channel

    @property
    def delivery_window(self):
        """Gets the delivery_window of this Sla.

        [Scheduled delivery window](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, if it applies to the item.

        :return: The delivery_window of this Sla.
        :rtype: str
        """
        return self._delivery_window

    @delivery_window.setter
    def delivery_window(self, delivery_window):
        """Sets the delivery_window of this Sla.

        [Scheduled delivery window](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, if it applies to the item.

        :param delivery_window: The delivery_window of this Sla.
        :type delivery_window: str
        """
        if delivery_window is None:
            raise ValueError("Invalid value for `delivery_window`, must not be `None`")

        self._delivery_window = delivery_window

    @property
    def id(self):
        """Gets the id of this Sla.

        ID of the shipping method used in the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).

        :return: The id of this Sla.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sla.

        ID of the shipping method used in the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).

        :param id: The id of this Sla.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def lock_ttl(self):
        """Gets the lock_ttl of this Sla.

        Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time of the SLA.

        :return: The lock_ttl of this Sla.
        :rtype: str
        """
        return self._lock_ttl

    @lock_ttl.setter
    def lock_ttl(self, lock_ttl):
        """Sets the lock_ttl of this Sla.

        Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time of the SLA.

        :param lock_ttl: The lock_ttl of this Sla.
        :type lock_ttl: str
        """
        if lock_ttl is None:
            raise ValueError("Invalid value for `lock_ttl`, must not be `None`")

        self._lock_ttl = lock_ttl

    @property
    def name(self):
        """Gets the name of this Sla.

        Name of the shipping policy.

        :return: The name of this Sla.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sla.

        Name of the shipping policy.

        :param name: The name of this Sla.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pickup_distance(self):
        """Gets the pickup_distance of this Sla.

        Distance in kilometers between the pickup point and the customer's address. The distance is measured as a straight line.

        :return: The pickup_distance of this Sla.
        :rtype: float
        """
        return self._pickup_distance

    @pickup_distance.setter
    def pickup_distance(self, pickup_distance):
        """Sets the pickup_distance of this Sla.

        Distance in kilometers between the pickup point and the customer's address. The distance is measured as a straight line.

        :param pickup_distance: The pickup_distance of this Sla.
        :type pickup_distance: float
        """
        if pickup_distance is None:
            raise ValueError("Invalid value for `pickup_distance`, must not be `None`")

        self._pickup_distance = pickup_distance

    @property
    def pickup_point_id(self):
        """Gets the pickup_point_id of this Sla.

        [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) ID related to the SLA.

        :return: The pickup_point_id of this Sla.
        :rtype: str
        """
        return self._pickup_point_id

    @pickup_point_id.setter
    def pickup_point_id(self, pickup_point_id):
        """Sets the pickup_point_id of this Sla.

        [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) ID related to the SLA.

        :param pickup_point_id: The pickup_point_id of this Sla.
        :type pickup_point_id: str
        """
        if pickup_point_id is None:
            raise ValueError("Invalid value for `pickup_point_id`, must not be `None`")

        self._pickup_point_id = pickup_point_id

    @property
    def pickup_store_info(self):
        """Gets the pickup_store_info of this Sla.


        :return: The pickup_store_info of this Sla.
        :rtype: PickupStoreInfo
        """
        return self._pickup_store_info

    @pickup_store_info.setter
    def pickup_store_info(self, pickup_store_info):
        """Sets the pickup_store_info of this Sla.


        :param pickup_store_info: The pickup_store_info of this Sla.
        :type pickup_store_info: PickupStoreInfo
        """
        if pickup_store_info is None:
            raise ValueError("Invalid value for `pickup_store_info`, must not be `None`")

        self._pickup_store_info = pickup_store_info

    @property
    def polygon_name(self):
        """Gets the polygon_name of this Sla.

        Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.

        :return: The polygon_name of this Sla.
        :rtype: str
        """
        return self._polygon_name

    @polygon_name.setter
    def polygon_name(self, polygon_name):
        """Sets the polygon_name of this Sla.

        Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.

        :param polygon_name: The polygon_name of this Sla.
        :type polygon_name: str
        """
        if polygon_name is None:
            raise ValueError("Invalid value for `polygon_name`, must not be `None`")

        self._polygon_name = polygon_name

    @property
    def price(self):
        """Gets the price of this Sla.

        Shipping price for the item in cents. Does not account for the whole order's shipping price.

        :return: The price of this Sla.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Sla.

        Shipping price for the item in cents. Does not account for the whole order's shipping price.

        :param price: The price of this Sla.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def shipping_estimate(self):
        """Gets the shipping_estimate of this Sla.

        Total shipping estimate time in days. For instance, three business days is represented `3bd`.

        :return: The shipping_estimate of this Sla.
        :rtype: str
        """
        return self._shipping_estimate

    @shipping_estimate.setter
    def shipping_estimate(self, shipping_estimate):
        """Sets the shipping_estimate of this Sla.

        Total shipping estimate time in days. For instance, three business days is represented `3bd`.

        :param shipping_estimate: The shipping_estimate of this Sla.
        :type shipping_estimate: str
        """
        if shipping_estimate is None:
            raise ValueError("Invalid value for `shipping_estimate`, must not be `None`")

        self._shipping_estimate = shipping_estimate

    @property
    def transit_time(self):
        """Gets the transit_time of this Sla.

        Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented `3bd`.

        :return: The transit_time of this Sla.
        :rtype: str
        """
        return self._transit_time

    @transit_time.setter
    def transit_time(self, transit_time):
        """Sets the transit_time of this Sla.

        Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented `3bd`.

        :param transit_time: The transit_time of this Sla.
        :type transit_time: str
        """
        if transit_time is None:
            raise ValueError("Invalid value for `transit_time`, must not be `None`")

        self._transit_time = transit_time
