# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.changes_datum import ChangesDatum
from openapi_server import util


class ChangesAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changes_data: List[ChangesDatum]=None, id: str=None):
        """ChangesAttachment - a model defined in OpenAPI

        :param changes_data: The changes_data of this ChangesAttachment.
        :param id: The id of this ChangesAttachment.
        """
        self.openapi_types = {
            'changes_data': List[ChangesDatum],
            'id': str
        }

        self.attribute_map = {
            'changes_data': 'changesData',
            'id': 'id'
        }

        self._changes_data = changes_data
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangesAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChangesAttachment of this ChangesAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changes_data(self):
        """Gets the changes_data of this ChangesAttachment.

        Order change details.

        :return: The changes_data of this ChangesAttachment.
        :rtype: List[ChangesDatum]
        """
        return self._changes_data

    @changes_data.setter
    def changes_data(self, changes_data):
        """Sets the changes_data of this ChangesAttachment.

        Order change details.

        :param changes_data: The changes_data of this ChangesAttachment.
        :type changes_data: List[ChangesDatum]
        """
        if changes_data is None:
            raise ValueError("Invalid value for `changes_data`, must not be `None`")

        self._changes_data = changes_data

    @property
    def id(self):
        """Gets the id of this ChangesAttachment.

        Object ID, the expect value is `changeAttachment`.

        :return: The id of this ChangesAttachment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChangesAttachment.

        Object ID, the expect value is `changeAttachment`.

        :param id: The id of this ChangesAttachment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
