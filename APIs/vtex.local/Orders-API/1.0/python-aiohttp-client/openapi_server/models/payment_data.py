# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction import Transaction
from openapi_server import util


class PaymentData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gift_cards: List[object]=None, transactions: List[Transaction]=None):
        """PaymentData - a model defined in OpenAPI

        :param gift_cards: The gift_cards of this PaymentData.
        :param transactions: The transactions of this PaymentData.
        """
        self.openapi_types = {
            'gift_cards': List[object],
            'transactions': List[Transaction]
        }

        self.attribute_map = {
            'gift_cards': 'giftCards',
            'transactions': 'transactions'
        }

        self._gift_cards = gift_cards
        self._transactions = transactions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentData of this PaymentData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gift_cards(self):
        """Gets the gift_cards of this PaymentData.

        Array with information about Gift Cards.

        :return: The gift_cards of this PaymentData.
        :rtype: List[object]
        """
        return self._gift_cards

    @gift_cards.setter
    def gift_cards(self, gift_cards):
        """Sets the gift_cards of this PaymentData.

        Array with information about Gift Cards.

        :param gift_cards: The gift_cards of this PaymentData.
        :type gift_cards: List[object]
        """

        self._gift_cards = gift_cards

    @property
    def transactions(self):
        """Gets the transactions of this PaymentData.

        Information about financial transactions.

        :return: The transactions of this PaymentData.
        :rtype: List[Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this PaymentData.

        Information about financial transactions.

        :param transactions: The transactions of this PaymentData.
        :type transactions: List[Transaction]
        """
        if transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")

        self._transactions = transactions
