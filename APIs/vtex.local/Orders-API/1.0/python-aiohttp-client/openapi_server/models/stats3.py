# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.total_items1 import TotalItems1
from openapi_server.models.total_value1 import TotalValue1
from openapi_server import util


class Stats3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_items: TotalItems1=None, total_value: TotalValue1=None):
        """Stats3 - a model defined in OpenAPI

        :param total_items: The total_items of this Stats3.
        :param total_value: The total_value of this Stats3.
        """
        self.openapi_types = {
            'total_items': TotalItems1,
            'total_value': TotalValue1
        }

        self.attribute_map = {
            'total_items': 'totalItems',
            'total_value': 'totalValue'
        }

        self._total_items = total_items
        self._total_value = total_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stats3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Stats3 of this Stats3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_items(self):
        """Gets the total_items of this Stats3.


        :return: The total_items of this Stats3.
        :rtype: TotalItems1
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items):
        """Sets the total_items of this Stats3.


        :param total_items: The total_items of this Stats3.
        :type total_items: TotalItems1
        """
        if total_items is None:
            raise ValueError("Invalid value for `total_items`, must not be `None`")

        self._total_items = total_items

    @property
    def total_value(self):
        """Gets the total_value of this Stats3.


        :return: The total_value of this Stats3.
        :rtype: TotalValue1
        """
        return self._total_value

    @total_value.setter
    def total_value(self, total_value):
        """Sets the total_value of this Stats3.


        :param total_value: The total_value of this Stats3.
        :type total_value: TotalValue1
        """
        if total_value is None:
            raise ValueError("Invalid value for `total_value`, must not be `None`")

        self._total_value = total_value
