# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, composition: object=None, id: str=None, input_values: object=None, name: str=None, required: bool=None):
        """UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner - a model defined in OpenAPI

        :param composition: The composition of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        :param id: The id of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        :param input_values: The input_values of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        :param name: The name of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        :param required: The required of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        """
        self.openapi_types = {
            'composition': object,
            'id': str,
            'input_values': object,
            'name': str,
            'required': bool
        }

        self.attribute_map = {
            'composition': 'Composition',
            'id': 'Id',
            'input_values': 'InputValues',
            'name': 'Name',
            'required': 'Required'
        }

        self._composition = composition
        self._id = id
        self._input_values = input_values
        self._name = name
        self._required = required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Userorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def composition(self):
        """Gets the composition of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.

        Displays the attachment's composition.

        :return: The composition of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        :rtype: object
        """
        return self._composition

    @composition.setter
    def composition(self, composition):
        """Sets the composition of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.

        Displays the attachment's composition.

        :param composition: The composition of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        :type composition: object
        """
        if composition is None:
            raise ValueError("Invalid value for `composition`, must not be `None`")

        self._composition = composition

    @property
    def id(self):
        """Gets the id of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.

        ID of the attachment related to the order.

        :return: The id of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.

        ID of the attachment related to the order.

        :param id: The id of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def input_values(self):
        """Gets the input_values of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.

        Displays the attachment's content.

        :return: The input_values of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        :rtype: object
        """
        return self._input_values

    @input_values.setter
    def input_values(self, input_values):
        """Sets the input_values of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.

        Displays the attachment's content.

        :param input_values: The input_values of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        :type input_values: object
        """
        if input_values is None:
            raise ValueError("Invalid value for `input_values`, must not be `None`")

        self._input_values = input_values

    @property
    def name(self):
        """Gets the name of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.

        Name of the attachment related to the order.

        :return: The name of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.

        Name of the attachment related to the order.

        :param name: The name of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def required(self):
        """Gets the required of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.

        If this field is set as `true`, when the customer purchases the item sending the attachment is required, and when set as `false`, sending the attachment is optional.

        :return: The required of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.

        If this field is set as `true`, when the customer purchases the item sending the attachment is required, and when set as `false`, sending the attachment is optional.

        :param required: The required of this UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required
