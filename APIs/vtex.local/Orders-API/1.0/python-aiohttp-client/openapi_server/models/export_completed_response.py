# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExportCompletedResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancelled: bool=None, completed_date: str=None, date_of_request: str=None, email: str=None, filter: str=None, host_uri: str=None, id: str=None, instance_id: str=None, las_update_time: str=None, link_to_download: str=None, publish_id: str=None, query: str=None, row_number: int=None, rows_processed: int=None, start_date: str=None, utc_time: str=None):
        """ExportCompletedResponse - a model defined in OpenAPI

        :param cancelled: The cancelled of this ExportCompletedResponse.
        :param completed_date: The completed_date of this ExportCompletedResponse.
        :param date_of_request: The date_of_request of this ExportCompletedResponse.
        :param email: The email of this ExportCompletedResponse.
        :param filter: The filter of this ExportCompletedResponse.
        :param host_uri: The host_uri of this ExportCompletedResponse.
        :param id: The id of this ExportCompletedResponse.
        :param instance_id: The instance_id of this ExportCompletedResponse.
        :param las_update_time: The las_update_time of this ExportCompletedResponse.
        :param link_to_download: The link_to_download of this ExportCompletedResponse.
        :param publish_id: The publish_id of this ExportCompletedResponse.
        :param query: The query of this ExportCompletedResponse.
        :param row_number: The row_number of this ExportCompletedResponse.
        :param rows_processed: The rows_processed of this ExportCompletedResponse.
        :param start_date: The start_date of this ExportCompletedResponse.
        :param utc_time: The utc_time of this ExportCompletedResponse.
        """
        self.openapi_types = {
            'cancelled': bool,
            'completed_date': str,
            'date_of_request': str,
            'email': str,
            'filter': str,
            'host_uri': str,
            'id': str,
            'instance_id': str,
            'las_update_time': str,
            'link_to_download': str,
            'publish_id': str,
            'query': str,
            'row_number': int,
            'rows_processed': int,
            'start_date': str,
            'utc_time': str
        }

        self.attribute_map = {
            'cancelled': 'cancelled',
            'completed_date': 'completedDate',
            'date_of_request': 'dateOfRequest',
            'email': 'email',
            'filter': 'filter',
            'host_uri': 'hostUri',
            'id': 'id',
            'instance_id': 'instanceId',
            'las_update_time': 'lasUpdateTime',
            'link_to_download': 'linkToDownload',
            'publish_id': 'publishId',
            'query': 'query',
            'row_number': 'rowNumber',
            'rows_processed': 'rowsProcessed',
            'start_date': 'startDate',
            'utc_time': 'utcTime'
        }

        self._cancelled = cancelled
        self._completed_date = completed_date
        self._date_of_request = date_of_request
        self._email = email
        self._filter = filter
        self._host_uri = host_uri
        self._id = id
        self._instance_id = instance_id
        self._las_update_time = las_update_time
        self._link_to_download = link_to_download
        self._publish_id = publish_id
        self._query = query
        self._row_number = row_number
        self._rows_processed = rows_processed
        self._start_date = start_date
        self._utc_time = utc_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportCompletedResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportCompletedResponse of this ExportCompletedResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancelled(self):
        """Gets the cancelled of this ExportCompletedResponse.

        If the export request was cancelled (`true`) or not (`false`).

        :return: The cancelled of this ExportCompletedResponse.
        :rtype: bool
        """
        return self._cancelled

    @cancelled.setter
    def cancelled(self, cancelled):
        """Sets the cancelled of this ExportCompletedResponse.

        If the export request was cancelled (`true`) or not (`false`).

        :param cancelled: The cancelled of this ExportCompletedResponse.
        :type cancelled: bool
        """
        if cancelled is None:
            raise ValueError("Invalid value for `cancelled`, must not be `None`")

        self._cancelled = cancelled

    @property
    def completed_date(self):
        """Gets the completed_date of this ExportCompletedResponse.

        Order export process completed date.

        :return: The completed_date of this ExportCompletedResponse.
        :rtype: str
        """
        return self._completed_date

    @completed_date.setter
    def completed_date(self, completed_date):
        """Sets the completed_date of this ExportCompletedResponse.

        Order export process completed date.

        :param completed_date: The completed_date of this ExportCompletedResponse.
        :type completed_date: str
        """
        if completed_date is None:
            raise ValueError("Invalid value for `completed_date`, must not be `None`")

        self._completed_date = completed_date

    @property
    def date_of_request(self):
        """Gets the date_of_request of this ExportCompletedResponse.

        Order export request date.

        :return: The date_of_request of this ExportCompletedResponse.
        :rtype: str
        """
        return self._date_of_request

    @date_of_request.setter
    def date_of_request(self, date_of_request):
        """Sets the date_of_request of this ExportCompletedResponse.

        Order export request date.

        :param date_of_request: The date_of_request of this ExportCompletedResponse.
        :type date_of_request: str
        """
        if date_of_request is None:
            raise ValueError("Invalid value for `date_of_request`, must not be `None`")

        self._date_of_request = date_of_request

    @property
    def email(self):
        """Gets the email of this ExportCompletedResponse.

        Order export requester email.

        :return: The email of this ExportCompletedResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ExportCompletedResponse.

        Order export requester email.

        :param email: The email of this ExportCompletedResponse.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def filter(self):
        """Gets the filter of this ExportCompletedResponse.

        Order export request filter.

        :return: The filter of this ExportCompletedResponse.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ExportCompletedResponse.

        Order export request filter.

        :param filter: The filter of this ExportCompletedResponse.
        :type filter: str
        """
        if filter is None:
            raise ValueError("Invalid value for `filter`, must not be `None`")

        self._filter = filter

    @property
    def host_uri(self):
        """Gets the host_uri of this ExportCompletedResponse.

        Host URL.

        :return: The host_uri of this ExportCompletedResponse.
        :rtype: str
        """
        return self._host_uri

    @host_uri.setter
    def host_uri(self, host_uri):
        """Sets the host_uri of this ExportCompletedResponse.

        Host URL.

        :param host_uri: The host_uri of this ExportCompletedResponse.
        :type host_uri: str
        """
        if host_uri is None:
            raise ValueError("Invalid value for `host_uri`, must not be `None`")

        self._host_uri = host_uri

    @property
    def id(self):
        """Gets the id of this ExportCompletedResponse.

        Order export request ID.

        :return: The id of this ExportCompletedResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExportCompletedResponse.

        Order export request ID.

        :param id: The id of this ExportCompletedResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def instance_id(self):
        """Gets the instance_id of this ExportCompletedResponse.

        Instance ID.

        :return: The instance_id of this ExportCompletedResponse.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this ExportCompletedResponse.

        Instance ID.

        :param instance_id: The instance_id of this ExportCompletedResponse.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")

        self._instance_id = instance_id

    @property
    def las_update_time(self):
        """Gets the las_update_time of this ExportCompletedResponse.

        Order export process update time.

        :return: The las_update_time of this ExportCompletedResponse.
        :rtype: str
        """
        return self._las_update_time

    @las_update_time.setter
    def las_update_time(self, las_update_time):
        """Sets the las_update_time of this ExportCompletedResponse.

        Order export process update time.

        :param las_update_time: The las_update_time of this ExportCompletedResponse.
        :type las_update_time: str
        """
        if las_update_time is None:
            raise ValueError("Invalid value for `las_update_time`, must not be `None`")

        self._las_update_time = las_update_time

    @property
    def link_to_download(self):
        """Gets the link_to_download of this ExportCompletedResponse.

        Link to order export download.

        :return: The link_to_download of this ExportCompletedResponse.
        :rtype: str
        """
        return self._link_to_download

    @link_to_download.setter
    def link_to_download(self, link_to_download):
        """Sets the link_to_download of this ExportCompletedResponse.

        Link to order export download.

        :param link_to_download: The link_to_download of this ExportCompletedResponse.
        :type link_to_download: str
        """
        if link_to_download is None:
            raise ValueError("Invalid value for `link_to_download`, must not be `None`")

        self._link_to_download = link_to_download

    @property
    def publish_id(self):
        """Gets the publish_id of this ExportCompletedResponse.

        Order export publish ID.

        :return: The publish_id of this ExportCompletedResponse.
        :rtype: str
        """
        return self._publish_id

    @publish_id.setter
    def publish_id(self, publish_id):
        """Sets the publish_id of this ExportCompletedResponse.

        Order export publish ID.

        :param publish_id: The publish_id of this ExportCompletedResponse.
        :type publish_id: str
        """
        if publish_id is None:
            raise ValueError("Invalid value for `publish_id`, must not be `None`")

        self._publish_id = publish_id

    @property
    def query(self):
        """Gets the query of this ExportCompletedResponse.

        Order export request filter query.

        :return: The query of this ExportCompletedResponse.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this ExportCompletedResponse.

        Order export request filter query.

        :param query: The query of this ExportCompletedResponse.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def row_number(self):
        """Gets the row_number of this ExportCompletedResponse.

        Order export total rows.

        :return: The row_number of this ExportCompletedResponse.
        :rtype: int
        """
        return self._row_number

    @row_number.setter
    def row_number(self, row_number):
        """Sets the row_number of this ExportCompletedResponse.

        Order export total rows.

        :param row_number: The row_number of this ExportCompletedResponse.
        :type row_number: int
        """
        if row_number is None:
            raise ValueError("Invalid value for `row_number`, must not be `None`")

        self._row_number = row_number

    @property
    def rows_processed(self):
        """Gets the rows_processed of this ExportCompletedResponse.

        Order export total processed rows.

        :return: The rows_processed of this ExportCompletedResponse.
        :rtype: int
        """
        return self._rows_processed

    @rows_processed.setter
    def rows_processed(self, rows_processed):
        """Sets the rows_processed of this ExportCompletedResponse.

        Order export total processed rows.

        :param rows_processed: The rows_processed of this ExportCompletedResponse.
        :type rows_processed: int
        """
        if rows_processed is None:
            raise ValueError("Invalid value for `rows_processed`, must not be `None`")

        self._rows_processed = rows_processed

    @property
    def start_date(self):
        """Gets the start_date of this ExportCompletedResponse.

        Order export process start date.

        :return: The start_date of this ExportCompletedResponse.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ExportCompletedResponse.

        Order export process start date.

        :param start_date: The start_date of this ExportCompletedResponse.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date

    @property
    def utc_time(self):
        """Gets the utc_time of this ExportCompletedResponse.

        UTC time.

        :return: The utc_time of this ExportCompletedResponse.
        :rtype: str
        """
        return self._utc_time

    @utc_time.setter
    def utc_time(self, utc_time):
        """Sets the utc_time of this ExportCompletedResponse.

        UTC time.

        :param utc_time: The utc_time of this ExportCompletedResponse.
        :type utc_time: str
        """
        if utc_time is None:
            raise ValueError("Invalid value for `utc_time`, must not be `None`")

        self._utc_time = utc_time
