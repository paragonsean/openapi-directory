# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delivery_id import DeliveryId
from openapi_server.models.logistics_info_delivery_channels_inner import LogisticsInfoDeliveryChannelsInner
from openapi_server.models.pickup_store_info import PickupStoreInfo
from openapi_server.models.sla import Sla
from openapi_server import util


class LogisticsInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_id: str=None, delivery_channel: str=None, delivery_channels: List[LogisticsInfoDeliveryChannelsInner]=None, delivery_company: str=None, delivery_ids: List[DeliveryId]=None, delivery_window: str=None, entity_id: str=None, item_index: int=None, list_price: int=None, lock_ttl: str=None, pickup_point_id: str=None, pickup_store_info: PickupStoreInfo=None, polygon_name: str=None, price: int=None, selected_sla: str=None, selling_price: int=None, shipping_estimate: str=None, shipping_estimate_date: str=None, ships_to: List[str]=None, slas: List[Sla]=None, transit_time: str=None, version_id: str=None):
        """LogisticsInfo - a model defined in OpenAPI

        :param address_id: The address_id of this LogisticsInfo.
        :param delivery_channel: The delivery_channel of this LogisticsInfo.
        :param delivery_channels: The delivery_channels of this LogisticsInfo.
        :param delivery_company: The delivery_company of this LogisticsInfo.
        :param delivery_ids: The delivery_ids of this LogisticsInfo.
        :param delivery_window: The delivery_window of this LogisticsInfo.
        :param entity_id: The entity_id of this LogisticsInfo.
        :param item_index: The item_index of this LogisticsInfo.
        :param list_price: The list_price of this LogisticsInfo.
        :param lock_ttl: The lock_ttl of this LogisticsInfo.
        :param pickup_point_id: The pickup_point_id of this LogisticsInfo.
        :param pickup_store_info: The pickup_store_info of this LogisticsInfo.
        :param polygon_name: The polygon_name of this LogisticsInfo.
        :param price: The price of this LogisticsInfo.
        :param selected_sla: The selected_sla of this LogisticsInfo.
        :param selling_price: The selling_price of this LogisticsInfo.
        :param shipping_estimate: The shipping_estimate of this LogisticsInfo.
        :param shipping_estimate_date: The shipping_estimate_date of this LogisticsInfo.
        :param ships_to: The ships_to of this LogisticsInfo.
        :param slas: The slas of this LogisticsInfo.
        :param transit_time: The transit_time of this LogisticsInfo.
        :param version_id: The version_id of this LogisticsInfo.
        """
        self.openapi_types = {
            'address_id': str,
            'delivery_channel': str,
            'delivery_channels': List[LogisticsInfoDeliveryChannelsInner],
            'delivery_company': str,
            'delivery_ids': List[DeliveryId],
            'delivery_window': str,
            'entity_id': str,
            'item_index': int,
            'list_price': int,
            'lock_ttl': str,
            'pickup_point_id': str,
            'pickup_store_info': PickupStoreInfo,
            'polygon_name': str,
            'price': int,
            'selected_sla': str,
            'selling_price': int,
            'shipping_estimate': str,
            'shipping_estimate_date': str,
            'ships_to': List[str],
            'slas': List[Sla],
            'transit_time': str,
            'version_id': str
        }

        self.attribute_map = {
            'address_id': 'addressId',
            'delivery_channel': 'deliveryChannel',
            'delivery_channels': 'deliveryChannels',
            'delivery_company': 'deliveryCompany',
            'delivery_ids': 'deliveryIds',
            'delivery_window': 'deliveryWindow',
            'entity_id': 'entityId',
            'item_index': 'itemIndex',
            'list_price': 'listPrice',
            'lock_ttl': 'lockTTL',
            'pickup_point_id': 'pickupPointId',
            'pickup_store_info': 'pickupStoreInfo',
            'polygon_name': 'polygonName',
            'price': 'price',
            'selected_sla': 'selectedSla',
            'selling_price': 'sellingPrice',
            'shipping_estimate': 'shippingEstimate',
            'shipping_estimate_date': 'shippingEstimateDate',
            'ships_to': 'shipsTo',
            'slas': 'slas',
            'transit_time': 'transitTime',
            'version_id': 'versionId'
        }

        self._address_id = address_id
        self._delivery_channel = delivery_channel
        self._delivery_channels = delivery_channels
        self._delivery_company = delivery_company
        self._delivery_ids = delivery_ids
        self._delivery_window = delivery_window
        self._entity_id = entity_id
        self._item_index = item_index
        self._list_price = list_price
        self._lock_ttl = lock_ttl
        self._pickup_point_id = pickup_point_id
        self._pickup_store_info = pickup_store_info
        self._polygon_name = polygon_name
        self._price = price
        self._selected_sla = selected_sla
        self._selling_price = selling_price
        self._shipping_estimate = shipping_estimate
        self._shipping_estimate_date = shipping_estimate_date
        self._ships_to = ships_to
        self._slas = slas
        self._transit_time = transit_time
        self._version_id = version_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogisticsInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogisticsInfo of this LogisticsInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_id(self):
        """Gets the address_id of this LogisticsInfo.

        Address ID.

        :return: The address_id of this LogisticsInfo.
        :rtype: str
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this LogisticsInfo.

        Address ID.

        :param address_id: The address_id of this LogisticsInfo.
        :type address_id: str
        """
        if address_id is None:
            raise ValueError("Invalid value for `address_id`, must not be `None`")

        self._address_id = address_id

    @property
    def delivery_channel(self):
        """Gets the delivery_channel of this LogisticsInfo.

        If the delivery channel is `delivery` or `pickup-in-point`.

        :return: The delivery_channel of this LogisticsInfo.
        :rtype: str
        """
        return self._delivery_channel

    @delivery_channel.setter
    def delivery_channel(self, delivery_channel):
        """Sets the delivery_channel of this LogisticsInfo.

        If the delivery channel is `delivery` or `pickup-in-point`.

        :param delivery_channel: The delivery_channel of this LogisticsInfo.
        :type delivery_channel: str
        """
        if delivery_channel is None:
            raise ValueError("Invalid value for `delivery_channel`, must not be `None`")

        self._delivery_channel = delivery_channel

    @property
    def delivery_channels(self):
        """Gets the delivery_channels of this LogisticsInfo.

        List of delivery channels associated with the trade policy.

        :return: The delivery_channels of this LogisticsInfo.
        :rtype: List[LogisticsInfoDeliveryChannelsInner]
        """
        return self._delivery_channels

    @delivery_channels.setter
    def delivery_channels(self, delivery_channels):
        """Sets the delivery_channels of this LogisticsInfo.

        List of delivery channels associated with the trade policy.

        :param delivery_channels: The delivery_channels of this LogisticsInfo.
        :type delivery_channels: List[LogisticsInfoDeliveryChannelsInner]
        """
        if delivery_channels is None:
            raise ValueError("Invalid value for `delivery_channels`, must not be `None`")

        self._delivery_channels = delivery_channels

    @property
    def delivery_company(self):
        """Gets the delivery_company of this LogisticsInfo.

        [Carrier](https://help.vtex.com/en/tutorial/transportadoras-na-vtex--7u9duMD5UQa2QQwukAWMcE) company's name.

        :return: The delivery_company of this LogisticsInfo.
        :rtype: str
        """
        return self._delivery_company

    @delivery_company.setter
    def delivery_company(self, delivery_company):
        """Sets the delivery_company of this LogisticsInfo.

        [Carrier](https://help.vtex.com/en/tutorial/transportadoras-na-vtex--7u9duMD5UQa2QQwukAWMcE) company's name.

        :param delivery_company: The delivery_company of this LogisticsInfo.
        :type delivery_company: str
        """
        if delivery_company is None:
            raise ValueError("Invalid value for `delivery_company`, must not be `None`")

        self._delivery_company = delivery_company

    @property
    def delivery_ids(self):
        """Gets the delivery_ids of this LogisticsInfo.

        Information about delivery IDs.

        :return: The delivery_ids of this LogisticsInfo.
        :rtype: List[DeliveryId]
        """
        return self._delivery_ids

    @delivery_ids.setter
    def delivery_ids(self, delivery_ids):
        """Sets the delivery_ids of this LogisticsInfo.

        Information about delivery IDs.

        :param delivery_ids: The delivery_ids of this LogisticsInfo.
        :type delivery_ids: List[DeliveryId]
        """
        if delivery_ids is None:
            raise ValueError("Invalid value for `delivery_ids`, must not be `None`")

        self._delivery_ids = delivery_ids

    @property
    def delivery_window(self):
        """Gets the delivery_window of this LogisticsInfo.

        [Scheduled delivery](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) window information, if it applies to the item.

        :return: The delivery_window of this LogisticsInfo.
        :rtype: str
        """
        return self._delivery_window

    @delivery_window.setter
    def delivery_window(self, delivery_window):
        """Sets the delivery_window of this LogisticsInfo.

        [Scheduled delivery](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) window information, if it applies to the item.

        :param delivery_window: The delivery_window of this LogisticsInfo.
        :type delivery_window: str
        """
        if delivery_window is None:
            raise ValueError("Invalid value for `delivery_window`, must not be `None`")

        self._delivery_window = delivery_window

    @property
    def entity_id(self):
        """Gets the entity_id of this LogisticsInfo.

        Shipping address entity ID.

        :return: The entity_id of this LogisticsInfo.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this LogisticsInfo.

        Shipping address entity ID.

        :param entity_id: The entity_id of this LogisticsInfo.
        :type entity_id: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id

    @property
    def item_index(self):
        """Gets the item_index of this LogisticsInfo.

        Index of the item starting from 0.

        :return: The item_index of this LogisticsInfo.
        :rtype: int
        """
        return self._item_index

    @item_index.setter
    def item_index(self, item_index):
        """Sets the item_index of this LogisticsInfo.

        Index of the item starting from 0.

        :param item_index: The item_index of this LogisticsInfo.
        :type item_index: int
        """
        if item_index is None:
            raise ValueError("Invalid value for `item_index`, must not be `None`")

        self._item_index = item_index

    @property
    def list_price(self):
        """Gets the list_price of this LogisticsInfo.

        SKU's optional price for a specific trade policy.

        :return: The list_price of this LogisticsInfo.
        :rtype: int
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this LogisticsInfo.

        SKU's optional price for a specific trade policy.

        :param list_price: The list_price of this LogisticsInfo.
        :type list_price: int
        """
        if list_price is None:
            raise ValueError("Invalid value for `list_price`, must not be `None`")

        self._list_price = list_price

    @property
    def lock_ttl(self):
        """Gets the lock_ttl of this LogisticsInfo.

        Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time.

        :return: The lock_ttl of this LogisticsInfo.
        :rtype: str
        """
        return self._lock_ttl

    @lock_ttl.setter
    def lock_ttl(self, lock_ttl):
        """Sets the lock_ttl of this LogisticsInfo.

        Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time.

        :param lock_ttl: The lock_ttl of this LogisticsInfo.
        :type lock_ttl: str
        """
        if lock_ttl is None:
            raise ValueError("Invalid value for `lock_ttl`, must not be `None`")

        self._lock_ttl = lock_ttl

    @property
    def pickup_point_id(self):
        """Gets the pickup_point_id of this LogisticsInfo.

        [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R)'s ID.

        :return: The pickup_point_id of this LogisticsInfo.
        :rtype: str
        """
        return self._pickup_point_id

    @pickup_point_id.setter
    def pickup_point_id(self, pickup_point_id):
        """Sets the pickup_point_id of this LogisticsInfo.

        [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R)'s ID.

        :param pickup_point_id: The pickup_point_id of this LogisticsInfo.
        :type pickup_point_id: str
        """
        if pickup_point_id is None:
            raise ValueError("Invalid value for `pickup_point_id`, must not be `None`")

        self._pickup_point_id = pickup_point_id

    @property
    def pickup_store_info(self):
        """Gets the pickup_store_info of this LogisticsInfo.


        :return: The pickup_store_info of this LogisticsInfo.
        :rtype: PickupStoreInfo
        """
        return self._pickup_store_info

    @pickup_store_info.setter
    def pickup_store_info(self, pickup_store_info):
        """Sets the pickup_store_info of this LogisticsInfo.


        :param pickup_store_info: The pickup_store_info of this LogisticsInfo.
        :type pickup_store_info: PickupStoreInfo
        """
        if pickup_store_info is None:
            raise ValueError("Invalid value for `pickup_store_info`, must not be `None`")

        self._pickup_store_info = pickup_store_info

    @property
    def polygon_name(self):
        """Gets the polygon_name of this LogisticsInfo.

        Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.

        :return: The polygon_name of this LogisticsInfo.
        :rtype: str
        """
        return self._polygon_name

    @polygon_name.setter
    def polygon_name(self, polygon_name):
        """Sets the polygon_name of this LogisticsInfo.

        Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.

        :param polygon_name: The polygon_name of this LogisticsInfo.
        :type polygon_name: str
        """
        if polygon_name is None:
            raise ValueError("Invalid value for `polygon_name`, must not be `None`")

        self._polygon_name = polygon_name

    @property
    def price(self):
        """Gets the price of this LogisticsInfo.

        Shipping price for the item in cents. Does not account for the whole order's shipping price.

        :return: The price of this LogisticsInfo.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this LogisticsInfo.

        Shipping price for the item in cents. Does not account for the whole order's shipping price.

        :param price: The price of this LogisticsInfo.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def selected_sla(self):
        """Gets the selected_sla of this LogisticsInfo.

        Selected shipping option.

        :return: The selected_sla of this LogisticsInfo.
        :rtype: str
        """
        return self._selected_sla

    @selected_sla.setter
    def selected_sla(self, selected_sla):
        """Sets the selected_sla of this LogisticsInfo.

        Selected shipping option.

        :param selected_sla: The selected_sla of this LogisticsInfo.
        :type selected_sla: str
        """
        if selected_sla is None:
            raise ValueError("Invalid value for `selected_sla`, must not be `None`")

        self._selected_sla = selected_sla

    @property
    def selling_price(self):
        """Gets the selling_price of this LogisticsInfo.

        Item's selling price.

        :return: The selling_price of this LogisticsInfo.
        :rtype: int
        """
        return self._selling_price

    @selling_price.setter
    def selling_price(self, selling_price):
        """Sets the selling_price of this LogisticsInfo.

        Item's selling price.

        :param selling_price: The selling_price of this LogisticsInfo.
        :type selling_price: int
        """
        if selling_price is None:
            raise ValueError("Invalid value for `selling_price`, must not be `None`")

        self._selling_price = selling_price

    @property
    def shipping_estimate(self):
        """Gets the shipping_estimate of this LogisticsInfo.

        Total shipping estimate time in days. For instance, three business days is represented `3bd`.

        :return: The shipping_estimate of this LogisticsInfo.
        :rtype: str
        """
        return self._shipping_estimate

    @shipping_estimate.setter
    def shipping_estimate(self, shipping_estimate):
        """Sets the shipping_estimate of this LogisticsInfo.

        Total shipping estimate time in days. For instance, three business days is represented `3bd`.

        :param shipping_estimate: The shipping_estimate of this LogisticsInfo.
        :type shipping_estimate: str
        """
        if shipping_estimate is None:
            raise ValueError("Invalid value for `shipping_estimate`, must not be `None`")

        self._shipping_estimate = shipping_estimate

    @property
    def shipping_estimate_date(self):
        """Gets the shipping_estimate_date of this LogisticsInfo.

        Shipping estimate date. It is defined only after the confirmation of the order.

        :return: The shipping_estimate_date of this LogisticsInfo.
        :rtype: str
        """
        return self._shipping_estimate_date

    @shipping_estimate_date.setter
    def shipping_estimate_date(self, shipping_estimate_date):
        """Sets the shipping_estimate_date of this LogisticsInfo.

        Shipping estimate date. It is defined only after the confirmation of the order.

        :param shipping_estimate_date: The shipping_estimate_date of this LogisticsInfo.
        :type shipping_estimate_date: str
        """
        if shipping_estimate_date is None:
            raise ValueError("Invalid value for `shipping_estimate_date`, must not be `None`")

        self._shipping_estimate_date = shipping_estimate_date

    @property
    def ships_to(self):
        """Gets the ships_to of this LogisticsInfo.

        Three letters ISO code of the country of the shipping address (ISO 3166 ALPHA-3).

        :return: The ships_to of this LogisticsInfo.
        :rtype: List[str]
        """
        return self._ships_to

    @ships_to.setter
    def ships_to(self, ships_to):
        """Sets the ships_to of this LogisticsInfo.

        Three letters ISO code of the country of the shipping address (ISO 3166 ALPHA-3).

        :param ships_to: The ships_to of this LogisticsInfo.
        :type ships_to: List[str]
        """
        if ships_to is None:
            raise ValueError("Invalid value for `ships_to`, must not be `None`")

        self._ships_to = ships_to

    @property
    def slas(self):
        """Gets the slas of this LogisticsInfo.

        Information on Service Level Agreement (SLA), corresponding to [shipping policies](https://help.vtex.com/tutorial/shipping-policy--tutorials_140).

        :return: The slas of this LogisticsInfo.
        :rtype: List[Sla]
        """
        return self._slas

    @slas.setter
    def slas(self, slas):
        """Sets the slas of this LogisticsInfo.

        Information on Service Level Agreement (SLA), corresponding to [shipping policies](https://help.vtex.com/tutorial/shipping-policy--tutorials_140).

        :param slas: The slas of this LogisticsInfo.
        :type slas: List[Sla]
        """
        if slas is None:
            raise ValueError("Invalid value for `slas`, must not be `None`")

        self._slas = slas

    @property
    def transit_time(self):
        """Gets the transit_time of this LogisticsInfo.

        Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented `3bd`.

        :return: The transit_time of this LogisticsInfo.
        :rtype: str
        """
        return self._transit_time

    @transit_time.setter
    def transit_time(self, transit_time):
        """Sets the transit_time of this LogisticsInfo.

        Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented `3bd`.

        :param transit_time: The transit_time of this LogisticsInfo.
        :type transit_time: str
        """
        if transit_time is None:
            raise ValueError("Invalid value for `transit_time`, must not be `None`")

        self._transit_time = transit_time

    @property
    def version_id(self):
        """Gets the version_id of this LogisticsInfo.

        Shipping address version ID.

        :return: The version_id of this LogisticsInfo.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this LogisticsInfo.

        Shipping address version ID.

        :param version_id: The version_id of this LogisticsInfo.
        :type version_id: str
        """
        if version_id is None:
            raise ValueError("Invalid value for `version_id`, must not be `None`")

        self._version_id = version_id
