# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegisterChangeRequestItemsAddedInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str='0', price: int=2499, quantity: int=1):
        """RegisterChangeRequestItemsAddedInner - a model defined in OpenAPI

        :param id: The id of this RegisterChangeRequestItemsAddedInner.
        :param price: The price of this RegisterChangeRequestItemsAddedInner.
        :param quantity: The quantity of this RegisterChangeRequestItemsAddedInner.
        """
        self.openapi_types = {
            'id': str,
            'price': int,
            'quantity': int
        }

        self.attribute_map = {
            'id': 'id',
            'price': 'price',
            'quantity': 'quantity'
        }

        self._id = id
        self._price = price
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterChangeRequestItemsAddedInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterChangeRequest_itemsAdded_inner of this RegisterChangeRequestItemsAddedInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this RegisterChangeRequestItemsAddedInner.

        Product ID of the item.

        :return: The id of this RegisterChangeRequestItemsAddedInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RegisterChangeRequestItemsAddedInner.

        Product ID of the item.

        :param id: The id of this RegisterChangeRequestItemsAddedInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def price(self):
        """Gets the price of this RegisterChangeRequestItemsAddedInner.

        Price of the item in cents.

        :return: The price of this RegisterChangeRequestItemsAddedInner.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this RegisterChangeRequestItemsAddedInner.

        Price of the item in cents.

        :param price: The price of this RegisterChangeRequestItemsAddedInner.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this RegisterChangeRequestItemsAddedInner.

        Amount of items to be added.

        :return: The quantity of this RegisterChangeRequestItemsAddedInner.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this RegisterChangeRequestItemsAddedInner.

        Amount of items to be added.

        :param quantity: The quantity of this RegisterChangeRequestItemsAddedInner.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity
