# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserorderdetailsCancellationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancellation_date: str=None, reason: str=None, requested_by_payment_notification: bool=None, requested_by_seller_notification: bool=None, requested_by_system: bool=None, requested_by_user: bool=None):
        """UserorderdetailsCancellationData - a model defined in OpenAPI

        :param cancellation_date: The cancellation_date of this UserorderdetailsCancellationData.
        :param reason: The reason of this UserorderdetailsCancellationData.
        :param requested_by_payment_notification: The requested_by_payment_notification of this UserorderdetailsCancellationData.
        :param requested_by_seller_notification: The requested_by_seller_notification of this UserorderdetailsCancellationData.
        :param requested_by_system: The requested_by_system of this UserorderdetailsCancellationData.
        :param requested_by_user: The requested_by_user of this UserorderdetailsCancellationData.
        """
        self.openapi_types = {
            'cancellation_date': str,
            'reason': str,
            'requested_by_payment_notification': bool,
            'requested_by_seller_notification': bool,
            'requested_by_system': bool,
            'requested_by_user': bool
        }

        self.attribute_map = {
            'cancellation_date': 'CancellationDate',
            'reason': 'Reason',
            'requested_by_payment_notification': 'RequestedByPaymentNotification',
            'requested_by_seller_notification': 'RequestedBySellerNotification',
            'requested_by_system': 'RequestedBySystem',
            'requested_by_user': 'RequestedByUser'
        }

        self._cancellation_date = cancellation_date
        self._reason = reason
        self._requested_by_payment_notification = requested_by_payment_notification
        self._requested_by_seller_notification = requested_by_seller_notification
        self._requested_by_system = requested_by_system
        self._requested_by_user = requested_by_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserorderdetailsCancellationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Userorderdetails_cancellationData of this UserorderdetailsCancellationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancellation_date(self):
        """Gets the cancellation_date of this UserorderdetailsCancellationData.

        The date when the order was cancelled.

        :return: The cancellation_date of this UserorderdetailsCancellationData.
        :rtype: str
        """
        return self._cancellation_date

    @cancellation_date.setter
    def cancellation_date(self, cancellation_date):
        """Sets the cancellation_date of this UserorderdetailsCancellationData.

        The date when the order was cancelled.

        :param cancellation_date: The cancellation_date of this UserorderdetailsCancellationData.
        :type cancellation_date: str
        """
        if cancellation_date is None:
            raise ValueError("Invalid value for `cancellation_date`, must not be `None`")

        self._cancellation_date = cancellation_date

    @property
    def reason(self):
        """Gets the reason of this UserorderdetailsCancellationData.

        The reason why the order was cancelled.

        :return: The reason of this UserorderdetailsCancellationData.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this UserorderdetailsCancellationData.

        The reason why the order was cancelled.

        :param reason: The reason of this UserorderdetailsCancellationData.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def requested_by_payment_notification(self):
        """Gets the requested_by_payment_notification of this UserorderdetailsCancellationData.

        If the order cancellation was requested by the payment gateway (`true`) or not (`false`).

        :return: The requested_by_payment_notification of this UserorderdetailsCancellationData.
        :rtype: bool
        """
        return self._requested_by_payment_notification

    @requested_by_payment_notification.setter
    def requested_by_payment_notification(self, requested_by_payment_notification):
        """Sets the requested_by_payment_notification of this UserorderdetailsCancellationData.

        If the order cancellation was requested by the payment gateway (`true`) or not (`false`).

        :param requested_by_payment_notification: The requested_by_payment_notification of this UserorderdetailsCancellationData.
        :type requested_by_payment_notification: bool
        """
        if requested_by_payment_notification is None:
            raise ValueError("Invalid value for `requested_by_payment_notification`, must not be `None`")

        self._requested_by_payment_notification = requested_by_payment_notification

    @property
    def requested_by_seller_notification(self):
        """Gets the requested_by_seller_notification of this UserorderdetailsCancellationData.

        If the order cancellation was requested by the seller (`true`) or not (`false`).

        :return: The requested_by_seller_notification of this UserorderdetailsCancellationData.
        :rtype: bool
        """
        return self._requested_by_seller_notification

    @requested_by_seller_notification.setter
    def requested_by_seller_notification(self, requested_by_seller_notification):
        """Sets the requested_by_seller_notification of this UserorderdetailsCancellationData.

        If the order cancellation was requested by the seller (`true`) or not (`false`).

        :param requested_by_seller_notification: The requested_by_seller_notification of this UserorderdetailsCancellationData.
        :type requested_by_seller_notification: bool
        """
        if requested_by_seller_notification is None:
            raise ValueError("Invalid value for `requested_by_seller_notification`, must not be `None`")

        self._requested_by_seller_notification = requested_by_seller_notification

    @property
    def requested_by_system(self):
        """Gets the requested_by_system of this UserorderdetailsCancellationData.

        If the order cancellation was made by the system (`true`) or not (`false`). This type of order cancellation happens in [incomplete orders](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294), for example.

        :return: The requested_by_system of this UserorderdetailsCancellationData.
        :rtype: bool
        """
        return self._requested_by_system

    @requested_by_system.setter
    def requested_by_system(self, requested_by_system):
        """Sets the requested_by_system of this UserorderdetailsCancellationData.

        If the order cancellation was made by the system (`true`) or not (`false`). This type of order cancellation happens in [incomplete orders](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294), for example.

        :param requested_by_system: The requested_by_system of this UserorderdetailsCancellationData.
        :type requested_by_system: bool
        """
        if requested_by_system is None:
            raise ValueError("Invalid value for `requested_by_system`, must not be `None`")

        self._requested_by_system = requested_by_system

    @property
    def requested_by_user(self):
        """Gets the requested_by_user of this UserorderdetailsCancellationData.

        If the order cancellation was requested by the costumer (`true`) or not (`false`).

        :return: The requested_by_user of this UserorderdetailsCancellationData.
        :rtype: bool
        """
        return self._requested_by_user

    @requested_by_user.setter
    def requested_by_user(self, requested_by_user):
        """Sets the requested_by_user of this UserorderdetailsCancellationData.

        If the order cancellation was requested by the costumer (`true`) or not (`false`).

        :param requested_by_user: The requested_by_user of this UserorderdetailsCancellationData.
        :type requested_by_user: bool
        """
        if requested_by_user is None:
            raise ValueError("Invalid value for `requested_by_user`, must not be `None`")

        self._requested_by_user = requested_by_user
