# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency_format_info import CurrencyFormatInfo
from openapi_server import util


class StorePreferencesData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, currency_code: str=None, currency_format_info: CurrencyFormatInfo=None, currency_locale: int=None, currency_symbol: str=None, time_zone: str=None):
        """StorePreferencesData - a model defined in OpenAPI

        :param country_code: The country_code of this StorePreferencesData.
        :param currency_code: The currency_code of this StorePreferencesData.
        :param currency_format_info: The currency_format_info of this StorePreferencesData.
        :param currency_locale: The currency_locale of this StorePreferencesData.
        :param currency_symbol: The currency_symbol of this StorePreferencesData.
        :param time_zone: The time_zone of this StorePreferencesData.
        """
        self.openapi_types = {
            'country_code': str,
            'currency_code': str,
            'currency_format_info': CurrencyFormatInfo,
            'currency_locale': int,
            'currency_symbol': str,
            'time_zone': str
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            'currency_code': 'currencyCode',
            'currency_format_info': 'currencyFormatInfo',
            'currency_locale': 'currencyLocale',
            'currency_symbol': 'currencySymbol',
            'time_zone': 'timeZone'
        }

        self._country_code = country_code
        self._currency_code = currency_code
        self._currency_format_info = currency_format_info
        self._currency_locale = currency_locale
        self._currency_symbol = currency_symbol
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorePreferencesData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorePreferencesData of this StorePreferencesData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this StorePreferencesData.

        Three letters ISO code of the country (ISO 3166 ALPHA-3).

        :return: The country_code of this StorePreferencesData.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this StorePreferencesData.

        Three letters ISO code of the country (ISO 3166 ALPHA-3).

        :param country_code: The country_code of this StorePreferencesData.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def currency_code(self):
        """Gets the currency_code of this StorePreferencesData.

        Currency code in ISO 4217. For example, `BRL`.

        :return: The currency_code of this StorePreferencesData.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this StorePreferencesData.

        Currency code in ISO 4217. For example, `BRL`.

        :param currency_code: The currency_code of this StorePreferencesData.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def currency_format_info(self):
        """Gets the currency_format_info of this StorePreferencesData.


        :return: The currency_format_info of this StorePreferencesData.
        :rtype: CurrencyFormatInfo
        """
        return self._currency_format_info

    @currency_format_info.setter
    def currency_format_info(self, currency_format_info):
        """Sets the currency_format_info of this StorePreferencesData.


        :param currency_format_info: The currency_format_info of this StorePreferencesData.
        :type currency_format_info: CurrencyFormatInfo
        """
        if currency_format_info is None:
            raise ValueError("Invalid value for `currency_format_info`, must not be `None`")

        self._currency_format_info = currency_format_info

    @property
    def currency_locale(self):
        """Gets the currency_locale of this StorePreferencesData.

        Currency Locale Code in LCID in decimal.

        :return: The currency_locale of this StorePreferencesData.
        :rtype: int
        """
        return self._currency_locale

    @currency_locale.setter
    def currency_locale(self, currency_locale):
        """Sets the currency_locale of this StorePreferencesData.

        Currency Locale Code in LCID in decimal.

        :param currency_locale: The currency_locale of this StorePreferencesData.
        :type currency_locale: int
        """
        if currency_locale is None:
            raise ValueError("Invalid value for `currency_locale`, must not be `None`")

        self._currency_locale = currency_locale

    @property
    def currency_symbol(self):
        """Gets the currency_symbol of this StorePreferencesData.

        Currency symbol.

        :return: The currency_symbol of this StorePreferencesData.
        :rtype: str
        """
        return self._currency_symbol

    @currency_symbol.setter
    def currency_symbol(self, currency_symbol):
        """Sets the currency_symbol of this StorePreferencesData.

        Currency symbol.

        :param currency_symbol: The currency_symbol of this StorePreferencesData.
        :type currency_symbol: str
        """
        if currency_symbol is None:
            raise ValueError("Invalid value for `currency_symbol`, must not be `None`")

        self._currency_symbol = currency_symbol

    @property
    def time_zone(self):
        """Gets the time_zone of this StorePreferencesData.

        Time zone from where the order was made.

        :return: The time_zone of this StorePreferencesData.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this StorePreferencesData.

        Time zone from where the order was made.

        :param time_zone: The time_zone of this StorePreferencesData.
        :type time_zone: str
        """
        if time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")

        self._time_zone = time_zone
