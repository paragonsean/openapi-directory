# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item_price_definitions_selling_prices_inner import ItemPriceDefinitionsSellingPricesInner
from openapi_server import util


class ItemPriceDefinitions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculated_selling_price: int=None, selling_prices: List[ItemPriceDefinitionsSellingPricesInner]=None, total: int=None):
        """ItemPriceDefinitions - a model defined in OpenAPI

        :param calculated_selling_price: The calculated_selling_price of this ItemPriceDefinitions.
        :param selling_prices: The selling_prices of this ItemPriceDefinitions.
        :param total: The total of this ItemPriceDefinitions.
        """
        self.openapi_types = {
            'calculated_selling_price': int,
            'selling_prices': List[ItemPriceDefinitionsSellingPricesInner],
            'total': int
        }

        self.attribute_map = {
            'calculated_selling_price': 'calculatedSellingPrice',
            'selling_prices': 'sellingPrices',
            'total': 'total'
        }

        self._calculated_selling_price = calculated_selling_price
        self._selling_prices = selling_prices
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemPriceDefinitions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item_priceDefinitions of this ItemPriceDefinitions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculated_selling_price(self):
        """Gets the calculated_selling_price of this ItemPriceDefinitions.

        Item's calculated unitary selling price in cents.

        :return: The calculated_selling_price of this ItemPriceDefinitions.
        :rtype: int
        """
        return self._calculated_selling_price

    @calculated_selling_price.setter
    def calculated_selling_price(self, calculated_selling_price):
        """Sets the calculated_selling_price of this ItemPriceDefinitions.

        Item's calculated unitary selling price in cents.

        :param calculated_selling_price: The calculated_selling_price of this ItemPriceDefinitions.
        :type calculated_selling_price: int
        """
        if calculated_selling_price is None:
            raise ValueError("Invalid value for `calculated_selling_price`, must not be `None`")

        self._calculated_selling_price = calculated_selling_price

    @property
    def selling_prices(self):
        """Gets the selling_prices of this ItemPriceDefinitions.

        Details on item's selling price.

        :return: The selling_prices of this ItemPriceDefinitions.
        :rtype: List[ItemPriceDefinitionsSellingPricesInner]
        """
        return self._selling_prices

    @selling_prices.setter
    def selling_prices(self, selling_prices):
        """Sets the selling_prices of this ItemPriceDefinitions.

        Details on item's selling price.

        :param selling_prices: The selling_prices of this ItemPriceDefinitions.
        :type selling_prices: List[ItemPriceDefinitionsSellingPricesInner]
        """
        if selling_prices is None:
            raise ValueError("Invalid value for `selling_prices`, must not be `None`")

        self._selling_prices = selling_prices

    @property
    def total(self):
        """Gets the total of this ItemPriceDefinitions.

        Total value of all item's units in cents.

        :return: The total of this ItemPriceDefinitions.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ItemPriceDefinitions.

        Total value of all item's units in cents.

        :param total: The total of this ItemPriceDefinitions.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
