# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.userorderdetails_tax_data_tax_info_collection_inner_price_tags_inner import UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner
from openapi_server import util


class UserorderdetailsTaxDataTaxInfoCollectionInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_index: int=None, price_tags: List[UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner]=None, sku: str=None):
        """UserorderdetailsTaxDataTaxInfoCollectionInner - a model defined in OpenAPI

        :param item_index: The item_index of this UserorderdetailsTaxDataTaxInfoCollectionInner.
        :param price_tags: The price_tags of this UserorderdetailsTaxDataTaxInfoCollectionInner.
        :param sku: The sku of this UserorderdetailsTaxDataTaxInfoCollectionInner.
        """
        self.openapi_types = {
            'item_index': int,
            'price_tags': List[UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner],
            'sku': str
        }

        self.attribute_map = {
            'item_index': 'itemIndex',
            'price_tags': 'priceTags',
            'sku': 'sku'
        }

        self._item_index = item_index
        self._price_tags = price_tags
        self._sku = sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserorderdetailsTaxDataTaxInfoCollectionInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Userorderdetails_taxData_taxInfoCollection_inner of this UserorderdetailsTaxDataTaxInfoCollectionInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_index(self):
        """Gets the item_index of this UserorderdetailsTaxDataTaxInfoCollectionInner.

        Item's indexing number.

        :return: The item_index of this UserorderdetailsTaxDataTaxInfoCollectionInner.
        :rtype: int
        """
        return self._item_index

    @item_index.setter
    def item_index(self, item_index):
        """Sets the item_index of this UserorderdetailsTaxDataTaxInfoCollectionInner.

        Item's indexing number.

        :param item_index: The item_index of this UserorderdetailsTaxDataTaxInfoCollectionInner.
        :type item_index: int
        """
        if item_index is None:
            raise ValueError("Invalid value for `item_index`, must not be `None`")

        self._item_index = item_index

    @property
    def price_tags(self):
        """Gets the price_tags of this UserorderdetailsTaxDataTaxInfoCollectionInner.

        Price tag information.

        :return: The price_tags of this UserorderdetailsTaxDataTaxInfoCollectionInner.
        :rtype: List[UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner]
        """
        return self._price_tags

    @price_tags.setter
    def price_tags(self, price_tags):
        """Sets the price_tags of this UserorderdetailsTaxDataTaxInfoCollectionInner.

        Price tag information.

        :param price_tags: The price_tags of this UserorderdetailsTaxDataTaxInfoCollectionInner.
        :type price_tags: List[UserorderdetailsTaxDataTaxInfoCollectionInnerPriceTagsInner]
        """
        if price_tags is None:
            raise ValueError("Invalid value for `price_tags`, must not be `None`")

        self._price_tags = price_tags

    @property
    def sku(self):
        """Gets the sku of this UserorderdetailsTaxDataTaxInfoCollectionInner.

        Alphanumeric sequence that identifies an SKU.

        :return: The sku of this UserorderdetailsTaxDataTaxInfoCollectionInner.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this UserorderdetailsTaxDataTaxInfoCollectionInner.

        Alphanumeric sequence that identifies an SKU.

        :param sku: The sku of this UserorderdetailsTaxDataTaxInfoCollectionInner.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku
