# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.register_change_request_items_added_inner import RegisterChangeRequestItemsAddedInner
from openapi_server.models.register_change_request_items_removed_inner import RegisterChangeRequestItemsRemovedInner
from openapi_server import util


class RegisterChangeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discount_value: int=100, increment_value: int=100, items_added: List[RegisterChangeRequestItemsAddedInner]=None, items_removed: List[RegisterChangeRequestItemsRemovedInner]=None, reason: str='Stock shortage', request_id: str='change-request-0123'):
        """RegisterChangeRequest - a model defined in OpenAPI

        :param discount_value: The discount_value of this RegisterChangeRequest.
        :param increment_value: The increment_value of this RegisterChangeRequest.
        :param items_added: The items_added of this RegisterChangeRequest.
        :param items_removed: The items_removed of this RegisterChangeRequest.
        :param reason: The reason of this RegisterChangeRequest.
        :param request_id: The request_id of this RegisterChangeRequest.
        """
        self.openapi_types = {
            'discount_value': int,
            'increment_value': int,
            'items_added': List[RegisterChangeRequestItemsAddedInner],
            'items_removed': List[RegisterChangeRequestItemsRemovedInner],
            'reason': str,
            'request_id': str
        }

        self.attribute_map = {
            'discount_value': 'discountValue',
            'increment_value': 'incrementValue',
            'items_added': 'itemsAdded',
            'items_removed': 'itemsRemoved',
            'reason': 'reason',
            'request_id': 'requestId'
        }

        self._discount_value = discount_value
        self._increment_value = increment_value
        self._items_added = items_added
        self._items_removed = items_removed
        self._reason = reason
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterChangeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterChangeRequest of this RegisterChangeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discount_value(self):
        """Gets the discount_value of this RegisterChangeRequest.

        This field can be used to apply a discount to the total value of the order. Value in cents.

        :return: The discount_value of this RegisterChangeRequest.
        :rtype: int
        """
        return self._discount_value

    @discount_value.setter
    def discount_value(self, discount_value):
        """Sets the discount_value of this RegisterChangeRequest.

        This field can be used to apply a discount to the total value of the order. Value in cents.

        :param discount_value: The discount_value of this RegisterChangeRequest.
        :type discount_value: int
        """
        if discount_value is None:
            raise ValueError("Invalid value for `discount_value`, must not be `None`")

        self._discount_value = discount_value

    @property
    def increment_value(self):
        """Gets the increment_value of this RegisterChangeRequest.

        This field can be used to increment the total value of the order. Value in cents.

        :return: The increment_value of this RegisterChangeRequest.
        :rtype: int
        """
        return self._increment_value

    @increment_value.setter
    def increment_value(self, increment_value):
        """Sets the increment_value of this RegisterChangeRequest.

        This field can be used to increment the total value of the order. Value in cents.

        :param increment_value: The increment_value of this RegisterChangeRequest.
        :type increment_value: int
        """
        if increment_value is None:
            raise ValueError("Invalid value for `increment_value`, must not be `None`")

        self._increment_value = increment_value

    @property
    def items_added(self):
        """Gets the items_added of this RegisterChangeRequest.

        List of items that should be added to the order.

        :return: The items_added of this RegisterChangeRequest.
        :rtype: List[RegisterChangeRequestItemsAddedInner]
        """
        return self._items_added

    @items_added.setter
    def items_added(self, items_added):
        """Sets the items_added of this RegisterChangeRequest.

        List of items that should be added to the order.

        :param items_added: The items_added of this RegisterChangeRequest.
        :type items_added: List[RegisterChangeRequestItemsAddedInner]
        """

        self._items_added = items_added

    @property
    def items_removed(self):
        """Gets the items_removed of this RegisterChangeRequest.

        List of items that should be removed from the order.

        :return: The items_removed of this RegisterChangeRequest.
        :rtype: List[RegisterChangeRequestItemsRemovedInner]
        """
        return self._items_removed

    @items_removed.setter
    def items_removed(self, items_removed):
        """Sets the items_removed of this RegisterChangeRequest.

        List of items that should be removed from the order.

        :param items_removed: The items_removed of this RegisterChangeRequest.
        :type items_removed: List[RegisterChangeRequestItemsRemovedInner]
        """

        self._items_removed = items_removed

    @property
    def reason(self):
        """Gets the reason of this RegisterChangeRequest.

        Reason for order change. This may be shown to the shopper in the UI or transactional emails.

        :return: The reason of this RegisterChangeRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this RegisterChangeRequest.

        Reason for order change. This may be shown to the shopper in the UI or transactional emails.

        :param reason: The reason of this RegisterChangeRequest.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason

    @property
    def request_id(self):
        """Gets the request_id of this RegisterChangeRequest.

        Request identification of the change. Only the first change made with each `requestId` will be effective on a given order. Use different IDs for different changes to the same order.

        :return: The request_id of this RegisterChangeRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this RegisterChangeRequest.

        Request identification of the change. Only the first change made with each `requestId` will be effective on a given order. Use different IDs for different changes to the same order.

        :param request_id: The request_id of this RegisterChangeRequest.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id
