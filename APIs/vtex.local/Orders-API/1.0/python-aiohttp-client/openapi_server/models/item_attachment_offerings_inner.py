# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemAttachmentOfferingsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, required: bool=None, _schema: object=None):
        """ItemAttachmentOfferingsInner - a model defined in OpenAPI

        :param name: The name of this ItemAttachmentOfferingsInner.
        :param required: The required of this ItemAttachmentOfferingsInner.
        :param _schema: The _schema of this ItemAttachmentOfferingsInner.
        """
        self.openapi_types = {
            'name': str,
            'required': bool,
            '_schema': object
        }

        self.attribute_map = {
            'name': 'name',
            'required': 'required',
            '_schema': 'schema'
        }

        self._name = name
        self._required = required
        self.__schema = _schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemAttachmentOfferingsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item_attachmentOfferings_inner of this ItemAttachmentOfferingsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ItemAttachmentOfferingsInner.

        Name of the attachment.

        :return: The name of this ItemAttachmentOfferingsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItemAttachmentOfferingsInner.

        Name of the attachment.

        :param name: The name of this ItemAttachmentOfferingsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def required(self):
        """Gets the required of this ItemAttachmentOfferingsInner.

        If the attachment is required (`true`) or not (`false`).

        :return: The required of this ItemAttachmentOfferingsInner.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ItemAttachmentOfferingsInner.

        If the attachment is required (`true`) or not (`false`).

        :param required: The required of this ItemAttachmentOfferingsInner.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def _schema(self):
        """Gets the _schema of this ItemAttachmentOfferingsInner.

        Schema of the content declared in the field `attachmentOfferings`.

        :return: The _schema of this ItemAttachmentOfferingsInner.
        :rtype: object
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this ItemAttachmentOfferingsInner.

        Schema of the content declared in the field `attachmentOfferings`.

        :param _schema: The _schema of this ItemAttachmentOfferingsInner.
        :type _schema: object
        """
        if _schema is None:
            raise ValueError("Invalid value for `_schema`, must not be `None`")

        self.__schema = _schema
