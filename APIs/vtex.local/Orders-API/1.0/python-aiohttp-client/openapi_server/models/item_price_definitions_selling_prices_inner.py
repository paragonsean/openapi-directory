# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemPriceDefinitionsSellingPricesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quantity: int=None, value: int=None):
        """ItemPriceDefinitionsSellingPricesInner - a model defined in OpenAPI

        :param quantity: The quantity of this ItemPriceDefinitionsSellingPricesInner.
        :param value: The value of this ItemPriceDefinitionsSellingPricesInner.
        """
        self.openapi_types = {
            'quantity': int,
            'value': int
        }

        self.attribute_map = {
            'quantity': 'quantity',
            'value': 'value'
        }

        self._quantity = quantity
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemPriceDefinitionsSellingPricesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item_priceDefinitions_sellingPrices_inner of this ItemPriceDefinitionsSellingPricesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quantity(self):
        """Gets the quantity of this ItemPriceDefinitionsSellingPricesInner.

        Quantity of items.

        :return: The quantity of this ItemPriceDefinitionsSellingPricesInner.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ItemPriceDefinitionsSellingPricesInner.

        Quantity of items.

        :param quantity: The quantity of this ItemPriceDefinitionsSellingPricesInner.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def value(self):
        """Gets the value of this ItemPriceDefinitionsSellingPricesInner.

        Total value of items in cents.

        :return: The value of this ItemPriceDefinitionsSellingPricesInner.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ItemPriceDefinitionsSellingPricesInner.

        Total value of items in cents.

        :param value: The value of this ItemPriceDefinitionsSellingPricesInner.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
