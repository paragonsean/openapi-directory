# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.changes_attachment import ChangesAttachment
from openapi_server.models.client_profile_data import ClientProfileData
from openapi_server.models.item import Item
from openapi_server.models.marketplace import Marketplace
from openapi_server.models.package_attachment import PackageAttachment
from openapi_server.models.payment_data import PaymentData
from openapi_server.models.rates_and_benefits_data import RatesAndBenefitsData
from openapi_server.models.seller import Seller
from openapi_server.models.shipping_data import ShippingData
from openapi_server.models.store_preferences_data import StorePreferencesData
from openapi_server.models.total import Total
from openapi_server import util


class GetOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affiliate_id: str=None, allow_cancellation: bool=None, allow_edition: bool=None, approved_by: str=None, authorized_date: str=None, call_center_operator_data: str=None, cancel_reason: str=None, cancelled_by: str=None, changes_attachment: ChangesAttachment=None, client_profile_data: ClientProfileData=None, commercial_condition_data: str=None, creation_date: str=None, custom_data: str=None, email_tracked: str=None, follow_up_email: str=None, gift_registry_data: str=None, hostname: str=None, invoice_data: object=None, invoiced_date: str=None, is_checked_in: bool=None, is_completed: bool=None, items: List[Item]=None, last_change: str=None, last_message: str=None, marketing_data: str=None, marketplace: Marketplace=None, marketplace_items: List[str]=None, marketplace_order_id: str=None, marketplace_services_endpoint: str=None, merchant_name: str=None, open_text_field: str=None, order_form_id: str=None, order_group: str=None, order_id: str=None, origin: str=None, package_attachment: PackageAttachment=None, payment_data: PaymentData=None, rates_and_benefits_data: RatesAndBenefitsData=None, rounding_error: int=None, sales_channel: str=None, seller_order_id: str=None, sellers: List[Seller]=None, sequence: str=None, shipping_data: ShippingData=None, status: str=None, status_description: str=None, store_preferences_data: StorePreferencesData=None, totals: List[Total]=None, value: int=None):
        """GetOrder - a model defined in OpenAPI

        :param affiliate_id: The affiliate_id of this GetOrder.
        :param allow_cancellation: The allow_cancellation of this GetOrder.
        :param allow_edition: The allow_edition of this GetOrder.
        :param approved_by: The approved_by of this GetOrder.
        :param authorized_date: The authorized_date of this GetOrder.
        :param call_center_operator_data: The call_center_operator_data of this GetOrder.
        :param cancel_reason: The cancel_reason of this GetOrder.
        :param cancelled_by: The cancelled_by of this GetOrder.
        :param changes_attachment: The changes_attachment of this GetOrder.
        :param client_profile_data: The client_profile_data of this GetOrder.
        :param commercial_condition_data: The commercial_condition_data of this GetOrder.
        :param creation_date: The creation_date of this GetOrder.
        :param custom_data: The custom_data of this GetOrder.
        :param email_tracked: The email_tracked of this GetOrder.
        :param follow_up_email: The follow_up_email of this GetOrder.
        :param gift_registry_data: The gift_registry_data of this GetOrder.
        :param hostname: The hostname of this GetOrder.
        :param invoice_data: The invoice_data of this GetOrder.
        :param invoiced_date: The invoiced_date of this GetOrder.
        :param is_checked_in: The is_checked_in of this GetOrder.
        :param is_completed: The is_completed of this GetOrder.
        :param items: The items of this GetOrder.
        :param last_change: The last_change of this GetOrder.
        :param last_message: The last_message of this GetOrder.
        :param marketing_data: The marketing_data of this GetOrder.
        :param marketplace: The marketplace of this GetOrder.
        :param marketplace_items: The marketplace_items of this GetOrder.
        :param marketplace_order_id: The marketplace_order_id of this GetOrder.
        :param marketplace_services_endpoint: The marketplace_services_endpoint of this GetOrder.
        :param merchant_name: The merchant_name of this GetOrder.
        :param open_text_field: The open_text_field of this GetOrder.
        :param order_form_id: The order_form_id of this GetOrder.
        :param order_group: The order_group of this GetOrder.
        :param order_id: The order_id of this GetOrder.
        :param origin: The origin of this GetOrder.
        :param package_attachment: The package_attachment of this GetOrder.
        :param payment_data: The payment_data of this GetOrder.
        :param rates_and_benefits_data: The rates_and_benefits_data of this GetOrder.
        :param rounding_error: The rounding_error of this GetOrder.
        :param sales_channel: The sales_channel of this GetOrder.
        :param seller_order_id: The seller_order_id of this GetOrder.
        :param sellers: The sellers of this GetOrder.
        :param sequence: The sequence of this GetOrder.
        :param shipping_data: The shipping_data of this GetOrder.
        :param status: The status of this GetOrder.
        :param status_description: The status_description of this GetOrder.
        :param store_preferences_data: The store_preferences_data of this GetOrder.
        :param totals: The totals of this GetOrder.
        :param value: The value of this GetOrder.
        """
        self.openapi_types = {
            'affiliate_id': str,
            'allow_cancellation': bool,
            'allow_edition': bool,
            'approved_by': str,
            'authorized_date': str,
            'call_center_operator_data': str,
            'cancel_reason': str,
            'cancelled_by': str,
            'changes_attachment': ChangesAttachment,
            'client_profile_data': ClientProfileData,
            'commercial_condition_data': str,
            'creation_date': str,
            'custom_data': str,
            'email_tracked': str,
            'follow_up_email': str,
            'gift_registry_data': str,
            'hostname': str,
            'invoice_data': object,
            'invoiced_date': str,
            'is_checked_in': bool,
            'is_completed': bool,
            'items': List[Item],
            'last_change': str,
            'last_message': str,
            'marketing_data': str,
            'marketplace': Marketplace,
            'marketplace_items': List[str],
            'marketplace_order_id': str,
            'marketplace_services_endpoint': str,
            'merchant_name': str,
            'open_text_field': str,
            'order_form_id': str,
            'order_group': str,
            'order_id': str,
            'origin': str,
            'package_attachment': PackageAttachment,
            'payment_data': PaymentData,
            'rates_and_benefits_data': RatesAndBenefitsData,
            'rounding_error': int,
            'sales_channel': str,
            'seller_order_id': str,
            'sellers': List[Seller],
            'sequence': str,
            'shipping_data': ShippingData,
            'status': str,
            'status_description': str,
            'store_preferences_data': StorePreferencesData,
            'totals': List[Total],
            'value': int
        }

        self.attribute_map = {
            'affiliate_id': 'affiliateId',
            'allow_cancellation': 'allowCancellation',
            'allow_edition': 'allowEdition',
            'approved_by': 'approvedBy',
            'authorized_date': 'authorizedDate',
            'call_center_operator_data': 'callCenterOperatorData',
            'cancel_reason': 'cancelReason',
            'cancelled_by': 'cancelledBy',
            'changes_attachment': 'changesAttachment',
            'client_profile_data': 'clientProfileData',
            'commercial_condition_data': 'commercialConditionData',
            'creation_date': 'creationDate',
            'custom_data': 'customData',
            'email_tracked': 'emailTracked',
            'follow_up_email': 'followUpEmail',
            'gift_registry_data': 'giftRegistryData',
            'hostname': 'hostname',
            'invoice_data': 'invoiceData',
            'invoiced_date': 'invoicedDate',
            'is_checked_in': 'isCheckedIn',
            'is_completed': 'isCompleted',
            'items': 'items',
            'last_change': 'lastChange',
            'last_message': 'lastMessage',
            'marketing_data': 'marketingData',
            'marketplace': 'marketplace',
            'marketplace_items': 'marketplaceItems',
            'marketplace_order_id': 'marketplaceOrderId',
            'marketplace_services_endpoint': 'marketplaceServicesEndpoint',
            'merchant_name': 'merchantName',
            'open_text_field': 'openTextField',
            'order_form_id': 'orderFormId',
            'order_group': 'orderGroup',
            'order_id': 'orderId',
            'origin': 'origin',
            'package_attachment': 'packageAttachment',
            'payment_data': 'paymentData',
            'rates_and_benefits_data': 'ratesAndBenefitsData',
            'rounding_error': 'roundingError',
            'sales_channel': 'salesChannel',
            'seller_order_id': 'sellerOrderId',
            'sellers': 'sellers',
            'sequence': 'sequence',
            'shipping_data': 'shippingData',
            'status': 'status',
            'status_description': 'statusDescription',
            'store_preferences_data': 'storePreferencesData',
            'totals': 'totals',
            'value': 'value'
        }

        self._affiliate_id = affiliate_id
        self._allow_cancellation = allow_cancellation
        self._allow_edition = allow_edition
        self._approved_by = approved_by
        self._authorized_date = authorized_date
        self._call_center_operator_data = call_center_operator_data
        self._cancel_reason = cancel_reason
        self._cancelled_by = cancelled_by
        self._changes_attachment = changes_attachment
        self._client_profile_data = client_profile_data
        self._commercial_condition_data = commercial_condition_data
        self._creation_date = creation_date
        self._custom_data = custom_data
        self._email_tracked = email_tracked
        self._follow_up_email = follow_up_email
        self._gift_registry_data = gift_registry_data
        self._hostname = hostname
        self._invoice_data = invoice_data
        self._invoiced_date = invoiced_date
        self._is_checked_in = is_checked_in
        self._is_completed = is_completed
        self._items = items
        self._last_change = last_change
        self._last_message = last_message
        self._marketing_data = marketing_data
        self._marketplace = marketplace
        self._marketplace_items = marketplace_items
        self._marketplace_order_id = marketplace_order_id
        self._marketplace_services_endpoint = marketplace_services_endpoint
        self._merchant_name = merchant_name
        self._open_text_field = open_text_field
        self._order_form_id = order_form_id
        self._order_group = order_group
        self._order_id = order_id
        self._origin = origin
        self._package_attachment = package_attachment
        self._payment_data = payment_data
        self._rates_and_benefits_data = rates_and_benefits_data
        self._rounding_error = rounding_error
        self._sales_channel = sales_channel
        self._seller_order_id = seller_order_id
        self._sellers = sellers
        self._sequence = sequence
        self._shipping_data = shipping_data
        self._status = status
        self._status_description = status_description
        self._store_preferences_data = store_preferences_data
        self._totals = totals
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetOrder of this GetOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affiliate_id(self):
        """Gets the affiliate_id of this GetOrder.


        :return: The affiliate_id of this GetOrder.
        :rtype: str
        """
        return self._affiliate_id

    @affiliate_id.setter
    def affiliate_id(self, affiliate_id):
        """Sets the affiliate_id of this GetOrder.


        :param affiliate_id: The affiliate_id of this GetOrder.
        :type affiliate_id: str
        """
        if affiliate_id is None:
            raise ValueError("Invalid value for `affiliate_id`, must not be `None`")

        self._affiliate_id = affiliate_id

    @property
    def allow_cancellation(self):
        """Gets the allow_cancellation of this GetOrder.


        :return: The allow_cancellation of this GetOrder.
        :rtype: bool
        """
        return self._allow_cancellation

    @allow_cancellation.setter
    def allow_cancellation(self, allow_cancellation):
        """Sets the allow_cancellation of this GetOrder.


        :param allow_cancellation: The allow_cancellation of this GetOrder.
        :type allow_cancellation: bool
        """
        if allow_cancellation is None:
            raise ValueError("Invalid value for `allow_cancellation`, must not be `None`")

        self._allow_cancellation = allow_cancellation

    @property
    def allow_edition(self):
        """Gets the allow_edition of this GetOrder.


        :return: The allow_edition of this GetOrder.
        :rtype: bool
        """
        return self._allow_edition

    @allow_edition.setter
    def allow_edition(self, allow_edition):
        """Sets the allow_edition of this GetOrder.


        :param allow_edition: The allow_edition of this GetOrder.
        :type allow_edition: bool
        """
        if allow_edition is None:
            raise ValueError("Invalid value for `allow_edition`, must not be `None`")

        self._allow_edition = allow_edition

    @property
    def approved_by(self):
        """Gets the approved_by of this GetOrder.


        :return: The approved_by of this GetOrder.
        :rtype: str
        """
        return self._approved_by

    @approved_by.setter
    def approved_by(self, approved_by):
        """Sets the approved_by of this GetOrder.


        :param approved_by: The approved_by of this GetOrder.
        :type approved_by: str
        """
        if approved_by is None:
            raise ValueError("Invalid value for `approved_by`, must not be `None`")

        self._approved_by = approved_by

    @property
    def authorized_date(self):
        """Gets the authorized_date of this GetOrder.


        :return: The authorized_date of this GetOrder.
        :rtype: str
        """
        return self._authorized_date

    @authorized_date.setter
    def authorized_date(self, authorized_date):
        """Sets the authorized_date of this GetOrder.


        :param authorized_date: The authorized_date of this GetOrder.
        :type authorized_date: str
        """
        if authorized_date is None:
            raise ValueError("Invalid value for `authorized_date`, must not be `None`")

        self._authorized_date = authorized_date

    @property
    def call_center_operator_data(self):
        """Gets the call_center_operator_data of this GetOrder.


        :return: The call_center_operator_data of this GetOrder.
        :rtype: str
        """
        return self._call_center_operator_data

    @call_center_operator_data.setter
    def call_center_operator_data(self, call_center_operator_data):
        """Sets the call_center_operator_data of this GetOrder.


        :param call_center_operator_data: The call_center_operator_data of this GetOrder.
        :type call_center_operator_data: str
        """
        if call_center_operator_data is None:
            raise ValueError("Invalid value for `call_center_operator_data`, must not be `None`")

        self._call_center_operator_data = call_center_operator_data

    @property
    def cancel_reason(self):
        """Gets the cancel_reason of this GetOrder.

        Explanation for cancellation

        :return: The cancel_reason of this GetOrder.
        :rtype: str
        """
        return self._cancel_reason

    @cancel_reason.setter
    def cancel_reason(self, cancel_reason):
        """Sets the cancel_reason of this GetOrder.

        Explanation for cancellation

        :param cancel_reason: The cancel_reason of this GetOrder.
        :type cancel_reason: str
        """
        if cancel_reason is None:
            raise ValueError("Invalid value for `cancel_reason`, must not be `None`")

        self._cancel_reason = cancel_reason

    @property
    def cancelled_by(self):
        """Gets the cancelled_by of this GetOrder.

        User that canceled the order.

        :return: The cancelled_by of this GetOrder.
        :rtype: str
        """
        return self._cancelled_by

    @cancelled_by.setter
    def cancelled_by(self, cancelled_by):
        """Sets the cancelled_by of this GetOrder.

        User that canceled the order.

        :param cancelled_by: The cancelled_by of this GetOrder.
        :type cancelled_by: str
        """
        if cancelled_by is None:
            raise ValueError("Invalid value for `cancelled_by`, must not be `None`")

        self._cancelled_by = cancelled_by

    @property
    def changes_attachment(self):
        """Gets the changes_attachment of this GetOrder.


        :return: The changes_attachment of this GetOrder.
        :rtype: ChangesAttachment
        """
        return self._changes_attachment

    @changes_attachment.setter
    def changes_attachment(self, changes_attachment):
        """Sets the changes_attachment of this GetOrder.


        :param changes_attachment: The changes_attachment of this GetOrder.
        :type changes_attachment: ChangesAttachment
        """
        if changes_attachment is None:
            raise ValueError("Invalid value for `changes_attachment`, must not be `None`")

        self._changes_attachment = changes_attachment

    @property
    def client_profile_data(self):
        """Gets the client_profile_data of this GetOrder.


        :return: The client_profile_data of this GetOrder.
        :rtype: ClientProfileData
        """
        return self._client_profile_data

    @client_profile_data.setter
    def client_profile_data(self, client_profile_data):
        """Sets the client_profile_data of this GetOrder.


        :param client_profile_data: The client_profile_data of this GetOrder.
        :type client_profile_data: ClientProfileData
        """
        if client_profile_data is None:
            raise ValueError("Invalid value for `client_profile_data`, must not be `None`")

        self._client_profile_data = client_profile_data

    @property
    def commercial_condition_data(self):
        """Gets the commercial_condition_data of this GetOrder.


        :return: The commercial_condition_data of this GetOrder.
        :rtype: str
        """
        return self._commercial_condition_data

    @commercial_condition_data.setter
    def commercial_condition_data(self, commercial_condition_data):
        """Sets the commercial_condition_data of this GetOrder.


        :param commercial_condition_data: The commercial_condition_data of this GetOrder.
        :type commercial_condition_data: str
        """
        if commercial_condition_data is None:
            raise ValueError("Invalid value for `commercial_condition_data`, must not be `None`")

        self._commercial_condition_data = commercial_condition_data

    @property
    def creation_date(self):
        """Gets the creation_date of this GetOrder.


        :return: The creation_date of this GetOrder.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this GetOrder.


        :param creation_date: The creation_date of this GetOrder.
        :type creation_date: str
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def custom_data(self):
        """Gets the custom_data of this GetOrder.


        :return: The custom_data of this GetOrder.
        :rtype: str
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this GetOrder.


        :param custom_data: The custom_data of this GetOrder.
        :type custom_data: str
        """
        if custom_data is None:
            raise ValueError("Invalid value for `custom_data`, must not be `None`")

        self._custom_data = custom_data

    @property
    def email_tracked(self):
        """Gets the email_tracked of this GetOrder.


        :return: The email_tracked of this GetOrder.
        :rtype: str
        """
        return self._email_tracked

    @email_tracked.setter
    def email_tracked(self, email_tracked):
        """Sets the email_tracked of this GetOrder.


        :param email_tracked: The email_tracked of this GetOrder.
        :type email_tracked: str
        """
        if email_tracked is None:
            raise ValueError("Invalid value for `email_tracked`, must not be `None`")

        self._email_tracked = email_tracked

    @property
    def follow_up_email(self):
        """Gets the follow_up_email of this GetOrder.


        :return: The follow_up_email of this GetOrder.
        :rtype: str
        """
        return self._follow_up_email

    @follow_up_email.setter
    def follow_up_email(self, follow_up_email):
        """Sets the follow_up_email of this GetOrder.


        :param follow_up_email: The follow_up_email of this GetOrder.
        :type follow_up_email: str
        """
        if follow_up_email is None:
            raise ValueError("Invalid value for `follow_up_email`, must not be `None`")

        self._follow_up_email = follow_up_email

    @property
    def gift_registry_data(self):
        """Gets the gift_registry_data of this GetOrder.


        :return: The gift_registry_data of this GetOrder.
        :rtype: str
        """
        return self._gift_registry_data

    @gift_registry_data.setter
    def gift_registry_data(self, gift_registry_data):
        """Sets the gift_registry_data of this GetOrder.


        :param gift_registry_data: The gift_registry_data of this GetOrder.
        :type gift_registry_data: str
        """
        if gift_registry_data is None:
            raise ValueError("Invalid value for `gift_registry_data`, must not be `None`")

        self._gift_registry_data = gift_registry_data

    @property
    def hostname(self):
        """Gets the hostname of this GetOrder.


        :return: The hostname of this GetOrder.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this GetOrder.


        :param hostname: The hostname of this GetOrder.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def invoice_data(self):
        """Gets the invoice_data of this GetOrder.

        Information pertinent to the order's invoice.

        :return: The invoice_data of this GetOrder.
        :rtype: object
        """
        return self._invoice_data

    @invoice_data.setter
    def invoice_data(self, invoice_data):
        """Sets the invoice_data of this GetOrder.

        Information pertinent to the order's invoice.

        :param invoice_data: The invoice_data of this GetOrder.
        :type invoice_data: object
        """
        if invoice_data is None:
            raise ValueError("Invalid value for `invoice_data`, must not be `None`")

        self._invoice_data = invoice_data

    @property
    def invoiced_date(self):
        """Gets the invoiced_date of this GetOrder.


        :return: The invoiced_date of this GetOrder.
        :rtype: str
        """
        return self._invoiced_date

    @invoiced_date.setter
    def invoiced_date(self, invoiced_date):
        """Sets the invoiced_date of this GetOrder.


        :param invoiced_date: The invoiced_date of this GetOrder.
        :type invoiced_date: str
        """
        if invoiced_date is None:
            raise ValueError("Invalid value for `invoiced_date`, must not be `None`")

        self._invoiced_date = invoiced_date

    @property
    def is_checked_in(self):
        """Gets the is_checked_in of this GetOrder.


        :return: The is_checked_in of this GetOrder.
        :rtype: bool
        """
        return self._is_checked_in

    @is_checked_in.setter
    def is_checked_in(self, is_checked_in):
        """Sets the is_checked_in of this GetOrder.


        :param is_checked_in: The is_checked_in of this GetOrder.
        :type is_checked_in: bool
        """
        if is_checked_in is None:
            raise ValueError("Invalid value for `is_checked_in`, must not be `None`")

        self._is_checked_in = is_checked_in

    @property
    def is_completed(self):
        """Gets the is_completed of this GetOrder.


        :return: The is_completed of this GetOrder.
        :rtype: bool
        """
        return self._is_completed

    @is_completed.setter
    def is_completed(self, is_completed):
        """Sets the is_completed of this GetOrder.


        :param is_completed: The is_completed of this GetOrder.
        :type is_completed: bool
        """
        if is_completed is None:
            raise ValueError("Invalid value for `is_completed`, must not be `None`")

        self._is_completed = is_completed

    @property
    def items(self):
        """Gets the items of this GetOrder.

        

        :return: The items of this GetOrder.
        :rtype: List[Item]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this GetOrder.

        

        :param items: The items of this GetOrder.
        :type items: List[Item]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def last_change(self):
        """Gets the last_change of this GetOrder.


        :return: The last_change of this GetOrder.
        :rtype: str
        """
        return self._last_change

    @last_change.setter
    def last_change(self, last_change):
        """Sets the last_change of this GetOrder.


        :param last_change: The last_change of this GetOrder.
        :type last_change: str
        """
        if last_change is None:
            raise ValueError("Invalid value for `last_change`, must not be `None`")

        self._last_change = last_change

    @property
    def last_message(self):
        """Gets the last_message of this GetOrder.


        :return: The last_message of this GetOrder.
        :rtype: str
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this GetOrder.


        :param last_message: The last_message of this GetOrder.
        :type last_message: str
        """
        if last_message is None:
            raise ValueError("Invalid value for `last_message`, must not be `None`")

        self._last_message = last_message

    @property
    def marketing_data(self):
        """Gets the marketing_data of this GetOrder.


        :return: The marketing_data of this GetOrder.
        :rtype: str
        """
        return self._marketing_data

    @marketing_data.setter
    def marketing_data(self, marketing_data):
        """Sets the marketing_data of this GetOrder.


        :param marketing_data: The marketing_data of this GetOrder.
        :type marketing_data: str
        """
        if marketing_data is None:
            raise ValueError("Invalid value for `marketing_data`, must not be `None`")

        self._marketing_data = marketing_data

    @property
    def marketplace(self):
        """Gets the marketplace of this GetOrder.


        :return: The marketplace of this GetOrder.
        :rtype: Marketplace
        """
        return self._marketplace

    @marketplace.setter
    def marketplace(self, marketplace):
        """Sets the marketplace of this GetOrder.


        :param marketplace: The marketplace of this GetOrder.
        :type marketplace: Marketplace
        """
        if marketplace is None:
            raise ValueError("Invalid value for `marketplace`, must not be `None`")

        self._marketplace = marketplace

    @property
    def marketplace_items(self):
        """Gets the marketplace_items of this GetOrder.

        

        :return: The marketplace_items of this GetOrder.
        :rtype: List[str]
        """
        return self._marketplace_items

    @marketplace_items.setter
    def marketplace_items(self, marketplace_items):
        """Sets the marketplace_items of this GetOrder.

        

        :param marketplace_items: The marketplace_items of this GetOrder.
        :type marketplace_items: List[str]
        """
        if marketplace_items is None:
            raise ValueError("Invalid value for `marketplace_items`, must not be `None`")

        self._marketplace_items = marketplace_items

    @property
    def marketplace_order_id(self):
        """Gets the marketplace_order_id of this GetOrder.


        :return: The marketplace_order_id of this GetOrder.
        :rtype: str
        """
        return self._marketplace_order_id

    @marketplace_order_id.setter
    def marketplace_order_id(self, marketplace_order_id):
        """Sets the marketplace_order_id of this GetOrder.


        :param marketplace_order_id: The marketplace_order_id of this GetOrder.
        :type marketplace_order_id: str
        """
        if marketplace_order_id is None:
            raise ValueError("Invalid value for `marketplace_order_id`, must not be `None`")

        self._marketplace_order_id = marketplace_order_id

    @property
    def marketplace_services_endpoint(self):
        """Gets the marketplace_services_endpoint of this GetOrder.


        :return: The marketplace_services_endpoint of this GetOrder.
        :rtype: str
        """
        return self._marketplace_services_endpoint

    @marketplace_services_endpoint.setter
    def marketplace_services_endpoint(self, marketplace_services_endpoint):
        """Sets the marketplace_services_endpoint of this GetOrder.


        :param marketplace_services_endpoint: The marketplace_services_endpoint of this GetOrder.
        :type marketplace_services_endpoint: str
        """
        if marketplace_services_endpoint is None:
            raise ValueError("Invalid value for `marketplace_services_endpoint`, must not be `None`")

        self._marketplace_services_endpoint = marketplace_services_endpoint

    @property
    def merchant_name(self):
        """Gets the merchant_name of this GetOrder.


        :return: The merchant_name of this GetOrder.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this GetOrder.


        :param merchant_name: The merchant_name of this GetOrder.
        :type merchant_name: str
        """
        if merchant_name is None:
            raise ValueError("Invalid value for `merchant_name`, must not be `None`")

        self._merchant_name = merchant_name

    @property
    def open_text_field(self):
        """Gets the open_text_field of this GetOrder.

        This field must be filled in using the following format:   ```  {      \"fieldExample\": \"ValueExample\"    }  ```  

        :return: The open_text_field of this GetOrder.
        :rtype: str
        """
        return self._open_text_field

    @open_text_field.setter
    def open_text_field(self, open_text_field):
        """Sets the open_text_field of this GetOrder.

        This field must be filled in using the following format:   ```  {      \"fieldExample\": \"ValueExample\"    }  ```  

        :param open_text_field: The open_text_field of this GetOrder.
        :type open_text_field: str
        """
        if open_text_field is None:
            raise ValueError("Invalid value for `open_text_field`, must not be `None`")

        self._open_text_field = open_text_field

    @property
    def order_form_id(self):
        """Gets the order_form_id of this GetOrder.


        :return: The order_form_id of this GetOrder.
        :rtype: str
        """
        return self._order_form_id

    @order_form_id.setter
    def order_form_id(self, order_form_id):
        """Sets the order_form_id of this GetOrder.


        :param order_form_id: The order_form_id of this GetOrder.
        :type order_form_id: str
        """
        if order_form_id is None:
            raise ValueError("Invalid value for `order_form_id`, must not be `None`")

        self._order_form_id = order_form_id

    @property
    def order_group(self):
        """Gets the order_group of this GetOrder.


        :return: The order_group of this GetOrder.
        :rtype: str
        """
        return self._order_group

    @order_group.setter
    def order_group(self, order_group):
        """Sets the order_group of this GetOrder.


        :param order_group: The order_group of this GetOrder.
        :type order_group: str
        """
        if order_group is None:
            raise ValueError("Invalid value for `order_group`, must not be `None`")

        self._order_group = order_group

    @property
    def order_id(self):
        """Gets the order_id of this GetOrder.


        :return: The order_id of this GetOrder.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this GetOrder.


        :param order_id: The order_id of this GetOrder.
        :type order_id: str
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")

        self._order_id = order_id

    @property
    def origin(self):
        """Gets the origin of this GetOrder.


        :return: The origin of this GetOrder.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this GetOrder.


        :param origin: The origin of this GetOrder.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")

        self._origin = origin

    @property
    def package_attachment(self):
        """Gets the package_attachment of this GetOrder.


        :return: The package_attachment of this GetOrder.
        :rtype: PackageAttachment
        """
        return self._package_attachment

    @package_attachment.setter
    def package_attachment(self, package_attachment):
        """Sets the package_attachment of this GetOrder.


        :param package_attachment: The package_attachment of this GetOrder.
        :type package_attachment: PackageAttachment
        """
        if package_attachment is None:
            raise ValueError("Invalid value for `package_attachment`, must not be `None`")

        self._package_attachment = package_attachment

    @property
    def payment_data(self):
        """Gets the payment_data of this GetOrder.


        :return: The payment_data of this GetOrder.
        :rtype: PaymentData
        """
        return self._payment_data

    @payment_data.setter
    def payment_data(self, payment_data):
        """Sets the payment_data of this GetOrder.


        :param payment_data: The payment_data of this GetOrder.
        :type payment_data: PaymentData
        """
        if payment_data is None:
            raise ValueError("Invalid value for `payment_data`, must not be `None`")

        self._payment_data = payment_data

    @property
    def rates_and_benefits_data(self):
        """Gets the rates_and_benefits_data of this GetOrder.


        :return: The rates_and_benefits_data of this GetOrder.
        :rtype: RatesAndBenefitsData
        """
        return self._rates_and_benefits_data

    @rates_and_benefits_data.setter
    def rates_and_benefits_data(self, rates_and_benefits_data):
        """Sets the rates_and_benefits_data of this GetOrder.


        :param rates_and_benefits_data: The rates_and_benefits_data of this GetOrder.
        :type rates_and_benefits_data: RatesAndBenefitsData
        """
        if rates_and_benefits_data is None:
            raise ValueError("Invalid value for `rates_and_benefits_data`, must not be `None`")

        self._rates_and_benefits_data = rates_and_benefits_data

    @property
    def rounding_error(self):
        """Gets the rounding_error of this GetOrder.


        :return: The rounding_error of this GetOrder.
        :rtype: int
        """
        return self._rounding_error

    @rounding_error.setter
    def rounding_error(self, rounding_error):
        """Sets the rounding_error of this GetOrder.


        :param rounding_error: The rounding_error of this GetOrder.
        :type rounding_error: int
        """
        if rounding_error is None:
            raise ValueError("Invalid value for `rounding_error`, must not be `None`")

        self._rounding_error = rounding_error

    @property
    def sales_channel(self):
        """Gets the sales_channel of this GetOrder.


        :return: The sales_channel of this GetOrder.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this GetOrder.


        :param sales_channel: The sales_channel of this GetOrder.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel

    @property
    def seller_order_id(self):
        """Gets the seller_order_id of this GetOrder.


        :return: The seller_order_id of this GetOrder.
        :rtype: str
        """
        return self._seller_order_id

    @seller_order_id.setter
    def seller_order_id(self, seller_order_id):
        """Sets the seller_order_id of this GetOrder.


        :param seller_order_id: The seller_order_id of this GetOrder.
        :type seller_order_id: str
        """
        if seller_order_id is None:
            raise ValueError("Invalid value for `seller_order_id`, must not be `None`")

        self._seller_order_id = seller_order_id

    @property
    def sellers(self):
        """Gets the sellers of this GetOrder.

        

        :return: The sellers of this GetOrder.
        :rtype: List[Seller]
        """
        return self._sellers

    @sellers.setter
    def sellers(self, sellers):
        """Sets the sellers of this GetOrder.

        

        :param sellers: The sellers of this GetOrder.
        :type sellers: List[Seller]
        """
        if sellers is None:
            raise ValueError("Invalid value for `sellers`, must not be `None`")

        self._sellers = sellers

    @property
    def sequence(self):
        """Gets the sequence of this GetOrder.


        :return: The sequence of this GetOrder.
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this GetOrder.


        :param sequence: The sequence of this GetOrder.
        :type sequence: str
        """
        if sequence is None:
            raise ValueError("Invalid value for `sequence`, must not be `None`")

        self._sequence = sequence

    @property
    def shipping_data(self):
        """Gets the shipping_data of this GetOrder.


        :return: The shipping_data of this GetOrder.
        :rtype: ShippingData
        """
        return self._shipping_data

    @shipping_data.setter
    def shipping_data(self, shipping_data):
        """Sets the shipping_data of this GetOrder.


        :param shipping_data: The shipping_data of this GetOrder.
        :type shipping_data: ShippingData
        """
        if shipping_data is None:
            raise ValueError("Invalid value for `shipping_data`, must not be `None`")

        self._shipping_data = shipping_data

    @property
    def status(self):
        """Gets the status of this GetOrder.


        :return: The status of this GetOrder.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetOrder.


        :param status: The status of this GetOrder.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_description(self):
        """Gets the status_description of this GetOrder.

        `Deprecated`. Status description which is displayed on the Admin panel. This field is obsolete and may not return any value.

        :return: The status_description of this GetOrder.
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this GetOrder.

        `Deprecated`. Status description which is displayed on the Admin panel. This field is obsolete and may not return any value.

        :param status_description: The status_description of this GetOrder.
        :type status_description: str
        """
        if status_description is None:
            raise ValueError("Invalid value for `status_description`, must not be `None`")

        self._status_description = status_description

    @property
    def store_preferences_data(self):
        """Gets the store_preferences_data of this GetOrder.


        :return: The store_preferences_data of this GetOrder.
        :rtype: StorePreferencesData
        """
        return self._store_preferences_data

    @store_preferences_data.setter
    def store_preferences_data(self, store_preferences_data):
        """Sets the store_preferences_data of this GetOrder.


        :param store_preferences_data: The store_preferences_data of this GetOrder.
        :type store_preferences_data: StorePreferencesData
        """
        if store_preferences_data is None:
            raise ValueError("Invalid value for `store_preferences_data`, must not be `None`")

        self._store_preferences_data = store_preferences_data

    @property
    def totals(self):
        """Gets the totals of this GetOrder.

        

        :return: The totals of this GetOrder.
        :rtype: List[Total]
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """Sets the totals of this GetOrder.

        

        :param totals: The totals of this GetOrder.
        :type totals: List[Total]
        """
        if totals is None:
            raise ValueError("Invalid value for `totals`, must not be `None`")

        self._totals = totals

    @property
    def value(self):
        """Gets the value of this GetOrder.


        :return: The value of this GetOrder.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GetOrder.


        :param value: The value of this GetOrder.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
