# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Item2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, ean: str=None, id: str=None, price: int=None, product_id: str=None, quantity: int=None, ref_id: str=None, seller: str=None, selling_price: int=None):
        """Item2 - a model defined in OpenAPI

        :param description: The description of this Item2.
        :param ean: The ean of this Item2.
        :param id: The id of this Item2.
        :param price: The price of this Item2.
        :param product_id: The product_id of this Item2.
        :param quantity: The quantity of this Item2.
        :param ref_id: The ref_id of this Item2.
        :param seller: The seller of this Item2.
        :param selling_price: The selling_price of this Item2.
        """
        self.openapi_types = {
            'description': str,
            'ean': str,
            'id': str,
            'price': int,
            'product_id': str,
            'quantity': int,
            'ref_id': str,
            'seller': str,
            'selling_price': int
        }

        self.attribute_map = {
            'description': 'description',
            'ean': 'ean',
            'id': 'id',
            'price': 'price',
            'product_id': 'productId',
            'quantity': 'quantity',
            'ref_id': 'refId',
            'seller': 'seller',
            'selling_price': 'sellingPrice'
        }

        self._description = description
        self._ean = ean
        self._id = id
        self._price = price
        self._product_id = product_id
        self._quantity = quantity
        self._ref_id = ref_id
        self._seller = seller
        self._selling_price = selling_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item2 of this Item2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Item2.

        Description of items.

        :return: The description of this Item2.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Item2.

        Description of items.

        :param description: The description of this Item2.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def ean(self):
        """Gets the ean of this Item2.

        EAN of the SKU.

        :return: The ean of this Item2.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this Item2.

        EAN of the SKU.

        :param ean: The ean of this Item2.
        :type ean: str
        """
        if ean is None:
            raise ValueError("Invalid value for `ean`, must not be `None`")

        self._ean = ean

    @property
    def id(self):
        """Gets the id of this Item2.

        Item's SKU ID, which is a unique numerical identifier.

        :return: The id of this Item2.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Item2.

        Item's SKU ID, which is a unique numerical identifier.

        :param id: The id of this Item2.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def price(self):
        """Gets the price of this Item2.

        Item's price.

        :return: The price of this Item2.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Item2.

        Item's price.

        :param price: The price of this Item2.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def product_id(self):
        """Gets the product_id of this Item2.

        ID of the Product associated with the item.

        :return: The product_id of this Item2.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Item2.

        ID of the Product associated with the item.

        :param product_id: The product_id of this Item2.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this Item2.

        Quantity of SKUs.

        :return: The quantity of this Item2.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Item2.

        Quantity of SKUs.

        :param quantity: The quantity of this Item2.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def ref_id(self):
        """Gets the ref_id of this Item2.

        Item's reference ID.

        :return: The ref_id of this Item2.
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this Item2.

        Item's reference ID.

        :param ref_id: The ref_id of this Item2.
        :type ref_id: str
        """
        if ref_id is None:
            raise ValueError("Invalid value for `ref_id`, must not be `None`")

        self._ref_id = ref_id

    @property
    def seller(self):
        """Gets the seller of this Item2.

        Seller related to the order.

        :return: The seller of this Item2.
        :rtype: str
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this Item2.

        Seller related to the order.

        :param seller: The seller of this Item2.
        :type seller: str
        """
        if seller is None:
            raise ValueError("Invalid value for `seller`, must not be `None`")

        self._seller = seller

    @property
    def selling_price(self):
        """Gets the selling_price of this Item2.

        Details on item's selling price.

        :return: The selling_price of this Item2.
        :rtype: int
        """
        return self._selling_price

    @selling_price.setter
    def selling_price(self, selling_price):
        """Sets the selling_price of this Item2.

        Details on item's selling price.

        :param selling_price: The selling_price of this Item2.
        :type selling_price: int
        """
        if selling_price is None:
            raise ValueError("Invalid value for `selling_price`, must not be `None`")

        self._selling_price = selling_price
