# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RatesAndBenefitsData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, rate_and_benefits_identifiers: List[str]=None):
        """RatesAndBenefitsData - a model defined in OpenAPI

        :param id: The id of this RatesAndBenefitsData.
        :param rate_and_benefits_identifiers: The rate_and_benefits_identifiers of this RatesAndBenefitsData.
        """
        self.openapi_types = {
            'id': str,
            'rate_and_benefits_identifiers': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'rate_and_benefits_identifiers': 'rateAndBenefitsIdentifiers'
        }

        self._id = id
        self._rate_and_benefits_identifiers = rate_and_benefits_identifiers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RatesAndBenefitsData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RatesAndBenefitsData of this RatesAndBenefitsData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this RatesAndBenefitsData.

        ID of the rate or benefit.

        :return: The id of this RatesAndBenefitsData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RatesAndBenefitsData.

        ID of the rate or benefit.

        :param id: The id of this RatesAndBenefitsData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def rate_and_benefits_identifiers(self):
        """Gets the rate_and_benefits_identifiers of this RatesAndBenefitsData.

        Information about order's promotions and taxes identifiers.

        :return: The rate_and_benefits_identifiers of this RatesAndBenefitsData.
        :rtype: List[str]
        """
        return self._rate_and_benefits_identifiers

    @rate_and_benefits_identifiers.setter
    def rate_and_benefits_identifiers(self, rate_and_benefits_identifiers):
        """Sets the rate_and_benefits_identifiers of this RatesAndBenefitsData.

        Information about order's promotions and taxes identifiers.

        :param rate_and_benefits_identifiers: The rate_and_benefits_identifiers of this RatesAndBenefitsData.
        :type rate_and_benefits_identifiers: List[str]
        """
        if rate_and_benefits_identifiers is None:
            raise ValueError("Invalid value for `rate_and_benefits_identifiers`, must not be `None`")

        self._rate_and_benefits_identifiers = rate_and_benefits_identifiers
