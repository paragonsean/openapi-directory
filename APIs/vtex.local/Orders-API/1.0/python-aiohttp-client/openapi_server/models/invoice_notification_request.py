# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item1 import Item1
from openapi_server import util


class InvoiceNotificationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, courier: str=None, dispatched_date: str='2019-02-08T13:16:13.4617653+00:00', embedded_invoice: str='''<NFe>
<infNFe Id="NFe34687999999090910270550010000000015180000000000" versao="1.10">
<ide>
<cUF>37</cUF>
<cNF>000005177</cNF>
<natOp>Venda a vista</natOp>
<indPag>0</indPag>
<mod>55</mod>
<serie>1</serie>
<nNF>1</nNF>
<dEmi>2018-07-06</dEmi>
<dSaiEnt>2018-07-06</dSaiEnt>
<tpNF>0</tpNF>
<cMunFG>79950308</cMunFG>
<tpImp>1</tpImp>
<tpEmis>1</tpEmis>
<cDV>3</cDV>
<tpAmb>2</tpAmb>
<finNFe>1</finNFe>
<procEmi>0</procEmi>
<verProc>NF-eletronica.com</verProc>
</ide>
<emit>
<CNPJ>99999090998760</CNPJ>
<xNome>NF-e Associacao NF-e</xNome>
<xFant>NF-e</xFant>
<enderEmit>
<xLgr>Rua Central</xLgr>
<nro>100</nro>
<xCpl>Fundos</xCpl>
<xBairro>Distrito Industrial</xBairro>
<cMun>0000000</cMun>
<xMun>Munic√≠pio</xMun>
<UF>SP</UF>
<CEP>0000000</CEP>
<cPais>1058</cPais>
<xPais>Brasil</xPais>
<fone>1733021717</fone>
</enderEmit>
<IE>123456789012</IE>
</emit>
<dest>
<CNPJ>00000000000000</CNPJ>
<xNome>DISTRIBUIDORA DE AGUAS MINERAIS</xNome>
<enderDest>
<xLgr>AV DAS FONTES</xLgr>
<nro>1777</nro>
<xCpl>1001 ANDAR</xCpl>
<xBairro>PARQUE</xBairro>
<cMun>0000000</cMun>
<xMun>Sao Paulo</xMun>
<UF>SP</UF>
<CEP>00000000</CEP>
<cPais>1058</cPais>
<xPais>BRASIL</xPais>
<fone>3900000000</fone>
</enderDest>
<IE> </IE>
</dest>
<retirada>
<CNPJ>000000000004</CNPJ>
<xLgr>AV PAULISTA</xLgr>
<nro>12345</nro>
<xCpl>TERREO</xCpl>
<xBairro>CERQUEIRA CESAR</xBairro>
<cMun>0000000</cMun>
<xMun>SAO PAULO</xMun>
<UF>SP</UF>
</retirada>
<entrega>
<CNPJ>00000000299000194</CNPJ>
<xLgr>AV FARIA LIMA</xLgr>
<nro>154400</nro>
<xCpl>156 ANDAR</xCpl>
<xBairro>PINHEIROS</xBairro>
<cMun>0000308</cMun>
<xMun>SAO PAULO</xMun>
<UF>SP</UF>
</entrega>
<det nItem="1">
<prod>
<cProd>00001</cProd>
<cEAN/>
<xProd>Agua Mineral</xProd>
<CFOP>5101</CFOP>
<uCom>dz</uCom>
<qCom>1000000.0000</qCom>
<vUnCom>1</vUnCom>
<vProd>10000000.00</vProd>
<cEANTrib/>
<uTrib>und</uTrib>
<qTrib>12000000.0000</qTrib>
<vUnTrib>1</vUnTrib>
</prod>
<imposto>
<ICMS>
<ICMS00>
<orig>0</orig>
<CST>00</CST>
<modBC>0</modBC>
<vBC>10000000.00</vBC>
<pICMS>18.00</pICMS>
<vICMS>1800000.00</vICMS>
</ICMS00>
</ICMS>
<PIS>
<PISAliq>
<CST>01</CST>
<vBC>10000000.00</vBC>
<pPIS>0.65</pPIS>
<vPIS>65000</vPIS>
</PISAliq>
</PIS>
<COFINS>
<COFINSAliq>
<CST>01</CST>
<vBC>10000000.00</vBC>
<pCOFINS>2.00</pCOFINS>
<vCOFINS>200000.00</vCOFINS>
</COFINSAliq>
</COFINS>
</imposto>
</det>
<det nItem="2">
<prod>
<cProd>00002</cProd>
<cEAN/>
<xProd>Agua Mineral</xProd>
<CFOP>5101</CFOP>
<uCom>pack</uCom>
<qCom>5000000.0000</qCom>
<vUnCom>2</vUnCom>
<vProd>10000000.00</vProd>
<cEANTrib/>
<uTrib>und</uTrib>
<qTrib>3000000.0000</qTrib>
<vUnTrib>0.3333</vUnTrib>
</prod>
<imposto>
<ICMS>
<ICMS00>
<orig>0</orig>
<CST>00</CST>
<modBC>0</modBC>
<vBC>10000000.00</vBC>
<pICMS>18.00</pICMS>
<vICMS>1800000.00</vICMS>
</ICMS00>
</ICMS>
<PIS>
<PISAliq>
<CST>01</CST>
<vBC>10000000.00</vBC>
<pPIS>0.65</pPIS>
<vPIS>65000</vPIS>
</PISAliq>
</PIS>
<COFINS>
<COFINSAliq>
<CST>01</CST>
<vBC>10000000.00</vBC>
<pCOFINS>2.00</pCOFINS>
<vCOFINS>200000.00</vCOFINS>
</COFINSAliq>
</COFINS>
</imposto>
</det>
<total>
<ICMSTot>
<vBC>20000000.00</vBC>
<vICMS>18.00</vICMS>
<vBCST>0</vBCST>
<vST>0</vST>
<vProd>20000000.00</vProd>
<vFrete>0</vFrete>
<vSeg>0</vSeg>
<vDesc>0</vDesc>
<vII>0</vII>
<vIPI>0</vIPI>
<vPIS>130000.00</vPIS>
<vCOFINS>400000.00</vCOFINS>
<vOutro>0</vOutro>
<vNF>20000000.00</vNF>
</ICMSTot>
</total>
<transp>
<modFrete>0</modFrete>
<transporta>
<CNPJ>00000000000000</CNPJ>
<xNome>Distribuidora de Bebidas Fazenda de SP Ltda.</xNome>
<IE>00000000999119</IE>
<xEnder>Rua Central 100 - Fundos - Distrito Industrial</xEnder>
<xMun>SAO PAULO</xMun>
<UF>SP</UF>
</transporta>
<veicTransp>
<placa>BXI1717</placa>
<UF>SP</UF>
<RNTC>123456789</RNTC>
</veicTransp>
<reboque>
<placa>UUU0000</placa>
<UF>SP</UF>
<RNTC>123456789</RNTC>
</reboque>
<vol>
<qVol>10000</qVol>
<esp>CAIXA</esp>
<marca>LINDOYA</marca>
<nVol>500</nVol>
<pesoL>1000000000.000</pesoL>
<pesoB>1200000000.000</pesoB>
<lacres>
<nLacre>XYZ10231486</nLacre>
</lacres>
</vol>
</transp>
<infAdic>
<infAdFisco>Nota Fiscal de exemplo NF-eletronica.com</infAdFisco>
</infAdic>
</infNFe>
<Signature>
<SignedInfo>
<CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-0321120010315"/>
<SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<Reference URI="#NFe3508059999977777777705500100000000000000000">
<Transforms>
<Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-66666615"/>
</Transforms>
<DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<DigestValue>xFzhgdgnhjSD1e9uqe04lnoHT4ZzLSY=</DigestValue>
</Reference>
</SignedInfo>
<SignatureValue>
Iz5Z3PLQbzZt9jnBtr6xsmHZMOu/3plXG9xxfFjRCQYGnD1rjlhzBGrqt026Ca2VHHM/bHNepi6FuFkAi595GScKVuHREUotzifE2OIjgavvTOrMwbXG7+0LYgkwPFiPCao2S33UpZe7MneaxcmKQGKQZw1fP8fsWmaQ4cczZT8=
</SignatureValue>
<KeyInfo>
<X509Data>
<X509Certificate>
MIIEuzCCA6OgAwIBAgIDMTMxMA0GasfFSDAGQUAMIGSMQswCQYDVQQGEwJCUjELMAkGA1UECBMCUlMxFTATBgNVBAcTDFBvcnRvIEFsZWdyZTEdMBsGA1UEChMUVGVzdGUgUHJvamV0byBORmUgUlMxHTAbBgNVBAsTFFRlc3RlIFByb2pldG8gTkZlIFJTMSEwHwYDVQQDExhORmUgLSBBQyBJbnRlcm1lZGlhcmlhIDEwHhcNMDgwNDI4MDkwMTAyWhcNMDkwNDMwMjM1OTU5WjCBnjELMAkGA1UECBMCUlMxHTAfvw4567DRhg76FByb2pldG8gTkZlIFJTMR0wGwYDVQQKExRUZXN0ZSBQcm9qZXRvIE5GZSBSUzEVMBMGA1UEBxMMUE9SVE8gQUxFR1JFMQswCQYDVQQGEwJCUjEtMCsGA1UEAxMkTkZlIC0gQXNzb2NpYWNhbyBORi1lOjk5OTk5MDkwOTEwMjcwMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDh6RRv0bj4RYX+tDQrZRb5opa77LBVVs+6LphIfSF3TSWPfnKh0+xLlBFdmnB5YGgbbW9Uon6pZQTfaC8jZhRhI5eFRRofY/Ugoeo0NGt6PcIQNZQd6lLQ/ASd1qWwjqJoEa7udriKjy3h351Mf1bng1VxS1urqC3Dn39ZWIEwQIDAQABo4IBjjCCAYowIgYDVR0jAQEABBgwFoAUPT5TqhNWAm+ZpcVsvB7malDBjEQwDwYDVR0TAQH/BAUwAwEBADAPBgNVHQ8BAf8EBQMDAOAAMAwGA1UdIAEBAAQCMAAwgbwGA1UdEQEBAASBsTCBrqA4BgVgTAEDBKAvBC0wNzA4MTk1MTE1MTk0NTMxMDg3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgHQYFYEwBAwKgFAQSRmVybmFuZG8gQ2FudG8gQWx0oBkGBWBMAQMDoBAEDjk5OTk5MDkwOTEwMjcwoBcGBWBMAQMHoA4EDDAwMDAwMDAwMDAwMIEfZmVybmFuZG8tYWx0QHByb2NlcmdzLnJzLmdvdi5icjAgBgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwQwUwYDVR0fAQEABEkwRzBFoEOgQYY/aHR0cDovL25mZWNlcnRpZmljYWRvLnNlZmF6LnJzLmdvdi5ici9MQ1IvQUNJbnRlcm1lZGlhcmlhMzguY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCNPpaZ3Byu3/70nObXE8NiM53j1ddIFXsb+v2ghCVd4ffExv3hYc+/a3lfgV8H/WfQsdSCTzS2cHrd4Aasr/eXfclVDmf2hcWz+R7iysOHuT6B6r+DvV3JcMdJJCDdynR5REa+zViMnVZo1G3KuceQ7/y5X3WFNVq4kwHvonJ9oExsWyw8rTwUK5bsjz0A2yEwXkmkJIngnF41sP31+9jCImiqkXcmsesFhxzX7iurAQAQCZOm7iwMWxQKcAjXCZrgSZWRQy6mU224sX3HTArHahmLJ9Iw+WYAua5qBJsiN6PC7v5tfhdsgGD46DHMnOecxvkkPolDUyBa7d7xwgm
</X509Certificate>
</X509Data>
</KeyInfo>
</Signature>
</NFe>''', invoice_key: str=None, invoice_number: str=None, invoice_url: str=None, invoice_value: str='2499', issuance_date: str=None, items: List[Item1]=None, tracking_number: str=None, tracking_url: str=None, type: str=None):
        """InvoiceNotificationRequest - a model defined in OpenAPI

        :param courier: The courier of this InvoiceNotificationRequest.
        :param dispatched_date: The dispatched_date of this InvoiceNotificationRequest.
        :param embedded_invoice: The embedded_invoice of this InvoiceNotificationRequest.
        :param invoice_key: The invoice_key of this InvoiceNotificationRequest.
        :param invoice_number: The invoice_number of this InvoiceNotificationRequest.
        :param invoice_url: The invoice_url of this InvoiceNotificationRequest.
        :param invoice_value: The invoice_value of this InvoiceNotificationRequest.
        :param issuance_date: The issuance_date of this InvoiceNotificationRequest.
        :param items: The items of this InvoiceNotificationRequest.
        :param tracking_number: The tracking_number of this InvoiceNotificationRequest.
        :param tracking_url: The tracking_url of this InvoiceNotificationRequest.
        :param type: The type of this InvoiceNotificationRequest.
        """
        self.openapi_types = {
            'courier': str,
            'dispatched_date': str,
            'embedded_invoice': str,
            'invoice_key': str,
            'invoice_number': str,
            'invoice_url': str,
            'invoice_value': str,
            'issuance_date': str,
            'items': List[Item1],
            'tracking_number': str,
            'tracking_url': str,
            'type': str
        }

        self.attribute_map = {
            'courier': 'courier',
            'dispatched_date': 'dispatchedDate',
            'embedded_invoice': 'embeddedInvoice',
            'invoice_key': 'invoiceKey',
            'invoice_number': 'invoiceNumber',
            'invoice_url': 'invoiceUrl',
            'invoice_value': 'invoiceValue',
            'issuance_date': 'issuanceDate',
            'items': 'items',
            'tracking_number': 'trackingNumber',
            'tracking_url': 'trackingUrl',
            'type': 'type'
        }

        self._courier = courier
        self._dispatched_date = dispatched_date
        self._embedded_invoice = embedded_invoice
        self._invoice_key = invoice_key
        self._invoice_number = invoice_number
        self._invoice_url = invoice_url
        self._invoice_value = invoice_value
        self._issuance_date = issuance_date
        self._items = items
        self._tracking_number = tracking_number
        self._tracking_url = tracking_url
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceNotificationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceNotificationRequest of this InvoiceNotificationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def courier(self):
        """Gets the courier of this InvoiceNotificationRequest.

        The name of the carrier responsible for delivering the order. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).*

        :return: The courier of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._courier

    @courier.setter
    def courier(self, courier):
        """Sets the courier of this InvoiceNotificationRequest.

        The name of the carrier responsible for delivering the order. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).*

        :param courier: The courier of this InvoiceNotificationRequest.
        :type courier: str
        """

        self._courier = courier

    @property
    def dispatched_date(self):
        """Gets the dispatched_date of this InvoiceNotificationRequest.

        Order dispatch date. May be `null`.

        :return: The dispatched_date of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._dispatched_date

    @dispatched_date.setter
    def dispatched_date(self, dispatched_date):
        """Sets the dispatched_date of this InvoiceNotificationRequest.

        Order dispatch date. May be `null`.

        :param dispatched_date: The dispatched_date of this InvoiceNotificationRequest.
        :type dispatched_date: str
        """

        self._dispatched_date = dispatched_date

    @property
    def embedded_invoice(self):
        """Gets the embedded_invoice of this InvoiceNotificationRequest.

        XML text of the invoice, not the URL. This field is very important for external marketplace integrations such as Mercado Libre.

        :return: The embedded_invoice of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._embedded_invoice

    @embedded_invoice.setter
    def embedded_invoice(self, embedded_invoice):
        """Sets the embedded_invoice of this InvoiceNotificationRequest.

        XML text of the invoice, not the URL. This field is very important for external marketplace integrations such as Mercado Libre.

        :param embedded_invoice: The embedded_invoice of this InvoiceNotificationRequest.
        :type embedded_invoice: str
        """

        self._embedded_invoice = embedded_invoice

    @property
    def invoice_key(self):
        """Gets the invoice_key of this InvoiceNotificationRequest.

        

        :return: The invoice_key of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._invoice_key

    @invoice_key.setter
    def invoice_key(self, invoice_key):
        """Sets the invoice_key of this InvoiceNotificationRequest.

        

        :param invoice_key: The invoice_key of this InvoiceNotificationRequest.
        :type invoice_key: str
        """

        self._invoice_key = invoice_key

    @property
    def invoice_number(self):
        """Gets the invoice_number of this InvoiceNotificationRequest.

        Number that identifies the invoice.

        :return: The invoice_number of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this InvoiceNotificationRequest.

        Number that identifies the invoice.

        :param invoice_number: The invoice_number of this InvoiceNotificationRequest.
        :type invoice_number: str
        """
        if invoice_number is None:
            raise ValueError("Invalid value for `invoice_number`, must not be `None`")

        self._invoice_number = invoice_number

    @property
    def invoice_url(self):
        """Gets the invoice_url of this InvoiceNotificationRequest.

        URL of the invoice. Can be used to send the URL of an XML file, for example, which is useful for some integrations.

        :return: The invoice_url of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._invoice_url

    @invoice_url.setter
    def invoice_url(self, invoice_url):
        """Sets the invoice_url of this InvoiceNotificationRequest.

        URL of the invoice. Can be used to send the URL of an XML file, for example, which is useful for some integrations.

        :param invoice_url: The invoice_url of this InvoiceNotificationRequest.
        :type invoice_url: str
        """

        self._invoice_url = invoice_url

    @property
    def invoice_value(self):
        """Gets the invoice_value of this InvoiceNotificationRequest.

        Total amount being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.

        :return: The invoice_value of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._invoice_value

    @invoice_value.setter
    def invoice_value(self, invoice_value):
        """Sets the invoice_value of this InvoiceNotificationRequest.

        Total amount being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.

        :param invoice_value: The invoice_value of this InvoiceNotificationRequest.
        :type invoice_value: str
        """
        if invoice_value is None:
            raise ValueError("Invalid value for `invoice_value`, must not be `None`")

        self._invoice_value = invoice_value

    @property
    def issuance_date(self):
        """Gets the issuance_date of this InvoiceNotificationRequest.

        Issuance date of the invoice. You must add date and time in this field.

        :return: The issuance_date of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._issuance_date

    @issuance_date.setter
    def issuance_date(self, issuance_date):
        """Sets the issuance_date of this InvoiceNotificationRequest.

        Issuance date of the invoice. You must add date and time in this field.

        :param issuance_date: The issuance_date of this InvoiceNotificationRequest.
        :type issuance_date: str
        """
        if issuance_date is None:
            raise ValueError("Invalid value for `issuance_date`, must not be `None`")

        self._issuance_date = issuance_date

    @property
    def items(self):
        """Gets the items of this InvoiceNotificationRequest.

        Array containing the SKUs that are being invoiced.

        :return: The items of this InvoiceNotificationRequest.
        :rtype: List[Item1]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this InvoiceNotificationRequest.

        Array containing the SKUs that are being invoiced.

        :param items: The items of this InvoiceNotificationRequest.
        :type items: List[Item1]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def tracking_number(self):
        """Gets the tracking_number of this InvoiceNotificationRequest.

        The number code that identifies the order tracking. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).*

        :return: The tracking_number of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this InvoiceNotificationRequest.

        The number code that identifies the order tracking. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).*

        :param tracking_number: The tracking_number of this InvoiceNotificationRequest.
        :type tracking_number: str
        """

        self._tracking_number = tracking_number

    @property
    def tracking_url(self):
        """Gets the tracking_url of this InvoiceNotificationRequest.

        The URL used to track the order. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).*

        :return: The tracking_url of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._tracking_url

    @tracking_url.setter
    def tracking_url(self, tracking_url):
        """Sets the tracking_url of this InvoiceNotificationRequest.

        The URL used to track the order. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`\"\"`).*

        :param tracking_url: The tracking_url of this InvoiceNotificationRequest.
        :type tracking_url: str
        """

        self._tracking_url = tracking_url

    @property
    def type(self):
        """Gets the type of this InvoiceNotificationRequest.

        The type of invoice. There are two possible values: **Output** and **Input**. The Output type should be used when the invoice you are sending is a selling invoice. The Input type should be used when you send a return invoice.

        :return: The type of this InvoiceNotificationRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InvoiceNotificationRequest.

        The type of invoice. There are two possible values: **Output** and **Input**. The Output type should be used when the invoice you are sending is a selling invoice. The Input type should be used when you send a return invoice.

        :param type: The type of this InvoiceNotificationRequest.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
