# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.userorderdetails_subscription_data_subscriptions_inner import UserorderdetailsSubscriptionDataSubscriptionsInner
from openapi_server import util


class UserorderdetailsSubscriptionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription_group_id: str=None, subscriptions: List[UserorderdetailsSubscriptionDataSubscriptionsInner]=None):
        """UserorderdetailsSubscriptionData - a model defined in OpenAPI

        :param subscription_group_id: The subscription_group_id of this UserorderdetailsSubscriptionData.
        :param subscriptions: The subscriptions of this UserorderdetailsSubscriptionData.
        """
        self.openapi_types = {
            'subscription_group_id': str,
            'subscriptions': List[UserorderdetailsSubscriptionDataSubscriptionsInner]
        }

        self.attribute_map = {
            'subscription_group_id': 'SubscriptionGroupId',
            'subscriptions': 'Subscriptions'
        }

        self._subscription_group_id = subscription_group_id
        self._subscriptions = subscriptions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserorderdetailsSubscriptionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Userorderdetails_subscriptionData of this UserorderdetailsSubscriptionData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription_group_id(self):
        """Gets the subscription_group_id of this UserorderdetailsSubscriptionData.

        ID of the subscription's group. If this field returns `null` and the `executionCount` is `0`, the order is the first one with subscriptions.

        :return: The subscription_group_id of this UserorderdetailsSubscriptionData.
        :rtype: str
        """
        return self._subscription_group_id

    @subscription_group_id.setter
    def subscription_group_id(self, subscription_group_id):
        """Sets the subscription_group_id of this UserorderdetailsSubscriptionData.

        ID of the subscription's group. If this field returns `null` and the `executionCount` is `0`, the order is the first one with subscriptions.

        :param subscription_group_id: The subscription_group_id of this UserorderdetailsSubscriptionData.
        :type subscription_group_id: str
        """
        if subscription_group_id is None:
            raise ValueError("Invalid value for `subscription_group_id`, must not be `None`")

        self._subscription_group_id = subscription_group_id

    @property
    def subscriptions(self):
        """Gets the subscriptions of this UserorderdetailsSubscriptionData.

        List with subscriptions and their details.

        :return: The subscriptions of this UserorderdetailsSubscriptionData.
        :rtype: List[UserorderdetailsSubscriptionDataSubscriptionsInner]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this UserorderdetailsSubscriptionData.

        List with subscriptions and their details.

        :param subscriptions: The subscriptions of this UserorderdetailsSubscriptionData.
        :type subscriptions: List[UserorderdetailsSubscriptionDataSubscriptionsInner]
        """
        if subscriptions is None:
            raise ValueError("Invalid value for `subscriptions`, must not be `None`")

        self._subscriptions = subscriptions
