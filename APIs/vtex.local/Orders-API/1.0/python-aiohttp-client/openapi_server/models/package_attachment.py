# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PackageAttachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, packages: List[str]=None):
        """PackageAttachment - a model defined in OpenAPI

        :param packages: The packages of this PackageAttachment.
        """
        self.openapi_types = {
            'packages': List[str]
        }

        self.attribute_map = {
            'packages': 'packages'
        }

        self._packages = packages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageAttachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageAttachment of this PackageAttachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def packages(self):
        """Gets the packages of this PackageAttachment.

        Packages details.

        :return: The packages of this PackageAttachment.
        :rtype: List[str]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this PackageAttachment.

        Packages details.

        :param packages: The packages of this PackageAttachment.
        :type packages: List[str]
        """
        if packages is None:
            raise ValueError("Invalid value for `packages`, must not be `None`")

        self._packages = packages
