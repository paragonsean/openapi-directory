# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentConnectorResponses(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, return_code: str=None, tid: str=None, auth_id: str=None):
        """PaymentConnectorResponses - a model defined in OpenAPI

        :param message: The message of this PaymentConnectorResponses.
        :param return_code: The return_code of this PaymentConnectorResponses.
        :param tid: The tid of this PaymentConnectorResponses.
        :param auth_id: The auth_id of this PaymentConnectorResponses.
        """
        self.openapi_types = {
            'message': str,
            'return_code': str,
            'tid': str,
            'auth_id': str
        }

        self.attribute_map = {
            'message': 'Message',
            'return_code': 'ReturnCode',
            'tid': 'Tid',
            'auth_id': 'authId'
        }

        self._message = message
        self._return_code = return_code
        self._tid = tid
        self._auth_id = auth_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentConnectorResponses':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payment_connectorResponses of this PaymentConnectorResponses.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this PaymentConnectorResponses.

        Provider's operation/error message to be logged.

        :return: The message of this PaymentConnectorResponses.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PaymentConnectorResponses.

        Provider's operation/error message to be logged.

        :param message: The message of this PaymentConnectorResponses.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def return_code(self):
        """Gets the return_code of this PaymentConnectorResponses.

        Provider's operation/error code to be logged.

        :return: The return_code of this PaymentConnectorResponses.
        :rtype: str
        """
        return self._return_code

    @return_code.setter
    def return_code(self, return_code):
        """Sets the return_code of this PaymentConnectorResponses.

        Provider's operation/error code to be logged.

        :param return_code: The return_code of this PaymentConnectorResponses.
        :type return_code: str
        """
        if return_code is None:
            raise ValueError("Invalid value for `return_code`, must not be `None`")

        self._return_code = return_code

    @property
    def tid(self):
        """Gets the tid of this PaymentConnectorResponses.

        Provider's unique identifier for the transaction.

        :return: The tid of this PaymentConnectorResponses.
        :rtype: str
        """
        return self._tid

    @tid.setter
    def tid(self, tid):
        """Sets the tid of this PaymentConnectorResponses.

        Provider's unique identifier for the transaction.

        :param tid: The tid of this PaymentConnectorResponses.
        :type tid: str
        """
        if tid is None:
            raise ValueError("Invalid value for `tid`, must not be `None`")

        self._tid = tid

    @property
    def auth_id(self):
        """Gets the auth_id of this PaymentConnectorResponses.

        Connector's authorization ID.

        :return: The auth_id of this PaymentConnectorResponses.
        :rtype: str
        """
        return self._auth_id

    @auth_id.setter
    def auth_id(self, auth_id):
        """Sets the auth_id of this PaymentConnectorResponses.

        Connector's authorization ID.

        :param auth_id: The auth_id of this PaymentConnectorResponses.
        :type auth_id: str
        """
        if auth_id is None:
            raise ValueError("Invalid value for `auth_id`, must not be `None`")

        self._auth_id = auth_id
