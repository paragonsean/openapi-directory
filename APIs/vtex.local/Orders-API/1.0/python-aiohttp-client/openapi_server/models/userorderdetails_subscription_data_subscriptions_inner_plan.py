# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.userorderdetails_subscription_data_subscriptions_inner_plan_frequency import UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency
from openapi_server.models.userorderdetails_subscription_data_subscriptions_inner_plan_validity import UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity
from openapi_server import util


class UserorderdetailsSubscriptionDataSubscriptionsInnerPlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency: UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency=None, type: str=None, validity: UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity=None):
        """UserorderdetailsSubscriptionDataSubscriptionsInnerPlan - a model defined in OpenAPI

        :param frequency: The frequency of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.
        :param type: The type of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.
        :param validity: The validity of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.
        """
        self.openapi_types = {
            'frequency': UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency,
            'type': str,
            'validity': UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity
        }

        self.attribute_map = {
            'frequency': 'frequency',
            'type': 'type',
            'validity': 'validity'
        }

        self._frequency = frequency
        self._type = type
        self._validity = validity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserorderdetailsSubscriptionDataSubscriptionsInnerPlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Userorderdetails_subscriptionData_Subscriptions_inner_Plan of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency(self):
        """Gets the frequency of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.


        :return: The frequency of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.
        :rtype: UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.


        :param frequency: The frequency of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.
        :type frequency: UserorderdetailsSubscriptionDataSubscriptionsInnerPlanFrequency
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency

    @property
    def type(self):
        """Gets the type of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.

        Type of plan.

        :return: The type of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.

        Type of plan.

        :param type: The type of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def validity(self):
        """Gets the validity of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.


        :return: The validity of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.
        :rtype: UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.


        :param validity: The validity of this UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.
        :type validity: UserorderdetailsSubscriptionDataSubscriptionsInnerPlanValidity
        """
        if validity is None:
            raise ValueError("Invalid value for `validity`, must not be `None`")

        self._validity = validity
