# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HookFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_single_fire: bool=False, expression: str=None, status: List[str]=None, type: str='FromWorkflow'):
        """HookFilter - a model defined in OpenAPI

        :param disable_single_fire: The disable_single_fire of this HookFilter.
        :param expression: The expression of this HookFilter.
        :param status: The status of this HookFilter.
        :param type: The type of this HookFilter.
        """
        self.openapi_types = {
            'disable_single_fire': bool,
            'expression': str,
            'status': List[str],
            'type': str
        }

        self.attribute_map = {
            'disable_single_fire': 'disableSingleFire',
            'expression': 'expression',
            'status': 'status',
            'type': 'type'
        }

        self._disable_single_fire = disable_single_fire
        self._expression = expression
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HookFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HookFilter of this HookFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_single_fire(self):
        """Gets the disable_single_fire of this HookFilter.

        Sets a limit to how many times a specific order shows on the hook, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the hook only once. Send this field if you want to filter `FromOrders`.

        :return: The disable_single_fire of this HookFilter.
        :rtype: bool
        """
        return self._disable_single_fire

    @disable_single_fire.setter
    def disable_single_fire(self, disable_single_fire):
        """Sets the disable_single_fire of this HookFilter.

        Sets a limit to how many times a specific order shows on the hook, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the hook only once. Send this field if you want to filter `FromOrders`.

        :param disable_single_fire: The disable_single_fire of this HookFilter.
        :type disable_single_fire: bool
        """

        self._disable_single_fire = disable_single_fire

    @property
    def expression(self):
        """Gets the expression of this HookFilter.

        JSONata query expression that defines what conditions must be met for an order to be included in the hook. This should only be used in case `type` is `FromOrders`.

        :return: The expression of this HookFilter.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this HookFilter.

        JSONata query expression that defines what conditions must be met for an order to be included in the hook. This should only be used in case `type` is `FromOrders`.

        :param expression: The expression of this HookFilter.
        :type expression: str
        """

        self._expression = expression

    @property
    def status(self):
        """Gets the status of this HookFilter.

        List of order statuses that should be included in the hook. This should only be used in case `type` is `FromWorkflow`.

        :return: The status of this HookFilter.
        :rtype: List[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HookFilter.

        List of order statuses that should be included in the hook. This should only be used in case `type` is `FromWorkflow`.

        :param status: The status of this HookFilter.
        :type status: List[str]
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this HookFilter.

        Determines what orders appear in the hook and how they are filtered. As shown in the examples above, there are two ways:     - `FromWorkflow`: the hook will receive order updates only when there is a change or update in the [order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196). You must send at least one value for the `status` field to determine by which status the orders will be filtered.     - `FromOrders`: the hook will receive order updates when there is a change in the order. In this case, orders can be filtered by any property, according to JSONata expressions passed in the `expression` field. You must send the request with values for the `expression` and `disableSingleFire` fields.

        :return: The type of this HookFilter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HookFilter.

        Determines what orders appear in the hook and how they are filtered. As shown in the examples above, there are two ways:     - `FromWorkflow`: the hook will receive order updates only when there is a change or update in the [order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196). You must send at least one value for the `status` field to determine by which status the orders will be filtered.     - `FromOrders`: the hook will receive order updates when there is a change in the order. In this case, orders can be filtered by any property, according to JSONata expressions passed in the `expression` field. You must send the request with values for the `expression` and `disableSingleFire` fields.

        :param type: The type of this HookFilter.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
