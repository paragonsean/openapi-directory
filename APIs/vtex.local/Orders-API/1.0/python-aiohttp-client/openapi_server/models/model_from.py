# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelFrom(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias_mask_type: int=None, conversation_related_to: str=None, conversation_subject: str=None, email: str=None, email_alias: str=None, name: str=None, role: str=None):
        """ModelFrom - a model defined in OpenAPI

        :param alias_mask_type: The alias_mask_type of this ModelFrom.
        :param conversation_related_to: The conversation_related_to of this ModelFrom.
        :param conversation_subject: The conversation_subject of this ModelFrom.
        :param email: The email of this ModelFrom.
        :param email_alias: The email_alias of this ModelFrom.
        :param name: The name of this ModelFrom.
        :param role: The role of this ModelFrom.
        """
        self.openapi_types = {
            'alias_mask_type': int,
            'conversation_related_to': str,
            'conversation_subject': str,
            'email': str,
            'email_alias': str,
            'name': str,
            'role': str
        }

        self.attribute_map = {
            'alias_mask_type': 'aliasMaskType',
            'conversation_related_to': 'conversationRelatedTo',
            'conversation_subject': 'conversationSubject',
            'email': 'email',
            'email_alias': 'emailAlias',
            'name': 'name',
            'role': 'role'
        }

        self._alias_mask_type = alias_mask_type
        self._conversation_related_to = conversation_related_to
        self._conversation_subject = conversation_subject
        self._email = email
        self._email_alias = email_alias
        self._name = name
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelFrom':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The From of this ModelFrom.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias_mask_type(self):
        """Gets the alias_mask_type of this ModelFrom.

        Conversation tracker mask type.

        :return: The alias_mask_type of this ModelFrom.
        :rtype: int
        """
        return self._alias_mask_type

    @alias_mask_type.setter
    def alias_mask_type(self, alias_mask_type):
        """Sets the alias_mask_type of this ModelFrom.

        Conversation tracker mask type.

        :param alias_mask_type: The alias_mask_type of this ModelFrom.
        :type alias_mask_type: int
        """
        if alias_mask_type is None:
            raise ValueError("Invalid value for `alias_mask_type`, must not be `None`")

        self._alias_mask_type = alias_mask_type

    @property
    def conversation_related_to(self):
        """Gets the conversation_related_to of this ModelFrom.

        Related order ID.

        :return: The conversation_related_to of this ModelFrom.
        :rtype: str
        """
        return self._conversation_related_to

    @conversation_related_to.setter
    def conversation_related_to(self, conversation_related_to):
        """Sets the conversation_related_to of this ModelFrom.

        Related order ID.

        :param conversation_related_to: The conversation_related_to of this ModelFrom.
        :type conversation_related_to: str
        """
        if conversation_related_to is None:
            raise ValueError("Invalid value for `conversation_related_to`, must not be `None`")

        self._conversation_related_to = conversation_related_to

    @property
    def conversation_subject(self):
        """Gets the conversation_subject of this ModelFrom.

        Conversation subject.

        :return: The conversation_subject of this ModelFrom.
        :rtype: str
        """
        return self._conversation_subject

    @conversation_subject.setter
    def conversation_subject(self, conversation_subject):
        """Sets the conversation_subject of this ModelFrom.

        Conversation subject.

        :param conversation_subject: The conversation_subject of this ModelFrom.
        :type conversation_subject: str
        """
        if conversation_subject is None:
            raise ValueError("Invalid value for `conversation_subject`, must not be `None`")

        self._conversation_subject = conversation_subject

    @property
    def email(self):
        """Gets the email of this ModelFrom.

        Sender's email.

        :return: The email of this ModelFrom.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ModelFrom.

        Sender's email.

        :param email: The email of this ModelFrom.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def email_alias(self):
        """Gets the email_alias of this ModelFrom.

        Sender transactional tracker email.

        :return: The email_alias of this ModelFrom.
        :rtype: str
        """
        return self._email_alias

    @email_alias.setter
    def email_alias(self, email_alias):
        """Sets the email_alias of this ModelFrom.

        Sender transactional tracker email.

        :param email_alias: The email_alias of this ModelFrom.
        :type email_alias: str
        """
        if email_alias is None:
            raise ValueError("Invalid value for `email_alias`, must not be `None`")

        self._email_alias = email_alias

    @property
    def name(self):
        """Gets the name of this ModelFrom.

        Sender's name.

        :return: The name of this ModelFrom.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelFrom.

        Sender's name.

        :param name: The name of this ModelFrom.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def role(self):
        """Gets the role of this ModelFrom.

        If it is a client or null, for transactional emails.

        :return: The role of this ModelFrom.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ModelFrom.

        If it is a client or null, for transactional emails.

        :param role: The role of this ModelFrom.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role
