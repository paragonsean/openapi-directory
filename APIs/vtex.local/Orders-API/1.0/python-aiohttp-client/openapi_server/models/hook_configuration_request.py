# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hook import Hook
from openapi_server.models.hook_filter import HookFilter
from openapi_server import util


class HookConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: HookFilter=None, hook: Hook=None):
        """HookConfigurationRequest - a model defined in OpenAPI

        :param filter: The filter of this HookConfigurationRequest.
        :param hook: The hook of this HookConfigurationRequest.
        """
        self.openapi_types = {
            'filter': HookFilter,
            'hook': Hook
        }

        self.attribute_map = {
            'filter': 'filter',
            'hook': 'hook'
        }

        self._filter = filter
        self._hook = hook

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HookConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HookConfigurationRequest of this HookConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this HookConfigurationRequest.


        :return: The filter of this HookConfigurationRequest.
        :rtype: HookFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this HookConfigurationRequest.


        :param filter: The filter of this HookConfigurationRequest.
        :type filter: HookFilter
        """
        if filter is None:
            raise ValueError("Invalid value for `filter`, must not be `None`")

        self._filter = filter

    @property
    def hook(self):
        """Gets the hook of this HookConfigurationRequest.


        :return: The hook of this HookConfigurationRequest.
        :rtype: Hook
        """
        return self._hook

    @hook.setter
    def hook(self, hook):
        """Sets the hook of this HookConfigurationRequest.


        :param hook: The hook of this HookConfigurationRequest.
        :type hook: Hook
        """
        if hook is None:
            raise ValueError("Invalid value for `hook`, must not be `None`")

        self._hook = hook
