# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeedFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_single_fire: bool=False, expression: str=None, status: List[str]=None, type: str='FromWorkflow'):
        """FeedFilter - a model defined in OpenAPI

        :param disable_single_fire: The disable_single_fire of this FeedFilter.
        :param expression: The expression of this FeedFilter.
        :param status: The status of this FeedFilter.
        :param type: The type of this FeedFilter.
        """
        self.openapi_types = {
            'disable_single_fire': bool,
            'expression': str,
            'status': List[str],
            'type': str
        }

        self.attribute_map = {
            'disable_single_fire': 'disableSingleFire',
            'expression': 'expression',
            'status': 'status',
            'type': 'type'
        }

        self._disable_single_fire = disable_single_fire
        self._expression = expression
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeedFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeedFilter of this FeedFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_single_fire(self):
        """Gets the disable_single_fire of this FeedFilter.

        Sets a limit to how many times a specific order shows on the feed, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the feed only once.

        :return: The disable_single_fire of this FeedFilter.
        :rtype: bool
        """
        return self._disable_single_fire

    @disable_single_fire.setter
    def disable_single_fire(self, disable_single_fire):
        """Sets the disable_single_fire of this FeedFilter.

        Sets a limit to how many times a specific order shows on the feed, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the feed only once.

        :param disable_single_fire: The disable_single_fire of this FeedFilter.
        :type disable_single_fire: bool
        """

        self._disable_single_fire = disable_single_fire

    @property
    def expression(self):
        """Gets the expression of this FeedFilter.

        JSONata query expression that defines what conditions must be met for an order to be included in the feed. This should only be used in case `type` is set to `FromOrders`.

        :return: The expression of this FeedFilter.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this FeedFilter.

        JSONata query expression that defines what conditions must be met for an order to be included in the feed. This should only be used in case `type` is set to `FromOrders`.

        :param expression: The expression of this FeedFilter.
        :type expression: str
        """

        self._expression = expression

    @property
    def status(self):
        """Gets the status of this FeedFilter.

        List of order statuses that should be included in the feed. This should only be used in case `type` is set to `FromWorkflow`. The status event will be removed, if it can't deliver a message more than 100 times, 4 days progressively.     **Status available to filter**     - order-created    - on-order-completed    - on-order-completed-ffm    - payment-pending    - waiting-for-order-authorization    - approve-payment    - payment-approved    - request-cancel    - waiting-for-seller-decision    - waiting-ffmt-authorization    - waiting-for-authorization    - waiting-for-manual-authorization    - authorize-fulfillment    - order-create-error    - order-creation-error    - window-to-cancel    - window-to-change-seller    - waiting-for-mkt-authorization    - waiting-seller-handling    - ready-for-handling    - start-handling    - handling    - invoice-after-cancellation-deny    - order-accepted    - invoice    - invoiced    - replaced    - cancellation-requested    - cancel    - canceled

        :return: The status of this FeedFilter.
        :rtype: List[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FeedFilter.

        List of order statuses that should be included in the feed. This should only be used in case `type` is set to `FromWorkflow`. The status event will be removed, if it can't deliver a message more than 100 times, 4 days progressively.     **Status available to filter**     - order-created    - on-order-completed    - on-order-completed-ffm    - payment-pending    - waiting-for-order-authorization    - approve-payment    - payment-approved    - request-cancel    - waiting-for-seller-decision    - waiting-ffmt-authorization    - waiting-for-authorization    - waiting-for-manual-authorization    - authorize-fulfillment    - order-create-error    - order-creation-error    - window-to-cancel    - window-to-change-seller    - waiting-for-mkt-authorization    - waiting-seller-handling    - ready-for-handling    - start-handling    - handling    - invoice-after-cancellation-deny    - order-accepted    - invoice    - invoiced    - replaced    - cancellation-requested    - cancel    - canceled

        :param status: The status of this FeedFilter.
        :type status: List[str]
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this FeedFilter.

        Determines what orders appear in the feed and how they are filtered. There are two possible values:    -`FromWorkflow`: the feed will receive order updates only when order’s statuses change and orders can be filtered by status, using the `status` field described below.    -`FromOrders`: the feed gets updates whenever any change is made to an order. in this case, orders can be filtered by any property, according to JSONata expressions passed in the `expression` field described below.

        :return: The type of this FeedFilter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FeedFilter.

        Determines what orders appear in the feed and how they are filtered. There are two possible values:    -`FromWorkflow`: the feed will receive order updates only when order’s statuses change and orders can be filtered by status, using the `status` field described below.    -`FromOrders`: the feed gets updates whenever any change is made to an order. in this case, orders can be filtered by any property, according to JSONata expressions passed in the `expression` field described below.

        :param type: The type of this FeedFilter.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
