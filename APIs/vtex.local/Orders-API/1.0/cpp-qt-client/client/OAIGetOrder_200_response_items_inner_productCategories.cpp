/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrder_200_response_items_inner_productCategories.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrder_200_response_items_inner_productCategories::OAIGetOrder_200_response_items_inner_productCategories(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrder_200_response_items_inner_productCategories::OAIGetOrder_200_response_items_inner_productCategories() {
    this->initializeModel();
}

OAIGetOrder_200_response_items_inner_productCategories::~OAIGetOrder_200_response_items_inner_productCategories() {}

void OAIGetOrder_200_response_items_inner_productCategories::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIGetOrder_200_response_items_inner_productCategories::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrder_200_response_items_inner_productCategories::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("{ID}")]);
    m_id_isSet = !json[QString("{ID}")].isNull() && m_id_isValid;
}

QString OAIGetOrder_200_response_items_inner_productCategories::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrder_200_response_items_inner_productCategories::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("{ID}"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIGetOrder_200_response_items_inner_productCategories::getId() const {
    return m_id;
}
void OAIGetOrder_200_response_items_inner_productCategories::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_productCategories::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetOrder_200_response_items_inner_productCategories::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIGetOrder_200_response_items_inner_productCategories::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrder_200_response_items_inner_productCategories::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
