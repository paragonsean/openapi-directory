/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarketplace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarketplace::OAIMarketplace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarketplace::OAIMarketplace() {
    this->initializeModel();
}

OAIMarketplace::~OAIMarketplace() {}

void OAIMarketplace::initializeModel() {

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_is_certified_isSet = false;
    m_is_certified_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIMarketplace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarketplace::fromJsonObject(QJsonObject json) {

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("baseURL")]);
    m_base_url_isSet = !json[QString("baseURL")].isNull() && m_base_url_isValid;

    m_is_certified_isValid = ::OpenAPI::fromJsonValue(m_is_certified, json[QString("isCertified")]);
    m_is_certified_isSet = !json[QString("isCertified")].isNull() && m_is_certified_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIMarketplace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarketplace::asJsonObject() const {
    QJsonObject obj;
    if (m_base_url_isSet) {
        obj.insert(QString("baseURL"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_is_certified_isSet) {
        obj.insert(QString("isCertified"), ::OpenAPI::toJsonValue(m_is_certified));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIMarketplace::getBaseUrl() const {
    return m_base_url;
}
void OAIMarketplace::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIMarketplace::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIMarketplace::is_base_url_Valid() const{
    return m_base_url_isValid;
}

QString OAIMarketplace::getIsCertified() const {
    return m_is_certified;
}
void OAIMarketplace::setIsCertified(const QString &is_certified) {
    m_is_certified = is_certified;
    m_is_certified_isSet = true;
}

bool OAIMarketplace::is_is_certified_Set() const{
    return m_is_certified_isSet;
}

bool OAIMarketplace::is_is_certified_Valid() const{
    return m_is_certified_isValid;
}

QString OAIMarketplace::getName() const {
    return m_name;
}
void OAIMarketplace::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMarketplace::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMarketplace::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIMarketplace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_certified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarketplace::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_url_isValid && m_is_certified_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
