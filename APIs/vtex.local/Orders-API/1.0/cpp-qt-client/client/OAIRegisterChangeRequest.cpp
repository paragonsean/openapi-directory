/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterChangeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterChangeRequest::OAIRegisterChangeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterChangeRequest::OAIRegisterChangeRequest() {
    this->initializeModel();
}

OAIRegisterChangeRequest::~OAIRegisterChangeRequest() {}

void OAIRegisterChangeRequest::initializeModel() {

    m_discount_value_isSet = false;
    m_discount_value_isValid = false;

    m_increment_value_isSet = false;
    m_increment_value_isValid = false;

    m_items_added_isSet = false;
    m_items_added_isValid = false;

    m_items_removed_isSet = false;
    m_items_removed_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAIRegisterChangeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterChangeRequest::fromJsonObject(QJsonObject json) {

    m_discount_value_isValid = ::OpenAPI::fromJsonValue(m_discount_value, json[QString("discountValue")]);
    m_discount_value_isSet = !json[QString("discountValue")].isNull() && m_discount_value_isValid;

    m_increment_value_isValid = ::OpenAPI::fromJsonValue(m_increment_value, json[QString("incrementValue")]);
    m_increment_value_isSet = !json[QString("incrementValue")].isNull() && m_increment_value_isValid;

    m_items_added_isValid = ::OpenAPI::fromJsonValue(m_items_added, json[QString("itemsAdded")]);
    m_items_added_isSet = !json[QString("itemsAdded")].isNull() && m_items_added_isValid;

    m_items_removed_isValid = ::OpenAPI::fromJsonValue(m_items_removed, json[QString("itemsRemoved")]);
    m_items_removed_isSet = !json[QString("itemsRemoved")].isNull() && m_items_removed_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;
}

QString OAIRegisterChangeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterChangeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_discount_value_isSet) {
        obj.insert(QString("discountValue"), ::OpenAPI::toJsonValue(m_discount_value));
    }
    if (m_increment_value_isSet) {
        obj.insert(QString("incrementValue"), ::OpenAPI::toJsonValue(m_increment_value));
    }
    if (m_items_added.size() > 0) {
        obj.insert(QString("itemsAdded"), ::OpenAPI::toJsonValue(m_items_added));
    }
    if (m_items_removed.size() > 0) {
        obj.insert(QString("itemsRemoved"), ::OpenAPI::toJsonValue(m_items_removed));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

qint32 OAIRegisterChangeRequest::getDiscountValue() const {
    return m_discount_value;
}
void OAIRegisterChangeRequest::setDiscountValue(const qint32 &discount_value) {
    m_discount_value = discount_value;
    m_discount_value_isSet = true;
}

bool OAIRegisterChangeRequest::is_discount_value_Set() const{
    return m_discount_value_isSet;
}

bool OAIRegisterChangeRequest::is_discount_value_Valid() const{
    return m_discount_value_isValid;
}

qint32 OAIRegisterChangeRequest::getIncrementValue() const {
    return m_increment_value;
}
void OAIRegisterChangeRequest::setIncrementValue(const qint32 &increment_value) {
    m_increment_value = increment_value;
    m_increment_value_isSet = true;
}

bool OAIRegisterChangeRequest::is_increment_value_Set() const{
    return m_increment_value_isSet;
}

bool OAIRegisterChangeRequest::is_increment_value_Valid() const{
    return m_increment_value_isValid;
}

QList<OAIRegisterChangeRequest_itemsAdded_inner> OAIRegisterChangeRequest::getItemsAdded() const {
    return m_items_added;
}
void OAIRegisterChangeRequest::setItemsAdded(const QList<OAIRegisterChangeRequest_itemsAdded_inner> &items_added) {
    m_items_added = items_added;
    m_items_added_isSet = true;
}

bool OAIRegisterChangeRequest::is_items_added_Set() const{
    return m_items_added_isSet;
}

bool OAIRegisterChangeRequest::is_items_added_Valid() const{
    return m_items_added_isValid;
}

QList<OAIRegisterChangeRequest_itemsRemoved_inner> OAIRegisterChangeRequest::getItemsRemoved() const {
    return m_items_removed;
}
void OAIRegisterChangeRequest::setItemsRemoved(const QList<OAIRegisterChangeRequest_itemsRemoved_inner> &items_removed) {
    m_items_removed = items_removed;
    m_items_removed_isSet = true;
}

bool OAIRegisterChangeRequest::is_items_removed_Set() const{
    return m_items_removed_isSet;
}

bool OAIRegisterChangeRequest::is_items_removed_Valid() const{
    return m_items_removed_isValid;
}

QString OAIRegisterChangeRequest::getReason() const {
    return m_reason;
}
void OAIRegisterChangeRequest::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIRegisterChangeRequest::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIRegisterChangeRequest::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIRegisterChangeRequest::getRequestId() const {
    return m_request_id;
}
void OAIRegisterChangeRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIRegisterChangeRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIRegisterChangeRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAIRegisterChangeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discount_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_increment_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_added.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_removed.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterChangeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_discount_value_isValid && m_increment_value_isValid && m_reason_isValid && m_request_id_isValid && true;
}

} // namespace OpenAPI
