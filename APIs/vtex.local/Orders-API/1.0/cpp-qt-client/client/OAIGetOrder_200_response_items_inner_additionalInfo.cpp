/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrder_200_response_items_inner_additionalInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrder_200_response_items_inner_additionalInfo::OAIGetOrder_200_response_items_inner_additionalInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrder_200_response_items_inner_additionalInfo::OAIGetOrder_200_response_items_inner_additionalInfo() {
    this->initializeModel();
}

OAIGetOrder_200_response_items_inner_additionalInfo::~OAIGetOrder_200_response_items_inner_additionalInfo() {}

void OAIGetOrder_200_response_items_inner_additionalInfo::initializeModel() {

    m_brand_id_isSet = false;
    m_brand_id_isValid = false;

    m_brand_name_isSet = false;
    m_brand_name_isValid = false;

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_offering_info_isSet = false;
    m_offering_info_isValid = false;

    m_offering_type_isSet = false;
    m_offering_type_isValid = false;

    m_offering_type_id_isSet = false;
    m_offering_type_id_isValid = false;
}

void OAIGetOrder_200_response_items_inner_additionalInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrder_200_response_items_inner_additionalInfo::fromJsonObject(QJsonObject json) {

    m_brand_id_isValid = ::OpenAPI::fromJsonValue(m_brand_id, json[QString("brandId")]);
    m_brand_id_isSet = !json[QString("brandId")].isNull() && m_brand_id_isValid;

    m_brand_name_isValid = ::OpenAPI::fromJsonValue(m_brand_name, json[QString("brandName")]);
    m_brand_name_isSet = !json[QString("brandName")].isNull() && m_brand_name_isValid;

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_offering_info_isValid = ::OpenAPI::fromJsonValue(m_offering_info, json[QString("offeringInfo")]);
    m_offering_info_isSet = !json[QString("offeringInfo")].isNull() && m_offering_info_isValid;

    m_offering_type_isValid = ::OpenAPI::fromJsonValue(m_offering_type, json[QString("offeringType")]);
    m_offering_type_isSet = !json[QString("offeringType")].isNull() && m_offering_type_isValid;

    m_offering_type_id_isValid = ::OpenAPI::fromJsonValue(m_offering_type_id, json[QString("offeringTypeId")]);
    m_offering_type_id_isSet = !json[QString("offeringTypeId")].isNull() && m_offering_type_id_isValid;
}

QString OAIGetOrder_200_response_items_inner_additionalInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrder_200_response_items_inner_additionalInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_id_isSet) {
        obj.insert(QString("brandId"), ::OpenAPI::toJsonValue(m_brand_id));
    }
    if (m_brand_name_isSet) {
        obj.insert(QString("brandName"), ::OpenAPI::toJsonValue(m_brand_name));
    }
    if (m_dimension.isSet()) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_offering_info_isSet) {
        obj.insert(QString("offeringInfo"), ::OpenAPI::toJsonValue(m_offering_info));
    }
    if (m_offering_type_isSet) {
        obj.insert(QString("offeringType"), ::OpenAPI::toJsonValue(m_offering_type));
    }
    if (m_offering_type_id_isSet) {
        obj.insert(QString("offeringTypeId"), ::OpenAPI::toJsonValue(m_offering_type_id));
    }
    return obj;
}

QString OAIGetOrder_200_response_items_inner_additionalInfo::getBrandId() const {
    return m_brand_id;
}
void OAIGetOrder_200_response_items_inner_additionalInfo::setBrandId(const QString &brand_id) {
    m_brand_id = brand_id;
    m_brand_id_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo::is_brand_id_Set() const{
    return m_brand_id_isSet;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo::is_brand_id_Valid() const{
    return m_brand_id_isValid;
}

QString OAIGetOrder_200_response_items_inner_additionalInfo::getBrandName() const {
    return m_brand_name;
}
void OAIGetOrder_200_response_items_inner_additionalInfo::setBrandName(const QString &brand_name) {
    m_brand_name = brand_name;
    m_brand_name_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo::is_brand_name_Set() const{
    return m_brand_name_isSet;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo::is_brand_name_Valid() const{
    return m_brand_name_isValid;
}

OAIGetOrder_200_response_items_inner_additionalInfo_dimension OAIGetOrder_200_response_items_inner_additionalInfo::getDimension() const {
    return m_dimension;
}
void OAIGetOrder_200_response_items_inner_additionalInfo::setDimension(const OAIGetOrder_200_response_items_inner_additionalInfo_dimension &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo::is_dimension_Valid() const{
    return m_dimension_isValid;
}

QString OAIGetOrder_200_response_items_inner_additionalInfo::getOfferingInfo() const {
    return m_offering_info;
}
void OAIGetOrder_200_response_items_inner_additionalInfo::setOfferingInfo(const QString &offering_info) {
    m_offering_info = offering_info;
    m_offering_info_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo::is_offering_info_Set() const{
    return m_offering_info_isSet;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo::is_offering_info_Valid() const{
    return m_offering_info_isValid;
}

QString OAIGetOrder_200_response_items_inner_additionalInfo::getOfferingType() const {
    return m_offering_type;
}
void OAIGetOrder_200_response_items_inner_additionalInfo::setOfferingType(const QString &offering_type) {
    m_offering_type = offering_type;
    m_offering_type_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo::is_offering_type_Set() const{
    return m_offering_type_isSet;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo::is_offering_type_Valid() const{
    return m_offering_type_isValid;
}

QString OAIGetOrder_200_response_items_inner_additionalInfo::getOfferingTypeId() const {
    return m_offering_type_id;
}
void OAIGetOrder_200_response_items_inner_additionalInfo::setOfferingTypeId(const QString &offering_type_id) {
    m_offering_type_id = offering_type_id;
    m_offering_type_id_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo::is_offering_type_id_Set() const{
    return m_offering_type_id_isSet;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo::is_offering_type_id_Valid() const{
    return m_offering_type_id_isValid;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
