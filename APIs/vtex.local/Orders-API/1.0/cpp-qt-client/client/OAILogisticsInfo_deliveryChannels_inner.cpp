/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogisticsInfo_deliveryChannels_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogisticsInfo_deliveryChannels_inner::OAILogisticsInfo_deliveryChannels_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogisticsInfo_deliveryChannels_inner::OAILogisticsInfo_deliveryChannels_inner() {
    this->initializeModel();
}

OAILogisticsInfo_deliveryChannels_inner::~OAILogisticsInfo_deliveryChannels_inner() {}

void OAILogisticsInfo_deliveryChannels_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_stock_balance_isSet = false;
    m_stock_balance_isValid = false;
}

void OAILogisticsInfo_deliveryChannels_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogisticsInfo_deliveryChannels_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_stock_balance_isValid = ::OpenAPI::fromJsonValue(m_stock_balance, json[QString("stockBalance")]);
    m_stock_balance_isSet = !json[QString("stockBalance")].isNull() && m_stock_balance_isValid;
}

QString OAILogisticsInfo_deliveryChannels_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogisticsInfo_deliveryChannels_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_stock_balance_isSet) {
        obj.insert(QString("stockBalance"), ::OpenAPI::toJsonValue(m_stock_balance));
    }
    return obj;
}

QString OAILogisticsInfo_deliveryChannels_inner::getId() const {
    return m_id;
}
void OAILogisticsInfo_deliveryChannels_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILogisticsInfo_deliveryChannels_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAILogisticsInfo_deliveryChannels_inner::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAILogisticsInfo_deliveryChannels_inner::getStockBalance() const {
    return m_stock_balance;
}
void OAILogisticsInfo_deliveryChannels_inner::setStockBalance(const qint32 &stock_balance) {
    m_stock_balance = stock_balance;
    m_stock_balance_isSet = true;
}

bool OAILogisticsInfo_deliveryChannels_inner::is_stock_balance_Set() const{
    return m_stock_balance_isSet;
}

bool OAILogisticsInfo_deliveryChannels_inner::is_stock_balance_Valid() const{
    return m_stock_balance_isValid;
}

bool OAILogisticsInfo_deliveryChannels_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stock_balance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogisticsInfo_deliveryChannels_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_stock_balance_isValid && true;
}

} // namespace OpenAPI
