/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInvoiceApi_H
#define OAI_OAIInvoiceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancelOrder_200_response.h"
#include "OAIInvoiceNotificationRequest.h"
#include "OAIUpdatepartialinvoice_SendTrackingNumber.h"
#include "OAIUpdatepartialinvoice_SendTrackingNumber_Request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInvoiceApi : public QObject {
    Q_OBJECT

public:
    OAIInvoiceApi(const int timeOut = 0);
    ~OAIInvoiceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  oai_invoice_notification_request OAIInvoiceNotificationRequest [required]
    */
    virtual void invoiceNotification(const QString &accept, const QString &content_type, const QString &order_id, const OAIInvoiceNotificationRequest &oai_invoice_notification_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  invoice_number QString [required]
    * @param[in]  oai_updatepartialinvoice_send_tracking_number_request OAIUpdatepartialinvoice_SendTrackingNumber_Request [required]
    */
    virtual void updatepartialinvoice_SendTrackingNumber(const QString &content_type, const QString &accept, const QString &order_id, const QString &invoice_number, const OAIUpdatepartialinvoice_SendTrackingNumber_Request &oai_updatepartialinvoice_send_tracking_number_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void invoiceNotificationCallback(OAIHttpRequestWorker *worker);
    void updatepartialinvoice_SendTrackingNumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void invoiceNotificationSignal(OAICancelOrder_200_response summary);
    void updatepartialinvoice_SendTrackingNumberSignal(OAIUpdatepartialinvoice_SendTrackingNumber summary);


    void invoiceNotificationSignalFull(OAIHttpRequestWorker *worker, OAICancelOrder_200_response summary);
    void updatepartialinvoice_SendTrackingNumberSignalFull(OAIHttpRequestWorker *worker, OAIUpdatepartialinvoice_SendTrackingNumber summary);

    Q_DECL_DEPRECATED_X("Use invoiceNotificationSignalError() instead")
    void invoiceNotificationSignalE(OAICancelOrder_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceNotificationSignalError(OAICancelOrder_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatepartialinvoice_SendTrackingNumberSignalError() instead")
    void updatepartialinvoice_SendTrackingNumberSignalE(OAIUpdatepartialinvoice_SendTrackingNumber summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatepartialinvoice_SendTrackingNumberSignalError(OAIUpdatepartialinvoice_SendTrackingNumber summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use invoiceNotificationSignalErrorFull() instead")
    void invoiceNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invoiceNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatepartialinvoice_SendTrackingNumberSignalErrorFull() instead")
    void updatepartialinvoice_SendTrackingNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatepartialinvoice_SendTrackingNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
