/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem2::OAIItem2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem2::OAIItem2() {
    this->initializeModel();
}

OAIItem2::~OAIItem2() {}

void OAIItem2::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_ean_isSet = false;
    m_ean_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_ref_id_isSet = false;
    m_ref_id_isValid = false;

    m_seller_isSet = false;
    m_seller_isValid = false;

    m_selling_price_isSet = false;
    m_selling_price_isValid = false;
}

void OAIItem2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem2::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ean_isValid = ::OpenAPI::fromJsonValue(m_ean, json[QString("ean")]);
    m_ean_isSet = !json[QString("ean")].isNull() && m_ean_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_ref_id_isValid = ::OpenAPI::fromJsonValue(m_ref_id, json[QString("refId")]);
    m_ref_id_isSet = !json[QString("refId")].isNull() && m_ref_id_isValid;

    m_seller_isValid = ::OpenAPI::fromJsonValue(m_seller, json[QString("seller")]);
    m_seller_isSet = !json[QString("seller")].isNull() && m_seller_isValid;

    m_selling_price_isValid = ::OpenAPI::fromJsonValue(m_selling_price, json[QString("sellingPrice")]);
    m_selling_price_isSet = !json[QString("sellingPrice")].isNull() && m_selling_price_isValid;
}

QString OAIItem2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem2::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ean_isSet) {
        obj.insert(QString("ean"), ::OpenAPI::toJsonValue(m_ean));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_ref_id_isSet) {
        obj.insert(QString("refId"), ::OpenAPI::toJsonValue(m_ref_id));
    }
    if (m_seller_isSet) {
        obj.insert(QString("seller"), ::OpenAPI::toJsonValue(m_seller));
    }
    if (m_selling_price_isSet) {
        obj.insert(QString("sellingPrice"), ::OpenAPI::toJsonValue(m_selling_price));
    }
    return obj;
}

QString OAIItem2::getDescription() const {
    return m_description;
}
void OAIItem2::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIItem2::is_description_Set() const{
    return m_description_isSet;
}

bool OAIItem2::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIItem2::getEan() const {
    return m_ean;
}
void OAIItem2::setEan(const QString &ean) {
    m_ean = ean;
    m_ean_isSet = true;
}

bool OAIItem2::is_ean_Set() const{
    return m_ean_isSet;
}

bool OAIItem2::is_ean_Valid() const{
    return m_ean_isValid;
}

QString OAIItem2::getId() const {
    return m_id;
}
void OAIItem2::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItem2::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItem2::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIItem2::getPrice() const {
    return m_price;
}
void OAIItem2::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIItem2::is_price_Set() const{
    return m_price_isSet;
}

bool OAIItem2::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIItem2::getProductId() const {
    return m_product_id;
}
void OAIItem2::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIItem2::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIItem2::is_product_id_Valid() const{
    return m_product_id_isValid;
}

qint32 OAIItem2::getQuantity() const {
    return m_quantity;
}
void OAIItem2::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIItem2::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIItem2::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIItem2::getRefId() const {
    return m_ref_id;
}
void OAIItem2::setRefId(const QString &ref_id) {
    m_ref_id = ref_id;
    m_ref_id_isSet = true;
}

bool OAIItem2::is_ref_id_Set() const{
    return m_ref_id_isSet;
}

bool OAIItem2::is_ref_id_Valid() const{
    return m_ref_id_isValid;
}

QString OAIItem2::getSeller() const {
    return m_seller;
}
void OAIItem2::setSeller(const QString &seller) {
    m_seller = seller;
    m_seller_isSet = true;
}

bool OAIItem2::is_seller_Set() const{
    return m_seller_isSet;
}

bool OAIItem2::is_seller_Valid() const{
    return m_seller_isValid;
}

qint32 OAIItem2::getSellingPrice() const {
    return m_selling_price;
}
void OAIItem2::setSellingPrice(const qint32 &selling_price) {
    m_selling_price = selling_price;
    m_selling_price_isSet = true;
}

bool OAIItem2::is_selling_price_Set() const{
    return m_selling_price_isSet;
}

bool OAIItem2::is_selling_price_Valid() const{
    return m_selling_price_isValid;
}

bool OAIItem2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selling_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_ean_isValid && m_id_isValid && m_price_isValid && m_product_id_isValid && m_quantity_isValid && m_ref_id_isValid && m_seller_isValid && m_selling_price_isValid && true;
}

} // namespace OpenAPI
