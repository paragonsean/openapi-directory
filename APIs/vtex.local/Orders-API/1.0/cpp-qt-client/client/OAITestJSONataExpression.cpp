/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestJSONataExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestJSONataExpression::OAITestJSONataExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestJSONataExpression::OAITestJSONataExpression() {
    this->initializeModel();
}

OAITestJSONataExpression::~OAITestJSONataExpression() {}

void OAITestJSONataExpression::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;
}

void OAITestJSONataExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestJSONataExpression::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("Document")]);
    m_document_isSet = !json[QString("Document")].isNull() && m_document_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("Expression")]);
    m_expression_isSet = !json[QString("Expression")].isNull() && m_expression_isValid;
}

QString OAITestJSONataExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestJSONataExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_document_isSet) {
        obj.insert(QString("Document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_expression_isSet) {
        obj.insert(QString("Expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    return obj;
}

QString OAITestJSONataExpression::getDocument() const {
    return m_document;
}
void OAITestJSONataExpression::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAITestJSONataExpression::is_document_Set() const{
    return m_document_isSet;
}

bool OAITestJSONataExpression::is_document_Valid() const{
    return m_document_isValid;
}

QString OAITestJSONataExpression::getExpression() const {
    return m_expression;
}
void OAITestJSONataExpression::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAITestJSONataExpression::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAITestJSONataExpression::is_expression_Valid() const{
    return m_expression_isValid;
}

bool OAITestJSONataExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestJSONataExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_isValid && m_expression_isValid && true;
}

} // namespace OpenAPI
