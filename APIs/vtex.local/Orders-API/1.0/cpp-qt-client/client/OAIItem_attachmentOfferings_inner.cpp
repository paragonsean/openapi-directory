/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem_attachmentOfferings_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem_attachmentOfferings_inner::OAIItem_attachmentOfferings_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem_attachmentOfferings_inner::OAIItem_attachmentOfferings_inner() {
    this->initializeModel();
}

OAIItem_attachmentOfferings_inner::~OAIItem_attachmentOfferings_inner() {}

void OAIItem_attachmentOfferings_inner::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;
}

void OAIItem_attachmentOfferings_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem_attachmentOfferings_inner::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;
}

QString OAIItem_attachmentOfferings_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem_attachmentOfferings_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    return obj;
}

QString OAIItem_attachmentOfferings_inner::getName() const {
    return m_name;
}
void OAIItem_attachmentOfferings_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItem_attachmentOfferings_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItem_attachmentOfferings_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIItem_attachmentOfferings_inner::isRequired() const {
    return m_required;
}
void OAIItem_attachmentOfferings_inner::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIItem_attachmentOfferings_inner::is_required_Set() const{
    return m_required_isSet;
}

bool OAIItem_attachmentOfferings_inner::is_required_Valid() const{
    return m_required_isValid;
}

OAIObject OAIItem_attachmentOfferings_inner::getSchema() const {
    return m_schema;
}
void OAIItem_attachmentOfferings_inner::setSchema(const OAIObject &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIItem_attachmentOfferings_inner::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIItem_attachmentOfferings_inner::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAIItem_attachmentOfferings_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem_attachmentOfferings_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_required_isValid && m_schema_isValid && true;
}

} // namespace OpenAPI
