/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserorderdetails_taxData_taxInfoCollection_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserorderdetails_taxData_taxInfoCollection_inner::OAIUserorderdetails_taxData_taxInfoCollection_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserorderdetails_taxData_taxInfoCollection_inner::OAIUserorderdetails_taxData_taxInfoCollection_inner() {
    this->initializeModel();
}

OAIUserorderdetails_taxData_taxInfoCollection_inner::~OAIUserorderdetails_taxData_taxInfoCollection_inner() {}

void OAIUserorderdetails_taxData_taxInfoCollection_inner::initializeModel() {

    m_item_index_isSet = false;
    m_item_index_isValid = false;

    m_price_tags_isSet = false;
    m_price_tags_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;
}

void OAIUserorderdetails_taxData_taxInfoCollection_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserorderdetails_taxData_taxInfoCollection_inner::fromJsonObject(QJsonObject json) {

    m_item_index_isValid = ::OpenAPI::fromJsonValue(m_item_index, json[QString("itemIndex")]);
    m_item_index_isSet = !json[QString("itemIndex")].isNull() && m_item_index_isValid;

    m_price_tags_isValid = ::OpenAPI::fromJsonValue(m_price_tags, json[QString("priceTags")]);
    m_price_tags_isSet = !json[QString("priceTags")].isNull() && m_price_tags_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;
}

QString OAIUserorderdetails_taxData_taxInfoCollection_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserorderdetails_taxData_taxInfoCollection_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_item_index_isSet) {
        obj.insert(QString("itemIndex"), ::OpenAPI::toJsonValue(m_item_index));
    }
    if (m_price_tags.size() > 0) {
        obj.insert(QString("priceTags"), ::OpenAPI::toJsonValue(m_price_tags));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    return obj;
}

qint32 OAIUserorderdetails_taxData_taxInfoCollection_inner::getItemIndex() const {
    return m_item_index;
}
void OAIUserorderdetails_taxData_taxInfoCollection_inner::setItemIndex(const qint32 &item_index) {
    m_item_index = item_index;
    m_item_index_isSet = true;
}

bool OAIUserorderdetails_taxData_taxInfoCollection_inner::is_item_index_Set() const{
    return m_item_index_isSet;
}

bool OAIUserorderdetails_taxData_taxInfoCollection_inner::is_item_index_Valid() const{
    return m_item_index_isValid;
}

QList<OAIUserorderdetails_taxData_taxInfoCollection_inner_priceTags_inner> OAIUserorderdetails_taxData_taxInfoCollection_inner::getPriceTags() const {
    return m_price_tags;
}
void OAIUserorderdetails_taxData_taxInfoCollection_inner::setPriceTags(const QList<OAIUserorderdetails_taxData_taxInfoCollection_inner_priceTags_inner> &price_tags) {
    m_price_tags = price_tags;
    m_price_tags_isSet = true;
}

bool OAIUserorderdetails_taxData_taxInfoCollection_inner::is_price_tags_Set() const{
    return m_price_tags_isSet;
}

bool OAIUserorderdetails_taxData_taxInfoCollection_inner::is_price_tags_Valid() const{
    return m_price_tags_isValid;
}

QString OAIUserorderdetails_taxData_taxInfoCollection_inner::getSku() const {
    return m_sku;
}
void OAIUserorderdetails_taxData_taxInfoCollection_inner::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIUserorderdetails_taxData_taxInfoCollection_inner::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIUserorderdetails_taxData_taxInfoCollection_inner::is_sku_Valid() const{
    return m_sku_isValid;
}

bool OAIUserorderdetails_taxData_taxInfoCollection_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserorderdetails_taxData_taxInfoCollection_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_item_index_isValid && m_price_tags_isValid && m_sku_isValid && true;
}

} // namespace OpenAPI
