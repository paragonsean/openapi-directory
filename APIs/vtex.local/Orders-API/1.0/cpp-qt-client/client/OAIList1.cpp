/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIList1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIList1::OAIList1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIList1::OAIList1() {
    this->initializeModel();
}

OAIList1::~OAIList1() {}

void OAIList1::initializeModel() {

    m_shipping_estimated_date_isSet = false;
    m_shipping_estimated_date_isValid = false;

    m_shipping_estimated_date_max_isSet = false;
    m_shipping_estimated_date_max_isValid = false;

    m_shipping_estimated_date_min_isSet = false;
    m_shipping_estimated_date_min_isValid = false;

    m_affiliate_id_isSet = false;
    m_affiliate_id_isValid = false;

    m_authorized_date_isSet = false;
    m_authorized_date_isValid = false;

    m_call_center_operator_name_isSet = false;
    m_call_center_operator_name_isValid = false;

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_last_message_unread_isSet = false;
    m_last_message_unread_isValid = false;

    m_list_id_isSet = false;
    m_list_id_isValid = false;

    m_list_type_isSet = false;
    m_list_type_isValid = false;

    m_market_place_order_id_isSet = false;
    m_market_place_order_id_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_order_is_complete_isSet = false;
    m_order_is_complete_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_payment_names_isSet = false;
    m_payment_names_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_description_isSet = false;
    m_status_description_isValid = false;

    m_total_items_isSet = false;
    m_total_items_isValid = false;

    m_total_value_isSet = false;
    m_total_value_isValid = false;

    m_workflow_in_error_state_isSet = false;
    m_workflow_in_error_state_isValid = false;

    m_workflow_in_retry_isSet = false;
    m_workflow_in_retry_isValid = false;
}

void OAIList1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIList1::fromJsonObject(QJsonObject json) {

    m_shipping_estimated_date_isValid = ::OpenAPI::fromJsonValue(m_shipping_estimated_date, json[QString("ShippingEstimatedDate")]);
    m_shipping_estimated_date_isSet = !json[QString("ShippingEstimatedDate")].isNull() && m_shipping_estimated_date_isValid;

    m_shipping_estimated_date_max_isValid = ::OpenAPI::fromJsonValue(m_shipping_estimated_date_max, json[QString("ShippingEstimatedDateMax")]);
    m_shipping_estimated_date_max_isSet = !json[QString("ShippingEstimatedDateMax")].isNull() && m_shipping_estimated_date_max_isValid;

    m_shipping_estimated_date_min_isValid = ::OpenAPI::fromJsonValue(m_shipping_estimated_date_min, json[QString("ShippingEstimatedDateMin")]);
    m_shipping_estimated_date_min_isSet = !json[QString("ShippingEstimatedDateMin")].isNull() && m_shipping_estimated_date_min_isValid;

    m_affiliate_id_isValid = ::OpenAPI::fromJsonValue(m_affiliate_id, json[QString("affiliateId")]);
    m_affiliate_id_isSet = !json[QString("affiliateId")].isNull() && m_affiliate_id_isValid;

    m_authorized_date_isValid = ::OpenAPI::fromJsonValue(m_authorized_date, json[QString("authorizedDate")]);
    m_authorized_date_isSet = !json[QString("authorizedDate")].isNull() && m_authorized_date_isValid;

    m_call_center_operator_name_isValid = ::OpenAPI::fromJsonValue(m_call_center_operator_name, json[QString("callCenterOperatorName")]);
    m_call_center_operator_name_isSet = !json[QString("callCenterOperatorName")].isNull() && m_call_center_operator_name_isValid;

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("clientName")]);
    m_client_name_isSet = !json[QString("clientName")].isNull() && m_client_name_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_last_message_unread_isValid = ::OpenAPI::fromJsonValue(m_last_message_unread, json[QString("lastMessageUnread")]);
    m_last_message_unread_isSet = !json[QString("lastMessageUnread")].isNull() && m_last_message_unread_isValid;

    m_list_id_isValid = ::OpenAPI::fromJsonValue(m_list_id, json[QString("listId")]);
    m_list_id_isSet = !json[QString("listId")].isNull() && m_list_id_isValid;

    m_list_type_isValid = ::OpenAPI::fromJsonValue(m_list_type, json[QString("listType")]);
    m_list_type_isSet = !json[QString("listType")].isNull() && m_list_type_isValid;

    m_market_place_order_id_isValid = ::OpenAPI::fromJsonValue(m_market_place_order_id, json[QString("marketPlaceOrderId")]);
    m_market_place_order_id_isSet = !json[QString("marketPlaceOrderId")].isNull() && m_market_place_order_id_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_order_is_complete_isValid = ::OpenAPI::fromJsonValue(m_order_is_complete, json[QString("orderIsComplete")]);
    m_order_is_complete_isSet = !json[QString("orderIsComplete")].isNull() && m_order_is_complete_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_payment_names_isValid = ::OpenAPI::fromJsonValue(m_payment_names, json[QString("paymentNames")]);
    m_payment_names_isSet = !json[QString("paymentNames")].isNull() && m_payment_names_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_description_isValid = ::OpenAPI::fromJsonValue(m_status_description, json[QString("statusDescription")]);
    m_status_description_isSet = !json[QString("statusDescription")].isNull() && m_status_description_isValid;

    m_total_items_isValid = ::OpenAPI::fromJsonValue(m_total_items, json[QString("totalItems")]);
    m_total_items_isSet = !json[QString("totalItems")].isNull() && m_total_items_isValid;

    m_total_value_isValid = ::OpenAPI::fromJsonValue(m_total_value, json[QString("totalValue")]);
    m_total_value_isSet = !json[QString("totalValue")].isNull() && m_total_value_isValid;

    m_workflow_in_error_state_isValid = ::OpenAPI::fromJsonValue(m_workflow_in_error_state, json[QString("workflowInErrorState")]);
    m_workflow_in_error_state_isSet = !json[QString("workflowInErrorState")].isNull() && m_workflow_in_error_state_isValid;

    m_workflow_in_retry_isValid = ::OpenAPI::fromJsonValue(m_workflow_in_retry, json[QString("workflowInRetry")]);
    m_workflow_in_retry_isSet = !json[QString("workflowInRetry")].isNull() && m_workflow_in_retry_isValid;
}

QString OAIList1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIList1::asJsonObject() const {
    QJsonObject obj;
    if (m_shipping_estimated_date_isSet) {
        obj.insert(QString("ShippingEstimatedDate"), ::OpenAPI::toJsonValue(m_shipping_estimated_date));
    }
    if (m_shipping_estimated_date_max_isSet) {
        obj.insert(QString("ShippingEstimatedDateMax"), ::OpenAPI::toJsonValue(m_shipping_estimated_date_max));
    }
    if (m_shipping_estimated_date_min_isSet) {
        obj.insert(QString("ShippingEstimatedDateMin"), ::OpenAPI::toJsonValue(m_shipping_estimated_date_min));
    }
    if (m_affiliate_id_isSet) {
        obj.insert(QString("affiliateId"), ::OpenAPI::toJsonValue(m_affiliate_id));
    }
    if (m_authorized_date_isSet) {
        obj.insert(QString("authorizedDate"), ::OpenAPI::toJsonValue(m_authorized_date));
    }
    if (m_call_center_operator_name_isSet) {
        obj.insert(QString("callCenterOperatorName"), ::OpenAPI::toJsonValue(m_call_center_operator_name));
    }
    if (m_client_name_isSet) {
        obj.insert(QString("clientName"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_last_message_unread_isSet) {
        obj.insert(QString("lastMessageUnread"), ::OpenAPI::toJsonValue(m_last_message_unread));
    }
    if (m_list_id_isSet) {
        obj.insert(QString("listId"), ::OpenAPI::toJsonValue(m_list_id));
    }
    if (m_list_type_isSet) {
        obj.insert(QString("listType"), ::OpenAPI::toJsonValue(m_list_type));
    }
    if (m_market_place_order_id_isSet) {
        obj.insert(QString("marketPlaceOrderId"), ::OpenAPI::toJsonValue(m_market_place_order_id));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_order_is_complete_isSet) {
        obj.insert(QString("orderIsComplete"), ::OpenAPI::toJsonValue(m_order_is_complete));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_payment_names_isSet) {
        obj.insert(QString("paymentNames"), ::OpenAPI::toJsonValue(m_payment_names));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_description_isSet) {
        obj.insert(QString("statusDescription"), ::OpenAPI::toJsonValue(m_status_description));
    }
    if (m_total_items_isSet) {
        obj.insert(QString("totalItems"), ::OpenAPI::toJsonValue(m_total_items));
    }
    if (m_total_value_isSet) {
        obj.insert(QString("totalValue"), ::OpenAPI::toJsonValue(m_total_value));
    }
    if (m_workflow_in_error_state_isSet) {
        obj.insert(QString("workflowInErrorState"), ::OpenAPI::toJsonValue(m_workflow_in_error_state));
    }
    if (m_workflow_in_retry_isSet) {
        obj.insert(QString("workflowInRetry"), ::OpenAPI::toJsonValue(m_workflow_in_retry));
    }
    return obj;
}

QString OAIList1::getShippingEstimatedDate() const {
    return m_shipping_estimated_date;
}
void OAIList1::setShippingEstimatedDate(const QString &shipping_estimated_date) {
    m_shipping_estimated_date = shipping_estimated_date;
    m_shipping_estimated_date_isSet = true;
}

bool OAIList1::is_shipping_estimated_date_Set() const{
    return m_shipping_estimated_date_isSet;
}

bool OAIList1::is_shipping_estimated_date_Valid() const{
    return m_shipping_estimated_date_isValid;
}

QString OAIList1::getShippingEstimatedDateMax() const {
    return m_shipping_estimated_date_max;
}
void OAIList1::setShippingEstimatedDateMax(const QString &shipping_estimated_date_max) {
    m_shipping_estimated_date_max = shipping_estimated_date_max;
    m_shipping_estimated_date_max_isSet = true;
}

bool OAIList1::is_shipping_estimated_date_max_Set() const{
    return m_shipping_estimated_date_max_isSet;
}

bool OAIList1::is_shipping_estimated_date_max_Valid() const{
    return m_shipping_estimated_date_max_isValid;
}

QString OAIList1::getShippingEstimatedDateMin() const {
    return m_shipping_estimated_date_min;
}
void OAIList1::setShippingEstimatedDateMin(const QString &shipping_estimated_date_min) {
    m_shipping_estimated_date_min = shipping_estimated_date_min;
    m_shipping_estimated_date_min_isSet = true;
}

bool OAIList1::is_shipping_estimated_date_min_Set() const{
    return m_shipping_estimated_date_min_isSet;
}

bool OAIList1::is_shipping_estimated_date_min_Valid() const{
    return m_shipping_estimated_date_min_isValid;
}

QString OAIList1::getAffiliateId() const {
    return m_affiliate_id;
}
void OAIList1::setAffiliateId(const QString &affiliate_id) {
    m_affiliate_id = affiliate_id;
    m_affiliate_id_isSet = true;
}

bool OAIList1::is_affiliate_id_Set() const{
    return m_affiliate_id_isSet;
}

bool OAIList1::is_affiliate_id_Valid() const{
    return m_affiliate_id_isValid;
}

QString OAIList1::getAuthorizedDate() const {
    return m_authorized_date;
}
void OAIList1::setAuthorizedDate(const QString &authorized_date) {
    m_authorized_date = authorized_date;
    m_authorized_date_isSet = true;
}

bool OAIList1::is_authorized_date_Set() const{
    return m_authorized_date_isSet;
}

bool OAIList1::is_authorized_date_Valid() const{
    return m_authorized_date_isValid;
}

QString OAIList1::getCallCenterOperatorName() const {
    return m_call_center_operator_name;
}
void OAIList1::setCallCenterOperatorName(const QString &call_center_operator_name) {
    m_call_center_operator_name = call_center_operator_name;
    m_call_center_operator_name_isSet = true;
}

bool OAIList1::is_call_center_operator_name_Set() const{
    return m_call_center_operator_name_isSet;
}

bool OAIList1::is_call_center_operator_name_Valid() const{
    return m_call_center_operator_name_isValid;
}

QString OAIList1::getClientName() const {
    return m_client_name;
}
void OAIList1::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAIList1::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAIList1::is_client_name_Valid() const{
    return m_client_name_isValid;
}

QString OAIList1::getCreationDate() const {
    return m_creation_date;
}
void OAIList1::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIList1::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIList1::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIList1::getCurrencyCode() const {
    return m_currency_code;
}
void OAIList1::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIList1::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIList1::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QList<OAIItem2> OAIList1::getItems() const {
    return m_items;
}
void OAIList1::setItems(const QList<OAIItem2> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIList1::is_items_Set() const{
    return m_items_isSet;
}

bool OAIList1::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIList1::getLastMessageUnread() const {
    return m_last_message_unread;
}
void OAIList1::setLastMessageUnread(const QString &last_message_unread) {
    m_last_message_unread = last_message_unread;
    m_last_message_unread_isSet = true;
}

bool OAIList1::is_last_message_unread_Set() const{
    return m_last_message_unread_isSet;
}

bool OAIList1::is_last_message_unread_Valid() const{
    return m_last_message_unread_isValid;
}

QString OAIList1::getListId() const {
    return m_list_id;
}
void OAIList1::setListId(const QString &list_id) {
    m_list_id = list_id;
    m_list_id_isSet = true;
}

bool OAIList1::is_list_id_Set() const{
    return m_list_id_isSet;
}

bool OAIList1::is_list_id_Valid() const{
    return m_list_id_isValid;
}

QString OAIList1::getListType() const {
    return m_list_type;
}
void OAIList1::setListType(const QString &list_type) {
    m_list_type = list_type;
    m_list_type_isSet = true;
}

bool OAIList1::is_list_type_Set() const{
    return m_list_type_isSet;
}

bool OAIList1::is_list_type_Valid() const{
    return m_list_type_isValid;
}

QString OAIList1::getMarketPlaceOrderId() const {
    return m_market_place_order_id;
}
void OAIList1::setMarketPlaceOrderId(const QString &market_place_order_id) {
    m_market_place_order_id = market_place_order_id;
    m_market_place_order_id_isSet = true;
}

bool OAIList1::is_market_place_order_id_Set() const{
    return m_market_place_order_id_isSet;
}

bool OAIList1::is_market_place_order_id_Valid() const{
    return m_market_place_order_id_isValid;
}

QString OAIList1::getOrderId() const {
    return m_order_id;
}
void OAIList1::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIList1::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIList1::is_order_id_Valid() const{
    return m_order_id_isValid;
}

bool OAIList1::isOrderIsComplete() const {
    return m_order_is_complete;
}
void OAIList1::setOrderIsComplete(const bool &order_is_complete) {
    m_order_is_complete = order_is_complete;
    m_order_is_complete_isSet = true;
}

bool OAIList1::is_order_is_complete_Set() const{
    return m_order_is_complete_isSet;
}

bool OAIList1::is_order_is_complete_Valid() const{
    return m_order_is_complete_isValid;
}

QString OAIList1::getOrigin() const {
    return m_origin;
}
void OAIList1::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIList1::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIList1::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIList1::getPaymentNames() const {
    return m_payment_names;
}
void OAIList1::setPaymentNames(const QString &payment_names) {
    m_payment_names = payment_names;
    m_payment_names_isSet = true;
}

bool OAIList1::is_payment_names_Set() const{
    return m_payment_names_isSet;
}

bool OAIList1::is_payment_names_Valid() const{
    return m_payment_names_isValid;
}

QString OAIList1::getSalesChannel() const {
    return m_sales_channel;
}
void OAIList1::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAIList1::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAIList1::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

QString OAIList1::getSequence() const {
    return m_sequence;
}
void OAIList1::setSequence(const QString &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIList1::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIList1::is_sequence_Valid() const{
    return m_sequence_isValid;
}

QString OAIList1::getStatus() const {
    return m_status;
}
void OAIList1::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIList1::is_status_Set() const{
    return m_status_isSet;
}

bool OAIList1::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIList1::getStatusDescription() const {
    return m_status_description;
}
void OAIList1::setStatusDescription(const QString &status_description) {
    m_status_description = status_description;
    m_status_description_isSet = true;
}

bool OAIList1::is_status_description_Set() const{
    return m_status_description_isSet;
}

bool OAIList1::is_status_description_Valid() const{
    return m_status_description_isValid;
}

qint32 OAIList1::getTotalItems() const {
    return m_total_items;
}
void OAIList1::setTotalItems(const qint32 &total_items) {
    m_total_items = total_items;
    m_total_items_isSet = true;
}

bool OAIList1::is_total_items_Set() const{
    return m_total_items_isSet;
}

bool OAIList1::is_total_items_Valid() const{
    return m_total_items_isValid;
}

qint32 OAIList1::getTotalValue() const {
    return m_total_value;
}
void OAIList1::setTotalValue(const qint32 &total_value) {
    m_total_value = total_value;
    m_total_value_isSet = true;
}

bool OAIList1::is_total_value_Set() const{
    return m_total_value_isSet;
}

bool OAIList1::is_total_value_Valid() const{
    return m_total_value_isValid;
}

bool OAIList1::isWorkflowInErrorState() const {
    return m_workflow_in_error_state;
}
void OAIList1::setWorkflowInErrorState(const bool &workflow_in_error_state) {
    m_workflow_in_error_state = workflow_in_error_state;
    m_workflow_in_error_state_isSet = true;
}

bool OAIList1::is_workflow_in_error_state_Set() const{
    return m_workflow_in_error_state_isSet;
}

bool OAIList1::is_workflow_in_error_state_Valid() const{
    return m_workflow_in_error_state_isValid;
}

bool OAIList1::isWorkflowInRetry() const {
    return m_workflow_in_retry;
}
void OAIList1::setWorkflowInRetry(const bool &workflow_in_retry) {
    m_workflow_in_retry = workflow_in_retry;
    m_workflow_in_retry_isSet = true;
}

bool OAIList1::is_workflow_in_retry_Set() const{
    return m_workflow_in_retry_isSet;
}

bool OAIList1::is_workflow_in_retry_Valid() const{
    return m_workflow_in_retry_isValid;
}

bool OAIList1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shipping_estimated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_estimated_date_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_estimated_date_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_affiliate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorized_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_center_operator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_message_unread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_place_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_is_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_in_error_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_in_retry_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIList1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_shipping_estimated_date_isValid && m_shipping_estimated_date_max_isValid && m_shipping_estimated_date_min_isValid && m_affiliate_id_isValid && m_authorized_date_isValid && m_call_center_operator_name_isValid && m_client_name_isValid && m_creation_date_isValid && m_currency_code_isValid && m_items_isValid && m_last_message_unread_isValid && m_list_id_isValid && m_list_type_isValid && m_market_place_order_id_isValid && m_order_id_isValid && m_order_is_complete_isValid && m_origin_isValid && m_payment_names_isValid && m_sales_channel_isValid && m_sequence_isValid && m_status_isValid && m_status_description_isValid && m_total_items_isValid && m_total_value_isValid && m_workflow_in_error_state_isValid && m_workflow_in_retry_isValid && true;
}

} // namespace OpenAPI
