/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFeedConfiguration_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFeedConfiguration_200_response::OAIGetFeedConfiguration_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFeedConfiguration_200_response::OAIGetFeedConfiguration_200_response() {
    this->initializeModel();
}

OAIGetFeedConfiguration_200_response::~OAIGetFeedConfiguration_200_response() {}

void OAIGetFeedConfiguration_200_response::initializeModel() {

    m_approximate_age_of_oldest_message_in_seconds_isSet = false;
    m_approximate_age_of_oldest_message_in_seconds_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_queue_isSet = false;
    m_queue_isValid = false;
}

void OAIGetFeedConfiguration_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFeedConfiguration_200_response::fromJsonObject(QJsonObject json) {

    m_approximate_age_of_oldest_message_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_approximate_age_of_oldest_message_in_seconds, json[QString("approximateAgeOfOldestMessageInSeconds")]);
    m_approximate_age_of_oldest_message_in_seconds_isSet = !json[QString("approximateAgeOfOldestMessageInSeconds")].isNull() && m_approximate_age_of_oldest_message_in_seconds_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_queue_isValid = ::OpenAPI::fromJsonValue(m_queue, json[QString("queue")]);
    m_queue_isSet = !json[QString("queue")].isNull() && m_queue_isValid;
}

QString OAIGetFeedConfiguration_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFeedConfiguration_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_approximate_age_of_oldest_message_in_seconds_isSet) {
        obj.insert(QString("approximateAgeOfOldestMessageInSeconds"), ::OpenAPI::toJsonValue(m_approximate_age_of_oldest_message_in_seconds));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_queue.isSet()) {
        obj.insert(QString("queue"), ::OpenAPI::toJsonValue(m_queue));
    }
    return obj;
}

double OAIGetFeedConfiguration_200_response::getApproximateAgeOfOldestMessageInSeconds() const {
    return m_approximate_age_of_oldest_message_in_seconds;
}
void OAIGetFeedConfiguration_200_response::setApproximateAgeOfOldestMessageInSeconds(const double &approximate_age_of_oldest_message_in_seconds) {
    m_approximate_age_of_oldest_message_in_seconds = approximate_age_of_oldest_message_in_seconds;
    m_approximate_age_of_oldest_message_in_seconds_isSet = true;
}

bool OAIGetFeedConfiguration_200_response::is_approximate_age_of_oldest_message_in_seconds_Set() const{
    return m_approximate_age_of_oldest_message_in_seconds_isSet;
}

bool OAIGetFeedConfiguration_200_response::is_approximate_age_of_oldest_message_in_seconds_Valid() const{
    return m_approximate_age_of_oldest_message_in_seconds_isValid;
}

OAIGetFeedConfiguration_200_response_filter OAIGetFeedConfiguration_200_response::getFilter() const {
    return m_filter;
}
void OAIGetFeedConfiguration_200_response::setFilter(const OAIGetFeedConfiguration_200_response_filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGetFeedConfiguration_200_response::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGetFeedConfiguration_200_response::is_filter_Valid() const{
    return m_filter_isValid;
}

qint32 OAIGetFeedConfiguration_200_response::getQuantity() const {
    return m_quantity;
}
void OAIGetFeedConfiguration_200_response::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIGetFeedConfiguration_200_response::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIGetFeedConfiguration_200_response::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIGetFeedConfiguration_200_response_queue OAIGetFeedConfiguration_200_response::getQueue() const {
    return m_queue;
}
void OAIGetFeedConfiguration_200_response::setQueue(const OAIGetFeedConfiguration_200_response_queue &queue) {
    m_queue = queue;
    m_queue_isSet = true;
}

bool OAIGetFeedConfiguration_200_response::is_queue_Set() const{
    return m_queue_isSet;
}

bool OAIGetFeedConfiguration_200_response::is_queue_Valid() const{
    return m_queue_isValid;
}

bool OAIGetFeedConfiguration_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approximate_age_of_oldest_message_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFeedConfiguration_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
