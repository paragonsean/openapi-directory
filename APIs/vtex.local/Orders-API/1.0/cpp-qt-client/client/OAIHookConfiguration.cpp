/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHookConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHookConfiguration::OAIHookConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHookConfiguration::OAIHookConfiguration() {
    this->initializeModel();
}

OAIHookConfiguration::~OAIHookConfiguration() {}

void OAIHookConfiguration::initializeModel() {

    m_current_change_isSet = false;
    m_current_change_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_last_change_isSet = false;
    m_last_change_isValid = false;

    m_last_state_isSet = false;
    m_last_state_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIHookConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHookConfiguration::fromJsonObject(QJsonObject json) {

    m_current_change_isValid = ::OpenAPI::fromJsonValue(m_current_change, json[QString("CurrentChange")]);
    m_current_change_isSet = !json[QString("CurrentChange")].isNull() && m_current_change_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_last_change_isValid = ::OpenAPI::fromJsonValue(m_last_change, json[QString("LastChange")]);
    m_last_change_isSet = !json[QString("LastChange")].isNull() && m_last_change_isValid;

    m_last_state_isValid = ::OpenAPI::fromJsonValue(m_last_state, json[QString("LastState")]);
    m_last_state_isSet = !json[QString("LastState")].isNull() && m_last_state_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("OrderId")]);
    m_order_id_isSet = !json[QString("OrderId")].isNull() && m_order_id_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("Origin")]);
    m_origin_isSet = !json[QString("Origin")].isNull() && m_origin_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAIHookConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHookConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_current_change_isSet) {
        obj.insert(QString("CurrentChange"), ::OpenAPI::toJsonValue(m_current_change));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_last_change_isSet) {
        obj.insert(QString("LastChange"), ::OpenAPI::toJsonValue(m_last_change));
    }
    if (m_last_state_isSet) {
        obj.insert(QString("LastState"), ::OpenAPI::toJsonValue(m_last_state));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("OrderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_origin.isSet()) {
        obj.insert(QString("Origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIHookConfiguration::getCurrentChange() const {
    return m_current_change;
}
void OAIHookConfiguration::setCurrentChange(const QString &current_change) {
    m_current_change = current_change;
    m_current_change_isSet = true;
}

bool OAIHookConfiguration::is_current_change_Set() const{
    return m_current_change_isSet;
}

bool OAIHookConfiguration::is_current_change_Valid() const{
    return m_current_change_isValid;
}

QString OAIHookConfiguration::getDomain() const {
    return m_domain;
}
void OAIHookConfiguration::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIHookConfiguration::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIHookConfiguration::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIHookConfiguration::getLastChange() const {
    return m_last_change;
}
void OAIHookConfiguration::setLastChange(const QString &last_change) {
    m_last_change = last_change;
    m_last_change_isSet = true;
}

bool OAIHookConfiguration::is_last_change_Set() const{
    return m_last_change_isSet;
}

bool OAIHookConfiguration::is_last_change_Valid() const{
    return m_last_change_isValid;
}

QString OAIHookConfiguration::getLastState() const {
    return m_last_state;
}
void OAIHookConfiguration::setLastState(const QString &last_state) {
    m_last_state = last_state;
    m_last_state_isSet = true;
}

bool OAIHookConfiguration::is_last_state_Set() const{
    return m_last_state_isSet;
}

bool OAIHookConfiguration::is_last_state_Valid() const{
    return m_last_state_isValid;
}

QString OAIHookConfiguration::getOrderId() const {
    return m_order_id;
}
void OAIHookConfiguration::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIHookConfiguration::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIHookConfiguration::is_order_id_Valid() const{
    return m_order_id_isValid;
}

OAIOrigin2 OAIHookConfiguration::getOrigin() const {
    return m_origin;
}
void OAIHookConfiguration::setOrigin(const OAIOrigin2 &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIHookConfiguration::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIHookConfiguration::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIHookConfiguration::getState() const {
    return m_state;
}
void OAIHookConfiguration::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIHookConfiguration::is_state_Set() const{
    return m_state_isSet;
}

bool OAIHookConfiguration::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIHookConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHookConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_change_isValid && m_domain_isValid && m_last_change_isValid && m_last_state_isValid && m_order_id_isValid && m_origin_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
