/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrom.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrom::OAIFrom(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrom::OAIFrom() {
    this->initializeModel();
}

OAIFrom::~OAIFrom() {}

void OAIFrom::initializeModel() {

    m_alias_mask_type_isSet = false;
    m_alias_mask_type_isValid = false;

    m_conversation_related_to_isSet = false;
    m_conversation_related_to_isValid = false;

    m_conversation_subject_isSet = false;
    m_conversation_subject_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_alias_isSet = false;
    m_email_alias_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIFrom::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrom::fromJsonObject(QJsonObject json) {

    m_alias_mask_type_isValid = ::OpenAPI::fromJsonValue(m_alias_mask_type, json[QString("aliasMaskType")]);
    m_alias_mask_type_isSet = !json[QString("aliasMaskType")].isNull() && m_alias_mask_type_isValid;

    m_conversation_related_to_isValid = ::OpenAPI::fromJsonValue(m_conversation_related_to, json[QString("conversationRelatedTo")]);
    m_conversation_related_to_isSet = !json[QString("conversationRelatedTo")].isNull() && m_conversation_related_to_isValid;

    m_conversation_subject_isValid = ::OpenAPI::fromJsonValue(m_conversation_subject, json[QString("conversationSubject")]);
    m_conversation_subject_isSet = !json[QString("conversationSubject")].isNull() && m_conversation_subject_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_alias_isValid = ::OpenAPI::fromJsonValue(m_email_alias, json[QString("emailAlias")]);
    m_email_alias_isSet = !json[QString("emailAlias")].isNull() && m_email_alias_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIFrom::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrom::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_mask_type_isSet) {
        obj.insert(QString("aliasMaskType"), ::OpenAPI::toJsonValue(m_alias_mask_type));
    }
    if (m_conversation_related_to_isSet) {
        obj.insert(QString("conversationRelatedTo"), ::OpenAPI::toJsonValue(m_conversation_related_to));
    }
    if (m_conversation_subject_isSet) {
        obj.insert(QString("conversationSubject"), ::OpenAPI::toJsonValue(m_conversation_subject));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_email_alias_isSet) {
        obj.insert(QString("emailAlias"), ::OpenAPI::toJsonValue(m_email_alias));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

qint32 OAIFrom::getAliasMaskType() const {
    return m_alias_mask_type;
}
void OAIFrom::setAliasMaskType(const qint32 &alias_mask_type) {
    m_alias_mask_type = alias_mask_type;
    m_alias_mask_type_isSet = true;
}

bool OAIFrom::is_alias_mask_type_Set() const{
    return m_alias_mask_type_isSet;
}

bool OAIFrom::is_alias_mask_type_Valid() const{
    return m_alias_mask_type_isValid;
}

QString OAIFrom::getConversationRelatedTo() const {
    return m_conversation_related_to;
}
void OAIFrom::setConversationRelatedTo(const QString &conversation_related_to) {
    m_conversation_related_to = conversation_related_to;
    m_conversation_related_to_isSet = true;
}

bool OAIFrom::is_conversation_related_to_Set() const{
    return m_conversation_related_to_isSet;
}

bool OAIFrom::is_conversation_related_to_Valid() const{
    return m_conversation_related_to_isValid;
}

QString OAIFrom::getConversationSubject() const {
    return m_conversation_subject;
}
void OAIFrom::setConversationSubject(const QString &conversation_subject) {
    m_conversation_subject = conversation_subject;
    m_conversation_subject_isSet = true;
}

bool OAIFrom::is_conversation_subject_Set() const{
    return m_conversation_subject_isSet;
}

bool OAIFrom::is_conversation_subject_Valid() const{
    return m_conversation_subject_isValid;
}

QString OAIFrom::getEmail() const {
    return m_email;
}
void OAIFrom::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIFrom::is_email_Set() const{
    return m_email_isSet;
}

bool OAIFrom::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIFrom::getEmailAlias() const {
    return m_email_alias;
}
void OAIFrom::setEmailAlias(const QString &email_alias) {
    m_email_alias = email_alias;
    m_email_alias_isSet = true;
}

bool OAIFrom::is_email_alias_Set() const{
    return m_email_alias_isSet;
}

bool OAIFrom::is_email_alias_Valid() const{
    return m_email_alias_isValid;
}

QString OAIFrom::getName() const {
    return m_name;
}
void OAIFrom::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFrom::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFrom::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFrom::getRole() const {
    return m_role;
}
void OAIFrom::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIFrom::is_role_Set() const{
    return m_role_isSet;
}

bool OAIFrom::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIFrom::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_mask_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_related_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrom::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alias_mask_type_isValid && m_conversation_related_to_isValid && m_conversation_subject_isValid && m_email_isValid && m_email_alias_isValid && m_name_isValid && m_role_isValid && true;
}

} // namespace OpenAPI
