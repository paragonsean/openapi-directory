/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHook::OAIHook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHook::OAIHook() {
    this->initializeModel();
}

OAIHook::~OAIHook() {}

void OAIHook::initializeModel() {

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIHook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHook::fromJsonObject(QJsonObject json) {

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIHook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHook::asJsonObject() const {
    QJsonObject obj;
    if (m_headers.isSet()) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIHeaders OAIHook::getHeaders() const {
    return m_headers;
}
void OAIHook::setHeaders(const OAIHeaders &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIHook::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIHook::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIHook::getUrl() const {
    return m_url;
}
void OAIHook::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIHook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIHook::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIHook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHook::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_headers_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
