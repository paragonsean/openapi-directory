/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserorderdetails_subscriptionData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserorderdetails_subscriptionData::OAIUserorderdetails_subscriptionData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserorderdetails_subscriptionData::OAIUserorderdetails_subscriptionData() {
    this->initializeModel();
}

OAIUserorderdetails_subscriptionData::~OAIUserorderdetails_subscriptionData() {}

void OAIUserorderdetails_subscriptionData::initializeModel() {

    m_subscription_group_id_isSet = false;
    m_subscription_group_id_isValid = false;

    m_subscriptions_isSet = false;
    m_subscriptions_isValid = false;
}

void OAIUserorderdetails_subscriptionData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserorderdetails_subscriptionData::fromJsonObject(QJsonObject json) {

    m_subscription_group_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_group_id, json[QString("SubscriptionGroupId")]);
    m_subscription_group_id_isSet = !json[QString("SubscriptionGroupId")].isNull() && m_subscription_group_id_isValid;

    m_subscriptions_isValid = ::OpenAPI::fromJsonValue(m_subscriptions, json[QString("Subscriptions")]);
    m_subscriptions_isSet = !json[QString("Subscriptions")].isNull() && m_subscriptions_isValid;
}

QString OAIUserorderdetails_subscriptionData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserorderdetails_subscriptionData::asJsonObject() const {
    QJsonObject obj;
    if (m_subscription_group_id_isSet) {
        obj.insert(QString("SubscriptionGroupId"), ::OpenAPI::toJsonValue(m_subscription_group_id));
    }
    if (m_subscriptions.size() > 0) {
        obj.insert(QString("Subscriptions"), ::OpenAPI::toJsonValue(m_subscriptions));
    }
    return obj;
}

QString OAIUserorderdetails_subscriptionData::getSubscriptionGroupId() const {
    return m_subscription_group_id;
}
void OAIUserorderdetails_subscriptionData::setSubscriptionGroupId(const QString &subscription_group_id) {
    m_subscription_group_id = subscription_group_id;
    m_subscription_group_id_isSet = true;
}

bool OAIUserorderdetails_subscriptionData::is_subscription_group_id_Set() const{
    return m_subscription_group_id_isSet;
}

bool OAIUserorderdetails_subscriptionData::is_subscription_group_id_Valid() const{
    return m_subscription_group_id_isValid;
}

QList<OAIUserorderdetails_subscriptionData_Subscriptions_inner> OAIUserorderdetails_subscriptionData::getSubscriptions() const {
    return m_subscriptions;
}
void OAIUserorderdetails_subscriptionData::setSubscriptions(const QList<OAIUserorderdetails_subscriptionData_Subscriptions_inner> &subscriptions) {
    m_subscriptions = subscriptions;
    m_subscriptions_isSet = true;
}

bool OAIUserorderdetails_subscriptionData::is_subscriptions_Set() const{
    return m_subscriptions_isSet;
}

bool OAIUserorderdetails_subscriptionData::is_subscriptions_Valid() const{
    return m_subscriptions_isValid;
}

bool OAIUserorderdetails_subscriptionData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subscription_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserorderdetails_subscriptionData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subscription_group_id_isValid && m_subscriptions_isValid && true;
}

} // namespace OpenAPI
