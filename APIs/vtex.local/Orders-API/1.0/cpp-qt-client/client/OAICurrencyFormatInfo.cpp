/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrencyFormatInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrencyFormatInfo::OAICurrencyFormatInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrencyFormatInfo::OAICurrencyFormatInfo() {
    this->initializeModel();
}

OAICurrencyFormatInfo::~OAICurrencyFormatInfo() {}

void OAICurrencyFormatInfo::initializeModel() {

    m_currency_decimal_digits_isSet = false;
    m_currency_decimal_digits_isValid = false;

    m_currency_decimal_separator_isSet = false;
    m_currency_decimal_separator_isValid = false;

    m_currency_group_separator_isSet = false;
    m_currency_group_separator_isValid = false;

    m_currency_group_size_isSet = false;
    m_currency_group_size_isValid = false;

    m_starts_with_currency_symbol_isSet = false;
    m_starts_with_currency_symbol_isValid = false;
}

void OAICurrencyFormatInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrencyFormatInfo::fromJsonObject(QJsonObject json) {

    m_currency_decimal_digits_isValid = ::OpenAPI::fromJsonValue(m_currency_decimal_digits, json[QString("CurrencyDecimalDigits")]);
    m_currency_decimal_digits_isSet = !json[QString("CurrencyDecimalDigits")].isNull() && m_currency_decimal_digits_isValid;

    m_currency_decimal_separator_isValid = ::OpenAPI::fromJsonValue(m_currency_decimal_separator, json[QString("CurrencyDecimalSeparator")]);
    m_currency_decimal_separator_isSet = !json[QString("CurrencyDecimalSeparator")].isNull() && m_currency_decimal_separator_isValid;

    m_currency_group_separator_isValid = ::OpenAPI::fromJsonValue(m_currency_group_separator, json[QString("CurrencyGroupSeparator")]);
    m_currency_group_separator_isSet = !json[QString("CurrencyGroupSeparator")].isNull() && m_currency_group_separator_isValid;

    m_currency_group_size_isValid = ::OpenAPI::fromJsonValue(m_currency_group_size, json[QString("CurrencyGroupSize")]);
    m_currency_group_size_isSet = !json[QString("CurrencyGroupSize")].isNull() && m_currency_group_size_isValid;

    m_starts_with_currency_symbol_isValid = ::OpenAPI::fromJsonValue(m_starts_with_currency_symbol, json[QString("StartsWithCurrencySymbol")]);
    m_starts_with_currency_symbol_isSet = !json[QString("StartsWithCurrencySymbol")].isNull() && m_starts_with_currency_symbol_isValid;
}

QString OAICurrencyFormatInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrencyFormatInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_decimal_digits_isSet) {
        obj.insert(QString("CurrencyDecimalDigits"), ::OpenAPI::toJsonValue(m_currency_decimal_digits));
    }
    if (m_currency_decimal_separator_isSet) {
        obj.insert(QString("CurrencyDecimalSeparator"), ::OpenAPI::toJsonValue(m_currency_decimal_separator));
    }
    if (m_currency_group_separator_isSet) {
        obj.insert(QString("CurrencyGroupSeparator"), ::OpenAPI::toJsonValue(m_currency_group_separator));
    }
    if (m_currency_group_size_isSet) {
        obj.insert(QString("CurrencyGroupSize"), ::OpenAPI::toJsonValue(m_currency_group_size));
    }
    if (m_starts_with_currency_symbol_isSet) {
        obj.insert(QString("StartsWithCurrencySymbol"), ::OpenAPI::toJsonValue(m_starts_with_currency_symbol));
    }
    return obj;
}

qint32 OAICurrencyFormatInfo::getCurrencyDecimalDigits() const {
    return m_currency_decimal_digits;
}
void OAICurrencyFormatInfo::setCurrencyDecimalDigits(const qint32 &currency_decimal_digits) {
    m_currency_decimal_digits = currency_decimal_digits;
    m_currency_decimal_digits_isSet = true;
}

bool OAICurrencyFormatInfo::is_currency_decimal_digits_Set() const{
    return m_currency_decimal_digits_isSet;
}

bool OAICurrencyFormatInfo::is_currency_decimal_digits_Valid() const{
    return m_currency_decimal_digits_isValid;
}

QString OAICurrencyFormatInfo::getCurrencyDecimalSeparator() const {
    return m_currency_decimal_separator;
}
void OAICurrencyFormatInfo::setCurrencyDecimalSeparator(const QString &currency_decimal_separator) {
    m_currency_decimal_separator = currency_decimal_separator;
    m_currency_decimal_separator_isSet = true;
}

bool OAICurrencyFormatInfo::is_currency_decimal_separator_Set() const{
    return m_currency_decimal_separator_isSet;
}

bool OAICurrencyFormatInfo::is_currency_decimal_separator_Valid() const{
    return m_currency_decimal_separator_isValid;
}

QString OAICurrencyFormatInfo::getCurrencyGroupSeparator() const {
    return m_currency_group_separator;
}
void OAICurrencyFormatInfo::setCurrencyGroupSeparator(const QString &currency_group_separator) {
    m_currency_group_separator = currency_group_separator;
    m_currency_group_separator_isSet = true;
}

bool OAICurrencyFormatInfo::is_currency_group_separator_Set() const{
    return m_currency_group_separator_isSet;
}

bool OAICurrencyFormatInfo::is_currency_group_separator_Valid() const{
    return m_currency_group_separator_isValid;
}

qint32 OAICurrencyFormatInfo::getCurrencyGroupSize() const {
    return m_currency_group_size;
}
void OAICurrencyFormatInfo::setCurrencyGroupSize(const qint32 &currency_group_size) {
    m_currency_group_size = currency_group_size;
    m_currency_group_size_isSet = true;
}

bool OAICurrencyFormatInfo::is_currency_group_size_Set() const{
    return m_currency_group_size_isSet;
}

bool OAICurrencyFormatInfo::is_currency_group_size_Valid() const{
    return m_currency_group_size_isValid;
}

bool OAICurrencyFormatInfo::isStartsWithCurrencySymbol() const {
    return m_starts_with_currency_symbol;
}
void OAICurrencyFormatInfo::setStartsWithCurrencySymbol(const bool &starts_with_currency_symbol) {
    m_starts_with_currency_symbol = starts_with_currency_symbol;
    m_starts_with_currency_symbol_isSet = true;
}

bool OAICurrencyFormatInfo::is_starts_with_currency_symbol_Set() const{
    return m_starts_with_currency_symbol_isSet;
}

bool OAICurrencyFormatInfo::is_starts_with_currency_symbol_Valid() const{
    return m_starts_with_currency_symbol_isValid;
}

bool OAICurrencyFormatInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_decimal_digits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_decimal_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_group_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_group_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starts_with_currency_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrencyFormatInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_decimal_digits_isValid && m_currency_decimal_separator_isValid && m_currency_group_separator_isValid && m_currency_group_size_isValid && m_starts_with_currency_symbol_isValid && true;
}

} // namespace OpenAPI
