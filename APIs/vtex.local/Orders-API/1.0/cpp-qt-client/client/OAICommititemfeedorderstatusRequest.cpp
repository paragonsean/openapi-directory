/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommititemfeedorderstatusRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommititemfeedorderstatusRequest::OAICommititemfeedorderstatusRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommititemfeedorderstatusRequest::OAICommititemfeedorderstatusRequest() {
    this->initializeModel();
}

OAICommititemfeedorderstatusRequest::~OAICommititemfeedorderstatusRequest() {}

void OAICommititemfeedorderstatusRequest::initializeModel() {

    m_handles_isSet = false;
    m_handles_isValid = false;
}

void OAICommititemfeedorderstatusRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommititemfeedorderstatusRequest::fromJsonObject(QJsonObject json) {

    m_handles_isValid = ::OpenAPI::fromJsonValue(m_handles, json[QString("handles")]);
    m_handles_isSet = !json[QString("handles")].isNull() && m_handles_isValid;
}

QString OAICommititemfeedorderstatusRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommititemfeedorderstatusRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_handles.size() > 0) {
        obj.insert(QString("handles"), ::OpenAPI::toJsonValue(m_handles));
    }
    return obj;
}

QList<QString> OAICommititemfeedorderstatusRequest::getHandles() const {
    return m_handles;
}
void OAICommititemfeedorderstatusRequest::setHandles(const QList<QString> &handles) {
    m_handles = handles;
    m_handles_isSet = true;
}

bool OAICommititemfeedorderstatusRequest::is_handles_Set() const{
    return m_handles_isSet;
}

bool OAICommititemfeedorderstatusRequest::is_handles_Valid() const{
    return m_handles_isValid;
}

bool OAICommititemfeedorderstatusRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_handles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommititemfeedorderstatusRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_handles_isValid && true;
}

} // namespace OpenAPI
