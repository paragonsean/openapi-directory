/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetConversation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetConversation::OAIGetConversation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetConversation::OAIGetConversation() {
    this->initializeModel();
}

OAIGetConversation::~OAIGetConversation() {}

void OAIGetConversation::initializeModel() {

    m_attachment_names_isSet = false;
    m_attachment_names_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_first_words_isSet = false;
    m_first_words_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_has_attachment_isSet = false;
    m_has_attachment_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIGetConversation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetConversation::fromJsonObject(QJsonObject json) {

    m_attachment_names_isValid = ::OpenAPI::fromJsonValue(m_attachment_names, json[QString("attachmentNames")]);
    m_attachment_names_isSet = !json[QString("attachmentNames")].isNull() && m_attachment_names_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_first_words_isValid = ::OpenAPI::fromJsonValue(m_first_words, json[QString("firstWords")]);
    m_first_words_isSet = !json[QString("firstWords")].isNull() && m_first_words_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_has_attachment_isValid = ::OpenAPI::fromJsonValue(m_has_attachment, json[QString("hasAttachment")]);
    m_has_attachment_isSet = !json[QString("hasAttachment")].isNull() && m_has_attachment_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIGetConversation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetConversation::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment_names.size() > 0) {
        obj.insert(QString("attachmentNames"), ::OpenAPI::toJsonValue(m_attachment_names));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_first_words_isSet) {
        obj.insert(QString("firstWords"), ::OpenAPI::toJsonValue(m_first_words));
    }
    if (m_from.isSet()) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_has_attachment_isSet) {
        obj.insert(QString("hasAttachment"), ::OpenAPI::toJsonValue(m_has_attachment));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_to.size() > 0) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

QList<QString> OAIGetConversation::getAttachmentNames() const {
    return m_attachment_names;
}
void OAIGetConversation::setAttachmentNames(const QList<QString> &attachment_names) {
    m_attachment_names = attachment_names;
    m_attachment_names_isSet = true;
}

bool OAIGetConversation::is_attachment_names_Set() const{
    return m_attachment_names_isSet;
}

bool OAIGetConversation::is_attachment_names_Valid() const{
    return m_attachment_names_isValid;
}

QString OAIGetConversation::getBody() const {
    return m_body;
}
void OAIGetConversation::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIGetConversation::is_body_Set() const{
    return m_body_isSet;
}

bool OAIGetConversation::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIGetConversation::getDate() const {
    return m_date;
}
void OAIGetConversation::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGetConversation::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGetConversation::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIGetConversation::getFirstWords() const {
    return m_first_words;
}
void OAIGetConversation::setFirstWords(const QString &first_words) {
    m_first_words = first_words;
    m_first_words_isSet = true;
}

bool OAIGetConversation::is_first_words_Set() const{
    return m_first_words_isSet;
}

bool OAIGetConversation::is_first_words_Valid() const{
    return m_first_words_isValid;
}

OAIFrom OAIGetConversation::getFrom() const {
    return m_from;
}
void OAIGetConversation::setFrom(const OAIFrom &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIGetConversation::is_from_Set() const{
    return m_from_isSet;
}

bool OAIGetConversation::is_from_Valid() const{
    return m_from_isValid;
}

bool OAIGetConversation::isHasAttachment() const {
    return m_has_attachment;
}
void OAIGetConversation::setHasAttachment(const bool &has_attachment) {
    m_has_attachment = has_attachment;
    m_has_attachment_isSet = true;
}

bool OAIGetConversation::is_has_attachment_Set() const{
    return m_has_attachment_isSet;
}

bool OAIGetConversation::is_has_attachment_Valid() const{
    return m_has_attachment_isValid;
}

QString OAIGetConversation::getId() const {
    return m_id;
}
void OAIGetConversation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetConversation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetConversation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetConversation::getSubject() const {
    return m_subject;
}
void OAIGetConversation::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIGetConversation::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIGetConversation::is_subject_Valid() const{
    return m_subject_isValid;
}

QList<OAITo> OAIGetConversation::getTo() const {
    return m_to;
}
void OAIGetConversation::setTo(const QList<OAITo> &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIGetConversation::is_to_Set() const{
    return m_to_isSet;
}

bool OAIGetConversation::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIGetConversation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_words_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetConversation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attachment_names_isValid && m_body_isValid && m_date_isValid && m_first_words_isValid && m_from_isValid && m_has_attachment_isValid && m_id_isValid && m_subject_isValid && m_to_isValid && true;
}

} // namespace OpenAPI
