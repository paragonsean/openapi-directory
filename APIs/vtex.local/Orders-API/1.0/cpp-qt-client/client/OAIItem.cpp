/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_assemblies_isSet = false;
    m_assemblies_isValid = false;

    m_attachment_offerings_isSet = false;
    m_attachment_offerings_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_bundle_items_isSet = false;
    m_bundle_items_isValid = false;

    m_call_center_operator_isSet = false;
    m_call_center_operator_isValid = false;

    m_commission_isSet = false;
    m_commission_isValid = false;

    m_components_isSet = false;
    m_components_isValid = false;

    m_cost_price_isSet = false;
    m_cost_price_isValid = false;

    m_detail_url_isSet = false;
    m_detail_url_isValid = false;

    m_ean_isSet = false;
    m_ean_isValid = false;

    m_freight_commission_isSet = false;
    m_freight_commission_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_is_gift_isSet = false;
    m_is_gift_isValid = false;

    m_item_attachment_isSet = false;
    m_item_attachment_isValid = false;

    m_list_price_isSet = false;
    m_list_price_isValid = false;

    m_lock_id_isSet = false;
    m_lock_id_isValid = false;

    m_manual_price_isSet = false;
    m_manual_price_isValid = false;

    m_measurement_unit_isSet = false;
    m_measurement_unit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_offerings_isSet = false;
    m_offerings_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_parent_assembly_binding_isSet = false;
    m_parent_assembly_binding_isValid = false;

    m_parent_item_index_isSet = false;
    m_parent_item_index_isValid = false;

    m_pre_sale_date_isSet = false;
    m_pre_sale_date_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_price_definitions_isSet = false;
    m_price_definitions_isValid = false;

    m_price_tags_isSet = false;
    m_price_tags_isValid = false;

    m_price_valid_until_isSet = false;
    m_price_valid_until_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_ref_id_isSet = false;
    m_ref_id_isValid = false;

    m_reward_value_isSet = false;
    m_reward_value_isValid = false;

    m_seller_isSet = false;
    m_seller_isValid = false;

    m_seller_sku_isSet = false;
    m_seller_sku_isValid = false;

    m_selling_price_isSet = false;
    m_selling_price_isValid = false;

    m_serial_numbers_isSet = false;
    m_serial_numbers_isValid = false;

    m_shipping_price_isSet = false;
    m_shipping_price_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_tax_code_isSet = false;
    m_tax_code_isValid = false;

    m_unique_id_isSet = false;
    m_unique_id_isValid = false;

    m_unit_multiplier_isSet = false;
    m_unit_multiplier_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_additional_info_isValid = ::OpenAPI::fromJsonValue(m_additional_info, json[QString("additionalInfo")]);
    m_additional_info_isSet = !json[QString("additionalInfo")].isNull() && m_additional_info_isValid;

    m_assemblies_isValid = ::OpenAPI::fromJsonValue(m_assemblies, json[QString("assemblies")]);
    m_assemblies_isSet = !json[QString("assemblies")].isNull() && m_assemblies_isValid;

    m_attachment_offerings_isValid = ::OpenAPI::fromJsonValue(m_attachment_offerings, json[QString("attachmentOfferings")]);
    m_attachment_offerings_isSet = !json[QString("attachmentOfferings")].isNull() && m_attachment_offerings_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_bundle_items_isValid = ::OpenAPI::fromJsonValue(m_bundle_items, json[QString("bundleItems")]);
    m_bundle_items_isSet = !json[QString("bundleItems")].isNull() && m_bundle_items_isValid;

    m_call_center_operator_isValid = ::OpenAPI::fromJsonValue(m_call_center_operator, json[QString("callCenterOperator")]);
    m_call_center_operator_isSet = !json[QString("callCenterOperator")].isNull() && m_call_center_operator_isValid;

    m_commission_isValid = ::OpenAPI::fromJsonValue(m_commission, json[QString("commission")]);
    m_commission_isSet = !json[QString("commission")].isNull() && m_commission_isValid;

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("components")]);
    m_components_isSet = !json[QString("components")].isNull() && m_components_isValid;

    m_cost_price_isValid = ::OpenAPI::fromJsonValue(m_cost_price, json[QString("costPrice")]);
    m_cost_price_isSet = !json[QString("costPrice")].isNull() && m_cost_price_isValid;

    m_detail_url_isValid = ::OpenAPI::fromJsonValue(m_detail_url, json[QString("detailUrl")]);
    m_detail_url_isSet = !json[QString("detailUrl")].isNull() && m_detail_url_isValid;

    m_ean_isValid = ::OpenAPI::fromJsonValue(m_ean, json[QString("ean")]);
    m_ean_isSet = !json[QString("ean")].isNull() && m_ean_isValid;

    m_freight_commission_isValid = ::OpenAPI::fromJsonValue(m_freight_commission, json[QString("freightCommission")]);
    m_freight_commission_isSet = !json[QString("freightCommission")].isNull() && m_freight_commission_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_is_gift_isValid = ::OpenAPI::fromJsonValue(m_is_gift, json[QString("isGift")]);
    m_is_gift_isSet = !json[QString("isGift")].isNull() && m_is_gift_isValid;

    m_item_attachment_isValid = ::OpenAPI::fromJsonValue(m_item_attachment, json[QString("itemAttachment")]);
    m_item_attachment_isSet = !json[QString("itemAttachment")].isNull() && m_item_attachment_isValid;

    m_list_price_isValid = ::OpenAPI::fromJsonValue(m_list_price, json[QString("listPrice")]);
    m_list_price_isSet = !json[QString("listPrice")].isNull() && m_list_price_isValid;

    m_lock_id_isValid = ::OpenAPI::fromJsonValue(m_lock_id, json[QString("lockId")]);
    m_lock_id_isSet = !json[QString("lockId")].isNull() && m_lock_id_isValid;

    m_manual_price_isValid = ::OpenAPI::fromJsonValue(m_manual_price, json[QString("manualPrice")]);
    m_manual_price_isSet = !json[QString("manualPrice")].isNull() && m_manual_price_isValid;

    m_measurement_unit_isValid = ::OpenAPI::fromJsonValue(m_measurement_unit, json[QString("measurementUnit")]);
    m_measurement_unit_isSet = !json[QString("measurementUnit")].isNull() && m_measurement_unit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_offerings_isValid = ::OpenAPI::fromJsonValue(m_offerings, json[QString("offerings")]);
    m_offerings_isSet = !json[QString("offerings")].isNull() && m_offerings_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_parent_assembly_binding_isValid = ::OpenAPI::fromJsonValue(m_parent_assembly_binding, json[QString("parentAssemblyBinding")]);
    m_parent_assembly_binding_isSet = !json[QString("parentAssemblyBinding")].isNull() && m_parent_assembly_binding_isValid;

    m_parent_item_index_isValid = ::OpenAPI::fromJsonValue(m_parent_item_index, json[QString("parentItemIndex")]);
    m_parent_item_index_isSet = !json[QString("parentItemIndex")].isNull() && m_parent_item_index_isValid;

    m_pre_sale_date_isValid = ::OpenAPI::fromJsonValue(m_pre_sale_date, json[QString("preSaleDate")]);
    m_pre_sale_date_isSet = !json[QString("preSaleDate")].isNull() && m_pre_sale_date_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_price_definitions_isValid = ::OpenAPI::fromJsonValue(m_price_definitions, json[QString("priceDefinitions")]);
    m_price_definitions_isSet = !json[QString("priceDefinitions")].isNull() && m_price_definitions_isValid;

    m_price_tags_isValid = ::OpenAPI::fromJsonValue(m_price_tags, json[QString("priceTags")]);
    m_price_tags_isSet = !json[QString("priceTags")].isNull() && m_price_tags_isValid;

    m_price_valid_until_isValid = ::OpenAPI::fromJsonValue(m_price_valid_until, json[QString("priceValidUntil")]);
    m_price_valid_until_isSet = !json[QString("priceValidUntil")].isNull() && m_price_valid_until_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_ref_id_isValid = ::OpenAPI::fromJsonValue(m_ref_id, json[QString("refId")]);
    m_ref_id_isSet = !json[QString("refId")].isNull() && m_ref_id_isValid;

    m_reward_value_isValid = ::OpenAPI::fromJsonValue(m_reward_value, json[QString("rewardValue")]);
    m_reward_value_isSet = !json[QString("rewardValue")].isNull() && m_reward_value_isValid;

    m_seller_isValid = ::OpenAPI::fromJsonValue(m_seller, json[QString("seller")]);
    m_seller_isSet = !json[QString("seller")].isNull() && m_seller_isValid;

    m_seller_sku_isValid = ::OpenAPI::fromJsonValue(m_seller_sku, json[QString("sellerSku")]);
    m_seller_sku_isSet = !json[QString("sellerSku")].isNull() && m_seller_sku_isValid;

    m_selling_price_isValid = ::OpenAPI::fromJsonValue(m_selling_price, json[QString("sellingPrice")]);
    m_selling_price_isSet = !json[QString("sellingPrice")].isNull() && m_selling_price_isValid;

    m_serial_numbers_isValid = ::OpenAPI::fromJsonValue(m_serial_numbers, json[QString("serialNumbers")]);
    m_serial_numbers_isSet = !json[QString("serialNumbers")].isNull() && m_serial_numbers_isValid;

    m_shipping_price_isValid = ::OpenAPI::fromJsonValue(m_shipping_price, json[QString("shippingPrice")]);
    m_shipping_price_isSet = !json[QString("shippingPrice")].isNull() && m_shipping_price_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_tax_code_isValid = ::OpenAPI::fromJsonValue(m_tax_code, json[QString("taxCode")]);
    m_tax_code_isSet = !json[QString("taxCode")].isNull() && m_tax_code_isValid;

    m_unique_id_isValid = ::OpenAPI::fromJsonValue(m_unique_id, json[QString("uniqueId")]);
    m_unique_id_isSet = !json[QString("uniqueId")].isNull() && m_unique_id_isValid;

    m_unit_multiplier_isValid = ::OpenAPI::fromJsonValue(m_unit_multiplier, json[QString("unitMultiplier")]);
    m_unit_multiplier_isSet = !json[QString("unitMultiplier")].isNull() && m_unit_multiplier_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_info.isSet()) {
        obj.insert(QString("additionalInfo"), ::OpenAPI::toJsonValue(m_additional_info));
    }
    if (m_assemblies.size() > 0) {
        obj.insert(QString("assemblies"), ::OpenAPI::toJsonValue(m_assemblies));
    }
    if (m_attachment_offerings.size() > 0) {
        obj.insert(QString("attachmentOfferings"), ::OpenAPI::toJsonValue(m_attachment_offerings));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_bundle_items.size() > 0) {
        obj.insert(QString("bundleItems"), ::OpenAPI::toJsonValue(m_bundle_items));
    }
    if (m_call_center_operator_isSet) {
        obj.insert(QString("callCenterOperator"), ::OpenAPI::toJsonValue(m_call_center_operator));
    }
    if (m_commission_isSet) {
        obj.insert(QString("commission"), ::OpenAPI::toJsonValue(m_commission));
    }
    if (m_components.size() > 0) {
        obj.insert(QString("components"), ::OpenAPI::toJsonValue(m_components));
    }
    if (m_cost_price_isSet) {
        obj.insert(QString("costPrice"), ::OpenAPI::toJsonValue(m_cost_price));
    }
    if (m_detail_url_isSet) {
        obj.insert(QString("detailUrl"), ::OpenAPI::toJsonValue(m_detail_url));
    }
    if (m_ean_isSet) {
        obj.insert(QString("ean"), ::OpenAPI::toJsonValue(m_ean));
    }
    if (m_freight_commission_isSet) {
        obj.insert(QString("freightCommission"), ::OpenAPI::toJsonValue(m_freight_commission));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_is_gift_isSet) {
        obj.insert(QString("isGift"), ::OpenAPI::toJsonValue(m_is_gift));
    }
    if (m_item_attachment.isSet()) {
        obj.insert(QString("itemAttachment"), ::OpenAPI::toJsonValue(m_item_attachment));
    }
    if (m_list_price_isSet) {
        obj.insert(QString("listPrice"), ::OpenAPI::toJsonValue(m_list_price));
    }
    if (m_lock_id_isSet) {
        obj.insert(QString("lockId"), ::OpenAPI::toJsonValue(m_lock_id));
    }
    if (m_manual_price_isSet) {
        obj.insert(QString("manualPrice"), ::OpenAPI::toJsonValue(m_manual_price));
    }
    if (m_measurement_unit_isSet) {
        obj.insert(QString("measurementUnit"), ::OpenAPI::toJsonValue(m_measurement_unit));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_offerings.size() > 0) {
        obj.insert(QString("offerings"), ::OpenAPI::toJsonValue(m_offerings));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_parent_assembly_binding_isSet) {
        obj.insert(QString("parentAssemblyBinding"), ::OpenAPI::toJsonValue(m_parent_assembly_binding));
    }
    if (m_parent_item_index_isSet) {
        obj.insert(QString("parentItemIndex"), ::OpenAPI::toJsonValue(m_parent_item_index));
    }
    if (m_pre_sale_date_isSet) {
        obj.insert(QString("preSaleDate"), ::OpenAPI::toJsonValue(m_pre_sale_date));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_price_definitions.isSet()) {
        obj.insert(QString("priceDefinitions"), ::OpenAPI::toJsonValue(m_price_definitions));
    }
    if (m_price_tags.size() > 0) {
        obj.insert(QString("priceTags"), ::OpenAPI::toJsonValue(m_price_tags));
    }
    if (m_price_valid_until_isSet) {
        obj.insert(QString("priceValidUntil"), ::OpenAPI::toJsonValue(m_price_valid_until));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_ref_id_isSet) {
        obj.insert(QString("refId"), ::OpenAPI::toJsonValue(m_ref_id));
    }
    if (m_reward_value_isSet) {
        obj.insert(QString("rewardValue"), ::OpenAPI::toJsonValue(m_reward_value));
    }
    if (m_seller_isSet) {
        obj.insert(QString("seller"), ::OpenAPI::toJsonValue(m_seller));
    }
    if (m_seller_sku_isSet) {
        obj.insert(QString("sellerSku"), ::OpenAPI::toJsonValue(m_seller_sku));
    }
    if (m_selling_price_isSet) {
        obj.insert(QString("sellingPrice"), ::OpenAPI::toJsonValue(m_selling_price));
    }
    if (m_serial_numbers_isSet) {
        obj.insert(QString("serialNumbers"), ::OpenAPI::toJsonValue(m_serial_numbers));
    }
    if (m_shipping_price_isSet) {
        obj.insert(QString("shippingPrice"), ::OpenAPI::toJsonValue(m_shipping_price));
    }
    if (m_tax_isSet) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_tax_code_isSet) {
        obj.insert(QString("taxCode"), ::OpenAPI::toJsonValue(m_tax_code));
    }
    if (m_unique_id_isSet) {
        obj.insert(QString("uniqueId"), ::OpenAPI::toJsonValue(m_unique_id));
    }
    if (m_unit_multiplier_isSet) {
        obj.insert(QString("unitMultiplier"), ::OpenAPI::toJsonValue(m_unit_multiplier));
    }
    return obj;
}

OAIAdditionalInfo OAIItem::getAdditionalInfo() const {
    return m_additional_info;
}
void OAIItem::setAdditionalInfo(const OAIAdditionalInfo &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAIItem::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAIItem::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

QList<QJsonValue> OAIItem::getAssemblies() const {
    return m_assemblies;
}
void OAIItem::setAssemblies(const QList<QJsonValue> &assemblies) {
    m_assemblies = assemblies;
    m_assemblies_isSet = true;
}

bool OAIItem::is_assemblies_Set() const{
    return m_assemblies_isSet;
}

bool OAIItem::is_assemblies_Valid() const{
    return m_assemblies_isValid;
}

QList<OAIItem_attachmentOfferings_inner> OAIItem::getAttachmentOfferings() const {
    return m_attachment_offerings;
}
void OAIItem::setAttachmentOfferings(const QList<OAIItem_attachmentOfferings_inner> &attachment_offerings) {
    m_attachment_offerings = attachment_offerings;
    m_attachment_offerings_isSet = true;
}

bool OAIItem::is_attachment_offerings_Set() const{
    return m_attachment_offerings_isSet;
}

bool OAIItem::is_attachment_offerings_Valid() const{
    return m_attachment_offerings_isValid;
}

QList<QString> OAIItem::getAttachments() const {
    return m_attachments;
}
void OAIItem::setAttachments(const QList<QString> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIItem::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIItem::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QList<QString> OAIItem::getBundleItems() const {
    return m_bundle_items;
}
void OAIItem::setBundleItems(const QList<QString> &bundle_items) {
    m_bundle_items = bundle_items;
    m_bundle_items_isSet = true;
}

bool OAIItem::is_bundle_items_Set() const{
    return m_bundle_items_isSet;
}

bool OAIItem::is_bundle_items_Valid() const{
    return m_bundle_items_isValid;
}

QString OAIItem::getCallCenterOperator() const {
    return m_call_center_operator;
}
void OAIItem::setCallCenterOperator(const QString &call_center_operator) {
    m_call_center_operator = call_center_operator;
    m_call_center_operator_isSet = true;
}

bool OAIItem::is_call_center_operator_Set() const{
    return m_call_center_operator_isSet;
}

bool OAIItem::is_call_center_operator_Valid() const{
    return m_call_center_operator_isValid;
}

qint32 OAIItem::getCommission() const {
    return m_commission;
}
void OAIItem::setCommission(const qint32 &commission) {
    m_commission = commission;
    m_commission_isSet = true;
}

bool OAIItem::is_commission_Set() const{
    return m_commission_isSet;
}

bool OAIItem::is_commission_Valid() const{
    return m_commission_isValid;
}

QList<QString> OAIItem::getComponents() const {
    return m_components;
}
void OAIItem::setComponents(const QList<QString> &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAIItem::is_components_Set() const{
    return m_components_isSet;
}

bool OAIItem::is_components_Valid() const{
    return m_components_isValid;
}

qint32 OAIItem::getCostPrice() const {
    return m_cost_price;
}
void OAIItem::setCostPrice(const qint32 &cost_price) {
    m_cost_price = cost_price;
    m_cost_price_isSet = true;
}

bool OAIItem::is_cost_price_Set() const{
    return m_cost_price_isSet;
}

bool OAIItem::is_cost_price_Valid() const{
    return m_cost_price_isValid;
}

QString OAIItem::getDetailUrl() const {
    return m_detail_url;
}
void OAIItem::setDetailUrl(const QString &detail_url) {
    m_detail_url = detail_url;
    m_detail_url_isSet = true;
}

bool OAIItem::is_detail_url_Set() const{
    return m_detail_url_isSet;
}

bool OAIItem::is_detail_url_Valid() const{
    return m_detail_url_isValid;
}

QString OAIItem::getEan() const {
    return m_ean;
}
void OAIItem::setEan(const QString &ean) {
    m_ean = ean;
    m_ean_isSet = true;
}

bool OAIItem::is_ean_Set() const{
    return m_ean_isSet;
}

bool OAIItem::is_ean_Valid() const{
    return m_ean_isValid;
}

qint32 OAIItem::getFreightCommission() const {
    return m_freight_commission;
}
void OAIItem::setFreightCommission(const qint32 &freight_commission) {
    m_freight_commission = freight_commission;
    m_freight_commission_isSet = true;
}

bool OAIItem::is_freight_commission_Set() const{
    return m_freight_commission_isSet;
}

bool OAIItem::is_freight_commission_Valid() const{
    return m_freight_commission_isValid;
}

QString OAIItem::getId() const {
    return m_id;
}
void OAIItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIItem::getImageUrl() const {
    return m_image_url;
}
void OAIItem::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIItem::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIItem::is_image_url_Valid() const{
    return m_image_url_isValid;
}

bool OAIItem::isIsGift() const {
    return m_is_gift;
}
void OAIItem::setIsGift(const bool &is_gift) {
    m_is_gift = is_gift;
    m_is_gift_isSet = true;
}

bool OAIItem::is_is_gift_Set() const{
    return m_is_gift_isSet;
}

bool OAIItem::is_is_gift_Valid() const{
    return m_is_gift_isValid;
}

OAIItemAttachment OAIItem::getItemAttachment() const {
    return m_item_attachment;
}
void OAIItem::setItemAttachment(const OAIItemAttachment &item_attachment) {
    m_item_attachment = item_attachment;
    m_item_attachment_isSet = true;
}

bool OAIItem::is_item_attachment_Set() const{
    return m_item_attachment_isSet;
}

bool OAIItem::is_item_attachment_Valid() const{
    return m_item_attachment_isValid;
}

qint32 OAIItem::getListPrice() const {
    return m_list_price;
}
void OAIItem::setListPrice(const qint32 &list_price) {
    m_list_price = list_price;
    m_list_price_isSet = true;
}

bool OAIItem::is_list_price_Set() const{
    return m_list_price_isSet;
}

bool OAIItem::is_list_price_Valid() const{
    return m_list_price_isValid;
}

QString OAIItem::getLockId() const {
    return m_lock_id;
}
void OAIItem::setLockId(const QString &lock_id) {
    m_lock_id = lock_id;
    m_lock_id_isSet = true;
}

bool OAIItem::is_lock_id_Set() const{
    return m_lock_id_isSet;
}

bool OAIItem::is_lock_id_Valid() const{
    return m_lock_id_isValid;
}

QString OAIItem::getManualPrice() const {
    return m_manual_price;
}
void OAIItem::setManualPrice(const QString &manual_price) {
    m_manual_price = manual_price;
    m_manual_price_isSet = true;
}

bool OAIItem::is_manual_price_Set() const{
    return m_manual_price_isSet;
}

bool OAIItem::is_manual_price_Valid() const{
    return m_manual_price_isValid;
}

QString OAIItem::getMeasurementUnit() const {
    return m_measurement_unit;
}
void OAIItem::setMeasurementUnit(const QString &measurement_unit) {
    m_measurement_unit = measurement_unit;
    m_measurement_unit_isSet = true;
}

bool OAIItem::is_measurement_unit_Set() const{
    return m_measurement_unit_isSet;
}

bool OAIItem::is_measurement_unit_Valid() const{
    return m_measurement_unit_isValid;
}

QString OAIItem::getName() const {
    return m_name;
}
void OAIItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItem::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIItem::getOfferings() const {
    return m_offerings;
}
void OAIItem::setOfferings(const QList<QString> &offerings) {
    m_offerings = offerings;
    m_offerings_isSet = true;
}

bool OAIItem::is_offerings_Set() const{
    return m_offerings_isSet;
}

bool OAIItem::is_offerings_Valid() const{
    return m_offerings_isValid;
}

QList<QString> OAIItem::getParams() const {
    return m_params;
}
void OAIItem::setParams(const QList<QString> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIItem::is_params_Set() const{
    return m_params_isSet;
}

bool OAIItem::is_params_Valid() const{
    return m_params_isValid;
}

QString OAIItem::getParentAssemblyBinding() const {
    return m_parent_assembly_binding;
}
void OAIItem::setParentAssemblyBinding(const QString &parent_assembly_binding) {
    m_parent_assembly_binding = parent_assembly_binding;
    m_parent_assembly_binding_isSet = true;
}

bool OAIItem::is_parent_assembly_binding_Set() const{
    return m_parent_assembly_binding_isSet;
}

bool OAIItem::is_parent_assembly_binding_Valid() const{
    return m_parent_assembly_binding_isValid;
}

QString OAIItem::getParentItemIndex() const {
    return m_parent_item_index;
}
void OAIItem::setParentItemIndex(const QString &parent_item_index) {
    m_parent_item_index = parent_item_index;
    m_parent_item_index_isSet = true;
}

bool OAIItem::is_parent_item_index_Set() const{
    return m_parent_item_index_isSet;
}

bool OAIItem::is_parent_item_index_Valid() const{
    return m_parent_item_index_isValid;
}

QString OAIItem::getPreSaleDate() const {
    return m_pre_sale_date;
}
void OAIItem::setPreSaleDate(const QString &pre_sale_date) {
    m_pre_sale_date = pre_sale_date;
    m_pre_sale_date_isSet = true;
}

bool OAIItem::is_pre_sale_date_Set() const{
    return m_pre_sale_date_isSet;
}

bool OAIItem::is_pre_sale_date_Valid() const{
    return m_pre_sale_date_isValid;
}

qint32 OAIItem::getPrice() const {
    return m_price;
}
void OAIItem::setPrice(const qint32 &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIItem::is_price_Set() const{
    return m_price_isSet;
}

bool OAIItem::is_price_Valid() const{
    return m_price_isValid;
}

OAIItem_priceDefinitions OAIItem::getPriceDefinitions() const {
    return m_price_definitions;
}
void OAIItem::setPriceDefinitions(const OAIItem_priceDefinitions &price_definitions) {
    m_price_definitions = price_definitions;
    m_price_definitions_isSet = true;
}

bool OAIItem::is_price_definitions_Set() const{
    return m_price_definitions_isSet;
}

bool OAIItem::is_price_definitions_Valid() const{
    return m_price_definitions_isValid;
}

QList<QString> OAIItem::getPriceTags() const {
    return m_price_tags;
}
void OAIItem::setPriceTags(const QList<QString> &price_tags) {
    m_price_tags = price_tags;
    m_price_tags_isSet = true;
}

bool OAIItem::is_price_tags_Set() const{
    return m_price_tags_isSet;
}

bool OAIItem::is_price_tags_Valid() const{
    return m_price_tags_isValid;
}

QString OAIItem::getPriceValidUntil() const {
    return m_price_valid_until;
}
void OAIItem::setPriceValidUntil(const QString &price_valid_until) {
    m_price_valid_until = price_valid_until;
    m_price_valid_until_isSet = true;
}

bool OAIItem::is_price_valid_until_Set() const{
    return m_price_valid_until_isSet;
}

bool OAIItem::is_price_valid_until_Valid() const{
    return m_price_valid_until_isValid;
}

QString OAIItem::getProductId() const {
    return m_product_id;
}
void OAIItem::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIItem::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIItem::is_product_id_Valid() const{
    return m_product_id_isValid;
}

qint32 OAIItem::getQuantity() const {
    return m_quantity;
}
void OAIItem::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIItem::getRefId() const {
    return m_ref_id;
}
void OAIItem::setRefId(const QString &ref_id) {
    m_ref_id = ref_id;
    m_ref_id_isSet = true;
}

bool OAIItem::is_ref_id_Set() const{
    return m_ref_id_isSet;
}

bool OAIItem::is_ref_id_Valid() const{
    return m_ref_id_isValid;
}

qint32 OAIItem::getRewardValue() const {
    return m_reward_value;
}
void OAIItem::setRewardValue(const qint32 &reward_value) {
    m_reward_value = reward_value;
    m_reward_value_isSet = true;
}

bool OAIItem::is_reward_value_Set() const{
    return m_reward_value_isSet;
}

bool OAIItem::is_reward_value_Valid() const{
    return m_reward_value_isValid;
}

QString OAIItem::getSeller() const {
    return m_seller;
}
void OAIItem::setSeller(const QString &seller) {
    m_seller = seller;
    m_seller_isSet = true;
}

bool OAIItem::is_seller_Set() const{
    return m_seller_isSet;
}

bool OAIItem::is_seller_Valid() const{
    return m_seller_isValid;
}

QString OAIItem::getSellerSku() const {
    return m_seller_sku;
}
void OAIItem::setSellerSku(const QString &seller_sku) {
    m_seller_sku = seller_sku;
    m_seller_sku_isSet = true;
}

bool OAIItem::is_seller_sku_Set() const{
    return m_seller_sku_isSet;
}

bool OAIItem::is_seller_sku_Valid() const{
    return m_seller_sku_isValid;
}

qint32 OAIItem::getSellingPrice() const {
    return m_selling_price;
}
void OAIItem::setSellingPrice(const qint32 &selling_price) {
    m_selling_price = selling_price;
    m_selling_price_isSet = true;
}

bool OAIItem::is_selling_price_Set() const{
    return m_selling_price_isSet;
}

bool OAIItem::is_selling_price_Valid() const{
    return m_selling_price_isValid;
}

QString OAIItem::getSerialNumbers() const {
    return m_serial_numbers;
}
void OAIItem::setSerialNumbers(const QString &serial_numbers) {
    m_serial_numbers = serial_numbers;
    m_serial_numbers_isSet = true;
}

bool OAIItem::is_serial_numbers_Set() const{
    return m_serial_numbers_isSet;
}

bool OAIItem::is_serial_numbers_Valid() const{
    return m_serial_numbers_isValid;
}

QString OAIItem::getShippingPrice() const {
    return m_shipping_price;
}
void OAIItem::setShippingPrice(const QString &shipping_price) {
    m_shipping_price = shipping_price;
    m_shipping_price_isSet = true;
}

bool OAIItem::is_shipping_price_Set() const{
    return m_shipping_price_isSet;
}

bool OAIItem::is_shipping_price_Valid() const{
    return m_shipping_price_isValid;
}

qint32 OAIItem::getTax() const {
    return m_tax;
}
void OAIItem::setTax(const qint32 &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIItem::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIItem::is_tax_Valid() const{
    return m_tax_isValid;
}

QString OAIItem::getTaxCode() const {
    return m_tax_code;
}
void OAIItem::setTaxCode(const QString &tax_code) {
    m_tax_code = tax_code;
    m_tax_code_isSet = true;
}

bool OAIItem::is_tax_code_Set() const{
    return m_tax_code_isSet;
}

bool OAIItem::is_tax_code_Valid() const{
    return m_tax_code_isValid;
}

QString OAIItem::getUniqueId() const {
    return m_unique_id;
}
void OAIItem::setUniqueId(const QString &unique_id) {
    m_unique_id = unique_id;
    m_unique_id_isSet = true;
}

bool OAIItem::is_unique_id_Set() const{
    return m_unique_id_isSet;
}

bool OAIItem::is_unique_id_Valid() const{
    return m_unique_id_isValid;
}

qint32 OAIItem::getUnitMultiplier() const {
    return m_unit_multiplier;
}
void OAIItem::setUnitMultiplier(const qint32 &unit_multiplier) {
    m_unit_multiplier = unit_multiplier;
    m_unit_multiplier_isSet = true;
}

bool OAIItem::is_unit_multiplier_Set() const{
    return m_unit_multiplier_isSet;
}

bool OAIItem::is_unit_multiplier_Valid() const{
    return m_unit_multiplier_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assemblies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_offerings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_center_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_commission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_gift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offerings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_assembly_binding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_item_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_sale_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_valid_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reward_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selling_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_numbers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_additional_info_isValid && m_assemblies_isValid && m_attachment_offerings_isValid && m_attachments_isValid && m_bundle_items_isValid && m_call_center_operator_isValid && m_commission_isValid && m_components_isValid && m_cost_price_isValid && m_detail_url_isValid && m_ean_isValid && m_freight_commission_isValid && m_id_isValid && m_image_url_isValid && m_is_gift_isValid && m_item_attachment_isValid && m_list_price_isValid && m_lock_id_isValid && m_manual_price_isValid && m_measurement_unit_isValid && m_name_isValid && m_offerings_isValid && m_params_isValid && m_parent_assembly_binding_isValid && m_parent_item_index_isValid && m_pre_sale_date_isValid && m_price_isValid && m_price_definitions_isValid && m_price_tags_isValid && m_price_valid_until_isValid && m_product_id_isValid && m_quantity_isValid && m_ref_id_isValid && m_reward_value_isValid && m_seller_isValid && m_seller_sku_isValid && m_selling_price_isValid && m_serial_numbers_isValid && m_shipping_price_isValid && m_tax_isValid && m_tax_code_isValid && m_unique_id_isValid && m_unit_multiplier_isValid && true;
}

} // namespace OpenAPI
