/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentApi_H
#define OAI_OAIPaymentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetPaymenttransaction.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentApi(const int timeOut = 0);
    ~OAIPaymentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void getPaymenttransaction(const QString &accept, const QString &content_type, const QString &order_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  payment_id QString [required]
    */
    virtual void sendPaymentNotification(const QString &accept, const QString &content_type, const QString &order_id, const QString &payment_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getPaymenttransactionCallback(OAIHttpRequestWorker *worker);
    void sendPaymentNotificationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getPaymenttransactionSignal(OAIGetPaymenttransaction summary);
    void sendPaymentNotificationSignal();


    void getPaymenttransactionSignalFull(OAIHttpRequestWorker *worker, OAIGetPaymenttransaction summary);
    void sendPaymentNotificationSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getPaymenttransactionSignalError() instead")
    void getPaymenttransactionSignalE(OAIGetPaymenttransaction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymenttransactionSignalError(OAIGetPaymenttransaction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendPaymentNotificationSignalError() instead")
    void sendPaymentNotificationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sendPaymentNotificationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getPaymenttransactionSignalErrorFull() instead")
    void getPaymenttransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPaymenttransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendPaymentNotificationSignalErrorFull() instead")
    void sendPaymentNotificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendPaymentNotificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
