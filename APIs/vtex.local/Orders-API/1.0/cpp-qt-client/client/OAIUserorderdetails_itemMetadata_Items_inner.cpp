/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserorderdetails_itemMetadata_Items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserorderdetails_itemMetadata_Items_inner::OAIUserorderdetails_itemMetadata_Items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserorderdetails_itemMetadata_Items_inner::OAIUserorderdetails_itemMetadata_Items_inner() {
    this->initializeModel();
}

OAIUserorderdetails_itemMetadata_Items_inner::~OAIUserorderdetails_itemMetadata_Items_inner() {}

void OAIUserorderdetails_itemMetadata_Items_inner::initializeModel() {

    m_assembly_options_isSet = false;
    m_assembly_options_isValid = false;

    m_detail_url_isSet = false;
    m_detail_url_isValid = false;

    m_ean_isSet = false;
    m_ean_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_ref_id_isSet = false;
    m_ref_id_isValid = false;

    m_seller_isSet = false;
    m_seller_isValid = false;

    m_sku_name_isSet = false;
    m_sku_name_isValid = false;
}

void OAIUserorderdetails_itemMetadata_Items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserorderdetails_itemMetadata_Items_inner::fromJsonObject(QJsonObject json) {

    m_assembly_options_isValid = ::OpenAPI::fromJsonValue(m_assembly_options, json[QString("AssemblyOptions")]);
    m_assembly_options_isSet = !json[QString("AssemblyOptions")].isNull() && m_assembly_options_isValid;

    m_detail_url_isValid = ::OpenAPI::fromJsonValue(m_detail_url, json[QString("DetailUrl")]);
    m_detail_url_isSet = !json[QString("DetailUrl")].isNull() && m_detail_url_isValid;

    m_ean_isValid = ::OpenAPI::fromJsonValue(m_ean, json[QString("Ean")]);
    m_ean_isSet = !json[QString("Ean")].isNull() && m_ean_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("ImageUrl")]);
    m_image_url_isSet = !json[QString("ImageUrl")].isNull() && m_image_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("ProductId")]);
    m_product_id_isSet = !json[QString("ProductId")].isNull() && m_product_id_isValid;

    m_ref_id_isValid = ::OpenAPI::fromJsonValue(m_ref_id, json[QString("RefId")]);
    m_ref_id_isSet = !json[QString("RefId")].isNull() && m_ref_id_isValid;

    m_seller_isValid = ::OpenAPI::fromJsonValue(m_seller, json[QString("Seller")]);
    m_seller_isSet = !json[QString("Seller")].isNull() && m_seller_isValid;

    m_sku_name_isValid = ::OpenAPI::fromJsonValue(m_sku_name, json[QString("SkuName")]);
    m_sku_name_isSet = !json[QString("SkuName")].isNull() && m_sku_name_isValid;
}

QString OAIUserorderdetails_itemMetadata_Items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserorderdetails_itemMetadata_Items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_assembly_options.size() > 0) {
        obj.insert(QString("AssemblyOptions"), ::OpenAPI::toJsonValue(m_assembly_options));
    }
    if (m_detail_url_isSet) {
        obj.insert(QString("DetailUrl"), ::OpenAPI::toJsonValue(m_detail_url));
    }
    if (m_ean_isSet) {
        obj.insert(QString("Ean"), ::OpenAPI::toJsonValue(m_ean));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("ImageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("ProductId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_ref_id_isSet) {
        obj.insert(QString("RefId"), ::OpenAPI::toJsonValue(m_ref_id));
    }
    if (m_seller_isSet) {
        obj.insert(QString("Seller"), ::OpenAPI::toJsonValue(m_seller));
    }
    if (m_sku_name_isSet) {
        obj.insert(QString("SkuName"), ::OpenAPI::toJsonValue(m_sku_name));
    }
    return obj;
}

QList<OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner> OAIUserorderdetails_itemMetadata_Items_inner::getAssemblyOptions() const {
    return m_assembly_options;
}
void OAIUserorderdetails_itemMetadata_Items_inner::setAssemblyOptions(const QList<OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner> &assembly_options) {
    m_assembly_options = assembly_options;
    m_assembly_options_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_assembly_options_Set() const{
    return m_assembly_options_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_assembly_options_Valid() const{
    return m_assembly_options_isValid;
}

QString OAIUserorderdetails_itemMetadata_Items_inner::getDetailUrl() const {
    return m_detail_url;
}
void OAIUserorderdetails_itemMetadata_Items_inner::setDetailUrl(const QString &detail_url) {
    m_detail_url = detail_url;
    m_detail_url_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_detail_url_Set() const{
    return m_detail_url_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_detail_url_Valid() const{
    return m_detail_url_isValid;
}

QString OAIUserorderdetails_itemMetadata_Items_inner::getEan() const {
    return m_ean;
}
void OAIUserorderdetails_itemMetadata_Items_inner::setEan(const QString &ean) {
    m_ean = ean;
    m_ean_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_ean_Set() const{
    return m_ean_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_ean_Valid() const{
    return m_ean_isValid;
}

QString OAIUserorderdetails_itemMetadata_Items_inner::getId() const {
    return m_id;
}
void OAIUserorderdetails_itemMetadata_Items_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserorderdetails_itemMetadata_Items_inner::getImageUrl() const {
    return m_image_url;
}
void OAIUserorderdetails_itemMetadata_Items_inner::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIUserorderdetails_itemMetadata_Items_inner::getName() const {
    return m_name;
}
void OAIUserorderdetails_itemMetadata_Items_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUserorderdetails_itemMetadata_Items_inner::getProductId() const {
    return m_product_id;
}
void OAIUserorderdetails_itemMetadata_Items_inner::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIUserorderdetails_itemMetadata_Items_inner::getRefId() const {
    return m_ref_id;
}
void OAIUserorderdetails_itemMetadata_Items_inner::setRefId(const QString &ref_id) {
    m_ref_id = ref_id;
    m_ref_id_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_ref_id_Set() const{
    return m_ref_id_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_ref_id_Valid() const{
    return m_ref_id_isValid;
}

QString OAIUserorderdetails_itemMetadata_Items_inner::getSeller() const {
    return m_seller;
}
void OAIUserorderdetails_itemMetadata_Items_inner::setSeller(const QString &seller) {
    m_seller = seller;
    m_seller_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_seller_Set() const{
    return m_seller_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_seller_Valid() const{
    return m_seller_isValid;
}

QString OAIUserorderdetails_itemMetadata_Items_inner::getSkuName() const {
    return m_sku_name;
}
void OAIUserorderdetails_itemMetadata_Items_inner::setSkuName(const QString &sku_name) {
    m_sku_name = sku_name;
    m_sku_name_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_sku_name_Set() const{
    return m_sku_name_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::is_sku_name_Valid() const{
    return m_sku_name_isValid;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assembly_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserorderdetails_itemMetadata_Items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assembly_options_isValid && m_detail_url_isValid && m_ean_isValid && m_id_isValid && m_image_url_isValid && m_name_isValid && m_product_id_isValid && m_ref_id_isValid && m_seller_isValid && m_sku_name_isValid && true;
}

} // namespace OpenAPI
