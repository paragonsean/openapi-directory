/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFeedV3Api_H
#define OAI_OAIFeedV3Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommititemfeedorderstatusRequest.h"
#include "OAIFeedConfigurationRequest.h"
#include "OAIGetFeedConfiguration_200_response.h"
#include "OAIGetfeedorderstatus.h"
#include "OAIObject.h"
#include "OAITestJSONataExpression.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFeedV3Api : public QObject {
    Q_OBJECT

public:
    OAIFeedV3Api(const int timeOut = 0);
    ~OAIFeedV3Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_commititemfeedorderstatus_request OAICommititemfeedorderstatusRequest [required]
    */
    virtual void commititemfeedorderstatus(const QString &content_type, const QString &accept, const OAICommititemfeedorderstatusRequest &oai_commititemfeedorderstatus_request);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_feed_configuration_request OAIFeedConfigurationRequest [required]
    */
    virtual void feedConfiguration(const QString &accept, const QString &content_type, const OAIFeedConfigurationRequest &oai_feed_configuration_request);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void feedConfigurationDelete(const QString &accept, const QString &content_type);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getFeedConfiguration(const QString &content_type, const QString &accept);

    /**
    * @param[in]  maxlot QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    */
    virtual void getfeedorderstatus1(const QString &maxlot, const QString &accept, const QString &content_type);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_test_jso_nata_expression OAITestJSONataExpression [optional]
    */
    virtual void testJSONataExpression(const QString &accept, const QString &content_type, const ::OpenAPI::OptionalParam<OAITestJSONataExpression> &oai_test_jso_nata_expression = ::OpenAPI::OptionalParam<OAITestJSONataExpression>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void commititemfeedorderstatusCallback(OAIHttpRequestWorker *worker);
    void feedConfigurationCallback(OAIHttpRequestWorker *worker);
    void feedConfigurationDeleteCallback(OAIHttpRequestWorker *worker);
    void getFeedConfigurationCallback(OAIHttpRequestWorker *worker);
    void getfeedorderstatus1Callback(OAIHttpRequestWorker *worker);
    void testJSONataExpressionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void commititemfeedorderstatusSignal(OAIObject summary);
    void feedConfigurationSignal();
    void feedConfigurationDeleteSignal();
    void getFeedConfigurationSignal(OAIGetFeedConfiguration_200_response summary);
    void getfeedorderstatus1Signal(QList<OAIGetfeedorderstatus> summary);
    void testJSONataExpressionSignal();


    void commititemfeedorderstatusSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void feedConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void feedConfigurationDeleteSignalFull(OAIHttpRequestWorker *worker);
    void getFeedConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGetFeedConfiguration_200_response summary);
    void getfeedorderstatus1SignalFull(OAIHttpRequestWorker *worker, QList<OAIGetfeedorderstatus> summary);
    void testJSONataExpressionSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use commititemfeedorderstatusSignalError() instead")
    void commititemfeedorderstatusSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commititemfeedorderstatusSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use feedConfigurationSignalError() instead")
    void feedConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void feedConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use feedConfigurationDeleteSignalError() instead")
    void feedConfigurationDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void feedConfigurationDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedConfigurationSignalError() instead")
    void getFeedConfigurationSignalE(OAIGetFeedConfiguration_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedConfigurationSignalError(OAIGetFeedConfiguration_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getfeedorderstatus1SignalError() instead")
    void getfeedorderstatus1SignalE(QList<OAIGetfeedorderstatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getfeedorderstatus1SignalError(QList<OAIGetfeedorderstatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testJSONataExpressionSignalError() instead")
    void testJSONataExpressionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void testJSONataExpressionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use commititemfeedorderstatusSignalErrorFull() instead")
    void commititemfeedorderstatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commititemfeedorderstatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use feedConfigurationSignalErrorFull() instead")
    void feedConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void feedConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use feedConfigurationDeleteSignalErrorFull() instead")
    void feedConfigurationDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void feedConfigurationDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedConfigurationSignalErrorFull() instead")
    void getFeedConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getfeedorderstatus1SignalErrorFull() instead")
    void getfeedorderstatus1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getfeedorderstatus1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testJSONataExpressionSignalErrorFull() instead")
    void testJSONataExpressionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testJSONataExpressionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
