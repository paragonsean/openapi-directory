/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPaymenttransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPaymenttransaction::OAIGetPaymenttransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPaymenttransaction::OAIGetPaymenttransaction() {
    this->initializeModel();
}

OAIGetPaymenttransaction::~OAIGetPaymenttransaction() {}

void OAIGetPaymenttransaction::initializeModel() {

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_merchant_name_isSet = false;
    m_merchant_name_isValid = false;

    m_payments_isSet = false;
    m_payments_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAIGetPaymenttransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPaymenttransaction::fromJsonObject(QJsonObject json) {

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_name, json[QString("merchantName")]);
    m_merchant_name_isSet = !json[QString("merchantName")].isNull() && m_merchant_name_isValid;

    m_payments_isValid = ::OpenAPI::fromJsonValue(m_payments, json[QString("payments")]);
    m_payments_isSet = !json[QString("payments")].isNull() && m_payments_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;
}

QString OAIGetPaymenttransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPaymenttransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_merchant_name_isSet) {
        obj.insert(QString("merchantName"), ::OpenAPI::toJsonValue(m_merchant_name));
    }
    if (m_payments.size() > 0) {
        obj.insert(QString("payments"), ::OpenAPI::toJsonValue(m_payments));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

bool OAIGetPaymenttransaction::isIsActive() const {
    return m_is_active;
}
void OAIGetPaymenttransaction::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIGetPaymenttransaction::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIGetPaymenttransaction::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIGetPaymenttransaction::getMerchantName() const {
    return m_merchant_name;
}
void OAIGetPaymenttransaction::setMerchantName(const QString &merchant_name) {
    m_merchant_name = merchant_name;
    m_merchant_name_isSet = true;
}

bool OAIGetPaymenttransaction::is_merchant_name_Set() const{
    return m_merchant_name_isSet;
}

bool OAIGetPaymenttransaction::is_merchant_name_Valid() const{
    return m_merchant_name_isValid;
}

QList<OAIPayment1> OAIGetPaymenttransaction::getPayments() const {
    return m_payments;
}
void OAIGetPaymenttransaction::setPayments(const QList<OAIPayment1> &payments) {
    m_payments = payments;
    m_payments_isSet = true;
}

bool OAIGetPaymenttransaction::is_payments_Set() const{
    return m_payments_isSet;
}

bool OAIGetPaymenttransaction::is_payments_Valid() const{
    return m_payments_isValid;
}

QString OAIGetPaymenttransaction::getStatus() const {
    return m_status;
}
void OAIGetPaymenttransaction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetPaymenttransaction::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetPaymenttransaction::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetPaymenttransaction::getTransactionId() const {
    return m_transaction_id;
}
void OAIGetPaymenttransaction::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIGetPaymenttransaction::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIGetPaymenttransaction::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAIGetPaymenttransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPaymenttransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_active_isValid && m_merchant_name_isValid && m_payments_isValid && m_status_isValid && m_transaction_id_isValid && true;
}

} // namespace OpenAPI
