/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListOrders.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListOrders::OAIListOrders(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListOrders::OAIListOrders() {
    this->initializeModel();
}

OAIListOrders::~OAIListOrders() {}

void OAIListOrders::initializeModel() {

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_list_isSet = false;
    m_list_isValid = false;

    m_paging_isSet = false;
    m_paging_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;
}

void OAIListOrders::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListOrders::fromJsonObject(QJsonObject json) {

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("facets")]);
    m_facets_isSet = !json[QString("facets")].isNull() && m_facets_isValid;

    m_list_isValid = ::OpenAPI::fromJsonValue(m_list, json[QString("list")]);
    m_list_isSet = !json[QString("list")].isNull() && m_list_isValid;

    m_paging_isValid = ::OpenAPI::fromJsonValue(m_paging, json[QString("paging")]);
    m_paging_isSet = !json[QString("paging")].isNull() && m_paging_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;
}

QString OAIListOrders::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListOrders::asJsonObject() const {
    QJsonObject obj;
    if (m_facets.size() > 0) {
        obj.insert(QString("facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    if (m_list.size() > 0) {
        obj.insert(QString("list"), ::OpenAPI::toJsonValue(m_list));
    }
    if (m_paging.isSet()) {
        obj.insert(QString("paging"), ::OpenAPI::toJsonValue(m_paging));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    return obj;
}

QList<QString> OAIListOrders::getFacets() const {
    return m_facets;
}
void OAIListOrders::setFacets(const QList<QString> &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAIListOrders::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAIListOrders::is_facets_Valid() const{
    return m_facets_isValid;
}

QList<OAIList> OAIListOrders::getList() const {
    return m_list;
}
void OAIListOrders::setList(const QList<OAIList> &list) {
    m_list = list;
    m_list_isSet = true;
}

bool OAIListOrders::is_list_Set() const{
    return m_list_isSet;
}

bool OAIListOrders::is_list_Valid() const{
    return m_list_isValid;
}

OAIPaging OAIListOrders::getPaging() const {
    return m_paging;
}
void OAIListOrders::setPaging(const OAIPaging &paging) {
    m_paging = paging;
    m_paging_isSet = true;
}

bool OAIListOrders::is_paging_Set() const{
    return m_paging_isSet;
}

bool OAIListOrders::is_paging_Valid() const{
    return m_paging_isValid;
}

OAIStats OAIListOrders::getStats() const {
    return m_stats;
}
void OAIListOrders::setStats(const OAIStats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIListOrders::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIListOrders::is_stats_Valid() const{
    return m_stats_isValid;
}

bool OAIListOrders::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_facets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_paging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListOrders::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_facets_isValid && m_list_isValid && m_paging_isValid && m_stats_isValid && true;
}

} // namespace OpenAPI
