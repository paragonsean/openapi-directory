/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddLogRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddLogRequest::OAIAddLogRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddLogRequest::OAIAddLogRequest() {
    this->initializeModel();
}

OAIAddLogRequest::~OAIAddLogRequest() {}

void OAIAddLogRequest::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIAddLogRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddLogRequest::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIAddLogRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddLogRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIAddLogRequest::getMessage() const {
    return m_message;
}
void OAIAddLogRequest::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAddLogRequest::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAddLogRequest::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIAddLogRequest::getSource() const {
    return m_source;
}
void OAIAddLogRequest::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAddLogRequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAddLogRequest::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIAddLogRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddLogRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
