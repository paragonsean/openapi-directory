/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    this->initializeModel();
}

OAIAddress::~OAIAddress() {}

void OAIAddress::initializeModel() {

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_address_type_isSet = false;
    m_address_type_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_complement_isSet = false;
    m_complement_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_geo_coordinates_isSet = false;
    m_geo_coordinates_isValid = false;

    m_neighborhood_isSet = false;
    m_neighborhood_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_receiver_name_isSet = false;
    m_receiver_name_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress::fromJsonObject(QJsonObject json) {

    m_address_id_isValid = ::OpenAPI::fromJsonValue(m_address_id, json[QString("addressId")]);
    m_address_id_isSet = !json[QString("addressId")].isNull() && m_address_id_isValid;

    m_address_type_isValid = ::OpenAPI::fromJsonValue(m_address_type, json[QString("addressType")]);
    m_address_type_isSet = !json[QString("addressType")].isNull() && m_address_type_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_complement_isValid = ::OpenAPI::fromJsonValue(m_complement, json[QString("complement")]);
    m_complement_isSet = !json[QString("complement")].isNull() && m_complement_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_geo_coordinates_isValid = ::OpenAPI::fromJsonValue(m_geo_coordinates, json[QString("geoCoordinates")]);
    m_geo_coordinates_isSet = !json[QString("geoCoordinates")].isNull() && m_geo_coordinates_isValid;

    m_neighborhood_isValid = ::OpenAPI::fromJsonValue(m_neighborhood, json[QString("neighborhood")]);
    m_neighborhood_isSet = !json[QString("neighborhood")].isNull() && m_neighborhood_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_receiver_name_isValid = ::OpenAPI::fromJsonValue(m_receiver_name, json[QString("receiverName")]);
    m_receiver_name_isSet = !json[QString("receiverName")].isNull() && m_receiver_name_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;
}

QString OAIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_id_isSet) {
        obj.insert(QString("addressId"), ::OpenAPI::toJsonValue(m_address_id));
    }
    if (m_address_type_isSet) {
        obj.insert(QString("addressType"), ::OpenAPI::toJsonValue(m_address_type));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_complement_isSet) {
        obj.insert(QString("complement"), ::OpenAPI::toJsonValue(m_complement));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_geo_coordinates.size() > 0) {
        obj.insert(QString("geoCoordinates"), ::OpenAPI::toJsonValue(m_geo_coordinates));
    }
    if (m_neighborhood_isSet) {
        obj.insert(QString("neighborhood"), ::OpenAPI::toJsonValue(m_neighborhood));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_receiver_name_isSet) {
        obj.insert(QString("receiverName"), ::OpenAPI::toJsonValue(m_receiver_name));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

QString OAIAddress::getAddressId() const {
    return m_address_id;
}
void OAIAddress::setAddressId(const QString &address_id) {
    m_address_id = address_id;
    m_address_id_isSet = true;
}

bool OAIAddress::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAIAddress::is_address_id_Valid() const{
    return m_address_id_isValid;
}

QString OAIAddress::getAddressType() const {
    return m_address_type;
}
void OAIAddress::setAddressType(const QString &address_type) {
    m_address_type = address_type;
    m_address_type_isSet = true;
}

bool OAIAddress::is_address_type_Set() const{
    return m_address_type_isSet;
}

bool OAIAddress::is_address_type_Valid() const{
    return m_address_type_isValid;
}

QString OAIAddress::getCity() const {
    return m_city;
}
void OAIAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIAddress::getComplement() const {
    return m_complement;
}
void OAIAddress::setComplement(const QString &complement) {
    m_complement = complement;
    m_complement_isSet = true;
}

bool OAIAddress::is_complement_Set() const{
    return m_complement_isSet;
}

bool OAIAddress::is_complement_Valid() const{
    return m_complement_isValid;
}

QString OAIAddress::getCountry() const {
    return m_country;
}
void OAIAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAddress::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAddress::getEntityId() const {
    return m_entity_id;
}
void OAIAddress::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIAddress::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIAddress::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QList<QString> OAIAddress::getGeoCoordinates() const {
    return m_geo_coordinates;
}
void OAIAddress::setGeoCoordinates(const QList<QString> &geo_coordinates) {
    m_geo_coordinates = geo_coordinates;
    m_geo_coordinates_isSet = true;
}

bool OAIAddress::is_geo_coordinates_Set() const{
    return m_geo_coordinates_isSet;
}

bool OAIAddress::is_geo_coordinates_Valid() const{
    return m_geo_coordinates_isValid;
}

QString OAIAddress::getNeighborhood() const {
    return m_neighborhood;
}
void OAIAddress::setNeighborhood(const QString &neighborhood) {
    m_neighborhood = neighborhood;
    m_neighborhood_isSet = true;
}

bool OAIAddress::is_neighborhood_Set() const{
    return m_neighborhood_isSet;
}

bool OAIAddress::is_neighborhood_Valid() const{
    return m_neighborhood_isValid;
}

QString OAIAddress::getNumber() const {
    return m_number;
}
void OAIAddress::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIAddress::is_number_Set() const{
    return m_number_isSet;
}

bool OAIAddress::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIAddress::getReceiverName() const {
    return m_receiver_name;
}
void OAIAddress::setReceiverName(const QString &receiver_name) {
    m_receiver_name = receiver_name;
    m_receiver_name_isSet = true;
}

bool OAIAddress::is_receiver_name_Set() const{
    return m_receiver_name_isSet;
}

bool OAIAddress::is_receiver_name_Valid() const{
    return m_receiver_name_isValid;
}

QString OAIAddress::getReference() const {
    return m_reference;
}
void OAIAddress::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIAddress::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIAddress::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIAddress::getState() const {
    return m_state;
}
void OAIAddress::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAddress::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAddress::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAddress::getStreet() const {
    return m_street;
}
void OAIAddress::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIAddress::is_street_Set() const{
    return m_street_isSet;
}

bool OAIAddress::is_street_Valid() const{
    return m_street_isValid;
}

QString OAIAddress::getVersionId() const {
    return m_version_id;
}
void OAIAddress::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIAddress::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIAddress::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_coordinates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighborhood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_id_isValid && m_address_type_isValid && m_city_isValid && m_complement_isValid && m_country_isValid && m_entity_id_isValid && m_geo_coordinates_isValid && m_neighborhood_isValid && m_number_isValid && m_postal_code_isValid && m_receiver_name_isValid && m_reference_isValid && m_state_isValid && m_street_isValid && m_version_id_isValid && true;
}

} // namespace OpenAPI
