/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserorderdetails_clientPreferencesData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserorderdetails_clientPreferencesData::OAIUserorderdetails_clientPreferencesData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserorderdetails_clientPreferencesData::OAIUserorderdetails_clientPreferencesData() {
    this->initializeModel();
}

OAIUserorderdetails_clientPreferencesData::~OAIUserorderdetails_clientPreferencesData() {}

void OAIUserorderdetails_clientPreferencesData::initializeModel() {

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_optin_news_letter_isSet = false;
    m_optin_news_letter_isValid = false;
}

void OAIUserorderdetails_clientPreferencesData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserorderdetails_clientPreferencesData::fromJsonObject(QJsonObject json) {

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_optin_news_letter_isValid = ::OpenAPI::fromJsonValue(m_optin_news_letter, json[QString("optinNewsLetter")]);
    m_optin_news_letter_isSet = !json[QString("optinNewsLetter")].isNull() && m_optin_news_letter_isValid;
}

QString OAIUserorderdetails_clientPreferencesData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserorderdetails_clientPreferencesData::asJsonObject() const {
    QJsonObject obj;
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_optin_news_letter_isSet) {
        obj.insert(QString("optinNewsLetter"), ::OpenAPI::toJsonValue(m_optin_news_letter));
    }
    return obj;
}

QString OAIUserorderdetails_clientPreferencesData::getLocale() const {
    return m_locale;
}
void OAIUserorderdetails_clientPreferencesData::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIUserorderdetails_clientPreferencesData::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIUserorderdetails_clientPreferencesData::is_locale_Valid() const{
    return m_locale_isValid;
}

bool OAIUserorderdetails_clientPreferencesData::isOptinNewsLetter() const {
    return m_optin_news_letter;
}
void OAIUserorderdetails_clientPreferencesData::setOptinNewsLetter(const bool &optin_news_letter) {
    m_optin_news_letter = optin_news_letter;
    m_optin_news_letter_isSet = true;
}

bool OAIUserorderdetails_clientPreferencesData::is_optin_news_letter_Set() const{
    return m_optin_news_letter_isSet;
}

bool OAIUserorderdetails_clientPreferencesData::is_optin_news_letter_Valid() const{
    return m_optin_news_letter_isValid;
}

bool OAIUserorderdetails_clientPreferencesData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optin_news_letter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserorderdetails_clientPreferencesData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_locale_isValid && m_optin_news_letter_isValid && true;
}

} // namespace OpenAPI
