/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApi_H
#define OAI_OAIOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddLogRequest.h"
#include "OAICancelOrder_200_response.h"
#include "OAICancelOrder_request.h"
#include "OAIGetOrder_200_response.h"
#include "OAIListOrders.h"
#include "OAIRegisterChange.h"
#include "OAIRegisterChangeRequest.h"
#include "OAIStartHandling_401_response.h"
#include "OAIStartHandling_409_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIOrdersApi(const int timeOut = 0);
    ~OAIOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  oai_add_log_request OAIAddLogRequest [required]
    */
    virtual void addLog(const QString &content_type, const QString &accept, const QString &order_id, const OAIAddLogRequest &oai_add_log_request);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  oai_cancel_order_request OAICancelOrder_request [optional]
    */
    virtual void cancelOrder(const QString &accept, const QString &content_type, const QString &order_id, const ::OpenAPI::OptionalParam<OAICancelOrder_request> &oai_cancel_order_request = ::OpenAPI::OptionalParam<OAICancelOrder_request>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void getOrder(const QString &accept, const QString &content_type, const QString &order_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  f_creation_date QString [required]
    * @param[in]  order_by QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  f_has_input_invoice bool [optional]
    * @param[in]  q QString [optional]
    * @param[in]  utc qint32 [optional]
    * @param[in]  f_shipping_estimate QString [optional]
    * @param[in]  f_invoiced_date QString [optional]
    * @param[in]  f_authorized_date QString [optional]
    * @param[in]  f_utm_source QString [optional]
    * @param[in]  f_seller_names QString [optional]
    * @param[in]  f_call_center_operator_name QString [optional]
    * @param[in]  f_sales_channel QString [optional]
    * @param[in]  sales_channel_id QString [optional]
    * @param[in]  f_affiliate_id QString [optional]
    * @param[in]  f_status QString [optional]
    * @param[in]  incomplete_orders bool [optional]
    * @param[in]  f_payment_names QString [optional]
    * @param[in]  f_rn_b QString [optional]
    * @param[in]  search_field QString [optional]
    * @param[in]  f_is_instore bool [optional]
    */
    virtual void listOrders(const QString &accept, const QString &content_type, const QString &f_creation_date, const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &f_has_input_invoice = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &utc = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &f_shipping_estimate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &f_invoiced_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &f_authorized_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &f_utm_source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &f_seller_names = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &f_call_center_operator_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &f_sales_channel = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sales_channel_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &f_affiliate_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &f_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &incomplete_orders = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &f_payment_names = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &f_rn_b = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &f_is_instore = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  oai_register_change_request OAIRegisterChangeRequest [required]
    */
    virtual void registerChange(const QString &content_type, const QString &accept, const QString &order_id, const OAIRegisterChangeRequest &oai_register_change_request);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void startHandling(const QString &accept, const QString &content_type, const QString &order_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addLogCallback(OAIHttpRequestWorker *worker);
    void cancelOrderCallback(OAIHttpRequestWorker *worker);
    void getOrderCallback(OAIHttpRequestWorker *worker);
    void listOrdersCallback(OAIHttpRequestWorker *worker);
    void registerChangeCallback(OAIHttpRequestWorker *worker);
    void startHandlingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addLogSignal();
    void cancelOrderSignal(OAICancelOrder_200_response summary);
    void getOrderSignal(OAIGetOrder_200_response summary);
    void listOrdersSignal(OAIListOrders summary);
    void registerChangeSignal(OAIRegisterChange summary);
    void startHandlingSignal();


    void addLogSignalFull(OAIHttpRequestWorker *worker);
    void cancelOrderSignalFull(OAIHttpRequestWorker *worker, OAICancelOrder_200_response summary);
    void getOrderSignalFull(OAIHttpRequestWorker *worker, OAIGetOrder_200_response summary);
    void listOrdersSignalFull(OAIHttpRequestWorker *worker, OAIListOrders summary);
    void registerChangeSignalFull(OAIHttpRequestWorker *worker, OAIRegisterChange summary);
    void startHandlingSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addLogSignalError() instead")
    void addLogSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addLogSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelOrderSignalError() instead")
    void cancelOrderSignalE(OAICancelOrder_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelOrderSignalError(OAICancelOrder_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderSignalError() instead")
    void getOrderSignalE(OAIGetOrder_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderSignalError(OAIGetOrder_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOrdersSignalError() instead")
    void listOrdersSignalE(OAIListOrders summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrdersSignalError(OAIListOrders summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerChangeSignalError() instead")
    void registerChangeSignalE(OAIRegisterChange summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registerChangeSignalError(OAIRegisterChange summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startHandlingSignalError() instead")
    void startHandlingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startHandlingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addLogSignalErrorFull() instead")
    void addLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addLogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelOrderSignalErrorFull() instead")
    void cancelOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderSignalErrorFull() instead")
    void getOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOrdersSignalErrorFull() instead")
    void listOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerChangeSignalErrorFull() instead")
    void registerChangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registerChangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startHandlingSignalErrorFull() instead")
    void startHandlingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startHandlingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
