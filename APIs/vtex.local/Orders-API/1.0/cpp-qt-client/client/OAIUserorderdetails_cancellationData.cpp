/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserorderdetails_cancellationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserorderdetails_cancellationData::OAIUserorderdetails_cancellationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserorderdetails_cancellationData::OAIUserorderdetails_cancellationData() {
    this->initializeModel();
}

OAIUserorderdetails_cancellationData::~OAIUserorderdetails_cancellationData() {}

void OAIUserorderdetails_cancellationData::initializeModel() {

    m_cancellation_date_isSet = false;
    m_cancellation_date_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_requested_by_payment_notification_isSet = false;
    m_requested_by_payment_notification_isValid = false;

    m_requested_by_seller_notification_isSet = false;
    m_requested_by_seller_notification_isValid = false;

    m_requested_by_system_isSet = false;
    m_requested_by_system_isValid = false;

    m_requested_by_user_isSet = false;
    m_requested_by_user_isValid = false;
}

void OAIUserorderdetails_cancellationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserorderdetails_cancellationData::fromJsonObject(QJsonObject json) {

    m_cancellation_date_isValid = ::OpenAPI::fromJsonValue(m_cancellation_date, json[QString("CancellationDate")]);
    m_cancellation_date_isSet = !json[QString("CancellationDate")].isNull() && m_cancellation_date_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("Reason")]);
    m_reason_isSet = !json[QString("Reason")].isNull() && m_reason_isValid;

    m_requested_by_payment_notification_isValid = ::OpenAPI::fromJsonValue(m_requested_by_payment_notification, json[QString("RequestedByPaymentNotification")]);
    m_requested_by_payment_notification_isSet = !json[QString("RequestedByPaymentNotification")].isNull() && m_requested_by_payment_notification_isValid;

    m_requested_by_seller_notification_isValid = ::OpenAPI::fromJsonValue(m_requested_by_seller_notification, json[QString("RequestedBySellerNotification")]);
    m_requested_by_seller_notification_isSet = !json[QString("RequestedBySellerNotification")].isNull() && m_requested_by_seller_notification_isValid;

    m_requested_by_system_isValid = ::OpenAPI::fromJsonValue(m_requested_by_system, json[QString("RequestedBySystem")]);
    m_requested_by_system_isSet = !json[QString("RequestedBySystem")].isNull() && m_requested_by_system_isValid;

    m_requested_by_user_isValid = ::OpenAPI::fromJsonValue(m_requested_by_user, json[QString("RequestedByUser")]);
    m_requested_by_user_isSet = !json[QString("RequestedByUser")].isNull() && m_requested_by_user_isValid;
}

QString OAIUserorderdetails_cancellationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserorderdetails_cancellationData::asJsonObject() const {
    QJsonObject obj;
    if (m_cancellation_date_isSet) {
        obj.insert(QString("CancellationDate"), ::OpenAPI::toJsonValue(m_cancellation_date));
    }
    if (m_reason_isSet) {
        obj.insert(QString("Reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_requested_by_payment_notification_isSet) {
        obj.insert(QString("RequestedByPaymentNotification"), ::OpenAPI::toJsonValue(m_requested_by_payment_notification));
    }
    if (m_requested_by_seller_notification_isSet) {
        obj.insert(QString("RequestedBySellerNotification"), ::OpenAPI::toJsonValue(m_requested_by_seller_notification));
    }
    if (m_requested_by_system_isSet) {
        obj.insert(QString("RequestedBySystem"), ::OpenAPI::toJsonValue(m_requested_by_system));
    }
    if (m_requested_by_user_isSet) {
        obj.insert(QString("RequestedByUser"), ::OpenAPI::toJsonValue(m_requested_by_user));
    }
    return obj;
}

QString OAIUserorderdetails_cancellationData::getCancellationDate() const {
    return m_cancellation_date;
}
void OAIUserorderdetails_cancellationData::setCancellationDate(const QString &cancellation_date) {
    m_cancellation_date = cancellation_date;
    m_cancellation_date_isSet = true;
}

bool OAIUserorderdetails_cancellationData::is_cancellation_date_Set() const{
    return m_cancellation_date_isSet;
}

bool OAIUserorderdetails_cancellationData::is_cancellation_date_Valid() const{
    return m_cancellation_date_isValid;
}

QString OAIUserorderdetails_cancellationData::getReason() const {
    return m_reason;
}
void OAIUserorderdetails_cancellationData::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIUserorderdetails_cancellationData::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIUserorderdetails_cancellationData::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIUserorderdetails_cancellationData::isRequestedByPaymentNotification() const {
    return m_requested_by_payment_notification;
}
void OAIUserorderdetails_cancellationData::setRequestedByPaymentNotification(const bool &requested_by_payment_notification) {
    m_requested_by_payment_notification = requested_by_payment_notification;
    m_requested_by_payment_notification_isSet = true;
}

bool OAIUserorderdetails_cancellationData::is_requested_by_payment_notification_Set() const{
    return m_requested_by_payment_notification_isSet;
}

bool OAIUserorderdetails_cancellationData::is_requested_by_payment_notification_Valid() const{
    return m_requested_by_payment_notification_isValid;
}

bool OAIUserorderdetails_cancellationData::isRequestedBySellerNotification() const {
    return m_requested_by_seller_notification;
}
void OAIUserorderdetails_cancellationData::setRequestedBySellerNotification(const bool &requested_by_seller_notification) {
    m_requested_by_seller_notification = requested_by_seller_notification;
    m_requested_by_seller_notification_isSet = true;
}

bool OAIUserorderdetails_cancellationData::is_requested_by_seller_notification_Set() const{
    return m_requested_by_seller_notification_isSet;
}

bool OAIUserorderdetails_cancellationData::is_requested_by_seller_notification_Valid() const{
    return m_requested_by_seller_notification_isValid;
}

bool OAIUserorderdetails_cancellationData::isRequestedBySystem() const {
    return m_requested_by_system;
}
void OAIUserorderdetails_cancellationData::setRequestedBySystem(const bool &requested_by_system) {
    m_requested_by_system = requested_by_system;
    m_requested_by_system_isSet = true;
}

bool OAIUserorderdetails_cancellationData::is_requested_by_system_Set() const{
    return m_requested_by_system_isSet;
}

bool OAIUserorderdetails_cancellationData::is_requested_by_system_Valid() const{
    return m_requested_by_system_isValid;
}

bool OAIUserorderdetails_cancellationData::isRequestedByUser() const {
    return m_requested_by_user;
}
void OAIUserorderdetails_cancellationData::setRequestedByUser(const bool &requested_by_user) {
    m_requested_by_user = requested_by_user;
    m_requested_by_user_isSet = true;
}

bool OAIUserorderdetails_cancellationData::is_requested_by_user_Set() const{
    return m_requested_by_user_isSet;
}

bool OAIUserorderdetails_cancellationData::is_requested_by_user_Valid() const{
    return m_requested_by_user_isValid;
}

bool OAIUserorderdetails_cancellationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancellation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_by_payment_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_by_seller_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_by_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_by_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserorderdetails_cancellationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cancellation_date_isValid && m_reason_isValid && m_requested_by_payment_notification_isValid && m_requested_by_seller_notification_isValid && m_requested_by_system_isValid && m_requested_by_user_isValid && true;
}

} // namespace OpenAPI
