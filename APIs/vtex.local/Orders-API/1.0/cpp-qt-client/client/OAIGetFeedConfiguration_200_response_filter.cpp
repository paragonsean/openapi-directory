/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFeedConfiguration_200_response_filter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFeedConfiguration_200_response_filter::OAIGetFeedConfiguration_200_response_filter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFeedConfiguration_200_response_filter::OAIGetFeedConfiguration_200_response_filter() {
    this->initializeModel();
}

OAIGetFeedConfiguration_200_response_filter::~OAIGetFeedConfiguration_200_response_filter() {}

void OAIGetFeedConfiguration_200_response_filter::initializeModel() {

    m_disable_single_fire_isSet = false;
    m_disable_single_fire_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGetFeedConfiguration_200_response_filter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFeedConfiguration_200_response_filter::fromJsonObject(QJsonObject json) {

    m_disable_single_fire_isValid = ::OpenAPI::fromJsonValue(m_disable_single_fire, json[QString("disableSingleFire")]);
    m_disable_single_fire_isSet = !json[QString("disableSingleFire")].isNull() && m_disable_single_fire_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGetFeedConfiguration_200_response_filter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFeedConfiguration_200_response_filter::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_single_fire_isSet) {
        obj.insert(QString("disableSingleFire"), ::OpenAPI::toJsonValue(m_disable_single_fire));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIGetFeedConfiguration_200_response_filter::isDisableSingleFire() const {
    return m_disable_single_fire;
}
void OAIGetFeedConfiguration_200_response_filter::setDisableSingleFire(const bool &disable_single_fire) {
    m_disable_single_fire = disable_single_fire;
    m_disable_single_fire_isSet = true;
}

bool OAIGetFeedConfiguration_200_response_filter::is_disable_single_fire_Set() const{
    return m_disable_single_fire_isSet;
}

bool OAIGetFeedConfiguration_200_response_filter::is_disable_single_fire_Valid() const{
    return m_disable_single_fire_isValid;
}

QString OAIGetFeedConfiguration_200_response_filter::getExpression() const {
    return m_expression;
}
void OAIGetFeedConfiguration_200_response_filter::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIGetFeedConfiguration_200_response_filter::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIGetFeedConfiguration_200_response_filter::is_expression_Valid() const{
    return m_expression_isValid;
}

QList<QString> OAIGetFeedConfiguration_200_response_filter::getStatus() const {
    return m_status;
}
void OAIGetFeedConfiguration_200_response_filter::setStatus(const QList<QString> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetFeedConfiguration_200_response_filter::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetFeedConfiguration_200_response_filter::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetFeedConfiguration_200_response_filter::getType() const {
    return m_type;
}
void OAIGetFeedConfiguration_200_response_filter::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetFeedConfiguration_200_response_filter::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetFeedConfiguration_200_response_filter::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGetFeedConfiguration_200_response_filter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_single_fire_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFeedConfiguration_200_response_filter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
