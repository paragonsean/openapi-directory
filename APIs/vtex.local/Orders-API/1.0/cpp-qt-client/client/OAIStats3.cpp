/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStats3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStats3::OAIStats3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStats3::OAIStats3() {
    this->initializeModel();
}

OAIStats3::~OAIStats3() {}

void OAIStats3::initializeModel() {

    m_total_items_isSet = false;
    m_total_items_isValid = false;

    m_total_value_isSet = false;
    m_total_value_isValid = false;
}

void OAIStats3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStats3::fromJsonObject(QJsonObject json) {

    m_total_items_isValid = ::OpenAPI::fromJsonValue(m_total_items, json[QString("totalItems")]);
    m_total_items_isSet = !json[QString("totalItems")].isNull() && m_total_items_isValid;

    m_total_value_isValid = ::OpenAPI::fromJsonValue(m_total_value, json[QString("totalValue")]);
    m_total_value_isSet = !json[QString("totalValue")].isNull() && m_total_value_isValid;
}

QString OAIStats3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStats3::asJsonObject() const {
    QJsonObject obj;
    if (m_total_items.isSet()) {
        obj.insert(QString("totalItems"), ::OpenAPI::toJsonValue(m_total_items));
    }
    if (m_total_value.isSet()) {
        obj.insert(QString("totalValue"), ::OpenAPI::toJsonValue(m_total_value));
    }
    return obj;
}

OAITotalItems1 OAIStats3::getTotalItems() const {
    return m_total_items;
}
void OAIStats3::setTotalItems(const OAITotalItems1 &total_items) {
    m_total_items = total_items;
    m_total_items_isSet = true;
}

bool OAIStats3::is_total_items_Set() const{
    return m_total_items_isSet;
}

bool OAIStats3::is_total_items_Valid() const{
    return m_total_items_isValid;
}

OAITotalValue1 OAIStats3::getTotalValue() const {
    return m_total_value;
}
void OAIStats3::setTotalValue(const OAITotalValue1 &total_value) {
    m_total_value = total_value;
    m_total_value_isSet = true;
}

bool OAIStats3::is_total_value_Set() const{
    return m_total_value_isSet;
}

bool OAIStats3::is_total_value_Valid() const{
    return m_total_value_isValid;
}

bool OAIStats3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStats3::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_total_items_isValid && m_total_value_isValid && true;
}

} // namespace OpenAPI
