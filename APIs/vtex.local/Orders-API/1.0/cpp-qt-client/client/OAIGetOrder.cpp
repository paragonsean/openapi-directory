/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrder::OAIGetOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrder::OAIGetOrder() {
    this->initializeModel();
}

OAIGetOrder::~OAIGetOrder() {}

void OAIGetOrder::initializeModel() {

    m_affiliate_id_isSet = false;
    m_affiliate_id_isValid = false;

    m_allow_cancellation_isSet = false;
    m_allow_cancellation_isValid = false;

    m_allow_edition_isSet = false;
    m_allow_edition_isValid = false;

    m_approved_by_isSet = false;
    m_approved_by_isValid = false;

    m_authorized_date_isSet = false;
    m_authorized_date_isValid = false;

    m_call_center_operator_data_isSet = false;
    m_call_center_operator_data_isValid = false;

    m_cancel_reason_isSet = false;
    m_cancel_reason_isValid = false;

    m_cancelled_by_isSet = false;
    m_cancelled_by_isValid = false;

    m_changes_attachment_isSet = false;
    m_changes_attachment_isValid = false;

    m_client_profile_data_isSet = false;
    m_client_profile_data_isValid = false;

    m_commercial_condition_data_isSet = false;
    m_commercial_condition_data_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_custom_data_isSet = false;
    m_custom_data_isValid = false;

    m_email_tracked_isSet = false;
    m_email_tracked_isValid = false;

    m_follow_up_email_isSet = false;
    m_follow_up_email_isValid = false;

    m_gift_registry_data_isSet = false;
    m_gift_registry_data_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_invoice_data_isSet = false;
    m_invoice_data_isValid = false;

    m_invoiced_date_isSet = false;
    m_invoiced_date_isValid = false;

    m_is_checked_in_isSet = false;
    m_is_checked_in_isValid = false;

    m_is_completed_isSet = false;
    m_is_completed_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_last_change_isSet = false;
    m_last_change_isValid = false;

    m_last_message_isSet = false;
    m_last_message_isValid = false;

    m_marketing_data_isSet = false;
    m_marketing_data_isValid = false;

    m_marketplace_isSet = false;
    m_marketplace_isValid = false;

    m_marketplace_items_isSet = false;
    m_marketplace_items_isValid = false;

    m_marketplace_order_id_isSet = false;
    m_marketplace_order_id_isValid = false;

    m_marketplace_services_endpoint_isSet = false;
    m_marketplace_services_endpoint_isValid = false;

    m_merchant_name_isSet = false;
    m_merchant_name_isValid = false;

    m_open_text_field_isSet = false;
    m_open_text_field_isValid = false;

    m_order_form_id_isSet = false;
    m_order_form_id_isValid = false;

    m_order_group_isSet = false;
    m_order_group_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_package_attachment_isSet = false;
    m_package_attachment_isValid = false;

    m_payment_data_isSet = false;
    m_payment_data_isValid = false;

    m_rates_and_benefits_data_isSet = false;
    m_rates_and_benefits_data_isValid = false;

    m_rounding_error_isSet = false;
    m_rounding_error_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_seller_order_id_isSet = false;
    m_seller_order_id_isValid = false;

    m_sellers_isSet = false;
    m_sellers_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_shipping_data_isSet = false;
    m_shipping_data_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_description_isSet = false;
    m_status_description_isValid = false;

    m_store_preferences_data_isSet = false;
    m_store_preferences_data_isValid = false;

    m_totals_isSet = false;
    m_totals_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIGetOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrder::fromJsonObject(QJsonObject json) {

    m_affiliate_id_isValid = ::OpenAPI::fromJsonValue(m_affiliate_id, json[QString("affiliateId")]);
    m_affiliate_id_isSet = !json[QString("affiliateId")].isNull() && m_affiliate_id_isValid;

    m_allow_cancellation_isValid = ::OpenAPI::fromJsonValue(m_allow_cancellation, json[QString("allowCancellation")]);
    m_allow_cancellation_isSet = !json[QString("allowCancellation")].isNull() && m_allow_cancellation_isValid;

    m_allow_edition_isValid = ::OpenAPI::fromJsonValue(m_allow_edition, json[QString("allowEdition")]);
    m_allow_edition_isSet = !json[QString("allowEdition")].isNull() && m_allow_edition_isValid;

    m_approved_by_isValid = ::OpenAPI::fromJsonValue(m_approved_by, json[QString("approvedBy")]);
    m_approved_by_isSet = !json[QString("approvedBy")].isNull() && m_approved_by_isValid;

    m_authorized_date_isValid = ::OpenAPI::fromJsonValue(m_authorized_date, json[QString("authorizedDate")]);
    m_authorized_date_isSet = !json[QString("authorizedDate")].isNull() && m_authorized_date_isValid;

    m_call_center_operator_data_isValid = ::OpenAPI::fromJsonValue(m_call_center_operator_data, json[QString("callCenterOperatorData")]);
    m_call_center_operator_data_isSet = !json[QString("callCenterOperatorData")].isNull() && m_call_center_operator_data_isValid;

    m_cancel_reason_isValid = ::OpenAPI::fromJsonValue(m_cancel_reason, json[QString("cancelReason")]);
    m_cancel_reason_isSet = !json[QString("cancelReason")].isNull() && m_cancel_reason_isValid;

    m_cancelled_by_isValid = ::OpenAPI::fromJsonValue(m_cancelled_by, json[QString("cancelledBy")]);
    m_cancelled_by_isSet = !json[QString("cancelledBy")].isNull() && m_cancelled_by_isValid;

    m_changes_attachment_isValid = ::OpenAPI::fromJsonValue(m_changes_attachment, json[QString("changesAttachment")]);
    m_changes_attachment_isSet = !json[QString("changesAttachment")].isNull() && m_changes_attachment_isValid;

    m_client_profile_data_isValid = ::OpenAPI::fromJsonValue(m_client_profile_data, json[QString("clientProfileData")]);
    m_client_profile_data_isSet = !json[QString("clientProfileData")].isNull() && m_client_profile_data_isValid;

    m_commercial_condition_data_isValid = ::OpenAPI::fromJsonValue(m_commercial_condition_data, json[QString("commercialConditionData")]);
    m_commercial_condition_data_isSet = !json[QString("commercialConditionData")].isNull() && m_commercial_condition_data_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_custom_data_isValid = ::OpenAPI::fromJsonValue(m_custom_data, json[QString("customData")]);
    m_custom_data_isSet = !json[QString("customData")].isNull() && m_custom_data_isValid;

    m_email_tracked_isValid = ::OpenAPI::fromJsonValue(m_email_tracked, json[QString("emailTracked")]);
    m_email_tracked_isSet = !json[QString("emailTracked")].isNull() && m_email_tracked_isValid;

    m_follow_up_email_isValid = ::OpenAPI::fromJsonValue(m_follow_up_email, json[QString("followUpEmail")]);
    m_follow_up_email_isSet = !json[QString("followUpEmail")].isNull() && m_follow_up_email_isValid;

    m_gift_registry_data_isValid = ::OpenAPI::fromJsonValue(m_gift_registry_data, json[QString("giftRegistryData")]);
    m_gift_registry_data_isSet = !json[QString("giftRegistryData")].isNull() && m_gift_registry_data_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_invoice_data_isValid = ::OpenAPI::fromJsonValue(m_invoice_data, json[QString("invoiceData")]);
    m_invoice_data_isSet = !json[QString("invoiceData")].isNull() && m_invoice_data_isValid;

    m_invoiced_date_isValid = ::OpenAPI::fromJsonValue(m_invoiced_date, json[QString("invoicedDate")]);
    m_invoiced_date_isSet = !json[QString("invoicedDate")].isNull() && m_invoiced_date_isValid;

    m_is_checked_in_isValid = ::OpenAPI::fromJsonValue(m_is_checked_in, json[QString("isCheckedIn")]);
    m_is_checked_in_isSet = !json[QString("isCheckedIn")].isNull() && m_is_checked_in_isValid;

    m_is_completed_isValid = ::OpenAPI::fromJsonValue(m_is_completed, json[QString("isCompleted")]);
    m_is_completed_isSet = !json[QString("isCompleted")].isNull() && m_is_completed_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_last_change_isValid = ::OpenAPI::fromJsonValue(m_last_change, json[QString("lastChange")]);
    m_last_change_isSet = !json[QString("lastChange")].isNull() && m_last_change_isValid;

    m_last_message_isValid = ::OpenAPI::fromJsonValue(m_last_message, json[QString("lastMessage")]);
    m_last_message_isSet = !json[QString("lastMessage")].isNull() && m_last_message_isValid;

    m_marketing_data_isValid = ::OpenAPI::fromJsonValue(m_marketing_data, json[QString("marketingData")]);
    m_marketing_data_isSet = !json[QString("marketingData")].isNull() && m_marketing_data_isValid;

    m_marketplace_isValid = ::OpenAPI::fromJsonValue(m_marketplace, json[QString("marketplace")]);
    m_marketplace_isSet = !json[QString("marketplace")].isNull() && m_marketplace_isValid;

    m_marketplace_items_isValid = ::OpenAPI::fromJsonValue(m_marketplace_items, json[QString("marketplaceItems")]);
    m_marketplace_items_isSet = !json[QString("marketplaceItems")].isNull() && m_marketplace_items_isValid;

    m_marketplace_order_id_isValid = ::OpenAPI::fromJsonValue(m_marketplace_order_id, json[QString("marketplaceOrderId")]);
    m_marketplace_order_id_isSet = !json[QString("marketplaceOrderId")].isNull() && m_marketplace_order_id_isValid;

    m_marketplace_services_endpoint_isValid = ::OpenAPI::fromJsonValue(m_marketplace_services_endpoint, json[QString("marketplaceServicesEndpoint")]);
    m_marketplace_services_endpoint_isSet = !json[QString("marketplaceServicesEndpoint")].isNull() && m_marketplace_services_endpoint_isValid;

    m_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_name, json[QString("merchantName")]);
    m_merchant_name_isSet = !json[QString("merchantName")].isNull() && m_merchant_name_isValid;

    m_open_text_field_isValid = ::OpenAPI::fromJsonValue(m_open_text_field, json[QString("openTextField")]);
    m_open_text_field_isSet = !json[QString("openTextField")].isNull() && m_open_text_field_isValid;

    m_order_form_id_isValid = ::OpenAPI::fromJsonValue(m_order_form_id, json[QString("orderFormId")]);
    m_order_form_id_isSet = !json[QString("orderFormId")].isNull() && m_order_form_id_isValid;

    m_order_group_isValid = ::OpenAPI::fromJsonValue(m_order_group, json[QString("orderGroup")]);
    m_order_group_isSet = !json[QString("orderGroup")].isNull() && m_order_group_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_package_attachment_isValid = ::OpenAPI::fromJsonValue(m_package_attachment, json[QString("packageAttachment")]);
    m_package_attachment_isSet = !json[QString("packageAttachment")].isNull() && m_package_attachment_isValid;

    m_payment_data_isValid = ::OpenAPI::fromJsonValue(m_payment_data, json[QString("paymentData")]);
    m_payment_data_isSet = !json[QString("paymentData")].isNull() && m_payment_data_isValid;

    m_rates_and_benefits_data_isValid = ::OpenAPI::fromJsonValue(m_rates_and_benefits_data, json[QString("ratesAndBenefitsData")]);
    m_rates_and_benefits_data_isSet = !json[QString("ratesAndBenefitsData")].isNull() && m_rates_and_benefits_data_isValid;

    m_rounding_error_isValid = ::OpenAPI::fromJsonValue(m_rounding_error, json[QString("roundingError")]);
    m_rounding_error_isSet = !json[QString("roundingError")].isNull() && m_rounding_error_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;

    m_seller_order_id_isValid = ::OpenAPI::fromJsonValue(m_seller_order_id, json[QString("sellerOrderId")]);
    m_seller_order_id_isSet = !json[QString("sellerOrderId")].isNull() && m_seller_order_id_isValid;

    m_sellers_isValid = ::OpenAPI::fromJsonValue(m_sellers, json[QString("sellers")]);
    m_sellers_isSet = !json[QString("sellers")].isNull() && m_sellers_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_shipping_data_isValid = ::OpenAPI::fromJsonValue(m_shipping_data, json[QString("shippingData")]);
    m_shipping_data_isSet = !json[QString("shippingData")].isNull() && m_shipping_data_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_description_isValid = ::OpenAPI::fromJsonValue(m_status_description, json[QString("statusDescription")]);
    m_status_description_isSet = !json[QString("statusDescription")].isNull() && m_status_description_isValid;

    m_store_preferences_data_isValid = ::OpenAPI::fromJsonValue(m_store_preferences_data, json[QString("storePreferencesData")]);
    m_store_preferences_data_isSet = !json[QString("storePreferencesData")].isNull() && m_store_preferences_data_isValid;

    m_totals_isValid = ::OpenAPI::fromJsonValue(m_totals, json[QString("totals")]);
    m_totals_isSet = !json[QString("totals")].isNull() && m_totals_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIGetOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_affiliate_id_isSet) {
        obj.insert(QString("affiliateId"), ::OpenAPI::toJsonValue(m_affiliate_id));
    }
    if (m_allow_cancellation_isSet) {
        obj.insert(QString("allowCancellation"), ::OpenAPI::toJsonValue(m_allow_cancellation));
    }
    if (m_allow_edition_isSet) {
        obj.insert(QString("allowEdition"), ::OpenAPI::toJsonValue(m_allow_edition));
    }
    if (m_approved_by_isSet) {
        obj.insert(QString("approvedBy"), ::OpenAPI::toJsonValue(m_approved_by));
    }
    if (m_authorized_date_isSet) {
        obj.insert(QString("authorizedDate"), ::OpenAPI::toJsonValue(m_authorized_date));
    }
    if (m_call_center_operator_data_isSet) {
        obj.insert(QString("callCenterOperatorData"), ::OpenAPI::toJsonValue(m_call_center_operator_data));
    }
    if (m_cancel_reason_isSet) {
        obj.insert(QString("cancelReason"), ::OpenAPI::toJsonValue(m_cancel_reason));
    }
    if (m_cancelled_by_isSet) {
        obj.insert(QString("cancelledBy"), ::OpenAPI::toJsonValue(m_cancelled_by));
    }
    if (m_changes_attachment.isSet()) {
        obj.insert(QString("changesAttachment"), ::OpenAPI::toJsonValue(m_changes_attachment));
    }
    if (m_client_profile_data.isSet()) {
        obj.insert(QString("clientProfileData"), ::OpenAPI::toJsonValue(m_client_profile_data));
    }
    if (m_commercial_condition_data_isSet) {
        obj.insert(QString("commercialConditionData"), ::OpenAPI::toJsonValue(m_commercial_condition_data));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_custom_data_isSet) {
        obj.insert(QString("customData"), ::OpenAPI::toJsonValue(m_custom_data));
    }
    if (m_email_tracked_isSet) {
        obj.insert(QString("emailTracked"), ::OpenAPI::toJsonValue(m_email_tracked));
    }
    if (m_follow_up_email_isSet) {
        obj.insert(QString("followUpEmail"), ::OpenAPI::toJsonValue(m_follow_up_email));
    }
    if (m_gift_registry_data_isSet) {
        obj.insert(QString("giftRegistryData"), ::OpenAPI::toJsonValue(m_gift_registry_data));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_invoice_data_isSet) {
        obj.insert(QString("invoiceData"), ::OpenAPI::toJsonValue(m_invoice_data));
    }
    if (m_invoiced_date_isSet) {
        obj.insert(QString("invoicedDate"), ::OpenAPI::toJsonValue(m_invoiced_date));
    }
    if (m_is_checked_in_isSet) {
        obj.insert(QString("isCheckedIn"), ::OpenAPI::toJsonValue(m_is_checked_in));
    }
    if (m_is_completed_isSet) {
        obj.insert(QString("isCompleted"), ::OpenAPI::toJsonValue(m_is_completed));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_last_change_isSet) {
        obj.insert(QString("lastChange"), ::OpenAPI::toJsonValue(m_last_change));
    }
    if (m_last_message_isSet) {
        obj.insert(QString("lastMessage"), ::OpenAPI::toJsonValue(m_last_message));
    }
    if (m_marketing_data_isSet) {
        obj.insert(QString("marketingData"), ::OpenAPI::toJsonValue(m_marketing_data));
    }
    if (m_marketplace.isSet()) {
        obj.insert(QString("marketplace"), ::OpenAPI::toJsonValue(m_marketplace));
    }
    if (m_marketplace_items.size() > 0) {
        obj.insert(QString("marketplaceItems"), ::OpenAPI::toJsonValue(m_marketplace_items));
    }
    if (m_marketplace_order_id_isSet) {
        obj.insert(QString("marketplaceOrderId"), ::OpenAPI::toJsonValue(m_marketplace_order_id));
    }
    if (m_marketplace_services_endpoint_isSet) {
        obj.insert(QString("marketplaceServicesEndpoint"), ::OpenAPI::toJsonValue(m_marketplace_services_endpoint));
    }
    if (m_merchant_name_isSet) {
        obj.insert(QString("merchantName"), ::OpenAPI::toJsonValue(m_merchant_name));
    }
    if (m_open_text_field_isSet) {
        obj.insert(QString("openTextField"), ::OpenAPI::toJsonValue(m_open_text_field));
    }
    if (m_order_form_id_isSet) {
        obj.insert(QString("orderFormId"), ::OpenAPI::toJsonValue(m_order_form_id));
    }
    if (m_order_group_isSet) {
        obj.insert(QString("orderGroup"), ::OpenAPI::toJsonValue(m_order_group));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_package_attachment.isSet()) {
        obj.insert(QString("packageAttachment"), ::OpenAPI::toJsonValue(m_package_attachment));
    }
    if (m_payment_data.isSet()) {
        obj.insert(QString("paymentData"), ::OpenAPI::toJsonValue(m_payment_data));
    }
    if (m_rates_and_benefits_data.isSet()) {
        obj.insert(QString("ratesAndBenefitsData"), ::OpenAPI::toJsonValue(m_rates_and_benefits_data));
    }
    if (m_rounding_error_isSet) {
        obj.insert(QString("roundingError"), ::OpenAPI::toJsonValue(m_rounding_error));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_seller_order_id_isSet) {
        obj.insert(QString("sellerOrderId"), ::OpenAPI::toJsonValue(m_seller_order_id));
    }
    if (m_sellers.size() > 0) {
        obj.insert(QString("sellers"), ::OpenAPI::toJsonValue(m_sellers));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_shipping_data.isSet()) {
        obj.insert(QString("shippingData"), ::OpenAPI::toJsonValue(m_shipping_data));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_description_isSet) {
        obj.insert(QString("statusDescription"), ::OpenAPI::toJsonValue(m_status_description));
    }
    if (m_store_preferences_data.isSet()) {
        obj.insert(QString("storePreferencesData"), ::OpenAPI::toJsonValue(m_store_preferences_data));
    }
    if (m_totals.size() > 0) {
        obj.insert(QString("totals"), ::OpenAPI::toJsonValue(m_totals));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIGetOrder::getAffiliateId() const {
    return m_affiliate_id;
}
void OAIGetOrder::setAffiliateId(const QString &affiliate_id) {
    m_affiliate_id = affiliate_id;
    m_affiliate_id_isSet = true;
}

bool OAIGetOrder::is_affiliate_id_Set() const{
    return m_affiliate_id_isSet;
}

bool OAIGetOrder::is_affiliate_id_Valid() const{
    return m_affiliate_id_isValid;
}

bool OAIGetOrder::isAllowCancellation() const {
    return m_allow_cancellation;
}
void OAIGetOrder::setAllowCancellation(const bool &allow_cancellation) {
    m_allow_cancellation = allow_cancellation;
    m_allow_cancellation_isSet = true;
}

bool OAIGetOrder::is_allow_cancellation_Set() const{
    return m_allow_cancellation_isSet;
}

bool OAIGetOrder::is_allow_cancellation_Valid() const{
    return m_allow_cancellation_isValid;
}

bool OAIGetOrder::isAllowEdition() const {
    return m_allow_edition;
}
void OAIGetOrder::setAllowEdition(const bool &allow_edition) {
    m_allow_edition = allow_edition;
    m_allow_edition_isSet = true;
}

bool OAIGetOrder::is_allow_edition_Set() const{
    return m_allow_edition_isSet;
}

bool OAIGetOrder::is_allow_edition_Valid() const{
    return m_allow_edition_isValid;
}

QString OAIGetOrder::getApprovedBy() const {
    return m_approved_by;
}
void OAIGetOrder::setApprovedBy(const QString &approved_by) {
    m_approved_by = approved_by;
    m_approved_by_isSet = true;
}

bool OAIGetOrder::is_approved_by_Set() const{
    return m_approved_by_isSet;
}

bool OAIGetOrder::is_approved_by_Valid() const{
    return m_approved_by_isValid;
}

QString OAIGetOrder::getAuthorizedDate() const {
    return m_authorized_date;
}
void OAIGetOrder::setAuthorizedDate(const QString &authorized_date) {
    m_authorized_date = authorized_date;
    m_authorized_date_isSet = true;
}

bool OAIGetOrder::is_authorized_date_Set() const{
    return m_authorized_date_isSet;
}

bool OAIGetOrder::is_authorized_date_Valid() const{
    return m_authorized_date_isValid;
}

QString OAIGetOrder::getCallCenterOperatorData() const {
    return m_call_center_operator_data;
}
void OAIGetOrder::setCallCenterOperatorData(const QString &call_center_operator_data) {
    m_call_center_operator_data = call_center_operator_data;
    m_call_center_operator_data_isSet = true;
}

bool OAIGetOrder::is_call_center_operator_data_Set() const{
    return m_call_center_operator_data_isSet;
}

bool OAIGetOrder::is_call_center_operator_data_Valid() const{
    return m_call_center_operator_data_isValid;
}

QString OAIGetOrder::getCancelReason() const {
    return m_cancel_reason;
}
void OAIGetOrder::setCancelReason(const QString &cancel_reason) {
    m_cancel_reason = cancel_reason;
    m_cancel_reason_isSet = true;
}

bool OAIGetOrder::is_cancel_reason_Set() const{
    return m_cancel_reason_isSet;
}

bool OAIGetOrder::is_cancel_reason_Valid() const{
    return m_cancel_reason_isValid;
}

QString OAIGetOrder::getCancelledBy() const {
    return m_cancelled_by;
}
void OAIGetOrder::setCancelledBy(const QString &cancelled_by) {
    m_cancelled_by = cancelled_by;
    m_cancelled_by_isSet = true;
}

bool OAIGetOrder::is_cancelled_by_Set() const{
    return m_cancelled_by_isSet;
}

bool OAIGetOrder::is_cancelled_by_Valid() const{
    return m_cancelled_by_isValid;
}

OAIChangesAttachment OAIGetOrder::getChangesAttachment() const {
    return m_changes_attachment;
}
void OAIGetOrder::setChangesAttachment(const OAIChangesAttachment &changes_attachment) {
    m_changes_attachment = changes_attachment;
    m_changes_attachment_isSet = true;
}

bool OAIGetOrder::is_changes_attachment_Set() const{
    return m_changes_attachment_isSet;
}

bool OAIGetOrder::is_changes_attachment_Valid() const{
    return m_changes_attachment_isValid;
}

OAIClientProfileData OAIGetOrder::getClientProfileData() const {
    return m_client_profile_data;
}
void OAIGetOrder::setClientProfileData(const OAIClientProfileData &client_profile_data) {
    m_client_profile_data = client_profile_data;
    m_client_profile_data_isSet = true;
}

bool OAIGetOrder::is_client_profile_data_Set() const{
    return m_client_profile_data_isSet;
}

bool OAIGetOrder::is_client_profile_data_Valid() const{
    return m_client_profile_data_isValid;
}

QString OAIGetOrder::getCommercialConditionData() const {
    return m_commercial_condition_data;
}
void OAIGetOrder::setCommercialConditionData(const QString &commercial_condition_data) {
    m_commercial_condition_data = commercial_condition_data;
    m_commercial_condition_data_isSet = true;
}

bool OAIGetOrder::is_commercial_condition_data_Set() const{
    return m_commercial_condition_data_isSet;
}

bool OAIGetOrder::is_commercial_condition_data_Valid() const{
    return m_commercial_condition_data_isValid;
}

QString OAIGetOrder::getCreationDate() const {
    return m_creation_date;
}
void OAIGetOrder::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIGetOrder::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIGetOrder::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIGetOrder::getCustomData() const {
    return m_custom_data;
}
void OAIGetOrder::setCustomData(const QString &custom_data) {
    m_custom_data = custom_data;
    m_custom_data_isSet = true;
}

bool OAIGetOrder::is_custom_data_Set() const{
    return m_custom_data_isSet;
}

bool OAIGetOrder::is_custom_data_Valid() const{
    return m_custom_data_isValid;
}

QString OAIGetOrder::getEmailTracked() const {
    return m_email_tracked;
}
void OAIGetOrder::setEmailTracked(const QString &email_tracked) {
    m_email_tracked = email_tracked;
    m_email_tracked_isSet = true;
}

bool OAIGetOrder::is_email_tracked_Set() const{
    return m_email_tracked_isSet;
}

bool OAIGetOrder::is_email_tracked_Valid() const{
    return m_email_tracked_isValid;
}

QString OAIGetOrder::getFollowUpEmail() const {
    return m_follow_up_email;
}
void OAIGetOrder::setFollowUpEmail(const QString &follow_up_email) {
    m_follow_up_email = follow_up_email;
    m_follow_up_email_isSet = true;
}

bool OAIGetOrder::is_follow_up_email_Set() const{
    return m_follow_up_email_isSet;
}

bool OAIGetOrder::is_follow_up_email_Valid() const{
    return m_follow_up_email_isValid;
}

QString OAIGetOrder::getGiftRegistryData() const {
    return m_gift_registry_data;
}
void OAIGetOrder::setGiftRegistryData(const QString &gift_registry_data) {
    m_gift_registry_data = gift_registry_data;
    m_gift_registry_data_isSet = true;
}

bool OAIGetOrder::is_gift_registry_data_Set() const{
    return m_gift_registry_data_isSet;
}

bool OAIGetOrder::is_gift_registry_data_Valid() const{
    return m_gift_registry_data_isValid;
}

QString OAIGetOrder::getHostname() const {
    return m_hostname;
}
void OAIGetOrder::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIGetOrder::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIGetOrder::is_hostname_Valid() const{
    return m_hostname_isValid;
}

OAIObject OAIGetOrder::getInvoiceData() const {
    return m_invoice_data;
}
void OAIGetOrder::setInvoiceData(const OAIObject &invoice_data) {
    m_invoice_data = invoice_data;
    m_invoice_data_isSet = true;
}

bool OAIGetOrder::is_invoice_data_Set() const{
    return m_invoice_data_isSet;
}

bool OAIGetOrder::is_invoice_data_Valid() const{
    return m_invoice_data_isValid;
}

QString OAIGetOrder::getInvoicedDate() const {
    return m_invoiced_date;
}
void OAIGetOrder::setInvoicedDate(const QString &invoiced_date) {
    m_invoiced_date = invoiced_date;
    m_invoiced_date_isSet = true;
}

bool OAIGetOrder::is_invoiced_date_Set() const{
    return m_invoiced_date_isSet;
}

bool OAIGetOrder::is_invoiced_date_Valid() const{
    return m_invoiced_date_isValid;
}

bool OAIGetOrder::isIsCheckedIn() const {
    return m_is_checked_in;
}
void OAIGetOrder::setIsCheckedIn(const bool &is_checked_in) {
    m_is_checked_in = is_checked_in;
    m_is_checked_in_isSet = true;
}

bool OAIGetOrder::is_is_checked_in_Set() const{
    return m_is_checked_in_isSet;
}

bool OAIGetOrder::is_is_checked_in_Valid() const{
    return m_is_checked_in_isValid;
}

bool OAIGetOrder::isIsCompleted() const {
    return m_is_completed;
}
void OAIGetOrder::setIsCompleted(const bool &is_completed) {
    m_is_completed = is_completed;
    m_is_completed_isSet = true;
}

bool OAIGetOrder::is_is_completed_Set() const{
    return m_is_completed_isSet;
}

bool OAIGetOrder::is_is_completed_Valid() const{
    return m_is_completed_isValid;
}

QList<OAIItem> OAIGetOrder::getItems() const {
    return m_items;
}
void OAIGetOrder::setItems(const QList<OAIItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIGetOrder::is_items_Set() const{
    return m_items_isSet;
}

bool OAIGetOrder::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIGetOrder::getLastChange() const {
    return m_last_change;
}
void OAIGetOrder::setLastChange(const QString &last_change) {
    m_last_change = last_change;
    m_last_change_isSet = true;
}

bool OAIGetOrder::is_last_change_Set() const{
    return m_last_change_isSet;
}

bool OAIGetOrder::is_last_change_Valid() const{
    return m_last_change_isValid;
}

QString OAIGetOrder::getLastMessage() const {
    return m_last_message;
}
void OAIGetOrder::setLastMessage(const QString &last_message) {
    m_last_message = last_message;
    m_last_message_isSet = true;
}

bool OAIGetOrder::is_last_message_Set() const{
    return m_last_message_isSet;
}

bool OAIGetOrder::is_last_message_Valid() const{
    return m_last_message_isValid;
}

QString OAIGetOrder::getMarketingData() const {
    return m_marketing_data;
}
void OAIGetOrder::setMarketingData(const QString &marketing_data) {
    m_marketing_data = marketing_data;
    m_marketing_data_isSet = true;
}

bool OAIGetOrder::is_marketing_data_Set() const{
    return m_marketing_data_isSet;
}

bool OAIGetOrder::is_marketing_data_Valid() const{
    return m_marketing_data_isValid;
}

OAIMarketplace OAIGetOrder::getMarketplace() const {
    return m_marketplace;
}
void OAIGetOrder::setMarketplace(const OAIMarketplace &marketplace) {
    m_marketplace = marketplace;
    m_marketplace_isSet = true;
}

bool OAIGetOrder::is_marketplace_Set() const{
    return m_marketplace_isSet;
}

bool OAIGetOrder::is_marketplace_Valid() const{
    return m_marketplace_isValid;
}

QList<QString> OAIGetOrder::getMarketplaceItems() const {
    return m_marketplace_items;
}
void OAIGetOrder::setMarketplaceItems(const QList<QString> &marketplace_items) {
    m_marketplace_items = marketplace_items;
    m_marketplace_items_isSet = true;
}

bool OAIGetOrder::is_marketplace_items_Set() const{
    return m_marketplace_items_isSet;
}

bool OAIGetOrder::is_marketplace_items_Valid() const{
    return m_marketplace_items_isValid;
}

QString OAIGetOrder::getMarketplaceOrderId() const {
    return m_marketplace_order_id;
}
void OAIGetOrder::setMarketplaceOrderId(const QString &marketplace_order_id) {
    m_marketplace_order_id = marketplace_order_id;
    m_marketplace_order_id_isSet = true;
}

bool OAIGetOrder::is_marketplace_order_id_Set() const{
    return m_marketplace_order_id_isSet;
}

bool OAIGetOrder::is_marketplace_order_id_Valid() const{
    return m_marketplace_order_id_isValid;
}

QString OAIGetOrder::getMarketplaceServicesEndpoint() const {
    return m_marketplace_services_endpoint;
}
void OAIGetOrder::setMarketplaceServicesEndpoint(const QString &marketplace_services_endpoint) {
    m_marketplace_services_endpoint = marketplace_services_endpoint;
    m_marketplace_services_endpoint_isSet = true;
}

bool OAIGetOrder::is_marketplace_services_endpoint_Set() const{
    return m_marketplace_services_endpoint_isSet;
}

bool OAIGetOrder::is_marketplace_services_endpoint_Valid() const{
    return m_marketplace_services_endpoint_isValid;
}

QString OAIGetOrder::getMerchantName() const {
    return m_merchant_name;
}
void OAIGetOrder::setMerchantName(const QString &merchant_name) {
    m_merchant_name = merchant_name;
    m_merchant_name_isSet = true;
}

bool OAIGetOrder::is_merchant_name_Set() const{
    return m_merchant_name_isSet;
}

bool OAIGetOrder::is_merchant_name_Valid() const{
    return m_merchant_name_isValid;
}

QString OAIGetOrder::getOpenTextField() const {
    return m_open_text_field;
}
void OAIGetOrder::setOpenTextField(const QString &open_text_field) {
    m_open_text_field = open_text_field;
    m_open_text_field_isSet = true;
}

bool OAIGetOrder::is_open_text_field_Set() const{
    return m_open_text_field_isSet;
}

bool OAIGetOrder::is_open_text_field_Valid() const{
    return m_open_text_field_isValid;
}

QString OAIGetOrder::getOrderFormId() const {
    return m_order_form_id;
}
void OAIGetOrder::setOrderFormId(const QString &order_form_id) {
    m_order_form_id = order_form_id;
    m_order_form_id_isSet = true;
}

bool OAIGetOrder::is_order_form_id_Set() const{
    return m_order_form_id_isSet;
}

bool OAIGetOrder::is_order_form_id_Valid() const{
    return m_order_form_id_isValid;
}

QString OAIGetOrder::getOrderGroup() const {
    return m_order_group;
}
void OAIGetOrder::setOrderGroup(const QString &order_group) {
    m_order_group = order_group;
    m_order_group_isSet = true;
}

bool OAIGetOrder::is_order_group_Set() const{
    return m_order_group_isSet;
}

bool OAIGetOrder::is_order_group_Valid() const{
    return m_order_group_isValid;
}

QString OAIGetOrder::getOrderId() const {
    return m_order_id;
}
void OAIGetOrder::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIGetOrder::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIGetOrder::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIGetOrder::getOrigin() const {
    return m_origin;
}
void OAIGetOrder::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIGetOrder::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIGetOrder::is_origin_Valid() const{
    return m_origin_isValid;
}

OAIPackageAttachment OAIGetOrder::getPackageAttachment() const {
    return m_package_attachment;
}
void OAIGetOrder::setPackageAttachment(const OAIPackageAttachment &package_attachment) {
    m_package_attachment = package_attachment;
    m_package_attachment_isSet = true;
}

bool OAIGetOrder::is_package_attachment_Set() const{
    return m_package_attachment_isSet;
}

bool OAIGetOrder::is_package_attachment_Valid() const{
    return m_package_attachment_isValid;
}

OAIPaymentData OAIGetOrder::getPaymentData() const {
    return m_payment_data;
}
void OAIGetOrder::setPaymentData(const OAIPaymentData &payment_data) {
    m_payment_data = payment_data;
    m_payment_data_isSet = true;
}

bool OAIGetOrder::is_payment_data_Set() const{
    return m_payment_data_isSet;
}

bool OAIGetOrder::is_payment_data_Valid() const{
    return m_payment_data_isValid;
}

OAIRatesAndBenefitsData OAIGetOrder::getRatesAndBenefitsData() const {
    return m_rates_and_benefits_data;
}
void OAIGetOrder::setRatesAndBenefitsData(const OAIRatesAndBenefitsData &rates_and_benefits_data) {
    m_rates_and_benefits_data = rates_and_benefits_data;
    m_rates_and_benefits_data_isSet = true;
}

bool OAIGetOrder::is_rates_and_benefits_data_Set() const{
    return m_rates_and_benefits_data_isSet;
}

bool OAIGetOrder::is_rates_and_benefits_data_Valid() const{
    return m_rates_and_benefits_data_isValid;
}

qint32 OAIGetOrder::getRoundingError() const {
    return m_rounding_error;
}
void OAIGetOrder::setRoundingError(const qint32 &rounding_error) {
    m_rounding_error = rounding_error;
    m_rounding_error_isSet = true;
}

bool OAIGetOrder::is_rounding_error_Set() const{
    return m_rounding_error_isSet;
}

bool OAIGetOrder::is_rounding_error_Valid() const{
    return m_rounding_error_isValid;
}

QString OAIGetOrder::getSalesChannel() const {
    return m_sales_channel;
}
void OAIGetOrder::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAIGetOrder::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAIGetOrder::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

QString OAIGetOrder::getSellerOrderId() const {
    return m_seller_order_id;
}
void OAIGetOrder::setSellerOrderId(const QString &seller_order_id) {
    m_seller_order_id = seller_order_id;
    m_seller_order_id_isSet = true;
}

bool OAIGetOrder::is_seller_order_id_Set() const{
    return m_seller_order_id_isSet;
}

bool OAIGetOrder::is_seller_order_id_Valid() const{
    return m_seller_order_id_isValid;
}

QList<OAISeller> OAIGetOrder::getSellers() const {
    return m_sellers;
}
void OAIGetOrder::setSellers(const QList<OAISeller> &sellers) {
    m_sellers = sellers;
    m_sellers_isSet = true;
}

bool OAIGetOrder::is_sellers_Set() const{
    return m_sellers_isSet;
}

bool OAIGetOrder::is_sellers_Valid() const{
    return m_sellers_isValid;
}

QString OAIGetOrder::getSequence() const {
    return m_sequence;
}
void OAIGetOrder::setSequence(const QString &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIGetOrder::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIGetOrder::is_sequence_Valid() const{
    return m_sequence_isValid;
}

OAIShippingData OAIGetOrder::getShippingData() const {
    return m_shipping_data;
}
void OAIGetOrder::setShippingData(const OAIShippingData &shipping_data) {
    m_shipping_data = shipping_data;
    m_shipping_data_isSet = true;
}

bool OAIGetOrder::is_shipping_data_Set() const{
    return m_shipping_data_isSet;
}

bool OAIGetOrder::is_shipping_data_Valid() const{
    return m_shipping_data_isValid;
}

QString OAIGetOrder::getStatus() const {
    return m_status;
}
void OAIGetOrder::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetOrder::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetOrder::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetOrder::getStatusDescription() const {
    return m_status_description;
}
void OAIGetOrder::setStatusDescription(const QString &status_description) {
    m_status_description = status_description;
    m_status_description_isSet = true;
}

bool OAIGetOrder::is_status_description_Set() const{
    return m_status_description_isSet;
}

bool OAIGetOrder::is_status_description_Valid() const{
    return m_status_description_isValid;
}

OAIStorePreferencesData OAIGetOrder::getStorePreferencesData() const {
    return m_store_preferences_data;
}
void OAIGetOrder::setStorePreferencesData(const OAIStorePreferencesData &store_preferences_data) {
    m_store_preferences_data = store_preferences_data;
    m_store_preferences_data_isSet = true;
}

bool OAIGetOrder::is_store_preferences_data_Set() const{
    return m_store_preferences_data_isSet;
}

bool OAIGetOrder::is_store_preferences_data_Valid() const{
    return m_store_preferences_data_isValid;
}

QList<OAITotal> OAIGetOrder::getTotals() const {
    return m_totals;
}
void OAIGetOrder::setTotals(const QList<OAITotal> &totals) {
    m_totals = totals;
    m_totals_isSet = true;
}

bool OAIGetOrder::is_totals_Set() const{
    return m_totals_isSet;
}

bool OAIGetOrder::is_totals_Valid() const{
    return m_totals_isValid;
}

qint32 OAIGetOrder::getValue() const {
    return m_value;
}
void OAIGetOrder::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIGetOrder::is_value_Set() const{
    return m_value_isSet;
}

bool OAIGetOrder::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIGetOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affiliate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_cancellation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approved_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorized_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_center_operator_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancelled_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changes_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_profile_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commercial_condition_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_tracked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_follow_up_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_registry_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoiced_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_checked_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_services_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_text_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_form_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rates_and_benefits_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounding_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sellers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_preferences_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_affiliate_id_isValid && m_allow_cancellation_isValid && m_allow_edition_isValid && m_approved_by_isValid && m_authorized_date_isValid && m_call_center_operator_data_isValid && m_cancel_reason_isValid && m_cancelled_by_isValid && m_changes_attachment_isValid && m_client_profile_data_isValid && m_commercial_condition_data_isValid && m_creation_date_isValid && m_custom_data_isValid && m_email_tracked_isValid && m_follow_up_email_isValid && m_gift_registry_data_isValid && m_hostname_isValid && m_invoice_data_isValid && m_invoiced_date_isValid && m_is_checked_in_isValid && m_is_completed_isValid && m_items_isValid && m_last_change_isValid && m_last_message_isValid && m_marketing_data_isValid && m_marketplace_isValid && m_marketplace_items_isValid && m_marketplace_order_id_isValid && m_marketplace_services_endpoint_isValid && m_merchant_name_isValid && m_open_text_field_isValid && m_order_form_id_isValid && m_order_group_isValid && m_order_id_isValid && m_origin_isValid && m_package_attachment_isValid && m_payment_data_isValid && m_rates_and_benefits_data_isValid && m_rounding_error_isValid && m_sales_channel_isValid && m_seller_order_id_isValid && m_sellers_isValid && m_sequence_isValid && m_shipping_data_isValid && m_status_isValid && m_status_description_isValid && m_store_preferences_data_isValid && m_totals_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
