/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem_priceDefinitions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem_priceDefinitions::OAIItem_priceDefinitions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem_priceDefinitions::OAIItem_priceDefinitions() {
    this->initializeModel();
}

OAIItem_priceDefinitions::~OAIItem_priceDefinitions() {}

void OAIItem_priceDefinitions::initializeModel() {

    m_calculated_selling_price_isSet = false;
    m_calculated_selling_price_isValid = false;

    m_selling_prices_isSet = false;
    m_selling_prices_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIItem_priceDefinitions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem_priceDefinitions::fromJsonObject(QJsonObject json) {

    m_calculated_selling_price_isValid = ::OpenAPI::fromJsonValue(m_calculated_selling_price, json[QString("calculatedSellingPrice")]);
    m_calculated_selling_price_isSet = !json[QString("calculatedSellingPrice")].isNull() && m_calculated_selling_price_isValid;

    m_selling_prices_isValid = ::OpenAPI::fromJsonValue(m_selling_prices, json[QString("sellingPrices")]);
    m_selling_prices_isSet = !json[QString("sellingPrices")].isNull() && m_selling_prices_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIItem_priceDefinitions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem_priceDefinitions::asJsonObject() const {
    QJsonObject obj;
    if (m_calculated_selling_price_isSet) {
        obj.insert(QString("calculatedSellingPrice"), ::OpenAPI::toJsonValue(m_calculated_selling_price));
    }
    if (m_selling_prices.size() > 0) {
        obj.insert(QString("sellingPrices"), ::OpenAPI::toJsonValue(m_selling_prices));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAIItem_priceDefinitions::getCalculatedSellingPrice() const {
    return m_calculated_selling_price;
}
void OAIItem_priceDefinitions::setCalculatedSellingPrice(const qint32 &calculated_selling_price) {
    m_calculated_selling_price = calculated_selling_price;
    m_calculated_selling_price_isSet = true;
}

bool OAIItem_priceDefinitions::is_calculated_selling_price_Set() const{
    return m_calculated_selling_price_isSet;
}

bool OAIItem_priceDefinitions::is_calculated_selling_price_Valid() const{
    return m_calculated_selling_price_isValid;
}

QList<OAIItem_priceDefinitions_sellingPrices_inner> OAIItem_priceDefinitions::getSellingPrices() const {
    return m_selling_prices;
}
void OAIItem_priceDefinitions::setSellingPrices(const QList<OAIItem_priceDefinitions_sellingPrices_inner> &selling_prices) {
    m_selling_prices = selling_prices;
    m_selling_prices_isSet = true;
}

bool OAIItem_priceDefinitions::is_selling_prices_Set() const{
    return m_selling_prices_isSet;
}

bool OAIItem_priceDefinitions::is_selling_prices_Valid() const{
    return m_selling_prices_isValid;
}

qint32 OAIItem_priceDefinitions::getTotal() const {
    return m_total;
}
void OAIItem_priceDefinitions::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIItem_priceDefinitions::is_total_Set() const{
    return m_total_isSet;
}

bool OAIItem_priceDefinitions::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIItem_priceDefinitions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculated_selling_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selling_prices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem_priceDefinitions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_calculated_selling_price_isValid && m_selling_prices_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
