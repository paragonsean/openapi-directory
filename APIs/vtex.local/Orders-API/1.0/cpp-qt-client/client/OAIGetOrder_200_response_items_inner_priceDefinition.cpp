/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrder_200_response_items_inner_priceDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrder_200_response_items_inner_priceDefinition::OAIGetOrder_200_response_items_inner_priceDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrder_200_response_items_inner_priceDefinition::OAIGetOrder_200_response_items_inner_priceDefinition() {
    this->initializeModel();
}

OAIGetOrder_200_response_items_inner_priceDefinition::~OAIGetOrder_200_response_items_inner_priceDefinition() {}

void OAIGetOrder_200_response_items_inner_priceDefinition::initializeModel() {

    m_calculated_selling_price_isSet = false;
    m_calculated_selling_price_isValid = false;

    m_selling_prices_isSet = false;
    m_selling_prices_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIGetOrder_200_response_items_inner_priceDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrder_200_response_items_inner_priceDefinition::fromJsonObject(QJsonObject json) {

    m_calculated_selling_price_isValid = ::OpenAPI::fromJsonValue(m_calculated_selling_price, json[QString("calculatedSellingPrice")]);
    m_calculated_selling_price_isSet = !json[QString("calculatedSellingPrice")].isNull() && m_calculated_selling_price_isValid;

    m_selling_prices_isValid = ::OpenAPI::fromJsonValue(m_selling_prices, json[QString("sellingPrices")]);
    m_selling_prices_isSet = !json[QString("sellingPrices")].isNull() && m_selling_prices_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIGetOrder_200_response_items_inner_priceDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrder_200_response_items_inner_priceDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_calculated_selling_price_isSet) {
        obj.insert(QString("calculatedSellingPrice"), ::OpenAPI::toJsonValue(m_calculated_selling_price));
    }
    if (m_selling_prices.size() > 0) {
        obj.insert(QString("sellingPrices"), ::OpenAPI::toJsonValue(m_selling_prices));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAIGetOrder_200_response_items_inner_priceDefinition::getCalculatedSellingPrice() const {
    return m_calculated_selling_price;
}
void OAIGetOrder_200_response_items_inner_priceDefinition::setCalculatedSellingPrice(const qint32 &calculated_selling_price) {
    m_calculated_selling_price = calculated_selling_price;
    m_calculated_selling_price_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_priceDefinition::is_calculated_selling_price_Set() const{
    return m_calculated_selling_price_isSet;
}

bool OAIGetOrder_200_response_items_inner_priceDefinition::is_calculated_selling_price_Valid() const{
    return m_calculated_selling_price_isValid;
}

QList<OAIGetOrder_200_response_items_inner_priceDefinition_sellingPrices_inner> OAIGetOrder_200_response_items_inner_priceDefinition::getSellingPrices() const {
    return m_selling_prices;
}
void OAIGetOrder_200_response_items_inner_priceDefinition::setSellingPrices(const QList<OAIGetOrder_200_response_items_inner_priceDefinition_sellingPrices_inner> &selling_prices) {
    m_selling_prices = selling_prices;
    m_selling_prices_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_priceDefinition::is_selling_prices_Set() const{
    return m_selling_prices_isSet;
}

bool OAIGetOrder_200_response_items_inner_priceDefinition::is_selling_prices_Valid() const{
    return m_selling_prices_isValid;
}

qint32 OAIGetOrder_200_response_items_inner_priceDefinition::getTotal() const {
    return m_total;
}
void OAIGetOrder_200_response_items_inner_priceDefinition::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_priceDefinition::is_total_Set() const{
    return m_total_isSet;
}

bool OAIGetOrder_200_response_items_inner_priceDefinition::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIGetOrder_200_response_items_inner_priceDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calculated_selling_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selling_prices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrder_200_response_items_inner_priceDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
