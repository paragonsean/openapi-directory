/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserorderdetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserorderdetails::OAIUserorderdetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserorderdetails::OAIUserorderdetails() {
    this->initializeModel();
}

OAIUserorderdetails::~OAIUserorderdetails() {}

void OAIUserorderdetails::initializeModel() {

    m_affiliate_id_isSet = false;
    m_affiliate_id_isValid = false;

    m_allow_cancellation_isSet = false;
    m_allow_cancellation_isValid = false;

    m_allow_edition_isSet = false;
    m_allow_edition_isValid = false;

    m_authorized_date_isSet = false;
    m_authorized_date_isValid = false;

    m_call_center_operator_data_isSet = false;
    m_call_center_operator_data_isValid = false;

    m_cancel_reason_isSet = false;
    m_cancel_reason_isValid = false;

    m_cancellation_data_isSet = false;
    m_cancellation_data_isValid = false;

    m_changes_attachment_isSet = false;
    m_changes_attachment_isValid = false;

    m_checked_in_pickup_point_id_isSet = false;
    m_checked_in_pickup_point_id_isValid = false;

    m_client_preferences_data_isSet = false;
    m_client_preferences_data_isValid = false;

    m_client_profile_data_isSet = false;
    m_client_profile_data_isValid = false;

    m_commercial_condition_data_isSet = false;
    m_commercial_condition_data_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_custom_data_isSet = false;
    m_custom_data_isValid = false;

    m_follow_up_email_isSet = false;
    m_follow_up_email_isValid = false;

    m_gift_registry_data_isSet = false;
    m_gift_registry_data_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_invoice_data_isSet = false;
    m_invoice_data_isValid = false;

    m_invoiced_date_isSet = false;
    m_invoiced_date_isValid = false;

    m_is_checked_in_isSet = false;
    m_is_checked_in_isValid = false;

    m_is_completed_isSet = false;
    m_is_completed_isValid = false;

    m_item_metadata_isSet = false;
    m_item_metadata_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_last_change_isSet = false;
    m_last_change_isValid = false;

    m_last_message_isSet = false;
    m_last_message_isValid = false;

    m_marketing_data_isSet = false;
    m_marketing_data_isValid = false;

    m_marketplace_isSet = false;
    m_marketplace_isValid = false;

    m_marketplace_items_isSet = false;
    m_marketplace_items_isValid = false;

    m_marketplace_order_id_isSet = false;
    m_marketplace_order_id_isValid = false;

    m_marketplace_services_endpoint_isSet = false;
    m_marketplace_services_endpoint_isValid = false;

    m_merchant_name_isSet = false;
    m_merchant_name_isValid = false;

    m_open_text_field_isSet = false;
    m_open_text_field_isValid = false;

    m_order_form_id_isSet = false;
    m_order_form_id_isValid = false;

    m_order_group_isSet = false;
    m_order_group_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_package_attachment_isSet = false;
    m_package_attachment_isValid = false;

    m_payment_data_isSet = false;
    m_payment_data_isValid = false;

    m_rates_and_benefits_data_isSet = false;
    m_rates_and_benefits_data_isValid = false;

    m_rounding_error_isSet = false;
    m_rounding_error_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_seller_order_id_isSet = false;
    m_seller_order_id_isValid = false;

    m_sellers_isSet = false;
    m_sellers_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_shipping_data_isSet = false;
    m_shipping_data_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_description_isSet = false;
    m_status_description_isValid = false;

    m_store_preferences_data_isSet = false;
    m_store_preferences_data_isValid = false;

    m_subscription_data_isSet = false;
    m_subscription_data_isValid = false;

    m_tax_data_isSet = false;
    m_tax_data_isValid = false;

    m_totals_isSet = false;
    m_totals_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIUserorderdetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserorderdetails::fromJsonObject(QJsonObject json) {

    m_affiliate_id_isValid = ::OpenAPI::fromJsonValue(m_affiliate_id, json[QString("affiliateId")]);
    m_affiliate_id_isSet = !json[QString("affiliateId")].isNull() && m_affiliate_id_isValid;

    m_allow_cancellation_isValid = ::OpenAPI::fromJsonValue(m_allow_cancellation, json[QString("allowCancellation")]);
    m_allow_cancellation_isSet = !json[QString("allowCancellation")].isNull() && m_allow_cancellation_isValid;

    m_allow_edition_isValid = ::OpenAPI::fromJsonValue(m_allow_edition, json[QString("allowEdition")]);
    m_allow_edition_isSet = !json[QString("allowEdition")].isNull() && m_allow_edition_isValid;

    m_authorized_date_isValid = ::OpenAPI::fromJsonValue(m_authorized_date, json[QString("authorizedDate")]);
    m_authorized_date_isSet = !json[QString("authorizedDate")].isNull() && m_authorized_date_isValid;

    m_call_center_operator_data_isValid = ::OpenAPI::fromJsonValue(m_call_center_operator_data, json[QString("callCenterOperatorData")]);
    m_call_center_operator_data_isSet = !json[QString("callCenterOperatorData")].isNull() && m_call_center_operator_data_isValid;

    m_cancel_reason_isValid = ::OpenAPI::fromJsonValue(m_cancel_reason, json[QString("cancelReason")]);
    m_cancel_reason_isSet = !json[QString("cancelReason")].isNull() && m_cancel_reason_isValid;

    m_cancellation_data_isValid = ::OpenAPI::fromJsonValue(m_cancellation_data, json[QString("cancellationData")]);
    m_cancellation_data_isSet = !json[QString("cancellationData")].isNull() && m_cancellation_data_isValid;

    m_changes_attachment_isValid = ::OpenAPI::fromJsonValue(m_changes_attachment, json[QString("changesAttachment")]);
    m_changes_attachment_isSet = !json[QString("changesAttachment")].isNull() && m_changes_attachment_isValid;

    m_checked_in_pickup_point_id_isValid = ::OpenAPI::fromJsonValue(m_checked_in_pickup_point_id, json[QString("checkedInPickupPointId")]);
    m_checked_in_pickup_point_id_isSet = !json[QString("checkedInPickupPointId")].isNull() && m_checked_in_pickup_point_id_isValid;

    m_client_preferences_data_isValid = ::OpenAPI::fromJsonValue(m_client_preferences_data, json[QString("clientPreferencesData")]);
    m_client_preferences_data_isSet = !json[QString("clientPreferencesData")].isNull() && m_client_preferences_data_isValid;

    m_client_profile_data_isValid = ::OpenAPI::fromJsonValue(m_client_profile_data, json[QString("clientProfileData")]);
    m_client_profile_data_isSet = !json[QString("clientProfileData")].isNull() && m_client_profile_data_isValid;

    m_commercial_condition_data_isValid = ::OpenAPI::fromJsonValue(m_commercial_condition_data, json[QString("commercialConditionData")]);
    m_commercial_condition_data_isSet = !json[QString("commercialConditionData")].isNull() && m_commercial_condition_data_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_custom_data_isValid = ::OpenAPI::fromJsonValue(m_custom_data, json[QString("customData")]);
    m_custom_data_isSet = !json[QString("customData")].isNull() && m_custom_data_isValid;

    m_follow_up_email_isValid = ::OpenAPI::fromJsonValue(m_follow_up_email, json[QString("followUpEmail")]);
    m_follow_up_email_isSet = !json[QString("followUpEmail")].isNull() && m_follow_up_email_isValid;

    m_gift_registry_data_isValid = ::OpenAPI::fromJsonValue(m_gift_registry_data, json[QString("giftRegistryData")]);
    m_gift_registry_data_isSet = !json[QString("giftRegistryData")].isNull() && m_gift_registry_data_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_invoice_data_isValid = ::OpenAPI::fromJsonValue(m_invoice_data, json[QString("invoiceData")]);
    m_invoice_data_isSet = !json[QString("invoiceData")].isNull() && m_invoice_data_isValid;

    m_invoiced_date_isValid = ::OpenAPI::fromJsonValue(m_invoiced_date, json[QString("invoicedDate")]);
    m_invoiced_date_isSet = !json[QString("invoicedDate")].isNull() && m_invoiced_date_isValid;

    m_is_checked_in_isValid = ::OpenAPI::fromJsonValue(m_is_checked_in, json[QString("isCheckedIn")]);
    m_is_checked_in_isSet = !json[QString("isCheckedIn")].isNull() && m_is_checked_in_isValid;

    m_is_completed_isValid = ::OpenAPI::fromJsonValue(m_is_completed, json[QString("isCompleted")]);
    m_is_completed_isSet = !json[QString("isCompleted")].isNull() && m_is_completed_isValid;

    m_item_metadata_isValid = ::OpenAPI::fromJsonValue(m_item_metadata, json[QString("itemMetadata")]);
    m_item_metadata_isSet = !json[QString("itemMetadata")].isNull() && m_item_metadata_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_last_change_isValid = ::OpenAPI::fromJsonValue(m_last_change, json[QString("lastChange")]);
    m_last_change_isSet = !json[QString("lastChange")].isNull() && m_last_change_isValid;

    m_last_message_isValid = ::OpenAPI::fromJsonValue(m_last_message, json[QString("lastMessage")]);
    m_last_message_isSet = !json[QString("lastMessage")].isNull() && m_last_message_isValid;

    m_marketing_data_isValid = ::OpenAPI::fromJsonValue(m_marketing_data, json[QString("marketingData")]);
    m_marketing_data_isSet = !json[QString("marketingData")].isNull() && m_marketing_data_isValid;

    m_marketplace_isValid = ::OpenAPI::fromJsonValue(m_marketplace, json[QString("marketplace")]);
    m_marketplace_isSet = !json[QString("marketplace")].isNull() && m_marketplace_isValid;

    m_marketplace_items_isValid = ::OpenAPI::fromJsonValue(m_marketplace_items, json[QString("marketplaceItems")]);
    m_marketplace_items_isSet = !json[QString("marketplaceItems")].isNull() && m_marketplace_items_isValid;

    m_marketplace_order_id_isValid = ::OpenAPI::fromJsonValue(m_marketplace_order_id, json[QString("marketplaceOrderId")]);
    m_marketplace_order_id_isSet = !json[QString("marketplaceOrderId")].isNull() && m_marketplace_order_id_isValid;

    m_marketplace_services_endpoint_isValid = ::OpenAPI::fromJsonValue(m_marketplace_services_endpoint, json[QString("marketplaceServicesEndpoint")]);
    m_marketplace_services_endpoint_isSet = !json[QString("marketplaceServicesEndpoint")].isNull() && m_marketplace_services_endpoint_isValid;

    m_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_name, json[QString("merchantName")]);
    m_merchant_name_isSet = !json[QString("merchantName")].isNull() && m_merchant_name_isValid;

    m_open_text_field_isValid = ::OpenAPI::fromJsonValue(m_open_text_field, json[QString("openTextField")]);
    m_open_text_field_isSet = !json[QString("openTextField")].isNull() && m_open_text_field_isValid;

    m_order_form_id_isValid = ::OpenAPI::fromJsonValue(m_order_form_id, json[QString("orderFormId")]);
    m_order_form_id_isSet = !json[QString("orderFormId")].isNull() && m_order_form_id_isValid;

    m_order_group_isValid = ::OpenAPI::fromJsonValue(m_order_group, json[QString("orderGroup")]);
    m_order_group_isSet = !json[QString("orderGroup")].isNull() && m_order_group_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_package_attachment_isValid = ::OpenAPI::fromJsonValue(m_package_attachment, json[QString("packageAttachment")]);
    m_package_attachment_isSet = !json[QString("packageAttachment")].isNull() && m_package_attachment_isValid;

    m_payment_data_isValid = ::OpenAPI::fromJsonValue(m_payment_data, json[QString("paymentData")]);
    m_payment_data_isSet = !json[QString("paymentData")].isNull() && m_payment_data_isValid;

    m_rates_and_benefits_data_isValid = ::OpenAPI::fromJsonValue(m_rates_and_benefits_data, json[QString("ratesAndBenefitsData")]);
    m_rates_and_benefits_data_isSet = !json[QString("ratesAndBenefitsData")].isNull() && m_rates_and_benefits_data_isValid;

    m_rounding_error_isValid = ::OpenAPI::fromJsonValue(m_rounding_error, json[QString("roundingError")]);
    m_rounding_error_isSet = !json[QString("roundingError")].isNull() && m_rounding_error_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;

    m_seller_order_id_isValid = ::OpenAPI::fromJsonValue(m_seller_order_id, json[QString("sellerOrderId")]);
    m_seller_order_id_isSet = !json[QString("sellerOrderId")].isNull() && m_seller_order_id_isValid;

    m_sellers_isValid = ::OpenAPI::fromJsonValue(m_sellers, json[QString("sellers")]);
    m_sellers_isSet = !json[QString("sellers")].isNull() && m_sellers_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_shipping_data_isValid = ::OpenAPI::fromJsonValue(m_shipping_data, json[QString("shippingData")]);
    m_shipping_data_isSet = !json[QString("shippingData")].isNull() && m_shipping_data_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_description_isValid = ::OpenAPI::fromJsonValue(m_status_description, json[QString("statusDescription")]);
    m_status_description_isSet = !json[QString("statusDescription")].isNull() && m_status_description_isValid;

    m_store_preferences_data_isValid = ::OpenAPI::fromJsonValue(m_store_preferences_data, json[QString("storePreferencesData")]);
    m_store_preferences_data_isSet = !json[QString("storePreferencesData")].isNull() && m_store_preferences_data_isValid;

    m_subscription_data_isValid = ::OpenAPI::fromJsonValue(m_subscription_data, json[QString("subscriptionData")]);
    m_subscription_data_isSet = !json[QString("subscriptionData")].isNull() && m_subscription_data_isValid;

    m_tax_data_isValid = ::OpenAPI::fromJsonValue(m_tax_data, json[QString("taxData")]);
    m_tax_data_isSet = !json[QString("taxData")].isNull() && m_tax_data_isValid;

    m_totals_isValid = ::OpenAPI::fromJsonValue(m_totals, json[QString("totals")]);
    m_totals_isSet = !json[QString("totals")].isNull() && m_totals_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIUserorderdetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserorderdetails::asJsonObject() const {
    QJsonObject obj;
    if (m_affiliate_id_isSet) {
        obj.insert(QString("affiliateId"), ::OpenAPI::toJsonValue(m_affiliate_id));
    }
    if (m_allow_cancellation_isSet) {
        obj.insert(QString("allowCancellation"), ::OpenAPI::toJsonValue(m_allow_cancellation));
    }
    if (m_allow_edition_isSet) {
        obj.insert(QString("allowEdition"), ::OpenAPI::toJsonValue(m_allow_edition));
    }
    if (m_authorized_date_isSet) {
        obj.insert(QString("authorizedDate"), ::OpenAPI::toJsonValue(m_authorized_date));
    }
    if (m_call_center_operator_data_isSet) {
        obj.insert(QString("callCenterOperatorData"), ::OpenAPI::toJsonValue(m_call_center_operator_data));
    }
    if (m_cancel_reason_isSet) {
        obj.insert(QString("cancelReason"), ::OpenAPI::toJsonValue(m_cancel_reason));
    }
    if (m_cancellation_data.isSet()) {
        obj.insert(QString("cancellationData"), ::OpenAPI::toJsonValue(m_cancellation_data));
    }
    if (m_changes_attachment.isSet()) {
        obj.insert(QString("changesAttachment"), ::OpenAPI::toJsonValue(m_changes_attachment));
    }
    if (m_checked_in_pickup_point_id_isSet) {
        obj.insert(QString("checkedInPickupPointId"), ::OpenAPI::toJsonValue(m_checked_in_pickup_point_id));
    }
    if (m_client_preferences_data.isSet()) {
        obj.insert(QString("clientPreferencesData"), ::OpenAPI::toJsonValue(m_client_preferences_data));
    }
    if (m_client_profile_data.isSet()) {
        obj.insert(QString("clientProfileData"), ::OpenAPI::toJsonValue(m_client_profile_data));
    }
    if (m_commercial_condition_data_isSet) {
        obj.insert(QString("commercialConditionData"), ::OpenAPI::toJsonValue(m_commercial_condition_data));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_custom_data_isSet) {
        obj.insert(QString("customData"), ::OpenAPI::toJsonValue(m_custom_data));
    }
    if (m_follow_up_email_isSet) {
        obj.insert(QString("followUpEmail"), ::OpenAPI::toJsonValue(m_follow_up_email));
    }
    if (m_gift_registry_data_isSet) {
        obj.insert(QString("giftRegistryData"), ::OpenAPI::toJsonValue(m_gift_registry_data));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_invoice_data_isSet) {
        obj.insert(QString("invoiceData"), ::OpenAPI::toJsonValue(m_invoice_data));
    }
    if (m_invoiced_date_isSet) {
        obj.insert(QString("invoicedDate"), ::OpenAPI::toJsonValue(m_invoiced_date));
    }
    if (m_is_checked_in_isSet) {
        obj.insert(QString("isCheckedIn"), ::OpenAPI::toJsonValue(m_is_checked_in));
    }
    if (m_is_completed_isSet) {
        obj.insert(QString("isCompleted"), ::OpenAPI::toJsonValue(m_is_completed));
    }
    if (m_item_metadata.isSet()) {
        obj.insert(QString("itemMetadata"), ::OpenAPI::toJsonValue(m_item_metadata));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_last_change_isSet) {
        obj.insert(QString("lastChange"), ::OpenAPI::toJsonValue(m_last_change));
    }
    if (m_last_message_isSet) {
        obj.insert(QString("lastMessage"), ::OpenAPI::toJsonValue(m_last_message));
    }
    if (m_marketing_data.isSet()) {
        obj.insert(QString("marketingData"), ::OpenAPI::toJsonValue(m_marketing_data));
    }
    if (m_marketplace.isSet()) {
        obj.insert(QString("marketplace"), ::OpenAPI::toJsonValue(m_marketplace));
    }
    if (m_marketplace_items.size() > 0) {
        obj.insert(QString("marketplaceItems"), ::OpenAPI::toJsonValue(m_marketplace_items));
    }
    if (m_marketplace_order_id_isSet) {
        obj.insert(QString("marketplaceOrderId"), ::OpenAPI::toJsonValue(m_marketplace_order_id));
    }
    if (m_marketplace_services_endpoint_isSet) {
        obj.insert(QString("marketplaceServicesEndpoint"), ::OpenAPI::toJsonValue(m_marketplace_services_endpoint));
    }
    if (m_merchant_name_isSet) {
        obj.insert(QString("merchantName"), ::OpenAPI::toJsonValue(m_merchant_name));
    }
    if (m_open_text_field_isSet) {
        obj.insert(QString("openTextField"), ::OpenAPI::toJsonValue(m_open_text_field));
    }
    if (m_order_form_id_isSet) {
        obj.insert(QString("orderFormId"), ::OpenAPI::toJsonValue(m_order_form_id));
    }
    if (m_order_group_isSet) {
        obj.insert(QString("orderGroup"), ::OpenAPI::toJsonValue(m_order_group));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_package_attachment.isSet()) {
        obj.insert(QString("packageAttachment"), ::OpenAPI::toJsonValue(m_package_attachment));
    }
    if (m_payment_data.isSet()) {
        obj.insert(QString("paymentData"), ::OpenAPI::toJsonValue(m_payment_data));
    }
    if (m_rates_and_benefits_data.isSet()) {
        obj.insert(QString("ratesAndBenefitsData"), ::OpenAPI::toJsonValue(m_rates_and_benefits_data));
    }
    if (m_rounding_error_isSet) {
        obj.insert(QString("roundingError"), ::OpenAPI::toJsonValue(m_rounding_error));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_seller_order_id_isSet) {
        obj.insert(QString("sellerOrderId"), ::OpenAPI::toJsonValue(m_seller_order_id));
    }
    if (m_sellers.size() > 0) {
        obj.insert(QString("sellers"), ::OpenAPI::toJsonValue(m_sellers));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_shipping_data.isSet()) {
        obj.insert(QString("shippingData"), ::OpenAPI::toJsonValue(m_shipping_data));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_description_isSet) {
        obj.insert(QString("statusDescription"), ::OpenAPI::toJsonValue(m_status_description));
    }
    if (m_store_preferences_data.isSet()) {
        obj.insert(QString("storePreferencesData"), ::OpenAPI::toJsonValue(m_store_preferences_data));
    }
    if (m_subscription_data.isSet()) {
        obj.insert(QString("subscriptionData"), ::OpenAPI::toJsonValue(m_subscription_data));
    }
    if (m_tax_data.isSet()) {
        obj.insert(QString("taxData"), ::OpenAPI::toJsonValue(m_tax_data));
    }
    if (m_totals.size() > 0) {
        obj.insert(QString("totals"), ::OpenAPI::toJsonValue(m_totals));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIUserorderdetails::getAffiliateId() const {
    return m_affiliate_id;
}
void OAIUserorderdetails::setAffiliateId(const QString &affiliate_id) {
    m_affiliate_id = affiliate_id;
    m_affiliate_id_isSet = true;
}

bool OAIUserorderdetails::is_affiliate_id_Set() const{
    return m_affiliate_id_isSet;
}

bool OAIUserorderdetails::is_affiliate_id_Valid() const{
    return m_affiliate_id_isValid;
}

bool OAIUserorderdetails::isAllowCancellation() const {
    return m_allow_cancellation;
}
void OAIUserorderdetails::setAllowCancellation(const bool &allow_cancellation) {
    m_allow_cancellation = allow_cancellation;
    m_allow_cancellation_isSet = true;
}

bool OAIUserorderdetails::is_allow_cancellation_Set() const{
    return m_allow_cancellation_isSet;
}

bool OAIUserorderdetails::is_allow_cancellation_Valid() const{
    return m_allow_cancellation_isValid;
}

bool OAIUserorderdetails::isAllowEdition() const {
    return m_allow_edition;
}
void OAIUserorderdetails::setAllowEdition(const bool &allow_edition) {
    m_allow_edition = allow_edition;
    m_allow_edition_isSet = true;
}

bool OAIUserorderdetails::is_allow_edition_Set() const{
    return m_allow_edition_isSet;
}

bool OAIUserorderdetails::is_allow_edition_Valid() const{
    return m_allow_edition_isValid;
}

QString OAIUserorderdetails::getAuthorizedDate() const {
    return m_authorized_date;
}
void OAIUserorderdetails::setAuthorizedDate(const QString &authorized_date) {
    m_authorized_date = authorized_date;
    m_authorized_date_isSet = true;
}

bool OAIUserorderdetails::is_authorized_date_Set() const{
    return m_authorized_date_isSet;
}

bool OAIUserorderdetails::is_authorized_date_Valid() const{
    return m_authorized_date_isValid;
}

QString OAIUserorderdetails::getCallCenterOperatorData() const {
    return m_call_center_operator_data;
}
void OAIUserorderdetails::setCallCenterOperatorData(const QString &call_center_operator_data) {
    m_call_center_operator_data = call_center_operator_data;
    m_call_center_operator_data_isSet = true;
}

bool OAIUserorderdetails::is_call_center_operator_data_Set() const{
    return m_call_center_operator_data_isSet;
}

bool OAIUserorderdetails::is_call_center_operator_data_Valid() const{
    return m_call_center_operator_data_isValid;
}

QString OAIUserorderdetails::getCancelReason() const {
    return m_cancel_reason;
}
void OAIUserorderdetails::setCancelReason(const QString &cancel_reason) {
    m_cancel_reason = cancel_reason;
    m_cancel_reason_isSet = true;
}

bool OAIUserorderdetails::is_cancel_reason_Set() const{
    return m_cancel_reason_isSet;
}

bool OAIUserorderdetails::is_cancel_reason_Valid() const{
    return m_cancel_reason_isValid;
}

OAIUserorderdetails_cancellationData OAIUserorderdetails::getCancellationData() const {
    return m_cancellation_data;
}
void OAIUserorderdetails::setCancellationData(const OAIUserorderdetails_cancellationData &cancellation_data) {
    m_cancellation_data = cancellation_data;
    m_cancellation_data_isSet = true;
}

bool OAIUserorderdetails::is_cancellation_data_Set() const{
    return m_cancellation_data_isSet;
}

bool OAIUserorderdetails::is_cancellation_data_Valid() const{
    return m_cancellation_data_isValid;
}

OAIChangesAttachment OAIUserorderdetails::getChangesAttachment() const {
    return m_changes_attachment;
}
void OAIUserorderdetails::setChangesAttachment(const OAIChangesAttachment &changes_attachment) {
    m_changes_attachment = changes_attachment;
    m_changes_attachment_isSet = true;
}

bool OAIUserorderdetails::is_changes_attachment_Set() const{
    return m_changes_attachment_isSet;
}

bool OAIUserorderdetails::is_changes_attachment_Valid() const{
    return m_changes_attachment_isValid;
}

QString OAIUserorderdetails::getCheckedInPickupPointId() const {
    return m_checked_in_pickup_point_id;
}
void OAIUserorderdetails::setCheckedInPickupPointId(const QString &checked_in_pickup_point_id) {
    m_checked_in_pickup_point_id = checked_in_pickup_point_id;
    m_checked_in_pickup_point_id_isSet = true;
}

bool OAIUserorderdetails::is_checked_in_pickup_point_id_Set() const{
    return m_checked_in_pickup_point_id_isSet;
}

bool OAIUserorderdetails::is_checked_in_pickup_point_id_Valid() const{
    return m_checked_in_pickup_point_id_isValid;
}

OAIUserorderdetails_clientPreferencesData OAIUserorderdetails::getClientPreferencesData() const {
    return m_client_preferences_data;
}
void OAIUserorderdetails::setClientPreferencesData(const OAIUserorderdetails_clientPreferencesData &client_preferences_data) {
    m_client_preferences_data = client_preferences_data;
    m_client_preferences_data_isSet = true;
}

bool OAIUserorderdetails::is_client_preferences_data_Set() const{
    return m_client_preferences_data_isSet;
}

bool OAIUserorderdetails::is_client_preferences_data_Valid() const{
    return m_client_preferences_data_isValid;
}

OAIClientProfileData OAIUserorderdetails::getClientProfileData() const {
    return m_client_profile_data;
}
void OAIUserorderdetails::setClientProfileData(const OAIClientProfileData &client_profile_data) {
    m_client_profile_data = client_profile_data;
    m_client_profile_data_isSet = true;
}

bool OAIUserorderdetails::is_client_profile_data_Set() const{
    return m_client_profile_data_isSet;
}

bool OAIUserorderdetails::is_client_profile_data_Valid() const{
    return m_client_profile_data_isValid;
}

QString OAIUserorderdetails::getCommercialConditionData() const {
    return m_commercial_condition_data;
}
void OAIUserorderdetails::setCommercialConditionData(const QString &commercial_condition_data) {
    m_commercial_condition_data = commercial_condition_data;
    m_commercial_condition_data_isSet = true;
}

bool OAIUserorderdetails::is_commercial_condition_data_Set() const{
    return m_commercial_condition_data_isSet;
}

bool OAIUserorderdetails::is_commercial_condition_data_Valid() const{
    return m_commercial_condition_data_isValid;
}

QString OAIUserorderdetails::getCreationDate() const {
    return m_creation_date;
}
void OAIUserorderdetails::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIUserorderdetails::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIUserorderdetails::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIUserorderdetails::getCustomData() const {
    return m_custom_data;
}
void OAIUserorderdetails::setCustomData(const QString &custom_data) {
    m_custom_data = custom_data;
    m_custom_data_isSet = true;
}

bool OAIUserorderdetails::is_custom_data_Set() const{
    return m_custom_data_isSet;
}

bool OAIUserorderdetails::is_custom_data_Valid() const{
    return m_custom_data_isValid;
}

QString OAIUserorderdetails::getFollowUpEmail() const {
    return m_follow_up_email;
}
void OAIUserorderdetails::setFollowUpEmail(const QString &follow_up_email) {
    m_follow_up_email = follow_up_email;
    m_follow_up_email_isSet = true;
}

bool OAIUserorderdetails::is_follow_up_email_Set() const{
    return m_follow_up_email_isSet;
}

bool OAIUserorderdetails::is_follow_up_email_Valid() const{
    return m_follow_up_email_isValid;
}

QString OAIUserorderdetails::getGiftRegistryData() const {
    return m_gift_registry_data;
}
void OAIUserorderdetails::setGiftRegistryData(const QString &gift_registry_data) {
    m_gift_registry_data = gift_registry_data;
    m_gift_registry_data_isSet = true;
}

bool OAIUserorderdetails::is_gift_registry_data_Set() const{
    return m_gift_registry_data_isSet;
}

bool OAIUserorderdetails::is_gift_registry_data_Valid() const{
    return m_gift_registry_data_isValid;
}

QString OAIUserorderdetails::getHostname() const {
    return m_hostname;
}
void OAIUserorderdetails::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIUserorderdetails::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIUserorderdetails::is_hostname_Valid() const{
    return m_hostname_isValid;
}

OAIObject OAIUserorderdetails::getInvoiceData() const {
    return m_invoice_data;
}
void OAIUserorderdetails::setInvoiceData(const OAIObject &invoice_data) {
    m_invoice_data = invoice_data;
    m_invoice_data_isSet = true;
}

bool OAIUserorderdetails::is_invoice_data_Set() const{
    return m_invoice_data_isSet;
}

bool OAIUserorderdetails::is_invoice_data_Valid() const{
    return m_invoice_data_isValid;
}

QString OAIUserorderdetails::getInvoicedDate() const {
    return m_invoiced_date;
}
void OAIUserorderdetails::setInvoicedDate(const QString &invoiced_date) {
    m_invoiced_date = invoiced_date;
    m_invoiced_date_isSet = true;
}

bool OAIUserorderdetails::is_invoiced_date_Set() const{
    return m_invoiced_date_isSet;
}

bool OAIUserorderdetails::is_invoiced_date_Valid() const{
    return m_invoiced_date_isValid;
}

bool OAIUserorderdetails::isIsCheckedIn() const {
    return m_is_checked_in;
}
void OAIUserorderdetails::setIsCheckedIn(const bool &is_checked_in) {
    m_is_checked_in = is_checked_in;
    m_is_checked_in_isSet = true;
}

bool OAIUserorderdetails::is_is_checked_in_Set() const{
    return m_is_checked_in_isSet;
}

bool OAIUserorderdetails::is_is_checked_in_Valid() const{
    return m_is_checked_in_isValid;
}

bool OAIUserorderdetails::isIsCompleted() const {
    return m_is_completed;
}
void OAIUserorderdetails::setIsCompleted(const bool &is_completed) {
    m_is_completed = is_completed;
    m_is_completed_isSet = true;
}

bool OAIUserorderdetails::is_is_completed_Set() const{
    return m_is_completed_isSet;
}

bool OAIUserorderdetails::is_is_completed_Valid() const{
    return m_is_completed_isValid;
}

OAIUserorderdetails_itemMetadata OAIUserorderdetails::getItemMetadata() const {
    return m_item_metadata;
}
void OAIUserorderdetails::setItemMetadata(const OAIUserorderdetails_itemMetadata &item_metadata) {
    m_item_metadata = item_metadata;
    m_item_metadata_isSet = true;
}

bool OAIUserorderdetails::is_item_metadata_Set() const{
    return m_item_metadata_isSet;
}

bool OAIUserorderdetails::is_item_metadata_Valid() const{
    return m_item_metadata_isValid;
}

QList<OAIItem> OAIUserorderdetails::getItems() const {
    return m_items;
}
void OAIUserorderdetails::setItems(const QList<OAIItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIUserorderdetails::is_items_Set() const{
    return m_items_isSet;
}

bool OAIUserorderdetails::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIUserorderdetails::getLastChange() const {
    return m_last_change;
}
void OAIUserorderdetails::setLastChange(const QString &last_change) {
    m_last_change = last_change;
    m_last_change_isSet = true;
}

bool OAIUserorderdetails::is_last_change_Set() const{
    return m_last_change_isSet;
}

bool OAIUserorderdetails::is_last_change_Valid() const{
    return m_last_change_isValid;
}

QString OAIUserorderdetails::getLastMessage() const {
    return m_last_message;
}
void OAIUserorderdetails::setLastMessage(const QString &last_message) {
    m_last_message = last_message;
    m_last_message_isSet = true;
}

bool OAIUserorderdetails::is_last_message_Set() const{
    return m_last_message_isSet;
}

bool OAIUserorderdetails::is_last_message_Valid() const{
    return m_last_message_isValid;
}

OAIUserorderdetails_marketingData OAIUserorderdetails::getMarketingData() const {
    return m_marketing_data;
}
void OAIUserorderdetails::setMarketingData(const OAIUserorderdetails_marketingData &marketing_data) {
    m_marketing_data = marketing_data;
    m_marketing_data_isSet = true;
}

bool OAIUserorderdetails::is_marketing_data_Set() const{
    return m_marketing_data_isSet;
}

bool OAIUserorderdetails::is_marketing_data_Valid() const{
    return m_marketing_data_isValid;
}

OAIMarketplace OAIUserorderdetails::getMarketplace() const {
    return m_marketplace;
}
void OAIUserorderdetails::setMarketplace(const OAIMarketplace &marketplace) {
    m_marketplace = marketplace;
    m_marketplace_isSet = true;
}

bool OAIUserorderdetails::is_marketplace_Set() const{
    return m_marketplace_isSet;
}

bool OAIUserorderdetails::is_marketplace_Valid() const{
    return m_marketplace_isValid;
}

QList<QString> OAIUserorderdetails::getMarketplaceItems() const {
    return m_marketplace_items;
}
void OAIUserorderdetails::setMarketplaceItems(const QList<QString> &marketplace_items) {
    m_marketplace_items = marketplace_items;
    m_marketplace_items_isSet = true;
}

bool OAIUserorderdetails::is_marketplace_items_Set() const{
    return m_marketplace_items_isSet;
}

bool OAIUserorderdetails::is_marketplace_items_Valid() const{
    return m_marketplace_items_isValid;
}

QString OAIUserorderdetails::getMarketplaceOrderId() const {
    return m_marketplace_order_id;
}
void OAIUserorderdetails::setMarketplaceOrderId(const QString &marketplace_order_id) {
    m_marketplace_order_id = marketplace_order_id;
    m_marketplace_order_id_isSet = true;
}

bool OAIUserorderdetails::is_marketplace_order_id_Set() const{
    return m_marketplace_order_id_isSet;
}

bool OAIUserorderdetails::is_marketplace_order_id_Valid() const{
    return m_marketplace_order_id_isValid;
}

QString OAIUserorderdetails::getMarketplaceServicesEndpoint() const {
    return m_marketplace_services_endpoint;
}
void OAIUserorderdetails::setMarketplaceServicesEndpoint(const QString &marketplace_services_endpoint) {
    m_marketplace_services_endpoint = marketplace_services_endpoint;
    m_marketplace_services_endpoint_isSet = true;
}

bool OAIUserorderdetails::is_marketplace_services_endpoint_Set() const{
    return m_marketplace_services_endpoint_isSet;
}

bool OAIUserorderdetails::is_marketplace_services_endpoint_Valid() const{
    return m_marketplace_services_endpoint_isValid;
}

QString OAIUserorderdetails::getMerchantName() const {
    return m_merchant_name;
}
void OAIUserorderdetails::setMerchantName(const QString &merchant_name) {
    m_merchant_name = merchant_name;
    m_merchant_name_isSet = true;
}

bool OAIUserorderdetails::is_merchant_name_Set() const{
    return m_merchant_name_isSet;
}

bool OAIUserorderdetails::is_merchant_name_Valid() const{
    return m_merchant_name_isValid;
}

QString OAIUserorderdetails::getOpenTextField() const {
    return m_open_text_field;
}
void OAIUserorderdetails::setOpenTextField(const QString &open_text_field) {
    m_open_text_field = open_text_field;
    m_open_text_field_isSet = true;
}

bool OAIUserorderdetails::is_open_text_field_Set() const{
    return m_open_text_field_isSet;
}

bool OAIUserorderdetails::is_open_text_field_Valid() const{
    return m_open_text_field_isValid;
}

QString OAIUserorderdetails::getOrderFormId() const {
    return m_order_form_id;
}
void OAIUserorderdetails::setOrderFormId(const QString &order_form_id) {
    m_order_form_id = order_form_id;
    m_order_form_id_isSet = true;
}

bool OAIUserorderdetails::is_order_form_id_Set() const{
    return m_order_form_id_isSet;
}

bool OAIUserorderdetails::is_order_form_id_Valid() const{
    return m_order_form_id_isValid;
}

QString OAIUserorderdetails::getOrderGroup() const {
    return m_order_group;
}
void OAIUserorderdetails::setOrderGroup(const QString &order_group) {
    m_order_group = order_group;
    m_order_group_isSet = true;
}

bool OAIUserorderdetails::is_order_group_Set() const{
    return m_order_group_isSet;
}

bool OAIUserorderdetails::is_order_group_Valid() const{
    return m_order_group_isValid;
}

QString OAIUserorderdetails::getOrderId() const {
    return m_order_id;
}
void OAIUserorderdetails::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIUserorderdetails::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIUserorderdetails::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIUserorderdetails::getOrigin() const {
    return m_origin;
}
void OAIUserorderdetails::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIUserorderdetails::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIUserorderdetails::is_origin_Valid() const{
    return m_origin_isValid;
}

OAIPackageAttachment OAIUserorderdetails::getPackageAttachment() const {
    return m_package_attachment;
}
void OAIUserorderdetails::setPackageAttachment(const OAIPackageAttachment &package_attachment) {
    m_package_attachment = package_attachment;
    m_package_attachment_isSet = true;
}

bool OAIUserorderdetails::is_package_attachment_Set() const{
    return m_package_attachment_isSet;
}

bool OAIUserorderdetails::is_package_attachment_Valid() const{
    return m_package_attachment_isValid;
}

OAIPaymentData OAIUserorderdetails::getPaymentData() const {
    return m_payment_data;
}
void OAIUserorderdetails::setPaymentData(const OAIPaymentData &payment_data) {
    m_payment_data = payment_data;
    m_payment_data_isSet = true;
}

bool OAIUserorderdetails::is_payment_data_Set() const{
    return m_payment_data_isSet;
}

bool OAIUserorderdetails::is_payment_data_Valid() const{
    return m_payment_data_isValid;
}

OAIRatesAndBenefitsData OAIUserorderdetails::getRatesAndBenefitsData() const {
    return m_rates_and_benefits_data;
}
void OAIUserorderdetails::setRatesAndBenefitsData(const OAIRatesAndBenefitsData &rates_and_benefits_data) {
    m_rates_and_benefits_data = rates_and_benefits_data;
    m_rates_and_benefits_data_isSet = true;
}

bool OAIUserorderdetails::is_rates_and_benefits_data_Set() const{
    return m_rates_and_benefits_data_isSet;
}

bool OAIUserorderdetails::is_rates_and_benefits_data_Valid() const{
    return m_rates_and_benefits_data_isValid;
}

qint32 OAIUserorderdetails::getRoundingError() const {
    return m_rounding_error;
}
void OAIUserorderdetails::setRoundingError(const qint32 &rounding_error) {
    m_rounding_error = rounding_error;
    m_rounding_error_isSet = true;
}

bool OAIUserorderdetails::is_rounding_error_Set() const{
    return m_rounding_error_isSet;
}

bool OAIUserorderdetails::is_rounding_error_Valid() const{
    return m_rounding_error_isValid;
}

QString OAIUserorderdetails::getSalesChannel() const {
    return m_sales_channel;
}
void OAIUserorderdetails::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAIUserorderdetails::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAIUserorderdetails::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

QString OAIUserorderdetails::getSellerOrderId() const {
    return m_seller_order_id;
}
void OAIUserorderdetails::setSellerOrderId(const QString &seller_order_id) {
    m_seller_order_id = seller_order_id;
    m_seller_order_id_isSet = true;
}

bool OAIUserorderdetails::is_seller_order_id_Set() const{
    return m_seller_order_id_isSet;
}

bool OAIUserorderdetails::is_seller_order_id_Valid() const{
    return m_seller_order_id_isValid;
}

QList<OAISeller> OAIUserorderdetails::getSellers() const {
    return m_sellers;
}
void OAIUserorderdetails::setSellers(const QList<OAISeller> &sellers) {
    m_sellers = sellers;
    m_sellers_isSet = true;
}

bool OAIUserorderdetails::is_sellers_Set() const{
    return m_sellers_isSet;
}

bool OAIUserorderdetails::is_sellers_Valid() const{
    return m_sellers_isValid;
}

QString OAIUserorderdetails::getSequence() const {
    return m_sequence;
}
void OAIUserorderdetails::setSequence(const QString &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIUserorderdetails::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIUserorderdetails::is_sequence_Valid() const{
    return m_sequence_isValid;
}

OAIShippingData OAIUserorderdetails::getShippingData() const {
    return m_shipping_data;
}
void OAIUserorderdetails::setShippingData(const OAIShippingData &shipping_data) {
    m_shipping_data = shipping_data;
    m_shipping_data_isSet = true;
}

bool OAIUserorderdetails::is_shipping_data_Set() const{
    return m_shipping_data_isSet;
}

bool OAIUserorderdetails::is_shipping_data_Valid() const{
    return m_shipping_data_isValid;
}

QString OAIUserorderdetails::getStatus() const {
    return m_status;
}
void OAIUserorderdetails::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUserorderdetails::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUserorderdetails::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUserorderdetails::getStatusDescription() const {
    return m_status_description;
}
void OAIUserorderdetails::setStatusDescription(const QString &status_description) {
    m_status_description = status_description;
    m_status_description_isSet = true;
}

bool OAIUserorderdetails::is_status_description_Set() const{
    return m_status_description_isSet;
}

bool OAIUserorderdetails::is_status_description_Valid() const{
    return m_status_description_isValid;
}

OAIStorePreferencesData OAIUserorderdetails::getStorePreferencesData() const {
    return m_store_preferences_data;
}
void OAIUserorderdetails::setStorePreferencesData(const OAIStorePreferencesData &store_preferences_data) {
    m_store_preferences_data = store_preferences_data;
    m_store_preferences_data_isSet = true;
}

bool OAIUserorderdetails::is_store_preferences_data_Set() const{
    return m_store_preferences_data_isSet;
}

bool OAIUserorderdetails::is_store_preferences_data_Valid() const{
    return m_store_preferences_data_isValid;
}

OAIUserorderdetails_subscriptionData OAIUserorderdetails::getSubscriptionData() const {
    return m_subscription_data;
}
void OAIUserorderdetails::setSubscriptionData(const OAIUserorderdetails_subscriptionData &subscription_data) {
    m_subscription_data = subscription_data;
    m_subscription_data_isSet = true;
}

bool OAIUserorderdetails::is_subscription_data_Set() const{
    return m_subscription_data_isSet;
}

bool OAIUserorderdetails::is_subscription_data_Valid() const{
    return m_subscription_data_isValid;
}

OAIUserorderdetails_taxData OAIUserorderdetails::getTaxData() const {
    return m_tax_data;
}
void OAIUserorderdetails::setTaxData(const OAIUserorderdetails_taxData &tax_data) {
    m_tax_data = tax_data;
    m_tax_data_isSet = true;
}

bool OAIUserorderdetails::is_tax_data_Set() const{
    return m_tax_data_isSet;
}

bool OAIUserorderdetails::is_tax_data_Valid() const{
    return m_tax_data_isValid;
}

QList<OAITotal> OAIUserorderdetails::getTotals() const {
    return m_totals;
}
void OAIUserorderdetails::setTotals(const QList<OAITotal> &totals) {
    m_totals = totals;
    m_totals_isSet = true;
}

bool OAIUserorderdetails::is_totals_Set() const{
    return m_totals_isSet;
}

bool OAIUserorderdetails::is_totals_Valid() const{
    return m_totals_isValid;
}

qint32 OAIUserorderdetails::getValue() const {
    return m_value;
}
void OAIUserorderdetails::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIUserorderdetails::is_value_Set() const{
    return m_value_isSet;
}

bool OAIUserorderdetails::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIUserorderdetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affiliate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_cancellation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorized_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_center_operator_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_changes_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_checked_in_pickup_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_preferences_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_profile_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commercial_condition_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_follow_up_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_registry_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoiced_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_checked_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_services_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_text_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_form_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rates_and_benefits_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounding_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sellers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_preferences_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserorderdetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_affiliate_id_isValid && m_allow_cancellation_isValid && m_allow_edition_isValid && m_authorized_date_isValid && m_call_center_operator_data_isValid && m_cancel_reason_isValid && m_cancellation_data_isValid && m_changes_attachment_isValid && m_checked_in_pickup_point_id_isValid && m_client_preferences_data_isValid && m_client_profile_data_isValid && m_commercial_condition_data_isValid && m_creation_date_isValid && m_custom_data_isValid && m_follow_up_email_isValid && m_gift_registry_data_isValid && m_hostname_isValid && m_invoice_data_isValid && m_invoiced_date_isValid && m_is_checked_in_isValid && m_is_completed_isValid && m_item_metadata_isValid && m_items_isValid && m_last_change_isValid && m_last_message_isValid && m_marketing_data_isValid && m_marketplace_isValid && m_marketplace_items_isValid && m_marketplace_order_id_isValid && m_marketplace_services_endpoint_isValid && m_merchant_name_isValid && m_open_text_field_isValid && m_order_form_id_isValid && m_order_group_isValid && m_order_id_isValid && m_origin_isValid && m_package_attachment_isValid && m_payment_data_isValid && m_rates_and_benefits_data_isValid && m_rounding_error_isValid && m_sales_channel_isValid && m_seller_order_id_isValid && m_sellers_isValid && m_sequence_isValid && m_shipping_data_isValid && m_status_isValid && m_status_description_isValid && m_store_preferences_data_isValid && m_subscription_data_isValid && m_tax_data_isValid && m_totals_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
