/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedConfigurationRequest::OAIFeedConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedConfigurationRequest::OAIFeedConfigurationRequest() {
    this->initializeModel();
}

OAIFeedConfigurationRequest::~OAIFeedConfigurationRequest() {}

void OAIFeedConfigurationRequest::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_queue_isSet = false;
    m_queue_isValid = false;
}

void OAIFeedConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_queue_isValid = ::OpenAPI::fromJsonValue(m_queue, json[QString("queue")]);
    m_queue_isSet = !json[QString("queue")].isNull() && m_queue_isValid;
}

QString OAIFeedConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_queue.isSet()) {
        obj.insert(QString("queue"), ::OpenAPI::toJsonValue(m_queue));
    }
    return obj;
}

OAIFeedFilter OAIFeedConfigurationRequest::getFilter() const {
    return m_filter;
}
void OAIFeedConfigurationRequest::setFilter(const OAIFeedFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIFeedConfigurationRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIFeedConfigurationRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIQueue OAIFeedConfigurationRequest::getQueue() const {
    return m_queue;
}
void OAIFeedConfigurationRequest::setQueue(const OAIQueue &queue) {
    m_queue = queue;
    m_queue_isSet = true;
}

bool OAIFeedConfigurationRequest::is_queue_Set() const{
    return m_queue_isSet;
}

bool OAIFeedConfigurationRequest::is_queue_Valid() const{
    return m_queue_isValid;
}

bool OAIFeedConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_isValid && m_queue_isValid && true;
}

} // namespace OpenAPI
