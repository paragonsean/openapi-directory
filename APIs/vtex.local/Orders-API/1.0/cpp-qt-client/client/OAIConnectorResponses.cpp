/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorResponses.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorResponses::OAIConnectorResponses(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorResponses::OAIConnectorResponses() {
    this->initializeModel();
}

OAIConnectorResponses::~OAIConnectorResponses() {}

void OAIConnectorResponses::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_return_code_isSet = false;
    m_return_code_isValid = false;

    m_tid_isSet = false;
    m_tid_isValid = false;

    m_auth_id_isSet = false;
    m_auth_id_isValid = false;
}

void OAIConnectorResponses::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorResponses::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_return_code_isValid = ::OpenAPI::fromJsonValue(m_return_code, json[QString("ReturnCode")]);
    m_return_code_isSet = !json[QString("ReturnCode")].isNull() && m_return_code_isValid;

    m_tid_isValid = ::OpenAPI::fromJsonValue(m_tid, json[QString("Tid")]);
    m_tid_isSet = !json[QString("Tid")].isNull() && m_tid_isValid;

    m_auth_id_isValid = ::OpenAPI::fromJsonValue(m_auth_id, json[QString("authId")]);
    m_auth_id_isSet = !json[QString("authId")].isNull() && m_auth_id_isValid;
}

QString OAIConnectorResponses::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorResponses::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_return_code_isSet) {
        obj.insert(QString("ReturnCode"), ::OpenAPI::toJsonValue(m_return_code));
    }
    if (m_tid_isSet) {
        obj.insert(QString("Tid"), ::OpenAPI::toJsonValue(m_tid));
    }
    if (m_auth_id_isSet) {
        obj.insert(QString("authId"), ::OpenAPI::toJsonValue(m_auth_id));
    }
    return obj;
}

QString OAIConnectorResponses::getMessage() const {
    return m_message;
}
void OAIConnectorResponses::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIConnectorResponses::is_message_Set() const{
    return m_message_isSet;
}

bool OAIConnectorResponses::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIConnectorResponses::getReturnCode() const {
    return m_return_code;
}
void OAIConnectorResponses::setReturnCode(const QString &return_code) {
    m_return_code = return_code;
    m_return_code_isSet = true;
}

bool OAIConnectorResponses::is_return_code_Set() const{
    return m_return_code_isSet;
}

bool OAIConnectorResponses::is_return_code_Valid() const{
    return m_return_code_isValid;
}

QString OAIConnectorResponses::getTid() const {
    return m_tid;
}
void OAIConnectorResponses::setTid(const QString &tid) {
    m_tid = tid;
    m_tid_isSet = true;
}

bool OAIConnectorResponses::is_tid_Set() const{
    return m_tid_isSet;
}

bool OAIConnectorResponses::is_tid_Valid() const{
    return m_tid_isValid;
}

QString OAIConnectorResponses::getAuthId() const {
    return m_auth_id;
}
void OAIConnectorResponses::setAuthId(const QString &auth_id) {
    m_auth_id = auth_id;
    m_auth_id_isSet = true;
}

bool OAIConnectorResponses::is_auth_id_Set() const{
    return m_auth_id_isSet;
}

bool OAIConnectorResponses::is_auth_id_Valid() const{
    return m_auth_id_isValid;
}

bool OAIConnectorResponses::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorResponses::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && m_return_code_isValid && m_tid_isValid && m_auth_id_isValid && true;
}

} // namespace OpenAPI
