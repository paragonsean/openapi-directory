/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangesAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangesAttachment::OAIChangesAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangesAttachment::OAIChangesAttachment() {
    this->initializeModel();
}

OAIChangesAttachment::~OAIChangesAttachment() {}

void OAIChangesAttachment::initializeModel() {

    m_changes_data_isSet = false;
    m_changes_data_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIChangesAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangesAttachment::fromJsonObject(QJsonObject json) {

    m_changes_data_isValid = ::OpenAPI::fromJsonValue(m_changes_data, json[QString("changesData")]);
    m_changes_data_isSet = !json[QString("changesData")].isNull() && m_changes_data_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIChangesAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangesAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_changes_data.size() > 0) {
        obj.insert(QString("changesData"), ::OpenAPI::toJsonValue(m_changes_data));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QList<OAIChangesDatum> OAIChangesAttachment::getChangesData() const {
    return m_changes_data;
}
void OAIChangesAttachment::setChangesData(const QList<OAIChangesDatum> &changes_data) {
    m_changes_data = changes_data;
    m_changes_data_isSet = true;
}

bool OAIChangesAttachment::is_changes_data_Set() const{
    return m_changes_data_isSet;
}

bool OAIChangesAttachment::is_changes_data_Valid() const{
    return m_changes_data_isValid;
}

QString OAIChangesAttachment::getId() const {
    return m_id;
}
void OAIChangesAttachment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChangesAttachment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChangesAttachment::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIChangesAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changes_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangesAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_changes_data_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
