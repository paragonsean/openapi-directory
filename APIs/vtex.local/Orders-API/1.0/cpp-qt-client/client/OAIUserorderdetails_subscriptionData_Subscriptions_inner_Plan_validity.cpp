/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity() {
    this->initializeModel();
}

OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::~OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity() {}

void OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::initializeModel() {

    m_begin_isSet = false;
    m_begin_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;
}

void OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::fromJsonObject(QJsonObject json) {

    m_begin_isValid = ::OpenAPI::fromJsonValue(m_begin, json[QString("begin")]);
    m_begin_isSet = !json[QString("begin")].isNull() && m_begin_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;
}

QString OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::asJsonObject() const {
    QJsonObject obj;
    if (m_begin_isSet) {
        obj.insert(QString("begin"), ::OpenAPI::toJsonValue(m_begin));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    return obj;
}

QString OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::getBegin() const {
    return m_begin;
}
void OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::setBegin(const QString &begin) {
    m_begin = begin;
    m_begin_isSet = true;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::is_begin_Set() const{
    return m_begin_isSet;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::is_begin_Valid() const{
    return m_begin_isValid;
}

QString OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::getEnd() const {
    return m_end;
}
void OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::is_end_Set() const{
    return m_end_isSet;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::is_end_Valid() const{
    return m_end_isValid;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_begin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan_validity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_begin_isValid && m_end_isValid && true;
}

} // namespace OpenAPI
