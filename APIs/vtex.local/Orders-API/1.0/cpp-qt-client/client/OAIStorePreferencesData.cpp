/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorePreferencesData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorePreferencesData::OAIStorePreferencesData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorePreferencesData::OAIStorePreferencesData() {
    this->initializeModel();
}

OAIStorePreferencesData::~OAIStorePreferencesData() {}

void OAIStorePreferencesData::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_currency_format_info_isSet = false;
    m_currency_format_info_isValid = false;

    m_currency_locale_isSet = false;
    m_currency_locale_isValid = false;

    m_currency_symbol_isSet = false;
    m_currency_symbol_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIStorePreferencesData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorePreferencesData::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_currency_format_info_isValid = ::OpenAPI::fromJsonValue(m_currency_format_info, json[QString("currencyFormatInfo")]);
    m_currency_format_info_isSet = !json[QString("currencyFormatInfo")].isNull() && m_currency_format_info_isValid;

    m_currency_locale_isValid = ::OpenAPI::fromJsonValue(m_currency_locale, json[QString("currencyLocale")]);
    m_currency_locale_isSet = !json[QString("currencyLocale")].isNull() && m_currency_locale_isValid;

    m_currency_symbol_isValid = ::OpenAPI::fromJsonValue(m_currency_symbol, json[QString("currencySymbol")]);
    m_currency_symbol_isSet = !json[QString("currencySymbol")].isNull() && m_currency_symbol_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIStorePreferencesData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorePreferencesData::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_currency_format_info.isSet()) {
        obj.insert(QString("currencyFormatInfo"), ::OpenAPI::toJsonValue(m_currency_format_info));
    }
    if (m_currency_locale_isSet) {
        obj.insert(QString("currencyLocale"), ::OpenAPI::toJsonValue(m_currency_locale));
    }
    if (m_currency_symbol_isSet) {
        obj.insert(QString("currencySymbol"), ::OpenAPI::toJsonValue(m_currency_symbol));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QString OAIStorePreferencesData::getCountryCode() const {
    return m_country_code;
}
void OAIStorePreferencesData::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIStorePreferencesData::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIStorePreferencesData::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIStorePreferencesData::getCurrencyCode() const {
    return m_currency_code;
}
void OAIStorePreferencesData::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIStorePreferencesData::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIStorePreferencesData::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

OAICurrencyFormatInfo OAIStorePreferencesData::getCurrencyFormatInfo() const {
    return m_currency_format_info;
}
void OAIStorePreferencesData::setCurrencyFormatInfo(const OAICurrencyFormatInfo &currency_format_info) {
    m_currency_format_info = currency_format_info;
    m_currency_format_info_isSet = true;
}

bool OAIStorePreferencesData::is_currency_format_info_Set() const{
    return m_currency_format_info_isSet;
}

bool OAIStorePreferencesData::is_currency_format_info_Valid() const{
    return m_currency_format_info_isValid;
}

qint32 OAIStorePreferencesData::getCurrencyLocale() const {
    return m_currency_locale;
}
void OAIStorePreferencesData::setCurrencyLocale(const qint32 &currency_locale) {
    m_currency_locale = currency_locale;
    m_currency_locale_isSet = true;
}

bool OAIStorePreferencesData::is_currency_locale_Set() const{
    return m_currency_locale_isSet;
}

bool OAIStorePreferencesData::is_currency_locale_Valid() const{
    return m_currency_locale_isValid;
}

QString OAIStorePreferencesData::getCurrencySymbol() const {
    return m_currency_symbol;
}
void OAIStorePreferencesData::setCurrencySymbol(const QString &currency_symbol) {
    m_currency_symbol = currency_symbol;
    m_currency_symbol_isSet = true;
}

bool OAIStorePreferencesData::is_currency_symbol_Set() const{
    return m_currency_symbol_isSet;
}

bool OAIStorePreferencesData::is_currency_symbol_Valid() const{
    return m_currency_symbol_isValid;
}

QString OAIStorePreferencesData::getTimeZone() const {
    return m_time_zone;
}
void OAIStorePreferencesData::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIStorePreferencesData::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIStorePreferencesData::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIStorePreferencesData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_format_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorePreferencesData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_code_isValid && m_currency_code_isValid && m_currency_format_info_isValid && m_currency_locale_isValid && m_currency_symbol_isValid && m_time_zone_isValid && true;
}

} // namespace OpenAPI
