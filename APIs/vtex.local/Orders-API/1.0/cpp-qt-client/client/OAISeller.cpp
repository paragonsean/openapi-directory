/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeller.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeller::OAISeller(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeller::OAISeller() {
    this->initializeModel();
}

OAISeller::~OAISeller() {}

void OAISeller::initializeModel() {

    m_fulfillment_endpoint_isSet = false;
    m_fulfillment_endpoint_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAISeller::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeller::fromJsonObject(QJsonObject json) {

    m_fulfillment_endpoint_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_endpoint, json[QString("fulfillmentEndpoint")]);
    m_fulfillment_endpoint_isSet = !json[QString("fulfillmentEndpoint")].isNull() && m_fulfillment_endpoint_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAISeller::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeller::asJsonObject() const {
    QJsonObject obj;
    if (m_fulfillment_endpoint_isSet) {
        obj.insert(QString("fulfillmentEndpoint"), ::OpenAPI::toJsonValue(m_fulfillment_endpoint));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAISeller::getFulfillmentEndpoint() const {
    return m_fulfillment_endpoint;
}
void OAISeller::setFulfillmentEndpoint(const QString &fulfillment_endpoint) {
    m_fulfillment_endpoint = fulfillment_endpoint;
    m_fulfillment_endpoint_isSet = true;
}

bool OAISeller::is_fulfillment_endpoint_Set() const{
    return m_fulfillment_endpoint_isSet;
}

bool OAISeller::is_fulfillment_endpoint_Valid() const{
    return m_fulfillment_endpoint_isValid;
}

QString OAISeller::getId() const {
    return m_id;
}
void OAISeller::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISeller::is_id_Set() const{
    return m_id_isSet;
}

bool OAISeller::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISeller::getLogo() const {
    return m_logo;
}
void OAISeller::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAISeller::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAISeller::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAISeller::getName() const {
    return m_name;
}
void OAISeller::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISeller::is_name_Set() const{
    return m_name_isSet;
}

bool OAISeller::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISeller::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fulfillment_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeller::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fulfillment_endpoint_isValid && m_id_isValid && m_logo_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
