/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserorderdetails_marketingData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserorderdetails_marketingData::OAIUserorderdetails_marketingData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserorderdetails_marketingData::OAIUserorderdetails_marketingData() {
    this->initializeModel();
}

OAIUserorderdetails_marketingData::~OAIUserorderdetails_marketingData() {}

void OAIUserorderdetails_marketingData::initializeModel() {

    m_coupon_isSet = false;
    m_coupon_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_marketing_tags_isSet = false;
    m_marketing_tags_isValid = false;

    m_utm_campaign_isSet = false;
    m_utm_campaign_isValid = false;

    m_utm_medium_isSet = false;
    m_utm_medium_isValid = false;

    m_utm_partner_isSet = false;
    m_utm_partner_isValid = false;

    m_utm_source_isSet = false;
    m_utm_source_isValid = false;

    m_utmi_campaign_isSet = false;
    m_utmi_campaign_isValid = false;

    m_utmi_part_isSet = false;
    m_utmi_part_isValid = false;

    m_utmipage_isSet = false;
    m_utmipage_isValid = false;
}

void OAIUserorderdetails_marketingData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserorderdetails_marketingData::fromJsonObject(QJsonObject json) {

    m_coupon_isValid = ::OpenAPI::fromJsonValue(m_coupon, json[QString("coupon")]);
    m_coupon_isSet = !json[QString("coupon")].isNull() && m_coupon_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_marketing_tags_isValid = ::OpenAPI::fromJsonValue(m_marketing_tags, json[QString("marketingTags")]);
    m_marketing_tags_isSet = !json[QString("marketingTags")].isNull() && m_marketing_tags_isValid;

    m_utm_campaign_isValid = ::OpenAPI::fromJsonValue(m_utm_campaign, json[QString("utmCampaign")]);
    m_utm_campaign_isSet = !json[QString("utmCampaign")].isNull() && m_utm_campaign_isValid;

    m_utm_medium_isValid = ::OpenAPI::fromJsonValue(m_utm_medium, json[QString("utmMedium")]);
    m_utm_medium_isSet = !json[QString("utmMedium")].isNull() && m_utm_medium_isValid;

    m_utm_partner_isValid = ::OpenAPI::fromJsonValue(m_utm_partner, json[QString("utmPartner")]);
    m_utm_partner_isSet = !json[QString("utmPartner")].isNull() && m_utm_partner_isValid;

    m_utm_source_isValid = ::OpenAPI::fromJsonValue(m_utm_source, json[QString("utmSource")]);
    m_utm_source_isSet = !json[QString("utmSource")].isNull() && m_utm_source_isValid;

    m_utmi_campaign_isValid = ::OpenAPI::fromJsonValue(m_utmi_campaign, json[QString("utmiCampaign")]);
    m_utmi_campaign_isSet = !json[QString("utmiCampaign")].isNull() && m_utmi_campaign_isValid;

    m_utmi_part_isValid = ::OpenAPI::fromJsonValue(m_utmi_part, json[QString("utmiPart")]);
    m_utmi_part_isSet = !json[QString("utmiPart")].isNull() && m_utmi_part_isValid;

    m_utmipage_isValid = ::OpenAPI::fromJsonValue(m_utmipage, json[QString("utmipage")]);
    m_utmipage_isSet = !json[QString("utmipage")].isNull() && m_utmipage_isValid;
}

QString OAIUserorderdetails_marketingData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserorderdetails_marketingData::asJsonObject() const {
    QJsonObject obj;
    if (m_coupon_isSet) {
        obj.insert(QString("coupon"), ::OpenAPI::toJsonValue(m_coupon));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_marketing_tags.size() > 0) {
        obj.insert(QString("marketingTags"), ::OpenAPI::toJsonValue(m_marketing_tags));
    }
    if (m_utm_campaign_isSet) {
        obj.insert(QString("utmCampaign"), ::OpenAPI::toJsonValue(m_utm_campaign));
    }
    if (m_utm_medium_isSet) {
        obj.insert(QString("utmMedium"), ::OpenAPI::toJsonValue(m_utm_medium));
    }
    if (m_utm_partner_isSet) {
        obj.insert(QString("utmPartner"), ::OpenAPI::toJsonValue(m_utm_partner));
    }
    if (m_utm_source_isSet) {
        obj.insert(QString("utmSource"), ::OpenAPI::toJsonValue(m_utm_source));
    }
    if (m_utmi_campaign_isSet) {
        obj.insert(QString("utmiCampaign"), ::OpenAPI::toJsonValue(m_utmi_campaign));
    }
    if (m_utmi_part_isSet) {
        obj.insert(QString("utmiPart"), ::OpenAPI::toJsonValue(m_utmi_part));
    }
    if (m_utmipage_isSet) {
        obj.insert(QString("utmipage"), ::OpenAPI::toJsonValue(m_utmipage));
    }
    return obj;
}

QString OAIUserorderdetails_marketingData::getCoupon() const {
    return m_coupon;
}
void OAIUserorderdetails_marketingData::setCoupon(const QString &coupon) {
    m_coupon = coupon;
    m_coupon_isSet = true;
}

bool OAIUserorderdetails_marketingData::is_coupon_Set() const{
    return m_coupon_isSet;
}

bool OAIUserorderdetails_marketingData::is_coupon_Valid() const{
    return m_coupon_isValid;
}

QString OAIUserorderdetails_marketingData::getId() const {
    return m_id;
}
void OAIUserorderdetails_marketingData::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserorderdetails_marketingData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserorderdetails_marketingData::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIUserorderdetails_marketingData::getMarketingTags() const {
    return m_marketing_tags;
}
void OAIUserorderdetails_marketingData::setMarketingTags(const QList<QString> &marketing_tags) {
    m_marketing_tags = marketing_tags;
    m_marketing_tags_isSet = true;
}

bool OAIUserorderdetails_marketingData::is_marketing_tags_Set() const{
    return m_marketing_tags_isSet;
}

bool OAIUserorderdetails_marketingData::is_marketing_tags_Valid() const{
    return m_marketing_tags_isValid;
}

QString OAIUserorderdetails_marketingData::getUtmCampaign() const {
    return m_utm_campaign;
}
void OAIUserorderdetails_marketingData::setUtmCampaign(const QString &utm_campaign) {
    m_utm_campaign = utm_campaign;
    m_utm_campaign_isSet = true;
}

bool OAIUserorderdetails_marketingData::is_utm_campaign_Set() const{
    return m_utm_campaign_isSet;
}

bool OAIUserorderdetails_marketingData::is_utm_campaign_Valid() const{
    return m_utm_campaign_isValid;
}

QString OAIUserorderdetails_marketingData::getUtmMedium() const {
    return m_utm_medium;
}
void OAIUserorderdetails_marketingData::setUtmMedium(const QString &utm_medium) {
    m_utm_medium = utm_medium;
    m_utm_medium_isSet = true;
}

bool OAIUserorderdetails_marketingData::is_utm_medium_Set() const{
    return m_utm_medium_isSet;
}

bool OAIUserorderdetails_marketingData::is_utm_medium_Valid() const{
    return m_utm_medium_isValid;
}

QString OAIUserorderdetails_marketingData::getUtmPartner() const {
    return m_utm_partner;
}
void OAIUserorderdetails_marketingData::setUtmPartner(const QString &utm_partner) {
    m_utm_partner = utm_partner;
    m_utm_partner_isSet = true;
}

bool OAIUserorderdetails_marketingData::is_utm_partner_Set() const{
    return m_utm_partner_isSet;
}

bool OAIUserorderdetails_marketingData::is_utm_partner_Valid() const{
    return m_utm_partner_isValid;
}

QString OAIUserorderdetails_marketingData::getUtmSource() const {
    return m_utm_source;
}
void OAIUserorderdetails_marketingData::setUtmSource(const QString &utm_source) {
    m_utm_source = utm_source;
    m_utm_source_isSet = true;
}

bool OAIUserorderdetails_marketingData::is_utm_source_Set() const{
    return m_utm_source_isSet;
}

bool OAIUserorderdetails_marketingData::is_utm_source_Valid() const{
    return m_utm_source_isValid;
}

QString OAIUserorderdetails_marketingData::getUtmiCampaign() const {
    return m_utmi_campaign;
}
void OAIUserorderdetails_marketingData::setUtmiCampaign(const QString &utmi_campaign) {
    m_utmi_campaign = utmi_campaign;
    m_utmi_campaign_isSet = true;
}

bool OAIUserorderdetails_marketingData::is_utmi_campaign_Set() const{
    return m_utmi_campaign_isSet;
}

bool OAIUserorderdetails_marketingData::is_utmi_campaign_Valid() const{
    return m_utmi_campaign_isValid;
}

QString OAIUserorderdetails_marketingData::getUtmiPart() const {
    return m_utmi_part;
}
void OAIUserorderdetails_marketingData::setUtmiPart(const QString &utmi_part) {
    m_utmi_part = utmi_part;
    m_utmi_part_isSet = true;
}

bool OAIUserorderdetails_marketingData::is_utmi_part_Set() const{
    return m_utmi_part_isSet;
}

bool OAIUserorderdetails_marketingData::is_utmi_part_Valid() const{
    return m_utmi_part_isValid;
}

QString OAIUserorderdetails_marketingData::getUtmipage() const {
    return m_utmipage;
}
void OAIUserorderdetails_marketingData::setUtmipage(const QString &utmipage) {
    m_utmipage = utmipage;
    m_utmipage_isSet = true;
}

bool OAIUserorderdetails_marketingData::is_utmipage_Set() const{
    return m_utmipage_isSet;
}

bool OAIUserorderdetails_marketingData::is_utmipage_Valid() const{
    return m_utmipage_isValid;
}

bool OAIUserorderdetails_marketingData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coupon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketing_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_campaign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_medium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utmi_campaign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utmi_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utmipage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserorderdetails_marketingData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_coupon_isValid && m_id_isValid && m_marketing_tags_isValid && m_utm_campaign_isValid && m_utm_medium_isValid && m_utm_partner_isValid && m_utm_source_isValid && m_utmi_campaign_isValid && m_utmi_part_isValid && m_utmipage_isValid && true;
}

} // namespace OpenAPI
