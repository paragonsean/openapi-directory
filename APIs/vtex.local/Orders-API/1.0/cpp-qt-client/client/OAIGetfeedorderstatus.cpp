/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetfeedorderstatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetfeedorderstatus::OAIGetfeedorderstatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetfeedorderstatus::OAIGetfeedorderstatus() {
    this->initializeModel();
}

OAIGetfeedorderstatus::~OAIGetfeedorderstatus() {}

void OAIGetfeedorderstatus::initializeModel() {

    m_current_change_isSet = false;
    m_current_change_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_handle_isSet = false;
    m_handle_isValid = false;

    m_last_change_isSet = false;
    m_last_change_isValid = false;

    m_last_state_isSet = false;
    m_last_state_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGetfeedorderstatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetfeedorderstatus::fromJsonObject(QJsonObject json) {

    m_current_change_isValid = ::OpenAPI::fromJsonValue(m_current_change, json[QString("currentChange")]);
    m_current_change_isSet = !json[QString("currentChange")].isNull() && m_current_change_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_handle_isValid = ::OpenAPI::fromJsonValue(m_handle, json[QString("handle")]);
    m_handle_isSet = !json[QString("handle")].isNull() && m_handle_isValid;

    m_last_change_isValid = ::OpenAPI::fromJsonValue(m_last_change, json[QString("lastChange")]);
    m_last_change_isSet = !json[QString("lastChange")].isNull() && m_last_change_isValid;

    m_last_state_isValid = ::OpenAPI::fromJsonValue(m_last_state, json[QString("lastState")]);
    m_last_state_isSet = !json[QString("lastState")].isNull() && m_last_state_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIGetfeedorderstatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetfeedorderstatus::asJsonObject() const {
    QJsonObject obj;
    if (m_current_change_isSet) {
        obj.insert(QString("currentChange"), ::OpenAPI::toJsonValue(m_current_change));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_handle_isSet) {
        obj.insert(QString("handle"), ::OpenAPI::toJsonValue(m_handle));
    }
    if (m_last_change_isSet) {
        obj.insert(QString("lastChange"), ::OpenAPI::toJsonValue(m_last_change));
    }
    if (m_last_state_isSet) {
        obj.insert(QString("lastState"), ::OpenAPI::toJsonValue(m_last_state));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIGetfeedorderstatus::getCurrentChange() const {
    return m_current_change;
}
void OAIGetfeedorderstatus::setCurrentChange(const QString &current_change) {
    m_current_change = current_change;
    m_current_change_isSet = true;
}

bool OAIGetfeedorderstatus::is_current_change_Set() const{
    return m_current_change_isSet;
}

bool OAIGetfeedorderstatus::is_current_change_Valid() const{
    return m_current_change_isValid;
}

QString OAIGetfeedorderstatus::getDomain() const {
    return m_domain;
}
void OAIGetfeedorderstatus::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIGetfeedorderstatus::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIGetfeedorderstatus::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIGetfeedorderstatus::getEventId() const {
    return m_event_id;
}
void OAIGetfeedorderstatus::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIGetfeedorderstatus::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIGetfeedorderstatus::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAIGetfeedorderstatus::getHandle() const {
    return m_handle;
}
void OAIGetfeedorderstatus::setHandle(const QString &handle) {
    m_handle = handle;
    m_handle_isSet = true;
}

bool OAIGetfeedorderstatus::is_handle_Set() const{
    return m_handle_isSet;
}

bool OAIGetfeedorderstatus::is_handle_Valid() const{
    return m_handle_isValid;
}

QString OAIGetfeedorderstatus::getLastChange() const {
    return m_last_change;
}
void OAIGetfeedorderstatus::setLastChange(const QString &last_change) {
    m_last_change = last_change;
    m_last_change_isSet = true;
}

bool OAIGetfeedorderstatus::is_last_change_Set() const{
    return m_last_change_isSet;
}

bool OAIGetfeedorderstatus::is_last_change_Valid() const{
    return m_last_change_isValid;
}

QString OAIGetfeedorderstatus::getLastState() const {
    return m_last_state;
}
void OAIGetfeedorderstatus::setLastState(const QString &last_state) {
    m_last_state = last_state;
    m_last_state_isSet = true;
}

bool OAIGetfeedorderstatus::is_last_state_Set() const{
    return m_last_state_isSet;
}

bool OAIGetfeedorderstatus::is_last_state_Valid() const{
    return m_last_state_isValid;
}

QString OAIGetfeedorderstatus::getOrderId() const {
    return m_order_id;
}
void OAIGetfeedorderstatus::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIGetfeedorderstatus::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIGetfeedorderstatus::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIGetfeedorderstatus::getState() const {
    return m_state;
}
void OAIGetfeedorderstatus::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetfeedorderstatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetfeedorderstatus::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGetfeedorderstatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetfeedorderstatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_change_isValid && m_domain_isValid && m_event_id_isValid && m_handle_isValid && m_last_change_isValid && m_last_state_isValid && m_order_id_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
