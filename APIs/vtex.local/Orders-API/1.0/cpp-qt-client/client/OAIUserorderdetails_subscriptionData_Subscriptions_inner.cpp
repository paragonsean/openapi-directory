/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserorderdetails_subscriptionData_Subscriptions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserorderdetails_subscriptionData_Subscriptions_inner::OAIUserorderdetails_subscriptionData_Subscriptions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserorderdetails_subscriptionData_Subscriptions_inner::OAIUserorderdetails_subscriptionData_Subscriptions_inner() {
    this->initializeModel();
}

OAIUserorderdetails_subscriptionData_Subscriptions_inner::~OAIUserorderdetails_subscriptionData_Subscriptions_inner() {}

void OAIUserorderdetails_subscriptionData_Subscriptions_inner::initializeModel() {

    m_execution_count_isSet = false;
    m_execution_count_isValid = false;

    m_item_index_isSet = false;
    m_item_index_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_price_at_subscription_date_isSet = false;
    m_price_at_subscription_date_isValid = false;
}

void OAIUserorderdetails_subscriptionData_Subscriptions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserorderdetails_subscriptionData_Subscriptions_inner::fromJsonObject(QJsonObject json) {

    m_execution_count_isValid = ::OpenAPI::fromJsonValue(m_execution_count, json[QString("ExecutionCount")]);
    m_execution_count_isSet = !json[QString("ExecutionCount")].isNull() && m_execution_count_isValid;

    m_item_index_isValid = ::OpenAPI::fromJsonValue(m_item_index, json[QString("ItemIndex")]);
    m_item_index_isSet = !json[QString("ItemIndex")].isNull() && m_item_index_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("Plan")]);
    m_plan_isSet = !json[QString("Plan")].isNull() && m_plan_isValid;

    m_price_at_subscription_date_isValid = ::OpenAPI::fromJsonValue(m_price_at_subscription_date, json[QString("PriceAtSubscriptionDate")]);
    m_price_at_subscription_date_isSet = !json[QString("PriceAtSubscriptionDate")].isNull() && m_price_at_subscription_date_isValid;
}

QString OAIUserorderdetails_subscriptionData_Subscriptions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserorderdetails_subscriptionData_Subscriptions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_count_isSet) {
        obj.insert(QString("ExecutionCount"), ::OpenAPI::toJsonValue(m_execution_count));
    }
    if (m_item_index_isSet) {
        obj.insert(QString("ItemIndex"), ::OpenAPI::toJsonValue(m_item_index));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("Plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_price_at_subscription_date_isSet) {
        obj.insert(QString("PriceAtSubscriptionDate"), ::OpenAPI::toJsonValue(m_price_at_subscription_date));
    }
    return obj;
}

qint32 OAIUserorderdetails_subscriptionData_Subscriptions_inner::getExecutionCount() const {
    return m_execution_count;
}
void OAIUserorderdetails_subscriptionData_Subscriptions_inner::setExecutionCount(const qint32 &execution_count) {
    m_execution_count = execution_count;
    m_execution_count_isSet = true;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner::is_execution_count_Set() const{
    return m_execution_count_isSet;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner::is_execution_count_Valid() const{
    return m_execution_count_isValid;
}

qint32 OAIUserorderdetails_subscriptionData_Subscriptions_inner::getItemIndex() const {
    return m_item_index;
}
void OAIUserorderdetails_subscriptionData_Subscriptions_inner::setItemIndex(const qint32 &item_index) {
    m_item_index = item_index;
    m_item_index_isSet = true;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner::is_item_index_Set() const{
    return m_item_index_isSet;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner::is_item_index_Valid() const{
    return m_item_index_isValid;
}

OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan OAIUserorderdetails_subscriptionData_Subscriptions_inner::getPlan() const {
    return m_plan;
}
void OAIUserorderdetails_subscriptionData_Subscriptions_inner::setPlan(const OAIUserorderdetails_subscriptionData_Subscriptions_inner_Plan &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner::is_plan_Valid() const{
    return m_plan_isValid;
}

double OAIUserorderdetails_subscriptionData_Subscriptions_inner::getPriceAtSubscriptionDate() const {
    return m_price_at_subscription_date;
}
void OAIUserorderdetails_subscriptionData_Subscriptions_inner::setPriceAtSubscriptionDate(const double &price_at_subscription_date) {
    m_price_at_subscription_date = price_at_subscription_date;
    m_price_at_subscription_date_isSet = true;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner::is_price_at_subscription_date_Set() const{
    return m_price_at_subscription_date_isSet;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner::is_price_at_subscription_date_Valid() const{
    return m_price_at_subscription_date_isValid;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_at_subscription_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserorderdetails_subscriptionData_Subscriptions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_execution_count_isValid && m_item_index_isValid && m_plan_isValid && m_price_at_subscription_date_isValid && true;
}

} // namespace OpenAPI
