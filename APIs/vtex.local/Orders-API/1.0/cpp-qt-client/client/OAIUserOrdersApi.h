/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserOrdersApi_H
#define OAI_OAIUserOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIUserorderdetails.h"
#include "OAIUserorderslist.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIUserOrdersApi(const int timeOut = 0);
    ~OAIUserOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  client_email QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void userorderdetails(const QString &client_email, const QString &content_type, const QString &accept, const QString &order_id);

    /**
    * @param[in]  client_email QString [required]
    * @param[in]  page QString [required]
    * @param[in]  per_page QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void userorderslist(const QString &client_email, const QString &page, const QString &per_page, const QString &content_type, const QString &accept);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void userorderdetailsCallback(OAIHttpRequestWorker *worker);
    void userorderslistCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void userorderdetailsSignal(OAIUserorderdetails summary);
    void userorderslistSignal(OAIUserorderslist summary);


    void userorderdetailsSignalFull(OAIHttpRequestWorker *worker, OAIUserorderdetails summary);
    void userorderslistSignalFull(OAIHttpRequestWorker *worker, OAIUserorderslist summary);

    Q_DECL_DEPRECATED_X("Use userorderdetailsSignalError() instead")
    void userorderdetailsSignalE(OAIUserorderdetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userorderdetailsSignalError(OAIUserorderdetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userorderslistSignalError() instead")
    void userorderslistSignalE(OAIUserorderslist summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userorderslistSignalError(OAIUserorderslist summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use userorderdetailsSignalErrorFull() instead")
    void userorderdetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userorderdetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userorderslistSignalErrorFull() instead")
    void userorderslistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userorderslistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
