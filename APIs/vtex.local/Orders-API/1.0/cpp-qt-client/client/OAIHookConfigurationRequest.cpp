/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHookConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHookConfigurationRequest::OAIHookConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHookConfigurationRequest::OAIHookConfigurationRequest() {
    this->initializeModel();
}

OAIHookConfigurationRequest::~OAIHookConfigurationRequest() {}

void OAIHookConfigurationRequest::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_hook_isSet = false;
    m_hook_isValid = false;
}

void OAIHookConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHookConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_hook_isValid = ::OpenAPI::fromJsonValue(m_hook, json[QString("hook")]);
    m_hook_isSet = !json[QString("hook")].isNull() && m_hook_isValid;
}

QString OAIHookConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHookConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_hook.isSet()) {
        obj.insert(QString("hook"), ::OpenAPI::toJsonValue(m_hook));
    }
    return obj;
}

OAIHookFilter OAIHookConfigurationRequest::getFilter() const {
    return m_filter;
}
void OAIHookConfigurationRequest::setFilter(const OAIHookFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIHookConfigurationRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIHookConfigurationRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIHook OAIHookConfigurationRequest::getHook() const {
    return m_hook;
}
void OAIHookConfigurationRequest::setHook(const OAIHook &hook) {
    m_hook = hook;
    m_hook_isSet = true;
}

bool OAIHookConfigurationRequest::is_hook_Set() const{
    return m_hook_isSet;
}

bool OAIHookConfigurationRequest::is_hook_Valid() const{
    return m_hook_isValid;
}

bool OAIHookConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hook.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHookConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_isValid && m_hook_isValid && true;
}

} // namespace OpenAPI
