/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalInfo::OAIAdditionalInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalInfo::OAIAdditionalInfo() {
    this->initializeModel();
}

OAIAdditionalInfo::~OAIAdditionalInfo() {}

void OAIAdditionalInfo::initializeModel() {

    m_brand_id_isSet = false;
    m_brand_id_isValid = false;

    m_brand_name_isSet = false;
    m_brand_name_isValid = false;

    m_categories_ids_isSet = false;
    m_categories_ids_isValid = false;

    m_commercial_condition_id_isSet = false;
    m_commercial_condition_id_isValid = false;

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_offering_info_isSet = false;
    m_offering_info_isValid = false;

    m_offering_type_isSet = false;
    m_offering_type_isValid = false;

    m_offering_type_id_isSet = false;
    m_offering_type_id_isValid = false;

    m_product_cluster_id_isSet = false;
    m_product_cluster_id_isValid = false;
}

void OAIAdditionalInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalInfo::fromJsonObject(QJsonObject json) {

    m_brand_id_isValid = ::OpenAPI::fromJsonValue(m_brand_id, json[QString("brandId")]);
    m_brand_id_isSet = !json[QString("brandId")].isNull() && m_brand_id_isValid;

    m_brand_name_isValid = ::OpenAPI::fromJsonValue(m_brand_name, json[QString("brandName")]);
    m_brand_name_isSet = !json[QString("brandName")].isNull() && m_brand_name_isValid;

    m_categories_ids_isValid = ::OpenAPI::fromJsonValue(m_categories_ids, json[QString("categoriesIds")]);
    m_categories_ids_isSet = !json[QString("categoriesIds")].isNull() && m_categories_ids_isValid;

    m_commercial_condition_id_isValid = ::OpenAPI::fromJsonValue(m_commercial_condition_id, json[QString("commercialConditionId")]);
    m_commercial_condition_id_isSet = !json[QString("commercialConditionId")].isNull() && m_commercial_condition_id_isValid;

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_offering_info_isValid = ::OpenAPI::fromJsonValue(m_offering_info, json[QString("offeringInfo")]);
    m_offering_info_isSet = !json[QString("offeringInfo")].isNull() && m_offering_info_isValid;

    m_offering_type_isValid = ::OpenAPI::fromJsonValue(m_offering_type, json[QString("offeringType")]);
    m_offering_type_isSet = !json[QString("offeringType")].isNull() && m_offering_type_isValid;

    m_offering_type_id_isValid = ::OpenAPI::fromJsonValue(m_offering_type_id, json[QString("offeringTypeId")]);
    m_offering_type_id_isSet = !json[QString("offeringTypeId")].isNull() && m_offering_type_id_isValid;

    m_product_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_product_cluster_id, json[QString("productClusterId")]);
    m_product_cluster_id_isSet = !json[QString("productClusterId")].isNull() && m_product_cluster_id_isValid;
}

QString OAIAdditionalInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_id_isSet) {
        obj.insert(QString("brandId"), ::OpenAPI::toJsonValue(m_brand_id));
    }
    if (m_brand_name_isSet) {
        obj.insert(QString("brandName"), ::OpenAPI::toJsonValue(m_brand_name));
    }
    if (m_categories_ids_isSet) {
        obj.insert(QString("categoriesIds"), ::OpenAPI::toJsonValue(m_categories_ids));
    }
    if (m_commercial_condition_id_isSet) {
        obj.insert(QString("commercialConditionId"), ::OpenAPI::toJsonValue(m_commercial_condition_id));
    }
    if (m_dimension.isSet()) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_offering_info_isSet) {
        obj.insert(QString("offeringInfo"), ::OpenAPI::toJsonValue(m_offering_info));
    }
    if (m_offering_type_isSet) {
        obj.insert(QString("offeringType"), ::OpenAPI::toJsonValue(m_offering_type));
    }
    if (m_offering_type_id_isSet) {
        obj.insert(QString("offeringTypeId"), ::OpenAPI::toJsonValue(m_offering_type_id));
    }
    if (m_product_cluster_id_isSet) {
        obj.insert(QString("productClusterId"), ::OpenAPI::toJsonValue(m_product_cluster_id));
    }
    return obj;
}

QString OAIAdditionalInfo::getBrandId() const {
    return m_brand_id;
}
void OAIAdditionalInfo::setBrandId(const QString &brand_id) {
    m_brand_id = brand_id;
    m_brand_id_isSet = true;
}

bool OAIAdditionalInfo::is_brand_id_Set() const{
    return m_brand_id_isSet;
}

bool OAIAdditionalInfo::is_brand_id_Valid() const{
    return m_brand_id_isValid;
}

QString OAIAdditionalInfo::getBrandName() const {
    return m_brand_name;
}
void OAIAdditionalInfo::setBrandName(const QString &brand_name) {
    m_brand_name = brand_name;
    m_brand_name_isSet = true;
}

bool OAIAdditionalInfo::is_brand_name_Set() const{
    return m_brand_name_isSet;
}

bool OAIAdditionalInfo::is_brand_name_Valid() const{
    return m_brand_name_isValid;
}

QString OAIAdditionalInfo::getCategoriesIds() const {
    return m_categories_ids;
}
void OAIAdditionalInfo::setCategoriesIds(const QString &categories_ids) {
    m_categories_ids = categories_ids;
    m_categories_ids_isSet = true;
}

bool OAIAdditionalInfo::is_categories_ids_Set() const{
    return m_categories_ids_isSet;
}

bool OAIAdditionalInfo::is_categories_ids_Valid() const{
    return m_categories_ids_isValid;
}

QString OAIAdditionalInfo::getCommercialConditionId() const {
    return m_commercial_condition_id;
}
void OAIAdditionalInfo::setCommercialConditionId(const QString &commercial_condition_id) {
    m_commercial_condition_id = commercial_condition_id;
    m_commercial_condition_id_isSet = true;
}

bool OAIAdditionalInfo::is_commercial_condition_id_Set() const{
    return m_commercial_condition_id_isSet;
}

bool OAIAdditionalInfo::is_commercial_condition_id_Valid() const{
    return m_commercial_condition_id_isValid;
}

OAIDimension OAIAdditionalInfo::getDimension() const {
    return m_dimension;
}
void OAIAdditionalInfo::setDimension(const OAIDimension &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIAdditionalInfo::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIAdditionalInfo::is_dimension_Valid() const{
    return m_dimension_isValid;
}

QString OAIAdditionalInfo::getOfferingInfo() const {
    return m_offering_info;
}
void OAIAdditionalInfo::setOfferingInfo(const QString &offering_info) {
    m_offering_info = offering_info;
    m_offering_info_isSet = true;
}

bool OAIAdditionalInfo::is_offering_info_Set() const{
    return m_offering_info_isSet;
}

bool OAIAdditionalInfo::is_offering_info_Valid() const{
    return m_offering_info_isValid;
}

QString OAIAdditionalInfo::getOfferingType() const {
    return m_offering_type;
}
void OAIAdditionalInfo::setOfferingType(const QString &offering_type) {
    m_offering_type = offering_type;
    m_offering_type_isSet = true;
}

bool OAIAdditionalInfo::is_offering_type_Set() const{
    return m_offering_type_isSet;
}

bool OAIAdditionalInfo::is_offering_type_Valid() const{
    return m_offering_type_isValid;
}

QString OAIAdditionalInfo::getOfferingTypeId() const {
    return m_offering_type_id;
}
void OAIAdditionalInfo::setOfferingTypeId(const QString &offering_type_id) {
    m_offering_type_id = offering_type_id;
    m_offering_type_id_isSet = true;
}

bool OAIAdditionalInfo::is_offering_type_id_Set() const{
    return m_offering_type_id_isSet;
}

bool OAIAdditionalInfo::is_offering_type_id_Valid() const{
    return m_offering_type_id_isValid;
}

QString OAIAdditionalInfo::getProductClusterId() const {
    return m_product_cluster_id;
}
void OAIAdditionalInfo::setProductClusterId(const QString &product_cluster_id) {
    m_product_cluster_id = product_cluster_id;
    m_product_cluster_id_isSet = true;
}

bool OAIAdditionalInfo::is_product_cluster_id_Set() const{
    return m_product_cluster_id_isSet;
}

bool OAIAdditionalInfo::is_product_cluster_id_Valid() const{
    return m_product_cluster_id_isValid;
}

bool OAIAdditionalInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commercial_condition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_brand_id_isValid && m_brand_name_isValid && m_categories_ids_isValid && m_commercial_condition_id_isValid && m_dimension_isValid && m_offering_info_isValid && m_offering_type_isValid && m_offering_type_id_isValid && m_product_cluster_id_isValid && true;
}

} // namespace OpenAPI
