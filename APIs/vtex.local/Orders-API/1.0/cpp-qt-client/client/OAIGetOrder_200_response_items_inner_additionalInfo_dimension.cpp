/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOrder_200_response_items_inner_additionalInfo_dimension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOrder_200_response_items_inner_additionalInfo_dimension::OAIGetOrder_200_response_items_inner_additionalInfo_dimension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOrder_200_response_items_inner_additionalInfo_dimension::OAIGetOrder_200_response_items_inner_additionalInfo_dimension() {
    this->initializeModel();
}

OAIGetOrder_200_response_items_inner_additionalInfo_dimension::~OAIGetOrder_200_response_items_inner_additionalInfo_dimension() {}

void OAIGetOrder_200_response_items_inner_additionalInfo_dimension::initializeModel() {

    m_cubicweight_isSet = false;
    m_cubicweight_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIGetOrder_200_response_items_inner_additionalInfo_dimension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOrder_200_response_items_inner_additionalInfo_dimension::fromJsonObject(QJsonObject json) {

    m_cubicweight_isValid = ::OpenAPI::fromJsonValue(m_cubicweight, json[QString("cubicweight")]);
    m_cubicweight_isSet = !json[QString("cubicweight")].isNull() && m_cubicweight_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIGetOrder_200_response_items_inner_additionalInfo_dimension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOrder_200_response_items_inner_additionalInfo_dimension::asJsonObject() const {
    QJsonObject obj;
    if (m_cubicweight_isSet) {
        obj.insert(QString("cubicweight"), ::OpenAPI::toJsonValue(m_cubicweight));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

double OAIGetOrder_200_response_items_inner_additionalInfo_dimension::getCubicweight() const {
    return m_cubicweight;
}
void OAIGetOrder_200_response_items_inner_additionalInfo_dimension::setCubicweight(const double &cubicweight) {
    m_cubicweight = cubicweight;
    m_cubicweight_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo_dimension::is_cubicweight_Set() const{
    return m_cubicweight_isSet;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo_dimension::is_cubicweight_Valid() const{
    return m_cubicweight_isValid;
}

double OAIGetOrder_200_response_items_inner_additionalInfo_dimension::getHeight() const {
    return m_height;
}
void OAIGetOrder_200_response_items_inner_additionalInfo_dimension::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo_dimension::is_height_Set() const{
    return m_height_isSet;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo_dimension::is_height_Valid() const{
    return m_height_isValid;
}

double OAIGetOrder_200_response_items_inner_additionalInfo_dimension::getLength() const {
    return m_length;
}
void OAIGetOrder_200_response_items_inner_additionalInfo_dimension::setLength(const double &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo_dimension::is_length_Set() const{
    return m_length_isSet;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo_dimension::is_length_Valid() const{
    return m_length_isValid;
}

double OAIGetOrder_200_response_items_inner_additionalInfo_dimension::getWeight() const {
    return m_weight;
}
void OAIGetOrder_200_response_items_inner_additionalInfo_dimension::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo_dimension::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo_dimension::is_weight_Valid() const{
    return m_weight_isValid;
}

double OAIGetOrder_200_response_items_inner_additionalInfo_dimension::getWidth() const {
    return m_width;
}
void OAIGetOrder_200_response_items_inner_additionalInfo_dimension::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo_dimension::is_width_Set() const{
    return m_width_isSet;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo_dimension::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo_dimension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cubicweight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOrder_200_response_items_inner_additionalInfo_dimension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
