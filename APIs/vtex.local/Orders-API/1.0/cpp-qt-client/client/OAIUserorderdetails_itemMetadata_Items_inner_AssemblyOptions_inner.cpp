/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner() {
    this->initializeModel();
}

OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::~OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner() {}

void OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::initializeModel() {

    m_composition_isSet = false;
    m_composition_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_input_values_isSet = false;
    m_input_values_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;
}

void OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::fromJsonObject(QJsonObject json) {

    m_composition_isValid = ::OpenAPI::fromJsonValue(m_composition, json[QString("Composition")]);
    m_composition_isSet = !json[QString("Composition")].isNull() && m_composition_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_input_values_isValid = ::OpenAPI::fromJsonValue(m_input_values, json[QString("InputValues")]);
    m_input_values_isSet = !json[QString("InputValues")].isNull() && m_input_values_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("Required")]);
    m_required_isSet = !json[QString("Required")].isNull() && m_required_isValid;
}

QString OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_composition_isSet) {
        obj.insert(QString("Composition"), ::OpenAPI::toJsonValue(m_composition));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_input_values_isSet) {
        obj.insert(QString("InputValues"), ::OpenAPI::toJsonValue(m_input_values));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_required_isSet) {
        obj.insert(QString("Required"), ::OpenAPI::toJsonValue(m_required));
    }
    return obj;
}

OAIObject OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::getComposition() const {
    return m_composition;
}
void OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::setComposition(const OAIObject &composition) {
    m_composition = composition;
    m_composition_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::is_composition_Set() const{
    return m_composition_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::is_composition_Valid() const{
    return m_composition_isValid;
}

QString OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::getId() const {
    return m_id;
}
void OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::getInputValues() const {
    return m_input_values;
}
void OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::setInputValues(const OAIObject &input_values) {
    m_input_values = input_values;
    m_input_values_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::is_input_values_Set() const{
    return m_input_values_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::is_input_values_Valid() const{
    return m_input_values_isValid;
}

QString OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::getName() const {
    return m_name;
}
void OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::isRequired() const {
    return m_required;
}
void OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::is_required_Set() const{
    return m_required_isSet;
}

bool OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::is_required_Valid() const{
    return m_required_isValid;
}

bool OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_composition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserorderdetails_itemMetadata_Items_inner_AssemblyOptions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_composition_isValid && m_id_isValid && m_input_values_isValid && m_name_isValid && m_required_isValid && true;
}

} // namespace OpenAPI
