/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingData::OAIShippingData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingData::OAIShippingData() {
    this->initializeModel();
}

OAIShippingData::~OAIShippingData() {}

void OAIShippingData::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_logistics_info_isSet = false;
    m_logistics_info_isValid = false;

    m_selected_addresses_isSet = false;
    m_selected_addresses_isValid = false;

    m_tracking_hints_isSet = false;
    m_tracking_hints_isValid = false;
}

void OAIShippingData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingData::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logistics_info_isValid = ::OpenAPI::fromJsonValue(m_logistics_info, json[QString("logisticsInfo")]);
    m_logistics_info_isSet = !json[QString("logisticsInfo")].isNull() && m_logistics_info_isValid;

    m_selected_addresses_isValid = ::OpenAPI::fromJsonValue(m_selected_addresses, json[QString("selectedAddresses")]);
    m_selected_addresses_isSet = !json[QString("selectedAddresses")].isNull() && m_selected_addresses_isValid;

    m_tracking_hints_isValid = ::OpenAPI::fromJsonValue(m_tracking_hints, json[QString("trackingHints")]);
    m_tracking_hints_isSet = !json[QString("trackingHints")].isNull() && m_tracking_hints_isValid;
}

QString OAIShippingData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingData::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logistics_info.size() > 0) {
        obj.insert(QString("logisticsInfo"), ::OpenAPI::toJsonValue(m_logistics_info));
    }
    if (m_selected_addresses.size() > 0) {
        obj.insert(QString("selectedAddresses"), ::OpenAPI::toJsonValue(m_selected_addresses));
    }
    if (m_tracking_hints_isSet) {
        obj.insert(QString("trackingHints"), ::OpenAPI::toJsonValue(m_tracking_hints));
    }
    return obj;
}

OAIAddress OAIShippingData::getAddress() const {
    return m_address;
}
void OAIShippingData::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIShippingData::is_address_Set() const{
    return m_address_isSet;
}

bool OAIShippingData::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIShippingData::getId() const {
    return m_id;
}
void OAIShippingData::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIShippingData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIShippingData::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILogisticsInfo> OAIShippingData::getLogisticsInfo() const {
    return m_logistics_info;
}
void OAIShippingData::setLogisticsInfo(const QList<OAILogisticsInfo> &logistics_info) {
    m_logistics_info = logistics_info;
    m_logistics_info_isSet = true;
}

bool OAIShippingData::is_logistics_info_Set() const{
    return m_logistics_info_isSet;
}

bool OAIShippingData::is_logistics_info_Valid() const{
    return m_logistics_info_isValid;
}

QList<OAISelectedAddress> OAIShippingData::getSelectedAddresses() const {
    return m_selected_addresses;
}
void OAIShippingData::setSelectedAddresses(const QList<OAISelectedAddress> &selected_addresses) {
    m_selected_addresses = selected_addresses;
    m_selected_addresses_isSet = true;
}

bool OAIShippingData::is_selected_addresses_Set() const{
    return m_selected_addresses_isSet;
}

bool OAIShippingData::is_selected_addresses_Valid() const{
    return m_selected_addresses_isValid;
}

QString OAIShippingData::getTrackingHints() const {
    return m_tracking_hints;
}
void OAIShippingData::setTrackingHints(const QString &tracking_hints) {
    m_tracking_hints = tracking_hints;
    m_tracking_hints_isSet = true;
}

bool OAIShippingData::is_tracking_hints_Set() const{
    return m_tracking_hints_isSet;
}

bool OAIShippingData::is_tracking_hints_Valid() const{
    return m_tracking_hints_isValid;
}

bool OAIShippingData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logistics_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_hints_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_id_isValid && m_logistics_info_isValid && m_selected_addresses_isValid && m_tracking_hints_isValid && true;
}

} // namespace OpenAPI
