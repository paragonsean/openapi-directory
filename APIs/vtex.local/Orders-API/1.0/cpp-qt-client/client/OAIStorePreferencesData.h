/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStorePreferencesData.h
 *
 * Object with data from the store&#39;s configuration - stored in VTEX&#39;s License Manager.
 */

#ifndef OAIStorePreferencesData_H
#define OAIStorePreferencesData_H

#include <QJsonObject>

#include "OAICurrencyFormatInfo.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICurrencyFormatInfo;

class OAIStorePreferencesData : public OAIObject {
public:
    OAIStorePreferencesData();
    OAIStorePreferencesData(QString json);
    ~OAIStorePreferencesData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    OAICurrencyFormatInfo getCurrencyFormatInfo() const;
    void setCurrencyFormatInfo(const OAICurrencyFormatInfo &currency_format_info);
    bool is_currency_format_info_Set() const;
    bool is_currency_format_info_Valid() const;

    qint32 getCurrencyLocale() const;
    void setCurrencyLocale(const qint32 &currency_locale);
    bool is_currency_locale_Set() const;
    bool is_currency_locale_Valid() const;

    QString getCurrencySymbol() const;
    void setCurrencySymbol(const QString &currency_symbol);
    bool is_currency_symbol_Set() const;
    bool is_currency_symbol_Valid() const;

    QString getTimeZone() const;
    void setTimeZone(const QString &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    OAICurrencyFormatInfo m_currency_format_info;
    bool m_currency_format_info_isSet;
    bool m_currency_format_info_isValid;

    qint32 m_currency_locale;
    bool m_currency_locale_isSet;
    bool m_currency_locale_isValid;

    QString m_currency_symbol;
    bool m_currency_symbol_isSet;
    bool m_currency_symbol_isValid;

    QString m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStorePreferencesData)

#endif // OAIStorePreferencesData_H
