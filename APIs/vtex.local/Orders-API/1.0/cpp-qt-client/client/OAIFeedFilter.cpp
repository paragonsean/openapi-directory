/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedFilter::OAIFeedFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedFilter::OAIFeedFilter() {
    this->initializeModel();
}

OAIFeedFilter::~OAIFeedFilter() {}

void OAIFeedFilter::initializeModel() {

    m_disable_single_fire_isSet = false;
    m_disable_single_fire_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFeedFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedFilter::fromJsonObject(QJsonObject json) {

    m_disable_single_fire_isValid = ::OpenAPI::fromJsonValue(m_disable_single_fire, json[QString("disableSingleFire")]);
    m_disable_single_fire_isSet = !json[QString("disableSingleFire")].isNull() && m_disable_single_fire_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFeedFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_single_fire_isSet) {
        obj.insert(QString("disableSingleFire"), ::OpenAPI::toJsonValue(m_disable_single_fire));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_status.size() > 0) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIFeedFilter::isDisableSingleFire() const {
    return m_disable_single_fire;
}
void OAIFeedFilter::setDisableSingleFire(const bool &disable_single_fire) {
    m_disable_single_fire = disable_single_fire;
    m_disable_single_fire_isSet = true;
}

bool OAIFeedFilter::is_disable_single_fire_Set() const{
    return m_disable_single_fire_isSet;
}

bool OAIFeedFilter::is_disable_single_fire_Valid() const{
    return m_disable_single_fire_isValid;
}

QString OAIFeedFilter::getExpression() const {
    return m_expression;
}
void OAIFeedFilter::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIFeedFilter::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIFeedFilter::is_expression_Valid() const{
    return m_expression_isValid;
}

QList<QString> OAIFeedFilter::getStatus() const {
    return m_status;
}
void OAIFeedFilter::setStatus(const QList<QString> &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFeedFilter::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFeedFilter::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIFeedFilter::getType() const {
    return m_type;
}
void OAIFeedFilter::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFeedFilter::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFeedFilter::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFeedFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_single_fire_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
