/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientProfileData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientProfileData::OAIClientProfileData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientProfileData::OAIClientProfileData() {
    this->initializeModel();
}

OAIClientProfileData::~OAIClientProfileData() {}

void OAIClientProfileData::initializeModel() {

    m_corporate_document_isSet = false;
    m_corporate_document_isValid = false;

    m_corporate_name_isSet = false;
    m_corporate_name_isValid = false;

    m_corporate_phone_isSet = false;
    m_corporate_phone_isValid = false;

    m_customer_class_isSet = false;
    m_customer_class_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_corporate_isSet = false;
    m_is_corporate_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_state_inscription_isSet = false;
    m_state_inscription_isValid = false;

    m_trade_name_isSet = false;
    m_trade_name_isValid = false;

    m_user_profile_id_isSet = false;
    m_user_profile_id_isValid = false;
}

void OAIClientProfileData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientProfileData::fromJsonObject(QJsonObject json) {

    m_corporate_document_isValid = ::OpenAPI::fromJsonValue(m_corporate_document, json[QString("corporateDocument")]);
    m_corporate_document_isSet = !json[QString("corporateDocument")].isNull() && m_corporate_document_isValid;

    m_corporate_name_isValid = ::OpenAPI::fromJsonValue(m_corporate_name, json[QString("corporateName")]);
    m_corporate_name_isSet = !json[QString("corporateName")].isNull() && m_corporate_name_isValid;

    m_corporate_phone_isValid = ::OpenAPI::fromJsonValue(m_corporate_phone, json[QString("corporatePhone")]);
    m_corporate_phone_isSet = !json[QString("corporatePhone")].isNull() && m_corporate_phone_isValid;

    m_customer_class_isValid = ::OpenAPI::fromJsonValue(m_customer_class, json[QString("customerClass")]);
    m_customer_class_isSet = !json[QString("customerClass")].isNull() && m_customer_class_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_corporate_isValid = ::OpenAPI::fromJsonValue(m_is_corporate, json[QString("isCorporate")]);
    m_is_corporate_isSet = !json[QString("isCorporate")].isNull() && m_is_corporate_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_state_inscription_isValid = ::OpenAPI::fromJsonValue(m_state_inscription, json[QString("stateInscription")]);
    m_state_inscription_isSet = !json[QString("stateInscription")].isNull() && m_state_inscription_isValid;

    m_trade_name_isValid = ::OpenAPI::fromJsonValue(m_trade_name, json[QString("tradeName")]);
    m_trade_name_isSet = !json[QString("tradeName")].isNull() && m_trade_name_isValid;

    m_user_profile_id_isValid = ::OpenAPI::fromJsonValue(m_user_profile_id, json[QString("userProfileId")]);
    m_user_profile_id_isSet = !json[QString("userProfileId")].isNull() && m_user_profile_id_isValid;
}

QString OAIClientProfileData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientProfileData::asJsonObject() const {
    QJsonObject obj;
    if (m_corporate_document_isSet) {
        obj.insert(QString("corporateDocument"), ::OpenAPI::toJsonValue(m_corporate_document));
    }
    if (m_corporate_name_isSet) {
        obj.insert(QString("corporateName"), ::OpenAPI::toJsonValue(m_corporate_name));
    }
    if (m_corporate_phone_isSet) {
        obj.insert(QString("corporatePhone"), ::OpenAPI::toJsonValue(m_corporate_phone));
    }
    if (m_customer_class_isSet) {
        obj.insert(QString("customerClass"), ::OpenAPI::toJsonValue(m_customer_class));
    }
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_corporate_isSet) {
        obj.insert(QString("isCorporate"), ::OpenAPI::toJsonValue(m_is_corporate));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_state_inscription_isSet) {
        obj.insert(QString("stateInscription"), ::OpenAPI::toJsonValue(m_state_inscription));
    }
    if (m_trade_name_isSet) {
        obj.insert(QString("tradeName"), ::OpenAPI::toJsonValue(m_trade_name));
    }
    if (m_user_profile_id_isSet) {
        obj.insert(QString("userProfileId"), ::OpenAPI::toJsonValue(m_user_profile_id));
    }
    return obj;
}

QString OAIClientProfileData::getCorporateDocument() const {
    return m_corporate_document;
}
void OAIClientProfileData::setCorporateDocument(const QString &corporate_document) {
    m_corporate_document = corporate_document;
    m_corporate_document_isSet = true;
}

bool OAIClientProfileData::is_corporate_document_Set() const{
    return m_corporate_document_isSet;
}

bool OAIClientProfileData::is_corporate_document_Valid() const{
    return m_corporate_document_isValid;
}

QString OAIClientProfileData::getCorporateName() const {
    return m_corporate_name;
}
void OAIClientProfileData::setCorporateName(const QString &corporate_name) {
    m_corporate_name = corporate_name;
    m_corporate_name_isSet = true;
}

bool OAIClientProfileData::is_corporate_name_Set() const{
    return m_corporate_name_isSet;
}

bool OAIClientProfileData::is_corporate_name_Valid() const{
    return m_corporate_name_isValid;
}

QString OAIClientProfileData::getCorporatePhone() const {
    return m_corporate_phone;
}
void OAIClientProfileData::setCorporatePhone(const QString &corporate_phone) {
    m_corporate_phone = corporate_phone;
    m_corporate_phone_isSet = true;
}

bool OAIClientProfileData::is_corporate_phone_Set() const{
    return m_corporate_phone_isSet;
}

bool OAIClientProfileData::is_corporate_phone_Valid() const{
    return m_corporate_phone_isValid;
}

QString OAIClientProfileData::getCustomerClass() const {
    return m_customer_class;
}
void OAIClientProfileData::setCustomerClass(const QString &customer_class) {
    m_customer_class = customer_class;
    m_customer_class_isSet = true;
}

bool OAIClientProfileData::is_customer_class_Set() const{
    return m_customer_class_isSet;
}

bool OAIClientProfileData::is_customer_class_Valid() const{
    return m_customer_class_isValid;
}

QString OAIClientProfileData::getDocument() const {
    return m_document;
}
void OAIClientProfileData::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIClientProfileData::is_document_Set() const{
    return m_document_isSet;
}

bool OAIClientProfileData::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIClientProfileData::getDocumentType() const {
    return m_document_type;
}
void OAIClientProfileData::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAIClientProfileData::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAIClientProfileData::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QString OAIClientProfileData::getEmail() const {
    return m_email;
}
void OAIClientProfileData::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIClientProfileData::is_email_Set() const{
    return m_email_isSet;
}

bool OAIClientProfileData::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIClientProfileData::getFirstName() const {
    return m_first_name;
}
void OAIClientProfileData::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIClientProfileData::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIClientProfileData::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIClientProfileData::getId() const {
    return m_id;
}
void OAIClientProfileData::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIClientProfileData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIClientProfileData::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIClientProfileData::isIsCorporate() const {
    return m_is_corporate;
}
void OAIClientProfileData::setIsCorporate(const bool &is_corporate) {
    m_is_corporate = is_corporate;
    m_is_corporate_isSet = true;
}

bool OAIClientProfileData::is_is_corporate_Set() const{
    return m_is_corporate_isSet;
}

bool OAIClientProfileData::is_is_corporate_Valid() const{
    return m_is_corporate_isValid;
}

QString OAIClientProfileData::getLastName() const {
    return m_last_name;
}
void OAIClientProfileData::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIClientProfileData::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIClientProfileData::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIClientProfileData::getPhone() const {
    return m_phone;
}
void OAIClientProfileData::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIClientProfileData::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIClientProfileData::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIClientProfileData::getStateInscription() const {
    return m_state_inscription;
}
void OAIClientProfileData::setStateInscription(const QString &state_inscription) {
    m_state_inscription = state_inscription;
    m_state_inscription_isSet = true;
}

bool OAIClientProfileData::is_state_inscription_Set() const{
    return m_state_inscription_isSet;
}

bool OAIClientProfileData::is_state_inscription_Valid() const{
    return m_state_inscription_isValid;
}

QString OAIClientProfileData::getTradeName() const {
    return m_trade_name;
}
void OAIClientProfileData::setTradeName(const QString &trade_name) {
    m_trade_name = trade_name;
    m_trade_name_isSet = true;
}

bool OAIClientProfileData::is_trade_name_Set() const{
    return m_trade_name_isSet;
}

bool OAIClientProfileData::is_trade_name_Valid() const{
    return m_trade_name_isValid;
}

QString OAIClientProfileData::getUserProfileId() const {
    return m_user_profile_id;
}
void OAIClientProfileData::setUserProfileId(const QString &user_profile_id) {
    m_user_profile_id = user_profile_id;
    m_user_profile_id_isSet = true;
}

bool OAIClientProfileData::is_user_profile_id_Set() const{
    return m_user_profile_id_isSet;
}

bool OAIClientProfileData::is_user_profile_id_Valid() const{
    return m_user_profile_id_isValid;
}

bool OAIClientProfileData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_corporate_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_corporate_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_corporate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_inscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trade_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientProfileData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_corporate_document_isValid && m_corporate_name_isValid && m_corporate_phone_isValid && m_customer_class_isValid && m_document_isValid && m_document_type_isValid && m_email_isValid && m_first_name_isValid && m_id_isValid && m_is_corporate_isValid && m_last_name_isValid && m_phone_isValid && m_state_inscription_isValid && m_trade_name_isValid && m_user_profile_id_isValid && true;
}

} // namespace OpenAPI
