/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportCompletedResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportCompletedResponse::OAIExportCompletedResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportCompletedResponse::OAIExportCompletedResponse() {
    this->initializeModel();
}

OAIExportCompletedResponse::~OAIExportCompletedResponse() {}

void OAIExportCompletedResponse::initializeModel() {

    m_cancelled_isSet = false;
    m_cancelled_isValid = false;

    m_completed_date_isSet = false;
    m_completed_date_isValid = false;

    m_date_of_request_isSet = false;
    m_date_of_request_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_host_uri_isSet = false;
    m_host_uri_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_las_update_time_isSet = false;
    m_las_update_time_isValid = false;

    m_link_to_download_isSet = false;
    m_link_to_download_isValid = false;

    m_publish_id_isSet = false;
    m_publish_id_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_row_number_isSet = false;
    m_row_number_isValid = false;

    m_rows_processed_isSet = false;
    m_rows_processed_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_utc_time_isSet = false;
    m_utc_time_isValid = false;
}

void OAIExportCompletedResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportCompletedResponse::fromJsonObject(QJsonObject json) {

    m_cancelled_isValid = ::OpenAPI::fromJsonValue(m_cancelled, json[QString("cancelled")]);
    m_cancelled_isSet = !json[QString("cancelled")].isNull() && m_cancelled_isValid;

    m_completed_date_isValid = ::OpenAPI::fromJsonValue(m_completed_date, json[QString("completedDate")]);
    m_completed_date_isSet = !json[QString("completedDate")].isNull() && m_completed_date_isValid;

    m_date_of_request_isValid = ::OpenAPI::fromJsonValue(m_date_of_request, json[QString("dateOfRequest")]);
    m_date_of_request_isSet = !json[QString("dateOfRequest")].isNull() && m_date_of_request_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_host_uri_isValid = ::OpenAPI::fromJsonValue(m_host_uri, json[QString("hostUri")]);
    m_host_uri_isSet = !json[QString("hostUri")].isNull() && m_host_uri_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_las_update_time_isValid = ::OpenAPI::fromJsonValue(m_las_update_time, json[QString("lasUpdateTime")]);
    m_las_update_time_isSet = !json[QString("lasUpdateTime")].isNull() && m_las_update_time_isValid;

    m_link_to_download_isValid = ::OpenAPI::fromJsonValue(m_link_to_download, json[QString("linkToDownload")]);
    m_link_to_download_isSet = !json[QString("linkToDownload")].isNull() && m_link_to_download_isValid;

    m_publish_id_isValid = ::OpenAPI::fromJsonValue(m_publish_id, json[QString("publishId")]);
    m_publish_id_isSet = !json[QString("publishId")].isNull() && m_publish_id_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_row_number_isValid = ::OpenAPI::fromJsonValue(m_row_number, json[QString("rowNumber")]);
    m_row_number_isSet = !json[QString("rowNumber")].isNull() && m_row_number_isValid;

    m_rows_processed_isValid = ::OpenAPI::fromJsonValue(m_rows_processed, json[QString("rowsProcessed")]);
    m_rows_processed_isSet = !json[QString("rowsProcessed")].isNull() && m_rows_processed_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_utc_time_isValid = ::OpenAPI::fromJsonValue(m_utc_time, json[QString("utcTime")]);
    m_utc_time_isSet = !json[QString("utcTime")].isNull() && m_utc_time_isValid;
}

QString OAIExportCompletedResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportCompletedResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cancelled_isSet) {
        obj.insert(QString("cancelled"), ::OpenAPI::toJsonValue(m_cancelled));
    }
    if (m_completed_date_isSet) {
        obj.insert(QString("completedDate"), ::OpenAPI::toJsonValue(m_completed_date));
    }
    if (m_date_of_request_isSet) {
        obj.insert(QString("dateOfRequest"), ::OpenAPI::toJsonValue(m_date_of_request));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_host_uri_isSet) {
        obj.insert(QString("hostUri"), ::OpenAPI::toJsonValue(m_host_uri));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_las_update_time_isSet) {
        obj.insert(QString("lasUpdateTime"), ::OpenAPI::toJsonValue(m_las_update_time));
    }
    if (m_link_to_download_isSet) {
        obj.insert(QString("linkToDownload"), ::OpenAPI::toJsonValue(m_link_to_download));
    }
    if (m_publish_id_isSet) {
        obj.insert(QString("publishId"), ::OpenAPI::toJsonValue(m_publish_id));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_row_number_isSet) {
        obj.insert(QString("rowNumber"), ::OpenAPI::toJsonValue(m_row_number));
    }
    if (m_rows_processed_isSet) {
        obj.insert(QString("rowsProcessed"), ::OpenAPI::toJsonValue(m_rows_processed));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_utc_time_isSet) {
        obj.insert(QString("utcTime"), ::OpenAPI::toJsonValue(m_utc_time));
    }
    return obj;
}

bool OAIExportCompletedResponse::isCancelled() const {
    return m_cancelled;
}
void OAIExportCompletedResponse::setCancelled(const bool &cancelled) {
    m_cancelled = cancelled;
    m_cancelled_isSet = true;
}

bool OAIExportCompletedResponse::is_cancelled_Set() const{
    return m_cancelled_isSet;
}

bool OAIExportCompletedResponse::is_cancelled_Valid() const{
    return m_cancelled_isValid;
}

QString OAIExportCompletedResponse::getCompletedDate() const {
    return m_completed_date;
}
void OAIExportCompletedResponse::setCompletedDate(const QString &completed_date) {
    m_completed_date = completed_date;
    m_completed_date_isSet = true;
}

bool OAIExportCompletedResponse::is_completed_date_Set() const{
    return m_completed_date_isSet;
}

bool OAIExportCompletedResponse::is_completed_date_Valid() const{
    return m_completed_date_isValid;
}

QString OAIExportCompletedResponse::getDateOfRequest() const {
    return m_date_of_request;
}
void OAIExportCompletedResponse::setDateOfRequest(const QString &date_of_request) {
    m_date_of_request = date_of_request;
    m_date_of_request_isSet = true;
}

bool OAIExportCompletedResponse::is_date_of_request_Set() const{
    return m_date_of_request_isSet;
}

bool OAIExportCompletedResponse::is_date_of_request_Valid() const{
    return m_date_of_request_isValid;
}

QString OAIExportCompletedResponse::getEmail() const {
    return m_email;
}
void OAIExportCompletedResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIExportCompletedResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIExportCompletedResponse::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIExportCompletedResponse::getFilter() const {
    return m_filter;
}
void OAIExportCompletedResponse::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIExportCompletedResponse::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIExportCompletedResponse::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIExportCompletedResponse::getHostUri() const {
    return m_host_uri;
}
void OAIExportCompletedResponse::setHostUri(const QString &host_uri) {
    m_host_uri = host_uri;
    m_host_uri_isSet = true;
}

bool OAIExportCompletedResponse::is_host_uri_Set() const{
    return m_host_uri_isSet;
}

bool OAIExportCompletedResponse::is_host_uri_Valid() const{
    return m_host_uri_isValid;
}

QString OAIExportCompletedResponse::getId() const {
    return m_id;
}
void OAIExportCompletedResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExportCompletedResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExportCompletedResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIExportCompletedResponse::getInstanceId() const {
    return m_instance_id;
}
void OAIExportCompletedResponse::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIExportCompletedResponse::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIExportCompletedResponse::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIExportCompletedResponse::getLasUpdateTime() const {
    return m_las_update_time;
}
void OAIExportCompletedResponse::setLasUpdateTime(const QString &las_update_time) {
    m_las_update_time = las_update_time;
    m_las_update_time_isSet = true;
}

bool OAIExportCompletedResponse::is_las_update_time_Set() const{
    return m_las_update_time_isSet;
}

bool OAIExportCompletedResponse::is_las_update_time_Valid() const{
    return m_las_update_time_isValid;
}

QString OAIExportCompletedResponse::getLinkToDownload() const {
    return m_link_to_download;
}
void OAIExportCompletedResponse::setLinkToDownload(const QString &link_to_download) {
    m_link_to_download = link_to_download;
    m_link_to_download_isSet = true;
}

bool OAIExportCompletedResponse::is_link_to_download_Set() const{
    return m_link_to_download_isSet;
}

bool OAIExportCompletedResponse::is_link_to_download_Valid() const{
    return m_link_to_download_isValid;
}

QString OAIExportCompletedResponse::getPublishId() const {
    return m_publish_id;
}
void OAIExportCompletedResponse::setPublishId(const QString &publish_id) {
    m_publish_id = publish_id;
    m_publish_id_isSet = true;
}

bool OAIExportCompletedResponse::is_publish_id_Set() const{
    return m_publish_id_isSet;
}

bool OAIExportCompletedResponse::is_publish_id_Valid() const{
    return m_publish_id_isValid;
}

QString OAIExportCompletedResponse::getQuery() const {
    return m_query;
}
void OAIExportCompletedResponse::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIExportCompletedResponse::is_query_Set() const{
    return m_query_isSet;
}

bool OAIExportCompletedResponse::is_query_Valid() const{
    return m_query_isValid;
}

qint32 OAIExportCompletedResponse::getRowNumber() const {
    return m_row_number;
}
void OAIExportCompletedResponse::setRowNumber(const qint32 &row_number) {
    m_row_number = row_number;
    m_row_number_isSet = true;
}

bool OAIExportCompletedResponse::is_row_number_Set() const{
    return m_row_number_isSet;
}

bool OAIExportCompletedResponse::is_row_number_Valid() const{
    return m_row_number_isValid;
}

qint32 OAIExportCompletedResponse::getRowsProcessed() const {
    return m_rows_processed;
}
void OAIExportCompletedResponse::setRowsProcessed(const qint32 &rows_processed) {
    m_rows_processed = rows_processed;
    m_rows_processed_isSet = true;
}

bool OAIExportCompletedResponse::is_rows_processed_Set() const{
    return m_rows_processed_isSet;
}

bool OAIExportCompletedResponse::is_rows_processed_Valid() const{
    return m_rows_processed_isValid;
}

QString OAIExportCompletedResponse::getStartDate() const {
    return m_start_date;
}
void OAIExportCompletedResponse::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIExportCompletedResponse::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIExportCompletedResponse::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIExportCompletedResponse::getUtcTime() const {
    return m_utc_time;
}
void OAIExportCompletedResponse::setUtcTime(const QString &utc_time) {
    m_utc_time = utc_time;
    m_utc_time_isSet = true;
}

bool OAIExportCompletedResponse::is_utc_time_Set() const{
    return m_utc_time_isSet;
}

bool OAIExportCompletedResponse::is_utc_time_Valid() const{
    return m_utc_time_isValid;
}

bool OAIExportCompletedResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancelled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_las_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_to_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utc_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportCompletedResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cancelled_isValid && m_completed_date_isValid && m_date_of_request_isValid && m_email_isValid && m_filter_isValid && m_host_uri_isValid && m_id_isValid && m_instance_id_isValid && m_las_update_time_isValid && m_link_to_download_isValid && m_publish_id_isValid && m_query_isValid && m_row_number_isValid && m_rows_processed_isValid && m_start_date_isValid && m_utc_time_isValid && true;
}

} // namespace OpenAPI
