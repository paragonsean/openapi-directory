/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPickupStoreInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPickupStoreInfo::OAIPickupStoreInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPickupStoreInfo::OAIPickupStoreInfo() {
    this->initializeModel();
}

OAIPickupStoreInfo::~OAIPickupStoreInfo() {}

void OAIPickupStoreInfo::initializeModel() {

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_dock_id_isSet = false;
    m_dock_id_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_is_pickup_store_isSet = false;
    m_is_pickup_store_isValid = false;
}

void OAIPickupStoreInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPickupStoreInfo::fromJsonObject(QJsonObject json) {

    m_additional_info_isValid = ::OpenAPI::fromJsonValue(m_additional_info, json[QString("additionalInfo")]);
    m_additional_info_isSet = !json[QString("additionalInfo")].isNull() && m_additional_info_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_dock_id_isValid = ::OpenAPI::fromJsonValue(m_dock_id, json[QString("dockId")]);
    m_dock_id_isSet = !json[QString("dockId")].isNull() && m_dock_id_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_is_pickup_store_isValid = ::OpenAPI::fromJsonValue(m_is_pickup_store, json[QString("isPickupStore")]);
    m_is_pickup_store_isSet = !json[QString("isPickupStore")].isNull() && m_is_pickup_store_isValid;
}

QString OAIPickupStoreInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPickupStoreInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_info_isSet) {
        obj.insert(QString("additionalInfo"), ::OpenAPI::toJsonValue(m_additional_info));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_dock_id_isSet) {
        obj.insert(QString("dockId"), ::OpenAPI::toJsonValue(m_dock_id));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_is_pickup_store_isSet) {
        obj.insert(QString("isPickupStore"), ::OpenAPI::toJsonValue(m_is_pickup_store));
    }
    return obj;
}

QString OAIPickupStoreInfo::getAdditionalInfo() const {
    return m_additional_info;
}
void OAIPickupStoreInfo::setAdditionalInfo(const QString &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAIPickupStoreInfo::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAIPickupStoreInfo::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

QString OAIPickupStoreInfo::getAddress() const {
    return m_address;
}
void OAIPickupStoreInfo::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPickupStoreInfo::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPickupStoreInfo::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIPickupStoreInfo::getDockId() const {
    return m_dock_id;
}
void OAIPickupStoreInfo::setDockId(const QString &dock_id) {
    m_dock_id = dock_id;
    m_dock_id_isSet = true;
}

bool OAIPickupStoreInfo::is_dock_id_Set() const{
    return m_dock_id_isSet;
}

bool OAIPickupStoreInfo::is_dock_id_Valid() const{
    return m_dock_id_isValid;
}

QString OAIPickupStoreInfo::getFriendlyName() const {
    return m_friendly_name;
}
void OAIPickupStoreInfo::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIPickupStoreInfo::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIPickupStoreInfo::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

bool OAIPickupStoreInfo::isIsPickupStore() const {
    return m_is_pickup_store;
}
void OAIPickupStoreInfo::setIsPickupStore(const bool &is_pickup_store) {
    m_is_pickup_store = is_pickup_store;
    m_is_pickup_store_isSet = true;
}

bool OAIPickupStoreInfo::is_is_pickup_store_Set() const{
    return m_is_pickup_store_isSet;
}

bool OAIPickupStoreInfo::is_is_pickup_store_Valid() const{
    return m_is_pickup_store_isValid;
}

bool OAIPickupStoreInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dock_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pickup_store_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPickupStoreInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_additional_info_isValid && m_address_isValid && m_dock_id_isValid && m_friendly_name_isValid && m_is_pickup_store_isValid && true;
}

} // namespace OpenAPI
