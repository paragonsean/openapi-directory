/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectorResponses from './ConnectorResponses';

/**
 * The Payment1 model module.
 * @module model/Payment1
 * @version 1.0
 */
class Payment1 {
    /**
     * Constructs a new <code>Payment1</code>.
     * @alias module:model/Payment1
     * @param cardHolder {String} Payment card holder.
     * @param cardNumber {String} Payment card number.
     * @param connectorResponses {module:model/ConnectorResponses} 
     * @param cvv2 {String} Card Verification Value (CVV2) is a security code used by payment processors to reduce fraudulent credit and debit card transactions.
     * @param dueDate {String} Payment due date.
     * @param expireMonth {String} Payment card expire month.
     * @param expireYear {String} Payment card expire year.
     * @param firstDigits {String} Payment card first digits.
     * @param giftCardCaption {String} Gift Card caption.
     * @param giftCardId {String} Gift Card ID.
     * @param giftCardName {String} Gift Card name.
     * @param group {String} It represents the payment method. For each method, it can have the following values:    - **Credit card:** `creditCard`     - **Debid card:** `debitCard`    - **Bank invoice:** `bankInvoice`    - **Promissory:** `promissory`     - **Gift card:** `giftCard`    - **Pix:** `instantPayment`
     * @param id {String} Payment ID.
     * @param installments {Number} Payment Installments quantity.
     * @param lastDigits {String} Payment card last digits.
     * @param paymentSystem {String} Payment system ID.
     * @param paymentSystemName {String} Payment system name.
     * @param redemptionCode {String} Code for the customer to use the Gift Card.
     * @param referenceValue {Number} Payment reference Value.
     * @param tid {String} Payment transaction ID.
     * @param url {String} Payment URL.
     * @param value {Number} Payment value.
     */
    constructor(cardHolder, cardNumber, connectorResponses, cvv2, dueDate, expireMonth, expireYear, firstDigits, giftCardCaption, giftCardId, giftCardName, group, id, installments, lastDigits, paymentSystem, paymentSystemName, redemptionCode, referenceValue, tid, url, value) { 
        
        Payment1.initialize(this, cardHolder, cardNumber, connectorResponses, cvv2, dueDate, expireMonth, expireYear, firstDigits, giftCardCaption, giftCardId, giftCardName, group, id, installments, lastDigits, paymentSystem, paymentSystemName, redemptionCode, referenceValue, tid, url, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cardHolder, cardNumber, connectorResponses, cvv2, dueDate, expireMonth, expireYear, firstDigits, giftCardCaption, giftCardId, giftCardName, group, id, installments, lastDigits, paymentSystem, paymentSystemName, redemptionCode, referenceValue, tid, url, value) { 
        obj['cardHolder'] = cardHolder;
        obj['cardNumber'] = cardNumber;
        obj['connectorResponses'] = connectorResponses;
        obj['cvv2'] = cvv2;
        obj['dueDate'] = dueDate;
        obj['expireMonth'] = expireMonth;
        obj['expireYear'] = expireYear;
        obj['firstDigits'] = firstDigits;
        obj['giftCardCaption'] = giftCardCaption;
        obj['giftCardId'] = giftCardId;
        obj['giftCardName'] = giftCardName;
        obj['group'] = group;
        obj['id'] = id;
        obj['installments'] = installments;
        obj['lastDigits'] = lastDigits;
        obj['paymentSystem'] = paymentSystem;
        obj['paymentSystemName'] = paymentSystemName;
        obj['redemptionCode'] = redemptionCode;
        obj['referenceValue'] = referenceValue;
        obj['tid'] = tid;
        obj['url'] = url;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Payment1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Payment1} obj Optional instance to populate.
     * @return {module:model/Payment1} The populated <code>Payment1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Payment1();

            if (data.hasOwnProperty('cardHolder')) {
                obj['cardHolder'] = ApiClient.convertToType(data['cardHolder'], 'String');
            }
            if (data.hasOwnProperty('cardNumber')) {
                obj['cardNumber'] = ApiClient.convertToType(data['cardNumber'], 'String');
            }
            if (data.hasOwnProperty('connectorResponses')) {
                obj['connectorResponses'] = ConnectorResponses.constructFromObject(data['connectorResponses']);
            }
            if (data.hasOwnProperty('cvv2')) {
                obj['cvv2'] = ApiClient.convertToType(data['cvv2'], 'String');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'String');
            }
            if (data.hasOwnProperty('expireMonth')) {
                obj['expireMonth'] = ApiClient.convertToType(data['expireMonth'], 'String');
            }
            if (data.hasOwnProperty('expireYear')) {
                obj['expireYear'] = ApiClient.convertToType(data['expireYear'], 'String');
            }
            if (data.hasOwnProperty('firstDigits')) {
                obj['firstDigits'] = ApiClient.convertToType(data['firstDigits'], 'String');
            }
            if (data.hasOwnProperty('giftCardCaption')) {
                obj['giftCardCaption'] = ApiClient.convertToType(data['giftCardCaption'], 'String');
            }
            if (data.hasOwnProperty('giftCardId')) {
                obj['giftCardId'] = ApiClient.convertToType(data['giftCardId'], 'String');
            }
            if (data.hasOwnProperty('giftCardName')) {
                obj['giftCardName'] = ApiClient.convertToType(data['giftCardName'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('installments')) {
                obj['installments'] = ApiClient.convertToType(data['installments'], 'Number');
            }
            if (data.hasOwnProperty('lastDigits')) {
                obj['lastDigits'] = ApiClient.convertToType(data['lastDigits'], 'String');
            }
            if (data.hasOwnProperty('paymentSystem')) {
                obj['paymentSystem'] = ApiClient.convertToType(data['paymentSystem'], 'String');
            }
            if (data.hasOwnProperty('paymentSystemName')) {
                obj['paymentSystemName'] = ApiClient.convertToType(data['paymentSystemName'], 'String');
            }
            if (data.hasOwnProperty('redemptionCode')) {
                obj['redemptionCode'] = ApiClient.convertToType(data['redemptionCode'], 'String');
            }
            if (data.hasOwnProperty('referenceValue')) {
                obj['referenceValue'] = ApiClient.convertToType(data['referenceValue'], 'Number');
            }
            if (data.hasOwnProperty('tid')) {
                obj['tid'] = ApiClient.convertToType(data['tid'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Payment1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Payment1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Payment1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cardHolder'] && !(typeof data['cardHolder'] === 'string' || data['cardHolder'] instanceof String)) {
            throw new Error("Expected the field `cardHolder` to be a primitive type in the JSON string but got " + data['cardHolder']);
        }
        // ensure the json data is a string
        if (data['cardNumber'] && !(typeof data['cardNumber'] === 'string' || data['cardNumber'] instanceof String)) {
            throw new Error("Expected the field `cardNumber` to be a primitive type in the JSON string but got " + data['cardNumber']);
        }
        // validate the optional field `connectorResponses`
        if (data['connectorResponses']) { // data not null
          ConnectorResponses.validateJSON(data['connectorResponses']);
        }
        // ensure the json data is a string
        if (data['cvv2'] && !(typeof data['cvv2'] === 'string' || data['cvv2'] instanceof String)) {
            throw new Error("Expected the field `cvv2` to be a primitive type in the JSON string but got " + data['cvv2']);
        }
        // ensure the json data is a string
        if (data['dueDate'] && !(typeof data['dueDate'] === 'string' || data['dueDate'] instanceof String)) {
            throw new Error("Expected the field `dueDate` to be a primitive type in the JSON string but got " + data['dueDate']);
        }
        // ensure the json data is a string
        if (data['expireMonth'] && !(typeof data['expireMonth'] === 'string' || data['expireMonth'] instanceof String)) {
            throw new Error("Expected the field `expireMonth` to be a primitive type in the JSON string but got " + data['expireMonth']);
        }
        // ensure the json data is a string
        if (data['expireYear'] && !(typeof data['expireYear'] === 'string' || data['expireYear'] instanceof String)) {
            throw new Error("Expected the field `expireYear` to be a primitive type in the JSON string but got " + data['expireYear']);
        }
        // ensure the json data is a string
        if (data['firstDigits'] && !(typeof data['firstDigits'] === 'string' || data['firstDigits'] instanceof String)) {
            throw new Error("Expected the field `firstDigits` to be a primitive type in the JSON string but got " + data['firstDigits']);
        }
        // ensure the json data is a string
        if (data['giftCardCaption'] && !(typeof data['giftCardCaption'] === 'string' || data['giftCardCaption'] instanceof String)) {
            throw new Error("Expected the field `giftCardCaption` to be a primitive type in the JSON string but got " + data['giftCardCaption']);
        }
        // ensure the json data is a string
        if (data['giftCardId'] && !(typeof data['giftCardId'] === 'string' || data['giftCardId'] instanceof String)) {
            throw new Error("Expected the field `giftCardId` to be a primitive type in the JSON string but got " + data['giftCardId']);
        }
        // ensure the json data is a string
        if (data['giftCardName'] && !(typeof data['giftCardName'] === 'string' || data['giftCardName'] instanceof String)) {
            throw new Error("Expected the field `giftCardName` to be a primitive type in the JSON string but got " + data['giftCardName']);
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastDigits'] && !(typeof data['lastDigits'] === 'string' || data['lastDigits'] instanceof String)) {
            throw new Error("Expected the field `lastDigits` to be a primitive type in the JSON string but got " + data['lastDigits']);
        }
        // ensure the json data is a string
        if (data['paymentSystem'] && !(typeof data['paymentSystem'] === 'string' || data['paymentSystem'] instanceof String)) {
            throw new Error("Expected the field `paymentSystem` to be a primitive type in the JSON string but got " + data['paymentSystem']);
        }
        // ensure the json data is a string
        if (data['paymentSystemName'] && !(typeof data['paymentSystemName'] === 'string' || data['paymentSystemName'] instanceof String)) {
            throw new Error("Expected the field `paymentSystemName` to be a primitive type in the JSON string but got " + data['paymentSystemName']);
        }
        // ensure the json data is a string
        if (data['redemptionCode'] && !(typeof data['redemptionCode'] === 'string' || data['redemptionCode'] instanceof String)) {
            throw new Error("Expected the field `redemptionCode` to be a primitive type in the JSON string but got " + data['redemptionCode']);
        }
        // ensure the json data is a string
        if (data['tid'] && !(typeof data['tid'] === 'string' || data['tid'] instanceof String)) {
            throw new Error("Expected the field `tid` to be a primitive type in the JSON string but got " + data['tid']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Payment1.RequiredProperties = ["cardHolder", "cardNumber", "connectorResponses", "cvv2", "dueDate", "expireMonth", "expireYear", "firstDigits", "giftCardCaption", "giftCardId", "giftCardName", "group", "id", "installments", "lastDigits", "paymentSystem", "paymentSystemName", "redemptionCode", "referenceValue", "tid", "url", "value"];

/**
 * Payment card holder.
 * @member {String} cardHolder
 */
Payment1.prototype['cardHolder'] = undefined;

/**
 * Payment card number.
 * @member {String} cardNumber
 */
Payment1.prototype['cardNumber'] = undefined;

/**
 * @member {module:model/ConnectorResponses} connectorResponses
 */
Payment1.prototype['connectorResponses'] = undefined;

/**
 * Card Verification Value (CVV2) is a security code used by payment processors to reduce fraudulent credit and debit card transactions.
 * @member {String} cvv2
 */
Payment1.prototype['cvv2'] = undefined;

/**
 * Payment due date.
 * @member {String} dueDate
 */
Payment1.prototype['dueDate'] = undefined;

/**
 * Payment card expire month.
 * @member {String} expireMonth
 */
Payment1.prototype['expireMonth'] = undefined;

/**
 * Payment card expire year.
 * @member {String} expireYear
 */
Payment1.prototype['expireYear'] = undefined;

/**
 * Payment card first digits.
 * @member {String} firstDigits
 */
Payment1.prototype['firstDigits'] = undefined;

/**
 * Gift Card caption.
 * @member {String} giftCardCaption
 */
Payment1.prototype['giftCardCaption'] = undefined;

/**
 * Gift Card ID.
 * @member {String} giftCardId
 */
Payment1.prototype['giftCardId'] = undefined;

/**
 * Gift Card name.
 * @member {String} giftCardName
 */
Payment1.prototype['giftCardName'] = undefined;

/**
 * It represents the payment method. For each method, it can have the following values:    - **Credit card:** `creditCard`     - **Debid card:** `debitCard`    - **Bank invoice:** `bankInvoice`    - **Promissory:** `promissory`     - **Gift card:** `giftCard`    - **Pix:** `instantPayment`
 * @member {String} group
 */
Payment1.prototype['group'] = undefined;

/**
 * Payment ID.
 * @member {String} id
 */
Payment1.prototype['id'] = undefined;

/**
 * Payment Installments quantity.
 * @member {Number} installments
 */
Payment1.prototype['installments'] = undefined;

/**
 * Payment card last digits.
 * @member {String} lastDigits
 */
Payment1.prototype['lastDigits'] = undefined;

/**
 * Payment system ID.
 * @member {String} paymentSystem
 */
Payment1.prototype['paymentSystem'] = undefined;

/**
 * Payment system name.
 * @member {String} paymentSystemName
 */
Payment1.prototype['paymentSystemName'] = undefined;

/**
 * Code for the customer to use the Gift Card.
 * @member {String} redemptionCode
 */
Payment1.prototype['redemptionCode'] = undefined;

/**
 * Payment reference Value.
 * @member {Number} referenceValue
 */
Payment1.prototype['referenceValue'] = undefined;

/**
 * Payment transaction ID.
 * @member {String} tid
 */
Payment1.prototype['tid'] = undefined;

/**
 * Payment URL.
 * @member {String} url
 */
Payment1.prototype['url'] = undefined;

/**
 * Payment value.
 * @member {Number} value
 */
Payment1.prototype['value'] = undefined;






export default Payment1;

