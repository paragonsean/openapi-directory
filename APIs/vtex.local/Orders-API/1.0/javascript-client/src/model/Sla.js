/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PickupStoreInfo from './PickupStoreInfo';

/**
 * The Sla model module.
 * @module model/Sla
 * @version 1.0
 */
class Sla {
    /**
     * Constructs a new <code>Sla</code>.
     * @alias module:model/Sla
     * @param deliveryChannel {String} If the delivery channel is `delivery` or `pickup-in-point`.
     * @param deliveryWindow {String} [Scheduled delivery window](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, if it applies to the item.
     * @param id {String} ID of the shipping method used in the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).
     * @param lockTTL {String} Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time of the SLA.
     * @param name {String} Name of the shipping policy.
     * @param pickupDistance {Number} Distance in kilometers between the pickup point and the customer's address. The distance is measured as a straight line.
     * @param pickupPointId {String} [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) ID related to the SLA.
     * @param pickupStoreInfo {module:model/PickupStoreInfo} 
     * @param polygonName {String} Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.
     * @param price {Number} Shipping price for the item in cents. Does not account for the whole order's shipping price.
     * @param shippingEstimate {String} Total shipping estimate time in days. For instance, three business days is represented `3bd`.
     * @param transitTime {String} Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented `3bd`.
     */
    constructor(deliveryChannel, deliveryWindow, id, lockTTL, name, pickupDistance, pickupPointId, pickupStoreInfo, polygonName, price, shippingEstimate, transitTime) { 
        
        Sla.initialize(this, deliveryChannel, deliveryWindow, id, lockTTL, name, pickupDistance, pickupPointId, pickupStoreInfo, polygonName, price, shippingEstimate, transitTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deliveryChannel, deliveryWindow, id, lockTTL, name, pickupDistance, pickupPointId, pickupStoreInfo, polygonName, price, shippingEstimate, transitTime) { 
        obj['deliveryChannel'] = deliveryChannel;
        obj['deliveryWindow'] = deliveryWindow;
        obj['id'] = id;
        obj['lockTTL'] = lockTTL;
        obj['name'] = name;
        obj['pickupDistance'] = pickupDistance;
        obj['pickupPointId'] = pickupPointId;
        obj['pickupStoreInfo'] = pickupStoreInfo;
        obj['polygonName'] = polygonName;
        obj['price'] = price;
        obj['shippingEstimate'] = shippingEstimate;
        obj['transitTime'] = transitTime;
    }

    /**
     * Constructs a <code>Sla</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sla} obj Optional instance to populate.
     * @return {module:model/Sla} The populated <code>Sla</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sla();

            if (data.hasOwnProperty('deliveryChannel')) {
                obj['deliveryChannel'] = ApiClient.convertToType(data['deliveryChannel'], 'String');
            }
            if (data.hasOwnProperty('deliveryWindow')) {
                obj['deliveryWindow'] = ApiClient.convertToType(data['deliveryWindow'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lockTTL')) {
                obj['lockTTL'] = ApiClient.convertToType(data['lockTTL'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pickupDistance')) {
                obj['pickupDistance'] = ApiClient.convertToType(data['pickupDistance'], 'Number');
            }
            if (data.hasOwnProperty('pickupPointId')) {
                obj['pickupPointId'] = ApiClient.convertToType(data['pickupPointId'], 'String');
            }
            if (data.hasOwnProperty('pickupStoreInfo')) {
                obj['pickupStoreInfo'] = PickupStoreInfo.constructFromObject(data['pickupStoreInfo']);
            }
            if (data.hasOwnProperty('polygonName')) {
                obj['polygonName'] = ApiClient.convertToType(data['polygonName'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('shippingEstimate')) {
                obj['shippingEstimate'] = ApiClient.convertToType(data['shippingEstimate'], 'String');
            }
            if (data.hasOwnProperty('transitTime')) {
                obj['transitTime'] = ApiClient.convertToType(data['transitTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sla</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sla</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Sla.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['deliveryChannel'] && !(typeof data['deliveryChannel'] === 'string' || data['deliveryChannel'] instanceof String)) {
            throw new Error("Expected the field `deliveryChannel` to be a primitive type in the JSON string but got " + data['deliveryChannel']);
        }
        // ensure the json data is a string
        if (data['deliveryWindow'] && !(typeof data['deliveryWindow'] === 'string' || data['deliveryWindow'] instanceof String)) {
            throw new Error("Expected the field `deliveryWindow` to be a primitive type in the JSON string but got " + data['deliveryWindow']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lockTTL'] && !(typeof data['lockTTL'] === 'string' || data['lockTTL'] instanceof String)) {
            throw new Error("Expected the field `lockTTL` to be a primitive type in the JSON string but got " + data['lockTTL']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pickupPointId'] && !(typeof data['pickupPointId'] === 'string' || data['pickupPointId'] instanceof String)) {
            throw new Error("Expected the field `pickupPointId` to be a primitive type in the JSON string but got " + data['pickupPointId']);
        }
        // validate the optional field `pickupStoreInfo`
        if (data['pickupStoreInfo']) { // data not null
          PickupStoreInfo.validateJSON(data['pickupStoreInfo']);
        }
        // ensure the json data is a string
        if (data['polygonName'] && !(typeof data['polygonName'] === 'string' || data['polygonName'] instanceof String)) {
            throw new Error("Expected the field `polygonName` to be a primitive type in the JSON string but got " + data['polygonName']);
        }
        // ensure the json data is a string
        if (data['shippingEstimate'] && !(typeof data['shippingEstimate'] === 'string' || data['shippingEstimate'] instanceof String)) {
            throw new Error("Expected the field `shippingEstimate` to be a primitive type in the JSON string but got " + data['shippingEstimate']);
        }
        // ensure the json data is a string
        if (data['transitTime'] && !(typeof data['transitTime'] === 'string' || data['transitTime'] instanceof String)) {
            throw new Error("Expected the field `transitTime` to be a primitive type in the JSON string but got " + data['transitTime']);
        }

        return true;
    }


}

Sla.RequiredProperties = ["deliveryChannel", "deliveryWindow", "id", "lockTTL", "name", "pickupDistance", "pickupPointId", "pickupStoreInfo", "polygonName", "price", "shippingEstimate", "transitTime"];

/**
 * If the delivery channel is `delivery` or `pickup-in-point`.
 * @member {String} deliveryChannel
 */
Sla.prototype['deliveryChannel'] = undefined;

/**
 * [Scheduled delivery window](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, if it applies to the item.
 * @member {String} deliveryWindow
 */
Sla.prototype['deliveryWindow'] = undefined;

/**
 * ID of the shipping method used in the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).
 * @member {String} id
 */
Sla.prototype['id'] = undefined;

/**
 * Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time of the SLA.
 * @member {String} lockTTL
 */
Sla.prototype['lockTTL'] = undefined;

/**
 * Name of the shipping policy.
 * @member {String} name
 */
Sla.prototype['name'] = undefined;

/**
 * Distance in kilometers between the pickup point and the customer's address. The distance is measured as a straight line.
 * @member {Number} pickupDistance
 */
Sla.prototype['pickupDistance'] = undefined;

/**
 * [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) ID related to the SLA.
 * @member {String} pickupPointId
 */
Sla.prototype['pickupPointId'] = undefined;

/**
 * @member {module:model/PickupStoreInfo} pickupStoreInfo
 */
Sla.prototype['pickupStoreInfo'] = undefined;

/**
 * Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.
 * @member {String} polygonName
 */
Sla.prototype['polygonName'] = undefined;

/**
 * Shipping price for the item in cents. Does not account for the whole order's shipping price.
 * @member {Number} price
 */
Sla.prototype['price'] = undefined;

/**
 * Total shipping estimate time in days. For instance, three business days is represented `3bd`.
 * @member {String} shippingEstimate
 */
Sla.prototype['shippingEstimate'] = undefined;

/**
 * Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented `3bd`.
 * @member {String} transitTime
 */
Sla.prototype['transitTime'] = undefined;






export default Sla;

