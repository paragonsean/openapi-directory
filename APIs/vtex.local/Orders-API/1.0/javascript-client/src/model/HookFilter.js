/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HookFilter model module.
 * @module model/HookFilter
 * @version 1.0
 */
class HookFilter {
    /**
     * Constructs a new <code>HookFilter</code>.
     * @alias module:model/HookFilter
     * @param type {String} Determines what orders appear in the hook and how they are filtered. As shown in the examples above, there are two ways:     - `FromWorkflow`: the hook will receive order updates only when there is a change or update in the [order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196). You must send at least one value for the `status` field to determine by which status the orders will be filtered.     - `FromOrders`: the hook will receive order updates when there is a change in the order. In this case, orders can be filtered by any property, according to JSONata expressions passed in the `expression` field. You must send the request with values for the `expression` and `disableSingleFire` fields.
     */
    constructor(type) { 
        
        HookFilter.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['disableSingleFire'] = false;
        obj['type'] = type || 'FromWorkflow';
    }

    /**
     * Constructs a <code>HookFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HookFilter} obj Optional instance to populate.
     * @return {module:model/HookFilter} The populated <code>HookFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HookFilter();

            if (data.hasOwnProperty('disableSingleFire')) {
                obj['disableSingleFire'] = ApiClient.convertToType(data['disableSingleFire'], 'Boolean');
            }
            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HookFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HookFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HookFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['expression'] && !(typeof data['expression'] === 'string' || data['expression'] instanceof String)) {
            throw new Error("Expected the field `expression` to be a primitive type in the JSON string but got " + data['expression']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['status'])) {
            throw new Error("Expected the field `status` to be an array in the JSON data but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

HookFilter.RequiredProperties = ["type"];

/**
 * Sets a limit to how many times a specific order shows on the hook, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the hook only once. Send this field if you want to filter `FromOrders`.
 * @member {Boolean} disableSingleFire
 * @default false
 */
HookFilter.prototype['disableSingleFire'] = false;

/**
 * JSONata query expression that defines what conditions must be met for an order to be included in the hook. This should only be used in case `type` is `FromOrders`.
 * @member {String} expression
 */
HookFilter.prototype['expression'] = undefined;

/**
 * List of order statuses that should be included in the hook. This should only be used in case `type` is `FromWorkflow`.
 * @member {Array.<String>} status
 */
HookFilter.prototype['status'] = undefined;

/**
 * Determines what orders appear in the hook and how they are filtered. As shown in the examples above, there are two ways:     - `FromWorkflow`: the hook will receive order updates only when there is a change or update in the [order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196). You must send at least one value for the `status` field to determine by which status the orders will be filtered.     - `FromOrders`: the hook will receive order updates when there is a change in the order. In this case, orders can be filtered by any property, according to JSONata expressions passed in the `expression` field. You must send the request with values for the `expression` and `disableSingleFire` fields.
 * @member {String} type
 * @default 'FromWorkflow'
 */
HookFilter.prototype['type'] = 'FromWorkflow';






export default HookFilter;

