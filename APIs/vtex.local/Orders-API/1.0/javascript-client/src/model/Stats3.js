/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TotalItems1 from './TotalItems1';
import TotalValue1 from './TotalValue1';

/**
 * The Stats3 model module.
 * @module model/Stats3
 * @version 1.0
 */
class Stats3 {
    /**
     * Constructs a new <code>Stats3</code>.
     * @alias module:model/Stats3
     * @param totalItems {module:model/TotalItems1} 
     * @param totalValue {module:model/TotalValue1} 
     */
    constructor(totalItems, totalValue) { 
        
        Stats3.initialize(this, totalItems, totalValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, totalItems, totalValue) { 
        obj['totalItems'] = totalItems;
        obj['totalValue'] = totalValue;
    }

    /**
     * Constructs a <code>Stats3</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Stats3} obj Optional instance to populate.
     * @return {module:model/Stats3} The populated <code>Stats3</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Stats3();

            if (data.hasOwnProperty('totalItems')) {
                obj['totalItems'] = TotalItems1.constructFromObject(data['totalItems']);
            }
            if (data.hasOwnProperty('totalValue')) {
                obj['totalValue'] = TotalValue1.constructFromObject(data['totalValue']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Stats3</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Stats3</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Stats3.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `totalItems`
        if (data['totalItems']) { // data not null
          TotalItems1.validateJSON(data['totalItems']);
        }
        // validate the optional field `totalValue`
        if (data['totalValue']) { // data not null
          TotalValue1.validateJSON(data['totalValue']);
        }

        return true;
    }


}

Stats3.RequiredProperties = ["totalItems", "totalValue"];

/**
 * @member {module:model/TotalItems1} totalItems
 */
Stats3.prototype['totalItems'] = undefined;

/**
 * @member {module:model/TotalValue1} totalValue
 */
Stats3.prototype['totalValue'] = undefined;






export default Stats3;

