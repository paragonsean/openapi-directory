/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserorderdetailsSubscriptionDataSubscriptionsInnerPlan from './UserorderdetailsSubscriptionDataSubscriptionsInnerPlan';

/**
 * The UserorderdetailsSubscriptionDataSubscriptionsInner model module.
 * @module model/UserorderdetailsSubscriptionDataSubscriptionsInner
 * @version 1.0
 */
class UserorderdetailsSubscriptionDataSubscriptionsInner {
    /**
     * Constructs a new <code>UserorderdetailsSubscriptionDataSubscriptionsInner</code>.
     * @alias module:model/UserorderdetailsSubscriptionDataSubscriptionsInner
     * @param executionCount {Number} Position of the order in the subscription cycle. The first order will have the value `0`, the second will have the value `1`, and so on.
     * @param itemIndex {Number} Each item in the subscriptions' order is identified by an index. The position starts in`0`, followed by `1`, `2`, and so on.
     * @param plan {module:model/UserorderdetailsSubscriptionDataSubscriptionsInnerPlan} 
     * @param priceAtSubscriptionDate {Number} Price of the order when the customer signed up for subscriptions. Subscriptions created from Admin UI or APIs do not have an original order, so the field returns `0.0`. This field was valid only for Subscriptions v2 and is deprecated in Subscriptions v3.
     */
    constructor(executionCount, itemIndex, plan, priceAtSubscriptionDate) { 
        
        UserorderdetailsSubscriptionDataSubscriptionsInner.initialize(this, executionCount, itemIndex, plan, priceAtSubscriptionDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, executionCount, itemIndex, plan, priceAtSubscriptionDate) { 
        obj['ExecutionCount'] = executionCount;
        obj['ItemIndex'] = itemIndex;
        obj['Plan'] = plan;
        obj['PriceAtSubscriptionDate'] = priceAtSubscriptionDate;
    }

    /**
     * Constructs a <code>UserorderdetailsSubscriptionDataSubscriptionsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserorderdetailsSubscriptionDataSubscriptionsInner} obj Optional instance to populate.
     * @return {module:model/UserorderdetailsSubscriptionDataSubscriptionsInner} The populated <code>UserorderdetailsSubscriptionDataSubscriptionsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserorderdetailsSubscriptionDataSubscriptionsInner();

            if (data.hasOwnProperty('ExecutionCount')) {
                obj['ExecutionCount'] = ApiClient.convertToType(data['ExecutionCount'], 'Number');
            }
            if (data.hasOwnProperty('ItemIndex')) {
                obj['ItemIndex'] = ApiClient.convertToType(data['ItemIndex'], 'Number');
            }
            if (data.hasOwnProperty('Plan')) {
                obj['Plan'] = UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.constructFromObject(data['Plan']);
            }
            if (data.hasOwnProperty('PriceAtSubscriptionDate')) {
                obj['PriceAtSubscriptionDate'] = ApiClient.convertToType(data['PriceAtSubscriptionDate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserorderdetailsSubscriptionDataSubscriptionsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserorderdetailsSubscriptionDataSubscriptionsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserorderdetailsSubscriptionDataSubscriptionsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Plan`
        if (data['Plan']) { // data not null
          UserorderdetailsSubscriptionDataSubscriptionsInnerPlan.validateJSON(data['Plan']);
        }

        return true;
    }


}

UserorderdetailsSubscriptionDataSubscriptionsInner.RequiredProperties = ["ExecutionCount", "ItemIndex", "Plan", "PriceAtSubscriptionDate"];

/**
 * Position of the order in the subscription cycle. The first order will have the value `0`, the second will have the value `1`, and so on.
 * @member {Number} ExecutionCount
 */
UserorderdetailsSubscriptionDataSubscriptionsInner.prototype['ExecutionCount'] = undefined;

/**
 * Each item in the subscriptions' order is identified by an index. The position starts in`0`, followed by `1`, `2`, and so on.
 * @member {Number} ItemIndex
 */
UserorderdetailsSubscriptionDataSubscriptionsInner.prototype['ItemIndex'] = undefined;

/**
 * @member {module:model/UserorderdetailsSubscriptionDataSubscriptionsInnerPlan} Plan
 */
UserorderdetailsSubscriptionDataSubscriptionsInner.prototype['Plan'] = undefined;

/**
 * Price of the order when the customer signed up for subscriptions. Subscriptions created from Admin UI or APIs do not have an original order, so the field returns `0.0`. This field was valid only for Subscriptions v2 and is deprecated in Subscriptions v3.
 * @member {Number} PriceAtSubscriptionDate
 */
UserorderdetailsSubscriptionDataSubscriptionsInner.prototype['PriceAtSubscriptionDate'] = undefined;






export default UserorderdetailsSubscriptionDataSubscriptionsInner;

