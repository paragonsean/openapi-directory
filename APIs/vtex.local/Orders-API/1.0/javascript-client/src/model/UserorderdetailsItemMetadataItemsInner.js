/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner from './UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner';

/**
 * The UserorderdetailsItemMetadataItemsInner model module.
 * @module model/UserorderdetailsItemMetadataItemsInner
 * @version 1.0
 */
class UserorderdetailsItemMetadataItemsInner {
    /**
     * Constructs a new <code>UserorderdetailsItemMetadataItemsInner</code>.
     * @alias module:model/UserorderdetailsItemMetadataItemsInner
     * @param assemblyOptions {Array.<module:model/UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner>} Displays information about [assembly options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH) related to the item, if there are any.
     * @param detailUrl {String} URL slug of the item.
     * @param ean {String} EAN of the item.
     * @param id {String} Item's SKU ID, which is a unique numerical identifier.
     * @param imageUrl {String} Item's SKU image URL.
     * @param name {String} Name of the item as displayed to customers in the storefront.
     * @param productId {String} ID of the Product associated with the item.
     * @param refId {String} Item's reference ID.
     * @param seller {String} Seller ID that identifies the seller the item belongs to.
     * @param skuName {String} Name of the SKU corresponding to the item.
     */
    constructor(assemblyOptions, detailUrl, ean, id, imageUrl, name, productId, refId, seller, skuName) { 
        
        UserorderdetailsItemMetadataItemsInner.initialize(this, assemblyOptions, detailUrl, ean, id, imageUrl, name, productId, refId, seller, skuName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assemblyOptions, detailUrl, ean, id, imageUrl, name, productId, refId, seller, skuName) { 
        obj['AssemblyOptions'] = assemblyOptions;
        obj['DetailUrl'] = detailUrl;
        obj['Ean'] = ean;
        obj['Id'] = id;
        obj['ImageUrl'] = imageUrl;
        obj['Name'] = name;
        obj['ProductId'] = productId;
        obj['RefId'] = refId;
        obj['Seller'] = seller;
        obj['SkuName'] = skuName;
    }

    /**
     * Constructs a <code>UserorderdetailsItemMetadataItemsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserorderdetailsItemMetadataItemsInner} obj Optional instance to populate.
     * @return {module:model/UserorderdetailsItemMetadataItemsInner} The populated <code>UserorderdetailsItemMetadataItemsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserorderdetailsItemMetadataItemsInner();

            if (data.hasOwnProperty('AssemblyOptions')) {
                obj['AssemblyOptions'] = ApiClient.convertToType(data['AssemblyOptions'], [UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner]);
            }
            if (data.hasOwnProperty('DetailUrl')) {
                obj['DetailUrl'] = ApiClient.convertToType(data['DetailUrl'], 'String');
            }
            if (data.hasOwnProperty('Ean')) {
                obj['Ean'] = ApiClient.convertToType(data['Ean'], 'String');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('ImageUrl')) {
                obj['ImageUrl'] = ApiClient.convertToType(data['ImageUrl'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ProductId')) {
                obj['ProductId'] = ApiClient.convertToType(data['ProductId'], 'String');
            }
            if (data.hasOwnProperty('RefId')) {
                obj['RefId'] = ApiClient.convertToType(data['RefId'], 'String');
            }
            if (data.hasOwnProperty('Seller')) {
                obj['Seller'] = ApiClient.convertToType(data['Seller'], 'String');
            }
            if (data.hasOwnProperty('SkuName')) {
                obj['SkuName'] = ApiClient.convertToType(data['SkuName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserorderdetailsItemMetadataItemsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserorderdetailsItemMetadataItemsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserorderdetailsItemMetadataItemsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['AssemblyOptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AssemblyOptions'])) {
                throw new Error("Expected the field `AssemblyOptions` to be an array in the JSON data but got " + data['AssemblyOptions']);
            }
            // validate the optional field `AssemblyOptions` (array)
            for (const item of data['AssemblyOptions']) {
                UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['DetailUrl'] && !(typeof data['DetailUrl'] === 'string' || data['DetailUrl'] instanceof String)) {
            throw new Error("Expected the field `DetailUrl` to be a primitive type in the JSON string but got " + data['DetailUrl']);
        }
        // ensure the json data is a string
        if (data['Ean'] && !(typeof data['Ean'] === 'string' || data['Ean'] instanceof String)) {
            throw new Error("Expected the field `Ean` to be a primitive type in the JSON string but got " + data['Ean']);
        }
        // ensure the json data is a string
        if (data['Id'] && !(typeof data['Id'] === 'string' || data['Id'] instanceof String)) {
            throw new Error("Expected the field `Id` to be a primitive type in the JSON string but got " + data['Id']);
        }
        // ensure the json data is a string
        if (data['ImageUrl'] && !(typeof data['ImageUrl'] === 'string' || data['ImageUrl'] instanceof String)) {
            throw new Error("Expected the field `ImageUrl` to be a primitive type in the JSON string but got " + data['ImageUrl']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['ProductId'] && !(typeof data['ProductId'] === 'string' || data['ProductId'] instanceof String)) {
            throw new Error("Expected the field `ProductId` to be a primitive type in the JSON string but got " + data['ProductId']);
        }
        // ensure the json data is a string
        if (data['RefId'] && !(typeof data['RefId'] === 'string' || data['RefId'] instanceof String)) {
            throw new Error("Expected the field `RefId` to be a primitive type in the JSON string but got " + data['RefId']);
        }
        // ensure the json data is a string
        if (data['Seller'] && !(typeof data['Seller'] === 'string' || data['Seller'] instanceof String)) {
            throw new Error("Expected the field `Seller` to be a primitive type in the JSON string but got " + data['Seller']);
        }
        // ensure the json data is a string
        if (data['SkuName'] && !(typeof data['SkuName'] === 'string' || data['SkuName'] instanceof String)) {
            throw new Error("Expected the field `SkuName` to be a primitive type in the JSON string but got " + data['SkuName']);
        }

        return true;
    }


}

UserorderdetailsItemMetadataItemsInner.RequiredProperties = ["AssemblyOptions", "DetailUrl", "Ean", "Id", "ImageUrl", "Name", "ProductId", "RefId", "Seller", "SkuName"];

/**
 * Displays information about [assembly options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH) related to the item, if there are any.
 * @member {Array.<module:model/UserorderdetailsItemMetadataItemsInnerAssemblyOptionsInner>} AssemblyOptions
 */
UserorderdetailsItemMetadataItemsInner.prototype['AssemblyOptions'] = undefined;

/**
 * URL slug of the item.
 * @member {String} DetailUrl
 */
UserorderdetailsItemMetadataItemsInner.prototype['DetailUrl'] = undefined;

/**
 * EAN of the item.
 * @member {String} Ean
 */
UserorderdetailsItemMetadataItemsInner.prototype['Ean'] = undefined;

/**
 * Item's SKU ID, which is a unique numerical identifier.
 * @member {String} Id
 */
UserorderdetailsItemMetadataItemsInner.prototype['Id'] = undefined;

/**
 * Item's SKU image URL.
 * @member {String} ImageUrl
 */
UserorderdetailsItemMetadataItemsInner.prototype['ImageUrl'] = undefined;

/**
 * Name of the item as displayed to customers in the storefront.
 * @member {String} Name
 */
UserorderdetailsItemMetadataItemsInner.prototype['Name'] = undefined;

/**
 * ID of the Product associated with the item.
 * @member {String} ProductId
 */
UserorderdetailsItemMetadataItemsInner.prototype['ProductId'] = undefined;

/**
 * Item's reference ID.
 * @member {String} RefId
 */
UserorderdetailsItemMetadataItemsInner.prototype['RefId'] = undefined;

/**
 * Seller ID that identifies the seller the item belongs to.
 * @member {String} Seller
 */
UserorderdetailsItemMetadataItemsInner.prototype['Seller'] = undefined;

/**
 * Name of the SKU corresponding to the item.
 * @member {String} SkuName
 */
UserorderdetailsItemMetadataItemsInner.prototype['SkuName'] = undefined;






export default UserorderdetailsItemMetadataItemsInner;

