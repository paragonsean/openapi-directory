/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserorderdetailsCancellationData model module.
 * @module model/UserorderdetailsCancellationData
 * @version 1.0
 */
class UserorderdetailsCancellationData {
    /**
     * Constructs a new <code>UserorderdetailsCancellationData</code>.
     * Information about order cancellation, when it applies.
     * @alias module:model/UserorderdetailsCancellationData
     * @param cancellationDate {String} The date when the order was cancelled.
     * @param reason {String} The reason why the order was cancelled.
     * @param requestedByPaymentNotification {Boolean} If the order cancellation was requested by the payment gateway (`true`) or not (`false`).
     * @param requestedBySellerNotification {Boolean} If the order cancellation was requested by the seller (`true`) or not (`false`).
     * @param requestedBySystem {Boolean} If the order cancellation was made by the system (`true`) or not (`false`). This type of order cancellation happens in [incomplete orders](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294), for example.
     * @param requestedByUser {Boolean} If the order cancellation was requested by the costumer (`true`) or not (`false`).
     */
    constructor(cancellationDate, reason, requestedByPaymentNotification, requestedBySellerNotification, requestedBySystem, requestedByUser) { 
        
        UserorderdetailsCancellationData.initialize(this, cancellationDate, reason, requestedByPaymentNotification, requestedBySellerNotification, requestedBySystem, requestedByUser);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cancellationDate, reason, requestedByPaymentNotification, requestedBySellerNotification, requestedBySystem, requestedByUser) { 
        obj['CancellationDate'] = cancellationDate;
        obj['Reason'] = reason;
        obj['RequestedByPaymentNotification'] = requestedByPaymentNotification;
        obj['RequestedBySellerNotification'] = requestedBySellerNotification;
        obj['RequestedBySystem'] = requestedBySystem;
        obj['RequestedByUser'] = requestedByUser;
    }

    /**
     * Constructs a <code>UserorderdetailsCancellationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserorderdetailsCancellationData} obj Optional instance to populate.
     * @return {module:model/UserorderdetailsCancellationData} The populated <code>UserorderdetailsCancellationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserorderdetailsCancellationData();

            if (data.hasOwnProperty('CancellationDate')) {
                obj['CancellationDate'] = ApiClient.convertToType(data['CancellationDate'], 'String');
            }
            if (data.hasOwnProperty('Reason')) {
                obj['Reason'] = ApiClient.convertToType(data['Reason'], 'String');
            }
            if (data.hasOwnProperty('RequestedByPaymentNotification')) {
                obj['RequestedByPaymentNotification'] = ApiClient.convertToType(data['RequestedByPaymentNotification'], 'Boolean');
            }
            if (data.hasOwnProperty('RequestedBySellerNotification')) {
                obj['RequestedBySellerNotification'] = ApiClient.convertToType(data['RequestedBySellerNotification'], 'Boolean');
            }
            if (data.hasOwnProperty('RequestedBySystem')) {
                obj['RequestedBySystem'] = ApiClient.convertToType(data['RequestedBySystem'], 'Boolean');
            }
            if (data.hasOwnProperty('RequestedByUser')) {
                obj['RequestedByUser'] = ApiClient.convertToType(data['RequestedByUser'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserorderdetailsCancellationData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserorderdetailsCancellationData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserorderdetailsCancellationData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CancellationDate'] && !(typeof data['CancellationDate'] === 'string' || data['CancellationDate'] instanceof String)) {
            throw new Error("Expected the field `CancellationDate` to be a primitive type in the JSON string but got " + data['CancellationDate']);
        }
        // ensure the json data is a string
        if (data['Reason'] && !(typeof data['Reason'] === 'string' || data['Reason'] instanceof String)) {
            throw new Error("Expected the field `Reason` to be a primitive type in the JSON string but got " + data['Reason']);
        }

        return true;
    }


}

UserorderdetailsCancellationData.RequiredProperties = ["CancellationDate", "Reason", "RequestedByPaymentNotification", "RequestedBySellerNotification", "RequestedBySystem", "RequestedByUser"];

/**
 * The date when the order was cancelled.
 * @member {String} CancellationDate
 */
UserorderdetailsCancellationData.prototype['CancellationDate'] = undefined;

/**
 * The reason why the order was cancelled.
 * @member {String} Reason
 */
UserorderdetailsCancellationData.prototype['Reason'] = undefined;

/**
 * If the order cancellation was requested by the payment gateway (`true`) or not (`false`).
 * @member {Boolean} RequestedByPaymentNotification
 */
UserorderdetailsCancellationData.prototype['RequestedByPaymentNotification'] = undefined;

/**
 * If the order cancellation was requested by the seller (`true`) or not (`false`).
 * @member {Boolean} RequestedBySellerNotification
 */
UserorderdetailsCancellationData.prototype['RequestedBySellerNotification'] = undefined;

/**
 * If the order cancellation was made by the system (`true`) or not (`false`). This type of order cancellation happens in [incomplete orders](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294), for example.
 * @member {Boolean} RequestedBySystem
 */
UserorderdetailsCancellationData.prototype['RequestedBySystem'] = undefined;

/**
 * If the order cancellation was requested by the costumer (`true`) or not (`false`).
 * @member {Boolean} RequestedByUser
 */
UserorderdetailsCancellationData.prototype['RequestedByUser'] = undefined;






export default UserorderdetailsCancellationData;

