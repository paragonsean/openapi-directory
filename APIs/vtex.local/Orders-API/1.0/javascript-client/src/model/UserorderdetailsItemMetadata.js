/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserorderdetailsItemMetadataItemsInner from './UserorderdetailsItemMetadataItemsInner';

/**
 * The UserorderdetailsItemMetadata model module.
 * @module model/UserorderdetailsItemMetadata
 * @version 1.0
 */
class UserorderdetailsItemMetadata {
    /**
     * Constructs a new <code>UserorderdetailsItemMetadata</code>.
     * Metadata information about the order&#39;s items.
     * @alias module:model/UserorderdetailsItemMetadata
     * @param items {Array.<module:model/UserorderdetailsItemMetadataItemsInner>} Metadata items.
     */
    constructor(items) { 
        
        UserorderdetailsItemMetadata.initialize(this, items);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, items) { 
        obj['Items'] = items;
    }

    /**
     * Constructs a <code>UserorderdetailsItemMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserorderdetailsItemMetadata} obj Optional instance to populate.
     * @return {module:model/UserorderdetailsItemMetadata} The populated <code>UserorderdetailsItemMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserorderdetailsItemMetadata();

            if (data.hasOwnProperty('Items')) {
                obj['Items'] = ApiClient.convertToType(data['Items'], [UserorderdetailsItemMetadataItemsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserorderdetailsItemMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserorderdetailsItemMetadata</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserorderdetailsItemMetadata.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Items'])) {
                throw new Error("Expected the field `Items` to be an array in the JSON data but got " + data['Items']);
            }
            // validate the optional field `Items` (array)
            for (const item of data['Items']) {
                UserorderdetailsItemMetadataItemsInner.validateJSON(item);
            };
        }

        return true;
    }


}

UserorderdetailsItemMetadata.RequiredProperties = ["Items"];

/**
 * Metadata items.
 * @member {Array.<module:model/UserorderdetailsItemMetadataItemsInner>} Items
 */
UserorderdetailsItemMetadata.prototype['Items'] = undefined;






export default UserorderdetailsItemMetadata;

