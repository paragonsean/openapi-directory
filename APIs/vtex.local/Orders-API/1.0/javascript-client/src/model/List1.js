/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Item2 from './Item2';

/**
 * The List1 model module.
 * @module model/List1
 * @version 1.0
 */
class List1 {
    /**
     * Constructs a new <code>List1</code>.
     * @alias module:model/List1
     * @param shippingEstimatedDate {String} Estimate shipping date.
     * @param shippingEstimatedDateMax {String} The most extended shipping estimation possible.
     * @param shippingEstimatedDateMin {String} The least extended shipping estimation possible.
     * @param affiliateId {String} Corresponds to the three-digits [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) identification code of the seller responsible for the order.
     * @param authorizedDate {String} Authorized order date.
     * @param callCenterOperatorName {String} Call center operator responsible for the order.
     * @param clientName {String} Order's customer name.
     * @param creationDate {String} Order's creation date.
     * @param currencyCode {String} Currency code in ISO 4217. For example, `BRL`.
     * @param items {Array.<module:model/Item2>} Information about order's items
     * @param lastMessageUnread {String} Last sent transactional message.
     * @param listId {String} Related Gift List ID.
     * @param listType {String} Related Gift list type.
     * @param marketPlaceOrderId {String} Marketplace order ID.
     * @param orderId {String} Order ID is a unique code that identifies an order.
     * @param orderIsComplete {Boolean} If it is a completed order (`true`) or not (`false`). For more information, see [Order flow and status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
     * @param origin {String} Order Origin, if `Marketplace` or `Fulfillment`.
     * @param paymentNames {String} Payment system name.
     * @param salesChannel {String} Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order.
     * @param sequence {String} Six-digit string that follows the order ID. For example, in order `1268540501456-01 (501456)`, the sequence is `501456`.
     * @param status {String} Order [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
     * @param statusDescription {String} Status description which is displayed on the Admin panel. This field is deprecated and may not return any value.
     * @param totalItems {Number} Order's total amount of items.
     * @param totalValue {Number} Total value amount.
     * @param workflowInErrorState {Boolean} If there is a work flow error (`true`) or not (`false`).
     * @param workflowInRetry {Boolean} If the order is in a work flow retry (`true`) or not (`false`).
     */
    constructor(shippingEstimatedDate, shippingEstimatedDateMax, shippingEstimatedDateMin, affiliateId, authorizedDate, callCenterOperatorName, clientName, creationDate, currencyCode, items, lastMessageUnread, listId, listType, marketPlaceOrderId, orderId, orderIsComplete, origin, paymentNames, salesChannel, sequence, status, statusDescription, totalItems, totalValue, workflowInErrorState, workflowInRetry) { 
        
        List1.initialize(this, shippingEstimatedDate, shippingEstimatedDateMax, shippingEstimatedDateMin, affiliateId, authorizedDate, callCenterOperatorName, clientName, creationDate, currencyCode, items, lastMessageUnread, listId, listType, marketPlaceOrderId, orderId, orderIsComplete, origin, paymentNames, salesChannel, sequence, status, statusDescription, totalItems, totalValue, workflowInErrorState, workflowInRetry);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, shippingEstimatedDate, shippingEstimatedDateMax, shippingEstimatedDateMin, affiliateId, authorizedDate, callCenterOperatorName, clientName, creationDate, currencyCode, items, lastMessageUnread, listId, listType, marketPlaceOrderId, orderId, orderIsComplete, origin, paymentNames, salesChannel, sequence, status, statusDescription, totalItems, totalValue, workflowInErrorState, workflowInRetry) { 
        obj['ShippingEstimatedDate'] = shippingEstimatedDate;
        obj['ShippingEstimatedDateMax'] = shippingEstimatedDateMax;
        obj['ShippingEstimatedDateMin'] = shippingEstimatedDateMin;
        obj['affiliateId'] = affiliateId;
        obj['authorizedDate'] = authorizedDate;
        obj['callCenterOperatorName'] = callCenterOperatorName;
        obj['clientName'] = clientName;
        obj['creationDate'] = creationDate;
        obj['currencyCode'] = currencyCode;
        obj['items'] = items;
        obj['lastMessageUnread'] = lastMessageUnread;
        obj['listId'] = listId;
        obj['listType'] = listType;
        obj['marketPlaceOrderId'] = marketPlaceOrderId;
        obj['orderId'] = orderId;
        obj['orderIsComplete'] = orderIsComplete;
        obj['origin'] = origin;
        obj['paymentNames'] = paymentNames;
        obj['salesChannel'] = salesChannel;
        obj['sequence'] = sequence;
        obj['status'] = status;
        obj['statusDescription'] = statusDescription;
        obj['totalItems'] = totalItems;
        obj['totalValue'] = totalValue;
        obj['workflowInErrorState'] = workflowInErrorState;
        obj['workflowInRetry'] = workflowInRetry;
    }

    /**
     * Constructs a <code>List1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/List1} obj Optional instance to populate.
     * @return {module:model/List1} The populated <code>List1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new List1();

            if (data.hasOwnProperty('ShippingEstimatedDate')) {
                obj['ShippingEstimatedDate'] = ApiClient.convertToType(data['ShippingEstimatedDate'], 'String');
            }
            if (data.hasOwnProperty('ShippingEstimatedDateMax')) {
                obj['ShippingEstimatedDateMax'] = ApiClient.convertToType(data['ShippingEstimatedDateMax'], 'String');
            }
            if (data.hasOwnProperty('ShippingEstimatedDateMin')) {
                obj['ShippingEstimatedDateMin'] = ApiClient.convertToType(data['ShippingEstimatedDateMin'], 'String');
            }
            if (data.hasOwnProperty('affiliateId')) {
                obj['affiliateId'] = ApiClient.convertToType(data['affiliateId'], 'String');
            }
            if (data.hasOwnProperty('authorizedDate')) {
                obj['authorizedDate'] = ApiClient.convertToType(data['authorizedDate'], 'String');
            }
            if (data.hasOwnProperty('callCenterOperatorName')) {
                obj['callCenterOperatorName'] = ApiClient.convertToType(data['callCenterOperatorName'], 'String');
            }
            if (data.hasOwnProperty('clientName')) {
                obj['clientName'] = ApiClient.convertToType(data['clientName'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Item2]);
            }
            if (data.hasOwnProperty('lastMessageUnread')) {
                obj['lastMessageUnread'] = ApiClient.convertToType(data['lastMessageUnread'], 'String');
            }
            if (data.hasOwnProperty('listId')) {
                obj['listId'] = ApiClient.convertToType(data['listId'], 'String');
            }
            if (data.hasOwnProperty('listType')) {
                obj['listType'] = ApiClient.convertToType(data['listType'], 'String');
            }
            if (data.hasOwnProperty('marketPlaceOrderId')) {
                obj['marketPlaceOrderId'] = ApiClient.convertToType(data['marketPlaceOrderId'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('orderIsComplete')) {
                obj['orderIsComplete'] = ApiClient.convertToType(data['orderIsComplete'], 'Boolean');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('paymentNames')) {
                obj['paymentNames'] = ApiClient.convertToType(data['paymentNames'], 'String');
            }
            if (data.hasOwnProperty('salesChannel')) {
                obj['salesChannel'] = ApiClient.convertToType(data['salesChannel'], 'String');
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusDescription')) {
                obj['statusDescription'] = ApiClient.convertToType(data['statusDescription'], 'String');
            }
            if (data.hasOwnProperty('totalItems')) {
                obj['totalItems'] = ApiClient.convertToType(data['totalItems'], 'Number');
            }
            if (data.hasOwnProperty('totalValue')) {
                obj['totalValue'] = ApiClient.convertToType(data['totalValue'], 'Number');
            }
            if (data.hasOwnProperty('workflowInErrorState')) {
                obj['workflowInErrorState'] = ApiClient.convertToType(data['workflowInErrorState'], 'Boolean');
            }
            if (data.hasOwnProperty('workflowInRetry')) {
                obj['workflowInRetry'] = ApiClient.convertToType(data['workflowInRetry'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>List1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>List1</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of List1.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ShippingEstimatedDate'] && !(typeof data['ShippingEstimatedDate'] === 'string' || data['ShippingEstimatedDate'] instanceof String)) {
            throw new Error("Expected the field `ShippingEstimatedDate` to be a primitive type in the JSON string but got " + data['ShippingEstimatedDate']);
        }
        // ensure the json data is a string
        if (data['ShippingEstimatedDateMax'] && !(typeof data['ShippingEstimatedDateMax'] === 'string' || data['ShippingEstimatedDateMax'] instanceof String)) {
            throw new Error("Expected the field `ShippingEstimatedDateMax` to be a primitive type in the JSON string but got " + data['ShippingEstimatedDateMax']);
        }
        // ensure the json data is a string
        if (data['ShippingEstimatedDateMin'] && !(typeof data['ShippingEstimatedDateMin'] === 'string' || data['ShippingEstimatedDateMin'] instanceof String)) {
            throw new Error("Expected the field `ShippingEstimatedDateMin` to be a primitive type in the JSON string but got " + data['ShippingEstimatedDateMin']);
        }
        // ensure the json data is a string
        if (data['affiliateId'] && !(typeof data['affiliateId'] === 'string' || data['affiliateId'] instanceof String)) {
            throw new Error("Expected the field `affiliateId` to be a primitive type in the JSON string but got " + data['affiliateId']);
        }
        // ensure the json data is a string
        if (data['authorizedDate'] && !(typeof data['authorizedDate'] === 'string' || data['authorizedDate'] instanceof String)) {
            throw new Error("Expected the field `authorizedDate` to be a primitive type in the JSON string but got " + data['authorizedDate']);
        }
        // ensure the json data is a string
        if (data['callCenterOperatorName'] && !(typeof data['callCenterOperatorName'] === 'string' || data['callCenterOperatorName'] instanceof String)) {
            throw new Error("Expected the field `callCenterOperatorName` to be a primitive type in the JSON string but got " + data['callCenterOperatorName']);
        }
        // ensure the json data is a string
        if (data['clientName'] && !(typeof data['clientName'] === 'string' || data['clientName'] instanceof String)) {
            throw new Error("Expected the field `clientName` to be a primitive type in the JSON string but got " + data['clientName']);
        }
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Item2.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lastMessageUnread'] && !(typeof data['lastMessageUnread'] === 'string' || data['lastMessageUnread'] instanceof String)) {
            throw new Error("Expected the field `lastMessageUnread` to be a primitive type in the JSON string but got " + data['lastMessageUnread']);
        }
        // ensure the json data is a string
        if (data['listId'] && !(typeof data['listId'] === 'string' || data['listId'] instanceof String)) {
            throw new Error("Expected the field `listId` to be a primitive type in the JSON string but got " + data['listId']);
        }
        // ensure the json data is a string
        if (data['listType'] && !(typeof data['listType'] === 'string' || data['listType'] instanceof String)) {
            throw new Error("Expected the field `listType` to be a primitive type in the JSON string but got " + data['listType']);
        }
        // ensure the json data is a string
        if (data['marketPlaceOrderId'] && !(typeof data['marketPlaceOrderId'] === 'string' || data['marketPlaceOrderId'] instanceof String)) {
            throw new Error("Expected the field `marketPlaceOrderId` to be a primitive type in the JSON string but got " + data['marketPlaceOrderId']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        // ensure the json data is a string
        if (data['paymentNames'] && !(typeof data['paymentNames'] === 'string' || data['paymentNames'] instanceof String)) {
            throw new Error("Expected the field `paymentNames` to be a primitive type in the JSON string but got " + data['paymentNames']);
        }
        // ensure the json data is a string
        if (data['salesChannel'] && !(typeof data['salesChannel'] === 'string' || data['salesChannel'] instanceof String)) {
            throw new Error("Expected the field `salesChannel` to be a primitive type in the JSON string but got " + data['salesChannel']);
        }
        // ensure the json data is a string
        if (data['sequence'] && !(typeof data['sequence'] === 'string' || data['sequence'] instanceof String)) {
            throw new Error("Expected the field `sequence` to be a primitive type in the JSON string but got " + data['sequence']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['statusDescription'] && !(typeof data['statusDescription'] === 'string' || data['statusDescription'] instanceof String)) {
            throw new Error("Expected the field `statusDescription` to be a primitive type in the JSON string but got " + data['statusDescription']);
        }

        return true;
    }


}

List1.RequiredProperties = ["ShippingEstimatedDate", "ShippingEstimatedDateMax", "ShippingEstimatedDateMin", "affiliateId", "authorizedDate", "callCenterOperatorName", "clientName", "creationDate", "currencyCode", "items", "lastMessageUnread", "listId", "listType", "marketPlaceOrderId", "orderId", "orderIsComplete", "origin", "paymentNames", "salesChannel", "sequence", "status", "statusDescription", "totalItems", "totalValue", "workflowInErrorState", "workflowInRetry"];

/**
 * Estimate shipping date.
 * @member {String} ShippingEstimatedDate
 */
List1.prototype['ShippingEstimatedDate'] = undefined;

/**
 * The most extended shipping estimation possible.
 * @member {String} ShippingEstimatedDateMax
 */
List1.prototype['ShippingEstimatedDateMax'] = undefined;

/**
 * The least extended shipping estimation possible.
 * @member {String} ShippingEstimatedDateMin
 */
List1.prototype['ShippingEstimatedDateMin'] = undefined;

/**
 * Corresponds to the three-digits [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) identification code of the seller responsible for the order.
 * @member {String} affiliateId
 */
List1.prototype['affiliateId'] = undefined;

/**
 * Authorized order date.
 * @member {String} authorizedDate
 */
List1.prototype['authorizedDate'] = undefined;

/**
 * Call center operator responsible for the order.
 * @member {String} callCenterOperatorName
 */
List1.prototype['callCenterOperatorName'] = undefined;

/**
 * Order's customer name.
 * @member {String} clientName
 */
List1.prototype['clientName'] = undefined;

/**
 * Order's creation date.
 * @member {String} creationDate
 */
List1.prototype['creationDate'] = undefined;

/**
 * Currency code in ISO 4217. For example, `BRL`.
 * @member {String} currencyCode
 */
List1.prototype['currencyCode'] = undefined;

/**
 * Information about order's items
 * @member {Array.<module:model/Item2>} items
 */
List1.prototype['items'] = undefined;

/**
 * Last sent transactional message.
 * @member {String} lastMessageUnread
 */
List1.prototype['lastMessageUnread'] = undefined;

/**
 * Related Gift List ID.
 * @member {String} listId
 */
List1.prototype['listId'] = undefined;

/**
 * Related Gift list type.
 * @member {String} listType
 */
List1.prototype['listType'] = undefined;

/**
 * Marketplace order ID.
 * @member {String} marketPlaceOrderId
 */
List1.prototype['marketPlaceOrderId'] = undefined;

/**
 * Order ID is a unique code that identifies an order.
 * @member {String} orderId
 */
List1.prototype['orderId'] = undefined;

/**
 * If it is a completed order (`true`) or not (`false`). For more information, see [Order flow and status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
 * @member {Boolean} orderIsComplete
 */
List1.prototype['orderIsComplete'] = undefined;

/**
 * Order Origin, if `Marketplace` or `Fulfillment`.
 * @member {String} origin
 */
List1.prototype['origin'] = undefined;

/**
 * Payment system name.
 * @member {String} paymentNames
 */
List1.prototype['paymentNames'] = undefined;

/**
 * Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order.
 * @member {String} salesChannel
 */
List1.prototype['salesChannel'] = undefined;

/**
 * Six-digit string that follows the order ID. For example, in order `1268540501456-01 (501456)`, the sequence is `501456`.
 * @member {String} sequence
 */
List1.prototype['sequence'] = undefined;

/**
 * Order [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
 * @member {String} status
 */
List1.prototype['status'] = undefined;

/**
 * Status description which is displayed on the Admin panel. This field is deprecated and may not return any value.
 * @member {String} statusDescription
 */
List1.prototype['statusDescription'] = undefined;

/**
 * Order's total amount of items.
 * @member {Number} totalItems
 */
List1.prototype['totalItems'] = undefined;

/**
 * Total value amount.
 * @member {Number} totalValue
 */
List1.prototype['totalValue'] = undefined;

/**
 * If there is a work flow error (`true`) or not (`false`).
 * @member {Boolean} workflowInErrorState
 */
List1.prototype['workflowInErrorState'] = undefined;

/**
 * If the order is in a work flow retry (`true`) or not (`false`).
 * @member {Boolean} workflowInRetry
 */
List1.prototype['workflowInRetry'] = undefined;






export default List1;

