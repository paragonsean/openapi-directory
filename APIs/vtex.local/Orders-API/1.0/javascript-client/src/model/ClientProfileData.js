/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ClientProfileData model module.
 * @module model/ClientProfileData
 * @version 1.0
 */
class ClientProfileData {
    /**
     * Constructs a new <code>ClientProfileData</code>.
     * Object with information on the client&#39;s profile.
     * @alias module:model/ClientProfileData
     * @param corporateDocument {String} If the customer is a legal entity, here goes the corporate document.
     * @param corporateName {String} If the customer is a legal entity, here goes the corporate name.
     * @param corporatePhone {String} If the customer is a legal entity, here goes the corpany's phone number.
     * @param customerClass {String} Identification of the class the customer belongs to.
     * @param document {String} Document identification code informed by the customer.
     * @param documentType {String} Type of the document informed by the customer.
     * @param email {String} Customer's email.
     * @param firstName {String} Customer's first name.
     * @param id {String} Object ID, the expected value is `clientProfileData`.
     * @param isCorporate {Boolean} The value is `true` when the customer is a legal entity and `false` when not.
     * @param lastName {String} Customer's last name.
     * @param phone {String} Customers's phone number.
     * @param stateInscription {String} If the customer is a legal entity, here goes the state inscription.
     * @param tradeName {String} If the customer is a legal entity, here goes the trade name.
     * @param userProfileId {String} Customer user profile ID.
     */
    constructor(corporateDocument, corporateName, corporatePhone, customerClass, document, documentType, email, firstName, id, isCorporate, lastName, phone, stateInscription, tradeName, userProfileId) { 
        
        ClientProfileData.initialize(this, corporateDocument, corporateName, corporatePhone, customerClass, document, documentType, email, firstName, id, isCorporate, lastName, phone, stateInscription, tradeName, userProfileId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, corporateDocument, corporateName, corporatePhone, customerClass, document, documentType, email, firstName, id, isCorporate, lastName, phone, stateInscription, tradeName, userProfileId) { 
        obj['corporateDocument'] = corporateDocument;
        obj['corporateName'] = corporateName;
        obj['corporatePhone'] = corporatePhone;
        obj['customerClass'] = customerClass;
        obj['document'] = document;
        obj['documentType'] = documentType;
        obj['email'] = email;
        obj['firstName'] = firstName;
        obj['id'] = id;
        obj['isCorporate'] = isCorporate;
        obj['lastName'] = lastName;
        obj['phone'] = phone;
        obj['stateInscription'] = stateInscription;
        obj['tradeName'] = tradeName;
        obj['userProfileId'] = userProfileId;
    }

    /**
     * Constructs a <code>ClientProfileData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClientProfileData} obj Optional instance to populate.
     * @return {module:model/ClientProfileData} The populated <code>ClientProfileData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClientProfileData();

            if (data.hasOwnProperty('corporateDocument')) {
                obj['corporateDocument'] = ApiClient.convertToType(data['corporateDocument'], 'String');
            }
            if (data.hasOwnProperty('corporateName')) {
                obj['corporateName'] = ApiClient.convertToType(data['corporateName'], 'String');
            }
            if (data.hasOwnProperty('corporatePhone')) {
                obj['corporatePhone'] = ApiClient.convertToType(data['corporatePhone'], 'String');
            }
            if (data.hasOwnProperty('customerClass')) {
                obj['customerClass'] = ApiClient.convertToType(data['customerClass'], 'String');
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], 'String');
            }
            if (data.hasOwnProperty('documentType')) {
                obj['documentType'] = ApiClient.convertToType(data['documentType'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isCorporate')) {
                obj['isCorporate'] = ApiClient.convertToType(data['isCorporate'], 'Boolean');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('stateInscription')) {
                obj['stateInscription'] = ApiClient.convertToType(data['stateInscription'], 'String');
            }
            if (data.hasOwnProperty('tradeName')) {
                obj['tradeName'] = ApiClient.convertToType(data['tradeName'], 'String');
            }
            if (data.hasOwnProperty('userProfileId')) {
                obj['userProfileId'] = ApiClient.convertToType(data['userProfileId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClientProfileData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClientProfileData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClientProfileData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['corporateDocument'] && !(typeof data['corporateDocument'] === 'string' || data['corporateDocument'] instanceof String)) {
            throw new Error("Expected the field `corporateDocument` to be a primitive type in the JSON string but got " + data['corporateDocument']);
        }
        // ensure the json data is a string
        if (data['corporateName'] && !(typeof data['corporateName'] === 'string' || data['corporateName'] instanceof String)) {
            throw new Error("Expected the field `corporateName` to be a primitive type in the JSON string but got " + data['corporateName']);
        }
        // ensure the json data is a string
        if (data['corporatePhone'] && !(typeof data['corporatePhone'] === 'string' || data['corporatePhone'] instanceof String)) {
            throw new Error("Expected the field `corporatePhone` to be a primitive type in the JSON string but got " + data['corporatePhone']);
        }
        // ensure the json data is a string
        if (data['customerClass'] && !(typeof data['customerClass'] === 'string' || data['customerClass'] instanceof String)) {
            throw new Error("Expected the field `customerClass` to be a primitive type in the JSON string but got " + data['customerClass']);
        }
        // ensure the json data is a string
        if (data['document'] && !(typeof data['document'] === 'string' || data['document'] instanceof String)) {
            throw new Error("Expected the field `document` to be a primitive type in the JSON string but got " + data['document']);
        }
        // ensure the json data is a string
        if (data['documentType'] && !(typeof data['documentType'] === 'string' || data['documentType'] instanceof String)) {
            throw new Error("Expected the field `documentType` to be a primitive type in the JSON string but got " + data['documentType']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['stateInscription'] && !(typeof data['stateInscription'] === 'string' || data['stateInscription'] instanceof String)) {
            throw new Error("Expected the field `stateInscription` to be a primitive type in the JSON string but got " + data['stateInscription']);
        }
        // ensure the json data is a string
        if (data['tradeName'] && !(typeof data['tradeName'] === 'string' || data['tradeName'] instanceof String)) {
            throw new Error("Expected the field `tradeName` to be a primitive type in the JSON string but got " + data['tradeName']);
        }
        // ensure the json data is a string
        if (data['userProfileId'] && !(typeof data['userProfileId'] === 'string' || data['userProfileId'] instanceof String)) {
            throw new Error("Expected the field `userProfileId` to be a primitive type in the JSON string but got " + data['userProfileId']);
        }

        return true;
    }


}

ClientProfileData.RequiredProperties = ["corporateDocument", "corporateName", "corporatePhone", "customerClass", "document", "documentType", "email", "firstName", "id", "isCorporate", "lastName", "phone", "stateInscription", "tradeName", "userProfileId"];

/**
 * If the customer is a legal entity, here goes the corporate document.
 * @member {String} corporateDocument
 */
ClientProfileData.prototype['corporateDocument'] = undefined;

/**
 * If the customer is a legal entity, here goes the corporate name.
 * @member {String} corporateName
 */
ClientProfileData.prototype['corporateName'] = undefined;

/**
 * If the customer is a legal entity, here goes the corpany's phone number.
 * @member {String} corporatePhone
 */
ClientProfileData.prototype['corporatePhone'] = undefined;

/**
 * Identification of the class the customer belongs to.
 * @member {String} customerClass
 */
ClientProfileData.prototype['customerClass'] = undefined;

/**
 * Document identification code informed by the customer.
 * @member {String} document
 */
ClientProfileData.prototype['document'] = undefined;

/**
 * Type of the document informed by the customer.
 * @member {String} documentType
 */
ClientProfileData.prototype['documentType'] = undefined;

/**
 * Customer's email.
 * @member {String} email
 */
ClientProfileData.prototype['email'] = undefined;

/**
 * Customer's first name.
 * @member {String} firstName
 */
ClientProfileData.prototype['firstName'] = undefined;

/**
 * Object ID, the expected value is `clientProfileData`.
 * @member {String} id
 */
ClientProfileData.prototype['id'] = undefined;

/**
 * The value is `true` when the customer is a legal entity and `false` when not.
 * @member {Boolean} isCorporate
 */
ClientProfileData.prototype['isCorporate'] = undefined;

/**
 * Customer's last name.
 * @member {String} lastName
 */
ClientProfileData.prototype['lastName'] = undefined;

/**
 * Customers's phone number.
 * @member {String} phone
 */
ClientProfileData.prototype['phone'] = undefined;

/**
 * If the customer is a legal entity, here goes the state inscription.
 * @member {String} stateInscription
 */
ClientProfileData.prototype['stateInscription'] = undefined;

/**
 * If the customer is a legal entity, here goes the trade name.
 * @member {String} tradeName
 */
ClientProfileData.prototype['tradeName'] = undefined;

/**
 * Customer user profile ID.
 * @member {String} userProfileId
 */
ClientProfileData.prototype['userProfileId'] = undefined;






export default ClientProfileData;

