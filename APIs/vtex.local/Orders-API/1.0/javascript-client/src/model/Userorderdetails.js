/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChangesAttachment from './ChangesAttachment';
import ClientProfileData from './ClientProfileData';
import Item from './Item';
import Marketplace from './Marketplace';
import PackageAttachment from './PackageAttachment';
import PaymentData from './PaymentData';
import RatesAndBenefitsData from './RatesAndBenefitsData';
import Seller from './Seller';
import ShippingData from './ShippingData';
import StorePreferencesData from './StorePreferencesData';
import Total from './Total';
import UserorderdetailsCancellationData from './UserorderdetailsCancellationData';
import UserorderdetailsClientPreferencesData from './UserorderdetailsClientPreferencesData';
import UserorderdetailsItemMetadata from './UserorderdetailsItemMetadata';
import UserorderdetailsMarketingData from './UserorderdetailsMarketingData';
import UserorderdetailsSubscriptionData from './UserorderdetailsSubscriptionData';
import UserorderdetailsTaxData from './UserorderdetailsTaxData';

/**
 * The Userorderdetails model module.
 * @module model/Userorderdetails
 * @version 1.0
 */
class Userorderdetails {
    /**
     * Constructs a new <code>Userorderdetails</code>.
     * @alias module:model/Userorderdetails
     * @param affiliateId {String} Corresponds to the three-digit [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) identification code of the seller responsible for the order.
     * @param allowCancellation {Boolean} When set as `true`, the order can be canceled, and when set as `false`, it is no longer possible to cancel the order.
     * @param allowEdition {Boolean} When set as `true`, the order can be edited, and when set as `false`, it is no longer possible to edit the order.
     * @param authorizedDate {String} Authorized order date.
     * @param callCenterOperatorData {String} Call center operator responsible for the order.
     * @param cancelReason {String} Reason for order cancellation.
     * @param cancellationData {module:model/UserorderdetailsCancellationData} 
     * @param changesAttachment {module:model/ChangesAttachment} 
     * @param checkedInPickupPointId {String} If the field `isCheckedIn` is set as `true`, the `checkedInPickupPointId` will retrieve the ID of the physical store where the order was made.
     * @param clientPreferencesData {module:model/UserorderdetailsClientPreferencesData} 
     * @param clientProfileData {module:model/ClientProfileData} 
     * @param commercialConditionData {String} Information about commercial conditions.
     * @param creationDate {String} Order's creation date.
     * @param customData {String} Custom information in the order. This field is useful for storing data not included in other fields, for example, a message for a gift or a name to be printed in a shirt.
     * @param followUpEmail {String} Email of the store's employee responsible for managing the order.
     * @param giftRegistryData {String} Information about gift list, when it applies.
     * @param hostname {String} Account Hostname registered in License Manager.
     * @param invoiceData {Object} Information pertinent to the order's invoice.
     * @param invoicedDate {String} Order's invoice date.
     * @param isCheckedIn {Boolean} This field is set `true` when the order was made via inStore and `false` when it was not.
     * @param isCompleted {Boolean} When set as `true`, the order's payment has been settled, and when set as `false`, it has not been settled yet.
     * @param itemMetadata {module:model/UserorderdetailsItemMetadata} 
     * @param items {Array.<module:model/Item>} Information about order's items.
     * @param lastChange {String} Order's last change date.
     * @param lastMessage {String} Last sent transactional message.
     * @param marketingData {module:model/UserorderdetailsMarketingData} 
     * @param marketplace {module:model/Marketplace} 
     * @param marketplaceItems {Array.<String>} Marketplace details object.
     * @param marketplaceOrderId {String} Marketplace order ID.
     * @param marketplaceServicesEndpoint {String} Marketplace services endpoint.
     * @param merchantName {String} Name of the merchant.
     * @param openTextField {String} Optional field with order's additional information. This field must be filled in using the following format:   ```  {      \"fieldExample\": \"ValueExample\"    }  ```  
     * @param orderFormId {String} [Order form](https://developers.vtex.com/docs/guides/orderform-fields) ID. 
     * @param orderGroup {String} Order's group ID.
     * @param orderId {String} Order ID is a unique code that identifies an order.
     * @param origin {String} Order Origin, if `Marketplace` or `Fulfillment`.
     * @param packageAttachment {module:model/PackageAttachment} 
     * @param paymentData {module:model/PaymentData} 
     * @param ratesAndBenefitsData {module:model/RatesAndBenefitsData} 
     * @param roundingError {Number} Rounding error total amount, if it applies. For example, in orders with a discount over non-integer multiplier items, the rounding price is performed per item, not after the sum of all items. That can cause a difference in the total discount amount, which is informed in this field.
     * @param salesChannel {String} Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order.
     * @param sellerOrderId {String} ID of the seller related to the order. It can be a VTEX seller or an external seller.
     * @param sellers {Array.<module:model/Seller>} List of all sellers associated with the order.
     * @param sequence {String} Sequence is a six-digit string that follows the order ID. For example, in order `1268540501456-01 (501456)`, the sequence is `501456`.
     * @param shippingData {module:model/ShippingData} 
     * @param status {String} Order [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
     * @param statusDescription {String} `Deprecated`. Status description which is displayed on the Admin panel. This field is obsolete and may not return any value.
     * @param storePreferencesData {module:model/StorePreferencesData} 
     * @param subscriptionData {module:model/UserorderdetailsSubscriptionData} 
     * @param taxData {module:model/UserorderdetailsTaxData} 
     * @param totals {Array.<module:model/Total>} List with details about orders' totals.
     * @param value {Number} Order's total amount.
     */
    constructor(affiliateId, allowCancellation, allowEdition, authorizedDate, callCenterOperatorData, cancelReason, cancellationData, changesAttachment, checkedInPickupPointId, clientPreferencesData, clientProfileData, commercialConditionData, creationDate, customData, followUpEmail, giftRegistryData, hostname, invoiceData, invoicedDate, isCheckedIn, isCompleted, itemMetadata, items, lastChange, lastMessage, marketingData, marketplace, marketplaceItems, marketplaceOrderId, marketplaceServicesEndpoint, merchantName, openTextField, orderFormId, orderGroup, orderId, origin, packageAttachment, paymentData, ratesAndBenefitsData, roundingError, salesChannel, sellerOrderId, sellers, sequence, shippingData, status, statusDescription, storePreferencesData, subscriptionData, taxData, totals, value) { 
        
        Userorderdetails.initialize(this, affiliateId, allowCancellation, allowEdition, authorizedDate, callCenterOperatorData, cancelReason, cancellationData, changesAttachment, checkedInPickupPointId, clientPreferencesData, clientProfileData, commercialConditionData, creationDate, customData, followUpEmail, giftRegistryData, hostname, invoiceData, invoicedDate, isCheckedIn, isCompleted, itemMetadata, items, lastChange, lastMessage, marketingData, marketplace, marketplaceItems, marketplaceOrderId, marketplaceServicesEndpoint, merchantName, openTextField, orderFormId, orderGroup, orderId, origin, packageAttachment, paymentData, ratesAndBenefitsData, roundingError, salesChannel, sellerOrderId, sellers, sequence, shippingData, status, statusDescription, storePreferencesData, subscriptionData, taxData, totals, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, affiliateId, allowCancellation, allowEdition, authorizedDate, callCenterOperatorData, cancelReason, cancellationData, changesAttachment, checkedInPickupPointId, clientPreferencesData, clientProfileData, commercialConditionData, creationDate, customData, followUpEmail, giftRegistryData, hostname, invoiceData, invoicedDate, isCheckedIn, isCompleted, itemMetadata, items, lastChange, lastMessage, marketingData, marketplace, marketplaceItems, marketplaceOrderId, marketplaceServicesEndpoint, merchantName, openTextField, orderFormId, orderGroup, orderId, origin, packageAttachment, paymentData, ratesAndBenefitsData, roundingError, salesChannel, sellerOrderId, sellers, sequence, shippingData, status, statusDescription, storePreferencesData, subscriptionData, taxData, totals, value) { 
        obj['affiliateId'] = affiliateId;
        obj['allowCancellation'] = allowCancellation;
        obj['allowEdition'] = allowEdition;
        obj['authorizedDate'] = authorizedDate;
        obj['callCenterOperatorData'] = callCenterOperatorData;
        obj['cancelReason'] = cancelReason;
        obj['cancellationData'] = cancellationData;
        obj['changesAttachment'] = changesAttachment;
        obj['checkedInPickupPointId'] = checkedInPickupPointId;
        obj['clientPreferencesData'] = clientPreferencesData;
        obj['clientProfileData'] = clientProfileData;
        obj['commercialConditionData'] = commercialConditionData;
        obj['creationDate'] = creationDate;
        obj['customData'] = customData;
        obj['followUpEmail'] = followUpEmail;
        obj['giftRegistryData'] = giftRegistryData;
        obj['hostname'] = hostname;
        obj['invoiceData'] = invoiceData;
        obj['invoicedDate'] = invoicedDate;
        obj['isCheckedIn'] = isCheckedIn;
        obj['isCompleted'] = isCompleted;
        obj['itemMetadata'] = itemMetadata;
        obj['items'] = items;
        obj['lastChange'] = lastChange;
        obj['lastMessage'] = lastMessage;
        obj['marketingData'] = marketingData;
        obj['marketplace'] = marketplace;
        obj['marketplaceItems'] = marketplaceItems;
        obj['marketplaceOrderId'] = marketplaceOrderId;
        obj['marketplaceServicesEndpoint'] = marketplaceServicesEndpoint;
        obj['merchantName'] = merchantName;
        obj['openTextField'] = openTextField;
        obj['orderFormId'] = orderFormId;
        obj['orderGroup'] = orderGroup;
        obj['orderId'] = orderId;
        obj['origin'] = origin;
        obj['packageAttachment'] = packageAttachment;
        obj['paymentData'] = paymentData;
        obj['ratesAndBenefitsData'] = ratesAndBenefitsData;
        obj['roundingError'] = roundingError;
        obj['salesChannel'] = salesChannel;
        obj['sellerOrderId'] = sellerOrderId;
        obj['sellers'] = sellers;
        obj['sequence'] = sequence;
        obj['shippingData'] = shippingData;
        obj['status'] = status;
        obj['statusDescription'] = statusDescription;
        obj['storePreferencesData'] = storePreferencesData;
        obj['subscriptionData'] = subscriptionData;
        obj['taxData'] = taxData;
        obj['totals'] = totals;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Userorderdetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Userorderdetails} obj Optional instance to populate.
     * @return {module:model/Userorderdetails} The populated <code>Userorderdetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Userorderdetails();

            if (data.hasOwnProperty('affiliateId')) {
                obj['affiliateId'] = ApiClient.convertToType(data['affiliateId'], 'String');
            }
            if (data.hasOwnProperty('allowCancellation')) {
                obj['allowCancellation'] = ApiClient.convertToType(data['allowCancellation'], 'Boolean');
            }
            if (data.hasOwnProperty('allowEdition')) {
                obj['allowEdition'] = ApiClient.convertToType(data['allowEdition'], 'Boolean');
            }
            if (data.hasOwnProperty('authorizedDate')) {
                obj['authorizedDate'] = ApiClient.convertToType(data['authorizedDate'], 'String');
            }
            if (data.hasOwnProperty('callCenterOperatorData')) {
                obj['callCenterOperatorData'] = ApiClient.convertToType(data['callCenterOperatorData'], 'String');
            }
            if (data.hasOwnProperty('cancelReason')) {
                obj['cancelReason'] = ApiClient.convertToType(data['cancelReason'], 'String');
            }
            if (data.hasOwnProperty('cancellationData')) {
                obj['cancellationData'] = UserorderdetailsCancellationData.constructFromObject(data['cancellationData']);
            }
            if (data.hasOwnProperty('changesAttachment')) {
                obj['changesAttachment'] = ChangesAttachment.constructFromObject(data['changesAttachment']);
            }
            if (data.hasOwnProperty('checkedInPickupPointId')) {
                obj['checkedInPickupPointId'] = ApiClient.convertToType(data['checkedInPickupPointId'], 'String');
            }
            if (data.hasOwnProperty('clientPreferencesData')) {
                obj['clientPreferencesData'] = UserorderdetailsClientPreferencesData.constructFromObject(data['clientPreferencesData']);
            }
            if (data.hasOwnProperty('clientProfileData')) {
                obj['clientProfileData'] = ClientProfileData.constructFromObject(data['clientProfileData']);
            }
            if (data.hasOwnProperty('commercialConditionData')) {
                obj['commercialConditionData'] = ApiClient.convertToType(data['commercialConditionData'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('customData')) {
                obj['customData'] = ApiClient.convertToType(data['customData'], 'String');
            }
            if (data.hasOwnProperty('followUpEmail')) {
                obj['followUpEmail'] = ApiClient.convertToType(data['followUpEmail'], 'String');
            }
            if (data.hasOwnProperty('giftRegistryData')) {
                obj['giftRegistryData'] = ApiClient.convertToType(data['giftRegistryData'], 'String');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('invoiceData')) {
                obj['invoiceData'] = ApiClient.convertToType(data['invoiceData'], Object);
            }
            if (data.hasOwnProperty('invoicedDate')) {
                obj['invoicedDate'] = ApiClient.convertToType(data['invoicedDate'], 'String');
            }
            if (data.hasOwnProperty('isCheckedIn')) {
                obj['isCheckedIn'] = ApiClient.convertToType(data['isCheckedIn'], 'Boolean');
            }
            if (data.hasOwnProperty('isCompleted')) {
                obj['isCompleted'] = ApiClient.convertToType(data['isCompleted'], 'Boolean');
            }
            if (data.hasOwnProperty('itemMetadata')) {
                obj['itemMetadata'] = UserorderdetailsItemMetadata.constructFromObject(data['itemMetadata']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Item]);
            }
            if (data.hasOwnProperty('lastChange')) {
                obj['lastChange'] = ApiClient.convertToType(data['lastChange'], 'String');
            }
            if (data.hasOwnProperty('lastMessage')) {
                obj['lastMessage'] = ApiClient.convertToType(data['lastMessage'], 'String');
            }
            if (data.hasOwnProperty('marketingData')) {
                obj['marketingData'] = UserorderdetailsMarketingData.constructFromObject(data['marketingData']);
            }
            if (data.hasOwnProperty('marketplace')) {
                obj['marketplace'] = Marketplace.constructFromObject(data['marketplace']);
            }
            if (data.hasOwnProperty('marketplaceItems')) {
                obj['marketplaceItems'] = ApiClient.convertToType(data['marketplaceItems'], ['String']);
            }
            if (data.hasOwnProperty('marketplaceOrderId')) {
                obj['marketplaceOrderId'] = ApiClient.convertToType(data['marketplaceOrderId'], 'String');
            }
            if (data.hasOwnProperty('marketplaceServicesEndpoint')) {
                obj['marketplaceServicesEndpoint'] = ApiClient.convertToType(data['marketplaceServicesEndpoint'], 'String');
            }
            if (data.hasOwnProperty('merchantName')) {
                obj['merchantName'] = ApiClient.convertToType(data['merchantName'], 'String');
            }
            if (data.hasOwnProperty('openTextField')) {
                obj['openTextField'] = ApiClient.convertToType(data['openTextField'], 'String');
            }
            if (data.hasOwnProperty('orderFormId')) {
                obj['orderFormId'] = ApiClient.convertToType(data['orderFormId'], 'String');
            }
            if (data.hasOwnProperty('orderGroup')) {
                obj['orderGroup'] = ApiClient.convertToType(data['orderGroup'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('packageAttachment')) {
                obj['packageAttachment'] = PackageAttachment.constructFromObject(data['packageAttachment']);
            }
            if (data.hasOwnProperty('paymentData')) {
                obj['paymentData'] = PaymentData.constructFromObject(data['paymentData']);
            }
            if (data.hasOwnProperty('ratesAndBenefitsData')) {
                obj['ratesAndBenefitsData'] = RatesAndBenefitsData.constructFromObject(data['ratesAndBenefitsData']);
            }
            if (data.hasOwnProperty('roundingError')) {
                obj['roundingError'] = ApiClient.convertToType(data['roundingError'], 'Number');
            }
            if (data.hasOwnProperty('salesChannel')) {
                obj['salesChannel'] = ApiClient.convertToType(data['salesChannel'], 'String');
            }
            if (data.hasOwnProperty('sellerOrderId')) {
                obj['sellerOrderId'] = ApiClient.convertToType(data['sellerOrderId'], 'String');
            }
            if (data.hasOwnProperty('sellers')) {
                obj['sellers'] = ApiClient.convertToType(data['sellers'], [Seller]);
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'String');
            }
            if (data.hasOwnProperty('shippingData')) {
                obj['shippingData'] = ShippingData.constructFromObject(data['shippingData']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusDescription')) {
                obj['statusDescription'] = ApiClient.convertToType(data['statusDescription'], 'String');
            }
            if (data.hasOwnProperty('storePreferencesData')) {
                obj['storePreferencesData'] = StorePreferencesData.constructFromObject(data['storePreferencesData']);
            }
            if (data.hasOwnProperty('subscriptionData')) {
                obj['subscriptionData'] = UserorderdetailsSubscriptionData.constructFromObject(data['subscriptionData']);
            }
            if (data.hasOwnProperty('taxData')) {
                obj['taxData'] = UserorderdetailsTaxData.constructFromObject(data['taxData']);
            }
            if (data.hasOwnProperty('totals')) {
                obj['totals'] = ApiClient.convertToType(data['totals'], [Total]);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Userorderdetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Userorderdetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Userorderdetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['affiliateId'] && !(typeof data['affiliateId'] === 'string' || data['affiliateId'] instanceof String)) {
            throw new Error("Expected the field `affiliateId` to be a primitive type in the JSON string but got " + data['affiliateId']);
        }
        // ensure the json data is a string
        if (data['authorizedDate'] && !(typeof data['authorizedDate'] === 'string' || data['authorizedDate'] instanceof String)) {
            throw new Error("Expected the field `authorizedDate` to be a primitive type in the JSON string but got " + data['authorizedDate']);
        }
        // ensure the json data is a string
        if (data['callCenterOperatorData'] && !(typeof data['callCenterOperatorData'] === 'string' || data['callCenterOperatorData'] instanceof String)) {
            throw new Error("Expected the field `callCenterOperatorData` to be a primitive type in the JSON string but got " + data['callCenterOperatorData']);
        }
        // ensure the json data is a string
        if (data['cancelReason'] && !(typeof data['cancelReason'] === 'string' || data['cancelReason'] instanceof String)) {
            throw new Error("Expected the field `cancelReason` to be a primitive type in the JSON string but got " + data['cancelReason']);
        }
        // validate the optional field `cancellationData`
        if (data['cancellationData']) { // data not null
          UserorderdetailsCancellationData.validateJSON(data['cancellationData']);
        }
        // validate the optional field `changesAttachment`
        if (data['changesAttachment']) { // data not null
          ChangesAttachment.validateJSON(data['changesAttachment']);
        }
        // ensure the json data is a string
        if (data['checkedInPickupPointId'] && !(typeof data['checkedInPickupPointId'] === 'string' || data['checkedInPickupPointId'] instanceof String)) {
            throw new Error("Expected the field `checkedInPickupPointId` to be a primitive type in the JSON string but got " + data['checkedInPickupPointId']);
        }
        // validate the optional field `clientPreferencesData`
        if (data['clientPreferencesData']) { // data not null
          UserorderdetailsClientPreferencesData.validateJSON(data['clientPreferencesData']);
        }
        // validate the optional field `clientProfileData`
        if (data['clientProfileData']) { // data not null
          ClientProfileData.validateJSON(data['clientProfileData']);
        }
        // ensure the json data is a string
        if (data['commercialConditionData'] && !(typeof data['commercialConditionData'] === 'string' || data['commercialConditionData'] instanceof String)) {
            throw new Error("Expected the field `commercialConditionData` to be a primitive type in the JSON string but got " + data['commercialConditionData']);
        }
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // ensure the json data is a string
        if (data['customData'] && !(typeof data['customData'] === 'string' || data['customData'] instanceof String)) {
            throw new Error("Expected the field `customData` to be a primitive type in the JSON string but got " + data['customData']);
        }
        // ensure the json data is a string
        if (data['followUpEmail'] && !(typeof data['followUpEmail'] === 'string' || data['followUpEmail'] instanceof String)) {
            throw new Error("Expected the field `followUpEmail` to be a primitive type in the JSON string but got " + data['followUpEmail']);
        }
        // ensure the json data is a string
        if (data['giftRegistryData'] && !(typeof data['giftRegistryData'] === 'string' || data['giftRegistryData'] instanceof String)) {
            throw new Error("Expected the field `giftRegistryData` to be a primitive type in the JSON string but got " + data['giftRegistryData']);
        }
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        // ensure the json data is a string
        if (data['invoicedDate'] && !(typeof data['invoicedDate'] === 'string' || data['invoicedDate'] instanceof String)) {
            throw new Error("Expected the field `invoicedDate` to be a primitive type in the JSON string but got " + data['invoicedDate']);
        }
        // validate the optional field `itemMetadata`
        if (data['itemMetadata']) { // data not null
          UserorderdetailsItemMetadata.validateJSON(data['itemMetadata']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Item.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lastChange'] && !(typeof data['lastChange'] === 'string' || data['lastChange'] instanceof String)) {
            throw new Error("Expected the field `lastChange` to be a primitive type in the JSON string but got " + data['lastChange']);
        }
        // ensure the json data is a string
        if (data['lastMessage'] && !(typeof data['lastMessage'] === 'string' || data['lastMessage'] instanceof String)) {
            throw new Error("Expected the field `lastMessage` to be a primitive type in the JSON string but got " + data['lastMessage']);
        }
        // validate the optional field `marketingData`
        if (data['marketingData']) { // data not null
          UserorderdetailsMarketingData.validateJSON(data['marketingData']);
        }
        // validate the optional field `marketplace`
        if (data['marketplace']) { // data not null
          Marketplace.validateJSON(data['marketplace']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['marketplaceItems'])) {
            throw new Error("Expected the field `marketplaceItems` to be an array in the JSON data but got " + data['marketplaceItems']);
        }
        // ensure the json data is a string
        if (data['marketplaceOrderId'] && !(typeof data['marketplaceOrderId'] === 'string' || data['marketplaceOrderId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceOrderId` to be a primitive type in the JSON string but got " + data['marketplaceOrderId']);
        }
        // ensure the json data is a string
        if (data['marketplaceServicesEndpoint'] && !(typeof data['marketplaceServicesEndpoint'] === 'string' || data['marketplaceServicesEndpoint'] instanceof String)) {
            throw new Error("Expected the field `marketplaceServicesEndpoint` to be a primitive type in the JSON string but got " + data['marketplaceServicesEndpoint']);
        }
        // ensure the json data is a string
        if (data['merchantName'] && !(typeof data['merchantName'] === 'string' || data['merchantName'] instanceof String)) {
            throw new Error("Expected the field `merchantName` to be a primitive type in the JSON string but got " + data['merchantName']);
        }
        // ensure the json data is a string
        if (data['openTextField'] && !(typeof data['openTextField'] === 'string' || data['openTextField'] instanceof String)) {
            throw new Error("Expected the field `openTextField` to be a primitive type in the JSON string but got " + data['openTextField']);
        }
        // ensure the json data is a string
        if (data['orderFormId'] && !(typeof data['orderFormId'] === 'string' || data['orderFormId'] instanceof String)) {
            throw new Error("Expected the field `orderFormId` to be a primitive type in the JSON string but got " + data['orderFormId']);
        }
        // ensure the json data is a string
        if (data['orderGroup'] && !(typeof data['orderGroup'] === 'string' || data['orderGroup'] instanceof String)) {
            throw new Error("Expected the field `orderGroup` to be a primitive type in the JSON string but got " + data['orderGroup']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        // validate the optional field `packageAttachment`
        if (data['packageAttachment']) { // data not null
          PackageAttachment.validateJSON(data['packageAttachment']);
        }
        // validate the optional field `paymentData`
        if (data['paymentData']) { // data not null
          PaymentData.validateJSON(data['paymentData']);
        }
        // validate the optional field `ratesAndBenefitsData`
        if (data['ratesAndBenefitsData']) { // data not null
          RatesAndBenefitsData.validateJSON(data['ratesAndBenefitsData']);
        }
        // ensure the json data is a string
        if (data['salesChannel'] && !(typeof data['salesChannel'] === 'string' || data['salesChannel'] instanceof String)) {
            throw new Error("Expected the field `salesChannel` to be a primitive type in the JSON string but got " + data['salesChannel']);
        }
        // ensure the json data is a string
        if (data['sellerOrderId'] && !(typeof data['sellerOrderId'] === 'string' || data['sellerOrderId'] instanceof String)) {
            throw new Error("Expected the field `sellerOrderId` to be a primitive type in the JSON string but got " + data['sellerOrderId']);
        }
        if (data['sellers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sellers'])) {
                throw new Error("Expected the field `sellers` to be an array in the JSON data but got " + data['sellers']);
            }
            // validate the optional field `sellers` (array)
            for (const item of data['sellers']) {
                Seller.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sequence'] && !(typeof data['sequence'] === 'string' || data['sequence'] instanceof String)) {
            throw new Error("Expected the field `sequence` to be a primitive type in the JSON string but got " + data['sequence']);
        }
        // validate the optional field `shippingData`
        if (data['shippingData']) { // data not null
          ShippingData.validateJSON(data['shippingData']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['statusDescription'] && !(typeof data['statusDescription'] === 'string' || data['statusDescription'] instanceof String)) {
            throw new Error("Expected the field `statusDescription` to be a primitive type in the JSON string but got " + data['statusDescription']);
        }
        // validate the optional field `storePreferencesData`
        if (data['storePreferencesData']) { // data not null
          StorePreferencesData.validateJSON(data['storePreferencesData']);
        }
        // validate the optional field `subscriptionData`
        if (data['subscriptionData']) { // data not null
          UserorderdetailsSubscriptionData.validateJSON(data['subscriptionData']);
        }
        // validate the optional field `taxData`
        if (data['taxData']) { // data not null
          UserorderdetailsTaxData.validateJSON(data['taxData']);
        }
        if (data['totals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['totals'])) {
                throw new Error("Expected the field `totals` to be an array in the JSON data but got " + data['totals']);
            }
            // validate the optional field `totals` (array)
            for (const item of data['totals']) {
                Total.validateJSON(item);
            };
        }

        return true;
    }


}

Userorderdetails.RequiredProperties = ["affiliateId", "allowCancellation", "allowEdition", "authorizedDate", "callCenterOperatorData", "cancelReason", "cancellationData", "changesAttachment", "checkedInPickupPointId", "clientPreferencesData", "clientProfileData", "commercialConditionData", "creationDate", "customData", "followUpEmail", "giftRegistryData", "hostname", "invoiceData", "invoicedDate", "isCheckedIn", "isCompleted", "itemMetadata", "items", "lastChange", "lastMessage", "marketingData", "marketplace", "marketplaceItems", "marketplaceOrderId", "marketplaceServicesEndpoint", "merchantName", "openTextField", "orderFormId", "orderGroup", "orderId", "origin", "packageAttachment", "paymentData", "ratesAndBenefitsData", "roundingError", "salesChannel", "sellerOrderId", "sellers", "sequence", "shippingData", "status", "statusDescription", "storePreferencesData", "subscriptionData", "taxData", "totals", "value"];

/**
 * Corresponds to the three-digit [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) identification code of the seller responsible for the order.
 * @member {String} affiliateId
 */
Userorderdetails.prototype['affiliateId'] = undefined;

/**
 * When set as `true`, the order can be canceled, and when set as `false`, it is no longer possible to cancel the order.
 * @member {Boolean} allowCancellation
 */
Userorderdetails.prototype['allowCancellation'] = undefined;

/**
 * When set as `true`, the order can be edited, and when set as `false`, it is no longer possible to edit the order.
 * @member {Boolean} allowEdition
 */
Userorderdetails.prototype['allowEdition'] = undefined;

/**
 * Authorized order date.
 * @member {String} authorizedDate
 */
Userorderdetails.prototype['authorizedDate'] = undefined;

/**
 * Call center operator responsible for the order.
 * @member {String} callCenterOperatorData
 */
Userorderdetails.prototype['callCenterOperatorData'] = undefined;

/**
 * Reason for order cancellation.
 * @member {String} cancelReason
 */
Userorderdetails.prototype['cancelReason'] = undefined;

/**
 * @member {module:model/UserorderdetailsCancellationData} cancellationData
 */
Userorderdetails.prototype['cancellationData'] = undefined;

/**
 * @member {module:model/ChangesAttachment} changesAttachment
 */
Userorderdetails.prototype['changesAttachment'] = undefined;

/**
 * If the field `isCheckedIn` is set as `true`, the `checkedInPickupPointId` will retrieve the ID of the physical store where the order was made.
 * @member {String} checkedInPickupPointId
 */
Userorderdetails.prototype['checkedInPickupPointId'] = undefined;

/**
 * @member {module:model/UserorderdetailsClientPreferencesData} clientPreferencesData
 */
Userorderdetails.prototype['clientPreferencesData'] = undefined;

/**
 * @member {module:model/ClientProfileData} clientProfileData
 */
Userorderdetails.prototype['clientProfileData'] = undefined;

/**
 * Information about commercial conditions.
 * @member {String} commercialConditionData
 */
Userorderdetails.prototype['commercialConditionData'] = undefined;

/**
 * Order's creation date.
 * @member {String} creationDate
 */
Userorderdetails.prototype['creationDate'] = undefined;

/**
 * Custom information in the order. This field is useful for storing data not included in other fields, for example, a message for a gift or a name to be printed in a shirt.
 * @member {String} customData
 */
Userorderdetails.prototype['customData'] = undefined;

/**
 * Email of the store's employee responsible for managing the order.
 * @member {String} followUpEmail
 */
Userorderdetails.prototype['followUpEmail'] = undefined;

/**
 * Information about gift list, when it applies.
 * @member {String} giftRegistryData
 */
Userorderdetails.prototype['giftRegistryData'] = undefined;

/**
 * Account Hostname registered in License Manager.
 * @member {String} hostname
 */
Userorderdetails.prototype['hostname'] = undefined;

/**
 * Information pertinent to the order's invoice.
 * @member {Object} invoiceData
 */
Userorderdetails.prototype['invoiceData'] = undefined;

/**
 * Order's invoice date.
 * @member {String} invoicedDate
 */
Userorderdetails.prototype['invoicedDate'] = undefined;

/**
 * This field is set `true` when the order was made via inStore and `false` when it was not.
 * @member {Boolean} isCheckedIn
 */
Userorderdetails.prototype['isCheckedIn'] = undefined;

/**
 * When set as `true`, the order's payment has been settled, and when set as `false`, it has not been settled yet.
 * @member {Boolean} isCompleted
 */
Userorderdetails.prototype['isCompleted'] = undefined;

/**
 * @member {module:model/UserorderdetailsItemMetadata} itemMetadata
 */
Userorderdetails.prototype['itemMetadata'] = undefined;

/**
 * Information about order's items.
 * @member {Array.<module:model/Item>} items
 */
Userorderdetails.prototype['items'] = undefined;

/**
 * Order's last change date.
 * @member {String} lastChange
 */
Userorderdetails.prototype['lastChange'] = undefined;

/**
 * Last sent transactional message.
 * @member {String} lastMessage
 */
Userorderdetails.prototype['lastMessage'] = undefined;

/**
 * @member {module:model/UserorderdetailsMarketingData} marketingData
 */
Userorderdetails.prototype['marketingData'] = undefined;

/**
 * @member {module:model/Marketplace} marketplace
 */
Userorderdetails.prototype['marketplace'] = undefined;

/**
 * Marketplace details object.
 * @member {Array.<String>} marketplaceItems
 */
Userorderdetails.prototype['marketplaceItems'] = undefined;

/**
 * Marketplace order ID.
 * @member {String} marketplaceOrderId
 */
Userorderdetails.prototype['marketplaceOrderId'] = undefined;

/**
 * Marketplace services endpoint.
 * @member {String} marketplaceServicesEndpoint
 */
Userorderdetails.prototype['marketplaceServicesEndpoint'] = undefined;

/**
 * Name of the merchant.
 * @member {String} merchantName
 */
Userorderdetails.prototype['merchantName'] = undefined;

/**
 * Optional field with order's additional information. This field must be filled in using the following format:   ```  {      \"fieldExample\": \"ValueExample\"    }  ```  
 * @member {String} openTextField
 */
Userorderdetails.prototype['openTextField'] = undefined;

/**
 * [Order form](https://developers.vtex.com/docs/guides/orderform-fields) ID. 
 * @member {String} orderFormId
 */
Userorderdetails.prototype['orderFormId'] = undefined;

/**
 * Order's group ID.
 * @member {String} orderGroup
 */
Userorderdetails.prototype['orderGroup'] = undefined;

/**
 * Order ID is a unique code that identifies an order.
 * @member {String} orderId
 */
Userorderdetails.prototype['orderId'] = undefined;

/**
 * Order Origin, if `Marketplace` or `Fulfillment`.
 * @member {String} origin
 */
Userorderdetails.prototype['origin'] = undefined;

/**
 * @member {module:model/PackageAttachment} packageAttachment
 */
Userorderdetails.prototype['packageAttachment'] = undefined;

/**
 * @member {module:model/PaymentData} paymentData
 */
Userorderdetails.prototype['paymentData'] = undefined;

/**
 * @member {module:model/RatesAndBenefitsData} ratesAndBenefitsData
 */
Userorderdetails.prototype['ratesAndBenefitsData'] = undefined;

/**
 * Rounding error total amount, if it applies. For example, in orders with a discount over non-integer multiplier items, the rounding price is performed per item, not after the sum of all items. That can cause a difference in the total discount amount, which is informed in this field.
 * @member {Number} roundingError
 */
Userorderdetails.prototype['roundingError'] = undefined;

/**
 * Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order.
 * @member {String} salesChannel
 */
Userorderdetails.prototype['salesChannel'] = undefined;

/**
 * ID of the seller related to the order. It can be a VTEX seller or an external seller.
 * @member {String} sellerOrderId
 */
Userorderdetails.prototype['sellerOrderId'] = undefined;

/**
 * List of all sellers associated with the order.
 * @member {Array.<module:model/Seller>} sellers
 */
Userorderdetails.prototype['sellers'] = undefined;

/**
 * Sequence is a six-digit string that follows the order ID. For example, in order `1268540501456-01 (501456)`, the sequence is `501456`.
 * @member {String} sequence
 */
Userorderdetails.prototype['sequence'] = undefined;

/**
 * @member {module:model/ShippingData} shippingData
 */
Userorderdetails.prototype['shippingData'] = undefined;

/**
 * Order [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
 * @member {String} status
 */
Userorderdetails.prototype['status'] = undefined;

/**
 * `Deprecated`. Status description which is displayed on the Admin panel. This field is obsolete and may not return any value.
 * @member {String} statusDescription
 */
Userorderdetails.prototype['statusDescription'] = undefined;

/**
 * @member {module:model/StorePreferencesData} storePreferencesData
 */
Userorderdetails.prototype['storePreferencesData'] = undefined;

/**
 * @member {module:model/UserorderdetailsSubscriptionData} subscriptionData
 */
Userorderdetails.prototype['subscriptionData'] = undefined;

/**
 * @member {module:model/UserorderdetailsTaxData} taxData
 */
Userorderdetails.prototype['taxData'] = undefined;

/**
 * List with details about orders' totals.
 * @member {Array.<module:model/Total>} totals
 */
Userorderdetails.prototype['totals'] = undefined;

/**
 * Order's total amount.
 * @member {Number} value
 */
Userorderdetails.prototype['value'] = undefined;






export default Userorderdetails;

