/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChangesAttachment from './ChangesAttachment';
import ClientProfileData from './ClientProfileData';
import Item from './Item';
import Marketplace from './Marketplace';
import PackageAttachment from './PackageAttachment';
import PaymentData from './PaymentData';
import RatesAndBenefitsData from './RatesAndBenefitsData';
import Seller from './Seller';
import ShippingData from './ShippingData';
import StorePreferencesData from './StorePreferencesData';
import Total from './Total';

/**
 * The GetOrder model module.
 * @module model/GetOrder
 * @version 1.0
 */
class GetOrder {
    /**
     * Constructs a new <code>GetOrder</code>.
     * @alias module:model/GetOrder
     * @param affiliateId {String} 
     * @param allowCancellation {Boolean} 
     * @param allowEdition {Boolean} 
     * @param approvedBy {String} 
     * @param authorizedDate {String} 
     * @param callCenterOperatorData {String} 
     * @param cancelReason {String} Explanation for cancellation
     * @param cancelledBy {String} User that canceled the order.
     * @param changesAttachment {module:model/ChangesAttachment} 
     * @param clientProfileData {module:model/ClientProfileData} 
     * @param commercialConditionData {String} 
     * @param creationDate {String} 
     * @param customData {String} 
     * @param emailTracked {String} 
     * @param followUpEmail {String} 
     * @param giftRegistryData {String} 
     * @param hostname {String} 
     * @param invoiceData {Object} Information pertinent to the order's invoice.
     * @param invoicedDate {String} 
     * @param isCheckedIn {Boolean} 
     * @param isCompleted {Boolean} 
     * @param items {Array.<module:model/Item>} 
     * @param lastChange {String} 
     * @param lastMessage {String} 
     * @param marketingData {String} 
     * @param marketplace {module:model/Marketplace} 
     * @param marketplaceItems {Array.<String>} 
     * @param marketplaceOrderId {String} 
     * @param marketplaceServicesEndpoint {String} 
     * @param merchantName {String} 
     * @param openTextField {String} This field must be filled in using the following format:   ```  {      \"fieldExample\": \"ValueExample\"    }  ```  
     * @param orderFormId {String} 
     * @param orderGroup {String} 
     * @param orderId {String} 
     * @param origin {String} 
     * @param packageAttachment {module:model/PackageAttachment} 
     * @param paymentData {module:model/PaymentData} 
     * @param ratesAndBenefitsData {module:model/RatesAndBenefitsData} 
     * @param roundingError {Number} 
     * @param salesChannel {String} 
     * @param sellerOrderId {String} 
     * @param sellers {Array.<module:model/Seller>} 
     * @param sequence {String} 
     * @param shippingData {module:model/ShippingData} 
     * @param status {String} 
     * @param statusDescription {String} `Deprecated`. Status description which is displayed on the Admin panel. This field is obsolete and may not return any value.
     * @param storePreferencesData {module:model/StorePreferencesData} 
     * @param totals {Array.<module:model/Total>} 
     * @param value {Number} 
     */
    constructor(affiliateId, allowCancellation, allowEdition, approvedBy, authorizedDate, callCenterOperatorData, cancelReason, cancelledBy, changesAttachment, clientProfileData, commercialConditionData, creationDate, customData, emailTracked, followUpEmail, giftRegistryData, hostname, invoiceData, invoicedDate, isCheckedIn, isCompleted, items, lastChange, lastMessage, marketingData, marketplace, marketplaceItems, marketplaceOrderId, marketplaceServicesEndpoint, merchantName, openTextField, orderFormId, orderGroup, orderId, origin, packageAttachment, paymentData, ratesAndBenefitsData, roundingError, salesChannel, sellerOrderId, sellers, sequence, shippingData, status, statusDescription, storePreferencesData, totals, value) { 
        
        GetOrder.initialize(this, affiliateId, allowCancellation, allowEdition, approvedBy, authorizedDate, callCenterOperatorData, cancelReason, cancelledBy, changesAttachment, clientProfileData, commercialConditionData, creationDate, customData, emailTracked, followUpEmail, giftRegistryData, hostname, invoiceData, invoicedDate, isCheckedIn, isCompleted, items, lastChange, lastMessage, marketingData, marketplace, marketplaceItems, marketplaceOrderId, marketplaceServicesEndpoint, merchantName, openTextField, orderFormId, orderGroup, orderId, origin, packageAttachment, paymentData, ratesAndBenefitsData, roundingError, salesChannel, sellerOrderId, sellers, sequence, shippingData, status, statusDescription, storePreferencesData, totals, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, affiliateId, allowCancellation, allowEdition, approvedBy, authorizedDate, callCenterOperatorData, cancelReason, cancelledBy, changesAttachment, clientProfileData, commercialConditionData, creationDate, customData, emailTracked, followUpEmail, giftRegistryData, hostname, invoiceData, invoicedDate, isCheckedIn, isCompleted, items, lastChange, lastMessage, marketingData, marketplace, marketplaceItems, marketplaceOrderId, marketplaceServicesEndpoint, merchantName, openTextField, orderFormId, orderGroup, orderId, origin, packageAttachment, paymentData, ratesAndBenefitsData, roundingError, salesChannel, sellerOrderId, sellers, sequence, shippingData, status, statusDescription, storePreferencesData, totals, value) { 
        obj['affiliateId'] = affiliateId;
        obj['allowCancellation'] = allowCancellation;
        obj['allowEdition'] = allowEdition;
        obj['approvedBy'] = approvedBy;
        obj['authorizedDate'] = authorizedDate;
        obj['callCenterOperatorData'] = callCenterOperatorData;
        obj['cancelReason'] = cancelReason;
        obj['cancelledBy'] = cancelledBy;
        obj['changesAttachment'] = changesAttachment;
        obj['clientProfileData'] = clientProfileData;
        obj['commercialConditionData'] = commercialConditionData;
        obj['creationDate'] = creationDate;
        obj['customData'] = customData;
        obj['emailTracked'] = emailTracked;
        obj['followUpEmail'] = followUpEmail;
        obj['giftRegistryData'] = giftRegistryData;
        obj['hostname'] = hostname;
        obj['invoiceData'] = invoiceData;
        obj['invoicedDate'] = invoicedDate;
        obj['isCheckedIn'] = isCheckedIn;
        obj['isCompleted'] = isCompleted;
        obj['items'] = items;
        obj['lastChange'] = lastChange;
        obj['lastMessage'] = lastMessage;
        obj['marketingData'] = marketingData;
        obj['marketplace'] = marketplace;
        obj['marketplaceItems'] = marketplaceItems;
        obj['marketplaceOrderId'] = marketplaceOrderId;
        obj['marketplaceServicesEndpoint'] = marketplaceServicesEndpoint;
        obj['merchantName'] = merchantName;
        obj['openTextField'] = openTextField;
        obj['orderFormId'] = orderFormId;
        obj['orderGroup'] = orderGroup;
        obj['orderId'] = orderId;
        obj['origin'] = origin;
        obj['packageAttachment'] = packageAttachment;
        obj['paymentData'] = paymentData;
        obj['ratesAndBenefitsData'] = ratesAndBenefitsData;
        obj['roundingError'] = roundingError;
        obj['salesChannel'] = salesChannel;
        obj['sellerOrderId'] = sellerOrderId;
        obj['sellers'] = sellers;
        obj['sequence'] = sequence;
        obj['shippingData'] = shippingData;
        obj['status'] = status;
        obj['statusDescription'] = statusDescription;
        obj['storePreferencesData'] = storePreferencesData;
        obj['totals'] = totals;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>GetOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetOrder} obj Optional instance to populate.
     * @return {module:model/GetOrder} The populated <code>GetOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetOrder();

            if (data.hasOwnProperty('affiliateId')) {
                obj['affiliateId'] = ApiClient.convertToType(data['affiliateId'], 'String');
            }
            if (data.hasOwnProperty('allowCancellation')) {
                obj['allowCancellation'] = ApiClient.convertToType(data['allowCancellation'], 'Boolean');
            }
            if (data.hasOwnProperty('allowEdition')) {
                obj['allowEdition'] = ApiClient.convertToType(data['allowEdition'], 'Boolean');
            }
            if (data.hasOwnProperty('approvedBy')) {
                obj['approvedBy'] = ApiClient.convertToType(data['approvedBy'], 'String');
            }
            if (data.hasOwnProperty('authorizedDate')) {
                obj['authorizedDate'] = ApiClient.convertToType(data['authorizedDate'], 'String');
            }
            if (data.hasOwnProperty('callCenterOperatorData')) {
                obj['callCenterOperatorData'] = ApiClient.convertToType(data['callCenterOperatorData'], 'String');
            }
            if (data.hasOwnProperty('cancelReason')) {
                obj['cancelReason'] = ApiClient.convertToType(data['cancelReason'], 'String');
            }
            if (data.hasOwnProperty('cancelledBy')) {
                obj['cancelledBy'] = ApiClient.convertToType(data['cancelledBy'], 'String');
            }
            if (data.hasOwnProperty('changesAttachment')) {
                obj['changesAttachment'] = ChangesAttachment.constructFromObject(data['changesAttachment']);
            }
            if (data.hasOwnProperty('clientProfileData')) {
                obj['clientProfileData'] = ClientProfileData.constructFromObject(data['clientProfileData']);
            }
            if (data.hasOwnProperty('commercialConditionData')) {
                obj['commercialConditionData'] = ApiClient.convertToType(data['commercialConditionData'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('customData')) {
                obj['customData'] = ApiClient.convertToType(data['customData'], 'String');
            }
            if (data.hasOwnProperty('emailTracked')) {
                obj['emailTracked'] = ApiClient.convertToType(data['emailTracked'], 'String');
            }
            if (data.hasOwnProperty('followUpEmail')) {
                obj['followUpEmail'] = ApiClient.convertToType(data['followUpEmail'], 'String');
            }
            if (data.hasOwnProperty('giftRegistryData')) {
                obj['giftRegistryData'] = ApiClient.convertToType(data['giftRegistryData'], 'String');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('invoiceData')) {
                obj['invoiceData'] = ApiClient.convertToType(data['invoiceData'], Object);
            }
            if (data.hasOwnProperty('invoicedDate')) {
                obj['invoicedDate'] = ApiClient.convertToType(data['invoicedDate'], 'String');
            }
            if (data.hasOwnProperty('isCheckedIn')) {
                obj['isCheckedIn'] = ApiClient.convertToType(data['isCheckedIn'], 'Boolean');
            }
            if (data.hasOwnProperty('isCompleted')) {
                obj['isCompleted'] = ApiClient.convertToType(data['isCompleted'], 'Boolean');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Item]);
            }
            if (data.hasOwnProperty('lastChange')) {
                obj['lastChange'] = ApiClient.convertToType(data['lastChange'], 'String');
            }
            if (data.hasOwnProperty('lastMessage')) {
                obj['lastMessage'] = ApiClient.convertToType(data['lastMessage'], 'String');
            }
            if (data.hasOwnProperty('marketingData')) {
                obj['marketingData'] = ApiClient.convertToType(data['marketingData'], 'String');
            }
            if (data.hasOwnProperty('marketplace')) {
                obj['marketplace'] = Marketplace.constructFromObject(data['marketplace']);
            }
            if (data.hasOwnProperty('marketplaceItems')) {
                obj['marketplaceItems'] = ApiClient.convertToType(data['marketplaceItems'], ['String']);
            }
            if (data.hasOwnProperty('marketplaceOrderId')) {
                obj['marketplaceOrderId'] = ApiClient.convertToType(data['marketplaceOrderId'], 'String');
            }
            if (data.hasOwnProperty('marketplaceServicesEndpoint')) {
                obj['marketplaceServicesEndpoint'] = ApiClient.convertToType(data['marketplaceServicesEndpoint'], 'String');
            }
            if (data.hasOwnProperty('merchantName')) {
                obj['merchantName'] = ApiClient.convertToType(data['merchantName'], 'String');
            }
            if (data.hasOwnProperty('openTextField')) {
                obj['openTextField'] = ApiClient.convertToType(data['openTextField'], 'String');
            }
            if (data.hasOwnProperty('orderFormId')) {
                obj['orderFormId'] = ApiClient.convertToType(data['orderFormId'], 'String');
            }
            if (data.hasOwnProperty('orderGroup')) {
                obj['orderGroup'] = ApiClient.convertToType(data['orderGroup'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('packageAttachment')) {
                obj['packageAttachment'] = PackageAttachment.constructFromObject(data['packageAttachment']);
            }
            if (data.hasOwnProperty('paymentData')) {
                obj['paymentData'] = PaymentData.constructFromObject(data['paymentData']);
            }
            if (data.hasOwnProperty('ratesAndBenefitsData')) {
                obj['ratesAndBenefitsData'] = RatesAndBenefitsData.constructFromObject(data['ratesAndBenefitsData']);
            }
            if (data.hasOwnProperty('roundingError')) {
                obj['roundingError'] = ApiClient.convertToType(data['roundingError'], 'Number');
            }
            if (data.hasOwnProperty('salesChannel')) {
                obj['salesChannel'] = ApiClient.convertToType(data['salesChannel'], 'String');
            }
            if (data.hasOwnProperty('sellerOrderId')) {
                obj['sellerOrderId'] = ApiClient.convertToType(data['sellerOrderId'], 'String');
            }
            if (data.hasOwnProperty('sellers')) {
                obj['sellers'] = ApiClient.convertToType(data['sellers'], [Seller]);
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'String');
            }
            if (data.hasOwnProperty('shippingData')) {
                obj['shippingData'] = ShippingData.constructFromObject(data['shippingData']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusDescription')) {
                obj['statusDescription'] = ApiClient.convertToType(data['statusDescription'], 'String');
            }
            if (data.hasOwnProperty('storePreferencesData')) {
                obj['storePreferencesData'] = StorePreferencesData.constructFromObject(data['storePreferencesData']);
            }
            if (data.hasOwnProperty('totals')) {
                obj['totals'] = ApiClient.convertToType(data['totals'], [Total]);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetOrder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetOrder</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetOrder.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['affiliateId'] && !(typeof data['affiliateId'] === 'string' || data['affiliateId'] instanceof String)) {
            throw new Error("Expected the field `affiliateId` to be a primitive type in the JSON string but got " + data['affiliateId']);
        }
        // ensure the json data is a string
        if (data['approvedBy'] && !(typeof data['approvedBy'] === 'string' || data['approvedBy'] instanceof String)) {
            throw new Error("Expected the field `approvedBy` to be a primitive type in the JSON string but got " + data['approvedBy']);
        }
        // ensure the json data is a string
        if (data['authorizedDate'] && !(typeof data['authorizedDate'] === 'string' || data['authorizedDate'] instanceof String)) {
            throw new Error("Expected the field `authorizedDate` to be a primitive type in the JSON string but got " + data['authorizedDate']);
        }
        // ensure the json data is a string
        if (data['callCenterOperatorData'] && !(typeof data['callCenterOperatorData'] === 'string' || data['callCenterOperatorData'] instanceof String)) {
            throw new Error("Expected the field `callCenterOperatorData` to be a primitive type in the JSON string but got " + data['callCenterOperatorData']);
        }
        // ensure the json data is a string
        if (data['cancelReason'] && !(typeof data['cancelReason'] === 'string' || data['cancelReason'] instanceof String)) {
            throw new Error("Expected the field `cancelReason` to be a primitive type in the JSON string but got " + data['cancelReason']);
        }
        // ensure the json data is a string
        if (data['cancelledBy'] && !(typeof data['cancelledBy'] === 'string' || data['cancelledBy'] instanceof String)) {
            throw new Error("Expected the field `cancelledBy` to be a primitive type in the JSON string but got " + data['cancelledBy']);
        }
        // validate the optional field `changesAttachment`
        if (data['changesAttachment']) { // data not null
          ChangesAttachment.validateJSON(data['changesAttachment']);
        }
        // validate the optional field `clientProfileData`
        if (data['clientProfileData']) { // data not null
          ClientProfileData.validateJSON(data['clientProfileData']);
        }
        // ensure the json data is a string
        if (data['commercialConditionData'] && !(typeof data['commercialConditionData'] === 'string' || data['commercialConditionData'] instanceof String)) {
            throw new Error("Expected the field `commercialConditionData` to be a primitive type in the JSON string but got " + data['commercialConditionData']);
        }
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // ensure the json data is a string
        if (data['customData'] && !(typeof data['customData'] === 'string' || data['customData'] instanceof String)) {
            throw new Error("Expected the field `customData` to be a primitive type in the JSON string but got " + data['customData']);
        }
        // ensure the json data is a string
        if (data['emailTracked'] && !(typeof data['emailTracked'] === 'string' || data['emailTracked'] instanceof String)) {
            throw new Error("Expected the field `emailTracked` to be a primitive type in the JSON string but got " + data['emailTracked']);
        }
        // ensure the json data is a string
        if (data['followUpEmail'] && !(typeof data['followUpEmail'] === 'string' || data['followUpEmail'] instanceof String)) {
            throw new Error("Expected the field `followUpEmail` to be a primitive type in the JSON string but got " + data['followUpEmail']);
        }
        // ensure the json data is a string
        if (data['giftRegistryData'] && !(typeof data['giftRegistryData'] === 'string' || data['giftRegistryData'] instanceof String)) {
            throw new Error("Expected the field `giftRegistryData` to be a primitive type in the JSON string but got " + data['giftRegistryData']);
        }
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        // ensure the json data is a string
        if (data['invoicedDate'] && !(typeof data['invoicedDate'] === 'string' || data['invoicedDate'] instanceof String)) {
            throw new Error("Expected the field `invoicedDate` to be a primitive type in the JSON string but got " + data['invoicedDate']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Item.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lastChange'] && !(typeof data['lastChange'] === 'string' || data['lastChange'] instanceof String)) {
            throw new Error("Expected the field `lastChange` to be a primitive type in the JSON string but got " + data['lastChange']);
        }
        // ensure the json data is a string
        if (data['lastMessage'] && !(typeof data['lastMessage'] === 'string' || data['lastMessage'] instanceof String)) {
            throw new Error("Expected the field `lastMessage` to be a primitive type in the JSON string but got " + data['lastMessage']);
        }
        // ensure the json data is a string
        if (data['marketingData'] && !(typeof data['marketingData'] === 'string' || data['marketingData'] instanceof String)) {
            throw new Error("Expected the field `marketingData` to be a primitive type in the JSON string but got " + data['marketingData']);
        }
        // validate the optional field `marketplace`
        if (data['marketplace']) { // data not null
          Marketplace.validateJSON(data['marketplace']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['marketplaceItems'])) {
            throw new Error("Expected the field `marketplaceItems` to be an array in the JSON data but got " + data['marketplaceItems']);
        }
        // ensure the json data is a string
        if (data['marketplaceOrderId'] && !(typeof data['marketplaceOrderId'] === 'string' || data['marketplaceOrderId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceOrderId` to be a primitive type in the JSON string but got " + data['marketplaceOrderId']);
        }
        // ensure the json data is a string
        if (data['marketplaceServicesEndpoint'] && !(typeof data['marketplaceServicesEndpoint'] === 'string' || data['marketplaceServicesEndpoint'] instanceof String)) {
            throw new Error("Expected the field `marketplaceServicesEndpoint` to be a primitive type in the JSON string but got " + data['marketplaceServicesEndpoint']);
        }
        // ensure the json data is a string
        if (data['merchantName'] && !(typeof data['merchantName'] === 'string' || data['merchantName'] instanceof String)) {
            throw new Error("Expected the field `merchantName` to be a primitive type in the JSON string but got " + data['merchantName']);
        }
        // ensure the json data is a string
        if (data['openTextField'] && !(typeof data['openTextField'] === 'string' || data['openTextField'] instanceof String)) {
            throw new Error("Expected the field `openTextField` to be a primitive type in the JSON string but got " + data['openTextField']);
        }
        // ensure the json data is a string
        if (data['orderFormId'] && !(typeof data['orderFormId'] === 'string' || data['orderFormId'] instanceof String)) {
            throw new Error("Expected the field `orderFormId` to be a primitive type in the JSON string but got " + data['orderFormId']);
        }
        // ensure the json data is a string
        if (data['orderGroup'] && !(typeof data['orderGroup'] === 'string' || data['orderGroup'] instanceof String)) {
            throw new Error("Expected the field `orderGroup` to be a primitive type in the JSON string but got " + data['orderGroup']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        // validate the optional field `packageAttachment`
        if (data['packageAttachment']) { // data not null
          PackageAttachment.validateJSON(data['packageAttachment']);
        }
        // validate the optional field `paymentData`
        if (data['paymentData']) { // data not null
          PaymentData.validateJSON(data['paymentData']);
        }
        // validate the optional field `ratesAndBenefitsData`
        if (data['ratesAndBenefitsData']) { // data not null
          RatesAndBenefitsData.validateJSON(data['ratesAndBenefitsData']);
        }
        // ensure the json data is a string
        if (data['salesChannel'] && !(typeof data['salesChannel'] === 'string' || data['salesChannel'] instanceof String)) {
            throw new Error("Expected the field `salesChannel` to be a primitive type in the JSON string but got " + data['salesChannel']);
        }
        // ensure the json data is a string
        if (data['sellerOrderId'] && !(typeof data['sellerOrderId'] === 'string' || data['sellerOrderId'] instanceof String)) {
            throw new Error("Expected the field `sellerOrderId` to be a primitive type in the JSON string but got " + data['sellerOrderId']);
        }
        if (data['sellers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sellers'])) {
                throw new Error("Expected the field `sellers` to be an array in the JSON data but got " + data['sellers']);
            }
            // validate the optional field `sellers` (array)
            for (const item of data['sellers']) {
                Seller.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sequence'] && !(typeof data['sequence'] === 'string' || data['sequence'] instanceof String)) {
            throw new Error("Expected the field `sequence` to be a primitive type in the JSON string but got " + data['sequence']);
        }
        // validate the optional field `shippingData`
        if (data['shippingData']) { // data not null
          ShippingData.validateJSON(data['shippingData']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['statusDescription'] && !(typeof data['statusDescription'] === 'string' || data['statusDescription'] instanceof String)) {
            throw new Error("Expected the field `statusDescription` to be a primitive type in the JSON string but got " + data['statusDescription']);
        }
        // validate the optional field `storePreferencesData`
        if (data['storePreferencesData']) { // data not null
          StorePreferencesData.validateJSON(data['storePreferencesData']);
        }
        if (data['totals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['totals'])) {
                throw new Error("Expected the field `totals` to be an array in the JSON data but got " + data['totals']);
            }
            // validate the optional field `totals` (array)
            for (const item of data['totals']) {
                Total.validateJSON(item);
            };
        }

        return true;
    }


}

GetOrder.RequiredProperties = ["affiliateId", "allowCancellation", "allowEdition", "approvedBy", "authorizedDate", "callCenterOperatorData", "cancelReason", "cancelledBy", "changesAttachment", "clientProfileData", "commercialConditionData", "creationDate", "customData", "emailTracked", "followUpEmail", "giftRegistryData", "hostname", "invoiceData", "invoicedDate", "isCheckedIn", "isCompleted", "items", "lastChange", "lastMessage", "marketingData", "marketplace", "marketplaceItems", "marketplaceOrderId", "marketplaceServicesEndpoint", "merchantName", "openTextField", "orderFormId", "orderGroup", "orderId", "origin", "packageAttachment", "paymentData", "ratesAndBenefitsData", "roundingError", "salesChannel", "sellerOrderId", "sellers", "sequence", "shippingData", "status", "statusDescription", "storePreferencesData", "totals", "value"];

/**
 * @member {String} affiliateId
 */
GetOrder.prototype['affiliateId'] = undefined;

/**
 * @member {Boolean} allowCancellation
 */
GetOrder.prototype['allowCancellation'] = undefined;

/**
 * @member {Boolean} allowEdition
 */
GetOrder.prototype['allowEdition'] = undefined;

/**
 * @member {String} approvedBy
 */
GetOrder.prototype['approvedBy'] = undefined;

/**
 * @member {String} authorizedDate
 */
GetOrder.prototype['authorizedDate'] = undefined;

/**
 * @member {String} callCenterOperatorData
 */
GetOrder.prototype['callCenterOperatorData'] = undefined;

/**
 * Explanation for cancellation
 * @member {String} cancelReason
 */
GetOrder.prototype['cancelReason'] = undefined;

/**
 * User that canceled the order.
 * @member {String} cancelledBy
 */
GetOrder.prototype['cancelledBy'] = undefined;

/**
 * @member {module:model/ChangesAttachment} changesAttachment
 */
GetOrder.prototype['changesAttachment'] = undefined;

/**
 * @member {module:model/ClientProfileData} clientProfileData
 */
GetOrder.prototype['clientProfileData'] = undefined;

/**
 * @member {String} commercialConditionData
 */
GetOrder.prototype['commercialConditionData'] = undefined;

/**
 * @member {String} creationDate
 */
GetOrder.prototype['creationDate'] = undefined;

/**
 * @member {String} customData
 */
GetOrder.prototype['customData'] = undefined;

/**
 * @member {String} emailTracked
 */
GetOrder.prototype['emailTracked'] = undefined;

/**
 * @member {String} followUpEmail
 */
GetOrder.prototype['followUpEmail'] = undefined;

/**
 * @member {String} giftRegistryData
 */
GetOrder.prototype['giftRegistryData'] = undefined;

/**
 * @member {String} hostname
 */
GetOrder.prototype['hostname'] = undefined;

/**
 * Information pertinent to the order's invoice.
 * @member {Object} invoiceData
 */
GetOrder.prototype['invoiceData'] = undefined;

/**
 * @member {String} invoicedDate
 */
GetOrder.prototype['invoicedDate'] = undefined;

/**
 * @member {Boolean} isCheckedIn
 */
GetOrder.prototype['isCheckedIn'] = undefined;

/**
 * @member {Boolean} isCompleted
 */
GetOrder.prototype['isCompleted'] = undefined;

/**
 * 
 * @member {Array.<module:model/Item>} items
 */
GetOrder.prototype['items'] = undefined;

/**
 * @member {String} lastChange
 */
GetOrder.prototype['lastChange'] = undefined;

/**
 * @member {String} lastMessage
 */
GetOrder.prototype['lastMessage'] = undefined;

/**
 * @member {String} marketingData
 */
GetOrder.prototype['marketingData'] = undefined;

/**
 * @member {module:model/Marketplace} marketplace
 */
GetOrder.prototype['marketplace'] = undefined;

/**
 * 
 * @member {Array.<String>} marketplaceItems
 */
GetOrder.prototype['marketplaceItems'] = undefined;

/**
 * @member {String} marketplaceOrderId
 */
GetOrder.prototype['marketplaceOrderId'] = undefined;

/**
 * @member {String} marketplaceServicesEndpoint
 */
GetOrder.prototype['marketplaceServicesEndpoint'] = undefined;

/**
 * @member {String} merchantName
 */
GetOrder.prototype['merchantName'] = undefined;

/**
 * This field must be filled in using the following format:   ```  {      \"fieldExample\": \"ValueExample\"    }  ```  
 * @member {String} openTextField
 */
GetOrder.prototype['openTextField'] = undefined;

/**
 * @member {String} orderFormId
 */
GetOrder.prototype['orderFormId'] = undefined;

/**
 * @member {String} orderGroup
 */
GetOrder.prototype['orderGroup'] = undefined;

/**
 * @member {String} orderId
 */
GetOrder.prototype['orderId'] = undefined;

/**
 * @member {String} origin
 */
GetOrder.prototype['origin'] = undefined;

/**
 * @member {module:model/PackageAttachment} packageAttachment
 */
GetOrder.prototype['packageAttachment'] = undefined;

/**
 * @member {module:model/PaymentData} paymentData
 */
GetOrder.prototype['paymentData'] = undefined;

/**
 * @member {module:model/RatesAndBenefitsData} ratesAndBenefitsData
 */
GetOrder.prototype['ratesAndBenefitsData'] = undefined;

/**
 * @member {Number} roundingError
 */
GetOrder.prototype['roundingError'] = undefined;

/**
 * @member {String} salesChannel
 */
GetOrder.prototype['salesChannel'] = undefined;

/**
 * @member {String} sellerOrderId
 */
GetOrder.prototype['sellerOrderId'] = undefined;

/**
 * 
 * @member {Array.<module:model/Seller>} sellers
 */
GetOrder.prototype['sellers'] = undefined;

/**
 * @member {String} sequence
 */
GetOrder.prototype['sequence'] = undefined;

/**
 * @member {module:model/ShippingData} shippingData
 */
GetOrder.prototype['shippingData'] = undefined;

/**
 * @member {String} status
 */
GetOrder.prototype['status'] = undefined;

/**
 * `Deprecated`. Status description which is displayed on the Admin panel. This field is obsolete and may not return any value.
 * @member {String} statusDescription
 */
GetOrder.prototype['statusDescription'] = undefined;

/**
 * @member {module:model/StorePreferencesData} storePreferencesData
 */
GetOrder.prototype['storePreferencesData'] = undefined;

/**
 * 
 * @member {Array.<module:model/Total>} totals
 */
GetOrder.prototype['totals'] = undefined;

/**
 * @member {Number} value
 */
GetOrder.prototype['value'] = undefined;






export default GetOrder;

