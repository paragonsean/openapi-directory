/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RegisterChangeRequestItemsAddedInner from './RegisterChangeRequestItemsAddedInner';
import RegisterChangeRequestItemsRemovedInner from './RegisterChangeRequestItemsRemovedInner';

/**
 * The RegisterChangeRequest model module.
 * @module model/RegisterChangeRequest
 * @version 1.0
 */
class RegisterChangeRequest {
    /**
     * Constructs a new <code>RegisterChangeRequest</code>.
     * @alias module:model/RegisterChangeRequest
     * @param discountValue {Number} This field can be used to apply a discount to the total value of the order. Value in cents.
     * @param incrementValue {Number} This field can be used to increment the total value of the order. Value in cents.
     * @param reason {String} Reason for order change. This may be shown to the shopper in the UI or transactional emails.
     * @param requestId {String} Request identification of the change. Only the first change made with each `requestId` will be effective on a given order. Use different IDs for different changes to the same order.
     */
    constructor(discountValue, incrementValue, reason, requestId) { 
        
        RegisterChangeRequest.initialize(this, discountValue, incrementValue, reason, requestId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, discountValue, incrementValue, reason, requestId) { 
        obj['discountValue'] = discountValue || 100;
        obj['incrementValue'] = incrementValue || 100;
        obj['reason'] = reason || 'Stock shortage';
        obj['requestId'] = requestId || 'change-request-0123';
    }

    /**
     * Constructs a <code>RegisterChangeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegisterChangeRequest} obj Optional instance to populate.
     * @return {module:model/RegisterChangeRequest} The populated <code>RegisterChangeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegisterChangeRequest();

            if (data.hasOwnProperty('discountValue')) {
                obj['discountValue'] = ApiClient.convertToType(data['discountValue'], 'Number');
            }
            if (data.hasOwnProperty('incrementValue')) {
                obj['incrementValue'] = ApiClient.convertToType(data['incrementValue'], 'Number');
            }
            if (data.hasOwnProperty('itemsAdded')) {
                obj['itemsAdded'] = ApiClient.convertToType(data['itemsAdded'], [RegisterChangeRequestItemsAddedInner]);
            }
            if (data.hasOwnProperty('itemsRemoved')) {
                obj['itemsRemoved'] = ApiClient.convertToType(data['itemsRemoved'], [RegisterChangeRequestItemsRemovedInner]);
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegisterChangeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegisterChangeRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RegisterChangeRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['itemsAdded']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['itemsAdded'])) {
                throw new Error("Expected the field `itemsAdded` to be an array in the JSON data but got " + data['itemsAdded']);
            }
            // validate the optional field `itemsAdded` (array)
            for (const item of data['itemsAdded']) {
                RegisterChangeRequestItemsAddedInner.validateJSON(item);
            };
        }
        if (data['itemsRemoved']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['itemsRemoved'])) {
                throw new Error("Expected the field `itemsRemoved` to be an array in the JSON data but got " + data['itemsRemoved']);
            }
            // validate the optional field `itemsRemoved` (array)
            for (const item of data['itemsRemoved']) {
                RegisterChangeRequestItemsRemovedInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['requestId'] && !(typeof data['requestId'] === 'string' || data['requestId'] instanceof String)) {
            throw new Error("Expected the field `requestId` to be a primitive type in the JSON string but got " + data['requestId']);
        }

        return true;
    }


}

RegisterChangeRequest.RequiredProperties = ["discountValue", "incrementValue", "reason", "requestId"];

/**
 * This field can be used to apply a discount to the total value of the order. Value in cents.
 * @member {Number} discountValue
 * @default 100
 */
RegisterChangeRequest.prototype['discountValue'] = 100;

/**
 * This field can be used to increment the total value of the order. Value in cents.
 * @member {Number} incrementValue
 * @default 100
 */
RegisterChangeRequest.prototype['incrementValue'] = 100;

/**
 * List of items that should be added to the order.
 * @member {Array.<module:model/RegisterChangeRequestItemsAddedInner>} itemsAdded
 */
RegisterChangeRequest.prototype['itemsAdded'] = undefined;

/**
 * List of items that should be removed from the order.
 * @member {Array.<module:model/RegisterChangeRequestItemsRemovedInner>} itemsRemoved
 */
RegisterChangeRequest.prototype['itemsRemoved'] = undefined;

/**
 * Reason for order change. This may be shown to the shopper in the UI or transactional emails.
 * @member {String} reason
 * @default 'Stock shortage'
 */
RegisterChangeRequest.prototype['reason'] = 'Stock shortage';

/**
 * Request identification of the change. Only the first change made with each `requestId` will be effective on a given order. Use different IDs for different changes to the same order.
 * @member {String} requestId
 * @default 'change-request-0123'
 */
RegisterChangeRequest.prototype['requestId'] = 'change-request-0123';






export default RegisterChangeRequest;

