/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentConnectorResponses from './PaymentConnectorResponses';

/**
 * The Payment model module.
 * @module model/Payment
 * @version 1.0
 */
class Payment {
    /**
     * Constructs a new <code>Payment</code>.
     * Payment details.
     * @alias module:model/Payment
     * @param accountId {String} Payment's account ID.
     * @param bankIssuedInvoiceBarCodeNumber {String} Number of the bank issued invoice bar code.
     * @param bankIssuedInvoiceBarCodeType {String} Type of the bank issued invoice bar code.
     * @param bankIssuedInvoiceIdentificationNumber {String} Numeric sequence that identifies the bank issued invoice.
     * @param bankIssuedInvoiceIdentificationNumberFormatted {String} Bank issued invoice ID formatted.
     * @param billingAddress {Object} Billing address information.
     * @param cardHolder {String} Name of the person who owns the card.
     * @param cardNumber {String} Numeric sequence of the card used in the transaction.
     * @param connectorResponses {module:model/PaymentConnectorResponses} 
     * @param cvv2 {String} Card Verification Value (CVV2) is a security code used by payment processors to reduce fraudulent credit and debit card transactions.
     * @param dueDate {String} Payment due date, with the format `yyyy-mm-dd`.
     * @param expireMonth {String} Expire month of the card used in the transaction (2-digits).
     * @param expireYear {String} Expire year of the card used in the transaction (4-digits).
     * @param firstDigits {String} Fist digits of the card used in the transaction.
     * @param giftCardAsDiscount {Boolean} When this field is set as `true`, the Gift Card is a discount over the price, and when set as `false`, it is not a discount.
     * @param giftCardCaption {String} Gift Card's caption.
     * @param giftCardId {String} Gift Card's ID.
     * @param giftCardName {String} Gift Card's name.
     * @param giftCardProvider {String} Gift Card provider's ID.
     * @param group {String} Name of the collection the Gift Card belongs to.
     * @param id {String} VTEX payment ID that can be used as unique identifier.
     * @param installments {Number} Number of payment installments.
     * @param koinUrl {String} Payment's account ID.
     * @param lastDigits {String} Last digits of the card used in the transaction.
     * @param parentAccountId {String} This field retrieves the main account if the payment was made in a subaccount.
     * @param paymentSystem {String} Payment system's ID.
     * @param paymentSystemName {String} Payment system's name.
     * @param redemptionCode {String} Code for the customer to use the Gift Card.
     * @param referenceValue {Number} Payment's reference value in cents.
     * @param tid {String} Provider's unique identifier for the transaction.
     * @param url {String} Payment's URL.
     * @param value {Number} Payment's final amount in cents.
     */
    constructor(accountId, bankIssuedInvoiceBarCodeNumber, bankIssuedInvoiceBarCodeType, bankIssuedInvoiceIdentificationNumber, bankIssuedInvoiceIdentificationNumberFormatted, billingAddress, cardHolder, cardNumber, connectorResponses, cvv2, dueDate, expireMonth, expireYear, firstDigits, giftCardAsDiscount, giftCardCaption, giftCardId, giftCardName, giftCardProvider, group, id, installments, koinUrl, lastDigits, parentAccountId, paymentSystem, paymentSystemName, redemptionCode, referenceValue, tid, url, value) { 
        
        Payment.initialize(this, accountId, bankIssuedInvoiceBarCodeNumber, bankIssuedInvoiceBarCodeType, bankIssuedInvoiceIdentificationNumber, bankIssuedInvoiceIdentificationNumberFormatted, billingAddress, cardHolder, cardNumber, connectorResponses, cvv2, dueDate, expireMonth, expireYear, firstDigits, giftCardAsDiscount, giftCardCaption, giftCardId, giftCardName, giftCardProvider, group, id, installments, koinUrl, lastDigits, parentAccountId, paymentSystem, paymentSystemName, redemptionCode, referenceValue, tid, url, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, bankIssuedInvoiceBarCodeNumber, bankIssuedInvoiceBarCodeType, bankIssuedInvoiceIdentificationNumber, bankIssuedInvoiceIdentificationNumberFormatted, billingAddress, cardHolder, cardNumber, connectorResponses, cvv2, dueDate, expireMonth, expireYear, firstDigits, giftCardAsDiscount, giftCardCaption, giftCardId, giftCardName, giftCardProvider, group, id, installments, koinUrl, lastDigits, parentAccountId, paymentSystem, paymentSystemName, redemptionCode, referenceValue, tid, url, value) { 
        obj['accountId'] = accountId;
        obj['bankIssuedInvoiceBarCodeNumber'] = bankIssuedInvoiceBarCodeNumber;
        obj['bankIssuedInvoiceBarCodeType'] = bankIssuedInvoiceBarCodeType;
        obj['bankIssuedInvoiceIdentificationNumber'] = bankIssuedInvoiceIdentificationNumber;
        obj['bankIssuedInvoiceIdentificationNumberFormatted'] = bankIssuedInvoiceIdentificationNumberFormatted;
        obj['billingAddress'] = billingAddress;
        obj['cardHolder'] = cardHolder;
        obj['cardNumber'] = cardNumber;
        obj['connectorResponses'] = connectorResponses;
        obj['cvv2'] = cvv2;
        obj['dueDate'] = dueDate;
        obj['expireMonth'] = expireMonth;
        obj['expireYear'] = expireYear;
        obj['firstDigits'] = firstDigits;
        obj['giftCardAsDiscount'] = giftCardAsDiscount;
        obj['giftCardCaption'] = giftCardCaption;
        obj['giftCardId'] = giftCardId;
        obj['giftCardName'] = giftCardName;
        obj['giftCardProvider'] = giftCardProvider;
        obj['group'] = group;
        obj['id'] = id;
        obj['installments'] = installments;
        obj['koinUrl'] = koinUrl;
        obj['lastDigits'] = lastDigits;
        obj['parentAccountId'] = parentAccountId;
        obj['paymentSystem'] = paymentSystem;
        obj['paymentSystemName'] = paymentSystemName;
        obj['redemptionCode'] = redemptionCode;
        obj['referenceValue'] = referenceValue;
        obj['tid'] = tid;
        obj['url'] = url;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>Payment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Payment} obj Optional instance to populate.
     * @return {module:model/Payment} The populated <code>Payment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Payment();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('bankIssuedInvoiceBarCodeNumber')) {
                obj['bankIssuedInvoiceBarCodeNumber'] = ApiClient.convertToType(data['bankIssuedInvoiceBarCodeNumber'], 'String');
            }
            if (data.hasOwnProperty('bankIssuedInvoiceBarCodeType')) {
                obj['bankIssuedInvoiceBarCodeType'] = ApiClient.convertToType(data['bankIssuedInvoiceBarCodeType'], 'String');
            }
            if (data.hasOwnProperty('bankIssuedInvoiceIdentificationNumber')) {
                obj['bankIssuedInvoiceIdentificationNumber'] = ApiClient.convertToType(data['bankIssuedInvoiceIdentificationNumber'], 'String');
            }
            if (data.hasOwnProperty('bankIssuedInvoiceIdentificationNumberFormatted')) {
                obj['bankIssuedInvoiceIdentificationNumberFormatted'] = ApiClient.convertToType(data['bankIssuedInvoiceIdentificationNumberFormatted'], 'String');
            }
            if (data.hasOwnProperty('billingAddress')) {
                obj['billingAddress'] = ApiClient.convertToType(data['billingAddress'], Object);
            }
            if (data.hasOwnProperty('cardHolder')) {
                obj['cardHolder'] = ApiClient.convertToType(data['cardHolder'], 'String');
            }
            if (data.hasOwnProperty('cardNumber')) {
                obj['cardNumber'] = ApiClient.convertToType(data['cardNumber'], 'String');
            }
            if (data.hasOwnProperty('connectorResponses')) {
                obj['connectorResponses'] = PaymentConnectorResponses.constructFromObject(data['connectorResponses']);
            }
            if (data.hasOwnProperty('cvv2')) {
                obj['cvv2'] = ApiClient.convertToType(data['cvv2'], 'String');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'String');
            }
            if (data.hasOwnProperty('expireMonth')) {
                obj['expireMonth'] = ApiClient.convertToType(data['expireMonth'], 'String');
            }
            if (data.hasOwnProperty('expireYear')) {
                obj['expireYear'] = ApiClient.convertToType(data['expireYear'], 'String');
            }
            if (data.hasOwnProperty('firstDigits')) {
                obj['firstDigits'] = ApiClient.convertToType(data['firstDigits'], 'String');
            }
            if (data.hasOwnProperty('giftCardAsDiscount')) {
                obj['giftCardAsDiscount'] = ApiClient.convertToType(data['giftCardAsDiscount'], 'Boolean');
            }
            if (data.hasOwnProperty('giftCardCaption')) {
                obj['giftCardCaption'] = ApiClient.convertToType(data['giftCardCaption'], 'String');
            }
            if (data.hasOwnProperty('giftCardId')) {
                obj['giftCardId'] = ApiClient.convertToType(data['giftCardId'], 'String');
            }
            if (data.hasOwnProperty('giftCardName')) {
                obj['giftCardName'] = ApiClient.convertToType(data['giftCardName'], 'String');
            }
            if (data.hasOwnProperty('giftCardProvider')) {
                obj['giftCardProvider'] = ApiClient.convertToType(data['giftCardProvider'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('installments')) {
                obj['installments'] = ApiClient.convertToType(data['installments'], 'Number');
            }
            if (data.hasOwnProperty('koinUrl')) {
                obj['koinUrl'] = ApiClient.convertToType(data['koinUrl'], 'String');
            }
            if (data.hasOwnProperty('lastDigits')) {
                obj['lastDigits'] = ApiClient.convertToType(data['lastDigits'], 'String');
            }
            if (data.hasOwnProperty('parentAccountId')) {
                obj['parentAccountId'] = ApiClient.convertToType(data['parentAccountId'], 'String');
            }
            if (data.hasOwnProperty('paymentSystem')) {
                obj['paymentSystem'] = ApiClient.convertToType(data['paymentSystem'], 'String');
            }
            if (data.hasOwnProperty('paymentSystemName')) {
                obj['paymentSystemName'] = ApiClient.convertToType(data['paymentSystemName'], 'String');
            }
            if (data.hasOwnProperty('redemptionCode')) {
                obj['redemptionCode'] = ApiClient.convertToType(data['redemptionCode'], 'String');
            }
            if (data.hasOwnProperty('referenceValue')) {
                obj['referenceValue'] = ApiClient.convertToType(data['referenceValue'], 'Number');
            }
            if (data.hasOwnProperty('tid')) {
                obj['tid'] = ApiClient.convertToType(data['tid'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Payment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Payment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Payment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['bankIssuedInvoiceBarCodeNumber'] && !(typeof data['bankIssuedInvoiceBarCodeNumber'] === 'string' || data['bankIssuedInvoiceBarCodeNumber'] instanceof String)) {
            throw new Error("Expected the field `bankIssuedInvoiceBarCodeNumber` to be a primitive type in the JSON string but got " + data['bankIssuedInvoiceBarCodeNumber']);
        }
        // ensure the json data is a string
        if (data['bankIssuedInvoiceBarCodeType'] && !(typeof data['bankIssuedInvoiceBarCodeType'] === 'string' || data['bankIssuedInvoiceBarCodeType'] instanceof String)) {
            throw new Error("Expected the field `bankIssuedInvoiceBarCodeType` to be a primitive type in the JSON string but got " + data['bankIssuedInvoiceBarCodeType']);
        }
        // ensure the json data is a string
        if (data['bankIssuedInvoiceIdentificationNumber'] && !(typeof data['bankIssuedInvoiceIdentificationNumber'] === 'string' || data['bankIssuedInvoiceIdentificationNumber'] instanceof String)) {
            throw new Error("Expected the field `bankIssuedInvoiceIdentificationNumber` to be a primitive type in the JSON string but got " + data['bankIssuedInvoiceIdentificationNumber']);
        }
        // ensure the json data is a string
        if (data['bankIssuedInvoiceIdentificationNumberFormatted'] && !(typeof data['bankIssuedInvoiceIdentificationNumberFormatted'] === 'string' || data['bankIssuedInvoiceIdentificationNumberFormatted'] instanceof String)) {
            throw new Error("Expected the field `bankIssuedInvoiceIdentificationNumberFormatted` to be a primitive type in the JSON string but got " + data['bankIssuedInvoiceIdentificationNumberFormatted']);
        }
        // ensure the json data is a string
        if (data['cardHolder'] && !(typeof data['cardHolder'] === 'string' || data['cardHolder'] instanceof String)) {
            throw new Error("Expected the field `cardHolder` to be a primitive type in the JSON string but got " + data['cardHolder']);
        }
        // ensure the json data is a string
        if (data['cardNumber'] && !(typeof data['cardNumber'] === 'string' || data['cardNumber'] instanceof String)) {
            throw new Error("Expected the field `cardNumber` to be a primitive type in the JSON string but got " + data['cardNumber']);
        }
        // validate the optional field `connectorResponses`
        if (data['connectorResponses']) { // data not null
          PaymentConnectorResponses.validateJSON(data['connectorResponses']);
        }
        // ensure the json data is a string
        if (data['cvv2'] && !(typeof data['cvv2'] === 'string' || data['cvv2'] instanceof String)) {
            throw new Error("Expected the field `cvv2` to be a primitive type in the JSON string but got " + data['cvv2']);
        }
        // ensure the json data is a string
        if (data['dueDate'] && !(typeof data['dueDate'] === 'string' || data['dueDate'] instanceof String)) {
            throw new Error("Expected the field `dueDate` to be a primitive type in the JSON string but got " + data['dueDate']);
        }
        // ensure the json data is a string
        if (data['expireMonth'] && !(typeof data['expireMonth'] === 'string' || data['expireMonth'] instanceof String)) {
            throw new Error("Expected the field `expireMonth` to be a primitive type in the JSON string but got " + data['expireMonth']);
        }
        // ensure the json data is a string
        if (data['expireYear'] && !(typeof data['expireYear'] === 'string' || data['expireYear'] instanceof String)) {
            throw new Error("Expected the field `expireYear` to be a primitive type in the JSON string but got " + data['expireYear']);
        }
        // ensure the json data is a string
        if (data['firstDigits'] && !(typeof data['firstDigits'] === 'string' || data['firstDigits'] instanceof String)) {
            throw new Error("Expected the field `firstDigits` to be a primitive type in the JSON string but got " + data['firstDigits']);
        }
        // ensure the json data is a string
        if (data['giftCardCaption'] && !(typeof data['giftCardCaption'] === 'string' || data['giftCardCaption'] instanceof String)) {
            throw new Error("Expected the field `giftCardCaption` to be a primitive type in the JSON string but got " + data['giftCardCaption']);
        }
        // ensure the json data is a string
        if (data['giftCardId'] && !(typeof data['giftCardId'] === 'string' || data['giftCardId'] instanceof String)) {
            throw new Error("Expected the field `giftCardId` to be a primitive type in the JSON string but got " + data['giftCardId']);
        }
        // ensure the json data is a string
        if (data['giftCardName'] && !(typeof data['giftCardName'] === 'string' || data['giftCardName'] instanceof String)) {
            throw new Error("Expected the field `giftCardName` to be a primitive type in the JSON string but got " + data['giftCardName']);
        }
        // ensure the json data is a string
        if (data['giftCardProvider'] && !(typeof data['giftCardProvider'] === 'string' || data['giftCardProvider'] instanceof String)) {
            throw new Error("Expected the field `giftCardProvider` to be a primitive type in the JSON string but got " + data['giftCardProvider']);
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['koinUrl'] && !(typeof data['koinUrl'] === 'string' || data['koinUrl'] instanceof String)) {
            throw new Error("Expected the field `koinUrl` to be a primitive type in the JSON string but got " + data['koinUrl']);
        }
        // ensure the json data is a string
        if (data['lastDigits'] && !(typeof data['lastDigits'] === 'string' || data['lastDigits'] instanceof String)) {
            throw new Error("Expected the field `lastDigits` to be a primitive type in the JSON string but got " + data['lastDigits']);
        }
        // ensure the json data is a string
        if (data['parentAccountId'] && !(typeof data['parentAccountId'] === 'string' || data['parentAccountId'] instanceof String)) {
            throw new Error("Expected the field `parentAccountId` to be a primitive type in the JSON string but got " + data['parentAccountId']);
        }
        // ensure the json data is a string
        if (data['paymentSystem'] && !(typeof data['paymentSystem'] === 'string' || data['paymentSystem'] instanceof String)) {
            throw new Error("Expected the field `paymentSystem` to be a primitive type in the JSON string but got " + data['paymentSystem']);
        }
        // ensure the json data is a string
        if (data['paymentSystemName'] && !(typeof data['paymentSystemName'] === 'string' || data['paymentSystemName'] instanceof String)) {
            throw new Error("Expected the field `paymentSystemName` to be a primitive type in the JSON string but got " + data['paymentSystemName']);
        }
        // ensure the json data is a string
        if (data['redemptionCode'] && !(typeof data['redemptionCode'] === 'string' || data['redemptionCode'] instanceof String)) {
            throw new Error("Expected the field `redemptionCode` to be a primitive type in the JSON string but got " + data['redemptionCode']);
        }
        // ensure the json data is a string
        if (data['tid'] && !(typeof data['tid'] === 'string' || data['tid'] instanceof String)) {
            throw new Error("Expected the field `tid` to be a primitive type in the JSON string but got " + data['tid']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Payment.RequiredProperties = ["accountId", "bankIssuedInvoiceBarCodeNumber", "bankIssuedInvoiceBarCodeType", "bankIssuedInvoiceIdentificationNumber", "bankIssuedInvoiceIdentificationNumberFormatted", "billingAddress", "cardHolder", "cardNumber", "connectorResponses", "cvv2", "dueDate", "expireMonth", "expireYear", "firstDigits", "giftCardAsDiscount", "giftCardCaption", "giftCardId", "giftCardName", "giftCardProvider", "group", "id", "installments", "koinUrl", "lastDigits", "parentAccountId", "paymentSystem", "paymentSystemName", "redemptionCode", "referenceValue", "tid", "url", "value"];

/**
 * Payment's account ID.
 * @member {String} accountId
 */
Payment.prototype['accountId'] = undefined;

/**
 * Number of the bank issued invoice bar code.
 * @member {String} bankIssuedInvoiceBarCodeNumber
 */
Payment.prototype['bankIssuedInvoiceBarCodeNumber'] = undefined;

/**
 * Type of the bank issued invoice bar code.
 * @member {String} bankIssuedInvoiceBarCodeType
 */
Payment.prototype['bankIssuedInvoiceBarCodeType'] = undefined;

/**
 * Numeric sequence that identifies the bank issued invoice.
 * @member {String} bankIssuedInvoiceIdentificationNumber
 */
Payment.prototype['bankIssuedInvoiceIdentificationNumber'] = undefined;

/**
 * Bank issued invoice ID formatted.
 * @member {String} bankIssuedInvoiceIdentificationNumberFormatted
 */
Payment.prototype['bankIssuedInvoiceIdentificationNumberFormatted'] = undefined;

/**
 * Billing address information.
 * @member {Object} billingAddress
 */
Payment.prototype['billingAddress'] = undefined;

/**
 * Name of the person who owns the card.
 * @member {String} cardHolder
 */
Payment.prototype['cardHolder'] = undefined;

/**
 * Numeric sequence of the card used in the transaction.
 * @member {String} cardNumber
 */
Payment.prototype['cardNumber'] = undefined;

/**
 * @member {module:model/PaymentConnectorResponses} connectorResponses
 */
Payment.prototype['connectorResponses'] = undefined;

/**
 * Card Verification Value (CVV2) is a security code used by payment processors to reduce fraudulent credit and debit card transactions.
 * @member {String} cvv2
 */
Payment.prototype['cvv2'] = undefined;

/**
 * Payment due date, with the format `yyyy-mm-dd`.
 * @member {String} dueDate
 */
Payment.prototype['dueDate'] = undefined;

/**
 * Expire month of the card used in the transaction (2-digits).
 * @member {String} expireMonth
 */
Payment.prototype['expireMonth'] = undefined;

/**
 * Expire year of the card used in the transaction (4-digits).
 * @member {String} expireYear
 */
Payment.prototype['expireYear'] = undefined;

/**
 * Fist digits of the card used in the transaction.
 * @member {String} firstDigits
 */
Payment.prototype['firstDigits'] = undefined;

/**
 * When this field is set as `true`, the Gift Card is a discount over the price, and when set as `false`, it is not a discount.
 * @member {Boolean} giftCardAsDiscount
 */
Payment.prototype['giftCardAsDiscount'] = undefined;

/**
 * Gift Card's caption.
 * @member {String} giftCardCaption
 */
Payment.prototype['giftCardCaption'] = undefined;

/**
 * Gift Card's ID.
 * @member {String} giftCardId
 */
Payment.prototype['giftCardId'] = undefined;

/**
 * Gift Card's name.
 * @member {String} giftCardName
 */
Payment.prototype['giftCardName'] = undefined;

/**
 * Gift Card provider's ID.
 * @member {String} giftCardProvider
 */
Payment.prototype['giftCardProvider'] = undefined;

/**
 * Name of the collection the Gift Card belongs to.
 * @member {String} group
 */
Payment.prototype['group'] = undefined;

/**
 * VTEX payment ID that can be used as unique identifier.
 * @member {String} id
 */
Payment.prototype['id'] = undefined;

/**
 * Number of payment installments.
 * @member {Number} installments
 */
Payment.prototype['installments'] = undefined;

/**
 * Payment's account ID.
 * @member {String} koinUrl
 */
Payment.prototype['koinUrl'] = undefined;

/**
 * Last digits of the card used in the transaction.
 * @member {String} lastDigits
 */
Payment.prototype['lastDigits'] = undefined;

/**
 * This field retrieves the main account if the payment was made in a subaccount.
 * @member {String} parentAccountId
 */
Payment.prototype['parentAccountId'] = undefined;

/**
 * Payment system's ID.
 * @member {String} paymentSystem
 */
Payment.prototype['paymentSystem'] = undefined;

/**
 * Payment system's name.
 * @member {String} paymentSystemName
 */
Payment.prototype['paymentSystemName'] = undefined;

/**
 * Code for the customer to use the Gift Card.
 * @member {String} redemptionCode
 */
Payment.prototype['redemptionCode'] = undefined;

/**
 * Payment's reference value in cents.
 * @member {Number} referenceValue
 */
Payment.prototype['referenceValue'] = undefined;

/**
 * Provider's unique identifier for the transaction.
 * @member {String} tid
 */
Payment.prototype['tid'] = undefined;

/**
 * Payment's URL.
 * @member {String} url
 */
Payment.prototype['url'] = undefined;

/**
 * Payment's final amount in cents.
 * @member {Number} value
 */
Payment.prototype['value'] = undefined;






export default Payment;

