/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChangesAttachment from './ChangesAttachment';
import ClientProfileData from './ClientProfileData';
import GetOrder200ResponseItemsInner from './GetOrder200ResponseItemsInner';
import GetOrder200ResponsePackageAttachment from './GetOrder200ResponsePackageAttachment';
import GetOrder200ResponseTotalsInner from './GetOrder200ResponseTotalsInner';
import Marketplace from './Marketplace';
import PaymentData from './PaymentData';
import RatesAndBenefitsData from './RatesAndBenefitsData';
import Seller from './Seller';
import ShippingData from './ShippingData';
import StorePreferencesData from './StorePreferencesData';

/**
 * The GetOrder200Response model module.
 * @module model/GetOrder200Response
 * @version 1.0
 */
class GetOrder200Response {
    /**
     * Constructs a new <code>GetOrder200Response</code>.
     * @alias module:model/GetOrder200Response
     */
    constructor() { 
        
        GetOrder200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetOrder200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetOrder200Response} obj Optional instance to populate.
     * @return {module:model/GetOrder200Response} The populated <code>GetOrder200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetOrder200Response();

            if (data.hasOwnProperty('affiliateId')) {
                obj['affiliateId'] = ApiClient.convertToType(data['affiliateId'], 'String');
            }
            if (data.hasOwnProperty('allowCancellation')) {
                obj['allowCancellation'] = ApiClient.convertToType(data['allowCancellation'], 'Boolean');
            }
            if (data.hasOwnProperty('allowEdition')) {
                obj['allowEdition'] = ApiClient.convertToType(data['allowEdition'], 'Boolean');
            }
            if (data.hasOwnProperty('approvedBy')) {
                obj['approvedBy'] = ApiClient.convertToType(data['approvedBy'], 'String');
            }
            if (data.hasOwnProperty('authorizedDate')) {
                obj['authorizedDate'] = ApiClient.convertToType(data['authorizedDate'], 'String');
            }
            if (data.hasOwnProperty('callCenterOperatorData')) {
                obj['callCenterOperatorData'] = ApiClient.convertToType(data['callCenterOperatorData'], 'String');
            }
            if (data.hasOwnProperty('cancelReason')) {
                obj['cancelReason'] = ApiClient.convertToType(data['cancelReason'], 'String');
            }
            if (data.hasOwnProperty('cancelledBy')) {
                obj['cancelledBy'] = ApiClient.convertToType(data['cancelledBy'], 'String');
            }
            if (data.hasOwnProperty('changesAttachment')) {
                obj['changesAttachment'] = ChangesAttachment.constructFromObject(data['changesAttachment']);
            }
            if (data.hasOwnProperty('clientProfileData')) {
                obj['clientProfileData'] = ClientProfileData.constructFromObject(data['clientProfileData']);
            }
            if (data.hasOwnProperty('commercialConditionData')) {
                obj['commercialConditionData'] = ApiClient.convertToType(data['commercialConditionData'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('customData')) {
                obj['customData'] = ApiClient.convertToType(data['customData'], 'String');
            }
            if (data.hasOwnProperty('emailTracked')) {
                obj['emailTracked'] = ApiClient.convertToType(data['emailTracked'], 'String');
            }
            if (data.hasOwnProperty('followUpEmail')) {
                obj['followUpEmail'] = ApiClient.convertToType(data['followUpEmail'], 'String');
            }
            if (data.hasOwnProperty('giftRegistryData')) {
                obj['giftRegistryData'] = ApiClient.convertToType(data['giftRegistryData'], 'String');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('invoiceData')) {
                obj['invoiceData'] = ApiClient.convertToType(data['invoiceData'], Object);
            }
            if (data.hasOwnProperty('invoicedDate')) {
                obj['invoicedDate'] = ApiClient.convertToType(data['invoicedDate'], 'String');
            }
            if (data.hasOwnProperty('isCheckedIn')) {
                obj['isCheckedIn'] = ApiClient.convertToType(data['isCheckedIn'], 'Boolean');
            }
            if (data.hasOwnProperty('isCompleted')) {
                obj['isCompleted'] = ApiClient.convertToType(data['isCompleted'], 'Boolean');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [GetOrder200ResponseItemsInner]);
            }
            if (data.hasOwnProperty('lastChange')) {
                obj['lastChange'] = ApiClient.convertToType(data['lastChange'], 'String');
            }
            if (data.hasOwnProperty('lastMessage')) {
                obj['lastMessage'] = ApiClient.convertToType(data['lastMessage'], 'String');
            }
            if (data.hasOwnProperty('marketingData')) {
                obj['marketingData'] = ApiClient.convertToType(data['marketingData'], 'String');
            }
            if (data.hasOwnProperty('marketplace')) {
                obj['marketplace'] = Marketplace.constructFromObject(data['marketplace']);
            }
            if (data.hasOwnProperty('marketplaceItems')) {
                obj['marketplaceItems'] = ApiClient.convertToType(data['marketplaceItems'], ['String']);
            }
            if (data.hasOwnProperty('marketplaceOrderId')) {
                obj['marketplaceOrderId'] = ApiClient.convertToType(data['marketplaceOrderId'], 'String');
            }
            if (data.hasOwnProperty('marketplaceServicesEndpoint')) {
                obj['marketplaceServicesEndpoint'] = ApiClient.convertToType(data['marketplaceServicesEndpoint'], 'String');
            }
            if (data.hasOwnProperty('merchantName')) {
                obj['merchantName'] = ApiClient.convertToType(data['merchantName'], 'String');
            }
            if (data.hasOwnProperty('openTextField')) {
                obj['openTextField'] = ApiClient.convertToType(data['openTextField'], 'String');
            }
            if (data.hasOwnProperty('orderFormId')) {
                obj['orderFormId'] = ApiClient.convertToType(data['orderFormId'], 'String');
            }
            if (data.hasOwnProperty('orderGroup')) {
                obj['orderGroup'] = ApiClient.convertToType(data['orderGroup'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('packageAttachment')) {
                obj['packageAttachment'] = GetOrder200ResponsePackageAttachment.constructFromObject(data['packageAttachment']);
            }
            if (data.hasOwnProperty('paymentData')) {
                obj['paymentData'] = PaymentData.constructFromObject(data['paymentData']);
            }
            if (data.hasOwnProperty('ratesAndBenefitsData')) {
                obj['ratesAndBenefitsData'] = RatesAndBenefitsData.constructFromObject(data['ratesAndBenefitsData']);
            }
            if (data.hasOwnProperty('roundingError')) {
                obj['roundingError'] = ApiClient.convertToType(data['roundingError'], 'Number');
            }
            if (data.hasOwnProperty('salesChannel')) {
                obj['salesChannel'] = ApiClient.convertToType(data['salesChannel'], 'String');
            }
            if (data.hasOwnProperty('sellerOrderId')) {
                obj['sellerOrderId'] = ApiClient.convertToType(data['sellerOrderId'], 'String');
            }
            if (data.hasOwnProperty('sellers')) {
                obj['sellers'] = ApiClient.convertToType(data['sellers'], [Seller]);
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'String');
            }
            if (data.hasOwnProperty('shippingData')) {
                obj['shippingData'] = ShippingData.constructFromObject(data['shippingData']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusDescription')) {
                obj['statusDescription'] = ApiClient.convertToType(data['statusDescription'], 'String');
            }
            if (data.hasOwnProperty('storePreferencesData')) {
                obj['storePreferencesData'] = StorePreferencesData.constructFromObject(data['storePreferencesData']);
            }
            if (data.hasOwnProperty('totals')) {
                obj['totals'] = ApiClient.convertToType(data['totals'], [GetOrder200ResponseTotalsInner]);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetOrder200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetOrder200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['affiliateId'] && !(typeof data['affiliateId'] === 'string' || data['affiliateId'] instanceof String)) {
            throw new Error("Expected the field `affiliateId` to be a primitive type in the JSON string but got " + data['affiliateId']);
        }
        // ensure the json data is a string
        if (data['approvedBy'] && !(typeof data['approvedBy'] === 'string' || data['approvedBy'] instanceof String)) {
            throw new Error("Expected the field `approvedBy` to be a primitive type in the JSON string but got " + data['approvedBy']);
        }
        // ensure the json data is a string
        if (data['authorizedDate'] && !(typeof data['authorizedDate'] === 'string' || data['authorizedDate'] instanceof String)) {
            throw new Error("Expected the field `authorizedDate` to be a primitive type in the JSON string but got " + data['authorizedDate']);
        }
        // ensure the json data is a string
        if (data['callCenterOperatorData'] && !(typeof data['callCenterOperatorData'] === 'string' || data['callCenterOperatorData'] instanceof String)) {
            throw new Error("Expected the field `callCenterOperatorData` to be a primitive type in the JSON string but got " + data['callCenterOperatorData']);
        }
        // ensure the json data is a string
        if (data['cancelReason'] && !(typeof data['cancelReason'] === 'string' || data['cancelReason'] instanceof String)) {
            throw new Error("Expected the field `cancelReason` to be a primitive type in the JSON string but got " + data['cancelReason']);
        }
        // ensure the json data is a string
        if (data['cancelledBy'] && !(typeof data['cancelledBy'] === 'string' || data['cancelledBy'] instanceof String)) {
            throw new Error("Expected the field `cancelledBy` to be a primitive type in the JSON string but got " + data['cancelledBy']);
        }
        // validate the optional field `changesAttachment`
        if (data['changesAttachment']) { // data not null
          ChangesAttachment.validateJSON(data['changesAttachment']);
        }
        // validate the optional field `clientProfileData`
        if (data['clientProfileData']) { // data not null
          ClientProfileData.validateJSON(data['clientProfileData']);
        }
        // ensure the json data is a string
        if (data['commercialConditionData'] && !(typeof data['commercialConditionData'] === 'string' || data['commercialConditionData'] instanceof String)) {
            throw new Error("Expected the field `commercialConditionData` to be a primitive type in the JSON string but got " + data['commercialConditionData']);
        }
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // ensure the json data is a string
        if (data['customData'] && !(typeof data['customData'] === 'string' || data['customData'] instanceof String)) {
            throw new Error("Expected the field `customData` to be a primitive type in the JSON string but got " + data['customData']);
        }
        // ensure the json data is a string
        if (data['emailTracked'] && !(typeof data['emailTracked'] === 'string' || data['emailTracked'] instanceof String)) {
            throw new Error("Expected the field `emailTracked` to be a primitive type in the JSON string but got " + data['emailTracked']);
        }
        // ensure the json data is a string
        if (data['followUpEmail'] && !(typeof data['followUpEmail'] === 'string' || data['followUpEmail'] instanceof String)) {
            throw new Error("Expected the field `followUpEmail` to be a primitive type in the JSON string but got " + data['followUpEmail']);
        }
        // ensure the json data is a string
        if (data['giftRegistryData'] && !(typeof data['giftRegistryData'] === 'string' || data['giftRegistryData'] instanceof String)) {
            throw new Error("Expected the field `giftRegistryData` to be a primitive type in the JSON string but got " + data['giftRegistryData']);
        }
        // ensure the json data is a string
        if (data['hostname'] && !(typeof data['hostname'] === 'string' || data['hostname'] instanceof String)) {
            throw new Error("Expected the field `hostname` to be a primitive type in the JSON string but got " + data['hostname']);
        }
        // ensure the json data is a string
        if (data['invoicedDate'] && !(typeof data['invoicedDate'] === 'string' || data['invoicedDate'] instanceof String)) {
            throw new Error("Expected the field `invoicedDate` to be a primitive type in the JSON string but got " + data['invoicedDate']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                GetOrder200ResponseItemsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lastChange'] && !(typeof data['lastChange'] === 'string' || data['lastChange'] instanceof String)) {
            throw new Error("Expected the field `lastChange` to be a primitive type in the JSON string but got " + data['lastChange']);
        }
        // ensure the json data is a string
        if (data['lastMessage'] && !(typeof data['lastMessage'] === 'string' || data['lastMessage'] instanceof String)) {
            throw new Error("Expected the field `lastMessage` to be a primitive type in the JSON string but got " + data['lastMessage']);
        }
        // ensure the json data is a string
        if (data['marketingData'] && !(typeof data['marketingData'] === 'string' || data['marketingData'] instanceof String)) {
            throw new Error("Expected the field `marketingData` to be a primitive type in the JSON string but got " + data['marketingData']);
        }
        // validate the optional field `marketplace`
        if (data['marketplace']) { // data not null
          Marketplace.validateJSON(data['marketplace']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['marketplaceItems'])) {
            throw new Error("Expected the field `marketplaceItems` to be an array in the JSON data but got " + data['marketplaceItems']);
        }
        // ensure the json data is a string
        if (data['marketplaceOrderId'] && !(typeof data['marketplaceOrderId'] === 'string' || data['marketplaceOrderId'] instanceof String)) {
            throw new Error("Expected the field `marketplaceOrderId` to be a primitive type in the JSON string but got " + data['marketplaceOrderId']);
        }
        // ensure the json data is a string
        if (data['marketplaceServicesEndpoint'] && !(typeof data['marketplaceServicesEndpoint'] === 'string' || data['marketplaceServicesEndpoint'] instanceof String)) {
            throw new Error("Expected the field `marketplaceServicesEndpoint` to be a primitive type in the JSON string but got " + data['marketplaceServicesEndpoint']);
        }
        // ensure the json data is a string
        if (data['merchantName'] && !(typeof data['merchantName'] === 'string' || data['merchantName'] instanceof String)) {
            throw new Error("Expected the field `merchantName` to be a primitive type in the JSON string but got " + data['merchantName']);
        }
        // ensure the json data is a string
        if (data['openTextField'] && !(typeof data['openTextField'] === 'string' || data['openTextField'] instanceof String)) {
            throw new Error("Expected the field `openTextField` to be a primitive type in the JSON string but got " + data['openTextField']);
        }
        // ensure the json data is a string
        if (data['orderFormId'] && !(typeof data['orderFormId'] === 'string' || data['orderFormId'] instanceof String)) {
            throw new Error("Expected the field `orderFormId` to be a primitive type in the JSON string but got " + data['orderFormId']);
        }
        // ensure the json data is a string
        if (data['orderGroup'] && !(typeof data['orderGroup'] === 'string' || data['orderGroup'] instanceof String)) {
            throw new Error("Expected the field `orderGroup` to be a primitive type in the JSON string but got " + data['orderGroup']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        // validate the optional field `packageAttachment`
        if (data['packageAttachment']) { // data not null
          GetOrder200ResponsePackageAttachment.validateJSON(data['packageAttachment']);
        }
        // validate the optional field `paymentData`
        if (data['paymentData']) { // data not null
          PaymentData.validateJSON(data['paymentData']);
        }
        // validate the optional field `ratesAndBenefitsData`
        if (data['ratesAndBenefitsData']) { // data not null
          RatesAndBenefitsData.validateJSON(data['ratesAndBenefitsData']);
        }
        // ensure the json data is a string
        if (data['salesChannel'] && !(typeof data['salesChannel'] === 'string' || data['salesChannel'] instanceof String)) {
            throw new Error("Expected the field `salesChannel` to be a primitive type in the JSON string but got " + data['salesChannel']);
        }
        // ensure the json data is a string
        if (data['sellerOrderId'] && !(typeof data['sellerOrderId'] === 'string' || data['sellerOrderId'] instanceof String)) {
            throw new Error("Expected the field `sellerOrderId` to be a primitive type in the JSON string but got " + data['sellerOrderId']);
        }
        if (data['sellers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sellers'])) {
                throw new Error("Expected the field `sellers` to be an array in the JSON data but got " + data['sellers']);
            }
            // validate the optional field `sellers` (array)
            for (const item of data['sellers']) {
                Seller.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sequence'] && !(typeof data['sequence'] === 'string' || data['sequence'] instanceof String)) {
            throw new Error("Expected the field `sequence` to be a primitive type in the JSON string but got " + data['sequence']);
        }
        // validate the optional field `shippingData`
        if (data['shippingData']) { // data not null
          ShippingData.validateJSON(data['shippingData']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['statusDescription'] && !(typeof data['statusDescription'] === 'string' || data['statusDescription'] instanceof String)) {
            throw new Error("Expected the field `statusDescription` to be a primitive type in the JSON string but got " + data['statusDescription']);
        }
        // validate the optional field `storePreferencesData`
        if (data['storePreferencesData']) { // data not null
          StorePreferencesData.validateJSON(data['storePreferencesData']);
        }
        if (data['totals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['totals'])) {
                throw new Error("Expected the field `totals` to be an array in the JSON data but got " + data['totals']);
            }
            // validate the optional field `totals` (array)
            for (const item of data['totals']) {
                GetOrder200ResponseTotalsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Three letter code identifying the marketplace where the order was placed.
 * @member {String} affiliateId
 */
GetOrder200Response.prototype['affiliateId'] = undefined;

/**
 * Indicates whether cancelation is allowed for the order.
 * @member {Boolean} allowCancellation
 */
GetOrder200Response.prototype['allowCancellation'] = undefined;

/**
 * Indicates whether edition is allowed for the order.
 * @member {Boolean} allowEdition
 */
GetOrder200Response.prototype['allowEdition'] = undefined;

/**
 * User that approved the order, in case of manual approval.
 * @member {String} approvedBy
 */
GetOrder200Response.prototype['approvedBy'] = undefined;

/**
 * Date in which the order was authorized in UTC.
 * @member {String} authorizedDate
 */
GetOrder200Response.prototype['authorizedDate'] = undefined;

/**
 * @member {String} callCenterOperatorData
 */
GetOrder200Response.prototype['callCenterOperatorData'] = undefined;

/**
 * Reason for cancelation.
 * @member {String} cancelReason
 */
GetOrder200Response.prototype['cancelReason'] = undefined;

/**
 * User that canceled the order.
 * @member {String} cancelledBy
 */
GetOrder200Response.prototype['cancelledBy'] = undefined;

/**
 * @member {module:model/ChangesAttachment} changesAttachment
 */
GetOrder200Response.prototype['changesAttachment'] = undefined;

/**
 * @member {module:model/ClientProfileData} clientProfileData
 */
GetOrder200Response.prototype['clientProfileData'] = undefined;

/**
 * @member {String} commercialConditionData
 */
GetOrder200Response.prototype['commercialConditionData'] = undefined;

/**
 * Creation date.
 * @member {String} creationDate
 */
GetOrder200Response.prototype['creationDate'] = undefined;

/**
 * @member {String} customData
 */
GetOrder200Response.prototype['customData'] = undefined;

/**
 * Email tracked.
 * @member {String} emailTracked
 */
GetOrder200Response.prototype['emailTracked'] = undefined;

/**
 * @member {String} followUpEmail
 */
GetOrder200Response.prototype['followUpEmail'] = undefined;

/**
 * @member {String} giftRegistryData
 */
GetOrder200Response.prototype['giftRegistryData'] = undefined;

/**
 * @member {String} hostname
 */
GetOrder200Response.prototype['hostname'] = undefined;

/**
 * Information pertinent to the order's invoice.
 * @member {Object} invoiceData
 */
GetOrder200Response.prototype['invoiceData'] = undefined;

/**
 * Date in which the order was invoiced in UTC.
 * @member {String} invoicedDate
 */
GetOrder200Response.prototype['invoicedDate'] = undefined;

/**
 * Indicates whether client is checked in.
 * @member {Boolean} isCheckedIn
 */
GetOrder200Response.prototype['isCheckedIn'] = undefined;

/**
 * @member {Boolean} isCompleted
 */
GetOrder200Response.prototype['isCompleted'] = undefined;

/**
 * Information on each item in the order.
 * @member {Array.<module:model/GetOrder200ResponseItemsInner>} items
 */
GetOrder200Response.prototype['items'] = undefined;

/**
 * Date of last change.
 * @member {String} lastChange
 */
GetOrder200Response.prototype['lastChange'] = undefined;

/**
 * @member {String} lastMessage
 */
GetOrder200Response.prototype['lastMessage'] = undefined;

/**
 * @member {String} marketingData
 */
GetOrder200Response.prototype['marketingData'] = undefined;

/**
 * @member {module:model/Marketplace} marketplace
 */
GetOrder200Response.prototype['marketplace'] = undefined;

/**
 * Marketplace items.
 * @member {Array.<String>} marketplaceItems
 */
GetOrder200Response.prototype['marketplaceItems'] = undefined;

/**
 * ID of the order in the marketplace.
 * @member {String} marketplaceOrderId
 */
GetOrder200Response.prototype['marketplaceOrderId'] = undefined;

/**
 * Marketplace endpoint for post purchase communication.
 * @member {String} marketplaceServicesEndpoint
 */
GetOrder200Response.prototype['marketplaceServicesEndpoint'] = undefined;

/**
 * Merchant name.
 * @member {String} merchantName
 */
GetOrder200Response.prototype['merchantName'] = undefined;

/**
 * @member {String} openTextField
 */
GetOrder200Response.prototype['openTextField'] = undefined;

/**
 * @member {String} orderFormId
 */
GetOrder200Response.prototype['orderFormId'] = undefined;

/**
 * Order group.
 * @member {String} orderGroup
 */
GetOrder200Response.prototype['orderGroup'] = undefined;

/**
 * Order ID.
 * @member {String} orderId
 */
GetOrder200Response.prototype['orderId'] = undefined;

/**
 * Origin.
 * @member {String} origin
 */
GetOrder200Response.prototype['origin'] = undefined;

/**
 * @member {module:model/GetOrder200ResponsePackageAttachment} packageAttachment
 */
GetOrder200Response.prototype['packageAttachment'] = undefined;

/**
 * @member {module:model/PaymentData} paymentData
 */
GetOrder200Response.prototype['paymentData'] = undefined;

/**
 * @member {module:model/RatesAndBenefitsData} ratesAndBenefitsData
 */
GetOrder200Response.prototype['ratesAndBenefitsData'] = undefined;

/**
 * @member {Number} roundingError
 */
GetOrder200Response.prototype['roundingError'] = undefined;

/**
 * Sales channel.
 * @member {String} salesChannel
 */
GetOrder200Response.prototype['salesChannel'] = undefined;

/**
 * Seller order ID.
 * @member {String} sellerOrderId
 */
GetOrder200Response.prototype['sellerOrderId'] = undefined;

/**
 * 
 * @member {Array.<module:model/Seller>} sellers
 */
GetOrder200Response.prototype['sellers'] = undefined;

/**
 * Sequence number.
 * @member {String} sequence
 */
GetOrder200Response.prototype['sequence'] = undefined;

/**
 * @member {module:model/ShippingData} shippingData
 */
GetOrder200Response.prototype['shippingData'] = undefined;

/**
 * Status in the order workflow.
 * @member {String} status
 */
GetOrder200Response.prototype['status'] = undefined;

/**
 * `Deprecated`. Status description which is displayed on the Admin panel.
 * @member {String} statusDescription
 */
GetOrder200Response.prototype['statusDescription'] = undefined;

/**
 * @member {module:model/StorePreferencesData} storePreferencesData
 */
GetOrder200Response.prototype['storePreferencesData'] = undefined;

/**
 * Information on each of the order's totals.
 * @member {Array.<module:model/GetOrder200ResponseTotalsInner>} totals
 */
GetOrder200Response.prototype['totals'] = undefined;

/**
 * Value in cents.
 * @member {Number} value
 */
GetOrder200Response.prototype['value'] = undefined;






export default GetOrder200Response;

