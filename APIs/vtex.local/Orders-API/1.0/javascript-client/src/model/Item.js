/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalInfo from './AdditionalInfo';
import ItemAttachment from './ItemAttachment';
import ItemAttachmentOfferingsInner from './ItemAttachmentOfferingsInner';
import ItemPriceDefinitions from './ItemPriceDefinitions';

/**
 * The Item model module.
 * @module model/Item
 * @version 1.0
 */
class Item {
    /**
     * Constructs a new <code>Item</code>.
     * @alias module:model/Item
     * @param additionalInfo {module:model/AdditionalInfo} 
     * @param assemblies {Array.<Object>} Retrieves information about orders item's customizations.
     * @param attachmentOfferings {Array.<module:model/ItemAttachmentOfferingsInner>} List of attachments details.
     * @param attachments {Array.<String>} Array containing information on attachments.
     * @param bundleItems {Array.<String>} Information on services sold along with the item's SKU. For example, a gift package.
     * @param callCenterOperator {String} Call center operator responsible for the order.
     * @param commission {Number} Commission value registered for the seller.
     * @param components {Array.<String>} Item's components.
     * @param costPrice {Number} Item's cost price.
     * @param detailUrl {String} URL slug of the item.
     * @param ean {String} EAN of the SKU.
     * @param freightCommission {Number} Value of the freight commission.
     * @param id {String} Item's SKU ID, which is a unique numerical identifier.
     * @param imageUrl {String} Item's SKU image URL.
     * @param isGift {Boolean} This field is `true` when the item is a gift in order context and `false` when it is not.
     * @param itemAttachment {module:model/ItemAttachment} 
     * @param listPrice {Number} Item's list price.
     * @param lockId {String} Reservation ID.
     * @param manualPrice {String} Item's manual price.
     * @param measurementUnit {String} Item's measurement unit.
     * @param name {String} Item's name.
     * @param offerings {Array.<String>} Item's offerings, which are services related to the item. For example, guarantee or installation.
     * @param params {Array.<String>} Information about params.
     * @param parentAssemblyBinding {String} Parent assembly binding.
     * @param parentItemIndex {String} Parent item index.
     * @param preSaleDate {String} Item's pre sale date.
     * @param price {Number} Item's price.
     * @param priceDefinitions {module:model/ItemPriceDefinitions} 
     * @param priceTags {Array.<String>} List of objects with item's price modifiers.
     * @param priceValidUntil {String} Date until when the price is going to be valid if there is a promotion.
     * @param productId {String} ID of the Product associated with the item.
     * @param quantity {Number} Quantity of items.
     * @param refId {String} Product referencial code associated with the item.
     * @param rewardValue {Number} Item's reward value.
     * @param seller {String} Seller related to the order.
     * @param sellerSku {String} SKU ID from the seller perspective.
     * @param sellingPrice {Number} Item's selling price.
     * @param serialNumbers {String} This field identifies the order in the `handling` status in the workflow, and it was used for VTEX internal control.
     * @param shippingPrice {String} Item's shipping price.
     * @param tax {Number} Item's tax.
     * @param taxCode {String}  Item's tax code.
     * @param uniqueId {String} Unique ID is an alphanumeric sequence that identifies an SKU in a given order.
     * @param unitMultiplier {Number} Item's unit multiplier.
     */
    constructor(additionalInfo, assemblies, attachmentOfferings, attachments, bundleItems, callCenterOperator, commission, components, costPrice, detailUrl, ean, freightCommission, id, imageUrl, isGift, itemAttachment, listPrice, lockId, manualPrice, measurementUnit, name, offerings, params, parentAssemblyBinding, parentItemIndex, preSaleDate, price, priceDefinitions, priceTags, priceValidUntil, productId, quantity, refId, rewardValue, seller, sellerSku, sellingPrice, serialNumbers, shippingPrice, tax, taxCode, uniqueId, unitMultiplier) { 
        
        Item.initialize(this, additionalInfo, assemblies, attachmentOfferings, attachments, bundleItems, callCenterOperator, commission, components, costPrice, detailUrl, ean, freightCommission, id, imageUrl, isGift, itemAttachment, listPrice, lockId, manualPrice, measurementUnit, name, offerings, params, parentAssemblyBinding, parentItemIndex, preSaleDate, price, priceDefinitions, priceTags, priceValidUntil, productId, quantity, refId, rewardValue, seller, sellerSku, sellingPrice, serialNumbers, shippingPrice, tax, taxCode, uniqueId, unitMultiplier);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, additionalInfo, assemblies, attachmentOfferings, attachments, bundleItems, callCenterOperator, commission, components, costPrice, detailUrl, ean, freightCommission, id, imageUrl, isGift, itemAttachment, listPrice, lockId, manualPrice, measurementUnit, name, offerings, params, parentAssemblyBinding, parentItemIndex, preSaleDate, price, priceDefinitions, priceTags, priceValidUntil, productId, quantity, refId, rewardValue, seller, sellerSku, sellingPrice, serialNumbers, shippingPrice, tax, taxCode, uniqueId, unitMultiplier) { 
        obj['additionalInfo'] = additionalInfo;
        obj['assemblies'] = assemblies;
        obj['attachmentOfferings'] = attachmentOfferings;
        obj['attachments'] = attachments;
        obj['bundleItems'] = bundleItems;
        obj['callCenterOperator'] = callCenterOperator;
        obj['commission'] = commission;
        obj['components'] = components;
        obj['costPrice'] = costPrice;
        obj['detailUrl'] = detailUrl;
        obj['ean'] = ean;
        obj['freightCommission'] = freightCommission;
        obj['id'] = id;
        obj['imageUrl'] = imageUrl;
        obj['isGift'] = isGift;
        obj['itemAttachment'] = itemAttachment;
        obj['listPrice'] = listPrice;
        obj['lockId'] = lockId;
        obj['manualPrice'] = manualPrice;
        obj['measurementUnit'] = measurementUnit;
        obj['name'] = name;
        obj['offerings'] = offerings;
        obj['params'] = params;
        obj['parentAssemblyBinding'] = parentAssemblyBinding;
        obj['parentItemIndex'] = parentItemIndex;
        obj['preSaleDate'] = preSaleDate;
        obj['price'] = price;
        obj['priceDefinitions'] = priceDefinitions;
        obj['priceTags'] = priceTags;
        obj['priceValidUntil'] = priceValidUntil;
        obj['productId'] = productId;
        obj['quantity'] = quantity;
        obj['refId'] = refId;
        obj['rewardValue'] = rewardValue;
        obj['seller'] = seller;
        obj['sellerSku'] = sellerSku;
        obj['sellingPrice'] = sellingPrice;
        obj['serialNumbers'] = serialNumbers;
        obj['shippingPrice'] = shippingPrice;
        obj['tax'] = tax;
        obj['taxCode'] = taxCode;
        obj['uniqueId'] = uniqueId;
        obj['unitMultiplier'] = unitMultiplier;
    }

    /**
     * Constructs a <code>Item</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Item} obj Optional instance to populate.
     * @return {module:model/Item} The populated <code>Item</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Item();

            if (data.hasOwnProperty('additionalInfo')) {
                obj['additionalInfo'] = AdditionalInfo.constructFromObject(data['additionalInfo']);
            }
            if (data.hasOwnProperty('assemblies')) {
                obj['assemblies'] = ApiClient.convertToType(data['assemblies'], [Object]);
            }
            if (data.hasOwnProperty('attachmentOfferings')) {
                obj['attachmentOfferings'] = ApiClient.convertToType(data['attachmentOfferings'], [ItemAttachmentOfferingsInner]);
            }
            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], ['String']);
            }
            if (data.hasOwnProperty('bundleItems')) {
                obj['bundleItems'] = ApiClient.convertToType(data['bundleItems'], ['String']);
            }
            if (data.hasOwnProperty('callCenterOperator')) {
                obj['callCenterOperator'] = ApiClient.convertToType(data['callCenterOperator'], 'String');
            }
            if (data.hasOwnProperty('commission')) {
                obj['commission'] = ApiClient.convertToType(data['commission'], 'Number');
            }
            if (data.hasOwnProperty('components')) {
                obj['components'] = ApiClient.convertToType(data['components'], ['String']);
            }
            if (data.hasOwnProperty('costPrice')) {
                obj['costPrice'] = ApiClient.convertToType(data['costPrice'], 'Number');
            }
            if (data.hasOwnProperty('detailUrl')) {
                obj['detailUrl'] = ApiClient.convertToType(data['detailUrl'], 'String');
            }
            if (data.hasOwnProperty('ean')) {
                obj['ean'] = ApiClient.convertToType(data['ean'], 'String');
            }
            if (data.hasOwnProperty('freightCommission')) {
                obj['freightCommission'] = ApiClient.convertToType(data['freightCommission'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('imageUrl')) {
                obj['imageUrl'] = ApiClient.convertToType(data['imageUrl'], 'String');
            }
            if (data.hasOwnProperty('isGift')) {
                obj['isGift'] = ApiClient.convertToType(data['isGift'], 'Boolean');
            }
            if (data.hasOwnProperty('itemAttachment')) {
                obj['itemAttachment'] = ItemAttachment.constructFromObject(data['itemAttachment']);
            }
            if (data.hasOwnProperty('listPrice')) {
                obj['listPrice'] = ApiClient.convertToType(data['listPrice'], 'Number');
            }
            if (data.hasOwnProperty('lockId')) {
                obj['lockId'] = ApiClient.convertToType(data['lockId'], 'String');
            }
            if (data.hasOwnProperty('manualPrice')) {
                obj['manualPrice'] = ApiClient.convertToType(data['manualPrice'], 'String');
            }
            if (data.hasOwnProperty('measurementUnit')) {
                obj['measurementUnit'] = ApiClient.convertToType(data['measurementUnit'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('offerings')) {
                obj['offerings'] = ApiClient.convertToType(data['offerings'], ['String']);
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], ['String']);
            }
            if (data.hasOwnProperty('parentAssemblyBinding')) {
                obj['parentAssemblyBinding'] = ApiClient.convertToType(data['parentAssemblyBinding'], 'String');
            }
            if (data.hasOwnProperty('parentItemIndex')) {
                obj['parentItemIndex'] = ApiClient.convertToType(data['parentItemIndex'], 'String');
            }
            if (data.hasOwnProperty('preSaleDate')) {
                obj['preSaleDate'] = ApiClient.convertToType(data['preSaleDate'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('priceDefinitions')) {
                obj['priceDefinitions'] = ItemPriceDefinitions.constructFromObject(data['priceDefinitions']);
            }
            if (data.hasOwnProperty('priceTags')) {
                obj['priceTags'] = ApiClient.convertToType(data['priceTags'], ['String']);
            }
            if (data.hasOwnProperty('priceValidUntil')) {
                obj['priceValidUntil'] = ApiClient.convertToType(data['priceValidUntil'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('refId')) {
                obj['refId'] = ApiClient.convertToType(data['refId'], 'String');
            }
            if (data.hasOwnProperty('rewardValue')) {
                obj['rewardValue'] = ApiClient.convertToType(data['rewardValue'], 'Number');
            }
            if (data.hasOwnProperty('seller')) {
                obj['seller'] = ApiClient.convertToType(data['seller'], 'String');
            }
            if (data.hasOwnProperty('sellerSku')) {
                obj['sellerSku'] = ApiClient.convertToType(data['sellerSku'], 'String');
            }
            if (data.hasOwnProperty('sellingPrice')) {
                obj['sellingPrice'] = ApiClient.convertToType(data['sellingPrice'], 'Number');
            }
            if (data.hasOwnProperty('serialNumbers')) {
                obj['serialNumbers'] = ApiClient.convertToType(data['serialNumbers'], 'String');
            }
            if (data.hasOwnProperty('shippingPrice')) {
                obj['shippingPrice'] = ApiClient.convertToType(data['shippingPrice'], 'String');
            }
            if (data.hasOwnProperty('tax')) {
                obj['tax'] = ApiClient.convertToType(data['tax'], 'Number');
            }
            if (data.hasOwnProperty('taxCode')) {
                obj['taxCode'] = ApiClient.convertToType(data['taxCode'], 'String');
            }
            if (data.hasOwnProperty('uniqueId')) {
                obj['uniqueId'] = ApiClient.convertToType(data['uniqueId'], 'String');
            }
            if (data.hasOwnProperty('unitMultiplier')) {
                obj['unitMultiplier'] = ApiClient.convertToType(data['unitMultiplier'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Item</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Item</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Item.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `additionalInfo`
        if (data['additionalInfo']) { // data not null
          AdditionalInfo.validateJSON(data['additionalInfo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['assemblies'])) {
            throw new Error("Expected the field `assemblies` to be an array in the JSON data but got " + data['assemblies']);
        }
        if (data['attachmentOfferings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachmentOfferings'])) {
                throw new Error("Expected the field `attachmentOfferings` to be an array in the JSON data but got " + data['attachmentOfferings']);
            }
            // validate the optional field `attachmentOfferings` (array)
            for (const item of data['attachmentOfferings']) {
                ItemAttachmentOfferingsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['attachments'])) {
            throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['bundleItems'])) {
            throw new Error("Expected the field `bundleItems` to be an array in the JSON data but got " + data['bundleItems']);
        }
        // ensure the json data is a string
        if (data['callCenterOperator'] && !(typeof data['callCenterOperator'] === 'string' || data['callCenterOperator'] instanceof String)) {
            throw new Error("Expected the field `callCenterOperator` to be a primitive type in the JSON string but got " + data['callCenterOperator']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['components'])) {
            throw new Error("Expected the field `components` to be an array in the JSON data but got " + data['components']);
        }
        // ensure the json data is a string
        if (data['detailUrl'] && !(typeof data['detailUrl'] === 'string' || data['detailUrl'] instanceof String)) {
            throw new Error("Expected the field `detailUrl` to be a primitive type in the JSON string but got " + data['detailUrl']);
        }
        // ensure the json data is a string
        if (data['ean'] && !(typeof data['ean'] === 'string' || data['ean'] instanceof String)) {
            throw new Error("Expected the field `ean` to be a primitive type in the JSON string but got " + data['ean']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['imageUrl'] && !(typeof data['imageUrl'] === 'string' || data['imageUrl'] instanceof String)) {
            throw new Error("Expected the field `imageUrl` to be a primitive type in the JSON string but got " + data['imageUrl']);
        }
        // validate the optional field `itemAttachment`
        if (data['itemAttachment']) { // data not null
          ItemAttachment.validateJSON(data['itemAttachment']);
        }
        // ensure the json data is a string
        if (data['lockId'] && !(typeof data['lockId'] === 'string' || data['lockId'] instanceof String)) {
            throw new Error("Expected the field `lockId` to be a primitive type in the JSON string but got " + data['lockId']);
        }
        // ensure the json data is a string
        if (data['manualPrice'] && !(typeof data['manualPrice'] === 'string' || data['manualPrice'] instanceof String)) {
            throw new Error("Expected the field `manualPrice` to be a primitive type in the JSON string but got " + data['manualPrice']);
        }
        // ensure the json data is a string
        if (data['measurementUnit'] && !(typeof data['measurementUnit'] === 'string' || data['measurementUnit'] instanceof String)) {
            throw new Error("Expected the field `measurementUnit` to be a primitive type in the JSON string but got " + data['measurementUnit']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['offerings'])) {
            throw new Error("Expected the field `offerings` to be an array in the JSON data but got " + data['offerings']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['params'])) {
            throw new Error("Expected the field `params` to be an array in the JSON data but got " + data['params']);
        }
        // ensure the json data is a string
        if (data['parentAssemblyBinding'] && !(typeof data['parentAssemblyBinding'] === 'string' || data['parentAssemblyBinding'] instanceof String)) {
            throw new Error("Expected the field `parentAssemblyBinding` to be a primitive type in the JSON string but got " + data['parentAssemblyBinding']);
        }
        // ensure the json data is a string
        if (data['parentItemIndex'] && !(typeof data['parentItemIndex'] === 'string' || data['parentItemIndex'] instanceof String)) {
            throw new Error("Expected the field `parentItemIndex` to be a primitive type in the JSON string but got " + data['parentItemIndex']);
        }
        // ensure the json data is a string
        if (data['preSaleDate'] && !(typeof data['preSaleDate'] === 'string' || data['preSaleDate'] instanceof String)) {
            throw new Error("Expected the field `preSaleDate` to be a primitive type in the JSON string but got " + data['preSaleDate']);
        }
        // validate the optional field `priceDefinitions`
        if (data['priceDefinitions']) { // data not null
          ItemPriceDefinitions.validateJSON(data['priceDefinitions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['priceTags'])) {
            throw new Error("Expected the field `priceTags` to be an array in the JSON data but got " + data['priceTags']);
        }
        // ensure the json data is a string
        if (data['priceValidUntil'] && !(typeof data['priceValidUntil'] === 'string' || data['priceValidUntil'] instanceof String)) {
            throw new Error("Expected the field `priceValidUntil` to be a primitive type in the JSON string but got " + data['priceValidUntil']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['refId'] && !(typeof data['refId'] === 'string' || data['refId'] instanceof String)) {
            throw new Error("Expected the field `refId` to be a primitive type in the JSON string but got " + data['refId']);
        }
        // ensure the json data is a string
        if (data['seller'] && !(typeof data['seller'] === 'string' || data['seller'] instanceof String)) {
            throw new Error("Expected the field `seller` to be a primitive type in the JSON string but got " + data['seller']);
        }
        // ensure the json data is a string
        if (data['sellerSku'] && !(typeof data['sellerSku'] === 'string' || data['sellerSku'] instanceof String)) {
            throw new Error("Expected the field `sellerSku` to be a primitive type in the JSON string but got " + data['sellerSku']);
        }
        // ensure the json data is a string
        if (data['serialNumbers'] && !(typeof data['serialNumbers'] === 'string' || data['serialNumbers'] instanceof String)) {
            throw new Error("Expected the field `serialNumbers` to be a primitive type in the JSON string but got " + data['serialNumbers']);
        }
        // ensure the json data is a string
        if (data['shippingPrice'] && !(typeof data['shippingPrice'] === 'string' || data['shippingPrice'] instanceof String)) {
            throw new Error("Expected the field `shippingPrice` to be a primitive type in the JSON string but got " + data['shippingPrice']);
        }
        // ensure the json data is a string
        if (data['taxCode'] && !(typeof data['taxCode'] === 'string' || data['taxCode'] instanceof String)) {
            throw new Error("Expected the field `taxCode` to be a primitive type in the JSON string but got " + data['taxCode']);
        }
        // ensure the json data is a string
        if (data['uniqueId'] && !(typeof data['uniqueId'] === 'string' || data['uniqueId'] instanceof String)) {
            throw new Error("Expected the field `uniqueId` to be a primitive type in the JSON string but got " + data['uniqueId']);
        }

        return true;
    }


}

Item.RequiredProperties = ["additionalInfo", "assemblies", "attachmentOfferings", "attachments", "bundleItems", "callCenterOperator", "commission", "components", "costPrice", "detailUrl", "ean", "freightCommission", "id", "imageUrl", "isGift", "itemAttachment", "listPrice", "lockId", "manualPrice", "measurementUnit", "name", "offerings", "params", "parentAssemblyBinding", "parentItemIndex", "preSaleDate", "price", "priceDefinitions", "priceTags", "priceValidUntil", "productId", "quantity", "refId", "rewardValue", "seller", "sellerSku", "sellingPrice", "serialNumbers", "shippingPrice", "tax", "taxCode", "uniqueId", "unitMultiplier"];

/**
 * @member {module:model/AdditionalInfo} additionalInfo
 */
Item.prototype['additionalInfo'] = undefined;

/**
 * Retrieves information about orders item's customizations.
 * @member {Array.<Object>} assemblies
 */
Item.prototype['assemblies'] = undefined;

/**
 * List of attachments details.
 * @member {Array.<module:model/ItemAttachmentOfferingsInner>} attachmentOfferings
 */
Item.prototype['attachmentOfferings'] = undefined;

/**
 * Array containing information on attachments.
 * @member {Array.<String>} attachments
 */
Item.prototype['attachments'] = undefined;

/**
 * Information on services sold along with the item's SKU. For example, a gift package.
 * @member {Array.<String>} bundleItems
 */
Item.prototype['bundleItems'] = undefined;

/**
 * Call center operator responsible for the order.
 * @member {String} callCenterOperator
 */
Item.prototype['callCenterOperator'] = undefined;

/**
 * Commission value registered for the seller.
 * @member {Number} commission
 */
Item.prototype['commission'] = undefined;

/**
 * Item's components.
 * @member {Array.<String>} components
 */
Item.prototype['components'] = undefined;

/**
 * Item's cost price.
 * @member {Number} costPrice
 */
Item.prototype['costPrice'] = undefined;

/**
 * URL slug of the item.
 * @member {String} detailUrl
 */
Item.prototype['detailUrl'] = undefined;

/**
 * EAN of the SKU.
 * @member {String} ean
 */
Item.prototype['ean'] = undefined;

/**
 * Value of the freight commission.
 * @member {Number} freightCommission
 */
Item.prototype['freightCommission'] = undefined;

/**
 * Item's SKU ID, which is a unique numerical identifier.
 * @member {String} id
 */
Item.prototype['id'] = undefined;

/**
 * Item's SKU image URL.
 * @member {String} imageUrl
 */
Item.prototype['imageUrl'] = undefined;

/**
 * This field is `true` when the item is a gift in order context and `false` when it is not.
 * @member {Boolean} isGift
 */
Item.prototype['isGift'] = undefined;

/**
 * @member {module:model/ItemAttachment} itemAttachment
 */
Item.prototype['itemAttachment'] = undefined;

/**
 * Item's list price.
 * @member {Number} listPrice
 */
Item.prototype['listPrice'] = undefined;

/**
 * Reservation ID.
 * @member {String} lockId
 */
Item.prototype['lockId'] = undefined;

/**
 * Item's manual price.
 * @member {String} manualPrice
 */
Item.prototype['manualPrice'] = undefined;

/**
 * Item's measurement unit.
 * @member {String} measurementUnit
 */
Item.prototype['measurementUnit'] = undefined;

/**
 * Item's name.
 * @member {String} name
 */
Item.prototype['name'] = undefined;

/**
 * Item's offerings, which are services related to the item. For example, guarantee or installation.
 * @member {Array.<String>} offerings
 */
Item.prototype['offerings'] = undefined;

/**
 * Information about params.
 * @member {Array.<String>} params
 */
Item.prototype['params'] = undefined;

/**
 * Parent assembly binding.
 * @member {String} parentAssemblyBinding
 */
Item.prototype['parentAssemblyBinding'] = undefined;

/**
 * Parent item index.
 * @member {String} parentItemIndex
 */
Item.prototype['parentItemIndex'] = undefined;

/**
 * Item's pre sale date.
 * @member {String} preSaleDate
 */
Item.prototype['preSaleDate'] = undefined;

/**
 * Item's price.
 * @member {Number} price
 */
Item.prototype['price'] = undefined;

/**
 * @member {module:model/ItemPriceDefinitions} priceDefinitions
 */
Item.prototype['priceDefinitions'] = undefined;

/**
 * List of objects with item's price modifiers.
 * @member {Array.<String>} priceTags
 */
Item.prototype['priceTags'] = undefined;

/**
 * Date until when the price is going to be valid if there is a promotion.
 * @member {String} priceValidUntil
 */
Item.prototype['priceValidUntil'] = undefined;

/**
 * ID of the Product associated with the item.
 * @member {String} productId
 */
Item.prototype['productId'] = undefined;

/**
 * Quantity of items.
 * @member {Number} quantity
 */
Item.prototype['quantity'] = undefined;

/**
 * Product referencial code associated with the item.
 * @member {String} refId
 */
Item.prototype['refId'] = undefined;

/**
 * Item's reward value.
 * @member {Number} rewardValue
 */
Item.prototype['rewardValue'] = undefined;

/**
 * Seller related to the order.
 * @member {String} seller
 */
Item.prototype['seller'] = undefined;

/**
 * SKU ID from the seller perspective.
 * @member {String} sellerSku
 */
Item.prototype['sellerSku'] = undefined;

/**
 * Item's selling price.
 * @member {Number} sellingPrice
 */
Item.prototype['sellingPrice'] = undefined;

/**
 * This field identifies the order in the `handling` status in the workflow, and it was used for VTEX internal control.
 * @member {String} serialNumbers
 */
Item.prototype['serialNumbers'] = undefined;

/**
 * Item's shipping price.
 * @member {String} shippingPrice
 */
Item.prototype['shippingPrice'] = undefined;

/**
 * Item's tax.
 * @member {Number} tax
 */
Item.prototype['tax'] = undefined;

/**
 *  Item's tax code.
 * @member {String} taxCode
 */
Item.prototype['taxCode'] = undefined;

/**
 * Unique ID is an alphanumeric sequence that identifies an SKU in a given order.
 * @member {String} uniqueId
 */
Item.prototype['uniqueId'] = undefined;

/**
 * Item's unit multiplier.
 * @member {Number} unitMultiplier
 */
Item.prototype['unitMultiplier'] = undefined;






export default Item;

