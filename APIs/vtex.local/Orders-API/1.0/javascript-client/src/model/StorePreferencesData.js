/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrencyFormatInfo from './CurrencyFormatInfo';

/**
 * The StorePreferencesData model module.
 * @module model/StorePreferencesData
 * @version 1.0
 */
class StorePreferencesData {
    /**
     * Constructs a new <code>StorePreferencesData</code>.
     * Object with data from the store&#39;s configuration - stored in VTEX&#39;s License Manager.
     * @alias module:model/StorePreferencesData
     * @param countryCode {String} Three letters ISO code of the country (ISO 3166 ALPHA-3).
     * @param currencyCode {String} Currency code in ISO 4217. For example, `BRL`.
     * @param currencyFormatInfo {module:model/CurrencyFormatInfo} 
     * @param currencyLocale {Number} Currency Locale Code in LCID in decimal.
     * @param currencySymbol {String} Currency symbol.
     * @param timeZone {String} Time zone from where the order was made.
     */
    constructor(countryCode, currencyCode, currencyFormatInfo, currencyLocale, currencySymbol, timeZone) { 
        
        StorePreferencesData.initialize(this, countryCode, currencyCode, currencyFormatInfo, currencyLocale, currencySymbol, timeZone);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, countryCode, currencyCode, currencyFormatInfo, currencyLocale, currencySymbol, timeZone) { 
        obj['countryCode'] = countryCode;
        obj['currencyCode'] = currencyCode;
        obj['currencyFormatInfo'] = currencyFormatInfo;
        obj['currencyLocale'] = currencyLocale;
        obj['currencySymbol'] = currencySymbol;
        obj['timeZone'] = timeZone;
    }

    /**
     * Constructs a <code>StorePreferencesData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StorePreferencesData} obj Optional instance to populate.
     * @return {module:model/StorePreferencesData} The populated <code>StorePreferencesData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StorePreferencesData();

            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('currencyFormatInfo')) {
                obj['currencyFormatInfo'] = CurrencyFormatInfo.constructFromObject(data['currencyFormatInfo']);
            }
            if (data.hasOwnProperty('currencyLocale')) {
                obj['currencyLocale'] = ApiClient.convertToType(data['currencyLocale'], 'Number');
            }
            if (data.hasOwnProperty('currencySymbol')) {
                obj['currencySymbol'] = ApiClient.convertToType(data['currencySymbol'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StorePreferencesData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StorePreferencesData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StorePreferencesData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // validate the optional field `currencyFormatInfo`
        if (data['currencyFormatInfo']) { // data not null
          CurrencyFormatInfo.validateJSON(data['currencyFormatInfo']);
        }
        // ensure the json data is a string
        if (data['currencySymbol'] && !(typeof data['currencySymbol'] === 'string' || data['currencySymbol'] instanceof String)) {
            throw new Error("Expected the field `currencySymbol` to be a primitive type in the JSON string but got " + data['currencySymbol']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}

StorePreferencesData.RequiredProperties = ["countryCode", "currencyCode", "currencyFormatInfo", "currencyLocale", "currencySymbol", "timeZone"];

/**
 * Three letters ISO code of the country (ISO 3166 ALPHA-3).
 * @member {String} countryCode
 */
StorePreferencesData.prototype['countryCode'] = undefined;

/**
 * Currency code in ISO 4217. For example, `BRL`.
 * @member {String} currencyCode
 */
StorePreferencesData.prototype['currencyCode'] = undefined;

/**
 * @member {module:model/CurrencyFormatInfo} currencyFormatInfo
 */
StorePreferencesData.prototype['currencyFormatInfo'] = undefined;

/**
 * Currency Locale Code in LCID in decimal.
 * @member {Number} currencyLocale
 */
StorePreferencesData.prototype['currencyLocale'] = undefined;

/**
 * Currency symbol.
 * @member {String} currencySymbol
 */
StorePreferencesData.prototype['currencySymbol'] = undefined;

/**
 * Time zone from where the order was made.
 * @member {String} timeZone
 */
StorePreferencesData.prototype['timeZone'] = undefined;






export default StorePreferencesData;

