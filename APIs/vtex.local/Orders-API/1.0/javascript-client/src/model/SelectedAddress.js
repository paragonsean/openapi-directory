/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SelectedAddress model module.
 * @module model/SelectedAddress
 * @version 1.0
 */
class SelectedAddress {
    /**
     * Constructs a new <code>SelectedAddress</code>.
     * @alias module:model/SelectedAddress
     * @param addressId {String} Selected address ID.
     * @param addressType {String} Selected adress's shipping type, which can be `pickup`, `residential`, `invoice`, `search`, `inStore`, `commercial` or `giftRegistry`.
     * @param city {String} City of the selected address.
     * @param complement {String} Complement to the selected address if it applies.
     * @param country {String} Three letters ISO code of the country of the selected address (ISO 3166 ALPHA-3).
     * @param entityId {String} Shipping address entity ID  of the selected address.
     * @param geoCoordinates {Array.<String>} Array with two numbers with the selected address's geocoordinates, first longitude then latitude.
     * @param neighborhood {String} Neighborhood of the selected address.
     * @param number {String} Number of the building, house or apartment of the selected address.
     * @param postalCode {String} Postal code of the selected address.
     * @param receiverName {String} Name of the person who is going to receive the order in the selected address.
     * @param reference {String} Complement to help locate the selected address.
     * @param state {String} State of the selected address.
     * @param street {String} Street of the selected address.
     * @param versionId {String} Shipping address version ID of the selected address.
     */
    constructor(addressId, addressType, city, complement, country, entityId, geoCoordinates, neighborhood, number, postalCode, receiverName, reference, state, street, versionId) { 
        
        SelectedAddress.initialize(this, addressId, addressType, city, complement, country, entityId, geoCoordinates, neighborhood, number, postalCode, receiverName, reference, state, street, versionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, addressId, addressType, city, complement, country, entityId, geoCoordinates, neighborhood, number, postalCode, receiverName, reference, state, street, versionId) { 
        obj['addressId'] = addressId;
        obj['addressType'] = addressType;
        obj['city'] = city;
        obj['complement'] = complement;
        obj['country'] = country;
        obj['entityId'] = entityId;
        obj['geoCoordinates'] = geoCoordinates;
        obj['neighborhood'] = neighborhood;
        obj['number'] = number;
        obj['postalCode'] = postalCode;
        obj['receiverName'] = receiverName;
        obj['reference'] = reference;
        obj['state'] = state;
        obj['street'] = street;
        obj['versionId'] = versionId;
    }

    /**
     * Constructs a <code>SelectedAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SelectedAddress} obj Optional instance to populate.
     * @return {module:model/SelectedAddress} The populated <code>SelectedAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SelectedAddress();

            if (data.hasOwnProperty('addressId')) {
                obj['addressId'] = ApiClient.convertToType(data['addressId'], 'String');
            }
            if (data.hasOwnProperty('addressType')) {
                obj['addressType'] = ApiClient.convertToType(data['addressType'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('complement')) {
                obj['complement'] = ApiClient.convertToType(data['complement'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('geoCoordinates')) {
                obj['geoCoordinates'] = ApiClient.convertToType(data['geoCoordinates'], ['String']);
            }
            if (data.hasOwnProperty('neighborhood')) {
                obj['neighborhood'] = ApiClient.convertToType(data['neighborhood'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('receiverName')) {
                obj['receiverName'] = ApiClient.convertToType(data['receiverName'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('versionId')) {
                obj['versionId'] = ApiClient.convertToType(data['versionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SelectedAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SelectedAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SelectedAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['addressId'] && !(typeof data['addressId'] === 'string' || data['addressId'] instanceof String)) {
            throw new Error("Expected the field `addressId` to be a primitive type in the JSON string but got " + data['addressId']);
        }
        // ensure the json data is a string
        if (data['addressType'] && !(typeof data['addressType'] === 'string' || data['addressType'] instanceof String)) {
            throw new Error("Expected the field `addressType` to be a primitive type in the JSON string but got " + data['addressType']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['complement'] && !(typeof data['complement'] === 'string' || data['complement'] instanceof String)) {
            throw new Error("Expected the field `complement` to be a primitive type in the JSON string but got " + data['complement']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['geoCoordinates'])) {
            throw new Error("Expected the field `geoCoordinates` to be an array in the JSON data but got " + data['geoCoordinates']);
        }
        // ensure the json data is a string
        if (data['neighborhood'] && !(typeof data['neighborhood'] === 'string' || data['neighborhood'] instanceof String)) {
            throw new Error("Expected the field `neighborhood` to be a primitive type in the JSON string but got " + data['neighborhood']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['receiverName'] && !(typeof data['receiverName'] === 'string' || data['receiverName'] instanceof String)) {
            throw new Error("Expected the field `receiverName` to be a primitive type in the JSON string but got " + data['receiverName']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['versionId'] && !(typeof data['versionId'] === 'string' || data['versionId'] instanceof String)) {
            throw new Error("Expected the field `versionId` to be a primitive type in the JSON string but got " + data['versionId']);
        }

        return true;
    }


}

SelectedAddress.RequiredProperties = ["addressId", "addressType", "city", "complement", "country", "entityId", "geoCoordinates", "neighborhood", "number", "postalCode", "receiverName", "reference", "state", "street", "versionId"];

/**
 * Selected address ID.
 * @member {String} addressId
 */
SelectedAddress.prototype['addressId'] = undefined;

/**
 * Selected adress's shipping type, which can be `pickup`, `residential`, `invoice`, `search`, `inStore`, `commercial` or `giftRegistry`.
 * @member {String} addressType
 */
SelectedAddress.prototype['addressType'] = undefined;

/**
 * City of the selected address.
 * @member {String} city
 */
SelectedAddress.prototype['city'] = undefined;

/**
 * Complement to the selected address if it applies.
 * @member {String} complement
 */
SelectedAddress.prototype['complement'] = undefined;

/**
 * Three letters ISO code of the country of the selected address (ISO 3166 ALPHA-3).
 * @member {String} country
 */
SelectedAddress.prototype['country'] = undefined;

/**
 * Shipping address entity ID  of the selected address.
 * @member {String} entityId
 */
SelectedAddress.prototype['entityId'] = undefined;

/**
 * Array with two numbers with the selected address's geocoordinates, first longitude then latitude.
 * @member {Array.<String>} geoCoordinates
 */
SelectedAddress.prototype['geoCoordinates'] = undefined;

/**
 * Neighborhood of the selected address.
 * @member {String} neighborhood
 */
SelectedAddress.prototype['neighborhood'] = undefined;

/**
 * Number of the building, house or apartment of the selected address.
 * @member {String} number
 */
SelectedAddress.prototype['number'] = undefined;

/**
 * Postal code of the selected address.
 * @member {String} postalCode
 */
SelectedAddress.prototype['postalCode'] = undefined;

/**
 * Name of the person who is going to receive the order in the selected address.
 * @member {String} receiverName
 */
SelectedAddress.prototype['receiverName'] = undefined;

/**
 * Complement to help locate the selected address.
 * @member {String} reference
 */
SelectedAddress.prototype['reference'] = undefined;

/**
 * State of the selected address.
 * @member {String} state
 */
SelectedAddress.prototype['state'] = undefined;

/**
 * Street of the selected address.
 * @member {String} street
 */
SelectedAddress.prototype['street'] = undefined;

/**
 * Shipping address version ID of the selected address.
 * @member {String} versionId
 */
SelectedAddress.prototype['versionId'] = undefined;






export default SelectedAddress;

