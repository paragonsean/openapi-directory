/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeliveryId from './DeliveryId';
import LogisticsInfoDeliveryChannelsInner from './LogisticsInfoDeliveryChannelsInner';
import PickupStoreInfo from './PickupStoreInfo';
import Sla from './Sla';

/**
 * The LogisticsInfo model module.
 * @module model/LogisticsInfo
 * @version 1.0
 */
class LogisticsInfo {
    /**
     * Constructs a new <code>LogisticsInfo</code>.
     * @alias module:model/LogisticsInfo
     * @param addressId {String} Address ID.
     * @param deliveryChannel {String} If the delivery channel is `delivery` or `pickup-in-point`.
     * @param deliveryChannels {Array.<module:model/LogisticsInfoDeliveryChannelsInner>} List of delivery channels associated with the trade policy.
     * @param deliveryCompany {String} [Carrier](https://help.vtex.com/en/tutorial/transportadoras-na-vtex--7u9duMD5UQa2QQwukAWMcE) company's name.
     * @param deliveryIds {Array.<module:model/DeliveryId>} Information about delivery IDs.
     * @param deliveryWindow {String} [Scheduled delivery](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) window information, if it applies to the item.
     * @param entityId {String} Shipping address entity ID.
     * @param itemIndex {Number} Index of the item starting from 0.
     * @param listPrice {Number} SKU's optional price for a specific trade policy.
     * @param lockTTL {String} Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time.
     * @param pickupPointId {String} [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R)'s ID.
     * @param pickupStoreInfo {module:model/PickupStoreInfo} 
     * @param polygonName {String} Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.
     * @param price {Number} Shipping price for the item in cents. Does not account for the whole order's shipping price.
     * @param selectedSla {String} Selected shipping option.
     * @param sellingPrice {Number} Item's selling price.
     * @param shippingEstimate {String} Total shipping estimate time in days. For instance, three business days is represented `3bd`.
     * @param shippingEstimateDate {String} Shipping estimate date. It is defined only after the confirmation of the order.
     * @param shipsTo {Array.<String>} Three letters ISO code of the country of the shipping address (ISO 3166 ALPHA-3).
     * @param slas {Array.<module:model/Sla>} Information on Service Level Agreement (SLA), corresponding to [shipping policies](https://help.vtex.com/tutorial/shipping-policy--tutorials_140).
     * @param transitTime {String} Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented `3bd`.
     * @param versionId {String} Shipping address version ID.
     */
    constructor(addressId, deliveryChannel, deliveryChannels, deliveryCompany, deliveryIds, deliveryWindow, entityId, itemIndex, listPrice, lockTTL, pickupPointId, pickupStoreInfo, polygonName, price, selectedSla, sellingPrice, shippingEstimate, shippingEstimateDate, shipsTo, slas, transitTime, versionId) { 
        
        LogisticsInfo.initialize(this, addressId, deliveryChannel, deliveryChannels, deliveryCompany, deliveryIds, deliveryWindow, entityId, itemIndex, listPrice, lockTTL, pickupPointId, pickupStoreInfo, polygonName, price, selectedSla, sellingPrice, shippingEstimate, shippingEstimateDate, shipsTo, slas, transitTime, versionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, addressId, deliveryChannel, deliveryChannels, deliveryCompany, deliveryIds, deliveryWindow, entityId, itemIndex, listPrice, lockTTL, pickupPointId, pickupStoreInfo, polygonName, price, selectedSla, sellingPrice, shippingEstimate, shippingEstimateDate, shipsTo, slas, transitTime, versionId) { 
        obj['addressId'] = addressId;
        obj['deliveryChannel'] = deliveryChannel;
        obj['deliveryChannels'] = deliveryChannels;
        obj['deliveryCompany'] = deliveryCompany;
        obj['deliveryIds'] = deliveryIds;
        obj['deliveryWindow'] = deliveryWindow;
        obj['entityId'] = entityId;
        obj['itemIndex'] = itemIndex;
        obj['listPrice'] = listPrice;
        obj['lockTTL'] = lockTTL;
        obj['pickupPointId'] = pickupPointId;
        obj['pickupStoreInfo'] = pickupStoreInfo;
        obj['polygonName'] = polygonName;
        obj['price'] = price;
        obj['selectedSla'] = selectedSla;
        obj['sellingPrice'] = sellingPrice;
        obj['shippingEstimate'] = shippingEstimate;
        obj['shippingEstimateDate'] = shippingEstimateDate;
        obj['shipsTo'] = shipsTo;
        obj['slas'] = slas;
        obj['transitTime'] = transitTime;
        obj['versionId'] = versionId;
    }

    /**
     * Constructs a <code>LogisticsInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogisticsInfo} obj Optional instance to populate.
     * @return {module:model/LogisticsInfo} The populated <code>LogisticsInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogisticsInfo();

            if (data.hasOwnProperty('addressId')) {
                obj['addressId'] = ApiClient.convertToType(data['addressId'], 'String');
            }
            if (data.hasOwnProperty('deliveryChannel')) {
                obj['deliveryChannel'] = ApiClient.convertToType(data['deliveryChannel'], 'String');
            }
            if (data.hasOwnProperty('deliveryChannels')) {
                obj['deliveryChannels'] = ApiClient.convertToType(data['deliveryChannels'], [LogisticsInfoDeliveryChannelsInner]);
            }
            if (data.hasOwnProperty('deliveryCompany')) {
                obj['deliveryCompany'] = ApiClient.convertToType(data['deliveryCompany'], 'String');
            }
            if (data.hasOwnProperty('deliveryIds')) {
                obj['deliveryIds'] = ApiClient.convertToType(data['deliveryIds'], [DeliveryId]);
            }
            if (data.hasOwnProperty('deliveryWindow')) {
                obj['deliveryWindow'] = ApiClient.convertToType(data['deliveryWindow'], 'String');
            }
            if (data.hasOwnProperty('entityId')) {
                obj['entityId'] = ApiClient.convertToType(data['entityId'], 'String');
            }
            if (data.hasOwnProperty('itemIndex')) {
                obj['itemIndex'] = ApiClient.convertToType(data['itemIndex'], 'Number');
            }
            if (data.hasOwnProperty('listPrice')) {
                obj['listPrice'] = ApiClient.convertToType(data['listPrice'], 'Number');
            }
            if (data.hasOwnProperty('lockTTL')) {
                obj['lockTTL'] = ApiClient.convertToType(data['lockTTL'], 'String');
            }
            if (data.hasOwnProperty('pickupPointId')) {
                obj['pickupPointId'] = ApiClient.convertToType(data['pickupPointId'], 'String');
            }
            if (data.hasOwnProperty('pickupStoreInfo')) {
                obj['pickupStoreInfo'] = PickupStoreInfo.constructFromObject(data['pickupStoreInfo']);
            }
            if (data.hasOwnProperty('polygonName')) {
                obj['polygonName'] = ApiClient.convertToType(data['polygonName'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('selectedSla')) {
                obj['selectedSla'] = ApiClient.convertToType(data['selectedSla'], 'String');
            }
            if (data.hasOwnProperty('sellingPrice')) {
                obj['sellingPrice'] = ApiClient.convertToType(data['sellingPrice'], 'Number');
            }
            if (data.hasOwnProperty('shippingEstimate')) {
                obj['shippingEstimate'] = ApiClient.convertToType(data['shippingEstimate'], 'String');
            }
            if (data.hasOwnProperty('shippingEstimateDate')) {
                obj['shippingEstimateDate'] = ApiClient.convertToType(data['shippingEstimateDate'], 'String');
            }
            if (data.hasOwnProperty('shipsTo')) {
                obj['shipsTo'] = ApiClient.convertToType(data['shipsTo'], ['String']);
            }
            if (data.hasOwnProperty('slas')) {
                obj['slas'] = ApiClient.convertToType(data['slas'], [Sla]);
            }
            if (data.hasOwnProperty('transitTime')) {
                obj['transitTime'] = ApiClient.convertToType(data['transitTime'], 'String');
            }
            if (data.hasOwnProperty('versionId')) {
                obj['versionId'] = ApiClient.convertToType(data['versionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogisticsInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogisticsInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LogisticsInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['addressId'] && !(typeof data['addressId'] === 'string' || data['addressId'] instanceof String)) {
            throw new Error("Expected the field `addressId` to be a primitive type in the JSON string but got " + data['addressId']);
        }
        // ensure the json data is a string
        if (data['deliveryChannel'] && !(typeof data['deliveryChannel'] === 'string' || data['deliveryChannel'] instanceof String)) {
            throw new Error("Expected the field `deliveryChannel` to be a primitive type in the JSON string but got " + data['deliveryChannel']);
        }
        if (data['deliveryChannels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deliveryChannels'])) {
                throw new Error("Expected the field `deliveryChannels` to be an array in the JSON data but got " + data['deliveryChannels']);
            }
            // validate the optional field `deliveryChannels` (array)
            for (const item of data['deliveryChannels']) {
                LogisticsInfoDeliveryChannelsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['deliveryCompany'] && !(typeof data['deliveryCompany'] === 'string' || data['deliveryCompany'] instanceof String)) {
            throw new Error("Expected the field `deliveryCompany` to be a primitive type in the JSON string but got " + data['deliveryCompany']);
        }
        if (data['deliveryIds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deliveryIds'])) {
                throw new Error("Expected the field `deliveryIds` to be an array in the JSON data but got " + data['deliveryIds']);
            }
            // validate the optional field `deliveryIds` (array)
            for (const item of data['deliveryIds']) {
                DeliveryId.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['deliveryWindow'] && !(typeof data['deliveryWindow'] === 'string' || data['deliveryWindow'] instanceof String)) {
            throw new Error("Expected the field `deliveryWindow` to be a primitive type in the JSON string but got " + data['deliveryWindow']);
        }
        // ensure the json data is a string
        if (data['entityId'] && !(typeof data['entityId'] === 'string' || data['entityId'] instanceof String)) {
            throw new Error("Expected the field `entityId` to be a primitive type in the JSON string but got " + data['entityId']);
        }
        // ensure the json data is a string
        if (data['lockTTL'] && !(typeof data['lockTTL'] === 'string' || data['lockTTL'] instanceof String)) {
            throw new Error("Expected the field `lockTTL` to be a primitive type in the JSON string but got " + data['lockTTL']);
        }
        // ensure the json data is a string
        if (data['pickupPointId'] && !(typeof data['pickupPointId'] === 'string' || data['pickupPointId'] instanceof String)) {
            throw new Error("Expected the field `pickupPointId` to be a primitive type in the JSON string but got " + data['pickupPointId']);
        }
        // validate the optional field `pickupStoreInfo`
        if (data['pickupStoreInfo']) { // data not null
          PickupStoreInfo.validateJSON(data['pickupStoreInfo']);
        }
        // ensure the json data is a string
        if (data['polygonName'] && !(typeof data['polygonName'] === 'string' || data['polygonName'] instanceof String)) {
            throw new Error("Expected the field `polygonName` to be a primitive type in the JSON string but got " + data['polygonName']);
        }
        // ensure the json data is a string
        if (data['selectedSla'] && !(typeof data['selectedSla'] === 'string' || data['selectedSla'] instanceof String)) {
            throw new Error("Expected the field `selectedSla` to be a primitive type in the JSON string but got " + data['selectedSla']);
        }
        // ensure the json data is a string
        if (data['shippingEstimate'] && !(typeof data['shippingEstimate'] === 'string' || data['shippingEstimate'] instanceof String)) {
            throw new Error("Expected the field `shippingEstimate` to be a primitive type in the JSON string but got " + data['shippingEstimate']);
        }
        // ensure the json data is a string
        if (data['shippingEstimateDate'] && !(typeof data['shippingEstimateDate'] === 'string' || data['shippingEstimateDate'] instanceof String)) {
            throw new Error("Expected the field `shippingEstimateDate` to be a primitive type in the JSON string but got " + data['shippingEstimateDate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['shipsTo'])) {
            throw new Error("Expected the field `shipsTo` to be an array in the JSON data but got " + data['shipsTo']);
        }
        if (data['slas']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['slas'])) {
                throw new Error("Expected the field `slas` to be an array in the JSON data but got " + data['slas']);
            }
            // validate the optional field `slas` (array)
            for (const item of data['slas']) {
                Sla.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['transitTime'] && !(typeof data['transitTime'] === 'string' || data['transitTime'] instanceof String)) {
            throw new Error("Expected the field `transitTime` to be a primitive type in the JSON string but got " + data['transitTime']);
        }
        // ensure the json data is a string
        if (data['versionId'] && !(typeof data['versionId'] === 'string' || data['versionId'] instanceof String)) {
            throw new Error("Expected the field `versionId` to be a primitive type in the JSON string but got " + data['versionId']);
        }

        return true;
    }


}

LogisticsInfo.RequiredProperties = ["addressId", "deliveryChannel", "deliveryChannels", "deliveryCompany", "deliveryIds", "deliveryWindow", "entityId", "itemIndex", "listPrice", "lockTTL", "pickupPointId", "pickupStoreInfo", "polygonName", "price", "selectedSla", "sellingPrice", "shippingEstimate", "shippingEstimateDate", "shipsTo", "slas", "transitTime", "versionId"];

/**
 * Address ID.
 * @member {String} addressId
 */
LogisticsInfo.prototype['addressId'] = undefined;

/**
 * If the delivery channel is `delivery` or `pickup-in-point`.
 * @member {String} deliveryChannel
 */
LogisticsInfo.prototype['deliveryChannel'] = undefined;

/**
 * List of delivery channels associated with the trade policy.
 * @member {Array.<module:model/LogisticsInfoDeliveryChannelsInner>} deliveryChannels
 */
LogisticsInfo.prototype['deliveryChannels'] = undefined;

/**
 * [Carrier](https://help.vtex.com/en/tutorial/transportadoras-na-vtex--7u9duMD5UQa2QQwukAWMcE) company's name.
 * @member {String} deliveryCompany
 */
LogisticsInfo.prototype['deliveryCompany'] = undefined;

/**
 * Information about delivery IDs.
 * @member {Array.<module:model/DeliveryId>} deliveryIds
 */
LogisticsInfo.prototype['deliveryIds'] = undefined;

/**
 * [Scheduled delivery](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) window information, if it applies to the item.
 * @member {String} deliveryWindow
 */
LogisticsInfo.prototype['deliveryWindow'] = undefined;

/**
 * Shipping address entity ID.
 * @member {String} entityId
 */
LogisticsInfo.prototype['entityId'] = undefined;

/**
 * Index of the item starting from 0.
 * @member {Number} itemIndex
 */
LogisticsInfo.prototype['itemIndex'] = undefined;

/**
 * SKU's optional price for a specific trade policy.
 * @member {Number} listPrice
 */
LogisticsInfo.prototype['listPrice'] = undefined;

/**
 * Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time.
 * @member {String} lockTTL
 */
LogisticsInfo.prototype['lockTTL'] = undefined;

/**
 * [Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R)'s ID.
 * @member {String} pickupPointId
 */
LogisticsInfo.prototype['pickupPointId'] = undefined;

/**
 * @member {module:model/PickupStoreInfo} pickupStoreInfo
 */
LogisticsInfo.prototype['pickupStoreInfo'] = undefined;

/**
 * Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.
 * @member {String} polygonName
 */
LogisticsInfo.prototype['polygonName'] = undefined;

/**
 * Shipping price for the item in cents. Does not account for the whole order's shipping price.
 * @member {Number} price
 */
LogisticsInfo.prototype['price'] = undefined;

/**
 * Selected shipping option.
 * @member {String} selectedSla
 */
LogisticsInfo.prototype['selectedSla'] = undefined;

/**
 * Item's selling price.
 * @member {Number} sellingPrice
 */
LogisticsInfo.prototype['sellingPrice'] = undefined;

/**
 * Total shipping estimate time in days. For instance, three business days is represented `3bd`.
 * @member {String} shippingEstimate
 */
LogisticsInfo.prototype['shippingEstimate'] = undefined;

/**
 * Shipping estimate date. It is defined only after the confirmation of the order.
 * @member {String} shippingEstimateDate
 */
LogisticsInfo.prototype['shippingEstimateDate'] = undefined;

/**
 * Three letters ISO code of the country of the shipping address (ISO 3166 ALPHA-3).
 * @member {Array.<String>} shipsTo
 */
LogisticsInfo.prototype['shipsTo'] = undefined;

/**
 * Information on Service Level Agreement (SLA), corresponding to [shipping policies](https://help.vtex.com/tutorial/shipping-policy--tutorials_140).
 * @member {Array.<module:model/Sla>} slas
 */
LogisticsInfo.prototype['slas'] = undefined;

/**
 * Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented `3bd`.
 * @member {String} transitTime
 */
LogisticsInfo.prototype['transitTime'] = undefined;

/**
 * Shipping address version ID.
 * @member {String} versionId
 */
LogisticsInfo.prototype['versionId'] = undefined;






export default LogisticsInfo;

