/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import From from './From';
import To from './To';

/**
 * The GetConversation model module.
 * @module model/GetConversation
 * @version 1.0
 */
class GetConversation {
    /**
     * Constructs a new <code>GetConversation</code>.
     * @alias module:model/GetConversation
     * @param attachmentNames {Array.<String>} List with attachments' names, if there are any.
     * @param body {String} Conversation content body.
     * @param date {String} Conversation date.
     * @param firstWords {String} First words of Conversation content.
     * @param from {module:model/From} 
     * @param hasAttachment {Boolean} When set as `true`, it means there are attachments, when set as `false`, there are not.
     * @param id {String} Conversation ID.
     * @param subject {String} Conversation content subject.
     * @param to {Array.<module:model/To>} Conversation receiver.
     */
    constructor(attachmentNames, body, date, firstWords, from, hasAttachment, id, subject, to) { 
        
        GetConversation.initialize(this, attachmentNames, body, date, firstWords, from, hasAttachment, id, subject, to);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attachmentNames, body, date, firstWords, from, hasAttachment, id, subject, to) { 
        obj['attachmentNames'] = attachmentNames;
        obj['body'] = body;
        obj['date'] = date;
        obj['firstWords'] = firstWords;
        obj['from'] = from;
        obj['hasAttachment'] = hasAttachment;
        obj['id'] = id;
        obj['subject'] = subject;
        obj['to'] = to;
    }

    /**
     * Constructs a <code>GetConversation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetConversation} obj Optional instance to populate.
     * @return {module:model/GetConversation} The populated <code>GetConversation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetConversation();

            if (data.hasOwnProperty('attachmentNames')) {
                obj['attachmentNames'] = ApiClient.convertToType(data['attachmentNames'], ['String']);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('firstWords')) {
                obj['firstWords'] = ApiClient.convertToType(data['firstWords'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = From.constructFromObject(data['from']);
            }
            if (data.hasOwnProperty('hasAttachment')) {
                obj['hasAttachment'] = ApiClient.convertToType(data['hasAttachment'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], [To]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetConversation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetConversation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetConversation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['attachmentNames'])) {
            throw new Error("Expected the field `attachmentNames` to be an array in the JSON data but got " + data['attachmentNames']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['firstWords'] && !(typeof data['firstWords'] === 'string' || data['firstWords'] instanceof String)) {
            throw new Error("Expected the field `firstWords` to be a primitive type in the JSON string but got " + data['firstWords']);
        }
        // validate the optional field `from`
        if (data['from']) { // data not null
          From.validateJSON(data['from']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        if (data['to']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['to'])) {
                throw new Error("Expected the field `to` to be an array in the JSON data but got " + data['to']);
            }
            // validate the optional field `to` (array)
            for (const item of data['to']) {
                To.validateJSON(item);
            };
        }

        return true;
    }


}

GetConversation.RequiredProperties = ["attachmentNames", "body", "date", "firstWords", "from", "hasAttachment", "id", "subject", "to"];

/**
 * List with attachments' names, if there are any.
 * @member {Array.<String>} attachmentNames
 */
GetConversation.prototype['attachmentNames'] = undefined;

/**
 * Conversation content body.
 * @member {String} body
 */
GetConversation.prototype['body'] = undefined;

/**
 * Conversation date.
 * @member {String} date
 */
GetConversation.prototype['date'] = undefined;

/**
 * First words of Conversation content.
 * @member {String} firstWords
 */
GetConversation.prototype['firstWords'] = undefined;

/**
 * @member {module:model/From} from
 */
GetConversation.prototype['from'] = undefined;

/**
 * When set as `true`, it means there are attachments, when set as `false`, there are not.
 * @member {Boolean} hasAttachment
 */
GetConversation.prototype['hasAttachment'] = undefined;

/**
 * Conversation ID.
 * @member {String} id
 */
GetConversation.prototype['id'] = undefined;

/**
 * Conversation content subject.
 * @member {String} subject
 */
GetConversation.prototype['subject'] = undefined;

/**
 * Conversation receiver.
 * @member {Array.<module:model/To>} to
 */
GetConversation.prototype['to'] = undefined;






export default GetConversation;

