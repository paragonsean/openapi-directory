/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddLogRequest from '../model/AddLogRequest';
import CancelOrder200Response from '../model/CancelOrder200Response';
import CancelOrderRequest from '../model/CancelOrderRequest';
import GetOrder200Response from '../model/GetOrder200Response';
import ListOrders from '../model/ListOrders';
import RegisterChange from '../model/RegisterChange';
import RegisterChangeRequest from '../model/RegisterChangeRequest';
import StartHandling401Response from '../model/StartHandling401Response';
import StartHandling409Response from '../model/StartHandling409Response';

/**
* Orders service.
* @module api/OrdersApi
* @version 1.0
*/
export default class OrdersApi {

    /**
    * Constructs a new OrdersApi. 
    * @alias module:api/OrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addLog operation.
     * @callback module:api/OrdersApi~addLogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add log in orders
     * Add a Log in Interactions Order Array.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} orderId Order ID is a unique code that identifies an order.
     * @param {module:model/AddLogRequest} addLogRequest 
     * @param {module:api/OrdersApi~addLogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addLog(contentType, accept, orderId, addLogRequest, callback) {
      let postBody = addLogRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling addLog");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling addLog");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling addLog");
      }
      // verify the required parameter 'addLogRequest' is set
      if (addLogRequest === undefined || addLogRequest === null) {
        throw new Error("Missing the required parameter 'addLogRequest' when calling addLog");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/oms/pvt/orders/{orderId}/interactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelOrder operation.
     * @callback module:api/OrdersApi~cancelOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelOrder200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel order
     * You should use this endpoint to cancel an order by its order identification number (the `orderId`).  A common scenario is one where the seller has a problem with the order fulfillment and needs to request the order cancellation to the marketplace. To do this, the seller would need to make this request, passing the `orderId` in the URL.  You should expect a response with the date when the notification was received, the orderId, and a receipt protocol code.  Be aware that if the order status is already `Invoiced`, the order can only be canceled ifâ€”before using this requestâ€”you send a return invoice through the [Order Invoice Notification endpoint](https://developers.vtex.com/reference/invoice#invoicenotification).    > The `Cancel order` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} orderId ID that identifies the order in the seller.
     * @param {Object} opts Optional parameters
     * @param {module:model/CancelOrderRequest} [cancelOrderRequest] 
     * @param {module:api/OrdersApi~cancelOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelOrder200Response}
     */
    cancelOrder(accept, contentType, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['cancelOrderRequest'];
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling cancelOrder");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling cancelOrder");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling cancelOrder");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelOrder200Response;
      return this.apiClient.callApi(
        '/api/oms/pvt/orders/{orderId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrder operation.
     * @callback module:api/OrdersApi~getOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrder200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get order
     * This endpoint retrieves order details by searching a specific order ID or sequence number.    > The `View order` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc).    > ðŸ“˜ Onboarding guide   >  > Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    ## Response body example    ```json  {      \"orderId\": \"1244730712239-01\",      \"sequence\": \"502790\",      \"marketplaceOrderId\": \"\",      \"marketplaceServicesEndpoint\": null,      \"sellerOrderId\": \"SLR-1244730712239-01\",      \"origin\": \"Marketplace\",      \"affiliateId\": \"\",      \"salesChannel\": \"1\",      \"merchantName\": null,      \"status\": \"payment-approved\",      \"statusDescription\": \"Pagamento Aprovado\",      \"value\": 2012,      \"creationDate\": \"2022-07-06T09:11:51.4597231+00:00\",      \"lastChange\": \"2022-07-06T09:12:00.2849749+00:00\",      \"orderGroup\": \"1244730712239\",      \"totals\": [          {              \"id\": \"Items\",              \"name\": \"Total dos Itens\",              \"value\": 2265          },          {              \"id\": \"Discounts\",              \"name\": \"Total dos Descontos\",              \"value\": -453          },          {              \"id\": \"Shipping\",              \"name\": \"Total do Frete\",              \"value\": 200          },          {              \"id\": \"Tax\",              \"name\": \"Total da Taxa\",              \"value\": 0          }      ],      \"items\": [          {              \"uniqueId\": \"A14AD652AC5D40FBB0137D3ADA3CB800\",              \"id\": \"12\",              \"productId\": \"8\",              \"ean\": null,              \"lockId\": null,              \"itemAttachment\": {                  \"content\": {},                  \"name\": null              },              \"attachments\": [],              \"quantity\": 1,              \"seller\": \"ppxpssp\",              \"name\": \"Camiseta P Azul\",              \"refId\": \"COP01_P-A\",              \"price\": 2265,              \"listPrice\": 2265,              \"manualPrice\": null,              \"priceTags\": [                  {                      \"name\": \"discount@price-d0231eb3-e9a4-47b2-9c74-bc346df11ce4#e9bb430d-30b3-4461-a86e-f66f35b2915d\",                      \"value\": -453,                      \"isPercentual\": false,                      \"identifier\": \"d0231eb3-e9a4-47b2-9c74-bc346df11ce4\",                      \"rawValue\": -4.53,                      \"rate\": null,                      \"jurisCode\": null,                      \"jurisType\": null,                      \"jurisName\": null                  }              ],              \"imageUrl\": \"https://ppxps.vteximg.com.br/arquivos/ids/155407-55-55/EE803C74-37A5-4804-B1A6-9F12D22EA505.png?v=637559269453730000\",              \"detailUrl\": \"/camiseta/p\",              \"components\": [],              \"bundleItems\": [],              \"params\": [],              \"offerings\": [],              \"sellerSku\": \"12\",              \"priceValidUntil\": \"2023-07-06T09:11:04.0000000+00:00\",              \"commission\": 0,              \"tax\": 0,              \"preSaleDate\": null,              \"additionalInfo\": {                  \"brandName\": \"Marca TOP\",                  \"brandId\": \"2000001\",                  \"categoriesIds\": \"/7/\",                  \"categories\": [                      {                          \"id\": 7,                          \"name\": \"Roupas\"                      }                  ],                  \"productClusterId\": \"\",                  \"commercialConditionId\": \"1\",                  \"dimension\": {                      \"cubicweight\": 1.0000,                      \"height\": 6.0000,                      \"length\": 10.0000,                      \"weight\": 4.0000,                      \"width\": 8.0000                  },                  \"offeringInfo\": null,                  \"offeringType\": null,                  \"offeringTypeId\": null              },              \"measurementUnit\": \"un\",              \"unitMultiplier\": 1.0000,              \"sellingPrice\": 1812,              \"isGift\": false,              \"shippingPrice\": null,              \"rewardValue\": 0,              \"freightCommission\": 0,              \"priceDefinition\": {                  \"sellingPrices\": [                      {                          \"value\": 1812,                          \"quantity\": 1                      }                  ],                  \"calculatedSellingPrice\": 1812,                  \"total\": 1812              },              \"taxCode\": \"1122\",              \"parentItemIndex\": null,              \"parentAssemblyBinding\": null,              \"callCenterOperator\": null,              \"serialNumbers\": null,              \"assemblies\": [],              \"costPrice\": null          }      ],      \"marketplaceItems\": [],      \"clientProfileData\": {          \"id\": \"clientProfileData\",          \"email\": \"0bf94cbf23ff410aaaf7c707dd8a808c@ct.vtex.com.br\",          \"firstName\": \"Paulo\",          \"lastName\": \"Filho\",          \"documentType\": \"cpf\",          \"document\": \"11156703794\",          \"phone\": \"+5521971126360\",          \"corporateName\": null,          \"tradeName\": null,          \"corporateDocument\": null,          \"stateInscription\": null,          \"corporatePhone\": null,          \"isCorporate\": false,          \"userProfileId\": \"ca0695a8-df34-4076-8663-725041930c75\",          \"customerClass\": null      },      \"giftRegistryData\": null,      \"marketingData\": {          \"id\": \"marketingData\",          \"utmSource\": null,          \"utmPartner\": null,          \"utmMedium\": null,          \"utmCampaign\": null,          \"coupon\": null,          \"utmiCampaign\": null,          \"utmipage\": null,          \"utmiPart\": null,          \"marketingTags\": [              \"vtex-subscription\"          ]      },      \"ratesAndBenefitsData\": {          \"id\": \"ratesAndBenefitsData\",          \"rateAndBenefitsIdentifiers\": [              {                  \"description\": \"Desconto de 20% no pedido para assinatura\",                  \"featured\": true,                  \"id\": \"d0231eb3-e9a4-47b2-9c74-bc346df11ce4\",                  \"name\": \"Desconto 20% assinante\",                  \"matchedParameters\": {},                  \"additionalInfo\": null              }          ]      },      \"shippingData\": {          \"id\": \"shippingData\",          \"address\": {              \"addressType\": \"residential\",              \"receiverName\": \"Paulo Filho\",              \"addressId\": \"1651158093975\",              \"postalCode\": \"21341-270\",              \"city\": \"Rio de Janeiro\",              \"state\": \"RJ\",              \"country\": \"BRA\",              \"street\": \"Rua Pinto Teles\",              \"number\": \"1\",              \"neighborhood\": \"PraÃ§a Seca\",              \"complement\": null,              \"reference\": null,              \"geoCoordinates\": [                  -43.350608825683594,                  -22.886520385742188              ]          },          \"logisticsInfo\": [              {                  \"itemIndex\": 0,                  \"selectedSla\": \"Normal\",                  \"lockTTL\": \"12d\",                  \"price\": 200,                  \"listPrice\": 200,                  \"sellingPrice\": 200,                  \"deliveryWindow\": null,                  \"deliveryCompany\": \"Transportadora\",                  \"shippingEstimate\": \"2bd\",                  \"shippingEstimateDate\": \"2022-07-08T09:11:57.8421126+00:00\",                  \"slas\": [                      {                          \"id\": \"Normal\",                          \"name\": \"Normal\",                          \"shippingEstimate\": \"2bd\",                          \"deliveryWindow\": null,                          \"price\": 200,                          \"deliveryChannel\": \"delivery\",                          \"pickupStoreInfo\": {                              \"additionalInfo\": null,                              \"address\": null,                              \"dockId\": null,                              \"friendlyName\": null,                              \"isPickupStore\": false                          },                          \"polygonName\": \"\",                          \"lockTTL\": \"12d\",                          \"pickupPointId\": null,                          \"transitTime\": \"2bd\"                      }                  ],                  \"shipsTo\": [                      \"BRA\"                  ],                  \"deliveryIds\": [                      {                          \"courierId\": \"1\",                          \"courierName\": \"Transportadora\",                          \"dockId\": \"169fe66\",                          \"quantity\": 1,                          \"warehouseId\": \"166cb0c\",                          \"accountCarrierName\": null                      }                  ],                  \"deliveryChannel\": \"delivery\",                  \"pickupStoreInfo\": {                      \"additionalInfo\": null,                      \"address\": null,                      \"dockId\": null,                      \"friendlyName\": null,                      \"isPickupStore\": false                  },                  \"addressId\": \"1651158093975\",                  \"polygonName\": \"\",                  \"pickupPointId\": null,                  \"transitTime\": \"2bd\"              }          ],          \"trackingHints\": null,          \"selectedAddresses\": [              {                  \"addressId\": \"1651158093975\",                  \"addressType\": \"residential\",                  \"receiverName\": \"Paulo Filho\",                  \"street\": \"Rua Pinto Teles\",                  \"number\": \"1\",                  \"complement\": null,                  \"neighborhood\": \"PraÃ§a Seca\",                  \"postalCode\": \"21341-270\",                  \"city\": \"Rio de Janeiro\",                  \"state\": \"RJ\",                  \"country\": \"BRA\",                  \"reference\": null,                  \"geoCoordinates\": [                      -43.350608825683594,                      -22.886520385742188                  ]              }          ]      },      \"paymentData\": {          \"giftCards\": [],          \"transactions\": [              {                  \"isActive\": true,                  \"transactionId\": \"A5BF0F884F314F788F4778B464EE1648\",                  \"merchantName\": \"PPXPS\",                  \"payments\": [                      {                          \"id\": \"06D8D76D4BD549EF9CC209D969ACBA84\",                          \"paymentSystem\": \"47\",                          \"paymentSystemName\": \"Cash\",                          \"value\": 2012,                          \"installments\": 1,                          \"referenceValue\": 2012,                          \"cardHolder\": null,                          \"cardNumber\": null,                          \"firstDigits\": null,                          \"lastDigits\": null,                          \"cvv2\": null,                          \"expireMonth\": null,                          \"expireYear\": null,                          \"url\": null,                          \"giftCardId\": null,                          \"giftCardName\": null,                          \"giftCardCaption\": null,                          \"redemptionCode\": null,                          \"group\": \"cash\",                          \"tid\": null,                          \"dueDate\": null,                          \"connectorResponses\": {},                          \"giftCardProvider\": null,                          \"giftCardAsDiscount\": null,                          \"koinUrl\": null,                          \"accountId\": null,                          \"parentAccountId\": null,                          \"bankIssuedInvoiceIdentificationNumber\": null,                          \"bankIssuedInvoiceIdentificationNumberFormatted\": null,                          \"bankIssuedInvoiceBarCodeNumber\": null,                          \"bankIssuedInvoiceBarCodeType\": null,                          \"billingAddress\": null                      }                  ]              }          ]      },      \"packageAttachment\": {          \"packages\": []      },      \"sellers\": [          {              \"id\": \"ppxpssp\",              \"name\": \"ppxpssp\",              \"logo\": \"\",              \"fulfillmentEndpoint\": \"http://fulfillment.vtexcommerce.com.br/api/fulfillment?an=ppxpssp&affiliateId=SLR&sc=1\"          }      ],      \"callCenterOperatorData\": null,      \"followUpEmail\": \"0a902f64ba1443c3b26ab5cb0b2aad9e@ct.vtex.com.br\",      \"lastMessage\": null,      \"hostname\": \"ppxps\",      \"invoiceData\": null,      \"changesAttachment\": null,      \"openTextField\": {          \"value\": \"Order Created By VTEX Subscription System\"      },      \"roundingError\": 0,      \"orderFormId\": \"3d59650b4e9a447d80ecfac4830926d9\",      \"commercialConditionData\": null,      \"isCompleted\": true,      \"customData\": null,      \"storePreferencesData\": {          \"countryCode\": \"BRA\",          \"currencyCode\": \"BRL\",          \"currencyFormatInfo\": {              \"CurrencyDecimalDigits\": 2,              \"CurrencyDecimalSeparator\": \",\",              \"CurrencyGroupSeparator\": \".\",              \"CurrencyGroupSize\": 3,              \"StartsWithCurrencySymbol\": true          },          \"currencyLocale\": 1046,          \"currencySymbol\": \"R$\",          \"timeZone\": \"E. South America Standard Time\"      },      \"allowCancellation\": true,      \"allowEdition\": false,      \"isCheckedIn\": false,      \"marketplace\": null,      \"authorizedDate\": \"2022-07-06T09:11:56.0006230+00:00\",      \"invoicedDate\": null,      \"cancelReason\": null,      \"itemMetadata\": {          \"Items\": [              {                  \"Id\": \"12\",                  \"Seller\": \"1\",                  \"Name\": \"Camiseta P Azul\",                  \"SkuName\": \"P Azul\",                  \"ProductId\": \"8\",                  \"RefId\": \"COP01_P-A\",                  \"Ean\": null,                  \"ImageUrl\": \"http://ppxps.vteximg.com.br/arquivos/ids/155407-55-55/EE803C74-37A5-4804-B1A6-9F12D22EA505.png?v=637559269453730000\",                  \"DetailUrl\": \"/camiseta/p\",                  \"AssemblyOptions\": []              }          ]      },      \"subscriptionData\": {          \"SubscriptionGroupId\": \"C191822AF072C7508F9BBBC655FE8E60\",          \"Subscriptions\": [              {                  \"ExecutionCount\": 274,                  \"PriceAtSubscriptionDate\": 2265.0,                  \"ItemIndex\": 0,                  \"Plan\": {                      \"type\": \"RECURRING_PAYMENT\",                      \"frequency\": {                          \"periodicity\": \"DAILY\",                          \"interval\": 1                      },                      \"validity\": {                          \"begin\": \"2021-10-05T00:00:00.0000000+00:00\",                          \"end\": null                      }                  }              }          ]      },      \"taxData\": null,      \"checkedInPickupPointId\": null,      \"cancellationData\": null  }  ```
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {String} orderId Order ID is a unique code that identifies an order. Instead of using `orderId`, you can also make the request using the sequence, a six-digit string that follows the order ID. For example, in order 1268540501456-01 (501456), the sequence is 501456. To use this parameter, replace the value between `{ }` keys in `seq{sequence-number}` with the sequence. For example: `seq501456`.
     * @param {module:api/OrdersApi~getOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrder200Response}
     */
    getOrder(accept, contentType, orderId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getOrder");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getOrder");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrder");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrder200Response;
      return this.apiClient.callApi(
        '/api/oms/pvt/orders/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOrders operation.
     * @callback module:api/OrdersApi~listOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOrders} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List orders
     * Retrieves a list of orders according to the filters described below.     The limit of information retrieval is 30 pages, the default number of orders per page is 15 and it is possible to configure it up to 100 using the  `per_page` parameter.      Be aware that as of October 3rd, 2018, this endpoint will not return the `items` property.     > This should **not** be used for integrations. Use the [orders Feed or hook](https://developers.vtex.com/docs/guides/orders-feed) for this purpose.    This endpoint returns only orders that already have been indexed, which takes approximately four minutes. Because of this, the data retrieved may present inconsistencies. To get live up-to-date information and [build order integrations](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration) use the [orders Feed or hook](https://developers.vtex.com/docs/guides/orders-feed).   > ðŸ“˜ Onboarding guide   >  > Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {String} fCreationDate Concatened value sufix `{{creationDate}}` and range date in Timestamp format. To use the `utc` query parameter, to filter orders by time zone, you must also fill the `f_creationDate` date parameter.
     * @param {Object} opts Optional parameters
     * @param {String} [orderBy = 'v502556llux-01,asc')] You can retrieve orders lists filtering by an `OrderField` combined with an `OrderType`. To do so, you have to concatenate them: `orderBy={{OrderField}},{{OrderType}}`.   - `OrderField` values accepted: `creationDate`, `orderId`, `items`, `totalValue` and `origin`.   - `OrderType` values accepted: `asc` and `desc`.
     * @param {Number} [page = 10)] Define the number of pages you wish to retrieve, restricted to the limit of 30 pages.
     * @param {Number} [perPage = 15)] Quantity of orders for each page, the default value is 15 and it goes up to 100 orders per page. Be aware that the limit of retrieval ofthis endpoint is 30 pages.
     * @param {Boolean} [fHasInputInvoice = false)] Filters list to return only orders with non `null` values for the `invoiceInput` field.
     * @param {String} [q = '- OrderID: v212333lux-02 
- Client email: taylor@email.com 
- Client document: 21133355524 
- Client name: Taylor')] This parameter filters using Fulltext and accepts the values below. Be aware that the `+` caracter is not allowed in Fulltext Search.   - Order Id   - Client email   - Client document   - Client name
     * @param {Number} [utc = -2000)] Converts orders' time zone to the Universal Time Coordinated (UTC) format and shows the amount of orders set for that UTC, up to the limit of 30 pages. For it to work properly, you have to associate it with the `f_creationDate` parameter.
     * @param {String} [fShippingEstimate = '0.days')] You can filter orders by shipping estimate time in days by concatenating the desired number of days with the sufix `.days`. For example:   - Next 7 days: `7.days`   - Tomorrow: `1.days`   - Today: `0.days`   - Late: `-1.days`
     * @param {String} [fInvoicedDate = 'invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]')] You can filter orders by invoiced date by concatenating the sufix `invoicedDate:` with the range date in Timestamp format. For example:   - 1 Day: `invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]`  - 1 Month: `invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-02-01T01:59:59.999Z]`   - 1 Year: `invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-01T01:59:59.999Z]`
     * @param {String} [fAuthorizedDate = 'creationDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]')] You can filter orders by creation date by concatenating the sufix `authorizedDate:` with the range date in Timestamp format. For example:   - 1 Day: `authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]`  - 1 Month: `authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-02-01T01:59:59.999Z]`   - 1 Year: `authorizedDate:[2022-01-01T02:00:00.000Z TO 2022-01-01T01:59:59.999Z]`
     * @param {String} [fUtmSource = 'christmas_campaign')] You can filter orders by using a Universal Transverse Mercator (UTM) source.
     * @param {String} [fSellerNames = 'SellerName')] You can filter orders by using a seller's name.
     * @param {String} [fCallCenterOperatorName = 'Operator%20Name')] You can filter orders by using a Call Center Operator's identification.
     * @param {String} [fSalesChannel = 'Main')] You can filter orders by sales channel's ([or trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) name.
     * @param {String} [salesChannelId = '1')] You can filter orders by sales channel's ([or trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID.
     * @param {String} [fAffiliateId = 'WLM')] You can filter orders by affiliate ID.
     * @param {String} [fStatus = 'ready-for-handling')] You can filter orders by the following [order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196):   - `waiting-for-sellers-confirmation`   - `payment-pending`   - `payment-approved`   - `ready-for-handling`   - `handling`   - `invoiced`   - `canceled`
     * @param {Boolean} [incompleteOrders = true)] When set as `true`, you retrieve [incomplete orders](https://help.vtex.com/en/tutorial/understanding-incomplete-orders), when set as `false`, you retrieve orders that are not incomplete.
     * @param {String} [fPaymentNames = 'Visa')] You can filter orders by payment type.
     * @param {String} [fRnB = 'Free+Shipping')] You can filter orders by rates and benefits (promotions).
     * @param {String} [searchField = '
- SKU ID: `25` 
- Gift List ID: `11223` 
- Transaction ID (TID): `54546300238810034995829230012` 
- PCI Connector's Transaction ID (TID): `7032909234899834298423209` 
- Payment ID (PID): `2` 
- Connector's NSU: `2437281`')] You can search orders by using one of the following criterias:   - SKU ID - `sku_Ids&sku_Ids`   - Gift List ID - `listId&listId`   - Transaction ID (TID) - `tid&tid`   - PCI Connector's Transaction ID (TID) - `pci_tid&pci_tid`   - Payment ID (PID) - `paymentId&paymentId`   - Connector's NSU - `nsu&nsu`
     * @param {Boolean} [fIsInstore = true)] When set as `true`, this parameter filters orders made via [inStore](https://help.vtex.com/en/tracks/what-is-instore--zav76TFEZlAjnyBVL5tRc), and when set as `false`, it filters orders that were not made via inStore.
     * @param {module:api/OrdersApi~listOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOrders}
     */
    listOrders(accept, contentType, fCreationDate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling listOrders");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listOrders");
      }
      // verify the required parameter 'fCreationDate' is set
      if (fCreationDate === undefined || fCreationDate === null) {
        throw new Error("Missing the required parameter 'fCreationDate' when calling listOrders");
      }

      let pathParams = {
      };
      let queryParams = {
        'orderBy': opts['orderBy'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'f_creationDate': fCreationDate,
        'f_hasInputInvoice': opts['fHasInputInvoice'],
        'q': opts['q'],
        'utc': opts['utc'],
        'f_shippingEstimate': opts['fShippingEstimate'],
        'f_invoicedDate': opts['fInvoicedDate'],
        'f_authorizedDate': opts['fAuthorizedDate'],
        'f_UtmSource': opts['fUtmSource'],
        'f_sellerNames': opts['fSellerNames'],
        'f_callCenterOperatorName': opts['fCallCenterOperatorName'],
        'f_salesChannel': opts['fSalesChannel'],
        'salesChannelId': opts['salesChannelId'],
        'f_affiliateId': opts['fAffiliateId'],
        'f_status': opts['fStatus'],
        'incompleteOrders': opts['incompleteOrders'],
        'f_paymentNames': opts['fPaymentNames'],
        'f_RnB': opts['fRnB'],
        'searchField': opts['searchField'],
        'f_isInstore': opts['fIsInstore']
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = ListOrders;
      return this.apiClient.callApi(
        '/api/oms/pvt/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerChange operation.
     * @callback module:api/OrdersApi~registerChangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterChange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register change on order
     *   > Timeout settings  >  > This is a synchronous API, which means the application requests data and waits until a value is returned. This behavior can cause timeout errors; to avoid them, we recommend setting the timeout in 20 seconds.     This request allows [changing an order](https://help.vtex.com/en/tutorial/changing-items-from-a-completed-order--tutorials_190) by:  - Adding items to an order  - Removing items from an order  - Applying discounts to the total value of the order  - Incrementing the total value of the order.   In those scenarios of order changes, it is possible to insert a [Partial invoice](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe). The total value of the order will be updated after the insertion of the invoice, even when there is a partial invoice scenario. The updated value is settled by VTEX's Payment Gateway. The reimbursement for the shopper is automatic.     This action can only be done for orders in these status:  - `handling`  - `waiting-for-fulfillment`     > The `Change order` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} orderId ID that identifies the order in the seller.
     * @param {module:model/RegisterChangeRequest} registerChangeRequest 
     * @param {module:api/OrdersApi~registerChangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterChange}
     */
    registerChange(contentType, accept, orderId, registerChangeRequest, callback) {
      let postBody = registerChangeRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling registerChange");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling registerChange");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling registerChange");
      }
      // verify the required parameter 'registerChangeRequest' is set
      if (registerChangeRequest === undefined || registerChangeRequest === null) {
        throw new Error("Missing the required parameter 'registerChangeRequest' when calling registerChange");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterChange;
      return this.apiClient.callApi(
        '/api/oms/pvt/orders/{orderId}/changes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startHandling operation.
     * @callback module:api/OrdersApi~startHandlingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start handling order
     * Changes the status of an order to indicate that it is in `handling`.    > Expect a `status 204` response with no content in case of a successful request. The store must validate this response to retry the call if the response differs from the `204` code, making this flow the store's responsibility. This endpoint can also respond with `status 500`.     > The `Change order workflow status` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {String} orderId Order ID is a unique code that identifies an order.
     * @param {module:api/OrdersApi~startHandlingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startHandling(accept, contentType, orderId, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling startHandling");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling startHandling");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling startHandling");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/oms/pvt/orders/{orderId}/start-handling', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
