/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* FeedV2Deprecated service.
* @module api/FeedV2DeprecatedApi
* @version 1.0
*/
export default class FeedV2DeprecatedApi {

    /**
    * Constructs a new FeedV2DeprecatedApi. 
    * @alias module:api/FeedV2DeprecatedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getfeedorderstatus operation.
     * @callback module:api/FeedV2DeprecatedApi~getfeedorderstatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get feed order status
     * Get feed order status (deprecated)
     * @param {String} maxLot 
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} contentType Type of the content being sent
     * @param {module:api/FeedV2DeprecatedApi~getfeedorderstatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getfeedorderstatus(maxLot, accept, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'maxLot' is set
      if (maxLot === undefined || maxLot === null) {
        throw new Error("Missing the required parameter 'maxLot' when calling getfeedorderstatus");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getfeedorderstatus");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getfeedorderstatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxLot': maxLot
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/oms/pvt/feed/orders/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
