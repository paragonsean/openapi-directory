/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExportCompletedResponse from '../model/ExportCompletedResponse';
import ExportInProgressResponse from '../model/ExportInProgressResponse';

/**
* ExportOrderReport service.
* @module api/ExportOrderReportApi
* @version 1.0
*/
export default class ExportOrderReportApi {

    /**
    * Constructs a new ExportOrderReportApi. 
    * @alias module:api/ExportOrderReportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the statusCompleted operation.
     * @callback module:api/ExportOrderReportApi~statusCompletedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExportCompletedResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export order report with status 'Completed'
     * Retrieves a list of all order reports that are `completed`, by `accountName`. Be aware that the scope of the export log is per user.     > This endpoint is for VTEX internal use, and it is not meant to be used by clients.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/ExportOrderReportApi~statusCompletedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExportCompletedResponse>}
     */
    statusCompleted(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling statusCompleted");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling statusCompleted");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [ExportCompletedResponse];
      return this.apiClient.callApi(
        '/api/oms/pvt/admin/reports/completed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the statusInProgress operation.
     * @callback module:api/ExportOrderReportApi~statusInProgressCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExportInProgressResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export order report with status 'In Progress'
     * Retrieves a list of all order reports that are `in progress`, by `accountName`. Be aware that the scope of the export log is per user.     > This endpoint is for VTEX internal use, and it is not meant to be used by clients.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/ExportOrderReportApi~statusInProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExportInProgressResponse>}
     */
    statusInProgress(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling statusInProgress");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling statusInProgress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [ExportInProgressResponse];
      return this.apiClient.callApi(
        '/api/oms/pvt/admin/reports/inprogress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
