/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Userorderdetails from '../model/Userorderdetails';
import Userorderslist from '../model/Userorderslist';

/**
* UserOrders service.
* @module api/UserOrdersApi
* @version 1.0
*/
export default class UserOrdersApi {

    /**
    * Constructs a new UserOrdersApi. 
    * @alias module:api/UserOrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userorderdetails operation.
     * @callback module:api/UserOrdersApi~userorderdetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Userorderdetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve user order details
     * Lists all details from a user's order, through client's perspective.     > Note that these requests are meant to be made by **Call center operator** profiles. Otherwise, they will return only orders from the same email making the request.
     * @param {String} clientEmail Customer email.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} orderId Order ID is a unique code that identifies an order.
     * @param {module:api/UserOrdersApi~userorderdetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Userorderdetails}
     */
    userorderdetails(clientEmail, contentType, accept, orderId, callback) {
      let postBody = null;
      // verify the required parameter 'clientEmail' is set
      if (clientEmail === undefined || clientEmail === null) {
        throw new Error("Missing the required parameter 'clientEmail' when calling userorderdetails");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling userorderdetails");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling userorderdetails");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling userorderdetails");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        'clientEmail': clientEmail
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Userorderdetails;
      return this.apiClient.callApi(
        '/api/oms/user/orders/{orderId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userorderslist operation.
     * @callback module:api/UserOrdersApi~userorderslistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Userorderslist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve user's orders
     * Lists all orders from a given client, filtering by their email.     > Note that these requests are meant to be made by **Call center operator** profiles. Otherwise, they will return only orders from the same email making the request.
     * @param {String} clientEmail Customer email.
     * @param {String} page Page number for result pagination.
     * @param {String} perPage Page quantity for result pagination.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:api/UserOrdersApi~userorderslistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Userorderslist}
     */
    userorderslist(clientEmail, page, perPage, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'clientEmail' is set
      if (clientEmail === undefined || clientEmail === null) {
        throw new Error("Missing the required parameter 'clientEmail' when calling userorderslist");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling userorderslist");
      }
      // verify the required parameter 'perPage' is set
      if (perPage === undefined || perPage === null) {
        throw new Error("Missing the required parameter 'perPage' when calling userorderslist");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling userorderslist");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling userorderslist");
      }

      let pathParams = {
      };
      let queryParams = {
        'clientEmail': clientEmail,
        'page': page,
        'per_page': perPage
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Userorderslist;
      return this.apiClient.callApi(
        '/api/oms/user/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
