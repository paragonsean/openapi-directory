/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HookConfiguration from '../model/HookConfiguration';
import HookConfigurationRequest from '../model/HookConfigurationRequest';

/**
* OrderHook service.
* @module api/OrderHookApi
* @version 1.0
*/
export default class OrderHookApi {

    /**
    * Constructs a new OrderHookApi. 
    * @alias module:api/OrderHookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteHookConfiguration operation.
     * @callback module:api/OrderHookApi~deleteHookConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete hook configuration
     * Deletes a given hook configuration.    Learn more with the [orders hook guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed#hook).
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {module:api/OrderHookApi~deleteHookConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHookConfiguration(accept, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteHookConfiguration");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteHookConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/orders/hook/config', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHookConfiguration operation.
     * @callback module:api/OrderHookApi~getHookConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get hook configuration
     * Retrieves a given hook's configuration details. Learn more with the [orders hook guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed#hook).     > ðŸ“˜ Onboarding guide   >  > Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {String} [clientEmail] Customer email.
     * @param {String} [page] Page number for result pagination.
     * @param {String} [perPage] Page quantity for result pagination.
     * @param {module:api/OrderHookApi~getHookConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getHookConfiguration(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getHookConfiguration");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getHookConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
        'clientEmail': opts['clientEmail'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/orders/hook/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hookConfiguration operation.
     * @callback module:api/OrderHookApi~hookConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HookConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update hook configuration
     * Configures filtering rules applied to orders hook. Learn more with the [orders hook guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed#hook).    There are two types of filtering that can be used:      - `FromWorkflow`: filters orders by status.     - `FromOrders`: uses JSONata expressions to filter orders according to any property in the orders JSON document.     This enables stores to filter delivered orders and orders in which products have been added or removed, for example.    To learn more, access the [JSONata documentation](https://docs.jsonata.org/overview.html) and test filtering JSONata expressions with our [expressions API](https://developers.vtex.com/docs/api-reference/orders-api#post-/api/orders/expressions/jsonata).
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:model/HookConfigurationRequest} hookConfigurationRequest 
     * @param {module:api/OrderHookApi~hookConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HookConfiguration}
     */
    hookConfiguration(contentType, accept, hookConfigurationRequest, callback) {
      let postBody = hookConfigurationRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling hookConfiguration");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling hookConfiguration");
      }
      // verify the required parameter 'hookConfigurationRequest' is set
      if (hookConfigurationRequest === undefined || hookConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'hookConfigurationRequest' when calling hookConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HookConfiguration;
      return this.apiClient.callApi(
        '/api/orders/hook/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
