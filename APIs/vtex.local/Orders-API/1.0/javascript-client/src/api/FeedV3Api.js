/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommititemfeedorderstatusRequest from '../model/CommititemfeedorderstatusRequest';
import FeedConfigurationRequest from '../model/FeedConfigurationRequest';
import GetFeedConfiguration200Response from '../model/GetFeedConfiguration200Response';
import Getfeedorderstatus from '../model/Getfeedorderstatus';
import TestJSONataExpression from '../model/TestJSONataExpression';

/**
* FeedV3 service.
* @module api/FeedV3Api
* @version 1.0
*/
export default class FeedV3Api {

    /**
    * Constructs a new FeedV3Api. 
    * @alias module:api/FeedV3Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the commititemfeedorderstatus operation.
     * @callback module:api/FeedV3Api~commititemfeedorderstatusCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit feed items
     * Commit items in the [feed](https://developers.vtex.com/docs/guides/orders-feed) queue.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {module:model/CommititemfeedorderstatusRequest} commititemfeedorderstatusRequest 
     * @param {module:api/FeedV3Api~commititemfeedorderstatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    commititemfeedorderstatus(contentType, accept, commititemfeedorderstatusRequest, callback) {
      let postBody = commititemfeedorderstatusRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling commititemfeedorderstatus");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling commititemfeedorderstatus");
      }
      // verify the required parameter 'commititemfeedorderstatusRequest' is set
      if (commititemfeedorderstatusRequest === undefined || commititemfeedorderstatusRequest === null) {
        throw new Error("Missing the required parameter 'commititemfeedorderstatusRequest' when calling commititemfeedorderstatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/orders/feed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the feedConfiguration operation.
     * @callback module:api/FeedV3Api~feedConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update feed configuration
     * The Orders Feed v3 is the best way to create order integrations. Below you can find details on the configuration API specification, and to know more see our [Feed v3 guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed) and our [order integration guide](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration)    There are two types of filtering that can be used. The `FromWorkflow` type filters orders by status, whereas the `FromOrders` type uses JSONata expressions to filter orders according to any property in the orders JSON document. This enables stores to filter delivered orders and orders in which products have been added or removed, for example. To learn more, access the [JSONata documentation](https://docs.jsonata.org/overview.html) and test filtering JSONata expressions with our [Test JSONata expression](https://developers.vtex.com/docs/api-reference/orders-api#post-/api/orders/expressions/jsonata) endpoint.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {module:model/FeedConfigurationRequest} feedConfigurationRequest 
     * @param {module:api/FeedV3Api~feedConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    feedConfiguration(accept, contentType, feedConfigurationRequest, callback) {
      let postBody = feedConfigurationRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling feedConfiguration");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling feedConfiguration");
      }
      // verify the required parameter 'feedConfigurationRequest' is set
      if (feedConfigurationRequest === undefined || feedConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'feedConfigurationRequest' when calling feedConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/orders/feed/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the feedConfigurationDelete operation.
     * @callback module:api/FeedV3Api~feedConfigurationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete feed configuration
     * Deletes the configuration set up in [Feed v3](https://developers.vtex.com/docs/guides/orders-feed).
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {module:api/FeedV3Api~feedConfigurationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    feedConfigurationDelete(accept, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling feedConfigurationDelete");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling feedConfigurationDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/orders/feed/config', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedConfiguration operation.
     * @callback module:api/FeedV3Api~getFeedConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFeedConfiguration200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get feed configuration
     * The Orders Feed v3 is the best way to create order integrations. Below you can find details on the configuration API specification, and to know more see our [Feed v3 guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed) and our [order integration guide](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration).   > 📘 Onboarding guide   >  > Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:api/FeedV3Api~getFeedConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFeedConfiguration200Response}
     */
    getFeedConfiguration(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getFeedConfiguration");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getFeedConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFeedConfiguration200Response;
      return this.apiClient.callApi(
        '/api/orders/feed/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getfeedorderstatus1 operation.
     * @callback module:api/FeedV3Api~getfeedorderstatus1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Getfeedorderstatus>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve feed items
     * Retrieve items from [feed](https://developers.vtex.com/docs/guides/orders-feed) queue.    The event will be removed if the message `send retry` is equal to, or greater than the maximum retention period.    > This API will return `404 Not Found` if there is no [Feed Configuration](https://developers.vtex.com/docs/guides/orders-feed) available for the given X-VTEX-API-AppKey.
     * @param {String} maxlot Lot quantity to retrieve. Maximum accepted value is 10.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} contentType Type of the content being sent
     * @param {module:api/FeedV3Api~getfeedorderstatus1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Getfeedorderstatus>}
     */
    getfeedorderstatus1(maxlot, accept, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'maxlot' is set
      if (maxlot === undefined || maxlot === null) {
        throw new Error("Missing the required parameter 'maxlot' when calling getfeedorderstatus1");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getfeedorderstatus1");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getfeedorderstatus1");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxlot': maxlot
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Getfeedorderstatus];
      return this.apiClient.callApi(
        '/api/orders/feed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testJSONataExpression operation.
     * @callback module:api/FeedV3Api~testJSONataExpressionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test JSONata expression
     * This endpoint allows you to test a JSON document with a JSONata expression, returning `true` if the document meets the criteria posed in the expression, or `false` if it does not.    Since JSONata expressions can be used to filter order updates in the [Orders API feed and hook](https://developers.vtex.com/docs/guides/orders-feed), this endpoint can be used to test an expression's results before configuring the [feed or hook](https://developers.vtex.com/docs/guides/orders-feed).    Learn more about how to use JSONata expressions, in the [JSONata documentation](https://docs.jsonata.org/overview.html).
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} contentType Type of the content being sent
     * @param {Object} opts Optional parameters
     * @param {module:model/TestJSONataExpression} [testJSONataExpression] 
     * @param {module:api/FeedV3Api~testJSONataExpressionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    testJSONataExpression(accept, contentType, opts, callback) {
      opts = opts || {};
      let postBody = opts['testJSONataExpression'];
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling testJSONataExpression");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling testJSONataExpression");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/orders/expressions/jsonata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
