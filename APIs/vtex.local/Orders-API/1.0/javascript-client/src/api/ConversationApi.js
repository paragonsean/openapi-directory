/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetConversation from '../model/GetConversation';

/**
* Conversation service.
* @module api/ConversationApi
* @version 1.0
*/
export default class ConversationApi {

    /**
    * Constructs a new ConversationApi. 
    * @alias module:api/ConversationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getConversation operation.
     * @callback module:api/ConversationApi~getConversationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetConversation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve order conversation
     * List all order conversations of an order by its order ID.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {String} orderId Order ID is a unique code that identifies an order.
     * @param {Object} opts Optional parameters
     * @param {String} [reason] Reason for requesting unmasked data. Relevant only for PII platform version.
     * @param {module:api/ConversationApi~getConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetConversation>}
     */
    getConversation(accept, contentType, orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getConversation");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getConversation");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getConversation");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
        'reason': opts['reason']
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = [GetConversation];
      return this.apiClient.callApi(
        '/api/oms/pvt/orders/{orderId}/conversation-message', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
