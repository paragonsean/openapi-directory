/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelOrder200Response from '../model/CancelOrder200Response';
import InvoiceNotificationRequest from '../model/InvoiceNotificationRequest';
import UpdatepartialinvoiceSendTrackingNumber from '../model/UpdatepartialinvoiceSendTrackingNumber';
import UpdatepartialinvoiceSendTrackingNumberRequest from '../model/UpdatepartialinvoiceSendTrackingNumberRequest';

/**
* Invoice service.
* @module api/InvoiceApi
* @version 1.0
*/
export default class InvoiceApi {

    /**
    * Constructs a new InvoiceApi. 
    * @alias module:api/InvoiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the invoiceNotification operation.
     * @callback module:api/InvoiceApi~invoiceNotificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelOrder200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Order invoice notification
     * Entering the [invoice in the order](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/2WgQrlHTyVo4hLjhUs1LMT) is a required step for its [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196#order-status-details) to change to Invoiced - a sign that the order has been successfully completed. Remember that once an order is read as invoiced by the system, this status cannot be changed.   The total value of the order will be updated after the insertion of the invoice, even when there's a [Partial invoice](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe) scenario. The updated value is settled by VTEX's Payment Gateway. The reimbursement for the shopper is automatic.   We strongly recommend that you always send the object of the invoiced items. With this practice, rounding errors will be avoided.   When returning items, an input invoice must be sent through this call. For that, the `type` field should be filled in with `input`.   It is not allowed to use the same `invoiceNumber` in more than one request to the Order Invoice Notification endpoint.  For marketplace integrations: once the order is invoiced, the seller should use this request to send the invoice information to the marketplace. Be aware that this endpoint is also used by the seller to send the order tracking information. This, however, should be done in a separate moment, once the seller has the tracking information.      > The `Notify invoice` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).    > ðŸ“˜ Onboarding guide   >  > Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {String} orderId Unique code that identifies the order whose invoice is being sent.
     * @param {module:model/InvoiceNotificationRequest} invoiceNotificationRequest 
     * @param {module:api/InvoiceApi~invoiceNotificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelOrder200Response}
     */
    invoiceNotification(accept, contentType, orderId, invoiceNotificationRequest, callback) {
      let postBody = invoiceNotificationRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling invoiceNotification");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling invoiceNotification");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling invoiceNotification");
      }
      // verify the required parameter 'invoiceNotificationRequest' is set
      if (invoiceNotificationRequest === undefined || invoiceNotificationRequest === null) {
        throw new Error("Missing the required parameter 'invoiceNotificationRequest' when calling invoiceNotification");
      }

      let pathParams = {
        'orderId': orderId
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelOrder200Response;
      return this.apiClient.callApi(
        '/api/oms/pvt/orders/{orderId}/invoice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatepartialinvoiceSendTrackingNumber operation.
     * @callback module:api/InvoiceApi~updatepartialinvoiceSendTrackingNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatepartialinvoiceSendTrackingNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update order's partial invoice (send tracking number)
     * Update a given order, adding its tracking number to its [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe).    After using this call to add a tracking number to an order, you can use the [Update order tracking status](https://developers.vtex.com/vtex-rest-api/reference/tracking#updatetrackingstatus) API request to add tracking events.    > The `Notify invoice` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc).
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} orderId Unique code that identifies the order whose invoice is being sent.
     * @param {String} invoiceNumber Number that identifies the invoice.
     * @param {module:model/UpdatepartialinvoiceSendTrackingNumberRequest} updatepartialinvoiceSendTrackingNumberRequest 
     * @param {module:api/InvoiceApi~updatepartialinvoiceSendTrackingNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatepartialinvoiceSendTrackingNumber}
     */
    updatepartialinvoiceSendTrackingNumber(contentType, accept, orderId, invoiceNumber, updatepartialinvoiceSendTrackingNumberRequest, callback) {
      let postBody = updatepartialinvoiceSendTrackingNumberRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updatepartialinvoiceSendTrackingNumber");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updatepartialinvoiceSendTrackingNumber");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling updatepartialinvoiceSendTrackingNumber");
      }
      // verify the required parameter 'invoiceNumber' is set
      if (invoiceNumber === undefined || invoiceNumber === null) {
        throw new Error("Missing the required parameter 'invoiceNumber' when calling updatepartialinvoiceSendTrackingNumber");
      }
      // verify the required parameter 'updatepartialinvoiceSendTrackingNumberRequest' is set
      if (updatepartialinvoiceSendTrackingNumberRequest === undefined || updatepartialinvoiceSendTrackingNumberRequest === null) {
        throw new Error("Missing the required parameter 'updatepartialinvoiceSendTrackingNumberRequest' when calling updatepartialinvoiceSendTrackingNumber");
      }

      let pathParams = {
        'orderId': orderId,
        'invoiceNumber': invoiceNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatepartialinvoiceSendTrackingNumber;
      return this.apiClient.callApi(
        '/api/oms/pvt/orders/{orderId}/invoice/{invoiceNumber}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
