/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UpdateWindowToChangeSellerRequest from '../model/UpdateWindowToChangeSellerRequest';

/**
* ChangeSeller service.
* @module api/ChangeSellerApi
* @version 1.0
*/
export default class ChangeSellerApi {

    /**
    * Constructs a new ChangeSellerApi. 
    * @alias module:api/ChangeSellerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getWindowToChangeSeller operation.
     * @callback module:api/ChangeSellerApi~getWindowToChangeSellerCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get window to change seller
     * Retrieves a marketplace’s window to change seller, that is, the period when it is possible to choose another seller to fulfill a given order after the original seller has canceled it.    The default period for this window is of 2 days, but it can be configured by the request Update window to change seller.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {module:api/ChangeSellerApi~getWindowToChangeSellerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getWindowToChangeSeller(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getWindowToChangeSeller");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getWindowToChangeSeller");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/checkout/pvt/configuration/window-to-change-seller', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWindowToChangeSeller operation.
     * @callback module:api/ChangeSellerApi~updateWindowToChangeSellerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update window to change seller
     * Updates a marketplace’s window to change seller, that is, the period when it is possible to choose another seller to fulfill a given order after the original seller has canceled it.    It is possible to check the current window using the request Get window to change seller.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {module:model/UpdateWindowToChangeSellerRequest} updateWindowToChangeSellerRequest 
     * @param {module:api/ChangeSellerApi~updateWindowToChangeSellerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateWindowToChangeSeller(contentType, accept, updateWindowToChangeSellerRequest, callback) {
      let postBody = updateWindowToChangeSellerRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateWindowToChangeSeller");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updateWindowToChangeSeller");
      }
      // verify the required parameter 'updateWindowToChangeSellerRequest' is set
      if (updateWindowToChangeSellerRequest === undefined || updateWindowToChangeSellerRequest === null) {
        throw new Error("Missing the required parameter 'updateWindowToChangeSellerRequest' when calling updateWindowToChangeSeller");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/checkout/pvt/configuration/window-to-change-seller', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
