/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OrdersApi);
  }
}(this, function(expect, OrdersApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OrdersApi.List1();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('List1', function() {
    it('should create an instance of List1', function() {
      // uncomment below and update the code to test List1
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be.a(OrdersApi.List1);
    });

    it('should have the property shippingEstimatedDate (base name: "ShippingEstimatedDate")', function() {
      // uncomment below and update the code to test the property shippingEstimatedDate
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property shippingEstimatedDateMax (base name: "ShippingEstimatedDateMax")', function() {
      // uncomment below and update the code to test the property shippingEstimatedDateMax
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property shippingEstimatedDateMin (base name: "ShippingEstimatedDateMin")', function() {
      // uncomment below and update the code to test the property shippingEstimatedDateMin
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property affiliateId (base name: "affiliateId")', function() {
      // uncomment below and update the code to test the property affiliateId
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property authorizedDate (base name: "authorizedDate")', function() {
      // uncomment below and update the code to test the property authorizedDate
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property callCenterOperatorName (base name: "callCenterOperatorName")', function() {
      // uncomment below and update the code to test the property callCenterOperatorName
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property clientName (base name: "clientName")', function() {
      // uncomment below and update the code to test the property clientName
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property creationDate (base name: "creationDate")', function() {
      // uncomment below and update the code to test the property creationDate
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "currencyCode")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property items (base name: "items")', function() {
      // uncomment below and update the code to test the property items
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property lastMessageUnread (base name: "lastMessageUnread")', function() {
      // uncomment below and update the code to test the property lastMessageUnread
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property listId (base name: "listId")', function() {
      // uncomment below and update the code to test the property listId
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property listType (base name: "listType")', function() {
      // uncomment below and update the code to test the property listType
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property marketPlaceOrderId (base name: "marketPlaceOrderId")', function() {
      // uncomment below and update the code to test the property marketPlaceOrderId
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property orderId (base name: "orderId")', function() {
      // uncomment below and update the code to test the property orderId
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property orderIsComplete (base name: "orderIsComplete")', function() {
      // uncomment below and update the code to test the property orderIsComplete
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property origin (base name: "origin")', function() {
      // uncomment below and update the code to test the property origin
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property paymentNames (base name: "paymentNames")', function() {
      // uncomment below and update the code to test the property paymentNames
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property salesChannel (base name: "salesChannel")', function() {
      // uncomment below and update the code to test the property salesChannel
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property sequence (base name: "sequence")', function() {
      // uncomment below and update the code to test the property sequence
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property statusDescription (base name: "statusDescription")', function() {
      // uncomment below and update the code to test the property statusDescription
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property totalItems (base name: "totalItems")', function() {
      // uncomment below and update the code to test the property totalItems
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property totalValue (base name: "totalValue")', function() {
      // uncomment below and update the code to test the property totalValue
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property workflowInErrorState (base name: "workflowInErrorState")', function() {
      // uncomment below and update the code to test the property workflowInErrorState
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

    it('should have the property workflowInRetry (base name: "workflowInRetry")', function() {
      // uncomment below and update the code to test the property workflowInRetry
      //var instance = new OrdersApi.List1();
      //expect(instance).to.be();
    });

  });

}));
