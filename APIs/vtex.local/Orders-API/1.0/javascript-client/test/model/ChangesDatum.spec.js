/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OrdersApi);
  }
}(this, function(expect, OrdersApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OrdersApi.ChangesDatum();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ChangesDatum', function() {
    it('should create an instance of ChangesDatum', function() {
      // uncomment below and update the code to test ChangesDatum
      //var instance = new OrdersApi.ChangesDatum();
      //expect(instance).to.be.a(OrdersApi.ChangesDatum);
    });

    it('should have the property discountValue (base name: "discountValue")', function() {
      // uncomment below and update the code to test the property discountValue
      //var instance = new OrdersApi.ChangesDatum();
      //expect(instance).to.be();
    });

    it('should have the property incrementValue (base name: "incrementValue")', function() {
      // uncomment below and update the code to test the property incrementValue
      //var instance = new OrdersApi.ChangesDatum();
      //expect(instance).to.be();
    });

    it('should have the property itemsAdded (base name: "itemsAdded")', function() {
      // uncomment below and update the code to test the property itemsAdded
      //var instance = new OrdersApi.ChangesDatum();
      //expect(instance).to.be();
    });

    it('should have the property itemsRemoved (base name: "itemsRemoved")', function() {
      // uncomment below and update the code to test the property itemsRemoved
      //var instance = new OrdersApi.ChangesDatum();
      //expect(instance).to.be();
    });

    it('should have the property reason (base name: "reason")', function() {
      // uncomment below and update the code to test the property reason
      //var instance = new OrdersApi.ChangesDatum();
      //expect(instance).to.be();
    });

    it('should have the property receipt (base name: "receipt")', function() {
      // uncomment below and update the code to test the property receipt
      //var instance = new OrdersApi.ChangesDatum();
      //expect(instance).to.be();
    });

  });

}));
