/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OrdersApi);
  }
}(this, function(expect, OrdersApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OrdersApi.Item();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Item', function() {
    it('should create an instance of Item', function() {
      // uncomment below and update the code to test Item
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be.a(OrdersApi.Item);
    });

    it('should have the property additionalInfo (base name: "additionalInfo")', function() {
      // uncomment below and update the code to test the property additionalInfo
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property assemblies (base name: "assemblies")', function() {
      // uncomment below and update the code to test the property assemblies
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property attachmentOfferings (base name: "attachmentOfferings")', function() {
      // uncomment below and update the code to test the property attachmentOfferings
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property attachments (base name: "attachments")', function() {
      // uncomment below and update the code to test the property attachments
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property bundleItems (base name: "bundleItems")', function() {
      // uncomment below and update the code to test the property bundleItems
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property callCenterOperator (base name: "callCenterOperator")', function() {
      // uncomment below and update the code to test the property callCenterOperator
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property commission (base name: "commission")', function() {
      // uncomment below and update the code to test the property commission
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property components (base name: "components")', function() {
      // uncomment below and update the code to test the property components
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property costPrice (base name: "costPrice")', function() {
      // uncomment below and update the code to test the property costPrice
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property detailUrl (base name: "detailUrl")', function() {
      // uncomment below and update the code to test the property detailUrl
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property ean (base name: "ean")', function() {
      // uncomment below and update the code to test the property ean
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property freightCommission (base name: "freightCommission")', function() {
      // uncomment below and update the code to test the property freightCommission
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property imageUrl (base name: "imageUrl")', function() {
      // uncomment below and update the code to test the property imageUrl
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property isGift (base name: "isGift")', function() {
      // uncomment below and update the code to test the property isGift
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property itemAttachment (base name: "itemAttachment")', function() {
      // uncomment below and update the code to test the property itemAttachment
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property listPrice (base name: "listPrice")', function() {
      // uncomment below and update the code to test the property listPrice
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property lockId (base name: "lockId")', function() {
      // uncomment below and update the code to test the property lockId
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property manualPrice (base name: "manualPrice")', function() {
      // uncomment below and update the code to test the property manualPrice
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property measurementUnit (base name: "measurementUnit")', function() {
      // uncomment below and update the code to test the property measurementUnit
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property offerings (base name: "offerings")', function() {
      // uncomment below and update the code to test the property offerings
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property params (base name: "params")', function() {
      // uncomment below and update the code to test the property params
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property parentAssemblyBinding (base name: "parentAssemblyBinding")', function() {
      // uncomment below and update the code to test the property parentAssemblyBinding
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property parentItemIndex (base name: "parentItemIndex")', function() {
      // uncomment below and update the code to test the property parentItemIndex
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property preSaleDate (base name: "preSaleDate")', function() {
      // uncomment below and update the code to test the property preSaleDate
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property priceDefinitions (base name: "priceDefinitions")', function() {
      // uncomment below and update the code to test the property priceDefinitions
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property priceTags (base name: "priceTags")', function() {
      // uncomment below and update the code to test the property priceTags
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property priceValidUntil (base name: "priceValidUntil")', function() {
      // uncomment below and update the code to test the property priceValidUntil
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property productId (base name: "productId")', function() {
      // uncomment below and update the code to test the property productId
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property refId (base name: "refId")', function() {
      // uncomment below and update the code to test the property refId
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property rewardValue (base name: "rewardValue")', function() {
      // uncomment below and update the code to test the property rewardValue
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property seller (base name: "seller")', function() {
      // uncomment below and update the code to test the property seller
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sellerSku (base name: "sellerSku")', function() {
      // uncomment below and update the code to test the property sellerSku
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property sellingPrice (base name: "sellingPrice")', function() {
      // uncomment below and update the code to test the property sellingPrice
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property serialNumbers (base name: "serialNumbers")', function() {
      // uncomment below and update the code to test the property serialNumbers
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property shippingPrice (base name: "shippingPrice")', function() {
      // uncomment below and update the code to test the property shippingPrice
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property tax (base name: "tax")', function() {
      // uncomment below and update the code to test the property tax
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property taxCode (base name: "taxCode")', function() {
      // uncomment below and update the code to test the property taxCode
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property uniqueId (base name: "uniqueId")', function() {
      // uncomment below and update the code to test the property uniqueId
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

    it('should have the property unitMultiplier (base name: "unitMultiplier")', function() {
      // uncomment below and update the code to test the property unitMultiplier
      //var instance = new OrdersApi.Item();
      //expect(instance).to.be();
    });

  });

}));
