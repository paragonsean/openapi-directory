/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OrdersApi);
  }
}(this, function(expect, OrdersApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OrdersApi.To();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('To', function() {
    it('should create an instance of To', function() {
      // uncomment below and update the code to test To
      //var instance = new OrdersApi.To();
      //expect(instance).to.be.a(OrdersApi.To);
    });

    it('should have the property aliasMaskType (base name: "aliasMaskType")', function() {
      // uncomment below and update the code to test the property aliasMaskType
      //var instance = new OrdersApi.To();
      //expect(instance).to.be();
    });

    it('should have the property conversationRelatedTo (base name: "conversationRelatedTo")', function() {
      // uncomment below and update the code to test the property conversationRelatedTo
      //var instance = new OrdersApi.To();
      //expect(instance).to.be();
    });

    it('should have the property conversationSubject (base name: "conversationSubject")', function() {
      // uncomment below and update the code to test the property conversationSubject
      //var instance = new OrdersApi.To();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new OrdersApi.To();
      //expect(instance).to.be();
    });

    it('should have the property emailAlias (base name: "emailAlias")', function() {
      // uncomment below and update the code to test the property emailAlias
      //var instance = new OrdersApi.To();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new OrdersApi.To();
      //expect(instance).to.be();
    });

    it('should have the property role (base name: "role")', function() {
      // uncomment below and update the code to test the property role
      //var instance = new OrdersApi.To();
      //expect(instance).to.be();
    });

  });

}));
