/**
 * Orders API
 *     >Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.    Receive, process, and manage every order in your store through our Order Management API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OrdersApi);
  }
}(this, function(expect, OrdersApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OrdersApi.GetOrder200ResponseItemsInnerAdditionalInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetOrder200ResponseItemsInnerAdditionalInfo', function() {
    it('should create an instance of GetOrder200ResponseItemsInnerAdditionalInfo', function() {
      // uncomment below and update the code to test GetOrder200ResponseItemsInnerAdditionalInfo
      //var instance = new OrdersApi.GetOrder200ResponseItemsInnerAdditionalInfo();
      //expect(instance).to.be.a(OrdersApi.GetOrder200ResponseItemsInnerAdditionalInfo);
    });

    it('should have the property brandId (base name: "brandId")', function() {
      // uncomment below and update the code to test the property brandId
      //var instance = new OrdersApi.GetOrder200ResponseItemsInnerAdditionalInfo();
      //expect(instance).to.be();
    });

    it('should have the property brandName (base name: "brandName")', function() {
      // uncomment below and update the code to test the property brandName
      //var instance = new OrdersApi.GetOrder200ResponseItemsInnerAdditionalInfo();
      //expect(instance).to.be();
    });

    it('should have the property dimension (base name: "dimension")', function() {
      // uncomment below and update the code to test the property dimension
      //var instance = new OrdersApi.GetOrder200ResponseItemsInnerAdditionalInfo();
      //expect(instance).to.be();
    });

    it('should have the property offeringInfo (base name: "offeringInfo")', function() {
      // uncomment below and update the code to test the property offeringInfo
      //var instance = new OrdersApi.GetOrder200ResponseItemsInnerAdditionalInfo();
      //expect(instance).to.be();
    });

    it('should have the property offeringType (base name: "offeringType")', function() {
      // uncomment below and update the code to test the property offeringType
      //var instance = new OrdersApi.GetOrder200ResponseItemsInnerAdditionalInfo();
      //expect(instance).to.be();
    });

    it('should have the property offeringTypeId (base name: "offeringTypeId")', function() {
      // uncomment below and update the code to test the property offeringTypeId
      //var instance = new OrdersApi.GetOrder200ResponseItemsInnerAdditionalInfo();
      //expect(instance).to.be();
    });

  });

}));
