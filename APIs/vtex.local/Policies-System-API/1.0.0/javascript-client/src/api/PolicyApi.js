/**
 * Policies System API
 *    This API will create promotion alarms when selling products with undesired prices and promotions. It will create conditions that will check if the prices and the promotions are correct. If not, the system will alarm the store with information about the product sold at unexpected prices.     ## Index     `GET` [Get Policy List](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies)   `POST` [Evaluate Policies](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/evaluate)   `GET` [Get Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies/-id-)   `POST` [Create Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/policies/-id-)   `PUT` [Update Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#put-/api/policy-engine/policies/-id-)   `DELETE` [Delete Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#delete-/api/policy-engine/policies/-id-)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EvaluatePolicyRequest from '../model/EvaluatePolicyRequest';
import PolicyActionGetResponse from '../model/PolicyActionGetResponse';
import PolicyGetResponse from '../model/PolicyGetResponse';
import PolicySaveRequest from '../model/PolicySaveRequest';

/**
* Policy service.
* @module api/PolicyApi
* @version 1.0.0
*/
export default class PolicyApi {

    /**
    * Constructs a new PolicyApi. 
    * @alias module:api/PolicyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiPolicyEnginePoliciesIdPut operation.
     * @callback module:api/PolicyApi~apiPolicyEnginePoliciesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PolicyGetResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Policy
     * Updates an existing policy at your account.
     * @param {String} contentType Describes the type of the content being sent
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} id Policy ID
     * @param {module:model/PolicySaveRequest} policySaveRequest 
     * @param {module:api/PolicyApi~apiPolicyEnginePoliciesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PolicyGetResponse>}
     */
    apiPolicyEnginePoliciesIdPut(contentType, accept, id, policySaveRequest, callback) {
      let postBody = policySaveRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling apiPolicyEnginePoliciesIdPut");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling apiPolicyEnginePoliciesIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPolicyEnginePoliciesIdPut");
      }
      // verify the required parameter 'policySaveRequest' is set
      if (policySaveRequest === undefined || policySaveRequest === null) {
        throw new Error("Missing the required parameter 'policySaveRequest' when calling apiPolicyEnginePoliciesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream'];
      let returnType = [PolicyGetResponse];
      return this.apiClient.callApi(
        '/api/policy-engine/policies/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyCreateOrUpdate operation.
     * @callback module:api/PolicyApi~policyCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PolicyGetResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Policy
     * Creates a new policy from scratch.
     * @param {String} contentType Describes the type of the content being sent
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} id Policy ID
     * @param {Object} opts Optional parameters
     * @param {module:model/PolicySaveRequest} [policySaveRequest] 
     * @param {module:api/PolicyApi~policyCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PolicyGetResponse>}
     */
    policyCreateOrUpdate(contentType, accept, id, opts, callback) {
      opts = opts || {};
      let postBody = opts['policySaveRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling policyCreateOrUpdate");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling policyCreateOrUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling policyCreateOrUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream'];
      let returnType = [PolicyGetResponse];
      return this.apiClient.callApi(
        '/api/policy-engine/policies/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyDelete operation.
     * @callback module:api/PolicyApi~policyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Policy by ID
     * Deletes a specific policy of the account by its ID.
     * @param {String} contentType Describes the type of the content being sent
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} id Policy ID
     * @param {module:api/PolicyApi~policyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    policyDelete(contentType, accept, id, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling policyDelete");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling policyDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling policyDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/policy-engine/policies/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyEvaluate operation.
     * @callback module:api/PolicyApi~policyEvaluateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PolicyActionGetResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Evaluate Policies
     * This endpoint consults all policies and checks the ones that satisfy the request bodyâ€™s conditions.
     * @param {String} contentType Describes the type of the content being sent
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {module:model/EvaluatePolicyRequest} evaluatePolicyRequest 
     * @param {module:api/PolicyApi~policyEvaluateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PolicyActionGetResponse>}
     */
    policyEvaluate(contentType, accept, evaluatePolicyRequest, callback) {
      let postBody = evaluatePolicyRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling policyEvaluate");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling policyEvaluate");
      }
      // verify the required parameter 'evaluatePolicyRequest' is set
      if (evaluatePolicyRequest === undefined || evaluatePolicyRequest === null) {
        throw new Error("Missing the required parameter 'evaluatePolicyRequest' when calling policyEvaluate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [PolicyActionGetResponse];
      return this.apiClient.callApi(
        '/api/policy-engine/evaluate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyGet operation.
     * @callback module:api/PolicyApi~policyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PolicyGetResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Policy by ID
     * Retrieves general information of a policy by its ID.
     * @param {String} contentType Describes the type of the content being sent
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {String} id Policy ID
     * @param {module:api/PolicyApi~policyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PolicyGetResponse>}
     */
    policyGet(contentType, accept, id, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling policyGet");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling policyGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling policyGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PolicyGetResponse];
      return this.apiClient.callApi(
        '/api/policy-engine/policies/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyList operation.
     * @callback module:api/PolicyApi~policyListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PolicyGetResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Policy List
     * Retrieves a list of all policies in the account and general information of each policy.
     * @param {String} contentType Describes the type of the content being sent
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand 
     * @param {module:api/PolicyApi~policyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PolicyGetResponse>}
     */
    policyList(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling policyList");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling policyList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PolicyGetResponse];
      return this.apiClient.callApi(
        '/api/policy-engine/policies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
