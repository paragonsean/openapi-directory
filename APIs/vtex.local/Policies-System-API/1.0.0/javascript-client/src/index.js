/**
 * Policies System API
 *    This API will create promotion alarms when selling products with undesired prices and promotions. It will create conditions that will check if the prices and the promotions are correct. If not, the system will alarm the store with information about the product sold at unexpected prices.     ## Index     `GET` [Get Policy List](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies)   `POST` [Evaluate Policies](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/evaluate)   `GET` [Get Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies/-id-)   `POST` [Create Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/policies/-id-)   `PUT` [Update Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#put-/api/policy-engine/policies/-id-)   `DELETE` [Delete Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#delete-/api/policy-engine/policies/-id-)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Account from './model/Account';
import AccountType from './model/AccountType';
import Condition from './model/Condition';
import ConditionConditionsInner from './model/ConditionConditionsInner';
import EvaluatePolicyRequest from './model/EvaluatePolicyRequest';
import PolicyActionGetResponse from './model/PolicyActionGetResponse';
import PolicyGetResponse from './model/PolicyGetResponse';
import PolicySaveRequest from './model/PolicySaveRequest';
import StatementGetResponse from './model/StatementGetResponse';
import PolicyApi from './api/PolicyApi';


/**
*    This API will create promotion alarms when selling products with undesired prices and promotions. It will create conditions that will check if the prices and the promotions are correct. If not, the system will alarm the store with information about the product sold at unexpected prices.     ## Index     &#x60;GET&#x60; [Get Policy List](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies)   &#x60;POST&#x60; [Evaluate Policies](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/evaluate)   &#x60;GET&#x60; [Get Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies/-id-)   &#x60;POST&#x60; [Create Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/policies/-id-)   &#x60;PUT&#x60; [Update Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#put-/api/policy-engine/policies/-id-)   &#x60;DELETE&#x60; [Delete Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#delete-/api/policy-engine/policies/-id-).<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var PoliciesSystemApi = require('index'); // See note below*.
* var xxxSvc = new PoliciesSystemApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new PoliciesSystemApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new PoliciesSystemApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new PoliciesSystemApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Account model constructor.
     * @property {module:model/Account}
     */
    Account,

    /**
     * The AccountType model constructor.
     * @property {module:model/AccountType}
     */
    AccountType,

    /**
     * The Condition model constructor.
     * @property {module:model/Condition}
     */
    Condition,

    /**
     * The ConditionConditionsInner model constructor.
     * @property {module:model/ConditionConditionsInner}
     */
    ConditionConditionsInner,

    /**
     * The EvaluatePolicyRequest model constructor.
     * @property {module:model/EvaluatePolicyRequest}
     */
    EvaluatePolicyRequest,

    /**
     * The PolicyActionGetResponse model constructor.
     * @property {module:model/PolicyActionGetResponse}
     */
    PolicyActionGetResponse,

    /**
     * The PolicyGetResponse model constructor.
     * @property {module:model/PolicyGetResponse}
     */
    PolicyGetResponse,

    /**
     * The PolicySaveRequest model constructor.
     * @property {module:model/PolicySaveRequest}
     */
    PolicySaveRequest,

    /**
     * The StatementGetResponse model constructor.
     * @property {module:model/StatementGetResponse}
     */
    StatementGetResponse,

    /**
    * The PolicyApi service constructor.
    * @property {module:api/PolicyApi}
    */
    PolicyApi
};
