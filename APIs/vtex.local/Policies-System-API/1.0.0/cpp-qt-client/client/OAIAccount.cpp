/**
 * Policies System API
 *    This API will create promotion alarms when selling products with undesired prices and promotions. It will create conditions that will check if the prices and the promotions are correct. If not, the system will alarm the store with information about the product sold at unexpected prices.     ## Index     `GET` [Get Policy List](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies)   `POST` [Evaluate Policies](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/evaluate)   `GET` [Get Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies/-id-)   `POST` [Create Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/policies/-id-)   `PUT` [Update Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#put-/api/policy-engine/policies/-id-)   `DELETE` [Delete Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#delete-/api/policy-engine/policies/-id-)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_operating_isSet = false;
    m_is_operating_isValid = false;

    m_main_account_name_isSet = false;
    m_main_account_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operation_date_isSet = false;
    m_operation_date_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_operating_isValid = ::OpenAPI::fromJsonValue(m_is_operating, json[QString("isOperating")]);
    m_is_operating_isSet = !json[QString("isOperating")].isNull() && m_is_operating_isValid;

    m_main_account_name_isValid = ::OpenAPI::fromJsonValue(m_main_account_name, json[QString("mainAccountName")]);
    m_main_account_name_isSet = !json[QString("mainAccountName")].isNull() && m_main_account_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operation_date_isValid = ::OpenAPI::fromJsonValue(m_operation_date, json[QString("operationDate")]);
    m_operation_date_isSet = !json[QString("operationDate")].isNull() && m_operation_date_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_type.isSet()) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_operating_isSet) {
        obj.insert(QString("isOperating"), ::OpenAPI::toJsonValue(m_is_operating));
    }
    if (m_main_account_name_isSet) {
        obj.insert(QString("mainAccountName"), ::OpenAPI::toJsonValue(m_main_account_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operation_date_isSet) {
        obj.insert(QString("operationDate"), ::OpenAPI::toJsonValue(m_operation_date));
    }
    return obj;
}

OAIAccountType OAIAccount::getAccountType() const {
    return m_account_type;
}
void OAIAccount::setAccountType(const OAIAccountType &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIAccount::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIAccount::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString OAIAccount::getId() const {
    return m_id;
}
void OAIAccount::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccount::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAccount::isIsActive() const {
    return m_is_active;
}
void OAIAccount::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIAccount::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIAccount::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIAccount::isIsOperating() const {
    return m_is_operating;
}
void OAIAccount::setIsOperating(const bool &is_operating) {
    m_is_operating = is_operating;
    m_is_operating_isSet = true;
}

bool OAIAccount::is_is_operating_Set() const{
    return m_is_operating_isSet;
}

bool OAIAccount::is_is_operating_Valid() const{
    return m_is_operating_isValid;
}

QString OAIAccount::getMainAccountName() const {
    return m_main_account_name;
}
void OAIAccount::setMainAccountName(const QString &main_account_name) {
    m_main_account_name = main_account_name;
    m_main_account_name_isSet = true;
}

bool OAIAccount::is_main_account_name_Set() const{
    return m_main_account_name_isSet;
}

bool OAIAccount::is_main_account_name_Valid() const{
    return m_main_account_name_isValid;
}

QString OAIAccount::getName() const {
    return m_name;
}
void OAIAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccount::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIAccount::getOperationDate() const {
    return m_operation_date;
}
void OAIAccount::setOperationDate(const QDateTime &operation_date) {
    m_operation_date = operation_date;
    m_operation_date_isSet = true;
}

bool OAIAccount::is_operation_date_Set() const{
    return m_operation_date_isSet;
}

bool OAIAccount::is_operation_date_Valid() const{
    return m_operation_date_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_operating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
