/**
 * Policies System API
 *    This API will create promotion alarms when selling products with undesired prices and promotions. It will create conditions that will check if the prices and the promotions are correct. If not, the system will alarm the store with information about the product sold at unexpected prices.     ## Index     `GET` [Get Policy List](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies)   `POST` [Evaluate Policies](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/evaluate)   `GET` [Get Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies/-id-)   `POST` [Create Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/policies/-id-)   `PUT` [Update Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#put-/api/policy-engine/policies/-id-)   `DELETE` [Delete Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#delete-/api/policy-engine/policies/-id-)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicySaveRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicySaveRequest::OAIPolicySaveRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicySaveRequest::OAIPolicySaveRequest() {
    this->initializeModel();
}

OAIPolicySaveRequest::~OAIPolicySaveRequest() {}

void OAIPolicySaveRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_statements_isSet = false;
    m_statements_isValid = false;
}

void OAIPolicySaveRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicySaveRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_statements_isValid = ::OpenAPI::fromJsonValue(m_statements, json[QString("statements")]);
    m_statements_isSet = !json[QString("statements")].isNull() && m_statements_isValid;
}

QString OAIPolicySaveRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicySaveRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_statements.size() > 0) {
        obj.insert(QString("statements"), ::OpenAPI::toJsonValue(m_statements));
    }
    return obj;
}

QString OAIPolicySaveRequest::getDescription() const {
    return m_description;
}
void OAIPolicySaveRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPolicySaveRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPolicySaveRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPolicySaveRequest::getName() const {
    return m_name;
}
void OAIPolicySaveRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPolicySaveRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPolicySaveRequest::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIStatementGetResponse> OAIPolicySaveRequest::getStatements() const {
    return m_statements;
}
void OAIPolicySaveRequest::setStatements(const QList<OAIStatementGetResponse> &statements) {
    m_statements = statements;
    m_statements_isSet = true;
}

bool OAIPolicySaveRequest::is_statements_Set() const{
    return m_statements_isSet;
}

bool OAIPolicySaveRequest::is_statements_Valid() const{
    return m_statements_isValid;
}

bool OAIPolicySaveRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statements.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicySaveRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_name_isValid && m_statements_isValid && true;
}

} // namespace OpenAPI
