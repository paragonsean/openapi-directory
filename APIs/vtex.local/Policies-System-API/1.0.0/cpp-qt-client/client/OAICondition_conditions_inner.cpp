/**
 * Policies System API
 *    This API will create promotion alarms when selling products with undesired prices and promotions. It will create conditions that will check if the prices and the promotions are correct. If not, the system will alarm the store with information about the product sold at unexpected prices.     ## Index     `GET` [Get Policy List](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies)   `POST` [Evaluate Policies](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/evaluate)   `GET` [Get Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies/-id-)   `POST` [Create Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/policies/-id-)   `PUT` [Update Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#put-/api/policy-engine/policies/-id-)   `DELETE` [Delete Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#delete-/api/policy-engine/policies/-id-)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICondition_conditions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICondition_conditions_inner::OAICondition_conditions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICondition_conditions_inner::OAICondition_conditions_inner() {
    this->initializeModel();
}

OAICondition_conditions_inner::~OAICondition_conditions_inner() {}

void OAICondition_conditions_inner::initializeModel() {

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAICondition_conditions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICondition_conditions_inner::fromJsonObject(QJsonObject json) {

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAICondition_conditions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICondition_conditions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList<QString> OAICondition_conditions_inner::getConditions() const {
    return m_conditions;
}
void OAICondition_conditions_inner::setConditions(const QList<QString> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAICondition_conditions_inner::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAICondition_conditions_inner::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAICondition_conditions_inner::getKey() const {
    return m_key;
}
void OAICondition_conditions_inner::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICondition_conditions_inner::is_key_Set() const{
    return m_key_isSet;
}

bool OAICondition_conditions_inner::is_key_Valid() const{
    return m_key_isValid;
}

QString OAICondition_conditions_inner::getOperation() const {
    return m_operation;
}
void OAICondition_conditions_inner::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAICondition_conditions_inner::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAICondition_conditions_inner::is_operation_Valid() const{
    return m_operation_isValid;
}

QList<QString> OAICondition_conditions_inner::getValues() const {
    return m_values;
}
void OAICondition_conditions_inner::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAICondition_conditions_inner::is_values_Set() const{
    return m_values_isSet;
}

bool OAICondition_conditions_inner::is_values_Valid() const{
    return m_values_isValid;
}

bool OAICondition_conditions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICondition_conditions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
