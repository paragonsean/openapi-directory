/**
 * Policies System API
 *    This API will create promotion alarms when selling products with undesired prices and promotions. It will create conditions that will check if the prices and the promotions are correct. If not, the system will alarm the store with information about the product sold at unexpected prices.     ## Index     `GET` [Get Policy List](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies)   `POST` [Evaluate Policies](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/evaluate)   `GET` [Get Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies/-id-)   `POST` [Create Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/policies/-id-)   `PUT` [Update Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#put-/api/policy-engine/policies/-id-)   `DELETE` [Delete Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#delete-/api/policy-engine/policies/-id-)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPolicyApi_H
#define OAI_OAIPolicyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEvaluatePolicyRequest.h"
#include "OAIPolicyActionGetResponse.h"
#include "OAIPolicyGetResponse.h"
#include "OAIPolicySaveRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPolicyApi : public QObject {
    Q_OBJECT

public:
    OAIPolicyApi(const int timeOut = 0);
    ~OAIPolicyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_policy_save_request OAIPolicySaveRequest [required]
    */
    virtual void apiPolicyEnginePoliciesIdPut(const QString &content_type, const QString &accept, const QString &id, const OAIPolicySaveRequest &oai_policy_save_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_policy_save_request OAIPolicySaveRequest [optional]
    */
    virtual void policyCreateOrUpdate(const QString &content_type, const QString &accept, const QString &id, const ::OpenAPI::OptionalParam<OAIPolicySaveRequest> &oai_policy_save_request = ::OpenAPI::OptionalParam<OAIPolicySaveRequest>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  id QString [required]
    */
    virtual void policyDelete(const QString &content_type, const QString &accept, const QString &id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_evaluate_policy_request OAIEvaluatePolicyRequest [required]
    */
    virtual void policyEvaluate(const QString &content_type, const QString &accept, const OAIEvaluatePolicyRequest &oai_evaluate_policy_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  id QString [required]
    */
    virtual void policyGet(const QString &content_type, const QString &accept, const QString &id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void policyList(const QString &content_type, const QString &accept);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiPolicyEnginePoliciesIdPutCallback(OAIHttpRequestWorker *worker);
    void policyCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void policyDeleteCallback(OAIHttpRequestWorker *worker);
    void policyEvaluateCallback(OAIHttpRequestWorker *worker);
    void policyGetCallback(OAIHttpRequestWorker *worker);
    void policyListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiPolicyEnginePoliciesIdPutSignal(QList<OAIPolicyGetResponse> summary);
    void policyCreateOrUpdateSignal(QList<OAIPolicyGetResponse> summary);
    void policyDeleteSignal();
    void policyEvaluateSignal(QList<OAIPolicyActionGetResponse> summary);
    void policyGetSignal(QList<OAIPolicyGetResponse> summary);
    void policyListSignal(QList<OAIPolicyGetResponse> summary);


    void apiPolicyEnginePoliciesIdPutSignalFull(OAIHttpRequestWorker *worker, QList<OAIPolicyGetResponse> summary);
    void policyCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, QList<OAIPolicyGetResponse> summary);
    void policyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void policyEvaluateSignalFull(OAIHttpRequestWorker *worker, QList<OAIPolicyActionGetResponse> summary);
    void policyGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIPolicyGetResponse> summary);
    void policyListSignalFull(OAIHttpRequestWorker *worker, QList<OAIPolicyGetResponse> summary);

    Q_DECL_DEPRECATED_X("Use apiPolicyEnginePoliciesIdPutSignalError() instead")
    void apiPolicyEnginePoliciesIdPutSignalE(QList<OAIPolicyGetResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPolicyEnginePoliciesIdPutSignalError(QList<OAIPolicyGetResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyCreateOrUpdateSignalError() instead")
    void policyCreateOrUpdateSignalE(QList<OAIPolicyGetResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyCreateOrUpdateSignalError(QList<OAIPolicyGetResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyDeleteSignalError() instead")
    void policyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void policyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyEvaluateSignalError() instead")
    void policyEvaluateSignalE(QList<OAIPolicyActionGetResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyEvaluateSignalError(QList<OAIPolicyActionGetResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyGetSignalError() instead")
    void policyGetSignalE(QList<OAIPolicyGetResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyGetSignalError(QList<OAIPolicyGetResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyListSignalError() instead")
    void policyListSignalE(QList<OAIPolicyGetResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyListSignalError(QList<OAIPolicyGetResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiPolicyEnginePoliciesIdPutSignalErrorFull() instead")
    void apiPolicyEnginePoliciesIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiPolicyEnginePoliciesIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyCreateOrUpdateSignalErrorFull() instead")
    void policyCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyDeleteSignalErrorFull() instead")
    void policyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyEvaluateSignalErrorFull() instead")
    void policyEvaluateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyEvaluateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyGetSignalErrorFull() instead")
    void policyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyListSignalErrorFull() instead")
    void policyListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
