/**
 * Policies System API
 *    This API will create promotion alarms when selling products with undesired prices and promotions. It will create conditions that will check if the prices and the promotions are correct. If not, the system will alarm the store with information about the product sold at unexpected prices.     ## Index     `GET` [Get Policy List](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies)   `POST` [Evaluate Policies](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/evaluate)   `GET` [Get Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies/-id-)   `POST` [Create Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/policies/-id-)   `PUT` [Update Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#put-/api/policy-engine/policies/-id-)   `DELETE` [Delete Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#delete-/api/policy-engine/policies/-id-)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccount.h
 *
 * 
 */

#ifndef OAIAccount_H
#define OAIAccount_H

#include <QJsonObject>

#include "OAIAccountType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAccount : public OAIObject {
public:
    OAIAccount();
    OAIAccount(QString json);
    ~OAIAccount() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAccountType getAccountType() const;
    void setAccountType(const OAIAccountType &account_type);
    bool is_account_type_Set() const;
    bool is_account_type_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsActive() const;
    void setIsActive(const bool &is_active);
    bool is_is_active_Set() const;
    bool is_is_active_Valid() const;

    bool isIsOperating() const;
    void setIsOperating(const bool &is_operating);
    bool is_is_operating_Set() const;
    bool is_is_operating_Valid() const;

    QString getMainAccountName() const;
    void setMainAccountName(const QString &main_account_name);
    bool is_main_account_name_Set() const;
    bool is_main_account_name_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QDateTime getOperationDate() const;
    void setOperationDate(const QDateTime &operation_date);
    bool is_operation_date_Set() const;
    bool is_operation_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAccountType m_account_type;
    bool m_account_type_isSet;
    bool m_account_type_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_active;
    bool m_is_active_isSet;
    bool m_is_active_isValid;

    bool m_is_operating;
    bool m_is_operating_isSet;
    bool m_is_operating_isValid;

    QString m_main_account_name;
    bool m_main_account_name_isSet;
    bool m_main_account_name_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QDateTime m_operation_date;
    bool m_operation_date_isSet;
    bool m_operation_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccount)

#endif // OAIAccount_H
