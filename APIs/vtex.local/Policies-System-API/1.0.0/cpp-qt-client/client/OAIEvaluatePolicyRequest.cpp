/**
 * Policies System API
 *    This API will create promotion alarms when selling products with undesired prices and promotions. It will create conditions that will check if the prices and the promotions are correct. If not, the system will alarm the store with information about the product sold at unexpected prices.     ## Index     `GET` [Get Policy List](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies)   `POST` [Evaluate Policies](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/evaluate)   `GET` [Get Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies/-id-)   `POST` [Create Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/policies/-id-)   `PUT` [Update Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#put-/api/policy-engine/policies/-id-)   `DELETE` [Delete Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#delete-/api/policy-engine/policies/-id-)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluatePolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluatePolicyRequest::OAIEvaluatePolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluatePolicyRequest::OAIEvaluatePolicyRequest() {
    this->initializeModel();
}

OAIEvaluatePolicyRequest::~OAIEvaluatePolicyRequest() {}

void OAIEvaluatePolicyRequest::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAIEvaluatePolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluatePolicyRequest::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;
}

QString OAIEvaluatePolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluatePolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_context.size() > 0) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIEvaluatePolicyRequest::getContext() const {
    return m_context;
}
void OAIEvaluatePolicyRequest::setContext(const QMap<QString, QJsonValue> &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIEvaluatePolicyRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAIEvaluatePolicyRequest::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIEvaluatePolicyRequest::getResource() const {
    return m_resource;
}
void OAIEvaluatePolicyRequest::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIEvaluatePolicyRequest::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIEvaluatePolicyRequest::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAIEvaluatePolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluatePolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_context_isValid && m_resource_isValid && true;
}

} // namespace OpenAPI
