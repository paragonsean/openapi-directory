/**
 * Policies System API
 *    This API will create promotion alarms when selling products with undesired prices and promotions. It will create conditions that will check if the prices and the promotions are correct. If not, the system will alarm the store with information about the product sold at unexpected prices.     ## Index     `GET` [Get Policy List](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies)   `POST` [Evaluate Policies](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/evaluate)   `GET` [Get Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies/-id-)   `POST` [Create Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/policies/-id-)   `PUT` [Update Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#put-/api/policy-engine/policies/-id-)   `DELETE` [Delete Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#delete-/api/policy-engine/policies/-id-)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatementGetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatementGetResponse::OAIStatementGetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatementGetResponse::OAIStatementGetResponse() {
    this->initializeModel();
}

OAIStatementGetResponse::~OAIStatementGetResponse() {}

void OAIStatementGetResponse::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_effect_isSet = false;
    m_effect_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAIStatementGetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatementGetResponse::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_effect_isValid = ::OpenAPI::fromJsonValue(m_effect, json[QString("effect")]);
    m_effect_isSet = !json[QString("effect")].isNull() && m_effect_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;
}

QString OAIStatementGetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatementGetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_effect_isSet) {
        obj.insert(QString("effect"), ::OpenAPI::toJsonValue(m_effect));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

QList<QJsonValue> OAIStatementGetResponse::getActions() const {
    return m_actions;
}
void OAIStatementGetResponse::setActions(const QList<QJsonValue> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIStatementGetResponse::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIStatementGetResponse::is_actions_Valid() const{
    return m_actions_isValid;
}

OAICondition OAIStatementGetResponse::getCondition() const {
    return m_condition;
}
void OAIStatementGetResponse::setCondition(const OAICondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIStatementGetResponse::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIStatementGetResponse::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIStatementGetResponse::getEffect() const {
    return m_effect;
}
void OAIStatementGetResponse::setEffect(const QString &effect) {
    m_effect = effect;
    m_effect_isSet = true;
}

bool OAIStatementGetResponse::is_effect_Set() const{
    return m_effect_isSet;
}

bool OAIStatementGetResponse::is_effect_Valid() const{
    return m_effect_isValid;
}

QString OAIStatementGetResponse::getOperation() const {
    return m_operation;
}
void OAIStatementGetResponse::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIStatementGetResponse::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIStatementGetResponse::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAIStatementGetResponse::getResource() const {
    return m_resource;
}
void OAIStatementGetResponse::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIStatementGetResponse::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIStatementGetResponse::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAIStatementGetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatementGetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_effect_isValid && true;
}

} // namespace OpenAPI
