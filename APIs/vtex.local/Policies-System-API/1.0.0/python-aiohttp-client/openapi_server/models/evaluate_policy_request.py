# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EvaluatePolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: Dict[str, object]=None, resource: str='vrn:vtex.promotions-alert:aws-us-east-1:kamila:master:/_v/promotions_alert'):
        """EvaluatePolicyRequest - a model defined in OpenAPI

        :param context: The context of this EvaluatePolicyRequest.
        :param resource: The resource of this EvaluatePolicyRequest.
        """
        self.openapi_types = {
            'context': Dict[str, object],
            'resource': str
        }

        self.attribute_map = {
            'context': 'context',
            'resource': 'resource'
        }

        self._context = context
        self._resource = resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluatePolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluatePolicyRequest of this EvaluatePolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this EvaluatePolicyRequest.

        Conditions that the Policy needs to satisfy

        :return: The context of this EvaluatePolicyRequest.
        :rtype: Dict[str, object]
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this EvaluatePolicyRequest.

        Conditions that the Policy needs to satisfy

        :param context: The context of this EvaluatePolicyRequest.
        :type context: Dict[str, object]
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")

        self._context = context

    @property
    def resource(self):
        """Gets the resource of this EvaluatePolicyRequest.

        Scope on which this policy must be evaluated

        :return: The resource of this EvaluatePolicyRequest.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this EvaluatePolicyRequest.

        Scope on which this policy must be evaluated

        :param resource: The resource of this EvaluatePolicyRequest.
        :type resource: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")

        self._resource = resource
