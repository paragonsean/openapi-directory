# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.statement_get_response import StatementGetResponse
from openapi_server import util


class PolicySaveRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, statements: List[StatementGetResponse]=None):
        """PolicySaveRequest - a model defined in OpenAPI

        :param description: The description of this PolicySaveRequest.
        :param name: The name of this PolicySaveRequest.
        :param statements: The statements of this PolicySaveRequest.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'statements': List[StatementGetResponse]
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'statements': 'statements'
        }

        self._description = description
        self._name = name
        self._statements = statements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicySaveRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicySaveRequest of this PolicySaveRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PolicySaveRequest.

        Policy description. This description is only for internal use of identification

        :return: The description of this PolicySaveRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PolicySaveRequest.

        Policy description. This description is only for internal use of identification

        :param description: The description of this PolicySaveRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this PolicySaveRequest.

        Policy Name

        :return: The name of this PolicySaveRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicySaveRequest.

        Policy Name

        :param name: The name of this PolicySaveRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def statements(self):
        """Gets the statements of this PolicySaveRequest.

        Requirements to the Policy be applied

        :return: The statements of this PolicySaveRequest.
        :rtype: List[StatementGetResponse]
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this PolicySaveRequest.

        Requirements to the Policy be applied

        :param statements: The statements of this PolicySaveRequest.
        :type statements: List[StatementGetResponse]
        """
        if statements is None:
            raise ValueError("Invalid value for `statements`, must not be `None`")

        self._statements = statements
