# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.condition import Condition
from openapi_server import util


class StatementGetResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[object]=None, condition: Condition=None, effect: str='Allow', operation: str=None, resource: str=None):
        """StatementGetResponse - a model defined in OpenAPI

        :param actions: The actions of this StatementGetResponse.
        :param condition: The condition of this StatementGetResponse.
        :param effect: The effect of this StatementGetResponse.
        :param operation: The operation of this StatementGetResponse.
        :param resource: The resource of this StatementGetResponse.
        """
        self.openapi_types = {
            'actions': List[object],
            'condition': Condition,
            'effect': str,
            'operation': str,
            'resource': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'condition': 'condition',
            'effect': 'effect',
            'operation': 'operation',
            'resource': 'resource'
        }

        self._actions = actions
        self._condition = condition
        self._effect = effect
        self._operation = operation
        self._resource = resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatementGetResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatementGetResponse of this StatementGetResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this StatementGetResponse.

        Actions that the Policy will execute

        :return: The actions of this StatementGetResponse.
        :rtype: List[object]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this StatementGetResponse.

        Actions that the Policy will execute

        :param actions: The actions of this StatementGetResponse.
        :type actions: List[object]
        """

        self._actions = actions

    @property
    def condition(self):
        """Gets the condition of this StatementGetResponse.


        :return: The condition of this StatementGetResponse.
        :rtype: Condition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this StatementGetResponse.


        :param condition: The condition of this StatementGetResponse.
        :type condition: Condition
        """

        self._condition = condition

    @property
    def effect(self):
        """Gets the effect of this StatementGetResponse.

        This field is not functional at the moment. To create a correct request, fill the field with `Allow`

        :return: The effect of this StatementGetResponse.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this StatementGetResponse.

        This field is not functional at the moment. To create a correct request, fill the field with `Allow`

        :param effect: The effect of this StatementGetResponse.
        :type effect: str
        """
        if effect is None:
            raise ValueError("Invalid value for `effect`, must not be `None`")

        self._effect = effect

    @property
    def operation(self):
        """Gets the operation of this StatementGetResponse.

        This operation will determine if all the conditions need to be valid or at least one of them, if the conditions array is not empty.  The possible values to these fields are `None`, `stringEquals`, `stringEqualsIgnoreCase`, `numericEquals`, `numericLessThan`, `numericLessThanEquals`,   `numericGreaterThan`, `numericGreaterThanEquals`, `bool`, `not`, `or`, `and`, `dateTimeUtcGreaterThan`, `dateTimeUtcLessThan`, and `between`

        :return: The operation of this StatementGetResponse.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this StatementGetResponse.

        This operation will determine if all the conditions need to be valid or at least one of them, if the conditions array is not empty.  The possible values to these fields are `None`, `stringEquals`, `stringEqualsIgnoreCase`, `numericEquals`, `numericLessThan`, `numericLessThanEquals`,   `numericGreaterThan`, `numericGreaterThanEquals`, `bool`, `not`, `or`, `and`, `dateTimeUtcGreaterThan`, `dateTimeUtcLessThan`, and `between`

        :param operation: The operation of this StatementGetResponse.
        :type operation: str
        """

        self._operation = operation

    @property
    def resource(self):
        """Gets the resource of this StatementGetResponse.

        Scope on which this policy must be evaluated

        :return: The resource of this StatementGetResponse.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this StatementGetResponse.

        Scope on which this policy must be evaluated

        :param resource: The resource of this StatementGetResponse.
        :type resource: str
        """

        self._resource = resource
