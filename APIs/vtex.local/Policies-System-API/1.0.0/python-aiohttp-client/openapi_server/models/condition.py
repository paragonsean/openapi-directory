# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.condition_conditions_inner import ConditionConditionsInner
from openapi_server import util


class Condition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditions: List[ConditionConditionsInner]=None):
        """Condition - a model defined in OpenAPI

        :param conditions: The conditions of this Condition.
        """
        self.openapi_types = {
            'conditions': List[ConditionConditionsInner]
        }

        self.attribute_map = {
            'conditions': 'conditions'
        }

        self._conditions = conditions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Condition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The condition of this Condition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditions(self):
        """Gets the conditions of this Condition.

        List of conditions that will activate the policy

        :return: The conditions of this Condition.
        :rtype: List[ConditionConditionsInner]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this Condition.

        List of conditions that will activate the policy

        :param conditions: The conditions of this Condition.
        :type conditions: List[ConditionConditionsInner]
        """

        self._conditions = conditions
