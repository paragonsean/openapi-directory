# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConditionConditionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditions: List[str]=None, key: str=None, operation: str=None, values: List[str]=None):
        """ConditionConditionsInner - a model defined in OpenAPI

        :param conditions: The conditions of this ConditionConditionsInner.
        :param key: The key of this ConditionConditionsInner.
        :param operation: The operation of this ConditionConditionsInner.
        :param values: The values of this ConditionConditionsInner.
        """
        self.openapi_types = {
            'conditions': List[str],
            'key': str,
            'operation': str,
            'values': List[str]
        }

        self.attribute_map = {
            'conditions': 'conditions',
            'key': 'key',
            'operation': 'operation',
            'values': 'values'
        }

        self._conditions = conditions
        self._key = key
        self._operation = operation
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConditionConditionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The condition_conditions_inner of this ConditionConditionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditions(self):
        """Gets the conditions of this ConditionConditionsInner.

        These are the conditions the actions can have. The possible values are `[]`, `stringEquals`, and `numericGreaterThan`

        :return: The conditions of this ConditionConditionsInner.
        :rtype: List[str]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ConditionConditionsInner.

        These are the conditions the actions can have. The possible values are `[]`, `stringEquals`, and `numericGreaterThan`

        :param conditions: The conditions of this ConditionConditionsInner.
        :type conditions: List[str]
        """

        self._conditions = conditions

    @property
    def key(self):
        """Gets the key of this ConditionConditionsInner.

        The element that will define what the policy will influence. This field has the possible values `skuId`, `brandId`, `discountPercentage`

        :return: The key of this ConditionConditionsInner.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ConditionConditionsInner.

        The element that will define what the policy will influence. This field has the possible values `skuId`, `brandId`, `discountPercentage`

        :param key: The key of this ConditionConditionsInner.
        :type key: str
        """

        self._key = key

    @property
    def operation(self):
        """Gets the operation of this ConditionConditionsInner.

        The action of the condition. This operation possible values are `None`, `stringEquals`, `stringEqualsIgnoreCase`, `numericEquals`, `numericLessThan`, `numericLessThanEquals`,   `numericGreaterThan`, `numericGreaterThanEquals`, `bool`, `not`, `or`, `and`, `dateTimeUtcGreaterThan`, `dateTimeUtcLessThan`, and `between`

        :return: The operation of this ConditionConditionsInner.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ConditionConditionsInner.

        The action of the condition. This operation possible values are `None`, `stringEquals`, `stringEqualsIgnoreCase`, `numericEquals`, `numericLessThan`, `numericLessThanEquals`,   `numericGreaterThan`, `numericGreaterThanEquals`, `bool`, `not`, `or`, `and`, `dateTimeUtcGreaterThan`, `dateTimeUtcLessThan`, and `between`

        :param operation: The operation of this ConditionConditionsInner.
        :type operation: str
        """

        self._operation = operation

    @property
    def values(self):
        """Gets the values of this ConditionConditionsInner.

        Value of the key

        :return: The values of this ConditionConditionsInner.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ConditionConditionsInner.

        Value of the key

        :param values: The values of this ConditionConditionsInner.
        :type values: List[str]
        """

        self._values = values
