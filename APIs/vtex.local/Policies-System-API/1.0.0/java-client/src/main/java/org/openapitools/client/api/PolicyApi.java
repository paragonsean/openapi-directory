/*
 * Policies System API
 *    This API will create promotion alarms when selling products with undesired prices and promotions. It will create conditions that will check if the prices and the promotions are correct. If not, the system will alarm the store with information about the product sold at unexpected prices.     ## Index     `GET` [Get Policy List](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies)   `POST` [Evaluate Policies](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/evaluate)   `GET` [Get Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies/-id-)   `POST` [Create Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/policies/-id-)   `PUT` [Update Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#put-/api/policy-engine/policies/-id-)   `DELETE` [Delete Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#delete-/api/policy-engine/policies/-id-)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EvaluatePolicyRequest;
import org.openapitools.client.model.PolicyActionGetResponse;
import org.openapitools.client.model.PolicyGetResponse;
import org.openapitools.client.model.PolicySaveRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PolicyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PolicyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PolicyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiPolicyEnginePoliciesIdPut
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @param policySaveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPolicyEnginePoliciesIdPutCall(String contentType, String accept, String id, PolicySaveRequest policySaveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policySaveRequest;

        // create path and map variables
        String localVarPath = "/api/policy-engine/policies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPolicyEnginePoliciesIdPutValidateBeforeCall(String contentType, String accept, String id, PolicySaveRequest policySaveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling apiPolicyEnginePoliciesIdPut(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling apiPolicyEnginePoliciesIdPut(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiPolicyEnginePoliciesIdPut(Async)");
        }

        // verify the required parameter 'policySaveRequest' is set
        if (policySaveRequest == null) {
            throw new ApiException("Missing the required parameter 'policySaveRequest' when calling apiPolicyEnginePoliciesIdPut(Async)");
        }

        return apiPolicyEnginePoliciesIdPutCall(contentType, accept, id, policySaveRequest, _callback);

    }

    /**
     * Update Policy
     * Updates an existing policy at your account.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @param policySaveRequest  (required)
     * @return List&lt;PolicyGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<PolicyGetResponse> apiPolicyEnginePoliciesIdPut(String contentType, String accept, String id, PolicySaveRequest policySaveRequest) throws ApiException {
        ApiResponse<List<PolicyGetResponse>> localVarResp = apiPolicyEnginePoliciesIdPutWithHttpInfo(contentType, accept, id, policySaveRequest);
        return localVarResp.getData();
    }

    /**
     * Update Policy
     * Updates an existing policy at your account.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @param policySaveRequest  (required)
     * @return ApiResponse&lt;List&lt;PolicyGetResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PolicyGetResponse>> apiPolicyEnginePoliciesIdPutWithHttpInfo(String contentType, String accept, String id, PolicySaveRequest policySaveRequest) throws ApiException {
        okhttp3.Call localVarCall = apiPolicyEnginePoliciesIdPutValidateBeforeCall(contentType, accept, id, policySaveRequest, null);
        Type localVarReturnType = new TypeToken<List<PolicyGetResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Policy (asynchronously)
     * Updates an existing policy at your account.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @param policySaveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPolicyEnginePoliciesIdPutAsync(String contentType, String accept, String id, PolicySaveRequest policySaveRequest, final ApiCallback<List<PolicyGetResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPolicyEnginePoliciesIdPutValidateBeforeCall(contentType, accept, id, policySaveRequest, _callback);
        Type localVarReturnType = new TypeToken<List<PolicyGetResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyCreateOrUpdate
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @param policySaveRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyCreateOrUpdateCall(String contentType, String accept, String id, PolicySaveRequest policySaveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policySaveRequest;

        // create path and map variables
        String localVarPath = "/api/policy-engine/policies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyCreateOrUpdateValidateBeforeCall(String contentType, String accept, String id, PolicySaveRequest policySaveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling policyCreateOrUpdate(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling policyCreateOrUpdate(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling policyCreateOrUpdate(Async)");
        }

        return policyCreateOrUpdateCall(contentType, accept, id, policySaveRequest, _callback);

    }

    /**
     * Create Policy
     * Creates a new policy from scratch.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @param policySaveRequest  (optional)
     * @return List&lt;PolicyGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<PolicyGetResponse> policyCreateOrUpdate(String contentType, String accept, String id, PolicySaveRequest policySaveRequest) throws ApiException {
        ApiResponse<List<PolicyGetResponse>> localVarResp = policyCreateOrUpdateWithHttpInfo(contentType, accept, id, policySaveRequest);
        return localVarResp.getData();
    }

    /**
     * Create Policy
     * Creates a new policy from scratch.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @param policySaveRequest  (optional)
     * @return ApiResponse&lt;List&lt;PolicyGetResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PolicyGetResponse>> policyCreateOrUpdateWithHttpInfo(String contentType, String accept, String id, PolicySaveRequest policySaveRequest) throws ApiException {
        okhttp3.Call localVarCall = policyCreateOrUpdateValidateBeforeCall(contentType, accept, id, policySaveRequest, null);
        Type localVarReturnType = new TypeToken<List<PolicyGetResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Policy (asynchronously)
     * Creates a new policy from scratch.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @param policySaveRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyCreateOrUpdateAsync(String contentType, String accept, String id, PolicySaveRequest policySaveRequest, final ApiCallback<List<PolicyGetResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyCreateOrUpdateValidateBeforeCall(contentType, accept, id, policySaveRequest, _callback);
        Type localVarReturnType = new TypeToken<List<PolicyGetResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyDelete
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyDeleteCall(String contentType, String accept, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policy-engine/policies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyDeleteValidateBeforeCall(String contentType, String accept, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling policyDelete(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling policyDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling policyDelete(Async)");
        }

        return policyDeleteCall(contentType, accept, id, _callback);

    }

    /**
     * Delete Policy by ID
     * Deletes a specific policy of the account by its ID.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
     </table>
     */
    public void policyDelete(String contentType, String accept, String id) throws ApiException {
        policyDeleteWithHttpInfo(contentType, accept, id);
    }

    /**
     * Delete Policy by ID
     * Deletes a specific policy of the account by its ID.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policyDeleteWithHttpInfo(String contentType, String accept, String id) throws ApiException {
        okhttp3.Call localVarCall = policyDeleteValidateBeforeCall(contentType, accept, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Policy by ID (asynchronously)
     * Deletes a specific policy of the account by its ID.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyDeleteAsync(String contentType, String accept, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyDeleteValidateBeforeCall(contentType, accept, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyEvaluate
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param evaluatePolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyEvaluateCall(String contentType, String accept, EvaluatePolicyRequest evaluatePolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = evaluatePolicyRequest;

        // create path and map variables
        String localVarPath = "/api/policy-engine/evaluate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyEvaluateValidateBeforeCall(String contentType, String accept, EvaluatePolicyRequest evaluatePolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling policyEvaluate(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling policyEvaluate(Async)");
        }

        // verify the required parameter 'evaluatePolicyRequest' is set
        if (evaluatePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'evaluatePolicyRequest' when calling policyEvaluate(Async)");
        }

        return policyEvaluateCall(contentType, accept, evaluatePolicyRequest, _callback);

    }

    /**
     * Evaluate Policies
     * This endpoint consults all policies and checks the ones that satisfy the request body’s conditions.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param evaluatePolicyRequest  (required)
     * @return List&lt;PolicyActionGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<PolicyActionGetResponse> policyEvaluate(String contentType, String accept, EvaluatePolicyRequest evaluatePolicyRequest) throws ApiException {
        ApiResponse<List<PolicyActionGetResponse>> localVarResp = policyEvaluateWithHttpInfo(contentType, accept, evaluatePolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Evaluate Policies
     * This endpoint consults all policies and checks the ones that satisfy the request body’s conditions.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param evaluatePolicyRequest  (required)
     * @return ApiResponse&lt;List&lt;PolicyActionGetResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PolicyActionGetResponse>> policyEvaluateWithHttpInfo(String contentType, String accept, EvaluatePolicyRequest evaluatePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policyEvaluateValidateBeforeCall(contentType, accept, evaluatePolicyRequest, null);
        Type localVarReturnType = new TypeToken<List<PolicyActionGetResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Evaluate Policies (asynchronously)
     * This endpoint consults all policies and checks the ones that satisfy the request body’s conditions.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param evaluatePolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyEvaluateAsync(String contentType, String accept, EvaluatePolicyRequest evaluatePolicyRequest, final ApiCallback<List<PolicyActionGetResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyEvaluateValidateBeforeCall(contentType, accept, evaluatePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<List<PolicyActionGetResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyGet
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyGetCall(String contentType, String accept, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policy-engine/policies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyGetValidateBeforeCall(String contentType, String accept, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling policyGet(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling policyGet(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling policyGet(Async)");
        }

        return policyGetCall(contentType, accept, id, _callback);

    }

    /**
     * Get Policy by ID
     * Retrieves general information of a policy by its ID.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @return List&lt;PolicyGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<PolicyGetResponse> policyGet(String contentType, String accept, String id) throws ApiException {
        ApiResponse<List<PolicyGetResponse>> localVarResp = policyGetWithHttpInfo(contentType, accept, id);
        return localVarResp.getData();
    }

    /**
     * Get Policy by ID
     * Retrieves general information of a policy by its ID.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @return ApiResponse&lt;List&lt;PolicyGetResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PolicyGetResponse>> policyGetWithHttpInfo(String contentType, String accept, String id) throws ApiException {
        okhttp3.Call localVarCall = policyGetValidateBeforeCall(contentType, accept, id, null);
        Type localVarReturnType = new TypeToken<List<PolicyGetResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Policy by ID (asynchronously)
     * Retrieves general information of a policy by its ID.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param id Policy ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyGetAsync(String contentType, String accept, String id, final ApiCallback<List<PolicyGetResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyGetValidateBeforeCall(contentType, accept, id, _callback);
        Type localVarReturnType = new TypeToken<List<PolicyGetResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyList
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyListCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/policy-engine/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyListValidateBeforeCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling policyList(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling policyList(Async)");
        }

        return policyListCall(contentType, accept, _callback);

    }

    /**
     * Get Policy List
     * Retrieves a list of all policies in the account and general information of each policy.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @return List&lt;PolicyGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<PolicyGetResponse> policyList(String contentType, String accept) throws ApiException {
        ApiResponse<List<PolicyGetResponse>> localVarResp = policyListWithHttpInfo(contentType, accept);
        return localVarResp.getData();
    }

    /**
     * Get Policy List
     * Retrieves a list of all policies in the account and general information of each policy.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @return ApiResponse&lt;List&lt;PolicyGetResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PolicyGetResponse>> policyListWithHttpInfo(String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = policyListValidateBeforeCall(contentType, accept, null);
        Type localVarReturnType = new TypeToken<List<PolicyGetResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Policy List (asynchronously)
     * Retrieves a list of all policies in the account and general information of each policy.
     * @param contentType Describes the type of the content being sent (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyListAsync(String contentType, String accept, final ApiCallback<List<PolicyGetResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyListValidateBeforeCall(contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<List<PolicyGetResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
