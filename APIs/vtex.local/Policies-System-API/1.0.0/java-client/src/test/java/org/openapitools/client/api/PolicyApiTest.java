/*
 * Policies System API
 *    This API will create promotion alarms when selling products with undesired prices and promotions. It will create conditions that will check if the prices and the promotions are correct. If not, the system will alarm the store with information about the product sold at unexpected prices.     ## Index     `GET` [Get Policy List](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies)   `POST` [Evaluate Policies](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/evaluate)   `GET` [Get Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies/-id-)   `POST` [Create Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/policies/-id-)   `PUT` [Update Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#put-/api/policy-engine/policies/-id-)   `DELETE` [Delete Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#delete-/api/policy-engine/policies/-id-)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EvaluatePolicyRequest;
import org.openapitools.client.model.PolicyActionGetResponse;
import org.openapitools.client.model.PolicyGetResponse;
import org.openapitools.client.model.PolicySaveRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PolicyApi
 */
@Disabled
public class PolicyApiTest {

    private final PolicyApi api = new PolicyApi();

    /**
     * Update Policy
     *
     * Updates an existing policy at your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiPolicyEnginePoliciesIdPutTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String id = null;
        PolicySaveRequest policySaveRequest = null;
        List<PolicyGetResponse> response = api.apiPolicyEnginePoliciesIdPut(contentType, accept, id, policySaveRequest);
        // TODO: test validations
    }

    /**
     * Create Policy
     *
     * Creates a new policy from scratch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyCreateOrUpdateTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String id = null;
        PolicySaveRequest policySaveRequest = null;
        List<PolicyGetResponse> response = api.policyCreateOrUpdate(contentType, accept, id, policySaveRequest);
        // TODO: test validations
    }

    /**
     * Delete Policy by ID
     *
     * Deletes a specific policy of the account by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyDeleteTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String id = null;
        api.policyDelete(contentType, accept, id);
        // TODO: test validations
    }

    /**
     * Evaluate Policies
     *
     * This endpoint consults all policies and checks the ones that satisfy the request bodyâ€™s conditions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyEvaluateTest() throws ApiException {
        String contentType = null;
        String accept = null;
        EvaluatePolicyRequest evaluatePolicyRequest = null;
        List<PolicyActionGetResponse> response = api.policyEvaluate(contentType, accept, evaluatePolicyRequest);
        // TODO: test validations
    }

    /**
     * Get Policy by ID
     *
     * Retrieves general information of a policy by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyGetTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String id = null;
        List<PolicyGetResponse> response = api.policyGet(contentType, accept, id);
        // TODO: test validations
    }

    /**
     * Get Policy List
     *
     * Retrieves a list of all policies in the account and general information of each policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyListTest() throws ApiException {
        String contentType = null;
        String accept = null;
        List<PolicyGetResponse> response = api.policyList(contentType, accept);
        // TODO: test validations
    }

}
