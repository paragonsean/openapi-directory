/**
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpsertSellerRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpsertSellerRequest::OAIUpsertSellerRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpsertSellerRequest::OAIUpsertSellerRequest() {
    this->initializeModel();
}

OAIUpsertSellerRequest::~OAIUpsertSellerRequest() {}

void OAIUpsertSellerRequest::initializeModel() {

    m_csc_identification_isSet = false;
    m_csc_identification_isValid = false;

    m_account_isSet = false;
    m_account_isValid = false;

    m_allow_hybrid_payments_isSet = false;
    m_allow_hybrid_payments_isValid = false;

    m_available_sales_channels_isSet = false;
    m_available_sales_channels_isValid = false;

    m_catalog_system_endpoint_isSet = false;
    m_catalog_system_endpoint_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_delivery_policy_isSet = false;
    m_delivery_policy_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_exchange_return_policy_isSet = false;
    m_exchange_return_policy_isValid = false;

    m_fulfillment_endpoint_isSet = false;
    m_fulfillment_endpoint_isValid = false;

    m_fulfillment_seller_id_isSet = false;
    m_fulfillment_seller_id_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_is_better_scope_isSet = false;
    m_is_better_scope_isValid = false;

    m_is_vtex_isSet = false;
    m_is_vtex_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_security_privacy_policy_isSet = false;
    m_security_privacy_policy_isValid = false;

    m_seller_commission_configuration_isSet = false;
    m_seller_commission_configuration_isValid = false;

    m_seller_type_isSet = false;
    m_seller_type_isValid = false;

    m_tax_code_isSet = false;
    m_tax_code_isValid = false;

    m_trust_policy_isSet = false;
    m_trust_policy_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIUpsertSellerRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpsertSellerRequest::fromJsonObject(QJsonObject json) {

    m_csc_identification_isValid = ::OpenAPI::fromJsonValue(m_csc_identification, json[QString("CSCIdentification")]);
    m_csc_identification_isSet = !json[QString("CSCIdentification")].isNull() && m_csc_identification_isValid;

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_allow_hybrid_payments_isValid = ::OpenAPI::fromJsonValue(m_allow_hybrid_payments, json[QString("allowHybridPayments")]);
    m_allow_hybrid_payments_isSet = !json[QString("allowHybridPayments")].isNull() && m_allow_hybrid_payments_isValid;

    m_available_sales_channels_isValid = ::OpenAPI::fromJsonValue(m_available_sales_channels, json[QString("availableSalesChannels")]);
    m_available_sales_channels_isSet = !json[QString("availableSalesChannels")].isNull() && m_available_sales_channels_isValid;

    m_catalog_system_endpoint_isValid = ::OpenAPI::fromJsonValue(m_catalog_system_endpoint, json[QString("catalogSystemEndpoint")]);
    m_catalog_system_endpoint_isSet = !json[QString("catalogSystemEndpoint")].isNull() && m_catalog_system_endpoint_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_delivery_policy_isValid = ::OpenAPI::fromJsonValue(m_delivery_policy, json[QString("deliveryPolicy")]);
    m_delivery_policy_isSet = !json[QString("deliveryPolicy")].isNull() && m_delivery_policy_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_exchange_return_policy_isValid = ::OpenAPI::fromJsonValue(m_exchange_return_policy, json[QString("exchangeReturnPolicy")]);
    m_exchange_return_policy_isSet = !json[QString("exchangeReturnPolicy")].isNull() && m_exchange_return_policy_isValid;

    m_fulfillment_endpoint_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_endpoint, json[QString("fulfillmentEndpoint")]);
    m_fulfillment_endpoint_isSet = !json[QString("fulfillmentEndpoint")].isNull() && m_fulfillment_endpoint_isValid;

    m_fulfillment_seller_id_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_seller_id, json[QString("fulfillmentSellerId")]);
    m_fulfillment_seller_id_isSet = !json[QString("fulfillmentSellerId")].isNull() && m_fulfillment_seller_id_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_is_better_scope_isValid = ::OpenAPI::fromJsonValue(m_is_better_scope, json[QString("isBetterScope")]);
    m_is_better_scope_isSet = !json[QString("isBetterScope")].isNull() && m_is_better_scope_isValid;

    m_is_vtex_isValid = ::OpenAPI::fromJsonValue(m_is_vtex, json[QString("isVtex")]);
    m_is_vtex_isSet = !json[QString("isVtex")].isNull() && m_is_vtex_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_security_privacy_policy_isValid = ::OpenAPI::fromJsonValue(m_security_privacy_policy, json[QString("securityPrivacyPolicy")]);
    m_security_privacy_policy_isSet = !json[QString("securityPrivacyPolicy")].isNull() && m_security_privacy_policy_isValid;

    m_seller_commission_configuration_isValid = ::OpenAPI::fromJsonValue(m_seller_commission_configuration, json[QString("sellerCommissionConfiguration")]);
    m_seller_commission_configuration_isSet = !json[QString("sellerCommissionConfiguration")].isNull() && m_seller_commission_configuration_isValid;

    m_seller_type_isValid = ::OpenAPI::fromJsonValue(m_seller_type, json[QString("sellerType")]);
    m_seller_type_isSet = !json[QString("sellerType")].isNull() && m_seller_type_isValid;

    m_tax_code_isValid = ::OpenAPI::fromJsonValue(m_tax_code, json[QString("taxCode")]);
    m_tax_code_isSet = !json[QString("taxCode")].isNull() && m_tax_code_isValid;

    m_trust_policy_isValid = ::OpenAPI::fromJsonValue(m_trust_policy, json[QString("trustPolicy")]);
    m_trust_policy_isSet = !json[QString("trustPolicy")].isNull() && m_trust_policy_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIUpsertSellerRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpsertSellerRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_csc_identification_isSet) {
        obj.insert(QString("CSCIdentification"), ::OpenAPI::toJsonValue(m_csc_identification));
    }
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_allow_hybrid_payments_isSet) {
        obj.insert(QString("allowHybridPayments"), ::OpenAPI::toJsonValue(m_allow_hybrid_payments));
    }
    if (m_available_sales_channels.size() > 0) {
        obj.insert(QString("availableSalesChannels"), ::OpenAPI::toJsonValue(m_available_sales_channels));
    }
    if (m_catalog_system_endpoint_isSet) {
        obj.insert(QString("catalogSystemEndpoint"), ::OpenAPI::toJsonValue(m_catalog_system_endpoint));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_delivery_policy_isSet) {
        obj.insert(QString("deliveryPolicy"), ::OpenAPI::toJsonValue(m_delivery_policy));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_exchange_return_policy_isSet) {
        obj.insert(QString("exchangeReturnPolicy"), ::OpenAPI::toJsonValue(m_exchange_return_policy));
    }
    if (m_fulfillment_endpoint_isSet) {
        obj.insert(QString("fulfillmentEndpoint"), ::OpenAPI::toJsonValue(m_fulfillment_endpoint));
    }
    if (m_fulfillment_seller_id_isSet) {
        obj.insert(QString("fulfillmentSellerId"), ::OpenAPI::toJsonValue(m_fulfillment_seller_id));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_is_better_scope_isSet) {
        obj.insert(QString("isBetterScope"), ::OpenAPI::toJsonValue(m_is_better_scope));
    }
    if (m_is_vtex_isSet) {
        obj.insert(QString("isVtex"), ::OpenAPI::toJsonValue(m_is_vtex));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_security_privacy_policy_isSet) {
        obj.insert(QString("securityPrivacyPolicy"), ::OpenAPI::toJsonValue(m_security_privacy_policy));
    }
    if (m_seller_commission_configuration.size() > 0) {
        obj.insert(QString("sellerCommissionConfiguration"), ::OpenAPI::toJsonValue(m_seller_commission_configuration));
    }
    if (m_seller_type_isSet) {
        obj.insert(QString("sellerType"), ::OpenAPI::toJsonValue(m_seller_type));
    }
    if (m_tax_code_isSet) {
        obj.insert(QString("taxCode"), ::OpenAPI::toJsonValue(m_tax_code));
    }
    if (m_trust_policy_isSet) {
        obj.insert(QString("trustPolicy"), ::OpenAPI::toJsonValue(m_trust_policy));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIUpsertSellerRequest::getCscIdentification() const {
    return m_csc_identification;
}
void OAIUpsertSellerRequest::setCscIdentification(const QString &csc_identification) {
    m_csc_identification = csc_identification;
    m_csc_identification_isSet = true;
}

bool OAIUpsertSellerRequest::is_csc_identification_Set() const{
    return m_csc_identification_isSet;
}

bool OAIUpsertSellerRequest::is_csc_identification_Valid() const{
    return m_csc_identification_isValid;
}

QString OAIUpsertSellerRequest::getAccount() const {
    return m_account;
}
void OAIUpsertSellerRequest::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIUpsertSellerRequest::is_account_Set() const{
    return m_account_isSet;
}

bool OAIUpsertSellerRequest::is_account_Valid() const{
    return m_account_isValid;
}

bool OAIUpsertSellerRequest::isAllowHybridPayments() const {
    return m_allow_hybrid_payments;
}
void OAIUpsertSellerRequest::setAllowHybridPayments(const bool &allow_hybrid_payments) {
    m_allow_hybrid_payments = allow_hybrid_payments;
    m_allow_hybrid_payments_isSet = true;
}

bool OAIUpsertSellerRequest::is_allow_hybrid_payments_Set() const{
    return m_allow_hybrid_payments_isSet;
}

bool OAIUpsertSellerRequest::is_allow_hybrid_payments_Valid() const{
    return m_allow_hybrid_payments_isValid;
}

QList<OAIAvailableSalesChannel> OAIUpsertSellerRequest::getAvailableSalesChannels() const {
    return m_available_sales_channels;
}
void OAIUpsertSellerRequest::setAvailableSalesChannels(const QList<OAIAvailableSalesChannel> &available_sales_channels) {
    m_available_sales_channels = available_sales_channels;
    m_available_sales_channels_isSet = true;
}

bool OAIUpsertSellerRequest::is_available_sales_channels_Set() const{
    return m_available_sales_channels_isSet;
}

bool OAIUpsertSellerRequest::is_available_sales_channels_Valid() const{
    return m_available_sales_channels_isValid;
}

QString OAIUpsertSellerRequest::getCatalogSystemEndpoint() const {
    return m_catalog_system_endpoint;
}
void OAIUpsertSellerRequest::setCatalogSystemEndpoint(const QString &catalog_system_endpoint) {
    m_catalog_system_endpoint = catalog_system_endpoint;
    m_catalog_system_endpoint_isSet = true;
}

bool OAIUpsertSellerRequest::is_catalog_system_endpoint_Set() const{
    return m_catalog_system_endpoint_isSet;
}

bool OAIUpsertSellerRequest::is_catalog_system_endpoint_Valid() const{
    return m_catalog_system_endpoint_isValid;
}

QString OAIUpsertSellerRequest::getChannel() const {
    return m_channel;
}
void OAIUpsertSellerRequest::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIUpsertSellerRequest::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIUpsertSellerRequest::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIUpsertSellerRequest::getDeliveryPolicy() const {
    return m_delivery_policy;
}
void OAIUpsertSellerRequest::setDeliveryPolicy(const QString &delivery_policy) {
    m_delivery_policy = delivery_policy;
    m_delivery_policy_isSet = true;
}

bool OAIUpsertSellerRequest::is_delivery_policy_Set() const{
    return m_delivery_policy_isSet;
}

bool OAIUpsertSellerRequest::is_delivery_policy_Valid() const{
    return m_delivery_policy_isValid;
}

QString OAIUpsertSellerRequest::getDescription() const {
    return m_description;
}
void OAIUpsertSellerRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpsertSellerRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpsertSellerRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpsertSellerRequest::getEmail() const {
    return m_email;
}
void OAIUpsertSellerRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUpsertSellerRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUpsertSellerRequest::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUpsertSellerRequest::getExchangeReturnPolicy() const {
    return m_exchange_return_policy;
}
void OAIUpsertSellerRequest::setExchangeReturnPolicy(const QString &exchange_return_policy) {
    m_exchange_return_policy = exchange_return_policy;
    m_exchange_return_policy_isSet = true;
}

bool OAIUpsertSellerRequest::is_exchange_return_policy_Set() const{
    return m_exchange_return_policy_isSet;
}

bool OAIUpsertSellerRequest::is_exchange_return_policy_Valid() const{
    return m_exchange_return_policy_isValid;
}

QString OAIUpsertSellerRequest::getFulfillmentEndpoint() const {
    return m_fulfillment_endpoint;
}
void OAIUpsertSellerRequest::setFulfillmentEndpoint(const QString &fulfillment_endpoint) {
    m_fulfillment_endpoint = fulfillment_endpoint;
    m_fulfillment_endpoint_isSet = true;
}

bool OAIUpsertSellerRequest::is_fulfillment_endpoint_Set() const{
    return m_fulfillment_endpoint_isSet;
}

bool OAIUpsertSellerRequest::is_fulfillment_endpoint_Valid() const{
    return m_fulfillment_endpoint_isValid;
}

QString OAIUpsertSellerRequest::getFulfillmentSellerId() const {
    return m_fulfillment_seller_id;
}
void OAIUpsertSellerRequest::setFulfillmentSellerId(const QString &fulfillment_seller_id) {
    m_fulfillment_seller_id = fulfillment_seller_id;
    m_fulfillment_seller_id_isSet = true;
}

bool OAIUpsertSellerRequest::is_fulfillment_seller_id_Set() const{
    return m_fulfillment_seller_id_isSet;
}

bool OAIUpsertSellerRequest::is_fulfillment_seller_id_Valid() const{
    return m_fulfillment_seller_id_isValid;
}

QList<OAIGroups> OAIUpsertSellerRequest::getGroups() const {
    return m_groups;
}
void OAIUpsertSellerRequest::setGroups(const QList<OAIGroups> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIUpsertSellerRequest::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIUpsertSellerRequest::is_groups_Valid() const{
    return m_groups_isValid;
}

QString OAIUpsertSellerRequest::getId() const {
    return m_id;
}
void OAIUpsertSellerRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpsertSellerRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpsertSellerRequest::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUpsertSellerRequest::isIsActive() const {
    return m_is_active;
}
void OAIUpsertSellerRequest::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIUpsertSellerRequest::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIUpsertSellerRequest::is_is_active_Valid() const{
    return m_is_active_isValid;
}

bool OAIUpsertSellerRequest::isIsBetterScope() const {
    return m_is_better_scope;
}
void OAIUpsertSellerRequest::setIsBetterScope(const bool &is_better_scope) {
    m_is_better_scope = is_better_scope;
    m_is_better_scope_isSet = true;
}

bool OAIUpsertSellerRequest::is_is_better_scope_Set() const{
    return m_is_better_scope_isSet;
}

bool OAIUpsertSellerRequest::is_is_better_scope_Valid() const{
    return m_is_better_scope_isValid;
}

bool OAIUpsertSellerRequest::isIsVtex() const {
    return m_is_vtex;
}
void OAIUpsertSellerRequest::setIsVtex(const bool &is_vtex) {
    m_is_vtex = is_vtex;
    m_is_vtex_isSet = true;
}

bool OAIUpsertSellerRequest::is_is_vtex_Set() const{
    return m_is_vtex_isSet;
}

bool OAIUpsertSellerRequest::is_is_vtex_Valid() const{
    return m_is_vtex_isValid;
}

QString OAIUpsertSellerRequest::getName() const {
    return m_name;
}
void OAIUpsertSellerRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpsertSellerRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpsertSellerRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpsertSellerRequest::getPassword() const {
    return m_password;
}
void OAIUpsertSellerRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUpsertSellerRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUpsertSellerRequest::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIUpsertSellerRequest::getSalesChannel() const {
    return m_sales_channel;
}
void OAIUpsertSellerRequest::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAIUpsertSellerRequest::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAIUpsertSellerRequest::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

double OAIUpsertSellerRequest::getScore() const {
    return m_score;
}
void OAIUpsertSellerRequest::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIUpsertSellerRequest::is_score_Set() const{
    return m_score_isSet;
}

bool OAIUpsertSellerRequest::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIUpsertSellerRequest::getSecurityPrivacyPolicy() const {
    return m_security_privacy_policy;
}
void OAIUpsertSellerRequest::setSecurityPrivacyPolicy(const QString &security_privacy_policy) {
    m_security_privacy_policy = security_privacy_policy;
    m_security_privacy_policy_isSet = true;
}

bool OAIUpsertSellerRequest::is_security_privacy_policy_Set() const{
    return m_security_privacy_policy_isSet;
}

bool OAIUpsertSellerRequest::is_security_privacy_policy_Valid() const{
    return m_security_privacy_policy_isValid;
}

QList<OAISellerCommissionConfiguration> OAIUpsertSellerRequest::getSellerCommissionConfiguration() const {
    return m_seller_commission_configuration;
}
void OAIUpsertSellerRequest::setSellerCommissionConfiguration(const QList<OAISellerCommissionConfiguration> &seller_commission_configuration) {
    m_seller_commission_configuration = seller_commission_configuration;
    m_seller_commission_configuration_isSet = true;
}

bool OAIUpsertSellerRequest::is_seller_commission_configuration_Set() const{
    return m_seller_commission_configuration_isSet;
}

bool OAIUpsertSellerRequest::is_seller_commission_configuration_Valid() const{
    return m_seller_commission_configuration_isValid;
}

qint32 OAIUpsertSellerRequest::getSellerType() const {
    return m_seller_type;
}
void OAIUpsertSellerRequest::setSellerType(const qint32 &seller_type) {
    m_seller_type = seller_type;
    m_seller_type_isSet = true;
}

bool OAIUpsertSellerRequest::is_seller_type_Set() const{
    return m_seller_type_isSet;
}

bool OAIUpsertSellerRequest::is_seller_type_Valid() const{
    return m_seller_type_isValid;
}

QString OAIUpsertSellerRequest::getTaxCode() const {
    return m_tax_code;
}
void OAIUpsertSellerRequest::setTaxCode(const QString &tax_code) {
    m_tax_code = tax_code;
    m_tax_code_isSet = true;
}

bool OAIUpsertSellerRequest::is_tax_code_Set() const{
    return m_tax_code_isSet;
}

bool OAIUpsertSellerRequest::is_tax_code_Valid() const{
    return m_tax_code_isValid;
}

QString OAIUpsertSellerRequest::getTrustPolicy() const {
    return m_trust_policy;
}
void OAIUpsertSellerRequest::setTrustPolicy(const QString &trust_policy) {
    m_trust_policy = trust_policy;
    m_trust_policy_isSet = true;
}

bool OAIUpsertSellerRequest::is_trust_policy_Set() const{
    return m_trust_policy_isSet;
}

bool OAIUpsertSellerRequest::is_trust_policy_Valid() const{
    return m_trust_policy_isValid;
}

QString OAIUpsertSellerRequest::getUser() const {
    return m_user;
}
void OAIUpsertSellerRequest::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUpsertSellerRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUpsertSellerRequest::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIUpsertSellerRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_csc_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_hybrid_payments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_sales_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_system_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_return_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_seller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_better_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_vtex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_privacy_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_commission_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpsertSellerRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_csc_identification_isValid && m_account_isValid && m_allow_hybrid_payments_isValid && m_available_sales_channels_isValid && m_catalog_system_endpoint_isValid && m_channel_isValid && m_delivery_policy_isValid && m_description_isValid && m_email_isValid && m_exchange_return_policy_isValid && m_fulfillment_endpoint_isValid && m_fulfillment_seller_id_isValid && m_id_isValid && m_is_active_isValid && m_is_better_scope_isValid && m_is_vtex_isValid && m_name_isValid && m_password_isValid && m_sales_channel_isValid && m_score_isValid && m_security_privacy_policy_isValid && m_seller_commission_configuration_isValid && m_seller_type_isValid && m_tax_code_isValid && m_trust_policy_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
