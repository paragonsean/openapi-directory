/**
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkUpsertSellerCommissionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkUpsertSellerCommissionsRequest::OAIBulkUpsertSellerCommissionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkUpsertSellerCommissionsRequest::OAIBulkUpsertSellerCommissionsRequest() {
    this->initializeModel();
}

OAIBulkUpsertSellerCommissionsRequest::~OAIBulkUpsertSellerCommissionsRequest() {}

void OAIBulkUpsertSellerCommissionsRequest::initializeModel() {

    m_category_full_path_isSet = false;
    m_category_full_path_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_freight_commission_percentage_isSet = false;
    m_freight_commission_percentage_isValid = false;

    m_product_commission_percentage_isSet = false;
    m_product_commission_percentage_isValid = false;
}

void OAIBulkUpsertSellerCommissionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulkUpsertSellerCommissionsRequest::fromJsonObject(QJsonObject json) {

    m_category_full_path_isValid = ::OpenAPI::fromJsonValue(m_category_full_path, json[QString("categoryFullPath")]);
    m_category_full_path_isSet = !json[QString("categoryFullPath")].isNull() && m_category_full_path_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_freight_commission_percentage_isValid = ::OpenAPI::fromJsonValue(m_freight_commission_percentage, json[QString("freightCommissionPercentage")]);
    m_freight_commission_percentage_isSet = !json[QString("freightCommissionPercentage")].isNull() && m_freight_commission_percentage_isValid;

    m_product_commission_percentage_isValid = ::OpenAPI::fromJsonValue(m_product_commission_percentage, json[QString("productCommissionPercentage")]);
    m_product_commission_percentage_isSet = !json[QString("productCommissionPercentage")].isNull() && m_product_commission_percentage_isValid;
}

QString OAIBulkUpsertSellerCommissionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulkUpsertSellerCommissionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_category_full_path_isSet) {
        obj.insert(QString("categoryFullPath"), ::OpenAPI::toJsonValue(m_category_full_path));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_freight_commission_percentage_isSet) {
        obj.insert(QString("freightCommissionPercentage"), ::OpenAPI::toJsonValue(m_freight_commission_percentage));
    }
    if (m_product_commission_percentage_isSet) {
        obj.insert(QString("productCommissionPercentage"), ::OpenAPI::toJsonValue(m_product_commission_percentage));
    }
    return obj;
}

QString OAIBulkUpsertSellerCommissionsRequest::getCategoryFullPath() const {
    return m_category_full_path;
}
void OAIBulkUpsertSellerCommissionsRequest::setCategoryFullPath(const QString &category_full_path) {
    m_category_full_path = category_full_path;
    m_category_full_path_isSet = true;
}

bool OAIBulkUpsertSellerCommissionsRequest::is_category_full_path_Set() const{
    return m_category_full_path_isSet;
}

bool OAIBulkUpsertSellerCommissionsRequest::is_category_full_path_Valid() const{
    return m_category_full_path_isValid;
}

QString OAIBulkUpsertSellerCommissionsRequest::getCategoryId() const {
    return m_category_id;
}
void OAIBulkUpsertSellerCommissionsRequest::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIBulkUpsertSellerCommissionsRequest::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIBulkUpsertSellerCommissionsRequest::is_category_id_Valid() const{
    return m_category_id_isValid;
}

double OAIBulkUpsertSellerCommissionsRequest::getFreightCommissionPercentage() const {
    return m_freight_commission_percentage;
}
void OAIBulkUpsertSellerCommissionsRequest::setFreightCommissionPercentage(const double &freight_commission_percentage) {
    m_freight_commission_percentage = freight_commission_percentage;
    m_freight_commission_percentage_isSet = true;
}

bool OAIBulkUpsertSellerCommissionsRequest::is_freight_commission_percentage_Set() const{
    return m_freight_commission_percentage_isSet;
}

bool OAIBulkUpsertSellerCommissionsRequest::is_freight_commission_percentage_Valid() const{
    return m_freight_commission_percentage_isValid;
}

double OAIBulkUpsertSellerCommissionsRequest::getProductCommissionPercentage() const {
    return m_product_commission_percentage;
}
void OAIBulkUpsertSellerCommissionsRequest::setProductCommissionPercentage(const double &product_commission_percentage) {
    m_product_commission_percentage = product_commission_percentage;
    m_product_commission_percentage_isSet = true;
}

bool OAIBulkUpsertSellerCommissionsRequest::is_product_commission_percentage_Set() const{
    return m_product_commission_percentage_isSet;
}

bool OAIBulkUpsertSellerCommissionsRequest::is_product_commission_percentage_Valid() const{
    return m_product_commission_percentage_isValid;
}

bool OAIBulkUpsertSellerCommissionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_full_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_freight_commission_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_commission_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulkUpsertSellerCommissionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_full_path_isValid && m_category_id_isValid && m_freight_commission_percentage_isValid && m_product_commission_percentage_isValid && true;
}

} // namespace OpenAPI
