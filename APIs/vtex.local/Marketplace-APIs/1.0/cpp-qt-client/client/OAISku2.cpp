/**
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISku2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISku2::OAISku2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISku2::OAISku2() {
    this->initializeModel();
}

OAISku2::~OAISku2() {}

void OAISku2::initializeModel() {

    m_ean_id_isSet = false;
    m_ean_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_main_image_isSet = false;
    m_main_image_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_name_complete_isSet = false;
    m_name_complete_isValid = false;

    m_offers_isSet = false;
    m_offers_isValid = false;

    m_ref_id_isSet = false;
    m_ref_id_isValid = false;

    m_sku_id_isSet = false;
    m_sku_id_isValid = false;
}

void OAISku2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISku2::fromJsonObject(QJsonObject json) {

    m_ean_id_isValid = ::OpenAPI::fromJsonValue(m_ean_id, json[QString("EanId")]);
    m_ean_id_isSet = !json[QString("EanId")].isNull() && m_ean_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("IsActive")]);
    m_is_active_isSet = !json[QString("IsActive")].isNull() && m_is_active_isValid;

    m_main_image_isValid = ::OpenAPI::fromJsonValue(m_main_image, json[QString("MainImage")]);
    m_main_image_isSet = !json[QString("MainImage")].isNull() && m_main_image_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_name_complete_isValid = ::OpenAPI::fromJsonValue(m_name_complete, json[QString("NameComplete")]);
    m_name_complete_isSet = !json[QString("NameComplete")].isNull() && m_name_complete_isValid;

    m_offers_isValid = ::OpenAPI::fromJsonValue(m_offers, json[QString("Offers")]);
    m_offers_isSet = !json[QString("Offers")].isNull() && m_offers_isValid;

    m_ref_id_isValid = ::OpenAPI::fromJsonValue(m_ref_id, json[QString("RefId")]);
    m_ref_id_isSet = !json[QString("RefId")].isNull() && m_ref_id_isValid;

    m_sku_id_isValid = ::OpenAPI::fromJsonValue(m_sku_id, json[QString("SkuId")]);
    m_sku_id_isSet = !json[QString("SkuId")].isNull() && m_sku_id_isValid;
}

QString OAISku2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISku2::asJsonObject() const {
    QJsonObject obj;
    if (m_ean_id_isSet) {
        obj.insert(QString("EanId"), ::OpenAPI::toJsonValue(m_ean_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("IsActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_main_image.size() > 0) {
        obj.insert(QString("MainImage"), ::OpenAPI::toJsonValue(m_main_image));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_name_complete_isSet) {
        obj.insert(QString("NameComplete"), ::OpenAPI::toJsonValue(m_name_complete));
    }
    if (m_offers.size() > 0) {
        obj.insert(QString("Offers"), ::OpenAPI::toJsonValue(m_offers));
    }
    if (m_ref_id_isSet) {
        obj.insert(QString("RefId"), ::OpenAPI::toJsonValue(m_ref_id));
    }
    if (m_sku_id_isSet) {
        obj.insert(QString("SkuId"), ::OpenAPI::toJsonValue(m_sku_id));
    }
    return obj;
}

QString OAISku2::getEanId() const {
    return m_ean_id;
}
void OAISku2::setEanId(const QString &ean_id) {
    m_ean_id = ean_id;
    m_ean_id_isSet = true;
}

bool OAISku2::is_ean_id_Set() const{
    return m_ean_id_isSet;
}

bool OAISku2::is_ean_id_Valid() const{
    return m_ean_id_isValid;
}

bool OAISku2::isIsActive() const {
    return m_is_active;
}
void OAISku2::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAISku2::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAISku2::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QList<OAIMainImage> OAISku2::getMainImage() const {
    return m_main_image;
}
void OAISku2::setMainImage(const QList<OAIMainImage> &main_image) {
    m_main_image = main_image;
    m_main_image_isSet = true;
}

bool OAISku2::is_main_image_Set() const{
    return m_main_image_isSet;
}

bool OAISku2::is_main_image_Valid() const{
    return m_main_image_isValid;
}

QString OAISku2::getName() const {
    return m_name;
}
void OAISku2::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISku2::is_name_Set() const{
    return m_name_isSet;
}

bool OAISku2::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISku2::getNameComplete() const {
    return m_name_complete;
}
void OAISku2::setNameComplete(const QString &name_complete) {
    m_name_complete = name_complete;
    m_name_complete_isSet = true;
}

bool OAISku2::is_name_complete_Set() const{
    return m_name_complete_isSet;
}

bool OAISku2::is_name_complete_Valid() const{
    return m_name_complete_isValid;
}

QList<OAIOffer> OAISku2::getOffers() const {
    return m_offers;
}
void OAISku2::setOffers(const QList<OAIOffer> &offers) {
    m_offers = offers;
    m_offers_isSet = true;
}

bool OAISku2::is_offers_Set() const{
    return m_offers_isSet;
}

bool OAISku2::is_offers_Valid() const{
    return m_offers_isValid;
}

QString OAISku2::getRefId() const {
    return m_ref_id;
}
void OAISku2::setRefId(const QString &ref_id) {
    m_ref_id = ref_id;
    m_ref_id_isSet = true;
}

bool OAISku2::is_ref_id_Set() const{
    return m_ref_id_isSet;
}

bool OAISku2::is_ref_id_Valid() const{
    return m_ref_id_isValid;
}

QString OAISku2::getSkuId() const {
    return m_sku_id;
}
void OAISku2::setSkuId(const QString &sku_id) {
    m_sku_id = sku_id;
    m_sku_id_isSet = true;
}

bool OAISku2::is_sku_id_Set() const{
    return m_sku_id_isSet;
}

bool OAISku2::is_sku_id_Valid() const{
    return m_sku_id_isValid;
}

bool OAISku2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ean_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_image.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISku2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ean_id_isValid && m_is_active_isValid && m_main_image_isValid && m_name_isValid && m_name_complete_isValid && m_offers_isValid && m_ref_id_isValid && m_sku_id_isValid && true;
}

} // namespace OpenAPI
