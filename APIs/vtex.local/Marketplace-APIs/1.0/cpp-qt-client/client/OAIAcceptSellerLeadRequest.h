/**
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAcceptSellerLeadRequest.h
 *
 * 
 */

#ifndef OAIAcceptSellerLeadRequest_H
#define OAIAcceptSellerLeadRequest_H

#include <QJsonObject>

#include "OAIAccountable.h"
#include "OAIAddress.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccountable;
class OAIAddress;

class OAIAcceptSellerLeadRequest : public OAIObject {
public:
    OAIAcceptSellerLeadRequest();
    OAIAcceptSellerLeadRequest(QString json);
    ~OAIAcceptSellerLeadRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    OAIAccountable getAccountable() const;
    void setAccountable(const OAIAccountable &accountable);
    bool is_accountable_Set() const;
    bool is_accountable_Valid() const;

    OAIAddress getAddress() const;
    void setAddress(const OAIAddress &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    QString getDocument() const;
    void setDocument(const QString &document);
    bool is_document_Set() const;
    bool is_document_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    bool isHasAcceptedLegalTerms() const;
    void setHasAcceptedLegalTerms(const bool &has_accepted_legal_terms);
    bool is_has_accepted_legal_terms_Set() const;
    bool is_has_accepted_legal_terms_Valid() const;

    QString getSalesChannel() const;
    void setSalesChannel(const QString &sales_channel);
    bool is_sales_channel_Set() const;
    bool is_sales_channel_Valid() const;

    QString getSellerAccountName() const;
    void setSellerAccountName(const QString &seller_account_name);
    bool is_seller_account_name_Set() const;
    bool is_seller_account_name_Valid() const;

    QString getSellerEmail() const;
    void setSellerEmail(const QString &seller_email);
    bool is_seller_email_Set() const;
    bool is_seller_email_Valid() const;

    QString getSellerName() const;
    void setSellerName(const QString &seller_name);
    bool is_seller_name_Set() const;
    bool is_seller_name_Valid() const;

    qint32 getSellerType() const;
    void setSellerType(const qint32 &seller_type);
    bool is_seller_type_Set() const;
    bool is_seller_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    OAIAccountable m_accountable;
    bool m_accountable_isSet;
    bool m_accountable_isValid;

    OAIAddress m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    QString m_document;
    bool m_document_isSet;
    bool m_document_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    bool m_has_accepted_legal_terms;
    bool m_has_accepted_legal_terms_isSet;
    bool m_has_accepted_legal_terms_isValid;

    QString m_sales_channel;
    bool m_sales_channel_isSet;
    bool m_sales_channel_isValid;

    QString m_seller_account_name;
    bool m_seller_account_name_isSet;
    bool m_seller_account_name_isValid;

    QString m_seller_email;
    bool m_seller_email_isSet;
    bool m_seller_email_isValid;

    QString m_seller_name;
    bool m_seller_name_isSet;
    bool m_seller_name_isValid;

    qint32 m_seller_type;
    bool m_seller_type_isSet;
    bool m_seller_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAcceptSellerLeadRequest)

#endif // OAIAcceptSellerLeadRequest_H
