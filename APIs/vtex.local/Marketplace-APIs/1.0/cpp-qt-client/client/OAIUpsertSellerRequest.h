/**
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpsertSellerRequest.h
 *
 * 
 */

#ifndef OAIUpsertSellerRequest_H
#define OAIUpsertSellerRequest_H

#include <QJsonObject>

#include "OAIAvailableSalesChannel.h"
#include "OAIGroups.h"
#include "OAISellerCommissionConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAvailableSalesChannel;
class OAIGroups;
class OAISellerCommissionConfiguration;

class OAIUpsertSellerRequest : public OAIObject {
public:
    OAIUpsertSellerRequest();
    OAIUpsertSellerRequest(QString json);
    ~OAIUpsertSellerRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCscIdentification() const;
    void setCscIdentification(const QString &csc_identification);
    bool is_csc_identification_Set() const;
    bool is_csc_identification_Valid() const;

    QString getAccount() const;
    void setAccount(const QString &account);
    bool is_account_Set() const;
    bool is_account_Valid() const;

    bool isAllowHybridPayments() const;
    void setAllowHybridPayments(const bool &allow_hybrid_payments);
    bool is_allow_hybrid_payments_Set() const;
    bool is_allow_hybrid_payments_Valid() const;

    QList<OAIAvailableSalesChannel> getAvailableSalesChannels() const;
    void setAvailableSalesChannels(const QList<OAIAvailableSalesChannel> &available_sales_channels);
    bool is_available_sales_channels_Set() const;
    bool is_available_sales_channels_Valid() const;

    QString getCatalogSystemEndpoint() const;
    void setCatalogSystemEndpoint(const QString &catalog_system_endpoint);
    bool is_catalog_system_endpoint_Set() const;
    bool is_catalog_system_endpoint_Valid() const;

    QString getChannel() const;
    void setChannel(const QString &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    QString getDeliveryPolicy() const;
    void setDeliveryPolicy(const QString &delivery_policy);
    bool is_delivery_policy_Set() const;
    bool is_delivery_policy_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QString getExchangeReturnPolicy() const;
    void setExchangeReturnPolicy(const QString &exchange_return_policy);
    bool is_exchange_return_policy_Set() const;
    bool is_exchange_return_policy_Valid() const;

    QString getFulfillmentEndpoint() const;
    void setFulfillmentEndpoint(const QString &fulfillment_endpoint);
    bool is_fulfillment_endpoint_Set() const;
    bool is_fulfillment_endpoint_Valid() const;

    QString getFulfillmentSellerId() const;
    void setFulfillmentSellerId(const QString &fulfillment_seller_id);
    bool is_fulfillment_seller_id_Set() const;
    bool is_fulfillment_seller_id_Valid() const;

    QList<OAIGroups> getGroups() const;
    void setGroups(const QList<OAIGroups> &groups);
    bool is_groups_Set() const;
    bool is_groups_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsActive() const;
    void setIsActive(const bool &is_active);
    bool is_is_active_Set() const;
    bool is_is_active_Valid() const;

    bool isIsBetterScope() const;
    void setIsBetterScope(const bool &is_better_scope);
    bool is_is_better_scope_Set() const;
    bool is_is_better_scope_Valid() const;

    bool isIsVtex() const;
    void setIsVtex(const bool &is_vtex);
    bool is_is_vtex_Set() const;
    bool is_is_vtex_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPassword() const;
    void setPassword(const QString &password);
    bool is_password_Set() const;
    bool is_password_Valid() const;

    QString getSalesChannel() const;
    void setSalesChannel(const QString &sales_channel);
    bool is_sales_channel_Set() const;
    bool is_sales_channel_Valid() const;

    double getScore() const;
    void setScore(const double &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    QString getSecurityPrivacyPolicy() const;
    void setSecurityPrivacyPolicy(const QString &security_privacy_policy);
    bool is_security_privacy_policy_Set() const;
    bool is_security_privacy_policy_Valid() const;

    QList<OAISellerCommissionConfiguration> getSellerCommissionConfiguration() const;
    void setSellerCommissionConfiguration(const QList<OAISellerCommissionConfiguration> &seller_commission_configuration);
    bool is_seller_commission_configuration_Set() const;
    bool is_seller_commission_configuration_Valid() const;

    qint32 getSellerType() const;
    void setSellerType(const qint32 &seller_type);
    bool is_seller_type_Set() const;
    bool is_seller_type_Valid() const;

    QString getTaxCode() const;
    void setTaxCode(const QString &tax_code);
    bool is_tax_code_Set() const;
    bool is_tax_code_Valid() const;

    QString getTrustPolicy() const;
    void setTrustPolicy(const QString &trust_policy);
    bool is_trust_policy_Set() const;
    bool is_trust_policy_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_csc_identification;
    bool m_csc_identification_isSet;
    bool m_csc_identification_isValid;

    QString m_account;
    bool m_account_isSet;
    bool m_account_isValid;

    bool m_allow_hybrid_payments;
    bool m_allow_hybrid_payments_isSet;
    bool m_allow_hybrid_payments_isValid;

    QList<OAIAvailableSalesChannel> m_available_sales_channels;
    bool m_available_sales_channels_isSet;
    bool m_available_sales_channels_isValid;

    QString m_catalog_system_endpoint;
    bool m_catalog_system_endpoint_isSet;
    bool m_catalog_system_endpoint_isValid;

    QString m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    QString m_delivery_policy;
    bool m_delivery_policy_isSet;
    bool m_delivery_policy_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QString m_exchange_return_policy;
    bool m_exchange_return_policy_isSet;
    bool m_exchange_return_policy_isValid;

    QString m_fulfillment_endpoint;
    bool m_fulfillment_endpoint_isSet;
    bool m_fulfillment_endpoint_isValid;

    QString m_fulfillment_seller_id;
    bool m_fulfillment_seller_id_isSet;
    bool m_fulfillment_seller_id_isValid;

    QList<OAIGroups> m_groups;
    bool m_groups_isSet;
    bool m_groups_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_active;
    bool m_is_active_isSet;
    bool m_is_active_isValid;

    bool m_is_better_scope;
    bool m_is_better_scope_isSet;
    bool m_is_better_scope_isValid;

    bool m_is_vtex;
    bool m_is_vtex_isSet;
    bool m_is_vtex_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_password;
    bool m_password_isSet;
    bool m_password_isValid;

    QString m_sales_channel;
    bool m_sales_channel_isSet;
    bool m_sales_channel_isValid;

    double m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    QString m_security_privacy_policy;
    bool m_security_privacy_policy_isSet;
    bool m_security_privacy_policy_isValid;

    QList<OAISellerCommissionConfiguration> m_seller_commission_configuration;
    bool m_seller_commission_configuration_isSet;
    bool m_seller_commission_configuration_isValid;

    qint32 m_seller_type;
    bool m_seller_type_isSet;
    bool m_seller_type_isValid;

    QString m_tax_code;
    bool m_tax_code_isSet;
    bool m_tax_code_isValid;

    QString m_trust_policy;
    bool m_trust_policy_isSet;
    bool m_trust_policy_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpsertSellerRequest)

#endif // OAIUpsertSellerRequest_H
