/**
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMainImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMainImage::OAIMainImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMainImage::OAIMainImage() {
    this->initializeModel();
}

OAIMainImage::~OAIMainImage() {}

void OAIMainImage::initializeModel() {

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_image_label_isSet = false;
    m_image_label_isValid = false;

    m_image_path_isSet = false;
    m_image_path_isValid = false;

    m_image_tag_isSet = false;
    m_image_tag_isValid = false;

    m_image_text_isSet = false;
    m_image_text_isValid = false;

    m_is_main_isSet = false;
    m_is_main_isValid = false;

    m_is_zoom_size_isSet = false;
    m_is_zoom_size_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;
}

void OAIMainImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMainImage::fromJsonObject(QJsonObject json) {

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("ImageId")]);
    m_image_id_isSet = !json[QString("ImageId")].isNull() && m_image_id_isValid;

    m_image_label_isValid = ::OpenAPI::fromJsonValue(m_image_label, json[QString("ImageLabel")]);
    m_image_label_isSet = !json[QString("ImageLabel")].isNull() && m_image_label_isValid;

    m_image_path_isValid = ::OpenAPI::fromJsonValue(m_image_path, json[QString("ImagePath")]);
    m_image_path_isSet = !json[QString("ImagePath")].isNull() && m_image_path_isValid;

    m_image_tag_isValid = ::OpenAPI::fromJsonValue(m_image_tag, json[QString("ImageTag")]);
    m_image_tag_isSet = !json[QString("ImageTag")].isNull() && m_image_tag_isValid;

    m_image_text_isValid = ::OpenAPI::fromJsonValue(m_image_text, json[QString("ImageText")]);
    m_image_text_isSet = !json[QString("ImageText")].isNull() && m_image_text_isValid;

    m_is_main_isValid = ::OpenAPI::fromJsonValue(m_is_main, json[QString("IsMain")]);
    m_is_main_isSet = !json[QString("IsMain")].isNull() && m_is_main_isValid;

    m_is_zoom_size_isValid = ::OpenAPI::fromJsonValue(m_is_zoom_size, json[QString("IsZoomSize")]);
    m_is_zoom_size_isSet = !json[QString("IsZoomSize")].isNull() && m_is_zoom_size_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("LastModified")]);
    m_last_modified_isSet = !json[QString("LastModified")].isNull() && m_last_modified_isValid;
}

QString OAIMainImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMainImage::asJsonObject() const {
    QJsonObject obj;
    if (m_image_id_isSet) {
        obj.insert(QString("ImageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_image_label_isSet) {
        obj.insert(QString("ImageLabel"), ::OpenAPI::toJsonValue(m_image_label));
    }
    if (m_image_path_isSet) {
        obj.insert(QString("ImagePath"), ::OpenAPI::toJsonValue(m_image_path));
    }
    if (m_image_tag_isSet) {
        obj.insert(QString("ImageTag"), ::OpenAPI::toJsonValue(m_image_tag));
    }
    if (m_image_text_isSet) {
        obj.insert(QString("ImageText"), ::OpenAPI::toJsonValue(m_image_text));
    }
    if (m_is_main_isSet) {
        obj.insert(QString("IsMain"), ::OpenAPI::toJsonValue(m_is_main));
    }
    if (m_is_zoom_size_isSet) {
        obj.insert(QString("IsZoomSize"), ::OpenAPI::toJsonValue(m_is_zoom_size));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("LastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    return obj;
}

QString OAIMainImage::getImageId() const {
    return m_image_id;
}
void OAIMainImage::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIMainImage::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIMainImage::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QString OAIMainImage::getImageLabel() const {
    return m_image_label;
}
void OAIMainImage::setImageLabel(const QString &image_label) {
    m_image_label = image_label;
    m_image_label_isSet = true;
}

bool OAIMainImage::is_image_label_Set() const{
    return m_image_label_isSet;
}

bool OAIMainImage::is_image_label_Valid() const{
    return m_image_label_isValid;
}

QString OAIMainImage::getImagePath() const {
    return m_image_path;
}
void OAIMainImage::setImagePath(const QString &image_path) {
    m_image_path = image_path;
    m_image_path_isSet = true;
}

bool OAIMainImage::is_image_path_Set() const{
    return m_image_path_isSet;
}

bool OAIMainImage::is_image_path_Valid() const{
    return m_image_path_isValid;
}

QString OAIMainImage::getImageTag() const {
    return m_image_tag;
}
void OAIMainImage::setImageTag(const QString &image_tag) {
    m_image_tag = image_tag;
    m_image_tag_isSet = true;
}

bool OAIMainImage::is_image_tag_Set() const{
    return m_image_tag_isSet;
}

bool OAIMainImage::is_image_tag_Valid() const{
    return m_image_tag_isValid;
}

QString OAIMainImage::getImageText() const {
    return m_image_text;
}
void OAIMainImage::setImageText(const QString &image_text) {
    m_image_text = image_text;
    m_image_text_isSet = true;
}

bool OAIMainImage::is_image_text_Set() const{
    return m_image_text_isSet;
}

bool OAIMainImage::is_image_text_Valid() const{
    return m_image_text_isValid;
}

bool OAIMainImage::isIsMain() const {
    return m_is_main;
}
void OAIMainImage::setIsMain(const bool &is_main) {
    m_is_main = is_main;
    m_is_main_isSet = true;
}

bool OAIMainImage::is_is_main_Set() const{
    return m_is_main_isSet;
}

bool OAIMainImage::is_is_main_Valid() const{
    return m_is_main_isValid;
}

bool OAIMainImage::isIsZoomSize() const {
    return m_is_zoom_size;
}
void OAIMainImage::setIsZoomSize(const bool &is_zoom_size) {
    m_is_zoom_size = is_zoom_size;
    m_is_zoom_size_isSet = true;
}

bool OAIMainImage::is_is_zoom_size_Set() const{
    return m_is_zoom_size_isSet;
}

bool OAIMainImage::is_is_zoom_size_Valid() const{
    return m_is_zoom_size_isValid;
}

QString OAIMainImage::getLastModified() const {
    return m_last_modified;
}
void OAIMainImage::setLastModified(const QString &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIMainImage::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIMainImage::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

bool OAIMainImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_main_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_zoom_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMainImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_id_isValid && m_image_label_isValid && m_image_path_isValid && m_image_tag_isValid && m_image_text_isValid && m_is_main_isValid && m_is_zoom_size_isValid && m_last_modified_isValid && true;
}

} // namespace OpenAPI
