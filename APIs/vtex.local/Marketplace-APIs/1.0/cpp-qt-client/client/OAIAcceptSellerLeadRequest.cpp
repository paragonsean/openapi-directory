/**
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcceptSellerLeadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcceptSellerLeadRequest::OAIAcceptSellerLeadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcceptSellerLeadRequest::OAIAcceptSellerLeadRequest() {
    this->initializeModel();
}

OAIAcceptSellerLeadRequest::~OAIAcceptSellerLeadRequest() {}

void OAIAcceptSellerLeadRequest::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_accountable_isSet = false;
    m_accountable_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_has_accepted_legal_terms_isSet = false;
    m_has_accepted_legal_terms_isValid = false;

    m_sales_channel_isSet = false;
    m_sales_channel_isValid = false;

    m_seller_account_name_isSet = false;
    m_seller_account_name_isValid = false;

    m_seller_email_isSet = false;
    m_seller_email_isValid = false;

    m_seller_name_isSet = false;
    m_seller_name_isValid = false;

    m_seller_type_isSet = false;
    m_seller_type_isValid = false;
}

void OAIAcceptSellerLeadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcceptSellerLeadRequest::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_accountable_isValid = ::OpenAPI::fromJsonValue(m_accountable, json[QString("accountable")]);
    m_accountable_isSet = !json[QString("accountable")].isNull() && m_accountable_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("document")]);
    m_document_isSet = !json[QString("document")].isNull() && m_document_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_has_accepted_legal_terms_isValid = ::OpenAPI::fromJsonValue(m_has_accepted_legal_terms, json[QString("hasAcceptedLegalTerms")]);
    m_has_accepted_legal_terms_isSet = !json[QString("hasAcceptedLegalTerms")].isNull() && m_has_accepted_legal_terms_isValid;

    m_sales_channel_isValid = ::OpenAPI::fromJsonValue(m_sales_channel, json[QString("salesChannel")]);
    m_sales_channel_isSet = !json[QString("salesChannel")].isNull() && m_sales_channel_isValid;

    m_seller_account_name_isValid = ::OpenAPI::fromJsonValue(m_seller_account_name, json[QString("sellerAccountName")]);
    m_seller_account_name_isSet = !json[QString("sellerAccountName")].isNull() && m_seller_account_name_isValid;

    m_seller_email_isValid = ::OpenAPI::fromJsonValue(m_seller_email, json[QString("sellerEmail")]);
    m_seller_email_isSet = !json[QString("sellerEmail")].isNull() && m_seller_email_isValid;

    m_seller_name_isValid = ::OpenAPI::fromJsonValue(m_seller_name, json[QString("sellerName")]);
    m_seller_name_isSet = !json[QString("sellerName")].isNull() && m_seller_name_isValid;

    m_seller_type_isValid = ::OpenAPI::fromJsonValue(m_seller_type, json[QString("sellerType")]);
    m_seller_type_isSet = !json[QString("sellerType")].isNull() && m_seller_type_isValid;
}

QString OAIAcceptSellerLeadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcceptSellerLeadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_accountable.isSet()) {
        obj.insert(QString("accountable"), ::OpenAPI::toJsonValue(m_accountable));
    }
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_document_isSet) {
        obj.insert(QString("document"), ::OpenAPI::toJsonValue(m_document));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_has_accepted_legal_terms_isSet) {
        obj.insert(QString("hasAcceptedLegalTerms"), ::OpenAPI::toJsonValue(m_has_accepted_legal_terms));
    }
    if (m_sales_channel_isSet) {
        obj.insert(QString("salesChannel"), ::OpenAPI::toJsonValue(m_sales_channel));
    }
    if (m_seller_account_name_isSet) {
        obj.insert(QString("sellerAccountName"), ::OpenAPI::toJsonValue(m_seller_account_name));
    }
    if (m_seller_email_isSet) {
        obj.insert(QString("sellerEmail"), ::OpenAPI::toJsonValue(m_seller_email));
    }
    if (m_seller_name_isSet) {
        obj.insert(QString("sellerName"), ::OpenAPI::toJsonValue(m_seller_name));
    }
    if (m_seller_type_isSet) {
        obj.insert(QString("sellerType"), ::OpenAPI::toJsonValue(m_seller_type));
    }
    return obj;
}

QString OAIAcceptSellerLeadRequest::getAccountId() const {
    return m_account_id;
}
void OAIAcceptSellerLeadRequest::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAcceptSellerLeadRequest::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAcceptSellerLeadRequest::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIAccountable OAIAcceptSellerLeadRequest::getAccountable() const {
    return m_accountable;
}
void OAIAcceptSellerLeadRequest::setAccountable(const OAIAccountable &accountable) {
    m_accountable = accountable;
    m_accountable_isSet = true;
}

bool OAIAcceptSellerLeadRequest::is_accountable_Set() const{
    return m_accountable_isSet;
}

bool OAIAcceptSellerLeadRequest::is_accountable_Valid() const{
    return m_accountable_isValid;
}

OAIAddress OAIAcceptSellerLeadRequest::getAddress() const {
    return m_address;
}
void OAIAcceptSellerLeadRequest::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAcceptSellerLeadRequest::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAcceptSellerLeadRequest::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIAcceptSellerLeadRequest::getDocument() const {
    return m_document;
}
void OAIAcceptSellerLeadRequest::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIAcceptSellerLeadRequest::is_document_Set() const{
    return m_document_isSet;
}

bool OAIAcceptSellerLeadRequest::is_document_Valid() const{
    return m_document_isValid;
}

QString OAIAcceptSellerLeadRequest::getEmail() const {
    return m_email;
}
void OAIAcceptSellerLeadRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAcceptSellerLeadRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAcceptSellerLeadRequest::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIAcceptSellerLeadRequest::isHasAcceptedLegalTerms() const {
    return m_has_accepted_legal_terms;
}
void OAIAcceptSellerLeadRequest::setHasAcceptedLegalTerms(const bool &has_accepted_legal_terms) {
    m_has_accepted_legal_terms = has_accepted_legal_terms;
    m_has_accepted_legal_terms_isSet = true;
}

bool OAIAcceptSellerLeadRequest::is_has_accepted_legal_terms_Set() const{
    return m_has_accepted_legal_terms_isSet;
}

bool OAIAcceptSellerLeadRequest::is_has_accepted_legal_terms_Valid() const{
    return m_has_accepted_legal_terms_isValid;
}

QString OAIAcceptSellerLeadRequest::getSalesChannel() const {
    return m_sales_channel;
}
void OAIAcceptSellerLeadRequest::setSalesChannel(const QString &sales_channel) {
    m_sales_channel = sales_channel;
    m_sales_channel_isSet = true;
}

bool OAIAcceptSellerLeadRequest::is_sales_channel_Set() const{
    return m_sales_channel_isSet;
}

bool OAIAcceptSellerLeadRequest::is_sales_channel_Valid() const{
    return m_sales_channel_isValid;
}

QString OAIAcceptSellerLeadRequest::getSellerAccountName() const {
    return m_seller_account_name;
}
void OAIAcceptSellerLeadRequest::setSellerAccountName(const QString &seller_account_name) {
    m_seller_account_name = seller_account_name;
    m_seller_account_name_isSet = true;
}

bool OAIAcceptSellerLeadRequest::is_seller_account_name_Set() const{
    return m_seller_account_name_isSet;
}

bool OAIAcceptSellerLeadRequest::is_seller_account_name_Valid() const{
    return m_seller_account_name_isValid;
}

QString OAIAcceptSellerLeadRequest::getSellerEmail() const {
    return m_seller_email;
}
void OAIAcceptSellerLeadRequest::setSellerEmail(const QString &seller_email) {
    m_seller_email = seller_email;
    m_seller_email_isSet = true;
}

bool OAIAcceptSellerLeadRequest::is_seller_email_Set() const{
    return m_seller_email_isSet;
}

bool OAIAcceptSellerLeadRequest::is_seller_email_Valid() const{
    return m_seller_email_isValid;
}

QString OAIAcceptSellerLeadRequest::getSellerName() const {
    return m_seller_name;
}
void OAIAcceptSellerLeadRequest::setSellerName(const QString &seller_name) {
    m_seller_name = seller_name;
    m_seller_name_isSet = true;
}

bool OAIAcceptSellerLeadRequest::is_seller_name_Set() const{
    return m_seller_name_isSet;
}

bool OAIAcceptSellerLeadRequest::is_seller_name_Valid() const{
    return m_seller_name_isValid;
}

qint32 OAIAcceptSellerLeadRequest::getSellerType() const {
    return m_seller_type;
}
void OAIAcceptSellerLeadRequest::setSellerType(const qint32 &seller_type) {
    m_seller_type = seller_type;
    m_seller_type_isSet = true;
}

bool OAIAcceptSellerLeadRequest::is_seller_type_Set() const{
    return m_seller_type_isSet;
}

bool OAIAcceptSellerLeadRequest::is_seller_type_Valid() const{
    return m_seller_type_isValid;
}

bool OAIAcceptSellerLeadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accountable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_accepted_legal_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sales_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcceptSellerLeadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_accountable_isValid && m_address_isValid && m_document_isValid && m_email_isValid && m_has_accepted_legal_terms_isValid && m_sales_channel_isValid && m_seller_account_name_isValid && m_seller_email_isValid && m_seller_name_isValid && m_seller_type_isValid && true;
}

} // namespace OpenAPI
