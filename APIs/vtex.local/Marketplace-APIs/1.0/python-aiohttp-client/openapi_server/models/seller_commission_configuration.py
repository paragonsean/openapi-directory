# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SellerCommissionConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories_commission_configuration: List[str]=[], freight_commission_percentage: float=2.43, product_commission_percentage: float=9.85):
        """SellerCommissionConfiguration - a model defined in OpenAPI

        :param categories_commission_configuration: The categories_commission_configuration of this SellerCommissionConfiguration.
        :param freight_commission_percentage: The freight_commission_percentage of this SellerCommissionConfiguration.
        :param product_commission_percentage: The product_commission_percentage of this SellerCommissionConfiguration.
        """
        self.openapi_types = {
            'categories_commission_configuration': List[str],
            'freight_commission_percentage': float,
            'product_commission_percentage': float
        }

        self.attribute_map = {
            'categories_commission_configuration': 'categoriesCommissionConfiguration',
            'freight_commission_percentage': 'freightCommissionPercentage',
            'product_commission_percentage': 'productCommissionPercentage'
        }

        self._categories_commission_configuration = categories_commission_configuration
        self._freight_commission_percentage = freight_commission_percentage
        self._product_commission_percentage = product_commission_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SellerCommissionConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SellerCommissionConfiguration of this SellerCommissionConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories_commission_configuration(self):
        """Gets the categories_commission_configuration of this SellerCommissionConfiguration.

        Array with percentage of the comission applied to categories in decimals.

        :return: The categories_commission_configuration of this SellerCommissionConfiguration.
        :rtype: List[str]
        """
        return self._categories_commission_configuration

    @categories_commission_configuration.setter
    def categories_commission_configuration(self, categories_commission_configuration):
        """Sets the categories_commission_configuration of this SellerCommissionConfiguration.

        Array with percentage of the comission applied to categories in decimals.

        :param categories_commission_configuration: The categories_commission_configuration of this SellerCommissionConfiguration.
        :type categories_commission_configuration: List[str]
        """
        if categories_commission_configuration is None:
            raise ValueError("Invalid value for `categories_commission_configuration`, must not be `None`")

        self._categories_commission_configuration = categories_commission_configuration

    @property
    def freight_commission_percentage(self):
        """Gets the freight_commission_percentage of this SellerCommissionConfiguration.

        Percentage of the comission applied to the freight in decimals.

        :return: The freight_commission_percentage of this SellerCommissionConfiguration.
        :rtype: float
        """
        return self._freight_commission_percentage

    @freight_commission_percentage.setter
    def freight_commission_percentage(self, freight_commission_percentage):
        """Sets the freight_commission_percentage of this SellerCommissionConfiguration.

        Percentage of the comission applied to the freight in decimals.

        :param freight_commission_percentage: The freight_commission_percentage of this SellerCommissionConfiguration.
        :type freight_commission_percentage: float
        """
        if freight_commission_percentage is None:
            raise ValueError("Invalid value for `freight_commission_percentage`, must not be `None`")

        self._freight_commission_percentage = freight_commission_percentage

    @property
    def product_commission_percentage(self):
        """Gets the product_commission_percentage of this SellerCommissionConfiguration.

        Percentage of the comission applied to the product in decimals.

        :return: The product_commission_percentage of this SellerCommissionConfiguration.
        :rtype: float
        """
        return self._product_commission_percentage

    @product_commission_percentage.setter
    def product_commission_percentage(self, product_commission_percentage):
        """Sets the product_commission_percentage of this SellerCommissionConfiguration.

        Percentage of the comission applied to the product in decimals.

        :param product_commission_percentage: The product_commission_percentage of this SellerCommissionConfiguration.
        :type product_commission_percentage: float
        """
        if product_commission_percentage is None:
            raise ValueError("Invalid value for `product_commission_percentage`, must not be `None`")

        self._product_commission_percentage = product_commission_percentage
