# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.main_image import MainImage
from openapi_server.models.offer import Offer
from openapi_server import util


class Sku2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ean_id: str='768655', is_active: bool=True, main_image: List[MainImage]=None, name: str='Color: Black', name_complete: str='Name of the Product - 123 Color: Black', offers: List[Offer]=None, ref_id: str='1234', sku_id: str='1070268'):
        """Sku2 - a model defined in OpenAPI

        :param ean_id: The ean_id of this Sku2.
        :param is_active: The is_active of this Sku2.
        :param main_image: The main_image of this Sku2.
        :param name: The name of this Sku2.
        :param name_complete: The name_complete of this Sku2.
        :param offers: The offers of this Sku2.
        :param ref_id: The ref_id of this Sku2.
        :param sku_id: The sku_id of this Sku2.
        """
        self.openapi_types = {
            'ean_id': str,
            'is_active': bool,
            'main_image': List[MainImage],
            'name': str,
            'name_complete': str,
            'offers': List[Offer],
            'ref_id': str,
            'sku_id': str
        }

        self.attribute_map = {
            'ean_id': 'EanId',
            'is_active': 'IsActive',
            'main_image': 'MainImage',
            'name': 'Name',
            'name_complete': 'NameComplete',
            'offers': 'Offers',
            'ref_id': 'RefId',
            'sku_id': 'SkuId'
        }

        self._ean_id = ean_id
        self._is_active = is_active
        self._main_image = main_image
        self._name = name
        self._name_complete = name_complete
        self._offers = offers
        self._ref_id = ref_id
        self._sku_id = sku_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sku2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sku2 of this Sku2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ean_id(self):
        """Gets the ean_id of this Sku2.

        EAN's unique identifier number

        :return: The ean_id of this Sku2.
        :rtype: str
        """
        return self._ean_id

    @ean_id.setter
    def ean_id(self, ean_id):
        """Sets the ean_id of this Sku2.

        EAN's unique identifier number

        :param ean_id: The ean_id of this Sku2.
        :type ean_id: str
        """
        if ean_id is None:
            raise ValueError("Invalid value for `ean_id`, must not be `None`")

        self._ean_id = ean_id

    @property
    def is_active(self):
        """Gets the is_active of this Sku2.

        Whether the SKU is active in the sales channel (true), or not (false).

        :return: The is_active of this Sku2.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Sku2.

        Whether the SKU is active in the sales channel (true), or not (false).

        :param is_active: The is_active of this Sku2.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def main_image(self):
        """Gets the main_image of this Sku2.

        Main image's information.

        :return: The main_image of this Sku2.
        :rtype: List[MainImage]
        """
        return self._main_image

    @main_image.setter
    def main_image(self, main_image):
        """Sets the main_image of this Sku2.

        Main image's information.

        :param main_image: The main_image of this Sku2.
        :type main_image: List[MainImage]
        """
        if main_image is None:
            raise ValueError("Invalid value for `main_image`, must not be `None`")

        self._main_image = main_image

    @property
    def name(self):
        """Gets the name of this Sku2.

        Summarized name of the SKU

        :return: The name of this Sku2.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sku2.

        Summarized name of the SKU

        :param name: The name of this Sku2.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def name_complete(self):
        """Gets the name_complete of this Sku2.

        Complete name of the SKU

        :return: The name_complete of this Sku2.
        :rtype: str
        """
        return self._name_complete

    @name_complete.setter
    def name_complete(self, name_complete):
        """Sets the name_complete of this Sku2.

        Complete name of the SKU

        :param name_complete: The name_complete of this Sku2.
        :type name_complete: str
        """
        if name_complete is None:
            raise ValueError("Invalid value for `name_complete`, must not be `None`")

        self._name_complete = name_complete

    @property
    def offers(self):
        """Gets the offers of this Sku2.

        Array with offers

        :return: The offers of this Sku2.
        :rtype: List[Offer]
        """
        return self._offers

    @offers.setter
    def offers(self, offers):
        """Sets the offers of this Sku2.

        Array with offers

        :param offers: The offers of this Sku2.
        :type offers: List[Offer]
        """
        if offers is None:
            raise ValueError("Invalid value for `offers`, must not be `None`")

        self._offers = offers

    @property
    def ref_id(self):
        """Gets the ref_id of this Sku2.

        SKU's Reference ID

        :return: The ref_id of this Sku2.
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this Sku2.

        SKU's Reference ID

        :param ref_id: The ref_id of this Sku2.
        :type ref_id: str
        """
        if ref_id is None:
            raise ValueError("Invalid value for `ref_id`, must not be `None`")

        self._ref_id = ref_id

    @property
    def sku_id(self):
        """Gets the sku_id of this Sku2.

        SKU's unique identifier number

        :return: The sku_id of this Sku2.
        :rtype: str
        """
        return self._sku_id

    @sku_id.setter
    def sku_id(self, sku_id):
        """Sets the sku_id of this Sku2.

        SKU's unique identifier number

        :param sku_id: The sku_id of this Sku2.
        :type sku_id: str
        """
        if sku_id is None:
            raise ValueError("Invalid value for `sku_id`, must not be `None`")

        self._sku_id = sku_id
