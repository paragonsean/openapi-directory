# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sku2 import Sku2
from openapi_server import util


class GetMatchedOffersResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand_id: int=2004291, category_id: int=1563, last_modified: str='2021-05-06T21:37:24.262529', product_id: str='941947', product_name: str='Name of the Product - 123', skus: List[Sku2]=None):
        """GetMatchedOffersResponse - a model defined in OpenAPI

        :param brand_id: The brand_id of this GetMatchedOffersResponse.
        :param category_id: The category_id of this GetMatchedOffersResponse.
        :param last_modified: The last_modified of this GetMatchedOffersResponse.
        :param product_id: The product_id of this GetMatchedOffersResponse.
        :param product_name: The product_name of this GetMatchedOffersResponse.
        :param skus: The skus of this GetMatchedOffersResponse.
        """
        self.openapi_types = {
            'brand_id': int,
            'category_id': int,
            'last_modified': str,
            'product_id': str,
            'product_name': str,
            'skus': List[Sku2]
        }

        self.attribute_map = {
            'brand_id': 'BrandId',
            'category_id': 'CategoryId',
            'last_modified': 'LastModified',
            'product_id': 'ProductId',
            'product_name': 'ProductName',
            'skus': 'Skus'
        }

        self._brand_id = brand_id
        self._category_id = category_id
        self._last_modified = last_modified
        self._product_id = product_id
        self._product_name = product_name
        self._skus = skus

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMatchedOffersResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getMatchedOffersResponse of this GetMatchedOffersResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand_id(self):
        """Gets the brand_id of this GetMatchedOffersResponse.

        Offer's brand ID that the product belongs to, configured in the Catalog. It should be the marketplace's brand chosen for the offer to be matched with.

        :return: The brand_id of this GetMatchedOffersResponse.
        :rtype: int
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this GetMatchedOffersResponse.

        Offer's brand ID that the product belongs to, configured in the Catalog. It should be the marketplace's brand chosen for the offer to be matched with.

        :param brand_id: The brand_id of this GetMatchedOffersResponse.
        :type brand_id: int
        """
        if brand_id is None:
            raise ValueError("Invalid value for `brand_id`, must not be `None`")

        self._brand_id = brand_id

    @property
    def category_id(self):
        """Gets the category_id of this GetMatchedOffersResponse.

        Offer's Category ID that the product belongs to, configured in the Catalog. It should be the marketplace's category chosen for the offer to be matched with.

        :return: The category_id of this GetMatchedOffersResponse.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this GetMatchedOffersResponse.

        Offer's Category ID that the product belongs to, configured in the Catalog. It should be the marketplace's category chosen for the offer to be matched with.

        :param category_id: The category_id of this GetMatchedOffersResponse.
        :type category_id: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def last_modified(self):
        """Gets the last_modified of this GetMatchedOffersResponse.

        Last date the offer was modified.

        :return: The last_modified of this GetMatchedOffersResponse.
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this GetMatchedOffersResponse.

        Last date the offer was modified.

        :param last_modified: The last_modified of this GetMatchedOffersResponse.
        :type last_modified: str
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")

        self._last_modified = last_modified

    @property
    def product_id(self):
        """Gets the product_id of this GetMatchedOffersResponse.

        A string that identifies the seller's product. This is the ID that the marketplace will use for all references to this product.

        :return: The product_id of this GetMatchedOffersResponse.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this GetMatchedOffersResponse.

        A string that identifies the seller's product. This is the ID that the marketplace will use for all references to this product.

        :param product_id: The product_id of this GetMatchedOffersResponse.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this GetMatchedOffersResponse.

        Name of the offer's product.

        :return: The product_name of this GetMatchedOffersResponse.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this GetMatchedOffersResponse.

        Name of the offer's product.

        :param product_name: The product_name of this GetMatchedOffersResponse.
        :type product_name: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")

        self._product_name = product_name

    @property
    def skus(self):
        """Gets the skus of this GetMatchedOffersResponse.

        Array of SKUs in the offer.

        :return: The skus of this GetMatchedOffersResponse.
        :rtype: List[Sku2]
        """
        return self._skus

    @skus.setter
    def skus(self, skus):
        """Sets the skus of this GetMatchedOffersResponse.

        Array of SKUs in the offer.

        :param skus: The skus of this GetMatchedOffersResponse.
        :type skus: List[Sku2]
        """
        if skus is None:
            raise ValueError("Invalid value for `skus`, must not be `None`")

        self._skus = skus
