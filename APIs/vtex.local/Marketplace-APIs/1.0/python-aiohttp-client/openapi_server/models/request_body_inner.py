# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequestBodyInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation: str='replace', path: str='/field', value: bool=False):
        """RequestBodyInner - a model defined in OpenAPI

        :param operation: The operation of this RequestBodyInner.
        :param path: The path of this RequestBodyInner.
        :param value: The value of this RequestBodyInner.
        """
        self.openapi_types = {
            'operation': str,
            'path': str,
            'value': bool
        }

        self.attribute_map = {
            'operation': 'operation',
            'path': 'path',
            'value': 'value'
        }

        self._operation = operation
        self._path = path
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestBodyInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request_body_inner of this RequestBodyInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation(self):
        """Gets the operation of this RequestBodyInner.

        The action being performed, which is always going to be `replace`.

        :return: The operation of this RequestBodyInner.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this RequestBodyInner.

        The action being performed, which is always going to be `replace`.

        :param operation: The operation of this RequestBodyInner.
        :type operation: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")

        self._operation = operation

    @property
    def path(self):
        """Gets the path of this RequestBodyInner.

        The path in which the value is being updated. It follows the standardized format `/{field}`, where `{field}` is the path's name.

        :return: The path of this RequestBodyInner.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RequestBodyInner.

        The path in which the value is being updated. It follows the standardized format `/{field}`, where `{field}` is the path's name.

        :param path: The path of this RequestBodyInner.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def value(self):
        """Gets the value of this RequestBodyInner.

        The value that is being updated. Notice that the type will depend on the path that is being updated.

        :return: The value of this RequestBodyInner.
        :rtype: bool
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RequestBodyInner.

        The value that is being updated. Notice that the type will depend on the path that is being updated.

        :param value: The value of this RequestBodyInner.
        :type value: bool
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
