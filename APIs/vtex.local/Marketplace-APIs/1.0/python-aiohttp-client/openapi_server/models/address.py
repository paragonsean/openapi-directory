# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str='Rio de Janeiro', complement: str='Appartment 1234', neighborhood: str='VTEX quarter', number: str='25', postalcode: str='12345678', state: str='RJ', street: str='VTEX street'):
        """Address - a model defined in OpenAPI

        :param city: The city of this Address.
        :param complement: The complement of this Address.
        :param neighborhood: The neighborhood of this Address.
        :param number: The number of this Address.
        :param postalcode: The postalcode of this Address.
        :param state: The state of this Address.
        :param street: The street of this Address.
        """
        self.openapi_types = {
            'city': str,
            'complement': str,
            'neighborhood': str,
            'number': str,
            'postalcode': str,
            'state': str,
            'street': str
        }

        self.attribute_map = {
            'city': 'city',
            'complement': 'complement',
            'neighborhood': 'neighborhood',
            'number': 'number',
            'postalcode': 'postalcode',
            'state': 'state',
            'street': 'street'
        }

        self._city = city
        self._complement = complement
        self._neighborhood = neighborhood
        self._number = number
        self._postalcode = postalcode
        self._state = state
        self._street = street

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Address.

        City name, from the seller's address.

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        City name, from the seller's address.

        :param city: The city of this Address.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def complement(self):
        """Gets the complement of this Address.

        Seller's address complement.

        :return: The complement of this Address.
        :rtype: str
        """
        return self._complement

    @complement.setter
    def complement(self, complement):
        """Sets the complement of this Address.

        Seller's address complement.

        :param complement: The complement of this Address.
        :type complement: str
        """
        if complement is None:
            raise ValueError("Invalid value for `complement`, must not be `None`")

        self._complement = complement

    @property
    def neighborhood(self):
        """Gets the neighborhood of this Address.

        Seller's address neighborhood.

        :return: The neighborhood of this Address.
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood):
        """Sets the neighborhood of this Address.

        Seller's address neighborhood.

        :param neighborhood: The neighborhood of this Address.
        :type neighborhood: str
        """
        if neighborhood is None:
            raise ValueError("Invalid value for `neighborhood`, must not be `None`")

        self._neighborhood = neighborhood

    @property
    def number(self):
        """Gets the number of this Address.

        Street's number, from the seller's address.

        :return: The number of this Address.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Address.

        Street's number, from the seller's address.

        :param number: The number of this Address.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def postalcode(self):
        """Gets the postalcode of this Address.

        Postal code from the seller's address.

        :return: The postalcode of this Address.
        :rtype: str
        """
        return self._postalcode

    @postalcode.setter
    def postalcode(self, postalcode):
        """Sets the postalcode of this Address.

        Postal code from the seller's address.

        :param postalcode: The postalcode of this Address.
        :type postalcode: str
        """
        if postalcode is None:
            raise ValueError("Invalid value for `postalcode`, must not be `None`")

        self._postalcode = postalcode

    @property
    def state(self):
        """Gets the state of this Address.

        State, from the seller's address.

        :return: The state of this Address.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Address.

        State, from the seller's address.

        :param state: The state of this Address.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def street(self):
        """Gets the street of this Address.

        Street information, from the seller's address.

        :return: The street of this Address.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Address.

        Street information, from the seller's address.

        :param street: The street of this Address.
        :type street: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")

        self._street = street
