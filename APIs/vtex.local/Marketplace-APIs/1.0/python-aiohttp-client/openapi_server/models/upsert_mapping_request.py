# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpsertMappingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, marketplace_sales_channel: int=1, seller_channel: str='GCB'):
        """UpsertMappingRequest - a model defined in OpenAPI

        :param marketplace_sales_channel: The marketplace_sales_channel of this UpsertMappingRequest.
        :param seller_channel: The seller_channel of this UpsertMappingRequest.
        """
        self.openapi_types = {
            'marketplace_sales_channel': int,
            'seller_channel': str
        }

        self.attribute_map = {
            'marketplace_sales_channel': 'marketplaceSalesChannel',
            'seller_channel': 'sellerChannel'
        }

        self._marketplace_sales_channel = marketplace_sales_channel
        self._seller_channel = seller_channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpsertMappingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpsertMappingRequest of this UpsertMappingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def marketplace_sales_channel(self):
        """Gets the marketplace_sales_channel of this UpsertMappingRequest.

        Marketplace's sales channel that will be associated to the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187).

        :return: The marketplace_sales_channel of this UpsertMappingRequest.
        :rtype: int
        """
        return self._marketplace_sales_channel

    @marketplace_sales_channel.setter
    def marketplace_sales_channel(self, marketplace_sales_channel):
        """Sets the marketplace_sales_channel of this UpsertMappingRequest.

        Marketplace's sales channel that will be associated to the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187).

        :param marketplace_sales_channel: The marketplace_sales_channel of this UpsertMappingRequest.
        :type marketplace_sales_channel: int
        """
        if marketplace_sales_channel is None:
            raise ValueError("Invalid value for `marketplace_sales_channel`, must not be `None`")

        self._marketplace_sales_channel = marketplace_sales_channel

    @property
    def seller_channel(self):
        """Gets the seller_channel of this UpsertMappingRequest.

        Seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) that will be associated with the marketplace's sales channel. Through the affiliate, the seller determines which of his sales channel will be used for the mapping.

        :return: The seller_channel of this UpsertMappingRequest.
        :rtype: str
        """
        return self._seller_channel

    @seller_channel.setter
    def seller_channel(self, seller_channel):
        """Sets the seller_channel of this UpsertMappingRequest.

        Seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) that will be associated with the marketplace's sales channel. Through the affiliate, the seller determines which of his sales channel will be used for the mapping.

        :param seller_channel: The seller_channel of this UpsertMappingRequest.
        :type seller_channel: str
        """
        if seller_channel is None:
            raise ValueError("Invalid value for `seller_channel`, must not be `None`")

        self._seller_channel = seller_channel
