# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OffersPerSalesChannel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_quantity: int=30, list_price: int=1200, price: int=1300, price_without_discount: int=1400, sale_channel: int=1):
        """OffersPerSalesChannel - a model defined in OpenAPI

        :param available_quantity: The available_quantity of this OffersPerSalesChannel.
        :param list_price: The list_price of this OffersPerSalesChannel.
        :param price: The price of this OffersPerSalesChannel.
        :param price_without_discount: The price_without_discount of this OffersPerSalesChannel.
        :param sale_channel: The sale_channel of this OffersPerSalesChannel.
        """
        self.openapi_types = {
            'available_quantity': int,
            'list_price': int,
            'price': int,
            'price_without_discount': int,
            'sale_channel': int
        }

        self.attribute_map = {
            'available_quantity': 'AvailableQuantity',
            'list_price': 'ListPrice',
            'price': 'Price',
            'price_without_discount': 'PriceWithoutDiscount',
            'sale_channel': 'SaleChannel'
        }

        self._available_quantity = available_quantity
        self._list_price = list_price
        self._price = price
        self._price_without_discount = price_without_discount
        self._sale_channel = sale_channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OffersPerSalesChannel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OffersPerSalesChannel of this OffersPerSalesChannel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_quantity(self):
        """Gets the available_quantity of this OffersPerSalesChannel.

        Available SKU stock quantity

        :return: The available_quantity of this OffersPerSalesChannel.
        :rtype: int
        """
        return self._available_quantity

    @available_quantity.setter
    def available_quantity(self, available_quantity):
        """Sets the available_quantity of this OffersPerSalesChannel.

        Available SKU stock quantity

        :param available_quantity: The available_quantity of this OffersPerSalesChannel.
        :type available_quantity: int
        """
        if available_quantity is None:
            raise ValueError("Invalid value for `available_quantity`, must not be `None`")

        self._available_quantity = available_quantity

    @property
    def list_price(self):
        """Gets the list_price of this OffersPerSalesChannel.

        SKU's suggested selling price

        :return: The list_price of this OffersPerSalesChannel.
        :rtype: int
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this OffersPerSalesChannel.

        SKU's suggested selling price

        :param list_price: The list_price of this OffersPerSalesChannel.
        :type list_price: int
        """
        if list_price is None:
            raise ValueError("Invalid value for `list_price`, must not be `None`")

        self._list_price = list_price

    @property
    def price(self):
        """Gets the price of this OffersPerSalesChannel.

        SKU's price.

        :return: The price of this OffersPerSalesChannel.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OffersPerSalesChannel.

        SKU's price.

        :param price: The price of this OffersPerSalesChannel.
        :type price: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def price_without_discount(self):
        """Gets the price_without_discount of this OffersPerSalesChannel.

        SKU's price without discount applied.

        :return: The price_without_discount of this OffersPerSalesChannel.
        :rtype: int
        """
        return self._price_without_discount

    @price_without_discount.setter
    def price_without_discount(self, price_without_discount):
        """Sets the price_without_discount of this OffersPerSalesChannel.

        SKU's price without discount applied.

        :param price_without_discount: The price_without_discount of this OffersPerSalesChannel.
        :type price_without_discount: int
        """
        if price_without_discount is None:
            raise ValueError("Invalid value for `price_without_discount`, must not be `None`")

        self._price_without_discount = price_without_discount

    @property
    def sale_channel(self):
        """Gets the sale_channel of this OffersPerSalesChannel.

        The sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) of the SKU.

        :return: The sale_channel of this OffersPerSalesChannel.
        :rtype: int
        """
        return self._sale_channel

    @sale_channel.setter
    def sale_channel(self, sale_channel):
        """Sets the sale_channel of this OffersPerSalesChannel.

        The sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) of the SKU.

        :param sale_channel: The sale_channel of this OffersPerSalesChannel.
        :type sale_channel: int
        """
        if sale_channel is None:
            raise ValueError("Invalid value for `sale_channel`, must not be `None`")

        self._sale_channel = sale_channel
