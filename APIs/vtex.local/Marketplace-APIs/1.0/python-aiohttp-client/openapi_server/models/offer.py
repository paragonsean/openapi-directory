# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.offers_per_sales_channel import OffersPerSalesChannel
from openapi_server import util


class Offer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_sales_channels: str='1', offers_per_sales_channel: List[OffersPerSalesChannel]=None, seller_id: str='1', seller_sku_id: str='1070268'):
        """Offer - a model defined in OpenAPI

        :param available_sales_channels: The available_sales_channels of this Offer.
        :param offers_per_sales_channel: The offers_per_sales_channel of this Offer.
        :param seller_id: The seller_id of this Offer.
        :param seller_sku_id: The seller_sku_id of this Offer.
        """
        self.openapi_types = {
            'available_sales_channels': str,
            'offers_per_sales_channel': List[OffersPerSalesChannel],
            'seller_id': str,
            'seller_sku_id': str
        }

        self.attribute_map = {
            'available_sales_channels': 'AvailableSalesChannels',
            'offers_per_sales_channel': 'OffersPerSalesChannel',
            'seller_id': 'SellerId',
            'seller_sku_id': 'SellerSkuId'
        }

        self._available_sales_channels = available_sales_channels
        self._offers_per_sales_channel = offers_per_sales_channel
        self._seller_id = seller_id
        self._seller_sku_id = seller_sku_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Offer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Offer of this Offer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_sales_channels(self):
        """Gets the available_sales_channels of this Offer.

        The sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) ID in which the SKU is available.

        :return: The available_sales_channels of this Offer.
        :rtype: str
        """
        return self._available_sales_channels

    @available_sales_channels.setter
    def available_sales_channels(self, available_sales_channels):
        """Sets the available_sales_channels of this Offer.

        The sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) ID in which the SKU is available.

        :param available_sales_channels: The available_sales_channels of this Offer.
        :type available_sales_channels: str
        """
        if available_sales_channels is None:
            raise ValueError("Invalid value for `available_sales_channels`, must not be `None`")

        self._available_sales_channels = available_sales_channels

    @property
    def offers_per_sales_channel(self):
        """Gets the offers_per_sales_channel of this Offer.

        

        :return: The offers_per_sales_channel of this Offer.
        :rtype: List[OffersPerSalesChannel]
        """
        return self._offers_per_sales_channel

    @offers_per_sales_channel.setter
    def offers_per_sales_channel(self, offers_per_sales_channel):
        """Sets the offers_per_sales_channel of this Offer.

        

        :param offers_per_sales_channel: The offers_per_sales_channel of this Offer.
        :type offers_per_sales_channel: List[OffersPerSalesChannel]
        """
        if offers_per_sales_channel is None:
            raise ValueError("Invalid value for `offers_per_sales_channel`, must not be `None`")

        self._offers_per_sales_channel = offers_per_sales_channel

    @property
    def seller_id(self):
        """Gets the seller_id of this Offer.

        ID of the seller in the marketplace. This ID must be created by the marketplace.

        :return: The seller_id of this Offer.
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this Offer.

        ID of the seller in the marketplace. This ID must be created by the marketplace.

        :param seller_id: The seller_id of this Offer.
        :type seller_id: str
        """
        if seller_id is None:
            raise ValueError("Invalid value for `seller_id`, must not be `None`")

        self._seller_id = seller_id

    @property
    def seller_sku_id(self):
        """Gets the seller_sku_id of this Offer.

        A string that identifies the SKU in the seller. This is the ID that the marketplace will use for future references to this SKU, such as price and inventory notifications.

        :return: The seller_sku_id of this Offer.
        :rtype: str
        """
        return self._seller_sku_id

    @seller_sku_id.setter
    def seller_sku_id(self, seller_sku_id):
        """Sets the seller_sku_id of this Offer.

        A string that identifies the SKU in the seller. This is the ID that the marketplace will use for future references to this SKU, such as price and inventory notifications.

        :param seller_sku_id: The seller_sku_id of this Offer.
        :type seller_sku_id: str
        """
        if seller_sku_id is None:
            raise ValueError("Invalid value for `seller_sku_id`, must not be `None`")

        self._seller_sku_id = seller_sku_id
