# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BulkUpsertSellerCommissionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_full_path: str='Appliances/Oven', category_id: str='6', freight_commission_percentage: float=2.43, product_commission_percentage: float=9.85):
        """BulkUpsertSellerCommissionsRequest - a model defined in OpenAPI

        :param category_full_path: The category_full_path of this BulkUpsertSellerCommissionsRequest.
        :param category_id: The category_id of this BulkUpsertSellerCommissionsRequest.
        :param freight_commission_percentage: The freight_commission_percentage of this BulkUpsertSellerCommissionsRequest.
        :param product_commission_percentage: The product_commission_percentage of this BulkUpsertSellerCommissionsRequest.
        """
        self.openapi_types = {
            'category_full_path': str,
            'category_id': str,
            'freight_commission_percentage': float,
            'product_commission_percentage': float
        }

        self.attribute_map = {
            'category_full_path': 'categoryFullPath',
            'category_id': 'categoryId',
            'freight_commission_percentage': 'freightCommissionPercentage',
            'product_commission_percentage': 'productCommissionPercentage'
        }

        self._category_full_path = category_full_path
        self._category_id = category_id
        self._freight_commission_percentage = freight_commission_percentage
        self._product_commission_percentage = product_commission_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BulkUpsertSellerCommissionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BulkUpsertSellerCommissionsRequest of this BulkUpsertSellerCommissionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_full_path(self):
        """Gets the category_full_path of this BulkUpsertSellerCommissionsRequest.

        Full path to the SKU's category. It should be written as {department}/{category}. For example: if the department is **Appliances** and the category is **Oven**, the full path should be 'Appliances/Oven'.

        :return: The category_full_path of this BulkUpsertSellerCommissionsRequest.
        :rtype: str
        """
        return self._category_full_path

    @category_full_path.setter
    def category_full_path(self, category_full_path):
        """Sets the category_full_path of this BulkUpsertSellerCommissionsRequest.

        Full path to the SKU's category. It should be written as {department}/{category}. For example: if the department is **Appliances** and the category is **Oven**, the full path should be 'Appliances/Oven'.

        :param category_full_path: The category_full_path of this BulkUpsertSellerCommissionsRequest.
        :type category_full_path: str
        """
        if category_full_path is None:
            raise ValueError("Invalid value for `category_full_path`, must not be `None`")

        self._category_full_path = category_full_path

    @property
    def category_id(self):
        """Gets the category_id of this BulkUpsertSellerCommissionsRequest.

        Marketplace's Category ID that the product belongs to, configured in the Catalog.

        :return: The category_id of this BulkUpsertSellerCommissionsRequest.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this BulkUpsertSellerCommissionsRequest.

        Marketplace's Category ID that the product belongs to, configured in the Catalog.

        :param category_id: The category_id of this BulkUpsertSellerCommissionsRequest.
        :type category_id: str
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")

        self._category_id = category_id

    @property
    def freight_commission_percentage(self):
        """Gets the freight_commission_percentage of this BulkUpsertSellerCommissionsRequest.

        Percentage of the comission applied to the freight in decimals.

        :return: The freight_commission_percentage of this BulkUpsertSellerCommissionsRequest.
        :rtype: float
        """
        return self._freight_commission_percentage

    @freight_commission_percentage.setter
    def freight_commission_percentage(self, freight_commission_percentage):
        """Sets the freight_commission_percentage of this BulkUpsertSellerCommissionsRequest.

        Percentage of the comission applied to the freight in decimals.

        :param freight_commission_percentage: The freight_commission_percentage of this BulkUpsertSellerCommissionsRequest.
        :type freight_commission_percentage: float
        """
        if freight_commission_percentage is None:
            raise ValueError("Invalid value for `freight_commission_percentage`, must not be `None`")

        self._freight_commission_percentage = freight_commission_percentage

    @property
    def product_commission_percentage(self):
        """Gets the product_commission_percentage of this BulkUpsertSellerCommissionsRequest.

        Percentage of the comission applied to the product in decimals.

        :return: The product_commission_percentage of this BulkUpsertSellerCommissionsRequest.
        :rtype: float
        """
        return self._product_commission_percentage

    @product_commission_percentage.setter
    def product_commission_percentage(self, product_commission_percentage):
        """Sets the product_commission_percentage of this BulkUpsertSellerCommissionsRequest.

        Percentage of the comission applied to the product in decimals.

        :param product_commission_percentage: The product_commission_percentage of this BulkUpsertSellerCommissionsRequest.
        :type product_commission_percentage: float
        """
        if product_commission_percentage is None:
            raise ValueError("Invalid value for `product_commission_percentage`, must not be `None`")

        self._product_commission_percentage = product_commission_percentage
