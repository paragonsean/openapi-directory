# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.accountable import Accountable
from openapi_server.models.address import Address
from openapi_server import util


class CreateSellerLeadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str='5fb38ace-d95e-45ad-970d-ee97cce9fbcd', accountable: Accountable=None, address: Address=None, document: str='12345671000', email: str='email@email.com', has_accepted_legal_terms: bool=True, sales_channel: str='1', seller_account_name: str='seller123', seller_email: str='selleremail@email.com', seller_name: str='Seller Name', seller_type: int=1):
        """CreateSellerLeadRequest - a model defined in OpenAPI

        :param account_id: The account_id of this CreateSellerLeadRequest.
        :param accountable: The accountable of this CreateSellerLeadRequest.
        :param address: The address of this CreateSellerLeadRequest.
        :param document: The document of this CreateSellerLeadRequest.
        :param email: The email of this CreateSellerLeadRequest.
        :param has_accepted_legal_terms: The has_accepted_legal_terms of this CreateSellerLeadRequest.
        :param sales_channel: The sales_channel of this CreateSellerLeadRequest.
        :param seller_account_name: The seller_account_name of this CreateSellerLeadRequest.
        :param seller_email: The seller_email of this CreateSellerLeadRequest.
        :param seller_name: The seller_name of this CreateSellerLeadRequest.
        :param seller_type: The seller_type of this CreateSellerLeadRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'accountable': Accountable,
            'address': Address,
            'document': str,
            'email': str,
            'has_accepted_legal_terms': bool,
            'sales_channel': str,
            'seller_account_name': str,
            'seller_email': str,
            'seller_name': str,
            'seller_type': int
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'accountable': 'accountable',
            'address': 'address',
            'document': 'document',
            'email': 'email',
            'has_accepted_legal_terms': 'hasAcceptedLegalTerms',
            'sales_channel': 'salesChannel',
            'seller_account_name': 'sellerAccountName',
            'seller_email': 'sellerEmail',
            'seller_name': 'sellerName',
            'seller_type': 'sellerType'
        }

        self._account_id = account_id
        self._accountable = accountable
        self._address = address
        self._document = document
        self._email = email
        self._has_accepted_legal_terms = has_accepted_legal_terms
        self._sales_channel = sales_channel
        self._seller_account_name = seller_account_name
        self._seller_email = seller_email
        self._seller_name = seller_name
        self._seller_type = seller_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSellerLeadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSellerLeadRequest of this CreateSellerLeadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CreateSellerLeadRequest.

        Marketplace's account ID

        :return: The account_id of this CreateSellerLeadRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateSellerLeadRequest.

        Marketplace's account ID

        :param account_id: The account_id of this CreateSellerLeadRequest.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def accountable(self):
        """Gets the accountable of this CreateSellerLeadRequest.


        :return: The accountable of this CreateSellerLeadRequest.
        :rtype: Accountable
        """
        return self._accountable

    @accountable.setter
    def accountable(self, accountable):
        """Sets the accountable of this CreateSellerLeadRequest.


        :param accountable: The accountable of this CreateSellerLeadRequest.
        :type accountable: Accountable
        """
        if accountable is None:
            raise ValueError("Invalid value for `accountable`, must not be `None`")

        self._accountable = accountable

    @property
    def address(self):
        """Gets the address of this CreateSellerLeadRequest.


        :return: The address of this CreateSellerLeadRequest.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CreateSellerLeadRequest.


        :param address: The address of this CreateSellerLeadRequest.
        :type address: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def document(self):
        """Gets the document of this CreateSellerLeadRequest.

        Company's legal document code.

        :return: The document of this CreateSellerLeadRequest.
        :rtype: str
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this CreateSellerLeadRequest.

        Company's legal document code.

        :param document: The document of this CreateSellerLeadRequest.
        :type document: str
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")

        self._document = document

    @property
    def email(self):
        """Gets the email of this CreateSellerLeadRequest.


        :return: The email of this CreateSellerLeadRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateSellerLeadRequest.


        :param email: The email of this CreateSellerLeadRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def has_accepted_legal_terms(self):
        """Gets the has_accepted_legal_terms of this CreateSellerLeadRequest.

        Indicates if the seller has accepted the platform's legal terms and conditions.

        :return: The has_accepted_legal_terms of this CreateSellerLeadRequest.
        :rtype: bool
        """
        return self._has_accepted_legal_terms

    @has_accepted_legal_terms.setter
    def has_accepted_legal_terms(self, has_accepted_legal_terms):
        """Sets the has_accepted_legal_terms of this CreateSellerLeadRequest.

        Indicates if the seller has accepted the platform's legal terms and conditions.

        :param has_accepted_legal_terms: The has_accepted_legal_terms of this CreateSellerLeadRequest.
        :type has_accepted_legal_terms: bool
        """
        if has_accepted_legal_terms is None:
            raise ValueError("Invalid value for `has_accepted_legal_terms`, must not be `None`")

        self._has_accepted_legal_terms = has_accepted_legal_terms

    @property
    def sales_channel(self):
        """Gets the sales_channel of this CreateSellerLeadRequest.

        Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) associated to the seller account created.

        :return: The sales_channel of this CreateSellerLeadRequest.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this CreateSellerLeadRequest.

        Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) associated to the seller account created.

        :param sales_channel: The sales_channel of this CreateSellerLeadRequest.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel

    @property
    def seller_account_name(self):
        """Gets the seller_account_name of this CreateSellerLeadRequest.

        Name of the seller's account, part of the url of their VTEX Admin.

        :return: The seller_account_name of this CreateSellerLeadRequest.
        :rtype: str
        """
        return self._seller_account_name

    @seller_account_name.setter
    def seller_account_name(self, seller_account_name):
        """Sets the seller_account_name of this CreateSellerLeadRequest.

        Name of the seller's account, part of the url of their VTEX Admin.

        :param seller_account_name: The seller_account_name of this CreateSellerLeadRequest.
        :type seller_account_name: str
        """
        if seller_account_name is None:
            raise ValueError("Invalid value for `seller_account_name`, must not be `None`")

        self._seller_account_name = seller_account_name

    @property
    def seller_email(self):
        """Gets the seller_email of this CreateSellerLeadRequest.

        Seller's contact email;

        :return: The seller_email of this CreateSellerLeadRequest.
        :rtype: str
        """
        return self._seller_email

    @seller_email.setter
    def seller_email(self, seller_email):
        """Sets the seller_email of this CreateSellerLeadRequest.

        Seller's contact email;

        :param seller_email: The seller_email of this CreateSellerLeadRequest.
        :type seller_email: str
        """
        if seller_email is None:
            raise ValueError("Invalid value for `seller_email`, must not be `None`")

        self._seller_email = seller_email

    @property
    def seller_name(self):
        """Gets the seller_name of this CreateSellerLeadRequest.

        Seller's store's name.

        :return: The seller_name of this CreateSellerLeadRequest.
        :rtype: str
        """
        return self._seller_name

    @seller_name.setter
    def seller_name(self, seller_name):
        """Sets the seller_name of this CreateSellerLeadRequest.

        Seller's store's name.

        :param seller_name: The seller_name of this CreateSellerLeadRequest.
        :type seller_name: str
        """
        if seller_name is None:
            raise ValueError("Invalid value for `seller_name`, must not be `None`")

        self._seller_name = seller_name

    @property
    def seller_type(self):
        """Gets the seller_type of this CreateSellerLeadRequest.

        Type of seller, including:   `1`: regular seller   `2`: whitelabel seller

        :return: The seller_type of this CreateSellerLeadRequest.
        :rtype: int
        """
        return self._seller_type

    @seller_type.setter
    def seller_type(self, seller_type):
        """Sets the seller_type of this CreateSellerLeadRequest.

        Type of seller, including:   `1`: regular seller   `2`: whitelabel seller

        :param seller_type: The seller_type of this CreateSellerLeadRequest.
        :type seller_type: int
        """
        if seller_type is None:
            raise ValueError("Invalid value for `seller_type`, must not be `None`")

        self._seller_type = seller_type
