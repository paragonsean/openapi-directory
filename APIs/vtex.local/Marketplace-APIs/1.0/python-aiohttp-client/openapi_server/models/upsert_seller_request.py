# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.available_sales_channel import AvailableSalesChannel
from openapi_server.models.groups import Groups
from openapi_server.models.seller_commission_configuration import SellerCommissionConfiguration
from openapi_server import util


class UpsertSellerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, csc_identification: str='cscidentification 123', account: str='partner01', allow_hybrid_payments: bool=False, available_sales_channels: List[AvailableSalesChannel]=[], catalog_system_endpoint: str='https://pedrostore.vtexcommercestable.com.br/api/catalog_system/', channel: str='channel name', delivery_policy: str='Describe delivery policy', description: str='Seller A, from the B industry.', email: str='seller@email.com', exchange_return_policy: str='Describe exchange and returns policy', fulfillment_endpoint: str='http://{SellerName}.vtexcommercestable.com.br/api/fulfillment?&sc={TradePolicyID}', fulfillment_seller_id: str='seller1', groups: List[Groups]=None, id: str='seller123', is_active: bool=True, is_better_scope: bool=True, is_vtex: bool=True, name: str='Seller Name', password: str='integrationHubPassword', sales_channel: str='1', score: float=0, security_privacy_policy: str='Describe privacy and security policy', seller_commission_configuration: List[SellerCommissionConfiguration]=None, seller_type: int=1, tax_code: str='34444', trust_policy: str='AllowEmailSharing', user: str='integrationHubUserName'):
        """UpsertSellerRequest - a model defined in OpenAPI

        :param csc_identification: The csc_identification of this UpsertSellerRequest.
        :param account: The account of this UpsertSellerRequest.
        :param allow_hybrid_payments: The allow_hybrid_payments of this UpsertSellerRequest.
        :param available_sales_channels: The available_sales_channels of this UpsertSellerRequest.
        :param catalog_system_endpoint: The catalog_system_endpoint of this UpsertSellerRequest.
        :param channel: The channel of this UpsertSellerRequest.
        :param delivery_policy: The delivery_policy of this UpsertSellerRequest.
        :param description: The description of this UpsertSellerRequest.
        :param email: The email of this UpsertSellerRequest.
        :param exchange_return_policy: The exchange_return_policy of this UpsertSellerRequest.
        :param fulfillment_endpoint: The fulfillment_endpoint of this UpsertSellerRequest.
        :param fulfillment_seller_id: The fulfillment_seller_id of this UpsertSellerRequest.
        :param groups: The groups of this UpsertSellerRequest.
        :param id: The id of this UpsertSellerRequest.
        :param is_active: The is_active of this UpsertSellerRequest.
        :param is_better_scope: The is_better_scope of this UpsertSellerRequest.
        :param is_vtex: The is_vtex of this UpsertSellerRequest.
        :param name: The name of this UpsertSellerRequest.
        :param password: The password of this UpsertSellerRequest.
        :param sales_channel: The sales_channel of this UpsertSellerRequest.
        :param score: The score of this UpsertSellerRequest.
        :param security_privacy_policy: The security_privacy_policy of this UpsertSellerRequest.
        :param seller_commission_configuration: The seller_commission_configuration of this UpsertSellerRequest.
        :param seller_type: The seller_type of this UpsertSellerRequest.
        :param tax_code: The tax_code of this UpsertSellerRequest.
        :param trust_policy: The trust_policy of this UpsertSellerRequest.
        :param user: The user of this UpsertSellerRequest.
        """
        self.openapi_types = {
            'csc_identification': str,
            'account': str,
            'allow_hybrid_payments': bool,
            'available_sales_channels': List[AvailableSalesChannel],
            'catalog_system_endpoint': str,
            'channel': str,
            'delivery_policy': str,
            'description': str,
            'email': str,
            'exchange_return_policy': str,
            'fulfillment_endpoint': str,
            'fulfillment_seller_id': str,
            'groups': List[Groups],
            'id': str,
            'is_active': bool,
            'is_better_scope': bool,
            'is_vtex': bool,
            'name': str,
            'password': str,
            'sales_channel': str,
            'score': float,
            'security_privacy_policy': str,
            'seller_commission_configuration': List[SellerCommissionConfiguration],
            'seller_type': int,
            'tax_code': str,
            'trust_policy': str,
            'user': str
        }

        self.attribute_map = {
            'csc_identification': 'CSCIdentification',
            'account': 'account',
            'allow_hybrid_payments': 'allowHybridPayments',
            'available_sales_channels': 'availableSalesChannels',
            'catalog_system_endpoint': 'catalogSystemEndpoint',
            'channel': 'channel',
            'delivery_policy': 'deliveryPolicy',
            'description': 'description',
            'email': 'email',
            'exchange_return_policy': 'exchangeReturnPolicy',
            'fulfillment_endpoint': 'fulfillmentEndpoint',
            'fulfillment_seller_id': 'fulfillmentSellerId',
            'groups': 'groups',
            'id': 'id',
            'is_active': 'isActive',
            'is_better_scope': 'isBetterScope',
            'is_vtex': 'isVtex',
            'name': 'name',
            'password': 'password',
            'sales_channel': 'salesChannel',
            'score': 'score',
            'security_privacy_policy': 'securityPrivacyPolicy',
            'seller_commission_configuration': 'sellerCommissionConfiguration',
            'seller_type': 'sellerType',
            'tax_code': 'taxCode',
            'trust_policy': 'trustPolicy',
            'user': 'user'
        }

        self._csc_identification = csc_identification
        self._account = account
        self._allow_hybrid_payments = allow_hybrid_payments
        self._available_sales_channels = available_sales_channels
        self._catalog_system_endpoint = catalog_system_endpoint
        self._channel = channel
        self._delivery_policy = delivery_policy
        self._description = description
        self._email = email
        self._exchange_return_policy = exchange_return_policy
        self._fulfillment_endpoint = fulfillment_endpoint
        self._fulfillment_seller_id = fulfillment_seller_id
        self._groups = groups
        self._id = id
        self._is_active = is_active
        self._is_better_scope = is_better_scope
        self._is_vtex = is_vtex
        self._name = name
        self._password = password
        self._sales_channel = sales_channel
        self._score = score
        self._security_privacy_policy = security_privacy_policy
        self._seller_commission_configuration = seller_commission_configuration
        self._seller_type = seller_type
        self._tax_code = tax_code
        self._trust_policy = trust_policy
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpsertSellerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpsertSellerRequest of this UpsertSellerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def csc_identification(self):
        """Gets the csc_identification of this UpsertSellerRequest.

        SKU Seller Identification

        :return: The csc_identification of this UpsertSellerRequest.
        :rtype: str
        """
        return self._csc_identification

    @csc_identification.setter
    def csc_identification(self, csc_identification):
        """Sets the csc_identification of this UpsertSellerRequest.

        SKU Seller Identification

        :param csc_identification: The csc_identification of this UpsertSellerRequest.
        :type csc_identification: str
        """
        if csc_identification is None:
            raise ValueError("Invalid value for `csc_identification`, must not be `None`")

        self._csc_identification = csc_identification

    @property
    def account(self):
        """Gets the account of this UpsertSellerRequest.

        Seller's account name

        :return: The account of this UpsertSellerRequest.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this UpsertSellerRequest.

        Seller's account name

        :param account: The account of this UpsertSellerRequest.
        :type account: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")

        self._account = account

    @property
    def allow_hybrid_payments(self):
        """Gets the allow_hybrid_payments of this UpsertSellerRequest.

        Flag that allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.

        :return: The allow_hybrid_payments of this UpsertSellerRequest.
        :rtype: bool
        """
        return self._allow_hybrid_payments

    @allow_hybrid_payments.setter
    def allow_hybrid_payments(self, allow_hybrid_payments):
        """Sets the allow_hybrid_payments of this UpsertSellerRequest.

        Flag that allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.

        :param allow_hybrid_payments: The allow_hybrid_payments of this UpsertSellerRequest.
        :type allow_hybrid_payments: bool
        """
        if allow_hybrid_payments is None:
            raise ValueError("Invalid value for `allow_hybrid_payments`, must not be `None`")

        self._allow_hybrid_payments = allow_hybrid_payments

    @property
    def available_sales_channels(self):
        """Gets the available_sales_channels of this UpsertSellerRequest.

        Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) available.

        :return: The available_sales_channels of this UpsertSellerRequest.
        :rtype: List[AvailableSalesChannel]
        """
        return self._available_sales_channels

    @available_sales_channels.setter
    def available_sales_channels(self, available_sales_channels):
        """Sets the available_sales_channels of this UpsertSellerRequest.

        Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) available.

        :param available_sales_channels: The available_sales_channels of this UpsertSellerRequest.
        :type available_sales_channels: List[AvailableSalesChannel]
        """
        if available_sales_channels is None:
            raise ValueError("Invalid value for `available_sales_channels`, must not be `None`")

        self._available_sales_channels = available_sales_channels

    @property
    def catalog_system_endpoint(self):
        """Gets the catalog_system_endpoint of this UpsertSellerRequest.

        URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `https://{sellerName}.vtexcommercestable.com.br/api/catalog_system/.`

        :return: The catalog_system_endpoint of this UpsertSellerRequest.
        :rtype: str
        """
        return self._catalog_system_endpoint

    @catalog_system_endpoint.setter
    def catalog_system_endpoint(self, catalog_system_endpoint):
        """Sets the catalog_system_endpoint of this UpsertSellerRequest.

        URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `https://{sellerName}.vtexcommercestable.com.br/api/catalog_system/.`

        :param catalog_system_endpoint: The catalog_system_endpoint of this UpsertSellerRequest.
        :type catalog_system_endpoint: str
        """
        if catalog_system_endpoint is None:
            raise ValueError("Invalid value for `catalog_system_endpoint`, must not be `None`")

        self._catalog_system_endpoint = catalog_system_endpoint

    @property
    def channel(self):
        """Gets the channel of this UpsertSellerRequest.

        Channel's name.

        :return: The channel of this UpsertSellerRequest.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this UpsertSellerRequest.

        Channel's name.

        :param channel: The channel of this UpsertSellerRequest.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")

        self._channel = channel

    @property
    def delivery_policy(self):
        """Gets the delivery_policy of this UpsertSellerRequest.

        Text describing the delivery policy previously agreed between the marketplace and the seller.

        :return: The delivery_policy of this UpsertSellerRequest.
        :rtype: str
        """
        return self._delivery_policy

    @delivery_policy.setter
    def delivery_policy(self, delivery_policy):
        """Sets the delivery_policy of this UpsertSellerRequest.

        Text describing the delivery policy previously agreed between the marketplace and the seller.

        :param delivery_policy: The delivery_policy of this UpsertSellerRequest.
        :type delivery_policy: str
        """
        if delivery_policy is None:
            raise ValueError("Invalid value for `delivery_policy`, must not be `None`")

        self._delivery_policy = delivery_policy

    @property
    def description(self):
        """Gets the description of this UpsertSellerRequest.

        String describing the seller

        :return: The description of this UpsertSellerRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpsertSellerRequest.

        String describing the seller

        :param description: The description of this UpsertSellerRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def email(self):
        """Gets the email of this UpsertSellerRequest.

        email of the admin responsible for the seller.

        :return: The email of this UpsertSellerRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UpsertSellerRequest.

        email of the admin responsible for the seller.

        :param email: The email of this UpsertSellerRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def exchange_return_policy(self):
        """Gets the exchange_return_policy of this UpsertSellerRequest.

        Text describing the exchange and return policy previously agreed between the marketplace and the seller.

        :return: The exchange_return_policy of this UpsertSellerRequest.
        :rtype: str
        """
        return self._exchange_return_policy

    @exchange_return_policy.setter
    def exchange_return_policy(self, exchange_return_policy):
        """Sets the exchange_return_policy of this UpsertSellerRequest.

        Text describing the exchange and return policy previously agreed between the marketplace and the seller.

        :param exchange_return_policy: The exchange_return_policy of this UpsertSellerRequest.
        :type exchange_return_policy: str
        """
        if exchange_return_policy is None:
            raise ValueError("Invalid value for `exchange_return_policy`, must not be `None`")

        self._exchange_return_policy = exchange_return_policy

    @property
    def fulfillment_endpoint(self):
        """Gets the fulfillment_endpoint of this UpsertSellerRequest.

        URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller.   For **external sellers**, please include the URL of the seller's endpoint. External sellers have different endpoint standards. The seller must inform this endpoint to the marketplace so that the marketplace can complete the configuration process.   For **VTEX Stores**, the field format will be as follows: `https://{SellerName}.vtexcommercestable.com.br/api/fulfillment?&sc={TradePolicyID}`.   The value `SellerName` corresponds to the store name if the seller is a VTEX store.   The value `TradePolicyID` corresponds to the [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV#master-data) created by the seller in their own VTEX environment. The seller must inform this ID to the marketplace so that the marketplace can complete the configuration process.   The value `AffiliateID` corresponds to the 3-digit affiliate identification code created by the seller. The seller must inform this ID to the marketplace so that the marketplace can complete the configuration process.   To configure the [Multilevel Omnichannel Inventory](https://developers.vtex.com/vtex-rest-api/docs/multilevel-omnichannel-inventory) feature, fill in this field with the checkout endpoint following this example: `https://{{sellerAccount}}.vtexcommercestable.com.br/api/checkout?affiliateid={{affiliateId}}&sc={{salesChannel`

        :return: The fulfillment_endpoint of this UpsertSellerRequest.
        :rtype: str
        """
        return self._fulfillment_endpoint

    @fulfillment_endpoint.setter
    def fulfillment_endpoint(self, fulfillment_endpoint):
        """Sets the fulfillment_endpoint of this UpsertSellerRequest.

        URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller.   For **external sellers**, please include the URL of the seller's endpoint. External sellers have different endpoint standards. The seller must inform this endpoint to the marketplace so that the marketplace can complete the configuration process.   For **VTEX Stores**, the field format will be as follows: `https://{SellerName}.vtexcommercestable.com.br/api/fulfillment?&sc={TradePolicyID}`.   The value `SellerName` corresponds to the store name if the seller is a VTEX store.   The value `TradePolicyID` corresponds to the [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV#master-data) created by the seller in their own VTEX environment. The seller must inform this ID to the marketplace so that the marketplace can complete the configuration process.   The value `AffiliateID` corresponds to the 3-digit affiliate identification code created by the seller. The seller must inform this ID to the marketplace so that the marketplace can complete the configuration process.   To configure the [Multilevel Omnichannel Inventory](https://developers.vtex.com/vtex-rest-api/docs/multilevel-omnichannel-inventory) feature, fill in this field with the checkout endpoint following this example: `https://{{sellerAccount}}.vtexcommercestable.com.br/api/checkout?affiliateid={{affiliateId}}&sc={{salesChannel`

        :param fulfillment_endpoint: The fulfillment_endpoint of this UpsertSellerRequest.
        :type fulfillment_endpoint: str
        """
        if fulfillment_endpoint is None:
            raise ValueError("Invalid value for `fulfillment_endpoint`, must not be `None`")

        self._fulfillment_endpoint = fulfillment_endpoint

    @property
    def fulfillment_seller_id(self):
        """Gets the fulfillment_seller_id of this UpsertSellerRequest.

         Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be nulled.

        :return: The fulfillment_seller_id of this UpsertSellerRequest.
        :rtype: str
        """
        return self._fulfillment_seller_id

    @fulfillment_seller_id.setter
    def fulfillment_seller_id(self, fulfillment_seller_id):
        """Sets the fulfillment_seller_id of this UpsertSellerRequest.

         Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be nulled.

        :param fulfillment_seller_id: The fulfillment_seller_id of this UpsertSellerRequest.
        :type fulfillment_seller_id: str
        """
        if fulfillment_seller_id is None:
            raise ValueError("Invalid value for `fulfillment_seller_id`, must not be `None`")

        self._fulfillment_seller_id = fulfillment_seller_id

    @property
    def groups(self):
        """Gets the groups of this UpsertSellerRequest.

        Array of groups attached to the seller. Groups are defined by key-words that group sellers into categories defined by the marketplace when adding a new seller through the [Configure Seller Account](https://developers.vtex.com/vtex-rest-api/reference/sellers#putupsertseller) endpoint. It is possible to filter sellers by group in the Seller Management page in your VTEX Admin. Know more about groups through our [Seller Management](https://help.vtex.com/en/tutorial/gerenciamento-de-sellers-beta--6eEiOISwxuAWJ8w6MtK7iv#groups) documentation.

        :return: The groups of this UpsertSellerRequest.
        :rtype: List[Groups]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UpsertSellerRequest.

        Array of groups attached to the seller. Groups are defined by key-words that group sellers into categories defined by the marketplace when adding a new seller through the [Configure Seller Account](https://developers.vtex.com/vtex-rest-api/reference/sellers#putupsertseller) endpoint. It is possible to filter sellers by group in the Seller Management page in your VTEX Admin. Know more about groups through our [Seller Management](https://help.vtex.com/en/tutorial/gerenciamento-de-sellers-beta--6eEiOISwxuAWJ8w6MtK7iv#groups) documentation.

        :param groups: The groups of this UpsertSellerRequest.
        :type groups: List[Groups]
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this UpsertSellerRequest.

        Seller ID assigned by the marketplace. We recommend filling it in with the seller's account name.

        :return: The id of this UpsertSellerRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpsertSellerRequest.

        Seller ID assigned by the marketplace. We recommend filling it in with the seller's account name.

        :param id: The id of this UpsertSellerRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this UpsertSellerRequest.

        Whether the seller is active on the marketplace or not.

        :return: The is_active of this UpsertSellerRequest.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UpsertSellerRequest.

        Whether the seller is active on the marketplace or not.

        :param is_active: The is_active of this UpsertSellerRequest.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_better_scope(self):
        """Gets the is_better_scope of this UpsertSellerRequest.

        Flag used by the VTEX Checkout to simmulate shopping carts, products and shipping only in sellers with the boolean set as `true`, avoiding performance issues.

        :return: The is_better_scope of this UpsertSellerRequest.
        :rtype: bool
        """
        return self._is_better_scope

    @is_better_scope.setter
    def is_better_scope(self, is_better_scope):
        """Sets the is_better_scope of this UpsertSellerRequest.

        Flag used by the VTEX Checkout to simmulate shopping carts, products and shipping only in sellers with the boolean set as `true`, avoiding performance issues.

        :param is_better_scope: The is_better_scope of this UpsertSellerRequest.
        :type is_better_scope: bool
        """
        if is_better_scope is None:
            raise ValueError("Invalid value for `is_better_scope`, must not be `None`")

        self._is_better_scope = is_better_scope

    @property
    def is_vtex(self):
        """Gets the is_vtex of this UpsertSellerRequest.

        Flag determining whether the seller configured is a VTEX store or not.

        :return: The is_vtex of this UpsertSellerRequest.
        :rtype: bool
        """
        return self._is_vtex

    @is_vtex.setter
    def is_vtex(self, is_vtex):
        """Sets the is_vtex of this UpsertSellerRequest.

        Flag determining whether the seller configured is a VTEX store or not.

        :param is_vtex: The is_vtex of this UpsertSellerRequest.
        :type is_vtex: bool
        """
        if is_vtex is None:
            raise ValueError("Invalid value for `is_vtex`, must not be `None`")

        self._is_vtex = is_vtex

    @property
    def name(self):
        """Gets the name of this UpsertSellerRequest.

        Name of the seller's store, configured in the seller's environment.

        :return: The name of this UpsertSellerRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpsertSellerRequest.

        Name of the seller's store, configured in the seller's environment.

        :param name: The name of this UpsertSellerRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def password(self):
        """Gets the password of this UpsertSellerRequest.

        User password, if you are using a hub to integrate with the external seller.

        :return: The password of this UpsertSellerRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpsertSellerRequest.

        User password, if you are using a hub to integrate with the external seller.

        :param password: The password of this UpsertSellerRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def sales_channel(self):
        """Gets the sales_channel of this UpsertSellerRequest.

        Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) associated to the seller account created. If no value is specified, the system will automatically use the sales channel configured in the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) ID.

        :return: The sales_channel of this UpsertSellerRequest.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this UpsertSellerRequest.

        Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) associated to the seller account created. If no value is specified, the system will automatically use the sales channel configured in the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) ID.

        :param sales_channel: The sales_channel of this UpsertSellerRequest.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel

    @property
    def score(self):
        """Gets the score of this UpsertSellerRequest.

        Score attributed to this seller.

        :return: The score of this UpsertSellerRequest.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this UpsertSellerRequest.

        Score attributed to this seller.

        :param score: The score of this UpsertSellerRequest.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def security_privacy_policy(self):
        """Gets the security_privacy_policy of this UpsertSellerRequest.

         Text describing the security policy previously agreed between the marketplace and the seller.

        :return: The security_privacy_policy of this UpsertSellerRequest.
        :rtype: str
        """
        return self._security_privacy_policy

    @security_privacy_policy.setter
    def security_privacy_policy(self, security_privacy_policy):
        """Sets the security_privacy_policy of this UpsertSellerRequest.

         Text describing the security policy previously agreed between the marketplace and the seller.

        :param security_privacy_policy: The security_privacy_policy of this UpsertSellerRequest.
        :type security_privacy_policy: str
        """
        if security_privacy_policy is None:
            raise ValueError("Invalid value for `security_privacy_policy`, must not be `None`")

        self._security_privacy_policy = security_privacy_policy

    @property
    def seller_commission_configuration(self):
        """Gets the seller_commission_configuration of this UpsertSellerRequest.


        :return: The seller_commission_configuration of this UpsertSellerRequest.
        :rtype: List[SellerCommissionConfiguration]
        """
        return self._seller_commission_configuration

    @seller_commission_configuration.setter
    def seller_commission_configuration(self, seller_commission_configuration):
        """Sets the seller_commission_configuration of this UpsertSellerRequest.


        :param seller_commission_configuration: The seller_commission_configuration of this UpsertSellerRequest.
        :type seller_commission_configuration: List[SellerCommissionConfiguration]
        """
        if seller_commission_configuration is None:
            raise ValueError("Invalid value for `seller_commission_configuration`, must not be `None`")

        self._seller_commission_configuration = seller_commission_configuration

    @property
    def seller_type(self):
        """Gets the seller_type of this UpsertSellerRequest.

        Type of seller, including:   `1`: regular seller   `2`: whitelabel seller

        :return: The seller_type of this UpsertSellerRequest.
        :rtype: int
        """
        return self._seller_type

    @seller_type.setter
    def seller_type(self, seller_type):
        """Sets the seller_type of this UpsertSellerRequest.

        Type of seller, including:   `1`: regular seller   `2`: whitelabel seller

        :param seller_type: The seller_type of this UpsertSellerRequest.
        :type seller_type: int
        """
        if seller_type is None:
            raise ValueError("Invalid value for `seller_type`, must not be `None`")

        self._seller_type = seller_type

    @property
    def tax_code(self):
        """Gets the tax_code of this UpsertSellerRequest.

        This code is the Identity Number for the legal entity and is linked to information in its base country.

        :return: The tax_code of this UpsertSellerRequest.
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this UpsertSellerRequest.

        This code is the Identity Number for the legal entity and is linked to information in its base country.

        :param tax_code: The tax_code of this UpsertSellerRequest.
        :type tax_code: str
        """
        if tax_code is None:
            raise ValueError("Invalid value for `tax_code`, must not be `None`")

        self._tax_code = tax_code

    @property
    def trust_policy(self):
        """Gets the trust_policy of this UpsertSellerRequest.

         the marketplace must first allow VTEX to share clients’ email addresses with the seller. To do so, it is necessary to set 'AllowEmailSharing' as the value for the TrustPolicy field

        :return: The trust_policy of this UpsertSellerRequest.
        :rtype: str
        """
        return self._trust_policy

    @trust_policy.setter
    def trust_policy(self, trust_policy):
        """Sets the trust_policy of this UpsertSellerRequest.

         the marketplace must first allow VTEX to share clients’ email addresses with the seller. To do so, it is necessary to set 'AllowEmailSharing' as the value for the TrustPolicy field

        :param trust_policy: The trust_policy of this UpsertSellerRequest.
        :type trust_policy: str
        """
        if trust_policy is None:
            raise ValueError("Invalid value for `trust_policy`, must not be `None`")

        self._trust_policy = trust_policy

    @property
    def user(self):
        """Gets the user of this UpsertSellerRequest.

        Username, if you are using a hub to integrate with the external seller.

        :return: The user of this UpsertSellerRequest.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UpsertSellerRequest.

        Username, if you are using a hub to integrate with the external seller.

        :param user: The user of this UpsertSellerRequest.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
