/**
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Sku2 from './Sku2';

/**
 * The GetMatchedOffersResponse model module.
 * @module model/GetMatchedOffersResponse
 * @version 1.0
 */
class GetMatchedOffersResponse {
    /**
     * Constructs a new <code>GetMatchedOffersResponse</code>.
     * @alias module:model/GetMatchedOffersResponse
     * @param brandId {Number} Offer's brand ID that the product belongs to, configured in the Catalog. It should be the marketplace's brand chosen for the offer to be matched with.
     * @param categoryId {Number} Offer's Category ID that the product belongs to, configured in the Catalog. It should be the marketplace's category chosen for the offer to be matched with.
     * @param lastModified {String} Last date the offer was modified.
     * @param productId {String} A string that identifies the seller's product. This is the ID that the marketplace will use for all references to this product.
     * @param productName {String} Name of the offer's product.
     * @param skus {Array.<module:model/Sku2>} Array of SKUs in the offer.
     */
    constructor(brandId, categoryId, lastModified, productId, productName, skus) { 
        
        GetMatchedOffersResponse.initialize(this, brandId, categoryId, lastModified, productId, productName, skus);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, brandId, categoryId, lastModified, productId, productName, skus) { 
        obj['BrandId'] = brandId || 2004291;
        obj['CategoryId'] = categoryId || 1563;
        obj['LastModified'] = lastModified || '2021-05-06T21:37:24.262529';
        obj['ProductId'] = productId || '941947';
        obj['ProductName'] = productName || 'Name of the Product - 123';
        obj['Skus'] = skus;
    }

    /**
     * Constructs a <code>GetMatchedOffersResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetMatchedOffersResponse} obj Optional instance to populate.
     * @return {module:model/GetMatchedOffersResponse} The populated <code>GetMatchedOffersResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetMatchedOffersResponse();

            if (data.hasOwnProperty('BrandId')) {
                obj['BrandId'] = ApiClient.convertToType(data['BrandId'], 'Number');
            }
            if (data.hasOwnProperty('CategoryId')) {
                obj['CategoryId'] = ApiClient.convertToType(data['CategoryId'], 'Number');
            }
            if (data.hasOwnProperty('LastModified')) {
                obj['LastModified'] = ApiClient.convertToType(data['LastModified'], 'String');
            }
            if (data.hasOwnProperty('ProductId')) {
                obj['ProductId'] = ApiClient.convertToType(data['ProductId'], 'String');
            }
            if (data.hasOwnProperty('ProductName')) {
                obj['ProductName'] = ApiClient.convertToType(data['ProductName'], 'String');
            }
            if (data.hasOwnProperty('Skus')) {
                obj['Skus'] = ApiClient.convertToType(data['Skus'], [Sku2]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetMatchedOffersResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetMatchedOffersResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetMatchedOffersResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['LastModified'] && !(typeof data['LastModified'] === 'string' || data['LastModified'] instanceof String)) {
            throw new Error("Expected the field `LastModified` to be a primitive type in the JSON string but got " + data['LastModified']);
        }
        // ensure the json data is a string
        if (data['ProductId'] && !(typeof data['ProductId'] === 'string' || data['ProductId'] instanceof String)) {
            throw new Error("Expected the field `ProductId` to be a primitive type in the JSON string but got " + data['ProductId']);
        }
        // ensure the json data is a string
        if (data['ProductName'] && !(typeof data['ProductName'] === 'string' || data['ProductName'] instanceof String)) {
            throw new Error("Expected the field `ProductName` to be a primitive type in the JSON string but got " + data['ProductName']);
        }
        if (data['Skus']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Skus'])) {
                throw new Error("Expected the field `Skus` to be an array in the JSON data but got " + data['Skus']);
            }
            // validate the optional field `Skus` (array)
            for (const item of data['Skus']) {
                Sku2.validateJSON(item);
            };
        }

        return true;
    }


}

GetMatchedOffersResponse.RequiredProperties = ["BrandId", "CategoryId", "LastModified", "ProductId", "ProductName", "Skus"];

/**
 * Offer's brand ID that the product belongs to, configured in the Catalog. It should be the marketplace's brand chosen for the offer to be matched with.
 * @member {Number} BrandId
 * @default 2004291
 */
GetMatchedOffersResponse.prototype['BrandId'] = 2004291;

/**
 * Offer's Category ID that the product belongs to, configured in the Catalog. It should be the marketplace's category chosen for the offer to be matched with.
 * @member {Number} CategoryId
 * @default 1563
 */
GetMatchedOffersResponse.prototype['CategoryId'] = 1563;

/**
 * Last date the offer was modified.
 * @member {String} LastModified
 * @default '2021-05-06T21:37:24.262529'
 */
GetMatchedOffersResponse.prototype['LastModified'] = '2021-05-06T21:37:24.262529';

/**
 * A string that identifies the seller's product. This is the ID that the marketplace will use for all references to this product.
 * @member {String} ProductId
 * @default '941947'
 */
GetMatchedOffersResponse.prototype['ProductId'] = '941947';

/**
 * Name of the offer's product.
 * @member {String} ProductName
 * @default 'Name of the Product - 123'
 */
GetMatchedOffersResponse.prototype['ProductName'] = 'Name of the Product - 123';

/**
 * Array of SKUs in the offer.
 * @member {Array.<module:model/Sku2>} Skus
 */
GetMatchedOffersResponse.prototype['Skus'] = undefined;






export default GetMatchedOffersResponse;

