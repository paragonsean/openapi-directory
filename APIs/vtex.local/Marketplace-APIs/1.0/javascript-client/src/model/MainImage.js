/**
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MainImage model module.
 * @module model/MainImage
 * @version 1.0
 */
class MainImage {
    /**
     * Constructs a new <code>MainImage</code>.
     * @alias module:model/MainImage
     * @param imageId {String} Code identifying the image's file.
     * @param imageLabel {String} Image's label.
     * @param imagePath {String} Path for the image's file.
     * @param imageTag {String} HTML tag for the selected image.
     * @param imageText {String} Alt text for the image.
     * @param isMain {Boolean} Whether the image is the main one or not.
     * @param isZoomSize {Boolean} If zoom can be applied to the image.
     * @param lastModified {String} Date of the last changed made to the offer.
     */
    constructor(imageId, imageLabel, imagePath, imageTag, imageText, isMain, isZoomSize, lastModified) { 
        
        MainImage.initialize(this, imageId, imageLabel, imagePath, imageTag, imageText, isMain, isZoomSize, lastModified);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imageId, imageLabel, imagePath, imageTag, imageText, isMain, isZoomSize, lastModified) { 
        obj['ImageId'] = imageId || '53878805';
        obj['ImageLabel'] = imageLabel || 'Image 1';
        obj['ImagePath'] = imagePath || '~/archives/ids/155411-#width#-#height#/Webp.net-resizeimage.jpg';
        obj['ImageTag'] = imageTag || '<img src="~/archives/ids/155411-#width#-#height#/Webp.net-resizeimage.jpg" width="#width#" height="#height#" alt="Image name and description" id="" />';
        obj['ImageText'] = imageText || 'Image name and description';
        obj['IsMain'] = isMain || true;
        obj['IsZoomSize'] = isZoomSize || true;
        obj['LastModified'] = lastModified || '2021-05-06T21:37:24.262529';
    }

    /**
     * Constructs a <code>MainImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MainImage} obj Optional instance to populate.
     * @return {module:model/MainImage} The populated <code>MainImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MainImage();

            if (data.hasOwnProperty('ImageId')) {
                obj['ImageId'] = ApiClient.convertToType(data['ImageId'], 'String');
            }
            if (data.hasOwnProperty('ImageLabel')) {
                obj['ImageLabel'] = ApiClient.convertToType(data['ImageLabel'], 'String');
            }
            if (data.hasOwnProperty('ImagePath')) {
                obj['ImagePath'] = ApiClient.convertToType(data['ImagePath'], 'String');
            }
            if (data.hasOwnProperty('ImageTag')) {
                obj['ImageTag'] = ApiClient.convertToType(data['ImageTag'], 'String');
            }
            if (data.hasOwnProperty('ImageText')) {
                obj['ImageText'] = ApiClient.convertToType(data['ImageText'], 'String');
            }
            if (data.hasOwnProperty('IsMain')) {
                obj['IsMain'] = ApiClient.convertToType(data['IsMain'], 'Boolean');
            }
            if (data.hasOwnProperty('IsZoomSize')) {
                obj['IsZoomSize'] = ApiClient.convertToType(data['IsZoomSize'], 'Boolean');
            }
            if (data.hasOwnProperty('LastModified')) {
                obj['LastModified'] = ApiClient.convertToType(data['LastModified'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MainImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MainImage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MainImage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ImageId'] && !(typeof data['ImageId'] === 'string' || data['ImageId'] instanceof String)) {
            throw new Error("Expected the field `ImageId` to be a primitive type in the JSON string but got " + data['ImageId']);
        }
        // ensure the json data is a string
        if (data['ImageLabel'] && !(typeof data['ImageLabel'] === 'string' || data['ImageLabel'] instanceof String)) {
            throw new Error("Expected the field `ImageLabel` to be a primitive type in the JSON string but got " + data['ImageLabel']);
        }
        // ensure the json data is a string
        if (data['ImagePath'] && !(typeof data['ImagePath'] === 'string' || data['ImagePath'] instanceof String)) {
            throw new Error("Expected the field `ImagePath` to be a primitive type in the JSON string but got " + data['ImagePath']);
        }
        // ensure the json data is a string
        if (data['ImageTag'] && !(typeof data['ImageTag'] === 'string' || data['ImageTag'] instanceof String)) {
            throw new Error("Expected the field `ImageTag` to be a primitive type in the JSON string but got " + data['ImageTag']);
        }
        // ensure the json data is a string
        if (data['ImageText'] && !(typeof data['ImageText'] === 'string' || data['ImageText'] instanceof String)) {
            throw new Error("Expected the field `ImageText` to be a primitive type in the JSON string but got " + data['ImageText']);
        }
        // ensure the json data is a string
        if (data['LastModified'] && !(typeof data['LastModified'] === 'string' || data['LastModified'] instanceof String)) {
            throw new Error("Expected the field `LastModified` to be a primitive type in the JSON string but got " + data['LastModified']);
        }

        return true;
    }


}

MainImage.RequiredProperties = ["ImageId", "ImageLabel", "ImagePath", "ImageTag", "ImageText", "IsMain", "IsZoomSize", "LastModified"];

/**
 * Code identifying the image's file.
 * @member {String} ImageId
 * @default '53878805'
 */
MainImage.prototype['ImageId'] = '53878805';

/**
 * Image's label.
 * @member {String} ImageLabel
 * @default 'Image 1'
 */
MainImage.prototype['ImageLabel'] = 'Image 1';

/**
 * Path for the image's file.
 * @member {String} ImagePath
 * @default '~/archives/ids/155411-#width#-#height#/Webp.net-resizeimage.jpg'
 */
MainImage.prototype['ImagePath'] = '~/archives/ids/155411-#width#-#height#/Webp.net-resizeimage.jpg';

/**
 * HTML tag for the selected image.
 * @member {String} ImageTag
 * @default '<img src="~/archives/ids/155411-#width#-#height#/Webp.net-resizeimage.jpg" width="#width#" height="#height#" alt="Image name and description" id="" />'
 */
MainImage.prototype['ImageTag'] = '<img src="~/archives/ids/155411-#width#-#height#/Webp.net-resizeimage.jpg" width="#width#" height="#height#" alt="Image name and description" id="" />';

/**
 * Alt text for the image.
 * @member {String} ImageText
 * @default 'Image name and description'
 */
MainImage.prototype['ImageText'] = 'Image name and description';

/**
 * Whether the image is the main one or not.
 * @member {Boolean} IsMain
 * @default true
 */
MainImage.prototype['IsMain'] = true;

/**
 * If zoom can be applied to the image.
 * @member {Boolean} IsZoomSize
 * @default true
 */
MainImage.prototype['IsZoomSize'] = true;

/**
 * Date of the last changed made to the offer.
 * @member {String} LastModified
 * @default '2021-05-06T21:37:24.262529'
 */
MainImage.prototype['LastModified'] = '2021-05-06T21:37:24.262529';






export default MainImage;

