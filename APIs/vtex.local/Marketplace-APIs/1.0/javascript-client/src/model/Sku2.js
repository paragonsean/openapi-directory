/**
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MainImage from './MainImage';
import Offer from './Offer';

/**
 * The Sku2 model module.
 * @module model/Sku2
 * @version 1.0
 */
class Sku2 {
    /**
     * Constructs a new <code>Sku2</code>.
     * @alias module:model/Sku2
     * @param eanId {String} EAN's unique identifier number
     * @param isActive {Boolean} Whether the SKU is active in the sales channel (true), or not (false).
     * @param mainImage {Array.<module:model/MainImage>} Main image's information.
     * @param name {String} Summarized name of the SKU
     * @param nameComplete {String} Complete name of the SKU
     * @param offers {Array.<module:model/Offer>} Array with offers
     * @param refId {String} SKU's Reference ID
     * @param skuId {String} SKU's unique identifier number
     */
    constructor(eanId, isActive, mainImage, name, nameComplete, offers, refId, skuId) { 
        
        Sku2.initialize(this, eanId, isActive, mainImage, name, nameComplete, offers, refId, skuId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eanId, isActive, mainImage, name, nameComplete, offers, refId, skuId) { 
        obj['EanId'] = eanId || '768655';
        obj['IsActive'] = isActive || true;
        obj['MainImage'] = mainImage;
        obj['Name'] = name || 'Color: Black';
        obj['NameComplete'] = nameComplete || 'Name of the Product - 123 Color: Black';
        obj['Offers'] = offers;
        obj['RefId'] = refId || '1234';
        obj['SkuId'] = skuId || '1070268';
    }

    /**
     * Constructs a <code>Sku2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sku2} obj Optional instance to populate.
     * @return {module:model/Sku2} The populated <code>Sku2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sku2();

            if (data.hasOwnProperty('EanId')) {
                obj['EanId'] = ApiClient.convertToType(data['EanId'], 'String');
            }
            if (data.hasOwnProperty('IsActive')) {
                obj['IsActive'] = ApiClient.convertToType(data['IsActive'], 'Boolean');
            }
            if (data.hasOwnProperty('MainImage')) {
                obj['MainImage'] = ApiClient.convertToType(data['MainImage'], [MainImage]);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NameComplete')) {
                obj['NameComplete'] = ApiClient.convertToType(data['NameComplete'], 'String');
            }
            if (data.hasOwnProperty('Offers')) {
                obj['Offers'] = ApiClient.convertToType(data['Offers'], [Offer]);
            }
            if (data.hasOwnProperty('RefId')) {
                obj['RefId'] = ApiClient.convertToType(data['RefId'], 'String');
            }
            if (data.hasOwnProperty('SkuId')) {
                obj['SkuId'] = ApiClient.convertToType(data['SkuId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sku2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sku2</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Sku2.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['EanId'] && !(typeof data['EanId'] === 'string' || data['EanId'] instanceof String)) {
            throw new Error("Expected the field `EanId` to be a primitive type in the JSON string but got " + data['EanId']);
        }
        if (data['MainImage']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['MainImage'])) {
                throw new Error("Expected the field `MainImage` to be an array in the JSON data but got " + data['MainImage']);
            }
            // validate the optional field `MainImage` (array)
            for (const item of data['MainImage']) {
                MainImage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['NameComplete'] && !(typeof data['NameComplete'] === 'string' || data['NameComplete'] instanceof String)) {
            throw new Error("Expected the field `NameComplete` to be a primitive type in the JSON string but got " + data['NameComplete']);
        }
        if (data['Offers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Offers'])) {
                throw new Error("Expected the field `Offers` to be an array in the JSON data but got " + data['Offers']);
            }
            // validate the optional field `Offers` (array)
            for (const item of data['Offers']) {
                Offer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['RefId'] && !(typeof data['RefId'] === 'string' || data['RefId'] instanceof String)) {
            throw new Error("Expected the field `RefId` to be a primitive type in the JSON string but got " + data['RefId']);
        }
        // ensure the json data is a string
        if (data['SkuId'] && !(typeof data['SkuId'] === 'string' || data['SkuId'] instanceof String)) {
            throw new Error("Expected the field `SkuId` to be a primitive type in the JSON string but got " + data['SkuId']);
        }

        return true;
    }


}

Sku2.RequiredProperties = ["EanId", "IsActive", "MainImage", "Name", "NameComplete", "Offers", "RefId", "SkuId"];

/**
 * EAN's unique identifier number
 * @member {String} EanId
 * @default '768655'
 */
Sku2.prototype['EanId'] = '768655';

/**
 * Whether the SKU is active in the sales channel (true), or not (false).
 * @member {Boolean} IsActive
 * @default true
 */
Sku2.prototype['IsActive'] = true;

/**
 * Main image's information.
 * @member {Array.<module:model/MainImage>} MainImage
 */
Sku2.prototype['MainImage'] = undefined;

/**
 * Summarized name of the SKU
 * @member {String} Name
 * @default 'Color: Black'
 */
Sku2.prototype['Name'] = 'Color: Black';

/**
 * Complete name of the SKU
 * @member {String} NameComplete
 * @default 'Name of the Product - 123 Color: Black'
 */
Sku2.prototype['NameComplete'] = 'Name of the Product - 123 Color: Black';

/**
 * Array with offers
 * @member {Array.<module:model/Offer>} Offers
 */
Sku2.prototype['Offers'] = undefined;

/**
 * SKU's Reference ID
 * @member {String} RefId
 * @default '1234'
 */
Sku2.prototype['RefId'] = '1234';

/**
 * SKU's unique identifier number
 * @member {String} SkuId
 * @default '1070268'
 */
Sku2.prototype['SkuId'] = '1070268';






export default Sku2;

