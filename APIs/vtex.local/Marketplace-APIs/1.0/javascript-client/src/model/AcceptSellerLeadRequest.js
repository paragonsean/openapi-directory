/**
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Accountable from './Accountable';
import Address from './Address';

/**
 * The AcceptSellerLeadRequest model module.
 * @module model/AcceptSellerLeadRequest
 * @version 1.0
 */
class AcceptSellerLeadRequest {
    /**
     * Constructs a new <code>AcceptSellerLeadRequest</code>.
     * @alias module:model/AcceptSellerLeadRequest
     * @param accountId {String} Marketplace's account ID
     * @param accountable {module:model/Accountable} 
     * @param address {module:model/Address} 
     * @param document {String} Company's legal document code.
     * @param email {String} email of the admin responsible for the seller.
     * @param hasAcceptedLegalTerms {Boolean} Indicates if the seller has accepted the platform's legal terms and conditions.
     * @param salesChannel {String} Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) associated to the seller account created.
     * @param sellerAccountName {String} Name of the seller's account, part of the url of their VTEX Admin.
     * @param sellerEmail {String} Seller's contact email.
     * @param sellerName {String} Seller's store's name.
     * @param sellerType {Number} Type of seller, including:   `1`: regular seller   `2`: whitelabel seller
     */
    constructor(accountId, accountable, address, document, email, hasAcceptedLegalTerms, salesChannel, sellerAccountName, sellerEmail, sellerName, sellerType) { 
        
        AcceptSellerLeadRequest.initialize(this, accountId, accountable, address, document, email, hasAcceptedLegalTerms, salesChannel, sellerAccountName, sellerEmail, sellerName, sellerType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountId, accountable, address, document, email, hasAcceptedLegalTerms, salesChannel, sellerAccountName, sellerEmail, sellerName, sellerType) { 
        obj['accountId'] = accountId || '5fb38ace-d95e-45ad-970d-ee97cce9fbcd';
        obj['accountable'] = accountable;
        obj['address'] = address;
        obj['document'] = document || '12345671000';
        obj['email'] = email || 'seller@email.com';
        obj['hasAcceptedLegalTerms'] = hasAcceptedLegalTerms || true;
        obj['salesChannel'] = salesChannel || '1';
        obj['sellerAccountName'] = sellerAccountName || 'seller123';
        obj['sellerEmail'] = sellerEmail || 'selleremail@email.com';
        obj['sellerName'] = sellerName || 'Seller Name';
        obj['sellerType'] = sellerType || 1;
    }

    /**
     * Constructs a <code>AcceptSellerLeadRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AcceptSellerLeadRequest} obj Optional instance to populate.
     * @return {module:model/AcceptSellerLeadRequest} The populated <code>AcceptSellerLeadRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AcceptSellerLeadRequest();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('accountable')) {
                obj['accountable'] = Accountable.constructFromObject(data['accountable']);
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('document')) {
                obj['document'] = ApiClient.convertToType(data['document'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('hasAcceptedLegalTerms')) {
                obj['hasAcceptedLegalTerms'] = ApiClient.convertToType(data['hasAcceptedLegalTerms'], 'Boolean');
            }
            if (data.hasOwnProperty('salesChannel')) {
                obj['salesChannel'] = ApiClient.convertToType(data['salesChannel'], 'String');
            }
            if (data.hasOwnProperty('sellerAccountName')) {
                obj['sellerAccountName'] = ApiClient.convertToType(data['sellerAccountName'], 'String');
            }
            if (data.hasOwnProperty('sellerEmail')) {
                obj['sellerEmail'] = ApiClient.convertToType(data['sellerEmail'], 'String');
            }
            if (data.hasOwnProperty('sellerName')) {
                obj['sellerName'] = ApiClient.convertToType(data['sellerName'], 'String');
            }
            if (data.hasOwnProperty('sellerType')) {
                obj['sellerType'] = ApiClient.convertToType(data['sellerType'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AcceptSellerLeadRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AcceptSellerLeadRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AcceptSellerLeadRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // validate the optional field `accountable`
        if (data['accountable']) { // data not null
          Accountable.validateJSON(data['accountable']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['document'] && !(typeof data['document'] === 'string' || data['document'] instanceof String)) {
            throw new Error("Expected the field `document` to be a primitive type in the JSON string but got " + data['document']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['salesChannel'] && !(typeof data['salesChannel'] === 'string' || data['salesChannel'] instanceof String)) {
            throw new Error("Expected the field `salesChannel` to be a primitive type in the JSON string but got " + data['salesChannel']);
        }
        // ensure the json data is a string
        if (data['sellerAccountName'] && !(typeof data['sellerAccountName'] === 'string' || data['sellerAccountName'] instanceof String)) {
            throw new Error("Expected the field `sellerAccountName` to be a primitive type in the JSON string but got " + data['sellerAccountName']);
        }
        // ensure the json data is a string
        if (data['sellerEmail'] && !(typeof data['sellerEmail'] === 'string' || data['sellerEmail'] instanceof String)) {
            throw new Error("Expected the field `sellerEmail` to be a primitive type in the JSON string but got " + data['sellerEmail']);
        }
        // ensure the json data is a string
        if (data['sellerName'] && !(typeof data['sellerName'] === 'string' || data['sellerName'] instanceof String)) {
            throw new Error("Expected the field `sellerName` to be a primitive type in the JSON string but got " + data['sellerName']);
        }

        return true;
    }


}

AcceptSellerLeadRequest.RequiredProperties = ["accountId", "accountable", "address", "document", "email", "hasAcceptedLegalTerms", "salesChannel", "sellerAccountName", "sellerEmail", "sellerName", "sellerType"];

/**
 * Marketplace's account ID
 * @member {String} accountId
 * @default '5fb38ace-d95e-45ad-970d-ee97cce9fbcd'
 */
AcceptSellerLeadRequest.prototype['accountId'] = '5fb38ace-d95e-45ad-970d-ee97cce9fbcd';

/**
 * @member {module:model/Accountable} accountable
 */
AcceptSellerLeadRequest.prototype['accountable'] = undefined;

/**
 * @member {module:model/Address} address
 */
AcceptSellerLeadRequest.prototype['address'] = undefined;

/**
 * Company's legal document code.
 * @member {String} document
 * @default '12345671000'
 */
AcceptSellerLeadRequest.prototype['document'] = '12345671000';

/**
 * email of the admin responsible for the seller.
 * @member {String} email
 * @default 'seller@email.com'
 */
AcceptSellerLeadRequest.prototype['email'] = 'seller@email.com';

/**
 * Indicates if the seller has accepted the platform's legal terms and conditions.
 * @member {Boolean} hasAcceptedLegalTerms
 * @default true
 */
AcceptSellerLeadRequest.prototype['hasAcceptedLegalTerms'] = true;

/**
 * Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) associated to the seller account created.
 * @member {String} salesChannel
 * @default '1'
 */
AcceptSellerLeadRequest.prototype['salesChannel'] = '1';

/**
 * Name of the seller's account, part of the url of their VTEX Admin.
 * @member {String} sellerAccountName
 * @default 'seller123'
 */
AcceptSellerLeadRequest.prototype['sellerAccountName'] = 'seller123';

/**
 * Seller's contact email.
 * @member {String} sellerEmail
 * @default 'selleremail@email.com'
 */
AcceptSellerLeadRequest.prototype['sellerEmail'] = 'selleremail@email.com';

/**
 * Seller's store's name.
 * @member {String} sellerName
 * @default 'Seller Name'
 */
AcceptSellerLeadRequest.prototype['sellerName'] = 'Seller Name';

/**
 * Type of seller, including:   `1`: regular seller   `2`: whitelabel seller
 * @member {Number} sellerType
 * @default 1
 */
AcceptSellerLeadRequest.prototype['sellerType'] = 1;






export default AcceptSellerLeadRequest;

