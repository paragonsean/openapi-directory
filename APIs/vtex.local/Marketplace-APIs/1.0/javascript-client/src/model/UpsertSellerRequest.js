/**
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvailableSalesChannel from './AvailableSalesChannel';
import Groups from './Groups';
import SellerCommissionConfiguration from './SellerCommissionConfiguration';

/**
 * The UpsertSellerRequest model module.
 * @module model/UpsertSellerRequest
 * @version 1.0
 */
class UpsertSellerRequest {
    /**
     * Constructs a new <code>UpsertSellerRequest</code>.
     * @alias module:model/UpsertSellerRequest
     * @param cSCIdentification {String} SKU Seller Identification
     * @param account {String} Seller's account name
     * @param allowHybridPayments {Boolean} Flag that allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.
     * @param availableSalesChannels {Array.<module:model/AvailableSalesChannel>} Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) available.
     * @param catalogSystemEndpoint {String} URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `https://{sellerName}.vtexcommercestable.com.br/api/catalog_system/.`
     * @param channel {String} Channel's name.
     * @param deliveryPolicy {String} Text describing the delivery policy previously agreed between the marketplace and the seller.
     * @param description {String} String describing the seller
     * @param email {String} email of the admin responsible for the seller.
     * @param exchangeReturnPolicy {String} Text describing the exchange and return policy previously agreed between the marketplace and the seller.
     * @param fulfillmentEndpoint {String} URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller.   For **external sellers**, please include the URL of the seller's endpoint. External sellers have different endpoint standards. The seller must inform this endpoint to the marketplace so that the marketplace can complete the configuration process.   For **VTEX Stores**, the field format will be as follows: `https://{SellerName}.vtexcommercestable.com.br/api/fulfillment?&sc={TradePolicyID}`.   The value `SellerName` corresponds to the store name if the seller is a VTEX store.   The value `TradePolicyID` corresponds to the [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV#master-data) created by the seller in their own VTEX environment. The seller must inform this ID to the marketplace so that the marketplace can complete the configuration process.   The value `AffiliateID` corresponds to the 3-digit affiliate identification code created by the seller. The seller must inform this ID to the marketplace so that the marketplace can complete the configuration process.   To configure the [Multilevel Omnichannel Inventory](https://developers.vtex.com/vtex-rest-api/docs/multilevel-omnichannel-inventory) feature, fill in this field with the checkout endpoint following this example: `https://{{sellerAccount}}.vtexcommercestable.com.br/api/checkout?affiliateid={{affiliateId}}&sc={{salesChannel`
     * @param fulfillmentSellerId {String}  Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be nulled.
     * @param id {String} Seller ID assigned by the marketplace. We recommend filling it in with the seller's account name.
     * @param isActive {Boolean} Whether the seller is active on the marketplace or not.
     * @param isBetterScope {Boolean} Flag used by the VTEX Checkout to simmulate shopping carts, products and shipping only in sellers with the boolean set as `true`, avoiding performance issues.
     * @param isVtex {Boolean} Flag determining whether the seller configured is a VTEX store or not.
     * @param name {String} Name of the seller's store, configured in the seller's environment.
     * @param password {String} User password, if you are using a hub to integrate with the external seller.
     * @param salesChannel {String} Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) associated to the seller account created. If no value is specified, the system will automatically use the sales channel configured in the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) ID.
     * @param score {Number} Score attributed to this seller.
     * @param securityPrivacyPolicy {String}  Text describing the security policy previously agreed between the marketplace and the seller.
     * @param sellerCommissionConfiguration {Array.<module:model/SellerCommissionConfiguration>} 
     * @param sellerType {Number} Type of seller, including:   `1`: regular seller   `2`: whitelabel seller
     * @param taxCode {String} This code is the Identity Number for the legal entity and is linked to information in its base country.
     * @param trustPolicy {String}  the marketplace must first allow VTEX to share clients’ email addresses with the seller. To do so, it is necessary to set 'AllowEmailSharing' as the value for the TrustPolicy field
     * @param user {String} Username, if you are using a hub to integrate with the external seller.
     */
    constructor(cSCIdentification, account, allowHybridPayments, availableSalesChannels, catalogSystemEndpoint, channel, deliveryPolicy, description, email, exchangeReturnPolicy, fulfillmentEndpoint, fulfillmentSellerId, id, isActive, isBetterScope, isVtex, name, password, salesChannel, score, securityPrivacyPolicy, sellerCommissionConfiguration, sellerType, taxCode, trustPolicy, user) { 
        
        UpsertSellerRequest.initialize(this, cSCIdentification, account, allowHybridPayments, availableSalesChannels, catalogSystemEndpoint, channel, deliveryPolicy, description, email, exchangeReturnPolicy, fulfillmentEndpoint, fulfillmentSellerId, id, isActive, isBetterScope, isVtex, name, password, salesChannel, score, securityPrivacyPolicy, sellerCommissionConfiguration, sellerType, taxCode, trustPolicy, user);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cSCIdentification, account, allowHybridPayments, availableSalesChannels, catalogSystemEndpoint, channel, deliveryPolicy, description, email, exchangeReturnPolicy, fulfillmentEndpoint, fulfillmentSellerId, id, isActive, isBetterScope, isVtex, name, password, salesChannel, score, securityPrivacyPolicy, sellerCommissionConfiguration, sellerType, taxCode, trustPolicy, user) { 
        obj['CSCIdentification'] = cSCIdentification || 'cscidentification 123';
        obj['account'] = account || 'partner01';
        obj['allowHybridPayments'] = allowHybridPayments || false;
        obj['availableSalesChannels'] = availableSalesChannels;
        obj['catalogSystemEndpoint'] = catalogSystemEndpoint || 'https://pedrostore.vtexcommercestable.com.br/api/catalog_system/';
        obj['channel'] = channel || 'channel name';
        obj['deliveryPolicy'] = deliveryPolicy || 'Describe delivery policy';
        obj['description'] = description || 'Seller A, from the B industry.';
        obj['email'] = email || 'seller@email.com';
        obj['exchangeReturnPolicy'] = exchangeReturnPolicy || 'Describe exchange and returns policy';
        obj['fulfillmentEndpoint'] = fulfillmentEndpoint || 'http://{SellerName}.vtexcommercestable.com.br/api/fulfillment?&sc={TradePolicyID}';
        obj['fulfillmentSellerId'] = fulfillmentSellerId || 'seller1';
        obj['id'] = id || 'seller123';
        obj['isActive'] = isActive || true;
        obj['isBetterScope'] = isBetterScope || true;
        obj['isVtex'] = isVtex || true;
        obj['name'] = name || 'Seller Name';
        obj['password'] = password || 'integrationHubPassword';
        obj['salesChannel'] = salesChannel || '1';
        obj['score'] = score || 0;
        obj['securityPrivacyPolicy'] = securityPrivacyPolicy || 'Describe privacy and security policy';
        obj['sellerCommissionConfiguration'] = sellerCommissionConfiguration;
        obj['sellerType'] = sellerType || 1;
        obj['taxCode'] = taxCode || '34444';
        obj['trustPolicy'] = trustPolicy || 'AllowEmailSharing';
        obj['user'] = user || 'integrationHubUserName';
    }

    /**
     * Constructs a <code>UpsertSellerRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpsertSellerRequest} obj Optional instance to populate.
     * @return {module:model/UpsertSellerRequest} The populated <code>UpsertSellerRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpsertSellerRequest();

            if (data.hasOwnProperty('CSCIdentification')) {
                obj['CSCIdentification'] = ApiClient.convertToType(data['CSCIdentification'], 'String');
            }
            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('allowHybridPayments')) {
                obj['allowHybridPayments'] = ApiClient.convertToType(data['allowHybridPayments'], 'Boolean');
            }
            if (data.hasOwnProperty('availableSalesChannels')) {
                obj['availableSalesChannels'] = ApiClient.convertToType(data['availableSalesChannels'], [AvailableSalesChannel]);
            }
            if (data.hasOwnProperty('catalogSystemEndpoint')) {
                obj['catalogSystemEndpoint'] = ApiClient.convertToType(data['catalogSystemEndpoint'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('deliveryPolicy')) {
                obj['deliveryPolicy'] = ApiClient.convertToType(data['deliveryPolicy'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('exchangeReturnPolicy')) {
                obj['exchangeReturnPolicy'] = ApiClient.convertToType(data['exchangeReturnPolicy'], 'String');
            }
            if (data.hasOwnProperty('fulfillmentEndpoint')) {
                obj['fulfillmentEndpoint'] = ApiClient.convertToType(data['fulfillmentEndpoint'], 'String');
            }
            if (data.hasOwnProperty('fulfillmentSellerId')) {
                obj['fulfillmentSellerId'] = ApiClient.convertToType(data['fulfillmentSellerId'], 'String');
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [Groups]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('isBetterScope')) {
                obj['isBetterScope'] = ApiClient.convertToType(data['isBetterScope'], 'Boolean');
            }
            if (data.hasOwnProperty('isVtex')) {
                obj['isVtex'] = ApiClient.convertToType(data['isVtex'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('salesChannel')) {
                obj['salesChannel'] = ApiClient.convertToType(data['salesChannel'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('securityPrivacyPolicy')) {
                obj['securityPrivacyPolicy'] = ApiClient.convertToType(data['securityPrivacyPolicy'], 'String');
            }
            if (data.hasOwnProperty('sellerCommissionConfiguration')) {
                obj['sellerCommissionConfiguration'] = ApiClient.convertToType(data['sellerCommissionConfiguration'], [SellerCommissionConfiguration]);
            }
            if (data.hasOwnProperty('sellerType')) {
                obj['sellerType'] = ApiClient.convertToType(data['sellerType'], 'Number');
            }
            if (data.hasOwnProperty('taxCode')) {
                obj['taxCode'] = ApiClient.convertToType(data['taxCode'], 'String');
            }
            if (data.hasOwnProperty('trustPolicy')) {
                obj['trustPolicy'] = ApiClient.convertToType(data['trustPolicy'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpsertSellerRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpsertSellerRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpsertSellerRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CSCIdentification'] && !(typeof data['CSCIdentification'] === 'string' || data['CSCIdentification'] instanceof String)) {
            throw new Error("Expected the field `CSCIdentification` to be a primitive type in the JSON string but got " + data['CSCIdentification']);
        }
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        if (data['availableSalesChannels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availableSalesChannels'])) {
                throw new Error("Expected the field `availableSalesChannels` to be an array in the JSON data but got " + data['availableSalesChannels']);
            }
            // validate the optional field `availableSalesChannels` (array)
            for (const item of data['availableSalesChannels']) {
                AvailableSalesChannel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['catalogSystemEndpoint'] && !(typeof data['catalogSystemEndpoint'] === 'string' || data['catalogSystemEndpoint'] instanceof String)) {
            throw new Error("Expected the field `catalogSystemEndpoint` to be a primitive type in the JSON string but got " + data['catalogSystemEndpoint']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['deliveryPolicy'] && !(typeof data['deliveryPolicy'] === 'string' || data['deliveryPolicy'] instanceof String)) {
            throw new Error("Expected the field `deliveryPolicy` to be a primitive type in the JSON string but got " + data['deliveryPolicy']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['exchangeReturnPolicy'] && !(typeof data['exchangeReturnPolicy'] === 'string' || data['exchangeReturnPolicy'] instanceof String)) {
            throw new Error("Expected the field `exchangeReturnPolicy` to be a primitive type in the JSON string but got " + data['exchangeReturnPolicy']);
        }
        // ensure the json data is a string
        if (data['fulfillmentEndpoint'] && !(typeof data['fulfillmentEndpoint'] === 'string' || data['fulfillmentEndpoint'] instanceof String)) {
            throw new Error("Expected the field `fulfillmentEndpoint` to be a primitive type in the JSON string but got " + data['fulfillmentEndpoint']);
        }
        // ensure the json data is a string
        if (data['fulfillmentSellerId'] && !(typeof data['fulfillmentSellerId'] === 'string' || data['fulfillmentSellerId'] instanceof String)) {
            throw new Error("Expected the field `fulfillmentSellerId` to be a primitive type in the JSON string but got " + data['fulfillmentSellerId']);
        }
        if (data['groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groups'])) {
                throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
            }
            // validate the optional field `groups` (array)
            for (const item of data['groups']) {
                Groups.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['salesChannel'] && !(typeof data['salesChannel'] === 'string' || data['salesChannel'] instanceof String)) {
            throw new Error("Expected the field `salesChannel` to be a primitive type in the JSON string but got " + data['salesChannel']);
        }
        // ensure the json data is a string
        if (data['securityPrivacyPolicy'] && !(typeof data['securityPrivacyPolicy'] === 'string' || data['securityPrivacyPolicy'] instanceof String)) {
            throw new Error("Expected the field `securityPrivacyPolicy` to be a primitive type in the JSON string but got " + data['securityPrivacyPolicy']);
        }
        if (data['sellerCommissionConfiguration']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sellerCommissionConfiguration'])) {
                throw new Error("Expected the field `sellerCommissionConfiguration` to be an array in the JSON data but got " + data['sellerCommissionConfiguration']);
            }
            // validate the optional field `sellerCommissionConfiguration` (array)
            for (const item of data['sellerCommissionConfiguration']) {
                SellerCommissionConfiguration.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['taxCode'] && !(typeof data['taxCode'] === 'string' || data['taxCode'] instanceof String)) {
            throw new Error("Expected the field `taxCode` to be a primitive type in the JSON string but got " + data['taxCode']);
        }
        // ensure the json data is a string
        if (data['trustPolicy'] && !(typeof data['trustPolicy'] === 'string' || data['trustPolicy'] instanceof String)) {
            throw new Error("Expected the field `trustPolicy` to be a primitive type in the JSON string but got " + data['trustPolicy']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}

UpsertSellerRequest.RequiredProperties = ["CSCIdentification", "account", "allowHybridPayments", "availableSalesChannels", "catalogSystemEndpoint", "channel", "deliveryPolicy", "description", "email", "exchangeReturnPolicy", "fulfillmentEndpoint", "fulfillmentSellerId", "id", "isActive", "isBetterScope", "isVtex", "name", "password", "salesChannel", "score", "securityPrivacyPolicy", "sellerCommissionConfiguration", "sellerType", "taxCode", "trustPolicy", "user"];

/**
 * SKU Seller Identification
 * @member {String} CSCIdentification
 * @default 'cscidentification 123'
 */
UpsertSellerRequest.prototype['CSCIdentification'] = 'cscidentification 123';

/**
 * Seller's account name
 * @member {String} account
 * @default 'partner01'
 */
UpsertSellerRequest.prototype['account'] = 'partner01';

/**
 * Flag that allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.
 * @member {Boolean} allowHybridPayments
 * @default false
 */
UpsertSellerRequest.prototype['allowHybridPayments'] = false;

/**
 * Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) available.
 * @member {Array.<module:model/AvailableSalesChannel>} availableSalesChannels
 */
UpsertSellerRequest.prototype['availableSalesChannels'] = undefined;

/**
 * URL of the endpoint of the seller's catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: `https://{sellerName}.vtexcommercestable.com.br/api/catalog_system/.`
 * @member {String} catalogSystemEndpoint
 * @default 'https://pedrostore.vtexcommercestable.com.br/api/catalog_system/'
 */
UpsertSellerRequest.prototype['catalogSystemEndpoint'] = 'https://pedrostore.vtexcommercestable.com.br/api/catalog_system/';

/**
 * Channel's name.
 * @member {String} channel
 * @default 'channel name'
 */
UpsertSellerRequest.prototype['channel'] = 'channel name';

/**
 * Text describing the delivery policy previously agreed between the marketplace and the seller.
 * @member {String} deliveryPolicy
 * @default 'Describe delivery policy'
 */
UpsertSellerRequest.prototype['deliveryPolicy'] = 'Describe delivery policy';

/**
 * String describing the seller
 * @member {String} description
 * @default 'Seller A, from the B industry.'
 */
UpsertSellerRequest.prototype['description'] = 'Seller A, from the B industry.';

/**
 * email of the admin responsible for the seller.
 * @member {String} email
 * @default 'seller@email.com'
 */
UpsertSellerRequest.prototype['email'] = 'seller@email.com';

/**
 * Text describing the exchange and return policy previously agreed between the marketplace and the seller.
 * @member {String} exchangeReturnPolicy
 * @default 'Describe exchange and returns policy'
 */
UpsertSellerRequest.prototype['exchangeReturnPolicy'] = 'Describe exchange and returns policy';

/**
 * URL of the endpoint for fulfillment of seller's orders, which the marketplace will use to communicate with the seller.   For **external sellers**, please include the URL of the seller's endpoint. External sellers have different endpoint standards. The seller must inform this endpoint to the marketplace so that the marketplace can complete the configuration process.   For **VTEX Stores**, the field format will be as follows: `https://{SellerName}.vtexcommercestable.com.br/api/fulfillment?&sc={TradePolicyID}`.   The value `SellerName` corresponds to the store name if the seller is a VTEX store.   The value `TradePolicyID` corresponds to the [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV#master-data) created by the seller in their own VTEX environment. The seller must inform this ID to the marketplace so that the marketplace can complete the configuration process.   The value `AffiliateID` corresponds to the 3-digit affiliate identification code created by the seller. The seller must inform this ID to the marketplace so that the marketplace can complete the configuration process.   To configure the [Multilevel Omnichannel Inventory](https://developers.vtex.com/vtex-rest-api/docs/multilevel-omnichannel-inventory) feature, fill in this field with the checkout endpoint following this example: `https://{{sellerAccount}}.vtexcommercestable.com.br/api/checkout?affiliateid={{affiliateId}}&sc={{salesChannel`
 * @member {String} fulfillmentEndpoint
 * @default 'http://{SellerName}.vtexcommercestable.com.br/api/fulfillment?&sc={TradePolicyID}'
 */
UpsertSellerRequest.prototype['fulfillmentEndpoint'] = 'http://{SellerName}.vtexcommercestable.com.br/api/fulfillment?&sc={TradePolicyID}';

/**
 *  Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be nulled.
 * @member {String} fulfillmentSellerId
 * @default 'seller1'
 */
UpsertSellerRequest.prototype['fulfillmentSellerId'] = 'seller1';

/**
 * Array of groups attached to the seller. Groups are defined by key-words that group sellers into categories defined by the marketplace when adding a new seller through the [Configure Seller Account](https://developers.vtex.com/vtex-rest-api/reference/sellers#putupsertseller) endpoint. It is possible to filter sellers by group in the Seller Management page in your VTEX Admin. Know more about groups through our [Seller Management](https://help.vtex.com/en/tutorial/gerenciamento-de-sellers-beta--6eEiOISwxuAWJ8w6MtK7iv#groups) documentation.
 * @member {Array.<module:model/Groups>} groups
 */
UpsertSellerRequest.prototype['groups'] = undefined;

/**
 * Seller ID assigned by the marketplace. We recommend filling it in with the seller's account name.
 * @member {String} id
 * @default 'seller123'
 */
UpsertSellerRequest.prototype['id'] = 'seller123';

/**
 * Whether the seller is active on the marketplace or not.
 * @member {Boolean} isActive
 * @default true
 */
UpsertSellerRequest.prototype['isActive'] = true;

/**
 * Flag used by the VTEX Checkout to simmulate shopping carts, products and shipping only in sellers with the boolean set as `true`, avoiding performance issues.
 * @member {Boolean} isBetterScope
 * @default true
 */
UpsertSellerRequest.prototype['isBetterScope'] = true;

/**
 * Flag determining whether the seller configured is a VTEX store or not.
 * @member {Boolean} isVtex
 * @default true
 */
UpsertSellerRequest.prototype['isVtex'] = true;

/**
 * Name of the seller's store, configured in the seller's environment.
 * @member {String} name
 * @default 'Seller Name'
 */
UpsertSellerRequest.prototype['name'] = 'Seller Name';

/**
 * User password, if you are using a hub to integrate with the external seller.
 * @member {String} password
 * @default 'integrationHubPassword'
 */
UpsertSellerRequest.prototype['password'] = 'integrationHubPassword';

/**
 * Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) associated to the seller account created. If no value is specified, the system will automatically use the sales channel configured in the seller's [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) ID.
 * @member {String} salesChannel
 * @default '1'
 */
UpsertSellerRequest.prototype['salesChannel'] = '1';

/**
 * Score attributed to this seller.
 * @member {Number} score
 * @default 0
 */
UpsertSellerRequest.prototype['score'] = 0;

/**
 *  Text describing the security policy previously agreed between the marketplace and the seller.
 * @member {String} securityPrivacyPolicy
 * @default 'Describe privacy and security policy'
 */
UpsertSellerRequest.prototype['securityPrivacyPolicy'] = 'Describe privacy and security policy';

/**
 * @member {Array.<module:model/SellerCommissionConfiguration>} sellerCommissionConfiguration
 */
UpsertSellerRequest.prototype['sellerCommissionConfiguration'] = undefined;

/**
 * Type of seller, including:   `1`: regular seller   `2`: whitelabel seller
 * @member {Number} sellerType
 * @default 1
 */
UpsertSellerRequest.prototype['sellerType'] = 1;

/**
 * This code is the Identity Number for the legal entity and is linked to information in its base country.
 * @member {String} taxCode
 * @default '34444'
 */
UpsertSellerRequest.prototype['taxCode'] = '34444';

/**
 *  the marketplace must first allow VTEX to share clients’ email addresses with the seller. To do so, it is necessary to set 'AllowEmailSharing' as the value for the TrustPolicy field
 * @member {String} trustPolicy
 * @default 'AllowEmailSharing'
 */
UpsertSellerRequest.prototype['trustPolicy'] = 'AllowEmailSharing';

/**
 * Username, if you are using a hub to integrate with the external seller.
 * @member {String} user
 * @default 'integrationHubUserName'
 */
UpsertSellerRequest.prototype['user'] = 'integrationHubUserName';






export default UpsertSellerRequest;

