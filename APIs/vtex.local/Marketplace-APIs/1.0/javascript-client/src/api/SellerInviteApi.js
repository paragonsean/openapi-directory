/**
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptSellerLeadRequest from '../model/AcceptSellerLeadRequest';
import CreateSellerLeadRequest from '../model/CreateSellerLeadRequest';
import ResendSellerLeadRequestRequest from '../model/ResendSellerLeadRequestRequest';

/**
* SellerInvite service.
* @module api/SellerInviteApi
* @version 1.0
*/
export default class SellerInviteApi {

    /**
    * Constructs a new SellerInviteApi. 
    * @alias module:api/SellerInviteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptSellerLead operation.
     * @callback module:api/SellerInviteApi~acceptSellerLeadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept Seller Lead
     * This endpoint is triggered by the seller onboarding wizard, once the seller confirms their invitation. It can be used by marketplace operators to manually accept seller leads, and carry on with their onboarding process.   Note that there's no specific API call that allows status changes. The operations only allow the seller lead to move forward:    From `invite` > to `Accept` > closing on `Create Seller`.    If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead's Invite* endpoint.
     * @param {String} accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account.
     * @param {String} environment Environment to use. Used as part of the URL.
     * @param {String} sellerLeadId ID of the Seller Lead invited to the marketplace.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {module:model/AcceptSellerLeadRequest} acceptSellerLeadRequest 
     * @param {module:api/SellerInviteApi~acceptSellerLeadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    acceptSellerLead(accountName, environment, sellerLeadId, accept, contentType, acceptSellerLeadRequest, callback) {
      let postBody = acceptSellerLeadRequest;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling acceptSellerLead");
      }
      // verify the required parameter 'environment' is set
      if (environment === undefined || environment === null) {
        throw new Error("Missing the required parameter 'environment' when calling acceptSellerLead");
      }
      // verify the required parameter 'sellerLeadId' is set
      if (sellerLeadId === undefined || sellerLeadId === null) {
        throw new Error("Missing the required parameter 'sellerLeadId' when calling acceptSellerLead");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling acceptSellerLead");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling acceptSellerLead");
      }
      // verify the required parameter 'acceptSellerLeadRequest' is set
      if (acceptSellerLeadRequest === undefined || acceptSellerLeadRequest === null) {
        throw new Error("Missing the required parameter 'acceptSellerLeadRequest' when calling acceptSellerLead");
      }

      let pathParams = {
        'sellerLeadId': sellerLeadId
      };
      let queryParams = {
        'accountName': accountName,
        'environment': environment
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seller-register/pvt/seller-leads/{sellerLeadId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSellerFromSellerLead operation.
     * @callback module:api/SellerInviteApi~createSellerFromSellerLeadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Seller From Lead
     * This endpoint is used by marketplace operators to create seller accounts. The request will only accept Seller Leads whose status is `accepted`. If they are already `connected` or `invited`, the call will not be fulfilled.   The creation of the account at VTEX is done by an internal Billing service. There is no seller account and marketplace affiliation if you do not go through this step.   Note that there's no specific API call that allows status changes. The operations only allow the seller lead to move forward:    From `invite` > to `Accept` > closing on `Create Seller`.    If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead's Invite* endpoint.
     * @param {String} accountName Marketplace's account name, the same one inputted on the endpoint's path.
     * @param {String} environment Environment to use. Used as part of the URL.
     * @param {Boolean} isActive Whether the Seller Lead is `active` or not in Seller Portal. This request only supports the value `false` in this field. If that´s not the case, the request will respond with an internal error.
     * @param {String} sellerLeadId ID of the Seller Lead invited to the marketplace.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {module:api/SellerInviteApi~createSellerFromSellerLeadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createSellerFromSellerLead(accountName, environment, isActive, sellerLeadId, accept, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling createSellerFromSellerLead");
      }
      // verify the required parameter 'environment' is set
      if (environment === undefined || environment === null) {
        throw new Error("Missing the required parameter 'environment' when calling createSellerFromSellerLead");
      }
      // verify the required parameter 'isActive' is set
      if (isActive === undefined || isActive === null) {
        throw new Error("Missing the required parameter 'isActive' when calling createSellerFromSellerLead");
      }
      // verify the required parameter 'sellerLeadId' is set
      if (sellerLeadId === undefined || sellerLeadId === null) {
        throw new Error("Missing the required parameter 'sellerLeadId' when calling createSellerFromSellerLead");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createSellerFromSellerLead");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createSellerFromSellerLead");
      }

      let pathParams = {
        'sellerLeadId': sellerLeadId
      };
      let queryParams = {
        'accountName': accountName,
        'environment': environment,
        'isActive': isActive
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seller-register/pvt/seller-leads/{sellerLeadId}/seller', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSellerLead operation.
     * @callback module:api/SellerInviteApi~createSellerLeadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite Seller Lead
     * This API is used by marketplace operators to invite sellers to join their marketplace. The request sends an email to the seller, inviting sellers to activate their store. The invitation's link in the email is unique per user, and available for only seven days for the seller to click and begin activating their store.   The email template is completely customizable. All email templates that VTEX sends to seller leads can be found and edited in the marketplace's VTEX Admin, on the Message Center section.
     * @param {String} accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account.
     * @param {String} environment Environment to use. Used as part of the URL.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {module:model/CreateSellerLeadRequest} createSellerLeadRequest 
     * @param {module:api/SellerInviteApi~createSellerLeadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createSellerLead(accountName, environment, accept, contentType, createSellerLeadRequest, callback) {
      let postBody = createSellerLeadRequest;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling createSellerLead");
      }
      // verify the required parameter 'environment' is set
      if (environment === undefined || environment === null) {
        throw new Error("Missing the required parameter 'environment' when calling createSellerLead");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createSellerLead");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createSellerLead");
      }
      // verify the required parameter 'createSellerLeadRequest' is set
      if (createSellerLeadRequest === undefined || createSellerLeadRequest === null) {
        throw new Error("Missing the required parameter 'createSellerLeadRequest' when calling createSellerLead");
      }

      let pathParams = {
      };
      let queryParams = {
        'accountName': accountName,
        'environment': environment
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seller-register/pvt/seller-leads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSellerLeads operation.
     * @callback module:api/SellerInviteApi~listSellerLeadsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Seller Leads
     * This call's response includes a list of all sellers invited by the marketplace operator to join them. Retrieved results can be filtered by adding optional query fields to the request. Each seller listed includes the following information:   - `id`   - `createdAt`   - `status`   - `isConnected`   - `sellerEmail`   - `sellerName`   - `salesChannel`   - `email`
     * @param {String} accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account.
     * @param {String} environment Environment to use. Used as part of the URL.
     * @param {Number} offset This field determines the limit used to retrieve the list of sellers. The response includes objects starting `from` the value inputted here.
     * @param {Number} limit This field determines the limit used to retrieve the list of sellers. The response includes objects until the value inputted here.            
     * @param {String} isConnected Query param that enables results to be filter by whether the seller lead is already connected to the marketplace or not.
     * @param {String} search Custom search field, that filters sellers invited by specific marketplace operator's  email.
     * @param {String} status Seller Lead's status. Includes `accepted`, `connected` or `invited`.
     * @param {String} orderBy Query param determining how data will be ordered in the response, ordering by name or ID in descending our ascending order. Includes the following values:   `namesort` = desc/asc   `idsort` = desc/asc
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Describes the type of the content being sent.
     * @param {module:api/SellerInviteApi~listSellerLeadsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listSellerLeads(accountName, environment, offset, limit, isConnected, search, status, orderBy, accept, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling listSellerLeads");
      }
      // verify the required parameter 'environment' is set
      if (environment === undefined || environment === null) {
        throw new Error("Missing the required parameter 'environment' when calling listSellerLeads");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling listSellerLeads");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling listSellerLeads");
      }
      // verify the required parameter 'isConnected' is set
      if (isConnected === undefined || isConnected === null) {
        throw new Error("Missing the required parameter 'isConnected' when calling listSellerLeads");
      }
      // verify the required parameter 'search' is set
      if (search === undefined || search === null) {
        throw new Error("Missing the required parameter 'search' when calling listSellerLeads");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling listSellerLeads");
      }
      // verify the required parameter 'orderBy' is set
      if (orderBy === undefined || orderBy === null) {
        throw new Error("Missing the required parameter 'orderBy' when calling listSellerLeads");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling listSellerLeads");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listSellerLeads");
      }

      let pathParams = {
      };
      let queryParams = {
        'accountName': accountName,
        'environment': environment,
        'offset': offset,
        'limit': limit,
        'isConnected': isConnected,
        'search': search,
        'status': status,
        'orderBy': orderBy
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seller-register/pvt/seller-leads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeSellerLead operation.
     * @callback module:api/SellerInviteApi~removeSellerLeadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Seller Lead
     * This endpoint permanently deletes a seller previously invited to the marketplace, if the seller has not already accepted the invitation.
     * @param {String} accountName Name of the VTEX account that belongs to the marketplace.
     * @param {String} environment Environment to use. Used as part of the URL.
     * @param {String} sellerLeadId ID of the Seller Lead invited to the marketplace.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {module:api/SellerInviteApi~removeSellerLeadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeSellerLead(accountName, environment, sellerLeadId, accept, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling removeSellerLead");
      }
      // verify the required parameter 'environment' is set
      if (environment === undefined || environment === null) {
        throw new Error("Missing the required parameter 'environment' when calling removeSellerLead");
      }
      // verify the required parameter 'sellerLeadId' is set
      if (sellerLeadId === undefined || sellerLeadId === null) {
        throw new Error("Missing the required parameter 'sellerLeadId' when calling removeSellerLead");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling removeSellerLead");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling removeSellerLead");
      }

      let pathParams = {
        'sellerLeadId': sellerLeadId
      };
      let queryParams = {
        'accountName': accountName,
        'environment': environment
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seller-register/pvt/seller-leads/{sellerLeadId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resendSellerLeadRequest operation.
     * @callback module:api/SellerInviteApi~resendSellerLeadRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend Seller Lead Invite
     * This endpoint allows marketplace operators to resend an invitation to a seller lead, previously invited to join their marketplace. The request will only accept Seller Leads whose status is `invited`. If they are already `connected` or `accepted`, the call will not be fulfilled.
     * @param {String} accountName Name of the VTEX account that belongs to the marketplace.
     * @param {String} environment Environment to use. Used as part of the URL.
     * @param {String} sellerLeadId ID of the Seller Lead invited to the marketplace.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {module:model/ResendSellerLeadRequestRequest} resendSellerLeadRequestRequest 
     * @param {module:api/SellerInviteApi~resendSellerLeadRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resendSellerLeadRequest(accountName, environment, sellerLeadId, accept, contentType, resendSellerLeadRequestRequest, callback) {
      let postBody = resendSellerLeadRequestRequest;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling resendSellerLeadRequest");
      }
      // verify the required parameter 'environment' is set
      if (environment === undefined || environment === null) {
        throw new Error("Missing the required parameter 'environment' when calling resendSellerLeadRequest");
      }
      // verify the required parameter 'sellerLeadId' is set
      if (sellerLeadId === undefined || sellerLeadId === null) {
        throw new Error("Missing the required parameter 'sellerLeadId' when calling resendSellerLeadRequest");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling resendSellerLeadRequest");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling resendSellerLeadRequest");
      }
      // verify the required parameter 'resendSellerLeadRequestRequest' is set
      if (resendSellerLeadRequestRequest === undefined || resendSellerLeadRequestRequest === null) {
        throw new Error("Missing the required parameter 'resendSellerLeadRequestRequest' when calling resendSellerLeadRequest");
      }

      let pathParams = {
        'sellerLeadId': sellerLeadId
      };
      let queryParams = {
        'accountName': accountName,
        'environment': environment
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seller-register/pvt/seller-leads/{sellerLeadId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveSellerLead operation.
     * @callback module:api/SellerInviteApi~retrieveSellerLeadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Seller Lead's Data by Id
     * Marketplace operators may call this endpoint to retrieve information about a specific seller invited to the Seller Portal, by searching through their `Seller Lead Id`. To know the chosen seller's `sellerLeadId`, marketplace operators can count on the *List Sellers* endpoint's response as well. Each seller listed includes the following information:   - `id`   - `createdAt`   - `status`   - `isConnected`   - `sellerEmail`   - `sellerName`   - `salesChannel`   - `email`
     * @param {String} accountName Name of the VTEX account that belongs to the marketplace.
     * @param {String} environment Environment to use. Used as part of the URL.
     * @param {String} sellerLeadId ID of the Seller Lead invited to the marketplace.
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * @param {String} contentType Type of the content being sent.
     * @param {module:api/SellerInviteApi~retrieveSellerLeadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    retrieveSellerLead(accountName, environment, sellerLeadId, accept, contentType, callback) {
      let postBody = null;
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling retrieveSellerLead");
      }
      // verify the required parameter 'environment' is set
      if (environment === undefined || environment === null) {
        throw new Error("Missing the required parameter 'environment' when calling retrieveSellerLead");
      }
      // verify the required parameter 'sellerLeadId' is set
      if (sellerLeadId === undefined || sellerLeadId === null) {
        throw new Error("Missing the required parameter 'sellerLeadId' when calling retrieveSellerLead");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling retrieveSellerLead");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling retrieveSellerLead");
      }

      let pathParams = {
        'sellerLeadId': sellerLeadId
      };
      let queryParams = {
        'accountName': accountName,
        'environment': environment
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/seller-register/pvt/seller-leads/{sellerLeadId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
