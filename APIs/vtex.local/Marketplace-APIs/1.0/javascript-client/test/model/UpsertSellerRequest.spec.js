/**
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MarketplaceApi);
  }
}(this, function(expect, MarketplaceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MarketplaceApi.UpsertSellerRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UpsertSellerRequest', function() {
    it('should create an instance of UpsertSellerRequest', function() {
      // uncomment below and update the code to test UpsertSellerRequest
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be.a(MarketplaceApi.UpsertSellerRequest);
    });

    it('should have the property cSCIdentification (base name: "CSCIdentification")', function() {
      // uncomment below and update the code to test the property cSCIdentification
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property account (base name: "account")', function() {
      // uncomment below and update the code to test the property account
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property allowHybridPayments (base name: "allowHybridPayments")', function() {
      // uncomment below and update the code to test the property allowHybridPayments
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property availableSalesChannels (base name: "availableSalesChannels")', function() {
      // uncomment below and update the code to test the property availableSalesChannels
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property catalogSystemEndpoint (base name: "catalogSystemEndpoint")', function() {
      // uncomment below and update the code to test the property catalogSystemEndpoint
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property channel (base name: "channel")', function() {
      // uncomment below and update the code to test the property channel
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property deliveryPolicy (base name: "deliveryPolicy")', function() {
      // uncomment below and update the code to test the property deliveryPolicy
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property exchangeReturnPolicy (base name: "exchangeReturnPolicy")', function() {
      // uncomment below and update the code to test the property exchangeReturnPolicy
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property fulfillmentEndpoint (base name: "fulfillmentEndpoint")', function() {
      // uncomment below and update the code to test the property fulfillmentEndpoint
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property fulfillmentSellerId (base name: "fulfillmentSellerId")', function() {
      // uncomment below and update the code to test the property fulfillmentSellerId
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property groups (base name: "groups")', function() {
      // uncomment below and update the code to test the property groups
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property isActive (base name: "isActive")', function() {
      // uncomment below and update the code to test the property isActive
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property isBetterScope (base name: "isBetterScope")', function() {
      // uncomment below and update the code to test the property isBetterScope
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property isVtex (base name: "isVtex")', function() {
      // uncomment below and update the code to test the property isVtex
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property salesChannel (base name: "salesChannel")', function() {
      // uncomment below and update the code to test the property salesChannel
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property score (base name: "score")', function() {
      // uncomment below and update the code to test the property score
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property securityPrivacyPolicy (base name: "securityPrivacyPolicy")', function() {
      // uncomment below and update the code to test the property securityPrivacyPolicy
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property sellerCommissionConfiguration (base name: "sellerCommissionConfiguration")', function() {
      // uncomment below and update the code to test the property sellerCommissionConfiguration
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property sellerType (base name: "sellerType")', function() {
      // uncomment below and update the code to test the property sellerType
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property taxCode (base name: "taxCode")', function() {
      // uncomment below and update the code to test the property taxCode
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property trustPolicy (base name: "trustPolicy")', function() {
      // uncomment below and update the code to test the property trustPolicy
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new MarketplaceApi.UpsertSellerRequest();
      //expect(instance).to.be();
    });

  });

}));
