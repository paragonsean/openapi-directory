/*
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AvailableSalesChannel;
import org.openapitools.client.model.Groups;
import org.openapitools.client.model.SellerCommissionConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpsertSellerRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:15.351495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpsertSellerRequest {
  public static final String SERIALIZED_NAME_CS_C_IDENTIFICATION = "CSCIdentification";
  @SerializedName(SERIALIZED_NAME_CS_C_IDENTIFICATION)
  private String csCIdentification = "cscidentification 123";

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account = "partner01";

  public static final String SERIALIZED_NAME_ALLOW_HYBRID_PAYMENTS = "allowHybridPayments";
  @SerializedName(SERIALIZED_NAME_ALLOW_HYBRID_PAYMENTS)
  private Boolean allowHybridPayments = false;

  public static final String SERIALIZED_NAME_AVAILABLE_SALES_CHANNELS = "availableSalesChannels";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_SALES_CHANNELS)
  private List<AvailableSalesChannel> availableSalesChannels = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATALOG_SYSTEM_ENDPOINT = "catalogSystemEndpoint";
  @SerializedName(SERIALIZED_NAME_CATALOG_SYSTEM_ENDPOINT)
  private String catalogSystemEndpoint = "https://pedrostore.vtexcommercestable.com.br/api/catalog_system/";

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel = "channel name";

  public static final String SERIALIZED_NAME_DELIVERY_POLICY = "deliveryPolicy";
  @SerializedName(SERIALIZED_NAME_DELIVERY_POLICY)
  private String deliveryPolicy = "Describe delivery policy";

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description = "Seller A, from the B industry.";

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email = "seller@email.com";

  public static final String SERIALIZED_NAME_EXCHANGE_RETURN_POLICY = "exchangeReturnPolicy";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RETURN_POLICY)
  private String exchangeReturnPolicy = "Describe exchange and returns policy";

  public static final String SERIALIZED_NAME_FULFILLMENT_ENDPOINT = "fulfillmentEndpoint";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_ENDPOINT)
  private String fulfillmentEndpoint = "http://{SellerName}.vtexcommercestable.com.br/api/fulfillment?&sc={TradePolicyID}";

  public static final String SERIALIZED_NAME_FULFILLMENT_SELLER_ID = "fulfillmentSellerId";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_SELLER_ID)
  private String fulfillmentSellerId = "seller1";

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<Groups> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id = "seller123";

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive = true;

  public static final String SERIALIZED_NAME_IS_BETTER_SCOPE = "isBetterScope";
  @SerializedName(SERIALIZED_NAME_IS_BETTER_SCOPE)
  private Boolean isBetterScope = true;

  public static final String SERIALIZED_NAME_IS_VTEX = "isVtex";
  @SerializedName(SERIALIZED_NAME_IS_VTEX)
  private Boolean isVtex = true;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "Seller Name";

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password = "integrationHubPassword";

  public static final String SERIALIZED_NAME_SALES_CHANNEL = "salesChannel";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNEL)
  private String salesChannel = "1";

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private BigDecimal score = new BigDecimal("0");

  public static final String SERIALIZED_NAME_SECURITY_PRIVACY_POLICY = "securityPrivacyPolicy";
  @SerializedName(SERIALIZED_NAME_SECURITY_PRIVACY_POLICY)
  private String securityPrivacyPolicy = "Describe privacy and security policy";

  public static final String SERIALIZED_NAME_SELLER_COMMISSION_CONFIGURATION = "sellerCommissionConfiguration";
  @SerializedName(SERIALIZED_NAME_SELLER_COMMISSION_CONFIGURATION)
  private List<SellerCommissionConfiguration> sellerCommissionConfiguration = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELLER_TYPE = "sellerType";
  @SerializedName(SERIALIZED_NAME_SELLER_TYPE)
  private Integer sellerType = 1;

  public static final String SERIALIZED_NAME_TAX_CODE = "taxCode";
  @SerializedName(SERIALIZED_NAME_TAX_CODE)
  private String taxCode = "34444";

  public static final String SERIALIZED_NAME_TRUST_POLICY = "trustPolicy";
  @SerializedName(SERIALIZED_NAME_TRUST_POLICY)
  private String trustPolicy = "AllowEmailSharing";

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user = "integrationHubUserName";

  public UpsertSellerRequest() {
  }

  public UpsertSellerRequest csCIdentification(String csCIdentification) {
    this.csCIdentification = csCIdentification;
    return this;
  }

  /**
   * SKU Seller Identification
   * @return csCIdentification
   */
  @javax.annotation.Nonnull
  public String getCsCIdentification() {
    return csCIdentification;
  }

  public void setCsCIdentification(String csCIdentification) {
    this.csCIdentification = csCIdentification;
  }


  public UpsertSellerRequest account(String account) {
    this.account = account;
    return this;
  }

  /**
   * Seller&#39;s account name
   * @return account
   */
  @javax.annotation.Nonnull
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public UpsertSellerRequest allowHybridPayments(Boolean allowHybridPayments) {
    this.allowHybridPayments = allowHybridPayments;
    return this;
  }

  /**
   * Flag that allows customers to use gift cards from the seller to buy their products on the marketplace. It identifies purchases made with a gift card so that only the final price (with discounts applied) is paid to the seller.
   * @return allowHybridPayments
   */
  @javax.annotation.Nonnull
  public Boolean getAllowHybridPayments() {
    return allowHybridPayments;
  }

  public void setAllowHybridPayments(Boolean allowHybridPayments) {
    this.allowHybridPayments = allowHybridPayments;
  }


  public UpsertSellerRequest availableSalesChannels(List<AvailableSalesChannel> availableSalesChannels) {
    this.availableSalesChannels = availableSalesChannels;
    return this;
  }

  public UpsertSellerRequest addAvailableSalesChannelsItem(AvailableSalesChannel availableSalesChannelsItem) {
    if (this.availableSalesChannels == null) {
      this.availableSalesChannels = new ArrayList<>();
    }
    this.availableSalesChannels.add(availableSalesChannelsItem);
    return this;
  }

  /**
   * Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) available.
   * @return availableSalesChannels
   */
  @javax.annotation.Nonnull
  public List<AvailableSalesChannel> getAvailableSalesChannels() {
    return availableSalesChannels;
  }

  public void setAvailableSalesChannels(List<AvailableSalesChannel> availableSalesChannels) {
    this.availableSalesChannels = availableSalesChannels;
  }


  public UpsertSellerRequest catalogSystemEndpoint(String catalogSystemEndpoint) {
    this.catalogSystemEndpoint = catalogSystemEndpoint;
    return this;
  }

  /**
   * URL of the endpoint of the seller&#39;s catalog. This field will only be displayed if the seller type is VTEX Store. The field format will be as follows: &#x60;https://{sellerName}.vtexcommercestable.com.br/api/catalog_system/.&#x60;
   * @return catalogSystemEndpoint
   */
  @javax.annotation.Nonnull
  public String getCatalogSystemEndpoint() {
    return catalogSystemEndpoint;
  }

  public void setCatalogSystemEndpoint(String catalogSystemEndpoint) {
    this.catalogSystemEndpoint = catalogSystemEndpoint;
  }


  public UpsertSellerRequest channel(String channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Channel&#39;s name.
   * @return channel
   */
  @javax.annotation.Nonnull
  public String getChannel() {
    return channel;
  }

  public void setChannel(String channel) {
    this.channel = channel;
  }


  public UpsertSellerRequest deliveryPolicy(String deliveryPolicy) {
    this.deliveryPolicy = deliveryPolicy;
    return this;
  }

  /**
   * Text describing the delivery policy previously agreed between the marketplace and the seller.
   * @return deliveryPolicy
   */
  @javax.annotation.Nonnull
  public String getDeliveryPolicy() {
    return deliveryPolicy;
  }

  public void setDeliveryPolicy(String deliveryPolicy) {
    this.deliveryPolicy = deliveryPolicy;
  }


  public UpsertSellerRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * String describing the seller
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpsertSellerRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * email of the admin responsible for the seller.
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UpsertSellerRequest exchangeReturnPolicy(String exchangeReturnPolicy) {
    this.exchangeReturnPolicy = exchangeReturnPolicy;
    return this;
  }

  /**
   * Text describing the exchange and return policy previously agreed between the marketplace and the seller.
   * @return exchangeReturnPolicy
   */
  @javax.annotation.Nonnull
  public String getExchangeReturnPolicy() {
    return exchangeReturnPolicy;
  }

  public void setExchangeReturnPolicy(String exchangeReturnPolicy) {
    this.exchangeReturnPolicy = exchangeReturnPolicy;
  }


  public UpsertSellerRequest fulfillmentEndpoint(String fulfillmentEndpoint) {
    this.fulfillmentEndpoint = fulfillmentEndpoint;
    return this;
  }

  /**
   * URL of the endpoint for fulfillment of seller&#39;s orders, which the marketplace will use to communicate with the seller.   For **external sellers**, please include the URL of the seller&#39;s endpoint. External sellers have different endpoint standards. The seller must inform this endpoint to the marketplace so that the marketplace can complete the configuration process.   For **VTEX Stores**, the field format will be as follows: &#x60;https://{SellerName}.vtexcommercestable.com.br/api/fulfillment?&amp;sc&#x3D;{TradePolicyID}&#x60;.   The value &#x60;SellerName&#x60; corresponds to the store name if the seller is a VTEX store.   The value &#x60;TradePolicyID&#x60; corresponds to the [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV#master-data) created by the seller in their own VTEX environment. The seller must inform this ID to the marketplace so that the marketplace can complete the configuration process.   The value &#x60;AffiliateID&#x60; corresponds to the 3-digit affiliate identification code created by the seller. The seller must inform this ID to the marketplace so that the marketplace can complete the configuration process.   To configure the [Multilevel Omnichannel Inventory](https://developers.vtex.com/vtex-rest-api/docs/multilevel-omnichannel-inventory) feature, fill in this field with the checkout endpoint following this example: &#x60;https://{{sellerAccount}}.vtexcommercestable.com.br/api/checkout?affiliateid&#x3D;{{affiliateId}}&amp;sc&#x3D;{{salesChannel&#x60;
   * @return fulfillmentEndpoint
   */
  @javax.annotation.Nonnull
  public String getFulfillmentEndpoint() {
    return fulfillmentEndpoint;
  }

  public void setFulfillmentEndpoint(String fulfillmentEndpoint) {
    this.fulfillmentEndpoint = fulfillmentEndpoint;
  }


  public UpsertSellerRequest fulfillmentSellerId(String fulfillmentSellerId) {
    this.fulfillmentSellerId = fulfillmentSellerId;
    return this;
  }

  /**
   *  Identification code of the seller responsible for fulfilling the order. This is an optional field used when a seller sells SKUs from another seller. If the seller sells their own SKUs, it must be nulled.
   * @return fulfillmentSellerId
   */
  @javax.annotation.Nonnull
  public String getFulfillmentSellerId() {
    return fulfillmentSellerId;
  }

  public void setFulfillmentSellerId(String fulfillmentSellerId) {
    this.fulfillmentSellerId = fulfillmentSellerId;
  }


  public UpsertSellerRequest groups(List<Groups> groups) {
    this.groups = groups;
    return this;
  }

  public UpsertSellerRequest addGroupsItem(Groups groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Array of groups attached to the seller. Groups are defined by key-words that group sellers into categories defined by the marketplace when adding a new seller through the [Configure Seller Account](https://developers.vtex.com/vtex-rest-api/reference/sellers#putupsertseller) endpoint. It is possible to filter sellers by group in the Seller Management page in your VTEX Admin. Know more about groups through our [Seller Management](https://help.vtex.com/en/tutorial/gerenciamento-de-sellers-beta--6eEiOISwxuAWJ8w6MtK7iv#groups) documentation.
   * @return groups
   */
  @javax.annotation.Nullable
  public List<Groups> getGroups() {
    return groups;
  }

  public void setGroups(List<Groups> groups) {
    this.groups = groups;
  }


  public UpsertSellerRequest id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Seller ID assigned by the marketplace. We recommend filling it in with the seller&#39;s account name.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UpsertSellerRequest isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Whether the seller is active on the marketplace or not.
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public UpsertSellerRequest isBetterScope(Boolean isBetterScope) {
    this.isBetterScope = isBetterScope;
    return this;
  }

  /**
   * Flag used by the VTEX Checkout to simmulate shopping carts, products and shipping only in sellers with the boolean set as &#x60;true&#x60;, avoiding performance issues.
   * @return isBetterScope
   */
  @javax.annotation.Nonnull
  public Boolean getIsBetterScope() {
    return isBetterScope;
  }

  public void setIsBetterScope(Boolean isBetterScope) {
    this.isBetterScope = isBetterScope;
  }


  public UpsertSellerRequest isVtex(Boolean isVtex) {
    this.isVtex = isVtex;
    return this;
  }

  /**
   * Flag determining whether the seller configured is a VTEX store or not.
   * @return isVtex
   */
  @javax.annotation.Nonnull
  public Boolean getIsVtex() {
    return isVtex;
  }

  public void setIsVtex(Boolean isVtex) {
    this.isVtex = isVtex;
  }


  public UpsertSellerRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the seller&#39;s store, configured in the seller&#39;s environment.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpsertSellerRequest password(String password) {
    this.password = password;
    return this;
  }

  /**
   * User password, if you are using a hub to integrate with the external seller.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public UpsertSellerRequest salesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
    return this;
  }

  /**
   * Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) associated to the seller account created. If no value is specified, the system will automatically use the sales channel configured in the seller&#39;s [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) ID.
   * @return salesChannel
   */
  @javax.annotation.Nonnull
  public String getSalesChannel() {
    return salesChannel;
  }

  public void setSalesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
  }


  public UpsertSellerRequest score(BigDecimal score) {
    this.score = score;
    return this;
  }

  /**
   * Score attributed to this seller.
   * @return score
   */
  @javax.annotation.Nonnull
  public BigDecimal getScore() {
    return score;
  }

  public void setScore(BigDecimal score) {
    this.score = score;
  }


  public UpsertSellerRequest securityPrivacyPolicy(String securityPrivacyPolicy) {
    this.securityPrivacyPolicy = securityPrivacyPolicy;
    return this;
  }

  /**
   *  Text describing the security policy previously agreed between the marketplace and the seller.
   * @return securityPrivacyPolicy
   */
  @javax.annotation.Nullable
  public String getSecurityPrivacyPolicy() {
    return securityPrivacyPolicy;
  }

  public void setSecurityPrivacyPolicy(String securityPrivacyPolicy) {
    this.securityPrivacyPolicy = securityPrivacyPolicy;
  }


  public UpsertSellerRequest sellerCommissionConfiguration(List<SellerCommissionConfiguration> sellerCommissionConfiguration) {
    this.sellerCommissionConfiguration = sellerCommissionConfiguration;
    return this;
  }

  public UpsertSellerRequest addSellerCommissionConfigurationItem(SellerCommissionConfiguration sellerCommissionConfigurationItem) {
    if (this.sellerCommissionConfiguration == null) {
      this.sellerCommissionConfiguration = new ArrayList<>();
    }
    this.sellerCommissionConfiguration.add(sellerCommissionConfigurationItem);
    return this;
  }

  /**
   * Get sellerCommissionConfiguration
   * @return sellerCommissionConfiguration
   */
  @javax.annotation.Nonnull
  public List<SellerCommissionConfiguration> getSellerCommissionConfiguration() {
    return sellerCommissionConfiguration;
  }

  public void setSellerCommissionConfiguration(List<SellerCommissionConfiguration> sellerCommissionConfiguration) {
    this.sellerCommissionConfiguration = sellerCommissionConfiguration;
  }


  public UpsertSellerRequest sellerType(Integer sellerType) {
    this.sellerType = sellerType;
    return this;
  }

  /**
   * Type of seller, including:   &#x60;1&#x60;: regular seller   &#x60;2&#x60;: whitelabel seller
   * @return sellerType
   */
  @javax.annotation.Nonnull
  public Integer getSellerType() {
    return sellerType;
  }

  public void setSellerType(Integer sellerType) {
    this.sellerType = sellerType;
  }


  public UpsertSellerRequest taxCode(String taxCode) {
    this.taxCode = taxCode;
    return this;
  }

  /**
   * This code is the Identity Number for the legal entity and is linked to information in its base country.
   * @return taxCode
   */
  @javax.annotation.Nonnull
  public String getTaxCode() {
    return taxCode;
  }

  public void setTaxCode(String taxCode) {
    this.taxCode = taxCode;
  }


  public UpsertSellerRequest trustPolicy(String trustPolicy) {
    this.trustPolicy = trustPolicy;
    return this;
  }

  /**
   *  the marketplace must first allow VTEX to share clients’ email addresses with the seller. To do so, it is necessary to set &#39;AllowEmailSharing&#39; as the value for the TrustPolicy field
   * @return trustPolicy
   */
  @javax.annotation.Nonnull
  public String getTrustPolicy() {
    return trustPolicy;
  }

  public void setTrustPolicy(String trustPolicy) {
    this.trustPolicy = trustPolicy;
  }


  public UpsertSellerRequest user(String user) {
    this.user = user;
    return this;
  }

  /**
   * Username, if you are using a hub to integrate with the external seller.
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpsertSellerRequest upsertSellerRequest = (UpsertSellerRequest) o;
    return Objects.equals(this.csCIdentification, upsertSellerRequest.csCIdentification) &&
        Objects.equals(this.account, upsertSellerRequest.account) &&
        Objects.equals(this.allowHybridPayments, upsertSellerRequest.allowHybridPayments) &&
        Objects.equals(this.availableSalesChannels, upsertSellerRequest.availableSalesChannels) &&
        Objects.equals(this.catalogSystemEndpoint, upsertSellerRequest.catalogSystemEndpoint) &&
        Objects.equals(this.channel, upsertSellerRequest.channel) &&
        Objects.equals(this.deliveryPolicy, upsertSellerRequest.deliveryPolicy) &&
        Objects.equals(this.description, upsertSellerRequest.description) &&
        Objects.equals(this.email, upsertSellerRequest.email) &&
        Objects.equals(this.exchangeReturnPolicy, upsertSellerRequest.exchangeReturnPolicy) &&
        Objects.equals(this.fulfillmentEndpoint, upsertSellerRequest.fulfillmentEndpoint) &&
        Objects.equals(this.fulfillmentSellerId, upsertSellerRequest.fulfillmentSellerId) &&
        Objects.equals(this.groups, upsertSellerRequest.groups) &&
        Objects.equals(this.id, upsertSellerRequest.id) &&
        Objects.equals(this.isActive, upsertSellerRequest.isActive) &&
        Objects.equals(this.isBetterScope, upsertSellerRequest.isBetterScope) &&
        Objects.equals(this.isVtex, upsertSellerRequest.isVtex) &&
        Objects.equals(this.name, upsertSellerRequest.name) &&
        Objects.equals(this.password, upsertSellerRequest.password) &&
        Objects.equals(this.salesChannel, upsertSellerRequest.salesChannel) &&
        Objects.equals(this.score, upsertSellerRequest.score) &&
        Objects.equals(this.securityPrivacyPolicy, upsertSellerRequest.securityPrivacyPolicy) &&
        Objects.equals(this.sellerCommissionConfiguration, upsertSellerRequest.sellerCommissionConfiguration) &&
        Objects.equals(this.sellerType, upsertSellerRequest.sellerType) &&
        Objects.equals(this.taxCode, upsertSellerRequest.taxCode) &&
        Objects.equals(this.trustPolicy, upsertSellerRequest.trustPolicy) &&
        Objects.equals(this.user, upsertSellerRequest.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(csCIdentification, account, allowHybridPayments, availableSalesChannels, catalogSystemEndpoint, channel, deliveryPolicy, description, email, exchangeReturnPolicy, fulfillmentEndpoint, fulfillmentSellerId, groups, id, isActive, isBetterScope, isVtex, name, password, salesChannel, score, securityPrivacyPolicy, sellerCommissionConfiguration, sellerType, taxCode, trustPolicy, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpsertSellerRequest {\n");
    sb.append("    csCIdentification: ").append(toIndentedString(csCIdentification)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    allowHybridPayments: ").append(toIndentedString(allowHybridPayments)).append("\n");
    sb.append("    availableSalesChannels: ").append(toIndentedString(availableSalesChannels)).append("\n");
    sb.append("    catalogSystemEndpoint: ").append(toIndentedString(catalogSystemEndpoint)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    deliveryPolicy: ").append(toIndentedString(deliveryPolicy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    exchangeReturnPolicy: ").append(toIndentedString(exchangeReturnPolicy)).append("\n");
    sb.append("    fulfillmentEndpoint: ").append(toIndentedString(fulfillmentEndpoint)).append("\n");
    sb.append("    fulfillmentSellerId: ").append(toIndentedString(fulfillmentSellerId)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isBetterScope: ").append(toIndentedString(isBetterScope)).append("\n");
    sb.append("    isVtex: ").append(toIndentedString(isVtex)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    salesChannel: ").append(toIndentedString(salesChannel)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    securityPrivacyPolicy: ").append(toIndentedString(securityPrivacyPolicy)).append("\n");
    sb.append("    sellerCommissionConfiguration: ").append(toIndentedString(sellerCommissionConfiguration)).append("\n");
    sb.append("    sellerType: ").append(toIndentedString(sellerType)).append("\n");
    sb.append("    taxCode: ").append(toIndentedString(taxCode)).append("\n");
    sb.append("    trustPolicy: ").append(toIndentedString(trustPolicy)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CSCIdentification");
    openapiFields.add("account");
    openapiFields.add("allowHybridPayments");
    openapiFields.add("availableSalesChannels");
    openapiFields.add("catalogSystemEndpoint");
    openapiFields.add("channel");
    openapiFields.add("deliveryPolicy");
    openapiFields.add("description");
    openapiFields.add("email");
    openapiFields.add("exchangeReturnPolicy");
    openapiFields.add("fulfillmentEndpoint");
    openapiFields.add("fulfillmentSellerId");
    openapiFields.add("groups");
    openapiFields.add("id");
    openapiFields.add("isActive");
    openapiFields.add("isBetterScope");
    openapiFields.add("isVtex");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("salesChannel");
    openapiFields.add("score");
    openapiFields.add("securityPrivacyPolicy");
    openapiFields.add("sellerCommissionConfiguration");
    openapiFields.add("sellerType");
    openapiFields.add("taxCode");
    openapiFields.add("trustPolicy");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CSCIdentification");
    openapiRequiredFields.add("account");
    openapiRequiredFields.add("allowHybridPayments");
    openapiRequiredFields.add("availableSalesChannels");
    openapiRequiredFields.add("catalogSystemEndpoint");
    openapiRequiredFields.add("channel");
    openapiRequiredFields.add("deliveryPolicy");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("exchangeReturnPolicy");
    openapiRequiredFields.add("fulfillmentEndpoint");
    openapiRequiredFields.add("fulfillmentSellerId");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isActive");
    openapiRequiredFields.add("isBetterScope");
    openapiRequiredFields.add("isVtex");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("password");
    openapiRequiredFields.add("salesChannel");
    openapiRequiredFields.add("score");
    openapiRequiredFields.add("securityPrivacyPolicy");
    openapiRequiredFields.add("sellerCommissionConfiguration");
    openapiRequiredFields.add("sellerType");
    openapiRequiredFields.add("taxCode");
    openapiRequiredFields.add("trustPolicy");
    openapiRequiredFields.add("user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpsertSellerRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpsertSellerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpsertSellerRequest is not found in the empty JSON string", UpsertSellerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpsertSellerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpsertSellerRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpsertSellerRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("CSCIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CSCIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CSCIdentification").toString()));
      }
      if (!jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("availableSalesChannels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableSalesChannels` to be an array in the JSON string but got `%s`", jsonObj.get("availableSalesChannels").toString()));
      }

      JsonArray jsonArrayavailableSalesChannels = jsonObj.getAsJsonArray("availableSalesChannels");
      // validate the required field `availableSalesChannels` (array)
      for (int i = 0; i < jsonArrayavailableSalesChannels.size(); i++) {
        AvailableSalesChannel.validateJsonElement(jsonArrayavailableSalesChannels.get(i));
      };
      if (!jsonObj.get("catalogSystemEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalogSystemEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalogSystemEndpoint").toString()));
      }
      if (!jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if (!jsonObj.get("deliveryPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryPolicy").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("exchangeReturnPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchangeReturnPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchangeReturnPolicy").toString()));
      }
      if (!jsonObj.get("fulfillmentEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfillmentEndpoint").toString()));
      }
      if (!jsonObj.get("fulfillmentSellerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentSellerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfillmentSellerId").toString()));
      }
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
          }

          // validate the optional field `groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            Groups.validateJsonElement(jsonArraygroups.get(i));
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("salesChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesChannel").toString()));
      }
      if ((jsonObj.get("securityPrivacyPolicy") != null && !jsonObj.get("securityPrivacyPolicy").isJsonNull()) && !jsonObj.get("securityPrivacyPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `securityPrivacyPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("securityPrivacyPolicy").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("sellerCommissionConfiguration").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerCommissionConfiguration` to be an array in the JSON string but got `%s`", jsonObj.get("sellerCommissionConfiguration").toString()));
      }

      JsonArray jsonArraysellerCommissionConfiguration = jsonObj.getAsJsonArray("sellerCommissionConfiguration");
      // validate the required field `sellerCommissionConfiguration` (array)
      for (int i = 0; i < jsonArraysellerCommissionConfiguration.size(); i++) {
        SellerCommissionConfiguration.validateJsonElement(jsonArraysellerCommissionConfiguration.get(i));
      };
      if (!jsonObj.get("taxCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxCode").toString()));
      }
      if (!jsonObj.get("trustPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustPolicy").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpsertSellerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpsertSellerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpsertSellerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpsertSellerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpsertSellerRequest>() {
           @Override
           public void write(JsonWriter out, UpsertSellerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpsertSellerRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpsertSellerRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpsertSellerRequest
   * @throws IOException if the JSON string is invalid with respect to UpsertSellerRequest
   */
  public static UpsertSellerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpsertSellerRequest.class);
  }

  /**
   * Convert an instance of UpsertSellerRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

