/*
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MainImage;
import org.openapitools.client.model.Offer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sku2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:15.351495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sku2 {
  public static final String SERIALIZED_NAME_EAN_ID = "EanId";
  @SerializedName(SERIALIZED_NAME_EAN_ID)
  private String eanId = "768655";

  public static final String SERIALIZED_NAME_IS_ACTIVE = "IsActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive = true;

  public static final String SERIALIZED_NAME_MAIN_IMAGE = "MainImage";
  @SerializedName(SERIALIZED_NAME_MAIN_IMAGE)
  private List<MainImage> mainImage = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name = "Color: Black";

  public static final String SERIALIZED_NAME_NAME_COMPLETE = "NameComplete";
  @SerializedName(SERIALIZED_NAME_NAME_COMPLETE)
  private String nameComplete = "Name of the Product - 123 Color: Black";

  public static final String SERIALIZED_NAME_OFFERS = "Offers";
  @SerializedName(SERIALIZED_NAME_OFFERS)
  private List<Offer> offers = new ArrayList<>();

  public static final String SERIALIZED_NAME_REF_ID = "RefId";
  @SerializedName(SERIALIZED_NAME_REF_ID)
  private String refId = "1234";

  public static final String SERIALIZED_NAME_SKU_ID = "SkuId";
  @SerializedName(SERIALIZED_NAME_SKU_ID)
  private String skuId = "1070268";

  public Sku2() {
  }

  public Sku2 eanId(String eanId) {
    this.eanId = eanId;
    return this;
  }

  /**
   * EAN&#39;s unique identifier number
   * @return eanId
   */
  @javax.annotation.Nullable
  public String getEanId() {
    return eanId;
  }

  public void setEanId(String eanId) {
    this.eanId = eanId;
  }


  public Sku2 isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * Whether the SKU is active in the sales channel (true), or not (false).
   * @return isActive
   */
  @javax.annotation.Nonnull
  public Boolean getIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public Sku2 mainImage(List<MainImage> mainImage) {
    this.mainImage = mainImage;
    return this;
  }

  public Sku2 addMainImageItem(MainImage mainImageItem) {
    if (this.mainImage == null) {
      this.mainImage = new ArrayList<>();
    }
    this.mainImage.add(mainImageItem);
    return this;
  }

  /**
   * Main image&#39;s information.
   * @return mainImage
   */
  @javax.annotation.Nonnull
  public List<MainImage> getMainImage() {
    return mainImage;
  }

  public void setMainImage(List<MainImage> mainImage) {
    this.mainImage = mainImage;
  }


  public Sku2 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Summarized name of the SKU
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Sku2 nameComplete(String nameComplete) {
    this.nameComplete = nameComplete;
    return this;
  }

  /**
   * Complete name of the SKU
   * @return nameComplete
   */
  @javax.annotation.Nonnull
  public String getNameComplete() {
    return nameComplete;
  }

  public void setNameComplete(String nameComplete) {
    this.nameComplete = nameComplete;
  }


  public Sku2 offers(List<Offer> offers) {
    this.offers = offers;
    return this;
  }

  public Sku2 addOffersItem(Offer offersItem) {
    if (this.offers == null) {
      this.offers = new ArrayList<>();
    }
    this.offers.add(offersItem);
    return this;
  }

  /**
   * Array with offers
   * @return offers
   */
  @javax.annotation.Nonnull
  public List<Offer> getOffers() {
    return offers;
  }

  public void setOffers(List<Offer> offers) {
    this.offers = offers;
  }


  public Sku2 refId(String refId) {
    this.refId = refId;
    return this;
  }

  /**
   * SKU&#39;s Reference ID
   * @return refId
   */
  @javax.annotation.Nullable
  public String getRefId() {
    return refId;
  }

  public void setRefId(String refId) {
    this.refId = refId;
  }


  public Sku2 skuId(String skuId) {
    this.skuId = skuId;
    return this;
  }

  /**
   * SKU&#39;s unique identifier number
   * @return skuId
   */
  @javax.annotation.Nonnull
  public String getSkuId() {
    return skuId;
  }

  public void setSkuId(String skuId) {
    this.skuId = skuId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sku2 sku2 = (Sku2) o;
    return Objects.equals(this.eanId, sku2.eanId) &&
        Objects.equals(this.isActive, sku2.isActive) &&
        Objects.equals(this.mainImage, sku2.mainImage) &&
        Objects.equals(this.name, sku2.name) &&
        Objects.equals(this.nameComplete, sku2.nameComplete) &&
        Objects.equals(this.offers, sku2.offers) &&
        Objects.equals(this.refId, sku2.refId) &&
        Objects.equals(this.skuId, sku2.skuId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eanId, isActive, mainImage, name, nameComplete, offers, refId, skuId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sku2 {\n");
    sb.append("    eanId: ").append(toIndentedString(eanId)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    mainImage: ").append(toIndentedString(mainImage)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameComplete: ").append(toIndentedString(nameComplete)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("    refId: ").append(toIndentedString(refId)).append("\n");
    sb.append("    skuId: ").append(toIndentedString(skuId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EanId");
    openapiFields.add("IsActive");
    openapiFields.add("MainImage");
    openapiFields.add("Name");
    openapiFields.add("NameComplete");
    openapiFields.add("Offers");
    openapiFields.add("RefId");
    openapiFields.add("SkuId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EanId");
    openapiRequiredFields.add("IsActive");
    openapiRequiredFields.add("MainImage");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("NameComplete");
    openapiRequiredFields.add("Offers");
    openapiRequiredFields.add("RefId");
    openapiRequiredFields.add("SkuId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sku2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sku2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sku2 is not found in the empty JSON string", Sku2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sku2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sku2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Sku2.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("EanId") != null && !jsonObj.get("EanId").isJsonNull()) && !jsonObj.get("EanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EanId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("MainImage").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MainImage` to be an array in the JSON string but got `%s`", jsonObj.get("MainImage").toString()));
      }

      JsonArray jsonArraymainImage = jsonObj.getAsJsonArray("MainImage");
      // validate the required field `MainImage` (array)
      for (int i = 0; i < jsonArraymainImage.size(); i++) {
        MainImage.validateJsonElement(jsonArraymainImage.get(i));
      };
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("NameComplete").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NameComplete` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NameComplete").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Offers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Offers` to be an array in the JSON string but got `%s`", jsonObj.get("Offers").toString()));
      }

      JsonArray jsonArrayoffers = jsonObj.getAsJsonArray("Offers");
      // validate the required field `Offers` (array)
      for (int i = 0; i < jsonArrayoffers.size(); i++) {
        Offer.validateJsonElement(jsonArrayoffers.get(i));
      };
      if ((jsonObj.get("RefId") != null && !jsonObj.get("RefId").isJsonNull()) && !jsonObj.get("RefId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RefId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RefId").toString()));
      }
      if (!jsonObj.get("SkuId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SkuId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SkuId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sku2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sku2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sku2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sku2.class));

       return (TypeAdapter<T>) new TypeAdapter<Sku2>() {
           @Override
           public void write(JsonWriter out, Sku2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sku2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sku2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sku2
   * @throws IOException if the JSON string is invalid with respect to Sku2
   */
  public static Sku2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sku2.class);
  }

  /**
   * Convert an instance of Sku2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

