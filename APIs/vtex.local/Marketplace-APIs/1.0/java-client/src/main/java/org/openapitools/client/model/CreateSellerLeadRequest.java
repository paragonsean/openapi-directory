/*
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Accountable;
import org.openapitools.client.model.Address;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSellerLeadRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:15.351495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSellerLeadRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId = "5fb38ace-d95e-45ad-970d-ee97cce9fbcd";

  public static final String SERIALIZED_NAME_ACCOUNTABLE = "accountable";
  @SerializedName(SERIALIZED_NAME_ACCOUNTABLE)
  private Accountable accountable;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private String document = "12345671000";

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email = "email@email.com";

  public static final String SERIALIZED_NAME_HAS_ACCEPTED_LEGAL_TERMS = "hasAcceptedLegalTerms";
  @SerializedName(SERIALIZED_NAME_HAS_ACCEPTED_LEGAL_TERMS)
  private Boolean hasAcceptedLegalTerms = true;

  public static final String SERIALIZED_NAME_SALES_CHANNEL = "salesChannel";
  @SerializedName(SERIALIZED_NAME_SALES_CHANNEL)
  private String salesChannel = "1";

  public static final String SERIALIZED_NAME_SELLER_ACCOUNT_NAME = "sellerAccountName";
  @SerializedName(SERIALIZED_NAME_SELLER_ACCOUNT_NAME)
  private String sellerAccountName = "seller123";

  public static final String SERIALIZED_NAME_SELLER_EMAIL = "sellerEmail";
  @SerializedName(SERIALIZED_NAME_SELLER_EMAIL)
  private String sellerEmail = "selleremail@email.com";

  public static final String SERIALIZED_NAME_SELLER_NAME = "sellerName";
  @SerializedName(SERIALIZED_NAME_SELLER_NAME)
  private String sellerName = "Seller Name";

  public static final String SERIALIZED_NAME_SELLER_TYPE = "sellerType";
  @SerializedName(SERIALIZED_NAME_SELLER_TYPE)
  private Integer sellerType = 1;

  public CreateSellerLeadRequest() {
  }

  public CreateSellerLeadRequest accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Marketplace&#39;s account ID
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CreateSellerLeadRequest accountable(Accountable accountable) {
    this.accountable = accountable;
    return this;
  }

  /**
   * Get accountable
   * @return accountable
   */
  @javax.annotation.Nonnull
  public Accountable getAccountable() {
    return accountable;
  }

  public void setAccountable(Accountable accountable) {
    this.accountable = accountable;
  }


  public CreateSellerLeadRequest address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nonnull
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public CreateSellerLeadRequest document(String document) {
    this.document = document;
    return this;
  }

  /**
   * Company&#39;s legal document code.
   * @return document
   */
  @javax.annotation.Nonnull
  public String getDocument() {
    return document;
  }

  public void setDocument(String document) {
    this.document = document;
  }


  public CreateSellerLeadRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public CreateSellerLeadRequest hasAcceptedLegalTerms(Boolean hasAcceptedLegalTerms) {
    this.hasAcceptedLegalTerms = hasAcceptedLegalTerms;
    return this;
  }

  /**
   * Indicates if the seller has accepted the platform&#39;s legal terms and conditions.
   * @return hasAcceptedLegalTerms
   */
  @javax.annotation.Nonnull
  public Boolean getHasAcceptedLegalTerms() {
    return hasAcceptedLegalTerms;
  }

  public void setHasAcceptedLegalTerms(Boolean hasAcceptedLegalTerms) {
    this.hasAcceptedLegalTerms = hasAcceptedLegalTerms;
  }


  public CreateSellerLeadRequest salesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
    return this;
  }

  /**
   * Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) associated to the seller account created.
   * @return salesChannel
   */
  @javax.annotation.Nonnull
  public String getSalesChannel() {
    return salesChannel;
  }

  public void setSalesChannel(String salesChannel) {
    this.salesChannel = salesChannel;
  }


  public CreateSellerLeadRequest sellerAccountName(String sellerAccountName) {
    this.sellerAccountName = sellerAccountName;
    return this;
  }

  /**
   * Name of the seller&#39;s account, part of the url of their VTEX Admin.
   * @return sellerAccountName
   */
  @javax.annotation.Nonnull
  public String getSellerAccountName() {
    return sellerAccountName;
  }

  public void setSellerAccountName(String sellerAccountName) {
    this.sellerAccountName = sellerAccountName;
  }


  public CreateSellerLeadRequest sellerEmail(String sellerEmail) {
    this.sellerEmail = sellerEmail;
    return this;
  }

  /**
   * Seller&#39;s contact email;
   * @return sellerEmail
   */
  @javax.annotation.Nonnull
  public String getSellerEmail() {
    return sellerEmail;
  }

  public void setSellerEmail(String sellerEmail) {
    this.sellerEmail = sellerEmail;
  }


  public CreateSellerLeadRequest sellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  /**
   * Seller&#39;s store&#39;s name.
   * @return sellerName
   */
  @javax.annotation.Nonnull
  public String getSellerName() {
    return sellerName;
  }

  public void setSellerName(String sellerName) {
    this.sellerName = sellerName;
  }


  public CreateSellerLeadRequest sellerType(Integer sellerType) {
    this.sellerType = sellerType;
    return this;
  }

  /**
   * Type of seller, including:   &#x60;1&#x60;: regular seller   &#x60;2&#x60;: whitelabel seller
   * @return sellerType
   */
  @javax.annotation.Nonnull
  public Integer getSellerType() {
    return sellerType;
  }

  public void setSellerType(Integer sellerType) {
    this.sellerType = sellerType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSellerLeadRequest createSellerLeadRequest = (CreateSellerLeadRequest) o;
    return Objects.equals(this.accountId, createSellerLeadRequest.accountId) &&
        Objects.equals(this.accountable, createSellerLeadRequest.accountable) &&
        Objects.equals(this.address, createSellerLeadRequest.address) &&
        Objects.equals(this.document, createSellerLeadRequest.document) &&
        Objects.equals(this.email, createSellerLeadRequest.email) &&
        Objects.equals(this.hasAcceptedLegalTerms, createSellerLeadRequest.hasAcceptedLegalTerms) &&
        Objects.equals(this.salesChannel, createSellerLeadRequest.salesChannel) &&
        Objects.equals(this.sellerAccountName, createSellerLeadRequest.sellerAccountName) &&
        Objects.equals(this.sellerEmail, createSellerLeadRequest.sellerEmail) &&
        Objects.equals(this.sellerName, createSellerLeadRequest.sellerName) &&
        Objects.equals(this.sellerType, createSellerLeadRequest.sellerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, accountable, address, document, email, hasAcceptedLegalTerms, salesChannel, sellerAccountName, sellerEmail, sellerName, sellerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSellerLeadRequest {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    accountable: ").append(toIndentedString(accountable)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    hasAcceptedLegalTerms: ").append(toIndentedString(hasAcceptedLegalTerms)).append("\n");
    sb.append("    salesChannel: ").append(toIndentedString(salesChannel)).append("\n");
    sb.append("    sellerAccountName: ").append(toIndentedString(sellerAccountName)).append("\n");
    sb.append("    sellerEmail: ").append(toIndentedString(sellerEmail)).append("\n");
    sb.append("    sellerName: ").append(toIndentedString(sellerName)).append("\n");
    sb.append("    sellerType: ").append(toIndentedString(sellerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("accountable");
    openapiFields.add("address");
    openapiFields.add("document");
    openapiFields.add("email");
    openapiFields.add("hasAcceptedLegalTerms");
    openapiFields.add("salesChannel");
    openapiFields.add("sellerAccountName");
    openapiFields.add("sellerEmail");
    openapiFields.add("sellerName");
    openapiFields.add("sellerType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("accountable");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("document");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("hasAcceptedLegalTerms");
    openapiRequiredFields.add("salesChannel");
    openapiRequiredFields.add("sellerAccountName");
    openapiRequiredFields.add("sellerEmail");
    openapiRequiredFields.add("sellerName");
    openapiRequiredFields.add("sellerType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSellerLeadRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSellerLeadRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSellerLeadRequest is not found in the empty JSON string", CreateSellerLeadRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSellerLeadRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSellerLeadRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSellerLeadRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      // validate the required field `accountable`
      Accountable.validateJsonElement(jsonObj.get("accountable"));
      // validate the required field `address`
      Address.validateJsonElement(jsonObj.get("address"));
      if (!jsonObj.get("document").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("salesChannel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesChannel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesChannel").toString()));
      }
      if (!jsonObj.get("sellerAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerAccountName").toString()));
      }
      if (!jsonObj.get("sellerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerEmail").toString()));
      }
      if (!jsonObj.get("sellerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sellerName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSellerLeadRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSellerLeadRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSellerLeadRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSellerLeadRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSellerLeadRequest>() {
           @Override
           public void write(JsonWriter out, CreateSellerLeadRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSellerLeadRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSellerLeadRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSellerLeadRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSellerLeadRequest
   */
  public static CreateSellerLeadRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSellerLeadRequest.class);
  }

  /**
   * Convert an instance of CreateSellerLeadRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

