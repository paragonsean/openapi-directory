/*
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.UpsertMappingRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SalesChannelMappingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SalesChannelMappingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SalesChannelMappingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for retrieveMapping
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param accountName Name of the VTEX account that belongs to the marketplace. Used as part of the URL (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param an Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveMappingCall(String contentType, String accept, String accountName, String environment, String an, String sellerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/sellers/{sellerId}/sales-channel/mapping"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (an != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("an", an));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveMappingValidateBeforeCall(String contentType, String accept, String accountName, String environment, String an, String sellerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling retrieveMapping(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling retrieveMapping(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling retrieveMapping(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling retrieveMapping(Async)");
        }

        // verify the required parameter 'an' is set
        if (an == null) {
            throw new ApiException("Missing the required parameter 'an' when calling retrieveMapping(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling retrieveMapping(Async)");
        }

        return retrieveMappingCall(contentType, accept, accountName, environment, an, sellerId, _callback);

    }

    /**
     * Get Sales Channel Mapping Data
     * Retrieves information about the mapping between marketplace&#39;s sales channels and a specific seller.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param accountName Name of the VTEX account that belongs to the marketplace. Used as part of the URL (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param an Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> retrieveMapping(String contentType, String accept, String accountName, String environment, String an, String sellerId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = retrieveMappingWithHttpInfo(contentType, accept, accountName, environment, an, sellerId);
        return localVarResp.getData();
    }

    /**
     * Get Sales Channel Mapping Data
     * Retrieves information about the mapping between marketplace&#39;s sales channels and a specific seller.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param accountName Name of the VTEX account that belongs to the marketplace. Used as part of the URL (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param an Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> retrieveMappingWithHttpInfo(String contentType, String accept, String accountName, String environment, String an, String sellerId) throws ApiException {
        okhttp3.Call localVarCall = retrieveMappingValidateBeforeCall(contentType, accept, accountName, environment, an, sellerId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Sales Channel Mapping Data (asynchronously)
     * Retrieves information about the mapping between marketplace&#39;s sales channels and a specific seller.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param accountName Name of the VTEX account that belongs to the marketplace. Used as part of the URL (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param an Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveMappingAsync(String contentType, String accept, String accountName, String environment, String an, String sellerId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveMappingValidateBeforeCall(contentType, accept, accountName, environment, an, sellerId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertMapping
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param accountName Name of the VTEX account that belongs to the marketplace. Used as part of the URL. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param an Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param upsertMappingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertMappingCall(String contentType, String accept, String accountName, String environment, String an, String sellerId, List<UpsertMappingRequest> upsertMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertMappingRequest;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/sellers/{sellerId}/sales-channel/mapping"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (an != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("an", an));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertMappingValidateBeforeCall(String contentType, String accept, String accountName, String environment, String an, String sellerId, List<UpsertMappingRequest> upsertMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling upsertMapping(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling upsertMapping(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling upsertMapping(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling upsertMapping(Async)");
        }

        // verify the required parameter 'an' is set
        if (an == null) {
            throw new ApiException("Missing the required parameter 'an' when calling upsertMapping(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling upsertMapping(Async)");
        }

        // verify the required parameter 'upsertMappingRequest' is set
        if (upsertMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertMappingRequest' when calling upsertMapping(Async)");
        }

        return upsertMappingCall(contentType, accept, accountName, environment, an, sellerId, upsertMappingRequest, _callback);

    }

    /**
     * Upsert Sales Channel Mapping
     * This endpoint allows the marketplace to map its sales channels with a seller&#39;s [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187). The seller can have multiple sales channels associated with the same marketplace, by creating different affiliates. The mapping enables the seller to segment catalog, prices, inventory, logistics, and payments in the marketplace.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param accountName Name of the VTEX account that belongs to the marketplace. Used as part of the URL. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param an Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param upsertMappingRequest  (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> upsertMapping(String contentType, String accept, String accountName, String environment, String an, String sellerId, List<UpsertMappingRequest> upsertMappingRequest) throws ApiException {
        ApiResponse<List<Object>> localVarResp = upsertMappingWithHttpInfo(contentType, accept, accountName, environment, an, sellerId, upsertMappingRequest);
        return localVarResp.getData();
    }

    /**
     * Upsert Sales Channel Mapping
     * This endpoint allows the marketplace to map its sales channels with a seller&#39;s [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187). The seller can have multiple sales channels associated with the same marketplace, by creating different affiliates. The mapping enables the seller to segment catalog, prices, inventory, logistics, and payments in the marketplace.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param accountName Name of the VTEX account that belongs to the marketplace. Used as part of the URL. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param an Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param upsertMappingRequest  (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> upsertMappingWithHttpInfo(String contentType, String accept, String accountName, String environment, String an, String sellerId, List<UpsertMappingRequest> upsertMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertMappingValidateBeforeCall(contentType, accept, accountName, environment, an, sellerId, upsertMappingRequest, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upsert Sales Channel Mapping (asynchronously)
     * This endpoint allows the marketplace to map its sales channels with a seller&#39;s [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187). The seller can have multiple sales channels associated with the same marketplace, by creating different affiliates. The mapping enables the seller to segment catalog, prices, inventory, logistics, and payments in the marketplace.
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param accountName Name of the VTEX account that belongs to the marketplace. Used as part of the URL. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param an Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param upsertMappingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertMappingAsync(String contentType, String accept, String accountName, String environment, String an, String sellerId, List<UpsertMappingRequest> upsertMappingRequest, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertMappingValidateBeforeCall(contentType, accept, accountName, environment, an, sellerId, upsertMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
