/*
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AcceptSellerLeadRequest;
import org.openapitools.client.model.CreateSellerLeadRequest;
import org.openapitools.client.model.ResendSellerLeadRequestRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SellerInviteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SellerInviteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SellerInviteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acceptSellerLead
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param acceptSellerLeadRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptSellerLeadCall(String accountName, String environment, String sellerLeadId, String accept, String contentType, AcceptSellerLeadRequest acceptSellerLeadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = acceptSellerLeadRequest;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/seller-leads/{sellerLeadId}"
            .replace("{" + "sellerLeadId" + "}", localVarApiClient.escapeString(sellerLeadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptSellerLeadValidateBeforeCall(String accountName, String environment, String sellerLeadId, String accept, String contentType, AcceptSellerLeadRequest acceptSellerLeadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling acceptSellerLead(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling acceptSellerLead(Async)");
        }

        // verify the required parameter 'sellerLeadId' is set
        if (sellerLeadId == null) {
            throw new ApiException("Missing the required parameter 'sellerLeadId' when calling acceptSellerLead(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling acceptSellerLead(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling acceptSellerLead(Async)");
        }

        // verify the required parameter 'acceptSellerLeadRequest' is set
        if (acceptSellerLeadRequest == null) {
            throw new ApiException("Missing the required parameter 'acceptSellerLeadRequest' when calling acceptSellerLead(Async)");
        }

        return acceptSellerLeadCall(accountName, environment, sellerLeadId, accept, contentType, acceptSellerLeadRequest, _callback);

    }

    /**
     * Accept Seller Lead
     * This endpoint is triggered by the seller onboarding wizard, once the seller confirms their invitation. It can be used by marketplace operators to manually accept seller leads, and carry on with their onboarding process.   Note that there&#39;s no specific API call that allows status changes. The operations only allow the seller lead to move forward:    From &#x60;invite&#x60; &gt; to &#x60;Accept&#x60; &gt; closing on &#x60;Create Seller&#x60;.    If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead&#39;s Invite* endpoint.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param acceptSellerLeadRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void acceptSellerLead(String accountName, String environment, String sellerLeadId, String accept, String contentType, AcceptSellerLeadRequest acceptSellerLeadRequest) throws ApiException {
        acceptSellerLeadWithHttpInfo(accountName, environment, sellerLeadId, accept, contentType, acceptSellerLeadRequest);
    }

    /**
     * Accept Seller Lead
     * This endpoint is triggered by the seller onboarding wizard, once the seller confirms their invitation. It can be used by marketplace operators to manually accept seller leads, and carry on with their onboarding process.   Note that there&#39;s no specific API call that allows status changes. The operations only allow the seller lead to move forward:    From &#x60;invite&#x60; &gt; to &#x60;Accept&#x60; &gt; closing on &#x60;Create Seller&#x60;.    If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead&#39;s Invite* endpoint.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param acceptSellerLeadRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> acceptSellerLeadWithHttpInfo(String accountName, String environment, String sellerLeadId, String accept, String contentType, AcceptSellerLeadRequest acceptSellerLeadRequest) throws ApiException {
        okhttp3.Call localVarCall = acceptSellerLeadValidateBeforeCall(accountName, environment, sellerLeadId, accept, contentType, acceptSellerLeadRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Accept Seller Lead (asynchronously)
     * This endpoint is triggered by the seller onboarding wizard, once the seller confirms their invitation. It can be used by marketplace operators to manually accept seller leads, and carry on with their onboarding process.   Note that there&#39;s no specific API call that allows status changes. The operations only allow the seller lead to move forward:    From &#x60;invite&#x60; &gt; to &#x60;Accept&#x60; &gt; closing on &#x60;Create Seller&#x60;.    If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead&#39;s Invite* endpoint.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param acceptSellerLeadRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptSellerLeadAsync(String accountName, String environment, String sellerLeadId, String accept, String contentType, AcceptSellerLeadRequest acceptSellerLeadRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptSellerLeadValidateBeforeCall(accountName, environment, sellerLeadId, accept, contentType, acceptSellerLeadRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSellerFromSellerLead
     * @param accountName Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param isActive Whether the Seller Lead is &#x60;active&#x60; or not in Seller Portal. This request only supports the value &#x60;false&#x60; in this field. If that´s not the case, the request will respond with an internal error. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSellerFromSellerLeadCall(String accountName, String environment, Boolean isActive, String sellerLeadId, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/seller-leads/{sellerLeadId}/seller"
            .replace("{" + "sellerLeadId" + "}", localVarApiClient.escapeString(sellerLeadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSellerFromSellerLeadValidateBeforeCall(String accountName, String environment, Boolean isActive, String sellerLeadId, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling createSellerFromSellerLead(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling createSellerFromSellerLead(Async)");
        }

        // verify the required parameter 'isActive' is set
        if (isActive == null) {
            throw new ApiException("Missing the required parameter 'isActive' when calling createSellerFromSellerLead(Async)");
        }

        // verify the required parameter 'sellerLeadId' is set
        if (sellerLeadId == null) {
            throw new ApiException("Missing the required parameter 'sellerLeadId' when calling createSellerFromSellerLead(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createSellerFromSellerLead(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createSellerFromSellerLead(Async)");
        }

        return createSellerFromSellerLeadCall(accountName, environment, isActive, sellerLeadId, accept, contentType, _callback);

    }

    /**
     * Create Seller From Lead
     * This endpoint is used by marketplace operators to create seller accounts. The request will only accept Seller Leads whose status is &#x60;accepted&#x60;. If they are already &#x60;connected&#x60; or &#x60;invited&#x60;, the call will not be fulfilled.   The creation of the account at VTEX is done by an internal Billing service. There is no seller account and marketplace affiliation if you do not go through this step.   Note that there&#39;s no specific API call that allows status changes. The operations only allow the seller lead to move forward:    From &#x60;invite&#x60; &gt; to &#x60;Accept&#x60; &gt; closing on &#x60;Create Seller&#x60;.    If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead&#39;s Invite* endpoint.
     * @param accountName Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param isActive Whether the Seller Lead is &#x60;active&#x60; or not in Seller Portal. This request only supports the value &#x60;false&#x60; in this field. If that´s not the case, the request will respond with an internal error. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void createSellerFromSellerLead(String accountName, String environment, Boolean isActive, String sellerLeadId, String accept, String contentType) throws ApiException {
        createSellerFromSellerLeadWithHttpInfo(accountName, environment, isActive, sellerLeadId, accept, contentType);
    }

    /**
     * Create Seller From Lead
     * This endpoint is used by marketplace operators to create seller accounts. The request will only accept Seller Leads whose status is &#x60;accepted&#x60;. If they are already &#x60;connected&#x60; or &#x60;invited&#x60;, the call will not be fulfilled.   The creation of the account at VTEX is done by an internal Billing service. There is no seller account and marketplace affiliation if you do not go through this step.   Note that there&#39;s no specific API call that allows status changes. The operations only allow the seller lead to move forward:    From &#x60;invite&#x60; &gt; to &#x60;Accept&#x60; &gt; closing on &#x60;Create Seller&#x60;.    If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead&#39;s Invite* endpoint.
     * @param accountName Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param isActive Whether the Seller Lead is &#x60;active&#x60; or not in Seller Portal. This request only supports the value &#x60;false&#x60; in this field. If that´s not the case, the request will respond with an internal error. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createSellerFromSellerLeadWithHttpInfo(String accountName, String environment, Boolean isActive, String sellerLeadId, String accept, String contentType) throws ApiException {
        okhttp3.Call localVarCall = createSellerFromSellerLeadValidateBeforeCall(accountName, environment, isActive, sellerLeadId, accept, contentType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create Seller From Lead (asynchronously)
     * This endpoint is used by marketplace operators to create seller accounts. The request will only accept Seller Leads whose status is &#x60;accepted&#x60;. If they are already &#x60;connected&#x60; or &#x60;invited&#x60;, the call will not be fulfilled.   The creation of the account at VTEX is done by an internal Billing service. There is no seller account and marketplace affiliation if you do not go through this step.   Note that there&#39;s no specific API call that allows status changes. The operations only allow the seller lead to move forward:    From &#x60;invite&#x60; &gt; to &#x60;Accept&#x60; &gt; closing on &#x60;Create Seller&#x60;.    If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead&#39;s Invite* endpoint.
     * @param accountName Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param isActive Whether the Seller Lead is &#x60;active&#x60; or not in Seller Portal. This request only supports the value &#x60;false&#x60; in this field. If that´s not the case, the request will respond with an internal error. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSellerFromSellerLeadAsync(String accountName, String environment, Boolean isActive, String sellerLeadId, String accept, String contentType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSellerFromSellerLeadValidateBeforeCall(accountName, environment, isActive, sellerLeadId, accept, contentType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSellerLead
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param createSellerLeadRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSellerLeadCall(String accountName, String environment, String accept, String contentType, CreateSellerLeadRequest createSellerLeadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSellerLeadRequest;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/seller-leads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSellerLeadValidateBeforeCall(String accountName, String environment, String accept, String contentType, CreateSellerLeadRequest createSellerLeadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling createSellerLead(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling createSellerLead(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createSellerLead(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createSellerLead(Async)");
        }

        // verify the required parameter 'createSellerLeadRequest' is set
        if (createSellerLeadRequest == null) {
            throw new ApiException("Missing the required parameter 'createSellerLeadRequest' when calling createSellerLead(Async)");
        }

        return createSellerLeadCall(accountName, environment, accept, contentType, createSellerLeadRequest, _callback);

    }

    /**
     * Invite Seller Lead
     * This API is used by marketplace operators to invite sellers to join their marketplace. The request sends an email to the seller, inviting sellers to activate their store. The invitation&#39;s link in the email is unique per user, and available for only seven days for the seller to click and begin activating their store.   The email template is completely customizable. All email templates that VTEX sends to seller leads can be found and edited in the marketplace&#39;s VTEX Admin, on the Message Center section.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param createSellerLeadRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void createSellerLead(String accountName, String environment, String accept, String contentType, CreateSellerLeadRequest createSellerLeadRequest) throws ApiException {
        createSellerLeadWithHttpInfo(accountName, environment, accept, contentType, createSellerLeadRequest);
    }

    /**
     * Invite Seller Lead
     * This API is used by marketplace operators to invite sellers to join their marketplace. The request sends an email to the seller, inviting sellers to activate their store. The invitation&#39;s link in the email is unique per user, and available for only seven days for the seller to click and begin activating their store.   The email template is completely customizable. All email templates that VTEX sends to seller leads can be found and edited in the marketplace&#39;s VTEX Admin, on the Message Center section.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param createSellerLeadRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createSellerLeadWithHttpInfo(String accountName, String environment, String accept, String contentType, CreateSellerLeadRequest createSellerLeadRequest) throws ApiException {
        okhttp3.Call localVarCall = createSellerLeadValidateBeforeCall(accountName, environment, accept, contentType, createSellerLeadRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Invite Seller Lead (asynchronously)
     * This API is used by marketplace operators to invite sellers to join their marketplace. The request sends an email to the seller, inviting sellers to activate their store. The invitation&#39;s link in the email is unique per user, and available for only seven days for the seller to click and begin activating their store.   The email template is completely customizable. All email templates that VTEX sends to seller leads can be found and edited in the marketplace&#39;s VTEX Admin, on the Message Center section.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param createSellerLeadRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSellerLeadAsync(String accountName, String environment, String accept, String contentType, CreateSellerLeadRequest createSellerLeadRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSellerLeadValidateBeforeCall(accountName, environment, accept, contentType, createSellerLeadRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSellerLeads
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param offset This field determines the limit used to retrieve the list of sellers. The response includes objects starting &#x60;from&#x60; the value inputted here. (required)
     * @param limit This field determines the limit used to retrieve the list of sellers. The response includes objects until the value inputted here.             (required)
     * @param isConnected Query param that enables results to be filter by whether the seller lead is already connected to the marketplace or not. (required)
     * @param search Custom search field, that filters sellers invited by specific marketplace operator&#39;s  email. (required)
     * @param status Seller Lead&#39;s status. Includes &#x60;accepted&#x60;, &#x60;connected&#x60; or &#x60;invited&#x60;. (required)
     * @param orderBy Query param determining how data will be ordered in the response, ordering by name or ID in descending our ascending order. Includes the following values:   &#x60;namesort&#x60; &#x3D; desc/asc   &#x60;idsort&#x60; &#x3D; desc/asc (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSellerLeadsCall(String accountName, String environment, Integer offset, Integer limit, String isConnected, String search, String status, String orderBy, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/seller-leads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (isConnected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isConnected", isConnected));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSellerLeadsValidateBeforeCall(String accountName, String environment, Integer offset, Integer limit, String isConnected, String search, String status, String orderBy, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling listSellerLeads(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling listSellerLeads(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling listSellerLeads(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling listSellerLeads(Async)");
        }

        // verify the required parameter 'isConnected' is set
        if (isConnected == null) {
            throw new ApiException("Missing the required parameter 'isConnected' when calling listSellerLeads(Async)");
        }

        // verify the required parameter 'search' is set
        if (search == null) {
            throw new ApiException("Missing the required parameter 'search' when calling listSellerLeads(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling listSellerLeads(Async)");
        }

        // verify the required parameter 'orderBy' is set
        if (orderBy == null) {
            throw new ApiException("Missing the required parameter 'orderBy' when calling listSellerLeads(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling listSellerLeads(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listSellerLeads(Async)");
        }

        return listSellerLeadsCall(accountName, environment, offset, limit, isConnected, search, status, orderBy, accept, contentType, _callback);

    }

    /**
     * List Seller Leads
     * This call&#39;s response includes a list of all sellers invited by the marketplace operator to join them. Retrieved results can be filtered by adding optional query fields to the request. Each seller listed includes the following information:   - &#x60;id&#x60;   - &#x60;createdAt&#x60;   - &#x60;status&#x60;   - &#x60;isConnected&#x60;   - &#x60;sellerEmail&#x60;   - &#x60;sellerName&#x60;   - &#x60;salesChannel&#x60;   - &#x60;email&#x60;
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param offset This field determines the limit used to retrieve the list of sellers. The response includes objects starting &#x60;from&#x60; the value inputted here. (required)
     * @param limit This field determines the limit used to retrieve the list of sellers. The response includes objects until the value inputted here.             (required)
     * @param isConnected Query param that enables results to be filter by whether the seller lead is already connected to the marketplace or not. (required)
     * @param search Custom search field, that filters sellers invited by specific marketplace operator&#39;s  email. (required)
     * @param status Seller Lead&#39;s status. Includes &#x60;accepted&#x60;, &#x60;connected&#x60; or &#x60;invited&#x60;. (required)
     * @param orderBy Query param determining how data will be ordered in the response, ordering by name or ID in descending our ascending order. Includes the following values:   &#x60;namesort&#x60; &#x3D; desc/asc   &#x60;idsort&#x60; &#x3D; desc/asc (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void listSellerLeads(String accountName, String environment, Integer offset, Integer limit, String isConnected, String search, String status, String orderBy, String accept, String contentType) throws ApiException {
        listSellerLeadsWithHttpInfo(accountName, environment, offset, limit, isConnected, search, status, orderBy, accept, contentType);
    }

    /**
     * List Seller Leads
     * This call&#39;s response includes a list of all sellers invited by the marketplace operator to join them. Retrieved results can be filtered by adding optional query fields to the request. Each seller listed includes the following information:   - &#x60;id&#x60;   - &#x60;createdAt&#x60;   - &#x60;status&#x60;   - &#x60;isConnected&#x60;   - &#x60;sellerEmail&#x60;   - &#x60;sellerName&#x60;   - &#x60;salesChannel&#x60;   - &#x60;email&#x60;
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param offset This field determines the limit used to retrieve the list of sellers. The response includes objects starting &#x60;from&#x60; the value inputted here. (required)
     * @param limit This field determines the limit used to retrieve the list of sellers. The response includes objects until the value inputted here.             (required)
     * @param isConnected Query param that enables results to be filter by whether the seller lead is already connected to the marketplace or not. (required)
     * @param search Custom search field, that filters sellers invited by specific marketplace operator&#39;s  email. (required)
     * @param status Seller Lead&#39;s status. Includes &#x60;accepted&#x60;, &#x60;connected&#x60; or &#x60;invited&#x60;. (required)
     * @param orderBy Query param determining how data will be ordered in the response, ordering by name or ID in descending our ascending order. Includes the following values:   &#x60;namesort&#x60; &#x3D; desc/asc   &#x60;idsort&#x60; &#x3D; desc/asc (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listSellerLeadsWithHttpInfo(String accountName, String environment, Integer offset, Integer limit, String isConnected, String search, String status, String orderBy, String accept, String contentType) throws ApiException {
        okhttp3.Call localVarCall = listSellerLeadsValidateBeforeCall(accountName, environment, offset, limit, isConnected, search, status, orderBy, accept, contentType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List Seller Leads (asynchronously)
     * This call&#39;s response includes a list of all sellers invited by the marketplace operator to join them. Retrieved results can be filtered by adding optional query fields to the request. Each seller listed includes the following information:   - &#x60;id&#x60;   - &#x60;createdAt&#x60;   - &#x60;status&#x60;   - &#x60;isConnected&#x60;   - &#x60;sellerEmail&#x60;   - &#x60;sellerName&#x60;   - &#x60;salesChannel&#x60;   - &#x60;email&#x60;
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param offset This field determines the limit used to retrieve the list of sellers. The response includes objects starting &#x60;from&#x60; the value inputted here. (required)
     * @param limit This field determines the limit used to retrieve the list of sellers. The response includes objects until the value inputted here.             (required)
     * @param isConnected Query param that enables results to be filter by whether the seller lead is already connected to the marketplace or not. (required)
     * @param search Custom search field, that filters sellers invited by specific marketplace operator&#39;s  email. (required)
     * @param status Seller Lead&#39;s status. Includes &#x60;accepted&#x60;, &#x60;connected&#x60; or &#x60;invited&#x60;. (required)
     * @param orderBy Query param determining how data will be ordered in the response, ordering by name or ID in descending our ascending order. Includes the following values:   &#x60;namesort&#x60; &#x3D; desc/asc   &#x60;idsort&#x60; &#x3D; desc/asc (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSellerLeadsAsync(String accountName, String environment, Integer offset, Integer limit, String isConnected, String search, String status, String orderBy, String accept, String contentType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSellerLeadsValidateBeforeCall(accountName, environment, offset, limit, isConnected, search, status, orderBy, accept, contentType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeSellerLead
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeSellerLeadCall(String accountName, String environment, String sellerLeadId, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/seller-leads/{sellerLeadId}"
            .replace("{" + "sellerLeadId" + "}", localVarApiClient.escapeString(sellerLeadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSellerLeadValidateBeforeCall(String accountName, String environment, String sellerLeadId, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling removeSellerLead(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling removeSellerLead(Async)");
        }

        // verify the required parameter 'sellerLeadId' is set
        if (sellerLeadId == null) {
            throw new ApiException("Missing the required parameter 'sellerLeadId' when calling removeSellerLead(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling removeSellerLead(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling removeSellerLead(Async)");
        }

        return removeSellerLeadCall(accountName, environment, sellerLeadId, accept, contentType, _callback);

    }

    /**
     * Delete Seller Lead
     * This endpoint permanently deletes a seller previously invited to the marketplace, if the seller has not already accepted the invitation.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void removeSellerLead(String accountName, String environment, String sellerLeadId, String accept, String contentType) throws ApiException {
        removeSellerLeadWithHttpInfo(accountName, environment, sellerLeadId, accept, contentType);
    }

    /**
     * Delete Seller Lead
     * This endpoint permanently deletes a seller previously invited to the marketplace, if the seller has not already accepted the invitation.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeSellerLeadWithHttpInfo(String accountName, String environment, String sellerLeadId, String accept, String contentType) throws ApiException {
        okhttp3.Call localVarCall = removeSellerLeadValidateBeforeCall(accountName, environment, sellerLeadId, accept, contentType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Seller Lead (asynchronously)
     * This endpoint permanently deletes a seller previously invited to the marketplace, if the seller has not already accepted the invitation.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeSellerLeadAsync(String accountName, String environment, String sellerLeadId, String accept, String contentType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSellerLeadValidateBeforeCall(accountName, environment, sellerLeadId, accept, contentType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendSellerLeadRequest
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param resendSellerLeadRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendSellerLeadRequestCall(String accountName, String environment, String sellerLeadId, String accept, String contentType, ResendSellerLeadRequestRequest resendSellerLeadRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resendSellerLeadRequestRequest;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/seller-leads/{sellerLeadId}/status"
            .replace("{" + "sellerLeadId" + "}", localVarApiClient.escapeString(sellerLeadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendSellerLeadRequestValidateBeforeCall(String accountName, String environment, String sellerLeadId, String accept, String contentType, ResendSellerLeadRequestRequest resendSellerLeadRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling resendSellerLeadRequest(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling resendSellerLeadRequest(Async)");
        }

        // verify the required parameter 'sellerLeadId' is set
        if (sellerLeadId == null) {
            throw new ApiException("Missing the required parameter 'sellerLeadId' when calling resendSellerLeadRequest(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling resendSellerLeadRequest(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling resendSellerLeadRequest(Async)");
        }

        // verify the required parameter 'resendSellerLeadRequestRequest' is set
        if (resendSellerLeadRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'resendSellerLeadRequestRequest' when calling resendSellerLeadRequest(Async)");
        }

        return resendSellerLeadRequestCall(accountName, environment, sellerLeadId, accept, contentType, resendSellerLeadRequestRequest, _callback);

    }

    /**
     * Resend Seller Lead Invite
     * This endpoint allows marketplace operators to resend an invitation to a seller lead, previously invited to join their marketplace. The request will only accept Seller Leads whose status is &#x60;invited&#x60;. If they are already &#x60;connected&#x60; or &#x60;accepted&#x60;, the call will not be fulfilled.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param resendSellerLeadRequestRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void resendSellerLeadRequest(String accountName, String environment, String sellerLeadId, String accept, String contentType, ResendSellerLeadRequestRequest resendSellerLeadRequestRequest) throws ApiException {
        resendSellerLeadRequestWithHttpInfo(accountName, environment, sellerLeadId, accept, contentType, resendSellerLeadRequestRequest);
    }

    /**
     * Resend Seller Lead Invite
     * This endpoint allows marketplace operators to resend an invitation to a seller lead, previously invited to join their marketplace. The request will only accept Seller Leads whose status is &#x60;invited&#x60;. If they are already &#x60;connected&#x60; or &#x60;accepted&#x60;, the call will not be fulfilled.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param resendSellerLeadRequestRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendSellerLeadRequestWithHttpInfo(String accountName, String environment, String sellerLeadId, String accept, String contentType, ResendSellerLeadRequestRequest resendSellerLeadRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = resendSellerLeadRequestValidateBeforeCall(accountName, environment, sellerLeadId, accept, contentType, resendSellerLeadRequestRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend Seller Lead Invite (asynchronously)
     * This endpoint allows marketplace operators to resend an invitation to a seller lead, previously invited to join their marketplace. The request will only accept Seller Leads whose status is &#x60;invited&#x60;. If they are already &#x60;connected&#x60; or &#x60;accepted&#x60;, the call will not be fulfilled.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param resendSellerLeadRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendSellerLeadRequestAsync(String accountName, String environment, String sellerLeadId, String accept, String contentType, ResendSellerLeadRequestRequest resendSellerLeadRequestRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendSellerLeadRequestValidateBeforeCall(accountName, environment, sellerLeadId, accept, contentType, resendSellerLeadRequestRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveSellerLead
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveSellerLeadCall(String accountName, String environment, String sellerLeadId, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/seller-leads/{sellerLeadId}"
            .replace("{" + "sellerLeadId" + "}", localVarApiClient.escapeString(sellerLeadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveSellerLeadValidateBeforeCall(String accountName, String environment, String sellerLeadId, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling retrieveSellerLead(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling retrieveSellerLead(Async)");
        }

        // verify the required parameter 'sellerLeadId' is set
        if (sellerLeadId == null) {
            throw new ApiException("Missing the required parameter 'sellerLeadId' when calling retrieveSellerLead(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling retrieveSellerLead(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling retrieveSellerLead(Async)");
        }

        return retrieveSellerLeadCall(accountName, environment, sellerLeadId, accept, contentType, _callback);

    }

    /**
     * Get Seller Lead&#39;s Data by Id
     * Marketplace operators may call this endpoint to retrieve information about a specific seller invited to the Seller Portal, by searching through their &#x60;Seller Lead Id&#x60;. To know the chosen seller&#39;s &#x60;sellerLeadId&#x60;, marketplace operators can count on the *List Sellers* endpoint&#39;s response as well. Each seller listed includes the following information:   - &#x60;id&#x60;   - &#x60;createdAt&#x60;   - &#x60;status&#x60;   - &#x60;isConnected&#x60;   - &#x60;sellerEmail&#x60;   - &#x60;sellerName&#x60;   - &#x60;salesChannel&#x60;   - &#x60;email&#x60;
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void retrieveSellerLead(String accountName, String environment, String sellerLeadId, String accept, String contentType) throws ApiException {
        retrieveSellerLeadWithHttpInfo(accountName, environment, sellerLeadId, accept, contentType);
    }

    /**
     * Get Seller Lead&#39;s Data by Id
     * Marketplace operators may call this endpoint to retrieve information about a specific seller invited to the Seller Portal, by searching through their &#x60;Seller Lead Id&#x60;. To know the chosen seller&#39;s &#x60;sellerLeadId&#x60;, marketplace operators can count on the *List Sellers* endpoint&#39;s response as well. Each seller listed includes the following information:   - &#x60;id&#x60;   - &#x60;createdAt&#x60;   - &#x60;status&#x60;   - &#x60;isConnected&#x60;   - &#x60;sellerEmail&#x60;   - &#x60;sellerName&#x60;   - &#x60;salesChannel&#x60;   - &#x60;email&#x60;
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> retrieveSellerLeadWithHttpInfo(String accountName, String environment, String sellerLeadId, String accept, String contentType) throws ApiException {
        okhttp3.Call localVarCall = retrieveSellerLeadValidateBeforeCall(accountName, environment, sellerLeadId, accept, contentType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Seller Lead&#39;s Data by Id (asynchronously)
     * Marketplace operators may call this endpoint to retrieve information about a specific seller invited to the Seller Portal, by searching through their &#x60;Seller Lead Id&#x60;. To know the chosen seller&#39;s &#x60;sellerLeadId&#x60;, marketplace operators can count on the *List Sellers* endpoint&#39;s response as well. Each seller listed includes the following information:   - &#x60;id&#x60;   - &#x60;createdAt&#x60;   - &#x60;status&#x60;   - &#x60;isConnected&#x60;   - &#x60;sellerEmail&#x60;   - &#x60;sellerName&#x60;   - &#x60;salesChannel&#x60;   - &#x60;email&#x60;
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerLeadId ID of the Seller Lead invited to the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveSellerLeadAsync(String accountName, String environment, String sellerLeadId, String accept, String contentType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveSellerLeadValidateBeforeCall(accountName, environment, sellerLeadId, accept, contentType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
