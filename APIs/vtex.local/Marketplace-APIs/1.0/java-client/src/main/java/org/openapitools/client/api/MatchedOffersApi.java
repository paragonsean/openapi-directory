/*
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetMatchedOffersResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MatchedOffersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MatchedOffersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MatchedOffersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getProductoffers
     * @param accountName Name of the VTEX account. Used as part of the URL. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param productId A string that identifies the seller&#39;s product. This is the ID that the marketplace will use for all references to this product, such as price and inventory notifications. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductoffersCall(String accountName, String environment, String contentType, String accept, String productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offer-manager/pvt/product/{productId}"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductoffersValidateBeforeCall(String accountName, String environment, String contentType, String accept, String productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getProductoffers(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling getProductoffers(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getProductoffers(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getProductoffers(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getProductoffers(Async)");
        }

        return getProductoffersCall(accountName, environment, contentType, accept, productId, _callback);

    }

    /**
     * Get Matched Offer&#39;s Data by Product ID
     * Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.   This endpoint retrieves the available offers for a speciic Product ID in the marketplace&#39;s catalog. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace operator, and are currently active in its catalog.   The call returns a list of offers for that ID, that contain the following data:   - Seller that sells the SKU   - Correspondent SKU ID   - SKU&#39;s price value   - Inventory level   - Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) that it is available at.
     * @param accountName Name of the VTEX account. Used as part of the URL. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param productId A string that identifies the seller&#39;s product. This is the ID that the marketplace will use for all references to this product, such as price and inventory notifications. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getProductoffers(String accountName, String environment, String contentType, String accept, String productId) throws ApiException {
        getProductoffersWithHttpInfo(accountName, environment, contentType, accept, productId);
    }

    /**
     * Get Matched Offer&#39;s Data by Product ID
     * Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.   This endpoint retrieves the available offers for a speciic Product ID in the marketplace&#39;s catalog. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace operator, and are currently active in its catalog.   The call returns a list of offers for that ID, that contain the following data:   - Seller that sells the SKU   - Correspondent SKU ID   - SKU&#39;s price value   - Inventory level   - Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) that it is available at.
     * @param accountName Name of the VTEX account. Used as part of the URL. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param productId A string that identifies the seller&#39;s product. This is the ID that the marketplace will use for all references to this product, such as price and inventory notifications. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getProductoffersWithHttpInfo(String accountName, String environment, String contentType, String accept, String productId) throws ApiException {
        okhttp3.Call localVarCall = getProductoffersValidateBeforeCall(accountName, environment, contentType, accept, productId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Matched Offer&#39;s Data by Product ID (asynchronously)
     * Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.   This endpoint retrieves the available offers for a speciic Product ID in the marketplace&#39;s catalog. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace operator, and are currently active in its catalog.   The call returns a list of offers for that ID, that contain the following data:   - Seller that sells the SKU   - Correspondent SKU ID   - SKU&#39;s price value   - Inventory level   - Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) that it is available at.
     * @param accountName Name of the VTEX account. Used as part of the URL. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param productId A string that identifies the seller&#39;s product. This is the ID that the marketplace will use for all references to this product, such as price and inventory notifications. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductoffersAsync(String accountName, String environment, String contentType, String accept, String productId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductoffersValidateBeforeCall(accountName, environment, contentType, accept, productId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSKUoffers
     * @param accountName Name of the VTEX account. Used as part of the URL. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param productId A string that identifies the seller&#39;s product. This is the ID that the marketplace will use for all references to this product, such as price and inventory notifications. (required)
     * @param skuId A string that identifies the seller&#39;s SKU. This is the ID that the marketplace will use for all references to this SKU, such as price and inventory notifications. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSKUoffersCall(String accountName, String environment, String contentType, String accept, String productId, String skuId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offer-manager/pvt/product/{productId}/sku/{skuId}"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "skuId" + "}", localVarApiClient.escapeString(skuId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSKUoffersValidateBeforeCall(String accountName, String environment, String contentType, String accept, String productId, String skuId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getSKUoffers(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling getSKUoffers(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getSKUoffers(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getSKUoffers(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling getSKUoffers(Async)");
        }

        // verify the required parameter 'skuId' is set
        if (skuId == null) {
            throw new ApiException("Missing the required parameter 'skuId' when calling getSKUoffers(Async)");
        }

        return getSKUoffersCall(accountName, environment, contentType, accept, productId, skuId, _callback);

    }

    /**
     * Get Matched Offer&#39;s Data by SKU ID
     * Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.   This endpoint retrieves the available offers for a speciic SKU ID in the marketplace&#39;s catalog. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace operator, and are currently active in its catalog.   The call returns a list of offers for that ID, that contain the following data:   - Seller that sells the SKU   - Correspondent SKU ID   - SKU&#39;s price value   - Inventory level   - Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) that it is available at.
     * @param accountName Name of the VTEX account. Used as part of the URL. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param productId A string that identifies the seller&#39;s product. This is the ID that the marketplace will use for all references to this product, such as price and inventory notifications. (required)
     * @param skuId A string that identifies the seller&#39;s SKU. This is the ID that the marketplace will use for all references to this SKU, such as price and inventory notifications. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getSKUoffers(String accountName, String environment, String contentType, String accept, String productId, String skuId) throws ApiException {
        getSKUoffersWithHttpInfo(accountName, environment, contentType, accept, productId, skuId);
    }

    /**
     * Get Matched Offer&#39;s Data by SKU ID
     * Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.   This endpoint retrieves the available offers for a speciic SKU ID in the marketplace&#39;s catalog. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace operator, and are currently active in its catalog.   The call returns a list of offers for that ID, that contain the following data:   - Seller that sells the SKU   - Correspondent SKU ID   - SKU&#39;s price value   - Inventory level   - Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) that it is available at.
     * @param accountName Name of the VTEX account. Used as part of the URL. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param productId A string that identifies the seller&#39;s product. This is the ID that the marketplace will use for all references to this product, such as price and inventory notifications. (required)
     * @param skuId A string that identifies the seller&#39;s SKU. This is the ID that the marketplace will use for all references to this SKU, such as price and inventory notifications. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSKUoffersWithHttpInfo(String accountName, String environment, String contentType, String accept, String productId, String skuId) throws ApiException {
        okhttp3.Call localVarCall = getSKUoffersValidateBeforeCall(accountName, environment, contentType, accept, productId, skuId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Matched Offer&#39;s Data by SKU ID (asynchronously)
     * Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.   This endpoint retrieves the available offers for a speciic SKU ID in the marketplace&#39;s catalog. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace operator, and are currently active in its catalog.   The call returns a list of offers for that ID, that contain the following data:   - Seller that sells the SKU   - Correspondent SKU ID   - SKU&#39;s price value   - Inventory level   - Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) that it is available at.
     * @param accountName Name of the VTEX account. Used as part of the URL. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param productId A string that identifies the seller&#39;s product. This is the ID that the marketplace will use for all references to this product, such as price and inventory notifications. (required)
     * @param skuId A string that identifies the seller&#39;s SKU. This is the ID that the marketplace will use for all references to this SKU, such as price and inventory notifications. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSKUoffersAsync(String accountName, String environment, String contentType, String accept, String productId, String skuId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSKUoffersValidateBeforeCall(accountName, environment, contentType, accept, productId, skuId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getofferslist
     * @param accountName Name of the VTEX account. Used as part of the URL (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param sort Criteria used to sort the list of offers. For sorting values in ascending order, use &#x60;asc&#x60;, while for descending order, use &#x60;desc&#x60;. To fill in the field, insert the sorting criteria, followed by &#39;asc&#39;, or &#39;desc&#39;, separated by a comma. You can sort by the following criteria:   - **price:** sorts offers by price. *Ascending* goes from lowest to highest price, while *Descending* goes from highest to lowest price.   - **name:** sorts offers by *productName*, in alphabetical order. *Ascending* goes from *A* to *Z*, while *Descending* goes from *Z* to *A*.   - **availability:** availability in the sales channel (sc). The default value is 1.   Ex. sort&#x3D;availability,desc   Ex. sort&#x3D;name,asc   Ex. price,desc (optional)
     * @param rows Number of rows included in the response. Each row corresponds to a single offer. The default amount of rows in the response is 1, and the maximum amount is 50. To have more than one offer listed in the response, please add the &#x60;rows&#x60; parameter with a number greater than 1. (optional, default to 20)
     * @param start Number corresponding to the row from which the offer list will begin, used for pagination. Filters the list of offers by retrieving the offers starting from the row defined. The default value is 0, if the param is not included in the call. (optional, default to 21)
     * @param fq This filter query can be used to filter offers by the criteria described below. It should be filled in by following the format: &#x60;fq&#x3D;{{criteriaName}}:{{criteriaValue}}&#x60;.   - **productId:** integer of the product ID   - **productName:** string of the product&#39;s name   - **skuId:** integer of the SKU ID   - **eanId:** string of the EAN ID   - **refId:** string of the Ref ID   - **categoryId:** integer of the category ID   - **brandId:** integer of the brand ID   - **sellerId:** string of the seller ID   - **sc:** integer of the sales channel&#39;s ID (trade policy in VTEX)   Ex: skuId:172   Ex: categoryId:13   Ex. productName:Product example-123 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getofferslistCall(String accountName, String contentType, String environment, String accept, String sort, Integer rows, Integer start, String fq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/offer-manager/pvt/offers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (rows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rows", rows));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (fq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fq", fq));
        }

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getofferslistValidateBeforeCall(String accountName, String contentType, String environment, String accept, String sort, Integer rows, Integer start, String fq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getofferslist(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getofferslist(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling getofferslist(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getofferslist(Async)");
        }

        return getofferslistCall(accountName, contentType, environment, accept, sort, rows, start, fq, _callback);

    }

    /**
     * Get Matched Offers List
     * Offers are seller&#39;s products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    This endpoint retrieves the available offers in a marketplace. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace, and are currently in its catalog.   It is possible to filter the search through the following parameters:   - rows  - sort   - start   - fq
     * @param accountName Name of the VTEX account. Used as part of the URL (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param sort Criteria used to sort the list of offers. For sorting values in ascending order, use &#x60;asc&#x60;, while for descending order, use &#x60;desc&#x60;. To fill in the field, insert the sorting criteria, followed by &#39;asc&#39;, or &#39;desc&#39;, separated by a comma. You can sort by the following criteria:   - **price:** sorts offers by price. *Ascending* goes from lowest to highest price, while *Descending* goes from highest to lowest price.   - **name:** sorts offers by *productName*, in alphabetical order. *Ascending* goes from *A* to *Z*, while *Descending* goes from *Z* to *A*.   - **availability:** availability in the sales channel (sc). The default value is 1.   Ex. sort&#x3D;availability,desc   Ex. sort&#x3D;name,asc   Ex. price,desc (optional)
     * @param rows Number of rows included in the response. Each row corresponds to a single offer. The default amount of rows in the response is 1, and the maximum amount is 50. To have more than one offer listed in the response, please add the &#x60;rows&#x60; parameter with a number greater than 1. (optional, default to 20)
     * @param start Number corresponding to the row from which the offer list will begin, used for pagination. Filters the list of offers by retrieving the offers starting from the row defined. The default value is 0, if the param is not included in the call. (optional, default to 21)
     * @param fq This filter query can be used to filter offers by the criteria described below. It should be filled in by following the format: &#x60;fq&#x3D;{{criteriaName}}:{{criteriaValue}}&#x60;.   - **productId:** integer of the product ID   - **productName:** string of the product&#39;s name   - **skuId:** integer of the SKU ID   - **eanId:** string of the EAN ID   - **refId:** string of the Ref ID   - **categoryId:** integer of the category ID   - **brandId:** integer of the brand ID   - **sellerId:** string of the seller ID   - **sc:** integer of the sales channel&#39;s ID (trade policy in VTEX)   Ex: skuId:172   Ex: categoryId:13   Ex. productName:Product example-123 (optional)
     * @return List&lt;GetMatchedOffersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<GetMatchedOffersResponse> getofferslist(String accountName, String contentType, String environment, String accept, String sort, Integer rows, Integer start, String fq) throws ApiException {
        ApiResponse<List<GetMatchedOffersResponse>> localVarResp = getofferslistWithHttpInfo(accountName, contentType, environment, accept, sort, rows, start, fq);
        return localVarResp.getData();
    }

    /**
     * Get Matched Offers List
     * Offers are seller&#39;s products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    This endpoint retrieves the available offers in a marketplace. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace, and are currently in its catalog.   It is possible to filter the search through the following parameters:   - rows  - sort   - start   - fq
     * @param accountName Name of the VTEX account. Used as part of the URL (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param sort Criteria used to sort the list of offers. For sorting values in ascending order, use &#x60;asc&#x60;, while for descending order, use &#x60;desc&#x60;. To fill in the field, insert the sorting criteria, followed by &#39;asc&#39;, or &#39;desc&#39;, separated by a comma. You can sort by the following criteria:   - **price:** sorts offers by price. *Ascending* goes from lowest to highest price, while *Descending* goes from highest to lowest price.   - **name:** sorts offers by *productName*, in alphabetical order. *Ascending* goes from *A* to *Z*, while *Descending* goes from *Z* to *A*.   - **availability:** availability in the sales channel (sc). The default value is 1.   Ex. sort&#x3D;availability,desc   Ex. sort&#x3D;name,asc   Ex. price,desc (optional)
     * @param rows Number of rows included in the response. Each row corresponds to a single offer. The default amount of rows in the response is 1, and the maximum amount is 50. To have more than one offer listed in the response, please add the &#x60;rows&#x60; parameter with a number greater than 1. (optional, default to 20)
     * @param start Number corresponding to the row from which the offer list will begin, used for pagination. Filters the list of offers by retrieving the offers starting from the row defined. The default value is 0, if the param is not included in the call. (optional, default to 21)
     * @param fq This filter query can be used to filter offers by the criteria described below. It should be filled in by following the format: &#x60;fq&#x3D;{{criteriaName}}:{{criteriaValue}}&#x60;.   - **productId:** integer of the product ID   - **productName:** string of the product&#39;s name   - **skuId:** integer of the SKU ID   - **eanId:** string of the EAN ID   - **refId:** string of the Ref ID   - **categoryId:** integer of the category ID   - **brandId:** integer of the brand ID   - **sellerId:** string of the seller ID   - **sc:** integer of the sales channel&#39;s ID (trade policy in VTEX)   Ex: skuId:172   Ex: categoryId:13   Ex. productName:Product example-123 (optional)
     * @return ApiResponse&lt;List&lt;GetMatchedOffersResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetMatchedOffersResponse>> getofferslistWithHttpInfo(String accountName, String contentType, String environment, String accept, String sort, Integer rows, Integer start, String fq) throws ApiException {
        okhttp3.Call localVarCall = getofferslistValidateBeforeCall(accountName, contentType, environment, accept, sort, rows, start, fq, null);
        Type localVarReturnType = new TypeToken<List<GetMatchedOffersResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Matched Offers List (asynchronously)
     * Offers are seller&#39;s products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    This endpoint retrieves the available offers in a marketplace. It differs from the Get Suggestions endpoints, since it retrieves products that were already matched by the marketplace, and are currently in its catalog.   It is possible to filter the search through the following parameters:   - rows  - sort   - start   - fq
     * @param accountName Name of the VTEX account. Used as part of the URL (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param sort Criteria used to sort the list of offers. For sorting values in ascending order, use &#x60;asc&#x60;, while for descending order, use &#x60;desc&#x60;. To fill in the field, insert the sorting criteria, followed by &#39;asc&#39;, or &#39;desc&#39;, separated by a comma. You can sort by the following criteria:   - **price:** sorts offers by price. *Ascending* goes from lowest to highest price, while *Descending* goes from highest to lowest price.   - **name:** sorts offers by *productName*, in alphabetical order. *Ascending* goes from *A* to *Z*, while *Descending* goes from *Z* to *A*.   - **availability:** availability in the sales channel (sc). The default value is 1.   Ex. sort&#x3D;availability,desc   Ex. sort&#x3D;name,asc   Ex. price,desc (optional)
     * @param rows Number of rows included in the response. Each row corresponds to a single offer. The default amount of rows in the response is 1, and the maximum amount is 50. To have more than one offer listed in the response, please add the &#x60;rows&#x60; parameter with a number greater than 1. (optional, default to 20)
     * @param start Number corresponding to the row from which the offer list will begin, used for pagination. Filters the list of offers by retrieving the offers starting from the row defined. The default value is 0, if the param is not included in the call. (optional, default to 21)
     * @param fq This filter query can be used to filter offers by the criteria described below. It should be filled in by following the format: &#x60;fq&#x3D;{{criteriaName}}:{{criteriaValue}}&#x60;.   - **productId:** integer of the product ID   - **productName:** string of the product&#39;s name   - **skuId:** integer of the SKU ID   - **eanId:** string of the EAN ID   - **refId:** string of the Ref ID   - **categoryId:** integer of the category ID   - **brandId:** integer of the brand ID   - **sellerId:** string of the seller ID   - **sc:** integer of the sales channel&#39;s ID (trade policy in VTEX)   Ex: skuId:172   Ex: categoryId:13   Ex. productName:Product example-123 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getofferslistAsync(String accountName, String contentType, String environment, String accept, String sort, Integer rows, Integer start, String fq, final ApiCallback<List<GetMatchedOffersResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getofferslistValidateBeforeCall(accountName, contentType, environment, accept, sort, rows, start, fq, _callback);
        Type localVarReturnType = new TypeToken<List<GetMatchedOffersResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
