/*
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SellerCommissionConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:15.351495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SellerCommissionConfiguration {
  public static final String SERIALIZED_NAME_CATEGORIES_COMMISSION_CONFIGURATION = "categoriesCommissionConfiguration";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_COMMISSION_CONFIGURATION)
  private List<String> categoriesCommissionConfiguration = new ArrayList<>();

  public static final String SERIALIZED_NAME_FREIGHT_COMMISSION_PERCENTAGE = "freightCommissionPercentage";
  @SerializedName(SERIALIZED_NAME_FREIGHT_COMMISSION_PERCENTAGE)
  private BigDecimal freightCommissionPercentage = new BigDecimal("2.43");

  public static final String SERIALIZED_NAME_PRODUCT_COMMISSION_PERCENTAGE = "productCommissionPercentage";
  @SerializedName(SERIALIZED_NAME_PRODUCT_COMMISSION_PERCENTAGE)
  private BigDecimal productCommissionPercentage = new BigDecimal("9.85");

  public SellerCommissionConfiguration() {
  }

  public SellerCommissionConfiguration categoriesCommissionConfiguration(List<String> categoriesCommissionConfiguration) {
    this.categoriesCommissionConfiguration = categoriesCommissionConfiguration;
    return this;
  }

  public SellerCommissionConfiguration addCategoriesCommissionConfigurationItem(String categoriesCommissionConfigurationItem) {
    if (this.categoriesCommissionConfiguration == null) {
      this.categoriesCommissionConfiguration = new ArrayList<>();
    }
    this.categoriesCommissionConfiguration.add(categoriesCommissionConfigurationItem);
    return this;
  }

  /**
   * Array with percentage of the comission applied to categories in decimals.
   * @return categoriesCommissionConfiguration
   */
  @javax.annotation.Nonnull
  public List<String> getCategoriesCommissionConfiguration() {
    return categoriesCommissionConfiguration;
  }

  public void setCategoriesCommissionConfiguration(List<String> categoriesCommissionConfiguration) {
    this.categoriesCommissionConfiguration = categoriesCommissionConfiguration;
  }


  public SellerCommissionConfiguration freightCommissionPercentage(BigDecimal freightCommissionPercentage) {
    this.freightCommissionPercentage = freightCommissionPercentage;
    return this;
  }

  /**
   * Percentage of the comission applied to the freight in decimals.
   * @return freightCommissionPercentage
   */
  @javax.annotation.Nonnull
  public BigDecimal getFreightCommissionPercentage() {
    return freightCommissionPercentage;
  }

  public void setFreightCommissionPercentage(BigDecimal freightCommissionPercentage) {
    this.freightCommissionPercentage = freightCommissionPercentage;
  }


  public SellerCommissionConfiguration productCommissionPercentage(BigDecimal productCommissionPercentage) {
    this.productCommissionPercentage = productCommissionPercentage;
    return this;
  }

  /**
   * Percentage of the comission applied to the product in decimals.
   * @return productCommissionPercentage
   */
  @javax.annotation.Nonnull
  public BigDecimal getProductCommissionPercentage() {
    return productCommissionPercentage;
  }

  public void setProductCommissionPercentage(BigDecimal productCommissionPercentage) {
    this.productCommissionPercentage = productCommissionPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SellerCommissionConfiguration sellerCommissionConfiguration = (SellerCommissionConfiguration) o;
    return Objects.equals(this.categoriesCommissionConfiguration, sellerCommissionConfiguration.categoriesCommissionConfiguration) &&
        Objects.equals(this.freightCommissionPercentage, sellerCommissionConfiguration.freightCommissionPercentage) &&
        Objects.equals(this.productCommissionPercentage, sellerCommissionConfiguration.productCommissionPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoriesCommissionConfiguration, freightCommissionPercentage, productCommissionPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SellerCommissionConfiguration {\n");
    sb.append("    categoriesCommissionConfiguration: ").append(toIndentedString(categoriesCommissionConfiguration)).append("\n");
    sb.append("    freightCommissionPercentage: ").append(toIndentedString(freightCommissionPercentage)).append("\n");
    sb.append("    productCommissionPercentage: ").append(toIndentedString(productCommissionPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categoriesCommissionConfiguration");
    openapiFields.add("freightCommissionPercentage");
    openapiFields.add("productCommissionPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("categoriesCommissionConfiguration");
    openapiRequiredFields.add("freightCommissionPercentage");
    openapiRequiredFields.add("productCommissionPercentage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SellerCommissionConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SellerCommissionConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SellerCommissionConfiguration is not found in the empty JSON string", SellerCommissionConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SellerCommissionConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SellerCommissionConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SellerCommissionConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("categoriesCommissionConfiguration") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("categoriesCommissionConfiguration").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoriesCommissionConfiguration` to be an array in the JSON string but got `%s`", jsonObj.get("categoriesCommissionConfiguration").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SellerCommissionConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SellerCommissionConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SellerCommissionConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SellerCommissionConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<SellerCommissionConfiguration>() {
           @Override
           public void write(JsonWriter out, SellerCommissionConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SellerCommissionConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SellerCommissionConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SellerCommissionConfiguration
   * @throws IOException if the JSON string is invalid with respect to SellerCommissionConfiguration
   */
  public static SellerCommissionConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SellerCommissionConfiguration.class);
  }

  /**
   * Convert an instance of SellerCommissionConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

