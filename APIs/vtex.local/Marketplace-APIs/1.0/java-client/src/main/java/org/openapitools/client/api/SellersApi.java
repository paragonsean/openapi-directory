/*
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.RequestBodyInner;
import org.openapitools.client.model.UpsertSellerRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SellersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SellersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SellersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getListSellers
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param from The start number of pagination, being &#x60;0&#x60; the default value. (optional, default to 0)
     * @param to The end number of pagination, being &#x60;100&#x60; the default value. (optional, default to 100)
     * @param keyword Search sellers by a keyword in &#x60;sellerId&#x60; or &#x60;sellerName&#x60;. (optional, default to keyword)
     * @param integration Filters sellers by the name of who made the integration, if VTEX or an external hub. The possible values for VTEX integrations are: &#x60;vtex-sellerportal&#x60;, &#x60;vtex-seller&#x60; and &#x60;vtex-franchise&#x60;. (optional, default to vtex-seller)
     * @param group Groups are defined by keywords that group sellers into categories defined by the marketplace. (optional, default to Group)
     * @param isActive Enables to filter sellers that are active (&#x60;true&#x60;) or unactive (&#x60;false&#x60;) in the marketplace. (optional, default to false)
     * @param isBetterScope The flag &#x60;isBetterScope&#x60; is used by the VTEX Checkout to simulate shopping carts, products, and shipping only in sellers with the field set as &#x60;true&#x60;, avoiding performance issues. When used as a query param, &#x60;isBetterScope&#x60; filters sellers that have the flag set as &#x60;true&#x60; or &#x60;false&#x60;. (optional, default to false)
     * @param isVtex When set as &#x60;true&#x60;, the list returned will be of sellers who have a VTEX store configured. When set as &#x60;false&#x60;, the list will be of sellers who do not have a VTEX store configured. (optional, default to false)
     * @param sc Filters sellers available for the marketplace&#39;s sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) indicated in this field. (optional, default to 1)
     * @param sellerType Filters sellers by their type, which can be regular seller (&#x60;1&#x60;) or whitelabel seller (&#x60;2&#x60;). (optional, default to 1)
     * @param sort Narrow the search filtering by the fields: &#x60;id&#x60;, &#x60;name&#x60; or &#x60;pendingoffers&#x60;. The list retrieved can be organized in an ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;) order. The standardized format is &#x60;{field}:{order}&#x60;, and the default value is &#x60;id:asc&#x60;. (optional, default to id:asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListSellersCall(String accountName, String environment, String accept, String contentType, BigDecimal from, BigDecimal to, String keyword, String integration, String group, Boolean isActive, Boolean isBetterScope, Boolean isVtex, String sc, Integer sellerType, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/sellers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (integration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration", integration));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group ", group));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (isBetterScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBetterScope", isBetterScope));
        }

        if (isVtex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isVtex", isVtex));
        }

        if (sc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sc", sc));
        }

        if (sellerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sellerType", sellerType));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListSellersValidateBeforeCall(String accountName, String environment, String accept, String contentType, BigDecimal from, BigDecimal to, String keyword, String integration, String group, Boolean isActive, Boolean isBetterScope, Boolean isVtex, String sc, Integer sellerType, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getListSellers(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling getListSellers(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getListSellers(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getListSellers(Async)");
        }

        return getListSellersCall(accountName, environment, accept, contentType, from, to, keyword, integration, group, isActive, isBetterScope, isVtex, sc, sellerType, sort, _callback);

    }

    /**
     * List Sellers
     * This endpoint lists all Sellers. This call&#39;s results can be filtered by [trade policies](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data) through the &#x60;sc&#x60; query param.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param from The start number of pagination, being &#x60;0&#x60; the default value. (optional, default to 0)
     * @param to The end number of pagination, being &#x60;100&#x60; the default value. (optional, default to 100)
     * @param keyword Search sellers by a keyword in &#x60;sellerId&#x60; or &#x60;sellerName&#x60;. (optional, default to keyword)
     * @param integration Filters sellers by the name of who made the integration, if VTEX or an external hub. The possible values for VTEX integrations are: &#x60;vtex-sellerportal&#x60;, &#x60;vtex-seller&#x60; and &#x60;vtex-franchise&#x60;. (optional, default to vtex-seller)
     * @param group Groups are defined by keywords that group sellers into categories defined by the marketplace. (optional, default to Group)
     * @param isActive Enables to filter sellers that are active (&#x60;true&#x60;) or unactive (&#x60;false&#x60;) in the marketplace. (optional, default to false)
     * @param isBetterScope The flag &#x60;isBetterScope&#x60; is used by the VTEX Checkout to simulate shopping carts, products, and shipping only in sellers with the field set as &#x60;true&#x60;, avoiding performance issues. When used as a query param, &#x60;isBetterScope&#x60; filters sellers that have the flag set as &#x60;true&#x60; or &#x60;false&#x60;. (optional, default to false)
     * @param isVtex When set as &#x60;true&#x60;, the list returned will be of sellers who have a VTEX store configured. When set as &#x60;false&#x60;, the list will be of sellers who do not have a VTEX store configured. (optional, default to false)
     * @param sc Filters sellers available for the marketplace&#39;s sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) indicated in this field. (optional, default to 1)
     * @param sellerType Filters sellers by their type, which can be regular seller (&#x60;1&#x60;) or whitelabel seller (&#x60;2&#x60;). (optional, default to 1)
     * @param sort Narrow the search filtering by the fields: &#x60;id&#x60;, &#x60;name&#x60; or &#x60;pendingoffers&#x60;. The list retrieved can be organized in an ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;) order. The standardized format is &#x60;{field}:{order}&#x60;, and the default value is &#x60;id:asc&#x60;. (optional, default to id:asc)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getListSellers(String accountName, String environment, String accept, String contentType, BigDecimal from, BigDecimal to, String keyword, String integration, String group, Boolean isActive, Boolean isBetterScope, Boolean isVtex, String sc, Integer sellerType, String sort) throws ApiException {
        getListSellersWithHttpInfo(accountName, environment, accept, contentType, from, to, keyword, integration, group, isActive, isBetterScope, isVtex, sc, sellerType, sort);
    }

    /**
     * List Sellers
     * This endpoint lists all Sellers. This call&#39;s results can be filtered by [trade policies](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data) through the &#x60;sc&#x60; query param.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param from The start number of pagination, being &#x60;0&#x60; the default value. (optional, default to 0)
     * @param to The end number of pagination, being &#x60;100&#x60; the default value. (optional, default to 100)
     * @param keyword Search sellers by a keyword in &#x60;sellerId&#x60; or &#x60;sellerName&#x60;. (optional, default to keyword)
     * @param integration Filters sellers by the name of who made the integration, if VTEX or an external hub. The possible values for VTEX integrations are: &#x60;vtex-sellerportal&#x60;, &#x60;vtex-seller&#x60; and &#x60;vtex-franchise&#x60;. (optional, default to vtex-seller)
     * @param group Groups are defined by keywords that group sellers into categories defined by the marketplace. (optional, default to Group)
     * @param isActive Enables to filter sellers that are active (&#x60;true&#x60;) or unactive (&#x60;false&#x60;) in the marketplace. (optional, default to false)
     * @param isBetterScope The flag &#x60;isBetterScope&#x60; is used by the VTEX Checkout to simulate shopping carts, products, and shipping only in sellers with the field set as &#x60;true&#x60;, avoiding performance issues. When used as a query param, &#x60;isBetterScope&#x60; filters sellers that have the flag set as &#x60;true&#x60; or &#x60;false&#x60;. (optional, default to false)
     * @param isVtex When set as &#x60;true&#x60;, the list returned will be of sellers who have a VTEX store configured. When set as &#x60;false&#x60;, the list will be of sellers who do not have a VTEX store configured. (optional, default to false)
     * @param sc Filters sellers available for the marketplace&#39;s sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) indicated in this field. (optional, default to 1)
     * @param sellerType Filters sellers by their type, which can be regular seller (&#x60;1&#x60;) or whitelabel seller (&#x60;2&#x60;). (optional, default to 1)
     * @param sort Narrow the search filtering by the fields: &#x60;id&#x60;, &#x60;name&#x60; or &#x60;pendingoffers&#x60;. The list retrieved can be organized in an ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;) order. The standardized format is &#x60;{field}:{order}&#x60;, and the default value is &#x60;id:asc&#x60;. (optional, default to id:asc)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getListSellersWithHttpInfo(String accountName, String environment, String accept, String contentType, BigDecimal from, BigDecimal to, String keyword, String integration, String group, Boolean isActive, Boolean isBetterScope, Boolean isVtex, String sc, Integer sellerType, String sort) throws ApiException {
        okhttp3.Call localVarCall = getListSellersValidateBeforeCall(accountName, environment, accept, contentType, from, to, keyword, integration, group, isActive, isBetterScope, isVtex, sc, sellerType, sort, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List Sellers (asynchronously)
     * This endpoint lists all Sellers. This call&#39;s results can be filtered by [trade policies](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data) through the &#x60;sc&#x60; query param.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param from The start number of pagination, being &#x60;0&#x60; the default value. (optional, default to 0)
     * @param to The end number of pagination, being &#x60;100&#x60; the default value. (optional, default to 100)
     * @param keyword Search sellers by a keyword in &#x60;sellerId&#x60; or &#x60;sellerName&#x60;. (optional, default to keyword)
     * @param integration Filters sellers by the name of who made the integration, if VTEX or an external hub. The possible values for VTEX integrations are: &#x60;vtex-sellerportal&#x60;, &#x60;vtex-seller&#x60; and &#x60;vtex-franchise&#x60;. (optional, default to vtex-seller)
     * @param group Groups are defined by keywords that group sellers into categories defined by the marketplace. (optional, default to Group)
     * @param isActive Enables to filter sellers that are active (&#x60;true&#x60;) or unactive (&#x60;false&#x60;) in the marketplace. (optional, default to false)
     * @param isBetterScope The flag &#x60;isBetterScope&#x60; is used by the VTEX Checkout to simulate shopping carts, products, and shipping only in sellers with the field set as &#x60;true&#x60;, avoiding performance issues. When used as a query param, &#x60;isBetterScope&#x60; filters sellers that have the flag set as &#x60;true&#x60; or &#x60;false&#x60;. (optional, default to false)
     * @param isVtex When set as &#x60;true&#x60;, the list returned will be of sellers who have a VTEX store configured. When set as &#x60;false&#x60;, the list will be of sellers who do not have a VTEX store configured. (optional, default to false)
     * @param sc Filters sellers available for the marketplace&#39;s sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) indicated in this field. (optional, default to 1)
     * @param sellerType Filters sellers by their type, which can be regular seller (&#x60;1&#x60;) or whitelabel seller (&#x60;2&#x60;). (optional, default to 1)
     * @param sort Narrow the search filtering by the fields: &#x60;id&#x60;, &#x60;name&#x60; or &#x60;pendingoffers&#x60;. The list retrieved can be organized in an ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;) order. The standardized format is &#x60;{field}:{order}&#x60;, and the default value is &#x60;id:asc&#x60;. (optional, default to id:asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListSellersAsync(String accountName, String environment, String accept, String contentType, BigDecimal from, BigDecimal to, String keyword, String integration, String group, Boolean isActive, Boolean isBetterScope, Boolean isVtex, String sc, Integer sellerType, String sort, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListSellersValidateBeforeCall(accountName, environment, accept, contentType, from, to, keyword, integration, group, isActive, isBetterScope, isVtex, sc, sellerType, sort, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRetrieveSeller
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param sc Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) associated to the seller account created. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetrieveSellerCall(String accountName, String environment, String sellerId, String accept, String contentType, String sc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/sellers/{sellerId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (sc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sc", sc));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRetrieveSellerValidateBeforeCall(String accountName, String environment, String sellerId, String accept, String contentType, String sc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling getRetrieveSeller(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling getRetrieveSeller(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getRetrieveSeller(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getRetrieveSeller(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getRetrieveSeller(Async)");
        }

        return getRetrieveSellerCall(accountName, environment, sellerId, accept, contentType, sc, _callback);

    }

    /**
     * Get Seller data by ID
     * Marketplace operator may call this endpoint to retrieve information about a specific seller by filtering by ID. It is also possible to filter results by sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) through the &#x60;sc&#x60; query param.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param sc Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) associated to the seller account created. (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getRetrieveSeller(String accountName, String environment, String sellerId, String accept, String contentType, String sc) throws ApiException {
        getRetrieveSellerWithHttpInfo(accountName, environment, sellerId, accept, contentType, sc);
    }

    /**
     * Get Seller data by ID
     * Marketplace operator may call this endpoint to retrieve information about a specific seller by filtering by ID. It is also possible to filter results by sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) through the &#x60;sc&#x60; query param.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param sc Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) associated to the seller account created. (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getRetrieveSellerWithHttpInfo(String accountName, String environment, String sellerId, String accept, String contentType, String sc) throws ApiException {
        okhttp3.Call localVarCall = getRetrieveSellerValidateBeforeCall(accountName, environment, sellerId, accept, contentType, sc, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Seller data by ID (asynchronously)
     * Marketplace operator may call this endpoint to retrieve information about a specific seller by filtering by ID. It is also possible to filter results by sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) through the &#x60;sc&#x60; query param.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param sc Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) associated to the seller account created. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetrieveSellerAsync(String accountName, String environment, String sellerId, String accept, String contentType, String sc, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRetrieveSellerValidateBeforeCall(accountName, environment, sellerId, accept, contentType, sc, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSeller
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace (required)
     * @param requestBodyInner array of objects (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSellerCall(String accountName, String environment, String accept, String contentType, String sellerId, List<RequestBodyInner> requestBodyInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBodyInner;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/sellers/{sellerId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSellerValidateBeforeCall(String accountName, String environment, String accept, String contentType, String sellerId, List<RequestBodyInner> requestBodyInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling updateSeller(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling updateSeller(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateSeller(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateSeller(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling updateSeller(Async)");
        }

        return updateSellerCall(accountName, environment, accept, contentType, sellerId, requestBodyInner, _callback);

    }

    /**
     * Update Seller by Seller ID
     * This endpoint allows marketplace operators to update the information of sellers connected to their account. You can replace a path&#39;s value with another value in order to update that single information. There is no need to fill all the body params available, only the one you wish to update.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace (required)
     * @param requestBodyInner array of objects (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void updateSeller(String accountName, String environment, String accept, String contentType, String sellerId, List<RequestBodyInner> requestBodyInner) throws ApiException {
        updateSellerWithHttpInfo(accountName, environment, accept, contentType, sellerId, requestBodyInner);
    }

    /**
     * Update Seller by Seller ID
     * This endpoint allows marketplace operators to update the information of sellers connected to their account. You can replace a path&#39;s value with another value in order to update that single information. There is no need to fill all the body params available, only the one you wish to update.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace (required)
     * @param requestBodyInner array of objects (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateSellerWithHttpInfo(String accountName, String environment, String accept, String contentType, String sellerId, List<RequestBodyInner> requestBodyInner) throws ApiException {
        okhttp3.Call localVarCall = updateSellerValidateBeforeCall(accountName, environment, accept, contentType, sellerId, requestBodyInner, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Seller by Seller ID (asynchronously)
     * This endpoint allows marketplace operators to update the information of sellers connected to their account. You can replace a path&#39;s value with another value in order to update that single information. There is no need to fill all the body params available, only the one you wish to update.
     * @param accountName Name of the VTEX account that belongs to the marketplace. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace (required)
     * @param requestBodyInner array of objects (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSellerAsync(String accountName, String environment, String accept, String contentType, String sellerId, List<RequestBodyInner> requestBodyInner, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSellerValidateBeforeCall(accountName, environment, accept, contentType, sellerId, requestBodyInner, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertSellerRequest
     * @param accountName Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param upsertSellerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertSellerRequestCall(String accountName, String environment, String accept, String contentType, UpsertSellerRequest upsertSellerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertSellerRequest;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/sellers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertSellerRequestValidateBeforeCall(String accountName, String environment, String accept, String contentType, UpsertSellerRequest upsertSellerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling upsertSellerRequest(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling upsertSellerRequest(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling upsertSellerRequest(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling upsertSellerRequest(Async)");
        }

        // verify the required parameter 'upsertSellerRequest' is set
        if (upsertSellerRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertSellerRequest' when calling upsertSellerRequest(Async)");
        }

        return upsertSellerRequestCall(accountName, environment, accept, contentType, upsertSellerRequest, _callback);

    }

    /**
     * Configure Seller Account
     * This endpoint is used by marketplace operators to configure the accounts of sellers that have already accepted the invitation to join their marketplaces.   For marketplaces to [add sellers](https://help.vtex.com/en/tutorial/adding-a-seller--tutorials_392) without the [Seller Invite](https://help.vtex.com/en/tutorial/marketplace-invited-sellers--6rb2FkcslmDueJ689Ulb9A) feature, call this endpoint directly.   This call includes all the information a seller needs to activate their account.
     * @param accountName Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param upsertSellerRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void upsertSellerRequest(String accountName, String environment, String accept, String contentType, UpsertSellerRequest upsertSellerRequest) throws ApiException {
        upsertSellerRequestWithHttpInfo(accountName, environment, accept, contentType, upsertSellerRequest);
    }

    /**
     * Configure Seller Account
     * This endpoint is used by marketplace operators to configure the accounts of sellers that have already accepted the invitation to join their marketplaces.   For marketplaces to [add sellers](https://help.vtex.com/en/tutorial/adding-a-seller--tutorials_392) without the [Seller Invite](https://help.vtex.com/en/tutorial/marketplace-invited-sellers--6rb2FkcslmDueJ689Ulb9A) feature, call this endpoint directly.   This call includes all the information a seller needs to activate their account.
     * @param accountName Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param upsertSellerRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> upsertSellerRequestWithHttpInfo(String accountName, String environment, String accept, String contentType, UpsertSellerRequest upsertSellerRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertSellerRequestValidateBeforeCall(accountName, environment, accept, contentType, upsertSellerRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Configure Seller Account (asynchronously)
     * This endpoint is used by marketplace operators to configure the accounts of sellers that have already accepted the invitation to join their marketplaces.   For marketplaces to [add sellers](https://help.vtex.com/en/tutorial/adding-a-seller--tutorials_392) without the [Seller Invite](https://help.vtex.com/en/tutorial/marketplace-invited-sellers--6rb2FkcslmDueJ689Ulb9A) feature, call this endpoint directly.   This call includes all the information a seller needs to activate their account.
     * @param accountName Marketplace&#39;s account name, the same one inputted on the endpoint&#39;s path. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Type of the content being sent. (required)
     * @param upsertSellerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertSellerRequestAsync(String accountName, String environment, String accept, String contentType, UpsertSellerRequest upsertSellerRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertSellerRequestValidateBeforeCall(accountName, environment, accept, contentType, upsertSellerRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
