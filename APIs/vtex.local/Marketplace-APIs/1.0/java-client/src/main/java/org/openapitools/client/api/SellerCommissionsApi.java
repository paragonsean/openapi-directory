/*
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BulkUpsertSellerCommissionsRequest;
import org.openapitools.client.model.UpsertSellerCommissionsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SellerCommissionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SellerCommissionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SellerCommissionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bulkUpsertSellerCommissions
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param bulkUpsertSellerCommissionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkUpsertSellerCommissionsCall(String accountName, String environment, String accept, String contentType, String sellerId, List<BulkUpsertSellerCommissionsRequest> bulkUpsertSellerCommissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkUpsertSellerCommissionsRequest;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/sellers/{sellerId}/commissions/categories"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkUpsertSellerCommissionsValidateBeforeCall(String accountName, String environment, String accept, String contentType, String sellerId, List<BulkUpsertSellerCommissionsRequest> bulkUpsertSellerCommissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling bulkUpsertSellerCommissions(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling bulkUpsertSellerCommissions(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling bulkUpsertSellerCommissions(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling bulkUpsertSellerCommissions(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling bulkUpsertSellerCommissions(Async)");
        }

        // verify the required parameter 'bulkUpsertSellerCommissionsRequest' is set
        if (bulkUpsertSellerCommissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'bulkUpsertSellerCommissionsRequest' when calling bulkUpsertSellerCommissions(Async)");
        }

        return bulkUpsertSellerCommissionsCall(accountName, environment, accept, contentType, sellerId, bulkUpsertSellerCommissionsRequest, _callback);

    }

    /**
     * Upsert Seller Commissions in Bulk
     * This endpoint is used by marketplace operators to define comissions for multiple categories.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param bulkUpsertSellerCommissionsRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void bulkUpsertSellerCommissions(String accountName, String environment, String accept, String contentType, String sellerId, List<BulkUpsertSellerCommissionsRequest> bulkUpsertSellerCommissionsRequest) throws ApiException {
        bulkUpsertSellerCommissionsWithHttpInfo(accountName, environment, accept, contentType, sellerId, bulkUpsertSellerCommissionsRequest);
    }

    /**
     * Upsert Seller Commissions in Bulk
     * This endpoint is used by marketplace operators to define comissions for multiple categories.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param bulkUpsertSellerCommissionsRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> bulkUpsertSellerCommissionsWithHttpInfo(String accountName, String environment, String accept, String contentType, String sellerId, List<BulkUpsertSellerCommissionsRequest> bulkUpsertSellerCommissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = bulkUpsertSellerCommissionsValidateBeforeCall(accountName, environment, accept, contentType, sellerId, bulkUpsertSellerCommissionsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upsert Seller Commissions in Bulk (asynchronously)
     * This endpoint is used by marketplace operators to define comissions for multiple categories.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param bulkUpsertSellerCommissionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkUpsertSellerCommissionsAsync(String accountName, String environment, String accept, String contentType, String sellerId, List<BulkUpsertSellerCommissionsRequest> bulkUpsertSellerCommissionsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkUpsertSellerCommissionsValidateBeforeCall(accountName, environment, accept, contentType, sellerId, bulkUpsertSellerCommissionsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSellerCommissions
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSellerCommissionsCall(String accountName, String environment, String sellerId, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/sellers/{sellerId}/commissions"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSellerCommissionsValidateBeforeCall(String accountName, String environment, String sellerId, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling listSellerCommissions(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling listSellerCommissions(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling listSellerCommissions(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling listSellerCommissions(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listSellerCommissions(Async)");
        }

        return listSellerCommissionsCall(accountName, environment, sellerId, accept, contentType, _callback);

    }

    /**
     * List Seller Commissions by seller ID
     * This endpoint retrieves all comissions configured for a specific seller.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void listSellerCommissions(String accountName, String environment, String sellerId, String accept, String contentType) throws ApiException {
        listSellerCommissionsWithHttpInfo(accountName, environment, sellerId, accept, contentType);
    }

    /**
     * List Seller Commissions by seller ID
     * This endpoint retrieves all comissions configured for a specific seller.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> listSellerCommissionsWithHttpInfo(String accountName, String environment, String sellerId, String accept, String contentType) throws ApiException {
        okhttp3.Call localVarCall = listSellerCommissionsValidateBeforeCall(accountName, environment, sellerId, accept, contentType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List Seller Commissions by seller ID (asynchronously)
     * This endpoint retrieves all comissions configured for a specific seller.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSellerCommissionsAsync(String accountName, String environment, String sellerId, String accept, String contentType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSellerCommissionsValidateBeforeCall(accountName, environment, sellerId, accept, contentType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeSellerCommissions
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param categoryId ID of the category in which the comission was applied (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeSellerCommissionsCall(String accountName, String environment, String accept, String contentType, String sellerId, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeSellerCommissionsValidateBeforeCall(String accountName, String environment, String accept, String contentType, String sellerId, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling removeSellerCommissions(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling removeSellerCommissions(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling removeSellerCommissions(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling removeSellerCommissions(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling removeSellerCommissions(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling removeSellerCommissions(Async)");
        }

        return removeSellerCommissionsCall(accountName, environment, accept, contentType, sellerId, categoryId, _callback);

    }

    /**
     * Remove Seller Commissions by Category ID
     * This endpoint removes a seller comission on the selected category.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param categoryId ID of the category in which the comission was applied (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void removeSellerCommissions(String accountName, String environment, String accept, String contentType, String sellerId, String categoryId) throws ApiException {
        removeSellerCommissionsWithHttpInfo(accountName, environment, accept, contentType, sellerId, categoryId);
    }

    /**
     * Remove Seller Commissions by Category ID
     * This endpoint removes a seller comission on the selected category.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param categoryId ID of the category in which the comission was applied (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeSellerCommissionsWithHttpInfo(String accountName, String environment, String accept, String contentType, String sellerId, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = removeSellerCommissionsValidateBeforeCall(accountName, environment, accept, contentType, sellerId, categoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove Seller Commissions by Category ID (asynchronously)
     * This endpoint removes a seller comission on the selected category.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param categoryId ID of the category in which the comission was applied (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeSellerCommissionsAsync(String accountName, String environment, String accept, String contentType, String sellerId, String categoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeSellerCommissionsValidateBeforeCall(accountName, environment, accept, contentType, sellerId, categoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveSellerCommissions
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param categoryId ID of the category in which the comission was applied (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveSellerCommissionsCall(String accountName, String environment, String accept, String contentType, String sellerId, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveSellerCommissionsValidateBeforeCall(String accountName, String environment, String accept, String contentType, String sellerId, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling retrieveSellerCommissions(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling retrieveSellerCommissions(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling retrieveSellerCommissions(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling retrieveSellerCommissions(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling retrieveSellerCommissions(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling retrieveSellerCommissions(Async)");
        }

        return retrieveSellerCommissionsCall(accountName, environment, accept, contentType, sellerId, categoryId, _callback);

    }

    /**
     * Get Seller Commissions by Category ID
     * This endpoint retrieves seller comissions applied to the selected category.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param categoryId ID of the category in which the comission was applied (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void retrieveSellerCommissions(String accountName, String environment, String accept, String contentType, String sellerId, String categoryId) throws ApiException {
        retrieveSellerCommissionsWithHttpInfo(accountName, environment, accept, contentType, sellerId, categoryId);
    }

    /**
     * Get Seller Commissions by Category ID
     * This endpoint retrieves seller comissions applied to the selected category.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param categoryId ID of the category in which the comission was applied (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> retrieveSellerCommissionsWithHttpInfo(String accountName, String environment, String accept, String contentType, String sellerId, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = retrieveSellerCommissionsValidateBeforeCall(accountName, environment, accept, contentType, sellerId, categoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Seller Commissions by Category ID (asynchronously)
     * This endpoint retrieves seller comissions applied to the selected category.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param categoryId ID of the category in which the comission was applied (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveSellerCommissionsAsync(String accountName, String environment, String accept, String contentType, String sellerId, String categoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveSellerCommissionsValidateBeforeCall(accountName, environment, accept, contentType, sellerId, categoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertSellerCommissions
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param categoryId ID of the category in which the comission will be applied. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param upsertSellerCommissionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertSellerCommissionsCall(String accountName, String environment, String sellerId, String categoryId, String accept, String contentType, UpsertSellerCommissionsRequest upsertSellerCommissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertSellerCommissionsRequest;

        // create path and map variables
        String localVarPath = "/seller-register/pvt/sellers/{sellerId}/commissions/{categoryId}"
            .replace("{" + "sellerId" + "}", localVarApiClient.escapeString(sellerId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountName", accountName));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertSellerCommissionsValidateBeforeCall(String accountName, String environment, String sellerId, String categoryId, String accept, String contentType, UpsertSellerCommissionsRequest upsertSellerCommissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling upsertSellerCommissions(Async)");
        }

        // verify the required parameter 'environment' is set
        if (environment == null) {
            throw new ApiException("Missing the required parameter 'environment' when calling upsertSellerCommissions(Async)");
        }

        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling upsertSellerCommissions(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling upsertSellerCommissions(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling upsertSellerCommissions(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling upsertSellerCommissions(Async)");
        }

        // verify the required parameter 'upsertSellerCommissionsRequest' is set
        if (upsertSellerCommissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertSellerCommissionsRequest' when calling upsertSellerCommissions(Async)");
        }

        return upsertSellerCommissionsCall(accountName, environment, sellerId, categoryId, accept, contentType, upsertSellerCommissionsRequest, _callback);

    }

    /**
     * Upsert Seller Commissions by Category ID
     * This endpoint is used by marketplace operators to define comissions for a single category, by ID.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param categoryId ID of the category in which the comission will be applied. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param upsertSellerCommissionsRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void upsertSellerCommissions(String accountName, String environment, String sellerId, String categoryId, String accept, String contentType, UpsertSellerCommissionsRequest upsertSellerCommissionsRequest) throws ApiException {
        upsertSellerCommissionsWithHttpInfo(accountName, environment, sellerId, categoryId, accept, contentType, upsertSellerCommissionsRequest);
    }

    /**
     * Upsert Seller Commissions by Category ID
     * This endpoint is used by marketplace operators to define comissions for a single category, by ID.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param categoryId ID of the category in which the comission will be applied. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param upsertSellerCommissionsRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> upsertSellerCommissionsWithHttpInfo(String accountName, String environment, String sellerId, String categoryId, String accept, String contentType, UpsertSellerCommissionsRequest upsertSellerCommissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertSellerCommissionsValidateBeforeCall(accountName, environment, sellerId, categoryId, accept, contentType, upsertSellerCommissionsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upsert Seller Commissions by Category ID (asynchronously)
     * This endpoint is used by marketplace operators to define comissions for a single category, by ID.
     * @param accountName Name of the VTEX account that belongs to the marketplace. All data extracted, and changes added will be posted into this account. (required)
     * @param environment Environment to use. Used as part of the URL. (required)
     * @param sellerId A string that identifies the seller in the marketplace. This ID must be created by the marketplace. (required)
     * @param categoryId ID of the category in which the comission will be applied. (required)
     * @param accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand. (required)
     * @param contentType Describes the type of the content being sent. (required)
     * @param upsertSellerCommissionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertSellerCommissionsAsync(String accountName, String environment, String sellerId, String categoryId, String accept, String contentType, UpsertSellerCommissionsRequest upsertSellerCommissionsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertSellerCommissionsValidateBeforeCall(accountName, environment, sellerId, categoryId, accept, contentType, upsertSellerCommissionsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
