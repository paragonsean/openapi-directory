/*
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MainImage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:15.351495-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MainImage {
  public static final String SERIALIZED_NAME_IMAGE_ID = "ImageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId = "53878805";

  public static final String SERIALIZED_NAME_IMAGE_LABEL = "ImageLabel";
  @SerializedName(SERIALIZED_NAME_IMAGE_LABEL)
  private String imageLabel = "Image 1";

  public static final String SERIALIZED_NAME_IMAGE_PATH = "ImagePath";
  @SerializedName(SERIALIZED_NAME_IMAGE_PATH)
  private String imagePath = "~/archives/ids/155411-#width#-#height#/Webp.net-resizeimage.jpg";

  public static final String SERIALIZED_NAME_IMAGE_TAG = "ImageTag";
  @SerializedName(SERIALIZED_NAME_IMAGE_TAG)
  private String imageTag = "<img src=\"~/archives/ids/155411-#width#-#height#/Webp.net-resizeimage.jpg\" width=\"#width#\" height=\"#height#\" alt=\"Image name and description\" id=\"\" />";

  public static final String SERIALIZED_NAME_IMAGE_TEXT = "ImageText";
  @SerializedName(SERIALIZED_NAME_IMAGE_TEXT)
  private String imageText = "Image name and description";

  public static final String SERIALIZED_NAME_IS_MAIN = "IsMain";
  @SerializedName(SERIALIZED_NAME_IS_MAIN)
  private Boolean isMain = true;

  public static final String SERIALIZED_NAME_IS_ZOOM_SIZE = "IsZoomSize";
  @SerializedName(SERIALIZED_NAME_IS_ZOOM_SIZE)
  private Boolean isZoomSize = true;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "LastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private String lastModified = "2021-05-06T21:37:24.262529";

  public MainImage() {
  }

  public MainImage imageId(String imageId) {
    this.imageId = imageId;
    return this;
  }

  /**
   * Code identifying the image&#39;s file.
   * @return imageId
   */
  @javax.annotation.Nonnull
  public String getImageId() {
    return imageId;
  }

  public void setImageId(String imageId) {
    this.imageId = imageId;
  }


  public MainImage imageLabel(String imageLabel) {
    this.imageLabel = imageLabel;
    return this;
  }

  /**
   * Image&#39;s label.
   * @return imageLabel
   */
  @javax.annotation.Nullable
  public String getImageLabel() {
    return imageLabel;
  }

  public void setImageLabel(String imageLabel) {
    this.imageLabel = imageLabel;
  }


  public MainImage imagePath(String imagePath) {
    this.imagePath = imagePath;
    return this;
  }

  /**
   * Path for the image&#39;s file.
   * @return imagePath
   */
  @javax.annotation.Nonnull
  public String getImagePath() {
    return imagePath;
  }

  public void setImagePath(String imagePath) {
    this.imagePath = imagePath;
  }


  public MainImage imageTag(String imageTag) {
    this.imageTag = imageTag;
    return this;
  }

  /**
   * HTML tag for the selected image.
   * @return imageTag
   */
  @javax.annotation.Nonnull
  public String getImageTag() {
    return imageTag;
  }

  public void setImageTag(String imageTag) {
    this.imageTag = imageTag;
  }


  public MainImage imageText(String imageText) {
    this.imageText = imageText;
    return this;
  }

  /**
   * Alt text for the image.
   * @return imageText
   */
  @javax.annotation.Nonnull
  public String getImageText() {
    return imageText;
  }

  public void setImageText(String imageText) {
    this.imageText = imageText;
  }


  public MainImage isMain(Boolean isMain) {
    this.isMain = isMain;
    return this;
  }

  /**
   * Whether the image is the main one or not.
   * @return isMain
   */
  @javax.annotation.Nonnull
  public Boolean getIsMain() {
    return isMain;
  }

  public void setIsMain(Boolean isMain) {
    this.isMain = isMain;
  }


  public MainImage isZoomSize(Boolean isZoomSize) {
    this.isZoomSize = isZoomSize;
    return this;
  }

  /**
   * If zoom can be applied to the image.
   * @return isZoomSize
   */
  @javax.annotation.Nonnull
  public Boolean getIsZoomSize() {
    return isZoomSize;
  }

  public void setIsZoomSize(Boolean isZoomSize) {
    this.isZoomSize = isZoomSize;
  }


  public MainImage lastModified(String lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Date of the last changed made to the offer.
   * @return lastModified
   */
  @javax.annotation.Nonnull
  public String getLastModified() {
    return lastModified;
  }

  public void setLastModified(String lastModified) {
    this.lastModified = lastModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MainImage mainImage = (MainImage) o;
    return Objects.equals(this.imageId, mainImage.imageId) &&
        Objects.equals(this.imageLabel, mainImage.imageLabel) &&
        Objects.equals(this.imagePath, mainImage.imagePath) &&
        Objects.equals(this.imageTag, mainImage.imageTag) &&
        Objects.equals(this.imageText, mainImage.imageText) &&
        Objects.equals(this.isMain, mainImage.isMain) &&
        Objects.equals(this.isZoomSize, mainImage.isZoomSize) &&
        Objects.equals(this.lastModified, mainImage.lastModified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageId, imageLabel, imagePath, imageTag, imageText, isMain, isZoomSize, lastModified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MainImage {\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    imageLabel: ").append(toIndentedString(imageLabel)).append("\n");
    sb.append("    imagePath: ").append(toIndentedString(imagePath)).append("\n");
    sb.append("    imageTag: ").append(toIndentedString(imageTag)).append("\n");
    sb.append("    imageText: ").append(toIndentedString(imageText)).append("\n");
    sb.append("    isMain: ").append(toIndentedString(isMain)).append("\n");
    sb.append("    isZoomSize: ").append(toIndentedString(isZoomSize)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ImageId");
    openapiFields.add("ImageLabel");
    openapiFields.add("ImagePath");
    openapiFields.add("ImageTag");
    openapiFields.add("ImageText");
    openapiFields.add("IsMain");
    openapiFields.add("IsZoomSize");
    openapiFields.add("LastModified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ImageId");
    openapiRequiredFields.add("ImageLabel");
    openapiRequiredFields.add("ImagePath");
    openapiRequiredFields.add("ImageTag");
    openapiRequiredFields.add("ImageText");
    openapiRequiredFields.add("IsMain");
    openapiRequiredFields.add("IsZoomSize");
    openapiRequiredFields.add("LastModified");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MainImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MainImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MainImage is not found in the empty JSON string", MainImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MainImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MainImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MainImage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ImageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageId").toString()));
      }
      if ((jsonObj.get("ImageLabel") != null && !jsonObj.get("ImageLabel").isJsonNull()) && !jsonObj.get("ImageLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageLabel").toString()));
      }
      if (!jsonObj.get("ImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImagePath").toString()));
      }
      if (!jsonObj.get("ImageTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageTag").toString()));
      }
      if (!jsonObj.get("ImageText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ImageText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ImageText").toString()));
      }
      if (!jsonObj.get("LastModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastModified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MainImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MainImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MainImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MainImage.class));

       return (TypeAdapter<T>) new TypeAdapter<MainImage>() {
           @Override
           public void write(JsonWriter out, MainImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MainImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MainImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MainImage
   * @throws IOException if the JSON string is invalid with respect to MainImage
   */
  public static MainImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MainImage.class);
  }

  /**
   * Convert an instance of MainImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

