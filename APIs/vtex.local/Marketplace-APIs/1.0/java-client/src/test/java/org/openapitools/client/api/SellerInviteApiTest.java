/*
 * Marketplace API
 *   The **Marketplace API** enables marketplaces and sellers hosted on VTEX to perform their collaborative operations.      >⚠️ The marketplace must [create an appKey and appToken](https://developers.vtex.com/docs/guides/getting-started-authentication) for each non-VTEX seller that will use this API.    ## Index    ### Notification    Endpoints used by sellers to notify marketplaces that the price or inventory language has changed for one of their SKUs.    `POST` [Notify marketplace of price update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/price)    `POST` [Notify marketplace of inventory update](https://developers.vtex.com/docs/api-reference/marketplace-apis#post-/notificator/-sellerId-/changenotification/-skuId-/inventory)      ### Suggestions    #### Get Suggestions    Search and filter all suggestions using specific criteria.    `GET` [Get all SKU Suggestions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions)    `GET` [Get SKU Suggestion by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerSkuId-)      #### Manage Suggestions    Send or delete SKU suggestions from the seller to marketplace.    `PUT` [Send SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerSkuId-)    `DELETE` [Delete SKU Suggestion](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#delete-/suggestions/-sellerId-/-sellerSkuId-)      #### Get Versions    Search and filter all versions of suggestions, using specific criteria.    `GET` [Get all versions](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions)    `GET` [Get version by ID](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/-sellerId-/-sellerskuid-/versions/-version-)      #### Match Received SKUs    Match SKU suggestions received in the marketplace.    `PUT` [Match Received SKUs individually](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/-sellerId-/-sellerskuid-/versions/-version-/matches/-matchid-)    `PUT` [Match Multiple Received SKUs](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/matches/action/-actionName-)      #### SKU Approval Settings    Allows marketplaces to configure rules for automatically and manually approving SKUs received from sellers.    `GET`[Get autoApprove Status in Account Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/autoapproval/toggle)      `PUT`[Activate autoApprove in Marketplace's Account](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle)      `GET`[Get Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration)    `PUT`[Save Account's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration)    `GET`[Get Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#get-/suggestions/configuration/seller/-sellerId-)    `PUT`[Save Seller's Approval Settings](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/seller/-sellerId-)    `PUT`[Activate autoApprove Setting for a Seller](https://developers.vtex.com/docs/api-reference/marketplace-apis-suggestions#put-/suggestions/configuration/autoapproval/toggle/seller/-sellerId-)         ### Matched Offers    Offers are seller products and SKUs that were sent to the marketplace, and already have their price and inventory level configured.    `GET`[Get Matched Offers List](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/offers)    `GET`[Get Matched Offer's Data by SKU ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-/sku/-skuId-)      `GET`[Get Matched Offer's Data by Product ID](https://developers.vtex.com/docs/api-reference/marketplace-apis#get-/offer-manager/pvt/product/-productId-)  
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptSellerLeadRequest;
import org.openapitools.client.model.CreateSellerLeadRequest;
import org.openapitools.client.model.ResendSellerLeadRequestRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SellerInviteApi
 */
@Disabled
public class SellerInviteApiTest {

    private final SellerInviteApi api = new SellerInviteApi();

    /**
     * Accept Seller Lead
     *
     * This endpoint is triggered by the seller onboarding wizard, once the seller confirms their invitation. It can be used by marketplace operators to manually accept seller leads, and carry on with their onboarding process.   Note that there&#39;s no specific API call that allows status changes. The operations only allow the seller lead to move forward:    From &#x60;invite&#x60; &gt; to &#x60;Accept&#x60; &gt; closing on &#x60;Create Seller&#x60;.    If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead&#39;s Invite* endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptSellerLeadTest() throws ApiException {
        String accountName = null;
        String environment = null;
        String sellerLeadId = null;
        String accept = null;
        String contentType = null;
        AcceptSellerLeadRequest acceptSellerLeadRequest = null;
        api.acceptSellerLead(accountName, environment, sellerLeadId, accept, contentType, acceptSellerLeadRequest);
        // TODO: test validations
    }

    /**
     * Create Seller From Lead
     *
     * This endpoint is used by marketplace operators to create seller accounts. The request will only accept Seller Leads whose status is &#x60;accepted&#x60;. If they are already &#x60;connected&#x60; or &#x60;invited&#x60;, the call will not be fulfilled.   The creation of the account at VTEX is done by an internal Billing service. There is no seller account and marketplace affiliation if you do not go through this step.   Note that there&#39;s no specific API call that allows status changes. The operations only allow the seller lead to move forward:    From &#x60;invite&#x60; &gt; to &#x60;Accept&#x60; &gt; closing on &#x60;Create Seller&#x60;.    If you want to change the status, you can start the process again, by deleting that lead through the *Delete Seller Lead* endpoint, and resending the invite through the *Resend Seller Lead&#39;s Invite* endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSellerFromSellerLeadTest() throws ApiException {
        String accountName = null;
        String environment = null;
        Boolean isActive = null;
        String sellerLeadId = null;
        String accept = null;
        String contentType = null;
        api.createSellerFromSellerLead(accountName, environment, isActive, sellerLeadId, accept, contentType);
        // TODO: test validations
    }

    /**
     * Invite Seller Lead
     *
     * This API is used by marketplace operators to invite sellers to join their marketplace. The request sends an email to the seller, inviting sellers to activate their store. The invitation&#39;s link in the email is unique per user, and available for only seven days for the seller to click and begin activating their store.   The email template is completely customizable. All email templates that VTEX sends to seller leads can be found and edited in the marketplace&#39;s VTEX Admin, on the Message Center section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSellerLeadTest() throws ApiException {
        String accountName = null;
        String environment = null;
        String accept = null;
        String contentType = null;
        CreateSellerLeadRequest createSellerLeadRequest = null;
        api.createSellerLead(accountName, environment, accept, contentType, createSellerLeadRequest);
        // TODO: test validations
    }

    /**
     * List Seller Leads
     *
     * This call&#39;s response includes a list of all sellers invited by the marketplace operator to join them. Retrieved results can be filtered by adding optional query fields to the request. Each seller listed includes the following information:   - &#x60;id&#x60;   - &#x60;createdAt&#x60;   - &#x60;status&#x60;   - &#x60;isConnected&#x60;   - &#x60;sellerEmail&#x60;   - &#x60;sellerName&#x60;   - &#x60;salesChannel&#x60;   - &#x60;email&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSellerLeadsTest() throws ApiException {
        String accountName = null;
        String environment = null;
        Integer offset = null;
        Integer limit = null;
        String isConnected = null;
        String search = null;
        String status = null;
        String orderBy = null;
        String accept = null;
        String contentType = null;
        api.listSellerLeads(accountName, environment, offset, limit, isConnected, search, status, orderBy, accept, contentType);
        // TODO: test validations
    }

    /**
     * Delete Seller Lead
     *
     * This endpoint permanently deletes a seller previously invited to the marketplace, if the seller has not already accepted the invitation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSellerLeadTest() throws ApiException {
        String accountName = null;
        String environment = null;
        String sellerLeadId = null;
        String accept = null;
        String contentType = null;
        api.removeSellerLead(accountName, environment, sellerLeadId, accept, contentType);
        // TODO: test validations
    }

    /**
     * Resend Seller Lead Invite
     *
     * This endpoint allows marketplace operators to resend an invitation to a seller lead, previously invited to join their marketplace. The request will only accept Seller Leads whose status is &#x60;invited&#x60;. If they are already &#x60;connected&#x60; or &#x60;accepted&#x60;, the call will not be fulfilled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendSellerLeadRequestTest() throws ApiException {
        String accountName = null;
        String environment = null;
        String sellerLeadId = null;
        String accept = null;
        String contentType = null;
        ResendSellerLeadRequestRequest resendSellerLeadRequestRequest = null;
        api.resendSellerLeadRequest(accountName, environment, sellerLeadId, accept, contentType, resendSellerLeadRequestRequest);
        // TODO: test validations
    }

    /**
     * Get Seller Lead&#39;s Data by Id
     *
     * Marketplace operators may call this endpoint to retrieve information about a specific seller invited to the Seller Portal, by searching through their &#x60;Seller Lead Id&#x60;. To know the chosen seller&#39;s &#x60;sellerLeadId&#x60;, marketplace operators can count on the *List Sellers* endpoint&#39;s response as well. Each seller listed includes the following information:   - &#x60;id&#x60;   - &#x60;createdAt&#x60;   - &#x60;status&#x60;   - &#x60;isConnected&#x60;   - &#x60;sellerEmail&#x60;   - &#x60;sellerName&#x60;   - &#x60;salesChannel&#x60;   - &#x60;email&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveSellerLeadTest() throws ApiException {
        String accountName = null;
        String environment = null;
        String sellerLeadId = null;
        String accept = null;
        String contentType = null;
        api.retrieveSellerLead(accountName, environment, sellerLeadId, accept, contentType);
        // TODO: test validations
    }

}
