/**
 * Subscription (v1 - deprecated)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMiscellaneousApi_H
#define OAI_OAIMiscellaneousApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddrecurrenceitemRequest.h"
#include "OAIReindexrecurrenceRequest.h"
#include "OAIUpdatepartialrecurrenceRequest.h"
#include "OAIUpdaterecurrenceRequest.h"
#include "OAIUpdaterecurrencesettingsRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMiscellaneousApi : public QObject {
    Q_OBJECT

public:
    OAIMiscellaneousApi(const int timeOut = 0);
    ~OAIMiscellaneousApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  recurrence_id QString [required]
    * @param[in]  oai_addrecurrenceitem_request QList<OAIAddrecurrenceitemRequest> [required]
    */
    virtual void addrecurrenceitem(const QString &content_type, const QString &accept, const QString &recurrence_id, const QList<OAIAddrecurrenceitemRequest> &oai_addrecurrenceitem_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  email QString [optional]
    * @param[in]  cycle_status QString [optional]
    */
    virtual void getRecurrencebyemail(const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cycle_status = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  recurrence_id QString [required]
    */
    virtual void getRecurrencebyrecurrenceId(const QString &content_type, const QString &accept, const QString &recurrence_id);

    /**
    * @param[in]  recurrenceid QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getpaymentaccounts(const QString &recurrenceid, const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  recurrence_id QString [required]
    */
    virtual void getrecurrenceaddresses(const QString &content_type, const QString &accept, const QString &recurrence_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getrecurrencesettings(const QString &content_type, const QString &accept);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    */
    virtual void getselfrecurrence(const QString &content_type, const QString &accept);

    /**
    * @param[in]  recurrence_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_reindexrecurrence_request QList<OAIReindexrecurrenceRequest> [required]
    */
    virtual void reindexrecurrence(const QString &recurrence_id, const QString &content_type, const QString &accept, const QList<OAIReindexrecurrenceRequest> &oai_reindexrecurrence_request);

    /**
    * @param[in]  recurrence_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_updatepartialrecurrence_request OAIUpdatepartialrecurrenceRequest [required]
    */
    virtual void updatepartialrecurrence(const QString &recurrence_id, const QString &content_type, const QString &accept, const OAIUpdatepartialrecurrenceRequest &oai_updatepartialrecurrence_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_updaterecurrence_request OAIUpdaterecurrenceRequest [required]
    */
    virtual void updaterecurrence(const QString &content_type, const QString &accept, const OAIUpdaterecurrenceRequest &oai_updaterecurrence_request);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_updaterecurrencesettings_request OAIUpdaterecurrencesettingsRequest [required]
    */
    virtual void updaterecurrencesettings(const QString &content_type, const QString &accept, const OAIUpdaterecurrencesettingsRequest &oai_updaterecurrencesettings_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addrecurrenceitemCallback(OAIHttpRequestWorker *worker);
    void getRecurrencebyemailCallback(OAIHttpRequestWorker *worker);
    void getRecurrencebyrecurrenceIdCallback(OAIHttpRequestWorker *worker);
    void getpaymentaccountsCallback(OAIHttpRequestWorker *worker);
    void getrecurrenceaddressesCallback(OAIHttpRequestWorker *worker);
    void getrecurrencesettingsCallback(OAIHttpRequestWorker *worker);
    void getselfrecurrenceCallback(OAIHttpRequestWorker *worker);
    void reindexrecurrenceCallback(OAIHttpRequestWorker *worker);
    void updatepartialrecurrenceCallback(OAIHttpRequestWorker *worker);
    void updaterecurrenceCallback(OAIHttpRequestWorker *worker);
    void updaterecurrencesettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addrecurrenceitemSignal();
    void getRecurrencebyemailSignal();
    void getRecurrencebyrecurrenceIdSignal();
    void getpaymentaccountsSignal();
    void getrecurrenceaddressesSignal();
    void getrecurrencesettingsSignal();
    void getselfrecurrenceSignal();
    void reindexrecurrenceSignal();
    void updatepartialrecurrenceSignal();
    void updaterecurrenceSignal();
    void updaterecurrencesettingsSignal();


    void addrecurrenceitemSignalFull(OAIHttpRequestWorker *worker);
    void getRecurrencebyemailSignalFull(OAIHttpRequestWorker *worker);
    void getRecurrencebyrecurrenceIdSignalFull(OAIHttpRequestWorker *worker);
    void getpaymentaccountsSignalFull(OAIHttpRequestWorker *worker);
    void getrecurrenceaddressesSignalFull(OAIHttpRequestWorker *worker);
    void getrecurrencesettingsSignalFull(OAIHttpRequestWorker *worker);
    void getselfrecurrenceSignalFull(OAIHttpRequestWorker *worker);
    void reindexrecurrenceSignalFull(OAIHttpRequestWorker *worker);
    void updatepartialrecurrenceSignalFull(OAIHttpRequestWorker *worker);
    void updaterecurrenceSignalFull(OAIHttpRequestWorker *worker);
    void updaterecurrencesettingsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addrecurrenceitemSignalError() instead")
    void addrecurrenceitemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addrecurrenceitemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecurrencebyemailSignalError() instead")
    void getRecurrencebyemailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecurrencebyemailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecurrencebyrecurrenceIdSignalError() instead")
    void getRecurrencebyrecurrenceIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecurrencebyrecurrenceIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getpaymentaccountsSignalError() instead")
    void getpaymentaccountsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getpaymentaccountsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getrecurrenceaddressesSignalError() instead")
    void getrecurrenceaddressesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getrecurrenceaddressesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getrecurrencesettingsSignalError() instead")
    void getrecurrencesettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getrecurrencesettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getselfrecurrenceSignalError() instead")
    void getselfrecurrenceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getselfrecurrenceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reindexrecurrenceSignalError() instead")
    void reindexrecurrenceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reindexrecurrenceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatepartialrecurrenceSignalError() instead")
    void updatepartialrecurrenceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updatepartialrecurrenceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updaterecurrenceSignalError() instead")
    void updaterecurrenceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updaterecurrenceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updaterecurrencesettingsSignalError() instead")
    void updaterecurrencesettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updaterecurrencesettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addrecurrenceitemSignalErrorFull() instead")
    void addrecurrenceitemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addrecurrenceitemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecurrencebyemailSignalErrorFull() instead")
    void getRecurrencebyemailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecurrencebyemailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecurrencebyrecurrenceIdSignalErrorFull() instead")
    void getRecurrencebyrecurrenceIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecurrencebyrecurrenceIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getpaymentaccountsSignalErrorFull() instead")
    void getpaymentaccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getpaymentaccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getrecurrenceaddressesSignalErrorFull() instead")
    void getrecurrenceaddressesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getrecurrenceaddressesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getrecurrencesettingsSignalErrorFull() instead")
    void getrecurrencesettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getrecurrencesettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getselfrecurrenceSignalErrorFull() instead")
    void getselfrecurrenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getselfrecurrenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reindexrecurrenceSignalErrorFull() instead")
    void reindexrecurrenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reindexrecurrenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatepartialrecurrenceSignalErrorFull() instead")
    void updatepartialrecurrenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatepartialrecurrenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updaterecurrenceSignalErrorFull() instead")
    void updaterecurrenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updaterecurrenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updaterecurrencesettingsSignalErrorFull() instead")
    void updaterecurrencesettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updaterecurrencesettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
