/**
 * Subscription (v1 - deprecated)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddrecurrenceitemRequest from '../model/AddrecurrenceitemRequest';
import ReindexrecurrenceRequest from '../model/ReindexrecurrenceRequest';
import UpdatepartialrecurrenceRequest from '../model/UpdatepartialrecurrenceRequest';
import UpdaterecurrenceRequest from '../model/UpdaterecurrenceRequest';
import UpdaterecurrencesettingsRequest from '../model/UpdaterecurrencesettingsRequest';

/**
* Miscellaneous service.
* @module api/MiscellaneousApi
* @version 1.0
*/
export default class MiscellaneousApi {

    /**
    * Constructs a new MiscellaneousApi. 
    * @alias module:api/MiscellaneousApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addrecurrenceitem operation.
     * @callback module:api/MiscellaneousApi~addrecurrenceitemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Subscription item
     * Adds an item to a Subscription (formerly Recurrence).
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} recurrenceId 
     * @param {Array.<module:model/AddrecurrenceitemRequest>} addrecurrenceitemRequest 
     * @param {module:api/MiscellaneousApi~addrecurrenceitemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addrecurrenceitem(contentType, accept, recurrenceId, addrecurrenceitemRequest, callback) {
      let postBody = addrecurrenceitemRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling addrecurrenceitem");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling addrecurrenceitem");
      }
      // verify the required parameter 'recurrenceId' is set
      if (recurrenceId === undefined || recurrenceId === null) {
        throw new Error("Missing the required parameter 'recurrenceId' when calling addrecurrenceitem");
      }
      // verify the required parameter 'addrecurrenceitemRequest' is set
      if (addrecurrenceitemRequest === undefined || addrecurrenceitemRequest === null) {
        throw new Error("Missing the required parameter 'addrecurrenceitemRequest' when calling addrecurrenceitem");
      }

      let pathParams = {
        'recurrenceId': recurrenceId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{recurrenceId}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurrencebyemail operation.
     * @callback module:api/MiscellaneousApi~getRecurrencebyemailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Subscriptions
     * Retrieves a given Subscription (formerly recurrence). There are three options of filtering your Subscruptions v1. It's possible to get a list of all Subscriptions v1, by not adding any query params to your request, and simply executing a call to the url. It is also possible to list the Subscriptions by email, filtering by the email query param. And finnally, it is possible to list recurrences with failures on the last execution cycle, filtering by the cycleStatus query param.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {Object} opts Optional parameters
     * @param {String} [email] If you wish to list tasks by email, insert the desired user's email.
     * @param {String} [cycleStatus] If you wish to list tasks by Subscriptions with failures on the last execution cycle, insert the desired cycleStatus.
     * @param {module:api/MiscellaneousApi~getRecurrencebyemailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurrencebyemail(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getRecurrencebyemail");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getRecurrencebyemail");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': opts['email'],
        'cycleStatus': opts['cycleStatus']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecurrencebyrecurrenceId operation.
     * @callback module:api/MiscellaneousApi~getRecurrencebyrecurrenceIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Subscription by recurrenceId
     * Retrieves a given Subscription (formerly recurrence) by recurrenceId.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} recurrenceId 
     * @param {module:api/MiscellaneousApi~getRecurrencebyrecurrenceIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecurrencebyrecurrenceId(contentType, accept, recurrenceId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getRecurrencebyrecurrenceId");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getRecurrencebyrecurrenceId");
      }
      // verify the required parameter 'recurrenceId' is set
      if (recurrenceId === undefined || recurrenceId === null) {
        throw new Error("Missing the required parameter 'recurrenceId' when calling getRecurrencebyrecurrenceId");
      }

      let pathParams = {
        'recurrenceId': recurrenceId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{recurrenceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getpaymentaccounts operation.
     * @callback module:api/MiscellaneousApi~getpaymentaccountsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get payment accounts
     * Lists payment accounts of a given Subscription (formerly Recurrence) by recurrenceId.
     * @param {String} recurrenceid 
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:api/MiscellaneousApi~getpaymentaccountsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getpaymentaccounts(recurrenceid, contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'recurrenceid' is set
      if (recurrenceid === undefined || recurrenceid === null) {
        throw new Error("Missing the required parameter 'recurrenceid' when calling getpaymentaccounts");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getpaymentaccounts");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getpaymentaccounts");
      }

      let pathParams = {
        'recurrenceid': recurrenceid
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{recurrenceid}/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getrecurrenceaddresses operation.
     * @callback module:api/MiscellaneousApi~getrecurrenceaddressesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Subscription addresses
     * Retrieves the addresses attached to a given subscription (formerly recurrence) by recurrenceId.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {String} recurrenceId 
     * @param {module:api/MiscellaneousApi~getrecurrenceaddressesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getrecurrenceaddresses(contentType, accept, recurrenceId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getrecurrenceaddresses");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getrecurrenceaddresses");
      }
      // verify the required parameter 'recurrenceId' is set
      if (recurrenceId === undefined || recurrenceId === null) {
        throw new Error("Missing the required parameter 'recurrenceId' when calling getrecurrenceaddresses");
      }

      let pathParams = {
        'recurrenceId': recurrenceId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{recurrenceId}/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getrecurrencesettings operation.
     * @callback module:api/MiscellaneousApi~getrecurrencesettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Subscription settings
     * Retrieves your store's Subscriptions' (formerly recurrence) settings.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:api/MiscellaneousApi~getrecurrencesettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getrecurrencesettings(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getrecurrencesettings");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getrecurrencesettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getselfrecurrence operation.
     * @callback module:api/MiscellaneousApi~getselfrecurrenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get self Subscription
     * Lists details of your self Subscription (formerly Recurrence).
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:api/MiscellaneousApi~getselfrecurrenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getselfrecurrence(contentType, accept, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getselfrecurrence");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getselfrecurrence");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reindexrecurrence operation.
     * @callback module:api/MiscellaneousApi~reindexrecurrenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reindex Subscription
     * Alters the frequency of a given Subscription (formerly Recurrence) by changing period and interval.
     * @param {String} recurrenceId 
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {Array.<module:model/ReindexrecurrenceRequest>} reindexrecurrenceRequest 
     * @param {module:api/MiscellaneousApi~reindexrecurrenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reindexrecurrence(recurrenceId, contentType, accept, reindexrecurrenceRequest, callback) {
      let postBody = reindexrecurrenceRequest;
      // verify the required parameter 'recurrenceId' is set
      if (recurrenceId === undefined || recurrenceId === null) {
        throw new Error("Missing the required parameter 'recurrenceId' when calling reindexrecurrence");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling reindexrecurrence");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling reindexrecurrence");
      }
      // verify the required parameter 'reindexrecurrenceRequest' is set
      if (reindexrecurrenceRequest === undefined || reindexrecurrenceRequest === null) {
        throw new Error("Missing the required parameter 'reindexrecurrenceRequest' when calling reindexrecurrence");
      }

      let pathParams = {
        'recurrenceId': recurrenceId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{recurrenceId}/reindex', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatepartialrecurrence operation.
     * @callback module:api/MiscellaneousApi~updatepartialrecurrenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update partial Subscription
     * Updates partial information of a given subscription (formerly Recurrence).
     * @param {String} recurrenceId 
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:model/UpdatepartialrecurrenceRequest} updatepartialrecurrenceRequest 
     * @param {module:api/MiscellaneousApi~updatepartialrecurrenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatepartialrecurrence(recurrenceId, contentType, accept, updatepartialrecurrenceRequest, callback) {
      let postBody = updatepartialrecurrenceRequest;
      // verify the required parameter 'recurrenceId' is set
      if (recurrenceId === undefined || recurrenceId === null) {
        throw new Error("Missing the required parameter 'recurrenceId' when calling updatepartialrecurrence");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updatepartialrecurrence");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updatepartialrecurrence");
      }
      // verify the required parameter 'updatepartialrecurrenceRequest' is set
      if (updatepartialrecurrenceRequest === undefined || updatepartialrecurrenceRequest === null) {
        throw new Error("Missing the required parameter 'updatepartialrecurrenceRequest' when calling updatepartialrecurrence");
      }

      let pathParams = {
        'recurrenceId': recurrenceId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{recurrenceId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updaterecurrence operation.
     * @callback module:api/MiscellaneousApi~updaterecurrenceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Subscription
     * Updates details of a given Subscription (formerly recurrence).
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:model/UpdaterecurrenceRequest} updaterecurrenceRequest 
     * @param {module:api/MiscellaneousApi~updaterecurrenceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updaterecurrence(contentType, accept, updaterecurrenceRequest, callback) {
      let postBody = updaterecurrenceRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updaterecurrence");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updaterecurrence");
      }
      // verify the required parameter 'updaterecurrenceRequest' is set
      if (updaterecurrenceRequest === undefined || updaterecurrenceRequest === null) {
        throw new Error("Missing the required parameter 'updaterecurrenceRequest' when calling updaterecurrence");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updaterecurrencesettings operation.
     * @callback module:api/MiscellaneousApi~updaterecurrencesettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Subscription settings
     * Updates the Subscriptions' (formerly Recurrence) settings of your store by salesChannel and defaultSLA.
     * @param {String} contentType Type of the content being sent
     * @param {String} accept HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand
     * @param {module:model/UpdaterecurrencesettingsRequest} updaterecurrencesettingsRequest 
     * @param {module:api/MiscellaneousApi~updaterecurrencesettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updaterecurrencesettings(contentType, accept, updaterecurrencesettingsRequest, callback) {
      let postBody = updaterecurrencesettingsRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updaterecurrencesettings");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updaterecurrencesettings");
      }
      // verify the required parameter 'updaterecurrencesettingsRequest' is set
      if (updaterecurrencesettingsRequest === undefined || updaterecurrencesettingsRequest === null) {
        throw new Error("Missing the required parameter 'updaterecurrencesettingsRequest' when calling updaterecurrencesettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
