# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdaterecurrencesettingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_sla: str=None, sales_channel: str=None):
        """UpdaterecurrencesettingsRequest - a model defined in OpenAPI

        :param default_sla: The default_sla of this UpdaterecurrencesettingsRequest.
        :param sales_channel: The sales_channel of this UpdaterecurrencesettingsRequest.
        """
        self.openapi_types = {
            'default_sla': str,
            'sales_channel': str
        }

        self.attribute_map = {
            'default_sla': 'defaultSLA',
            'sales_channel': 'salesChannel'
        }

        self._default_sla = default_sla
        self._sales_channel = sales_channel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdaterecurrencesettingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdaterecurrencesettingsRequest of this UpdaterecurrencesettingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_sla(self):
        """Gets the default_sla of this UpdaterecurrencesettingsRequest.


        :return: The default_sla of this UpdaterecurrencesettingsRequest.
        :rtype: str
        """
        return self._default_sla

    @default_sla.setter
    def default_sla(self, default_sla):
        """Sets the default_sla of this UpdaterecurrencesettingsRequest.


        :param default_sla: The default_sla of this UpdaterecurrencesettingsRequest.
        :type default_sla: str
        """
        if default_sla is None:
            raise ValueError("Invalid value for `default_sla`, must not be `None`")

        self._default_sla = default_sla

    @property
    def sales_channel(self):
        """Gets the sales_channel of this UpdaterecurrencesettingsRequest.


        :return: The sales_channel of this UpdaterecurrencesettingsRequest.
        :rtype: str
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this UpdaterecurrencesettingsRequest.


        :param sales_channel: The sales_channel of this UpdaterecurrencesettingsRequest.
        :type sales_channel: str
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")

        self._sales_channel = sales_channel
