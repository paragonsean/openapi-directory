# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item import Item
from openapi_server import util


class UpdaterecurrenceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_day: int=None, delivery_weekday: str=None, email: str=None, items: List[Item]=None, payment_account_id: str=None):
        """UpdaterecurrenceRequest - a model defined in OpenAPI

        :param delivery_day: The delivery_day of this UpdaterecurrenceRequest.
        :param delivery_weekday: The delivery_weekday of this UpdaterecurrenceRequest.
        :param email: The email of this UpdaterecurrenceRequest.
        :param items: The items of this UpdaterecurrenceRequest.
        :param payment_account_id: The payment_account_id of this UpdaterecurrenceRequest.
        """
        self.openapi_types = {
            'delivery_day': int,
            'delivery_weekday': str,
            'email': str,
            'items': List[Item],
            'payment_account_id': str
        }

        self.attribute_map = {
            'delivery_day': 'deliveryDay',
            'delivery_weekday': 'deliveryWeekday',
            'email': 'email',
            'items': 'items',
            'payment_account_id': 'paymentAccountId'
        }

        self._delivery_day = delivery_day
        self._delivery_weekday = delivery_weekday
        self._email = email
        self._items = items
        self._payment_account_id = payment_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdaterecurrenceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdaterecurrenceRequest of this UpdaterecurrenceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_day(self):
        """Gets the delivery_day of this UpdaterecurrenceRequest.


        :return: The delivery_day of this UpdaterecurrenceRequest.
        :rtype: int
        """
        return self._delivery_day

    @delivery_day.setter
    def delivery_day(self, delivery_day):
        """Sets the delivery_day of this UpdaterecurrenceRequest.


        :param delivery_day: The delivery_day of this UpdaterecurrenceRequest.
        :type delivery_day: int
        """
        if delivery_day is None:
            raise ValueError("Invalid value for `delivery_day`, must not be `None`")

        self._delivery_day = delivery_day

    @property
    def delivery_weekday(self):
        """Gets the delivery_weekday of this UpdaterecurrenceRequest.


        :return: The delivery_weekday of this UpdaterecurrenceRequest.
        :rtype: str
        """
        return self._delivery_weekday

    @delivery_weekday.setter
    def delivery_weekday(self, delivery_weekday):
        """Sets the delivery_weekday of this UpdaterecurrenceRequest.


        :param delivery_weekday: The delivery_weekday of this UpdaterecurrenceRequest.
        :type delivery_weekday: str
        """
        if delivery_weekday is None:
            raise ValueError("Invalid value for `delivery_weekday`, must not be `None`")

        self._delivery_weekday = delivery_weekday

    @property
    def email(self):
        """Gets the email of this UpdaterecurrenceRequest.


        :return: The email of this UpdaterecurrenceRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UpdaterecurrenceRequest.


        :param email: The email of this UpdaterecurrenceRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def items(self):
        """Gets the items of this UpdaterecurrenceRequest.

        

        :return: The items of this UpdaterecurrenceRequest.
        :rtype: List[Item]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this UpdaterecurrenceRequest.

        

        :param items: The items of this UpdaterecurrenceRequest.
        :type items: List[Item]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def payment_account_id(self):
        """Gets the payment_account_id of this UpdaterecurrenceRequest.


        :return: The payment_account_id of this UpdaterecurrenceRequest.
        :rtype: str
        """
        return self._payment_account_id

    @payment_account_id.setter
    def payment_account_id(self, payment_account_id):
        """Sets the payment_account_id of this UpdaterecurrenceRequest.


        :param payment_account_id: The payment_account_id of this UpdaterecurrenceRequest.
        :type payment_account_id: str
        """
        if payment_account_id is None:
            raise ValueError("Invalid value for `payment_account_id`, must not be `None`")

        self._payment_account_id = payment_account_id
