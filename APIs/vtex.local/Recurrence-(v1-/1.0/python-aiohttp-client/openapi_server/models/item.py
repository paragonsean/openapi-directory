# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.frequency import Frequency
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency: Frequency=None, quantity: int=None, seller: str=None, shipping_address_id: str=None, sku: str=None):
        """Item - a model defined in OpenAPI

        :param frequency: The frequency of this Item.
        :param quantity: The quantity of this Item.
        :param seller: The seller of this Item.
        :param shipping_address_id: The shipping_address_id of this Item.
        :param sku: The sku of this Item.
        """
        self.openapi_types = {
            'frequency': Frequency,
            'quantity': int,
            'seller': str,
            'shipping_address_id': str,
            'sku': str
        }

        self.attribute_map = {
            'frequency': 'frequency',
            'quantity': 'quantity',
            'seller': 'seller',
            'shipping_address_id': 'shippingAddressId',
            'sku': 'sku'
        }

        self._frequency = frequency
        self._quantity = quantity
        self._seller = seller
        self._shipping_address_id = shipping_address_id
        self._sku = sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item of this Item.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency(self):
        """Gets the frequency of this Item.


        :return: The frequency of this Item.
        :rtype: Frequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Item.


        :param frequency: The frequency of this Item.
        :type frequency: Frequency
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency

    @property
    def quantity(self):
        """Gets the quantity of this Item.


        :return: The quantity of this Item.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Item.


        :param quantity: The quantity of this Item.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def seller(self):
        """Gets the seller of this Item.


        :return: The seller of this Item.
        :rtype: str
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this Item.


        :param seller: The seller of this Item.
        :type seller: str
        """
        if seller is None:
            raise ValueError("Invalid value for `seller`, must not be `None`")

        self._seller = seller

    @property
    def shipping_address_id(self):
        """Gets the shipping_address_id of this Item.


        :return: The shipping_address_id of this Item.
        :rtype: str
        """
        return self._shipping_address_id

    @shipping_address_id.setter
    def shipping_address_id(self, shipping_address_id):
        """Sets the shipping_address_id of this Item.


        :param shipping_address_id: The shipping_address_id of this Item.
        :type shipping_address_id: str
        """
        if shipping_address_id is None:
            raise ValueError("Invalid value for `shipping_address_id`, must not be `None`")

        self._shipping_address_id = shipping_address_id

    @property
    def sku(self):
        """Gets the sku of this Item.


        :return: The sku of this Item.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this Item.


        :param sku: The sku of this Item.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku
