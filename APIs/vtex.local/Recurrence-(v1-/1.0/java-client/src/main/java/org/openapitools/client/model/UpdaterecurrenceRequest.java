/*
 * Subscription (v1 - deprecated)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Item;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdaterecurrenceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:37.375682-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdaterecurrenceRequest {
  public static final String SERIALIZED_NAME_DELIVERY_DAY = "deliveryDay";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DAY)
  private Integer deliveryDay;

  public static final String SERIALIZED_NAME_DELIVERY_WEEKDAY = "deliveryWeekday";
  @SerializedName(SERIALIZED_NAME_DELIVERY_WEEKDAY)
  private String deliveryWeekday;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Item> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_ACCOUNT_ID = "paymentAccountId";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ACCOUNT_ID)
  private String paymentAccountId;

  public UpdaterecurrenceRequest() {
  }

  public UpdaterecurrenceRequest deliveryDay(Integer deliveryDay) {
    this.deliveryDay = deliveryDay;
    return this;
  }

  /**
   * Get deliveryDay
   * @return deliveryDay
   */
  @javax.annotation.Nonnull
  public Integer getDeliveryDay() {
    return deliveryDay;
  }

  public void setDeliveryDay(Integer deliveryDay) {
    this.deliveryDay = deliveryDay;
  }


  public UpdaterecurrenceRequest deliveryWeekday(String deliveryWeekday) {
    this.deliveryWeekday = deliveryWeekday;
    return this;
  }

  /**
   * Get deliveryWeekday
   * @return deliveryWeekday
   */
  @javax.annotation.Nonnull
  public String getDeliveryWeekday() {
    return deliveryWeekday;
  }

  public void setDeliveryWeekday(String deliveryWeekday) {
    this.deliveryWeekday = deliveryWeekday;
  }


  public UpdaterecurrenceRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UpdaterecurrenceRequest items(List<Item> items) {
    this.items = items;
    return this;
  }

  public UpdaterecurrenceRequest addItemsItem(Item itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * 
   * @return items
   */
  @javax.annotation.Nonnull
  public List<Item> getItems() {
    return items;
  }

  public void setItems(List<Item> items) {
    this.items = items;
  }


  public UpdaterecurrenceRequest paymentAccountId(String paymentAccountId) {
    this.paymentAccountId = paymentAccountId;
    return this;
  }

  /**
   * Get paymentAccountId
   * @return paymentAccountId
   */
  @javax.annotation.Nonnull
  public String getPaymentAccountId() {
    return paymentAccountId;
  }

  public void setPaymentAccountId(String paymentAccountId) {
    this.paymentAccountId = paymentAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdaterecurrenceRequest updaterecurrenceRequest = (UpdaterecurrenceRequest) o;
    return Objects.equals(this.deliveryDay, updaterecurrenceRequest.deliveryDay) &&
        Objects.equals(this.deliveryWeekday, updaterecurrenceRequest.deliveryWeekday) &&
        Objects.equals(this.email, updaterecurrenceRequest.email) &&
        Objects.equals(this.items, updaterecurrenceRequest.items) &&
        Objects.equals(this.paymentAccountId, updaterecurrenceRequest.paymentAccountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryDay, deliveryWeekday, email, items, paymentAccountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdaterecurrenceRequest {\n");
    sb.append("    deliveryDay: ").append(toIndentedString(deliveryDay)).append("\n");
    sb.append("    deliveryWeekday: ").append(toIndentedString(deliveryWeekday)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    paymentAccountId: ").append(toIndentedString(paymentAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deliveryDay");
    openapiFields.add("deliveryWeekday");
    openapiFields.add("email");
    openapiFields.add("items");
    openapiFields.add("paymentAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deliveryDay");
    openapiRequiredFields.add("deliveryWeekday");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("paymentAccountId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdaterecurrenceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdaterecurrenceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdaterecurrenceRequest is not found in the empty JSON string", UpdaterecurrenceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdaterecurrenceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdaterecurrenceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdaterecurrenceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("deliveryWeekday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryWeekday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryWeekday").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        Item.validateJsonElement(jsonArrayitems.get(i));
      };
      if (!jsonObj.get("paymentAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdaterecurrenceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdaterecurrenceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdaterecurrenceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdaterecurrenceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdaterecurrenceRequest>() {
           @Override
           public void write(JsonWriter out, UpdaterecurrenceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdaterecurrenceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdaterecurrenceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdaterecurrenceRequest
   * @throws IOException if the JSON string is invalid with respect to UpdaterecurrenceRequest
   */
  public static UpdaterecurrenceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdaterecurrenceRequest.class);
  }

  /**
   * Convert an instance of UpdaterecurrenceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

