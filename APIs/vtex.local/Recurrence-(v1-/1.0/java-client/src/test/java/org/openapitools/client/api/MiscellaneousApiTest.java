/*
 * Subscription (v1 - deprecated)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddrecurrenceitemRequest;
import org.openapitools.client.model.ReindexrecurrenceRequest;
import org.openapitools.client.model.UpdatepartialrecurrenceRequest;
import org.openapitools.client.model.UpdaterecurrenceRequest;
import org.openapitools.client.model.UpdaterecurrencesettingsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MiscellaneousApi
 */
@Disabled
public class MiscellaneousApiTest {

    private final MiscellaneousApi api = new MiscellaneousApi();

    /**
     * Add Subscription item
     *
     * Adds an item to a Subscription (formerly Recurrence).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addrecurrenceitemTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String recurrenceId = null;
        List<AddrecurrenceitemRequest> addrecurrenceitemRequest = null;
        api.addrecurrenceitem(contentType, accept, recurrenceId, addrecurrenceitemRequest);
        // TODO: test validations
    }

    /**
     * Get Subscriptions
     *
     * Retrieves a given Subscription (formerly recurrence). There are three options of filtering your Subscruptions v1. It&#39;s possible to get a list of all Subscriptions v1, by not adding any query params to your request, and simply executing a call to the url. It is also possible to list the Subscriptions by email, filtering by the email query param. And finnally, it is possible to list recurrences with failures on the last execution cycle, filtering by the cycleStatus query param.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecurrencebyemailTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String email = null;
        String cycleStatus = null;
        api.getRecurrencebyemail(contentType, accept, email, cycleStatus);
        // TODO: test validations
    }

    /**
     * Get Subscription by recurrenceId
     *
     * Retrieves a given Subscription (formerly recurrence) by recurrenceId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecurrencebyrecurrenceIdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String recurrenceId = null;
        api.getRecurrencebyrecurrenceId(contentType, accept, recurrenceId);
        // TODO: test validations
    }

    /**
     * Get payment accounts
     *
     * Lists payment accounts of a given Subscription (formerly Recurrence) by recurrenceId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getpaymentaccountsTest() throws ApiException {
        String recurrenceid = null;
        String contentType = null;
        String accept = null;
        api.getpaymentaccounts(recurrenceid, contentType, accept);
        // TODO: test validations
    }

    /**
     * Get Subscription addresses
     *
     * Retrieves the addresses attached to a given subscription (formerly recurrence) by recurrenceId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getrecurrenceaddressesTest() throws ApiException {
        String contentType = null;
        String accept = null;
        String recurrenceId = null;
        api.getrecurrenceaddresses(contentType, accept, recurrenceId);
        // TODO: test validations
    }

    /**
     * Get Subscription settings
     *
     * Retrieves your store&#39;s Subscriptions&#39; (formerly recurrence) settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getrecurrencesettingsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        api.getrecurrencesettings(contentType, accept);
        // TODO: test validations
    }

    /**
     * Get self Subscription
     *
     * Lists details of your self Subscription (formerly Recurrence).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getselfrecurrenceTest() throws ApiException {
        String contentType = null;
        String accept = null;
        api.getselfrecurrence(contentType, accept);
        // TODO: test validations
    }

    /**
     * Reindex Subscription
     *
     * Alters the frequency of a given Subscription (formerly Recurrence) by changing period and interval.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reindexrecurrenceTest() throws ApiException {
        String recurrenceId = null;
        String contentType = null;
        String accept = null;
        List<ReindexrecurrenceRequest> reindexrecurrenceRequest = null;
        api.reindexrecurrence(recurrenceId, contentType, accept, reindexrecurrenceRequest);
        // TODO: test validations
    }

    /**
     * Update partial Subscription
     *
     * Updates partial information of a given subscription (formerly Recurrence).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatepartialrecurrenceTest() throws ApiException {
        String recurrenceId = null;
        String contentType = null;
        String accept = null;
        UpdatepartialrecurrenceRequest updatepartialrecurrenceRequest = null;
        api.updatepartialrecurrence(recurrenceId, contentType, accept, updatepartialrecurrenceRequest);
        // TODO: test validations
    }

    /**
     * Update Subscription
     *
     * Updates details of a given Subscription (formerly recurrence).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updaterecurrenceTest() throws ApiException {
        String contentType = null;
        String accept = null;
        UpdaterecurrenceRequest updaterecurrenceRequest = null;
        api.updaterecurrence(contentType, accept, updaterecurrenceRequest);
        // TODO: test validations
    }

    /**
     * Update Subscription settings
     *
     * Updates the Subscriptions&#39; (formerly Recurrence) settings of your store by salesChannel and defaultSLA.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updaterecurrencesettingsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        UpdaterecurrencesettingsRequest updaterecurrencesettingsRequest = null;
        api.updaterecurrencesettings(contentType, accept, updaterecurrencesettingsRequest);
        // TODO: test validations
    }

}
