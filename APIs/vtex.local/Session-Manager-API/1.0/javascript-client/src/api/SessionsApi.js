/**
 * Session Manager API
 * This documentation goes in detail how to interact with Session Manager's API. For a more top-level approach, check the [design documentation](https://help.vtex.com/tutorial/using-session-manager-to-track-browsing-sessions-in-vtex-stores--1pA0tqsD4BFnJYhQ7ORQBd).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatenewsessionRequest from '../model/CreatenewsessionRequest';
import EditsessionRequest from '../model/EditsessionRequest';

/**
* Sessions service.
* @module api/SessionsApi
* @version 1.0
*/
export default class SessionsApi {

    /**
    * Constructs a new SessionsApi. 
    * @alias module:api/SessionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createnewsession operation.
     * @callback module:api/SessionsApi~createnewsessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new session
     * The response should contain a session cookie. Further `POST` or `PATCH` requests will edit the existing session rather than creating a new one. All parameters in the body that are not within the public namespace will be ignored. Query string items will automatically be added to the public namespace. Cookies relevant to the session manager execution are also recorded.    > The sessions API uses the `vtex_session` cookie to store the data required to identify the user and the session. This cookie is stored in the user's browser when the session is created and sent automatically in every request to that domain. You will have to reproduce that in order for it to work outside of a browser environment.
     * @param {module:model/CreatenewsessionRequest} createnewsessionRequest 
     * @param {module:api/SessionsApi~createnewsessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createnewsession(createnewsessionRequest, callback) {
      let postBody = createnewsessionRequest;
      // verify the required parameter 'createnewsessionRequest' is set
      if (createnewsessionRequest === undefined || createnewsessionRequest === null) {
        throw new Error("Missing the required parameter 'createnewsessionRequest' when calling createnewsession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editsession operation.
     * @callback module:api/SessionsApi~editsessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit session
     * This works exactly the same as the POST create session, but when the request is sent with a vtex_session cookie, it retrieves the session first and then applies the changes instead of generating a new one.    As with the `POST` method, only keys inside the public namespace on the body are considered, and query parameters are automatically added to the public namespace.    > The sessions API uses the `vtex_session` cookie to store the data required to identify the user and the session. This cookie is stored in the user's browser when the session is created and sent automatically in every request to that domain. You will have to reproduce that in order for it to work outside of a browser environment.
     * @param {module:model/EditsessionRequest} editsessionRequest 
     * @param {module:api/SessionsApi~editsessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editsession(editsessionRequest, callback) {
      let postBody = editsessionRequest;
      // verify the required parameter 'editsessionRequest' is set
      if (editsessionRequest === undefined || editsessionRequest === null) {
        throw new Error("Missing the required parameter 'editsessionRequest' when calling editsession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessions', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSession operation.
     * @callback module:api/SessionsApi~getSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Session
     * Items are the keys of the values you wish to get. It follows the format `namespace1.key1,namespace2.key2`. So if you wish to recover the data sent on the previous request, it should be `public.country,public.postalCode`.    > The sessions API uses the `vtex_session` cookie to store the data required to identify the user and the session. This cookie is stored in the user's browser when the session is created and sent automatically in every request to that domain. You will have to reproduce that in order for it to work outside of a browser environment.    > If you want to retrieve all keys from Session Manager, you can use the wildcard operator (`*`) in your request (i.e. `?items=*`).
     * @param {String} items Items are the keys of the values you wish to get. It follows the format `namespace1.key1,namespace2.key2`
     * @param {module:api/SessionsApi~getSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSession(items, callback) {
      let postBody = null;
      // verify the required parameter 'items' is set
      if (items === undefined || items === null) {
        throw new Error("Missing the required parameter 'items' when calling getSession");
      }

      let pathParams = {
      };
      let queryParams = {
        'items': items
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
