/**
 * Session Manager API
 * This documentation goes in detail how to interact with Session Manager's API. For a more top-level approach, check the [design documentation](https://help.vtex.com/tutorial/using-session-manager-to-track-browsing-sessions-in-vtex-stores--1pA0tqsD4BFnJYhQ7ORQBd).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Country from './model/Country';
import CreatenewsessionRequest from './model/CreatenewsessionRequest';
import EditsessionRequest from './model/EditsessionRequest';
import ModifysessiongettingspecificparametersRequest from './model/ModifysessiongettingspecificparametersRequest';
import NewValue from './model/NewValue';
import PostalCode from './model/PostalCode';
import Public from './model/Public';
import Public1 from './model/Public1';
import SegmentApi from './api/SegmentApi';
import SessionsApi from './api/SessionsApi';


/**
* This documentation goes in detail how to interact with Session Manager&#39;s API. For a more top-level approach, check the [design documentation](https://help.vtex.com/tutorial/using-session-manager-to-track-browsing-sessions-in-vtex-stores--1pA0tqsD4BFnJYhQ7ORQBd)..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SessionManagerApi = require('index'); // See note below*.
* var xxxSvc = new SessionManagerApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SessionManagerApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SessionManagerApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SessionManagerApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Country model constructor.
     * @property {module:model/Country}
     */
    Country,

    /**
     * The CreatenewsessionRequest model constructor.
     * @property {module:model/CreatenewsessionRequest}
     */
    CreatenewsessionRequest,

    /**
     * The EditsessionRequest model constructor.
     * @property {module:model/EditsessionRequest}
     */
    EditsessionRequest,

    /**
     * The ModifysessiongettingspecificparametersRequest model constructor.
     * @property {module:model/ModifysessiongettingspecificparametersRequest}
     */
    ModifysessiongettingspecificparametersRequest,

    /**
     * The NewValue model constructor.
     * @property {module:model/NewValue}
     */
    NewValue,

    /**
     * The PostalCode model constructor.
     * @property {module:model/PostalCode}
     */
    PostalCode,

    /**
     * The Public model constructor.
     * @property {module:model/Public}
     */
    Public,

    /**
     * The Public1 model constructor.
     * @property {module:model/Public1}
     */
    Public1,

    /**
    * The SegmentApi service constructor.
    * @property {module:api/SegmentApi}
    */
    SegmentApi,

    /**
    * The SessionsApi service constructor.
    * @property {module:api/SessionsApi}
    */
    SessionsApi
};
