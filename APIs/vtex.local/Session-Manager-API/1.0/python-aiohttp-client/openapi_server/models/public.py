# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country import Country
from openapi_server.models.postal_code import PostalCode
from openapi_server import util


class Public(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: Country=None, postal_code: PostalCode=None):
        """Public - a model defined in OpenAPI

        :param country: The country of this Public.
        :param postal_code: The postal_code of this Public.
        """
        self.openapi_types = {
            'country': Country,
            'postal_code': PostalCode
        }

        self.attribute_map = {
            'country': 'country',
            'postal_code': 'postalCode'
        }

        self._country = country
        self._postal_code = postal_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Public':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Public of this Public.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this Public.


        :return: The country of this Public.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Public.


        :param country: The country of this Public.
        :type country: Country
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this Public.


        :return: The postal_code of this Public.
        :rtype: PostalCode
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Public.


        :param postal_code: The postal_code of this Public.
        :type postal_code: PostalCode
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")

        self._postal_code = postal_code
