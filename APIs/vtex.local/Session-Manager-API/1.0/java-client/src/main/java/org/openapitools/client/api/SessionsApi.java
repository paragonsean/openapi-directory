/*
 * Session Manager API
 * This documentation goes in detail how to interact with Session Manager's API. For a more top-level approach, check the [design documentation](https://help.vtex.com/tutorial/using-session-manager-to-track-browsing-sessions-in-vtex-stores--1pA0tqsD4BFnJYhQ7ORQBd).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreatenewsessionRequest;
import org.openapitools.client.model.EditsessionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SessionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SessionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SessionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createnewsession
     * @param createnewsessionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createnewsessionCall(CreatenewsessionRequest createnewsessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createnewsessionRequest;

        // create path and map variables
        String localVarPath = "/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createnewsessionValidateBeforeCall(CreatenewsessionRequest createnewsessionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createnewsessionRequest' is set
        if (createnewsessionRequest == null) {
            throw new ApiException("Missing the required parameter 'createnewsessionRequest' when calling createnewsession(Async)");
        }

        return createnewsessionCall(createnewsessionRequest, _callback);

    }

    /**
     * Create new session
     * The response should contain a session cookie. Further &#x60;POST&#x60; or &#x60;PATCH&#x60; requests will edit the existing session rather than creating a new one. All parameters in the body that are not within the public namespace will be ignored. Query string items will automatically be added to the public namespace. Cookies relevant to the session manager execution are also recorded.    &gt; The sessions API uses the &#x60;vtex_session&#x60; cookie to store the data required to identify the user and the session. This cookie is stored in the user&#39;s browser when the session is created and sent automatically in every request to that domain. You will have to reproduce that in order for it to work outside of a browser environment.
     * @param createnewsessionRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void createnewsession(CreatenewsessionRequest createnewsessionRequest) throws ApiException {
        createnewsessionWithHttpInfo(createnewsessionRequest);
    }

    /**
     * Create new session
     * The response should contain a session cookie. Further &#x60;POST&#x60; or &#x60;PATCH&#x60; requests will edit the existing session rather than creating a new one. All parameters in the body that are not within the public namespace will be ignored. Query string items will automatically be added to the public namespace. Cookies relevant to the session manager execution are also recorded.    &gt; The sessions API uses the &#x60;vtex_session&#x60; cookie to store the data required to identify the user and the session. This cookie is stored in the user&#39;s browser when the session is created and sent automatically in every request to that domain. You will have to reproduce that in order for it to work outside of a browser environment.
     * @param createnewsessionRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createnewsessionWithHttpInfo(CreatenewsessionRequest createnewsessionRequest) throws ApiException {
        okhttp3.Call localVarCall = createnewsessionValidateBeforeCall(createnewsessionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create new session (asynchronously)
     * The response should contain a session cookie. Further &#x60;POST&#x60; or &#x60;PATCH&#x60; requests will edit the existing session rather than creating a new one. All parameters in the body that are not within the public namespace will be ignored. Query string items will automatically be added to the public namespace. Cookies relevant to the session manager execution are also recorded.    &gt; The sessions API uses the &#x60;vtex_session&#x60; cookie to store the data required to identify the user and the session. This cookie is stored in the user&#39;s browser when the session is created and sent automatically in every request to that domain. You will have to reproduce that in order for it to work outside of a browser environment.
     * @param createnewsessionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createnewsessionAsync(CreatenewsessionRequest createnewsessionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createnewsessionValidateBeforeCall(createnewsessionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for editsession
     * @param editsessionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editsessionCall(EditsessionRequest editsessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editsessionRequest;

        // create path and map variables
        String localVarPath = "/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editsessionValidateBeforeCall(EditsessionRequest editsessionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'editsessionRequest' is set
        if (editsessionRequest == null) {
            throw new ApiException("Missing the required parameter 'editsessionRequest' when calling editsession(Async)");
        }

        return editsessionCall(editsessionRequest, _callback);

    }

    /**
     * Edit session
     * This works exactly the same as the POST create session, but when the request is sent with a vtex_session cookie, it retrieves the session first and then applies the changes instead of generating a new one.    As with the &#x60;POST&#x60; method, only keys inside the public namespace on the body are considered, and query parameters are automatically added to the public namespace.    &gt; The sessions API uses the &#x60;vtex_session&#x60; cookie to store the data required to identify the user and the session. This cookie is stored in the user&#39;s browser when the session is created and sent automatically in every request to that domain. You will have to reproduce that in order for it to work outside of a browser environment.
     * @param editsessionRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void editsession(EditsessionRequest editsessionRequest) throws ApiException {
        editsessionWithHttpInfo(editsessionRequest);
    }

    /**
     * Edit session
     * This works exactly the same as the POST create session, but when the request is sent with a vtex_session cookie, it retrieves the session first and then applies the changes instead of generating a new one.    As with the &#x60;POST&#x60; method, only keys inside the public namespace on the body are considered, and query parameters are automatically added to the public namespace.    &gt; The sessions API uses the &#x60;vtex_session&#x60; cookie to store the data required to identify the user and the session. This cookie is stored in the user&#39;s browser when the session is created and sent automatically in every request to that domain. You will have to reproduce that in order for it to work outside of a browser environment.
     * @param editsessionRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> editsessionWithHttpInfo(EditsessionRequest editsessionRequest) throws ApiException {
        okhttp3.Call localVarCall = editsessionValidateBeforeCall(editsessionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Edit session (asynchronously)
     * This works exactly the same as the POST create session, but when the request is sent with a vtex_session cookie, it retrieves the session first and then applies the changes instead of generating a new one.    As with the &#x60;POST&#x60; method, only keys inside the public namespace on the body are considered, and query parameters are automatically added to the public namespace.    &gt; The sessions API uses the &#x60;vtex_session&#x60; cookie to store the data required to identify the user and the session. This cookie is stored in the user&#39;s browser when the session is created and sent automatically in every request to that domain. You will have to reproduce that in order for it to work outside of a browser environment.
     * @param editsessionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call editsessionAsync(EditsessionRequest editsessionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = editsessionValidateBeforeCall(editsessionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSession
     * @param items Items are the keys of the values you wish to get. It follows the format &#x60;namespace1.key1,namespace2.key2&#x60; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSessionCall(String items, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (items != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("items", items));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSessionValidateBeforeCall(String items, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'items' is set
        if (items == null) {
            throw new ApiException("Missing the required parameter 'items' when calling getSession(Async)");
        }

        return getSessionCall(items, _callback);

    }

    /**
     * Get Session
     * Items are the keys of the values you wish to get. It follows the format &#x60;namespace1.key1,namespace2.key2&#x60;. So if you wish to recover the data sent on the previous request, it should be &#x60;public.country,public.postalCode&#x60;.    &gt; The sessions API uses the &#x60;vtex_session&#x60; cookie to store the data required to identify the user and the session. This cookie is stored in the user&#39;s browser when the session is created and sent automatically in every request to that domain. You will have to reproduce that in order for it to work outside of a browser environment.    &gt; If you want to retrieve all keys from Session Manager, you can use the wildcard operator (&#x60;*&#x60;) in your request (i.e. &#x60;?items&#x3D;*&#x60;).
     * @param items Items are the keys of the values you wish to get. It follows the format &#x60;namespace1.key1,namespace2.key2&#x60; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void getSession(String items) throws ApiException {
        getSessionWithHttpInfo(items);
    }

    /**
     * Get Session
     * Items are the keys of the values you wish to get. It follows the format &#x60;namespace1.key1,namespace2.key2&#x60;. So if you wish to recover the data sent on the previous request, it should be &#x60;public.country,public.postalCode&#x60;.    &gt; The sessions API uses the &#x60;vtex_session&#x60; cookie to store the data required to identify the user and the session. This cookie is stored in the user&#39;s browser when the session is created and sent automatically in every request to that domain. You will have to reproduce that in order for it to work outside of a browser environment.    &gt; If you want to retrieve all keys from Session Manager, you can use the wildcard operator (&#x60;*&#x60;) in your request (i.e. &#x60;?items&#x3D;*&#x60;).
     * @param items Items are the keys of the values you wish to get. It follows the format &#x60;namespace1.key1,namespace2.key2&#x60; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSessionWithHttpInfo(String items) throws ApiException {
        okhttp3.Call localVarCall = getSessionValidateBeforeCall(items, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Session (asynchronously)
     * Items are the keys of the values you wish to get. It follows the format &#x60;namespace1.key1,namespace2.key2&#x60;. So if you wish to recover the data sent on the previous request, it should be &#x60;public.country,public.postalCode&#x60;.    &gt; The sessions API uses the &#x60;vtex_session&#x60; cookie to store the data required to identify the user and the session. This cookie is stored in the user&#39;s browser when the session is created and sent automatically in every request to that domain. You will have to reproduce that in order for it to work outside of a browser environment.    &gt; If you want to retrieve all keys from Session Manager, you can use the wildcard operator (&#x60;*&#x60;) in your request (i.e. &#x60;?items&#x3D;*&#x60;).
     * @param items Items are the keys of the values you wish to get. It follows the format &#x60;namespace1.key1,namespace2.key2&#x60; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSessionAsync(String items, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSessionValidateBeforeCall(items, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
