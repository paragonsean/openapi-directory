/**
 * Session Manager API
 * This documentation goes in detail how to interact with Session Manager's API. For a more top-level approach, check the [design documentation](https://help.vtex.com/tutorial/using-session-manager-to-track-browsing-sessions-in-vtex-stores--1pA0tqsD4BFnJYhQ7ORQBd).
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatenewsessionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatenewsessionRequest::OAICreatenewsessionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatenewsessionRequest::OAICreatenewsessionRequest() {
    this->initializeModel();
}

OAICreatenewsessionRequest::~OAICreatenewsessionRequest() {}

void OAICreatenewsessionRequest::initializeModel() {

    m_r_public_isSet = false;
    m_r_public_isValid = false;
}

void OAICreatenewsessionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatenewsessionRequest::fromJsonObject(QJsonObject json) {

    m_r_public_isValid = ::OpenAPI::fromJsonValue(m_r_public, json[QString("public")]);
    m_r_public_isSet = !json[QString("public")].isNull() && m_r_public_isValid;
}

QString OAICreatenewsessionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatenewsessionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_r_public.isSet()) {
        obj.insert(QString("public"), ::OpenAPI::toJsonValue(m_r_public));
    }
    return obj;
}

OAIPublic OAICreatenewsessionRequest::getRPublic() const {
    return m_r_public;
}
void OAICreatenewsessionRequest::setRPublic(const OAIPublic &r_public) {
    m_r_public = r_public;
    m_r_public_isSet = true;
}

bool OAICreatenewsessionRequest::is_r_public_Set() const{
    return m_r_public_isSet;
}

bool OAICreatenewsessionRequest::is_r_public_Valid() const{
    return m_r_public_isValid;
}

bool OAICreatenewsessionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_public.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatenewsessionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_public_isValid && true;
}

} // namespace OpenAPI
