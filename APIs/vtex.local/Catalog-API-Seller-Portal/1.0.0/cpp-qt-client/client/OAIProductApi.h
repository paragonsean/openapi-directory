/**
 * Catalog API - Seller Portal
 *   With the Catalog API for Seller Portal, you will be able to create, edit and consult products and their variations, brands, and categories.    > This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).    ## Index    ### Product    `GET` [Get Product by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-)  `PUT` [Update Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-)  `GET` [Get Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-/description)  `PUT` [Update Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-/description)  `GET` [Get Product by external ID, SKU ID, SKU external ID or slug](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-param-)  `POST` [Create Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/products)    ### SKU    `GET` [Search for SKU](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/_search)  `GET` [Get List of SKUs](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/ids)    ### Brand    `GET` [Get List of Brands](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands)  `POST` [Create a Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/brands)  `GET` [Get Brand by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands/-brandId-)  `PUT` [Update Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/brands/-brandId-)    ### Category    `GET` [Get Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree)  `PUT` [Update Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/category-tree)  `GET` [Get Category by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree/categories/-categoryId-)  `POST` [Create a Category](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/category-tree/categories)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductApi_H
#define OAI_OAIProductApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetProductDescription_200_response.h"
#include "OAIGetProductQuery_200_response.h"
#include "OAIGetProduct_200_response.h"
#include "OAIPostProduct_200_response.h"
#include "OAIPostProduct_request.h"
#include "OAIPutProductDescription_request.h"
#include "OAIPutProduct_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductApi : public QObject {
    Q_OBJECT

public:
    OAIProductApi(const int timeOut = 0);
    ~OAIProductApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  product_id QString [required]
    */
    virtual void getProduct(const QString &content_type, const QString &accept, const QString &product_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  product_id QString [required]
    */
    virtual void getProductDescription(const QString &content_type, const QString &accept, const QString &product_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  param QString [required]
    */
    virtual void getProductQuery(const QString &content_type, const QString &accept, const QString &param);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  oai_post_product_request OAIPostProduct_request [optional]
    */
    virtual void postProduct(const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<OAIPostProduct_request> &oai_post_product_request = ::OpenAPI::OptionalParam<OAIPostProduct_request>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  oai_put_product_request OAIPutProduct_request [optional]
    */
    virtual void putProduct(const QString &content_type, const QString &accept, const QString &product_id, const ::OpenAPI::OptionalParam<OAIPutProduct_request> &oai_put_product_request = ::OpenAPI::OptionalParam<OAIPutProduct_request>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  oai_put_product_description_request OAIPutProductDescription_request [optional]
    */
    virtual void putProductDescription(const QString &content_type, const QString &accept, const QString &product_id, const ::OpenAPI::OptionalParam<OAIPutProductDescription_request> &oai_put_product_description_request = ::OpenAPI::OptionalParam<OAIPutProductDescription_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getProductCallback(OAIHttpRequestWorker *worker);
    void getProductDescriptionCallback(OAIHttpRequestWorker *worker);
    void getProductQueryCallback(OAIHttpRequestWorker *worker);
    void postProductCallback(OAIHttpRequestWorker *worker);
    void putProductCallback(OAIHttpRequestWorker *worker);
    void putProductDescriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getProductSignal(OAIGetProduct_200_response summary);
    void getProductDescriptionSignal(OAIGetProductDescription_200_response summary);
    void getProductQuerySignal(OAIGetProductQuery_200_response summary);
    void postProductSignal(OAIPostProduct_200_response summary);
    void putProductSignal();
    void putProductDescriptionSignal();


    void getProductSignalFull(OAIHttpRequestWorker *worker, OAIGetProduct_200_response summary);
    void getProductDescriptionSignalFull(OAIHttpRequestWorker *worker, OAIGetProductDescription_200_response summary);
    void getProductQuerySignalFull(OAIHttpRequestWorker *worker, OAIGetProductQuery_200_response summary);
    void postProductSignalFull(OAIHttpRequestWorker *worker, OAIPostProduct_200_response summary);
    void putProductSignalFull(OAIHttpRequestWorker *worker);
    void putProductDescriptionSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getProductSignalError() instead")
    void getProductSignalE(OAIGetProduct_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductSignalError(OAIGetProduct_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductDescriptionSignalError() instead")
    void getProductDescriptionSignalE(OAIGetProductDescription_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductDescriptionSignalError(OAIGetProductDescription_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductQuerySignalError() instead")
    void getProductQuerySignalE(OAIGetProductQuery_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductQuerySignalError(OAIGetProductQuery_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProductSignalError() instead")
    void postProductSignalE(OAIPostProduct_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postProductSignalError(OAIPostProduct_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putProductSignalError() instead")
    void putProductSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putProductSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putProductDescriptionSignalError() instead")
    void putProductDescriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putProductDescriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getProductSignalErrorFull() instead")
    void getProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductDescriptionSignalErrorFull() instead")
    void getProductDescriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductDescriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductQuerySignalErrorFull() instead")
    void getProductQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProductSignalErrorFull() instead")
    void postProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putProductSignalErrorFull() instead")
    void putProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putProductDescriptionSignalErrorFull() instead")
    void putProductDescriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putProductDescriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
