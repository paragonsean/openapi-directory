/**
 * Catalog API - Seller Portal
 *   With the Catalog API for Seller Portal, you will be able to create, edit and consult products and their variations, brands, and categories.    > This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).    ## Index    ### Product    `GET` [Get Product by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-)  `PUT` [Update Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-)  `GET` [Get Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-/description)  `PUT` [Update Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-/description)  `GET` [Get Product by external ID, SKU ID, SKU external ID or slug](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-param-)  `POST` [Create Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/products)    ### SKU    `GET` [Search for SKU](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/_search)  `GET` [Get List of SKUs](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/ids)    ### Brand    `GET` [Get List of Brands](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands)  `POST` [Create a Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/brands)  `GET` [Get Brand by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands/-brandId-)  `PUT` [Update Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/brands/-brandId-)    ### Category    `GET` [Get Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree)  `PUT` [Update Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/category-tree)  `GET` [Get Category by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree/categories/-categoryId-)  `POST` [Create a Category](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/category-tree/categories)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkus_inner_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkus_inner_1::OAISkus_inner_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkus_inner_1::OAISkus_inner_1() {
    this->initializeModel();
}

OAISkus_inner_1::~OAISkus_inner_1() {}

void OAISkus_inner_1::initializeModel() {

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_ean_isSet = false;
    m_ean_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_manufacturer_code_isSet = false;
    m_manufacturer_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_specs_isSet = false;
    m_specs_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAISkus_inner_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkus_inner_1::fromJsonObject(QJsonObject json) {

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_ean_isValid = ::OpenAPI::fromJsonValue(m_ean, json[QString("ean")]);
    m_ean_isSet = !json[QString("ean")].isNull() && m_ean_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_manufacturer_code_isValid = ::OpenAPI::fromJsonValue(m_manufacturer_code, json[QString("manufacturerCode")]);
    m_manufacturer_code_isSet = !json[QString("manufacturerCode")].isNull() && m_manufacturer_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_specs_isValid = ::OpenAPI::fromJsonValue(m_specs, json[QString("specs")]);
    m_specs_isSet = !json[QString("specs")].isNull() && m_specs_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAISkus_inner_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkus_inner_1::asJsonObject() const {
    QJsonObject obj;
    if (m_dimensions.isSet()) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_ean_isSet) {
        obj.insert(QString("ean"), ::OpenAPI::toJsonValue(m_ean));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_manufacturer_code_isSet) {
        obj.insert(QString("manufacturerCode"), ::OpenAPI::toJsonValue(m_manufacturer_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_specs.size() > 0) {
        obj.insert(QString("specs"), ::OpenAPI::toJsonValue(m_specs));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

OAIDimensions OAISkus_inner_1::getDimensions() const {
    return m_dimensions;
}
void OAISkus_inner_1::setDimensions(const OAIDimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAISkus_inner_1::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAISkus_inner_1::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAISkus_inner_1::getEan() const {
    return m_ean;
}
void OAISkus_inner_1::setEan(const QString &ean) {
    m_ean = ean;
    m_ean_isSet = true;
}

bool OAISkus_inner_1::is_ean_Set() const{
    return m_ean_isSet;
}

bool OAISkus_inner_1::is_ean_Valid() const{
    return m_ean_isValid;
}

QString OAISkus_inner_1::getExternalId() const {
    return m_external_id;
}
void OAISkus_inner_1::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAISkus_inner_1::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAISkus_inner_1::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAISkus_inner_1::getId() const {
    return m_id;
}
void OAISkus_inner_1::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISkus_inner_1::is_id_Set() const{
    return m_id_isSet;
}

bool OAISkus_inner_1::is_id_Valid() const{
    return m_id_isValid;
}

QList<QJsonValue> OAISkus_inner_1::getImages() const {
    return m_images;
}
void OAISkus_inner_1::setImages(const QList<QJsonValue> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAISkus_inner_1::is_images_Set() const{
    return m_images_isSet;
}

bool OAISkus_inner_1::is_images_Valid() const{
    return m_images_isValid;
}

bool OAISkus_inner_1::isIsActive() const {
    return m_is_active;
}
void OAISkus_inner_1::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAISkus_inner_1::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAISkus_inner_1::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAISkus_inner_1::getManufacturerCode() const {
    return m_manufacturer_code;
}
void OAISkus_inner_1::setManufacturerCode(const QString &manufacturer_code) {
    m_manufacturer_code = manufacturer_code;
    m_manufacturer_code_isSet = true;
}

bool OAISkus_inner_1::is_manufacturer_code_Set() const{
    return m_manufacturer_code_isSet;
}

bool OAISkus_inner_1::is_manufacturer_code_Valid() const{
    return m_manufacturer_code_isValid;
}

QString OAISkus_inner_1::getName() const {
    return m_name;
}
void OAISkus_inner_1::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISkus_inner_1::is_name_Set() const{
    return m_name_isSet;
}

bool OAISkus_inner_1::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAISpecs_inner> OAISkus_inner_1::getSpecs() const {
    return m_specs;
}
void OAISkus_inner_1::setSpecs(const QList<OAISpecs_inner> &specs) {
    m_specs = specs;
    m_specs_isSet = true;
}

bool OAISkus_inner_1::is_specs_Set() const{
    return m_specs_isSet;
}

bool OAISkus_inner_1::is_specs_Valid() const{
    return m_specs_isValid;
}

qint32 OAISkus_inner_1::getWeight() const {
    return m_weight;
}
void OAISkus_inner_1::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAISkus_inner_1::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAISkus_inner_1::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAISkus_inner_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkus_inner_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dimensions_isValid && m_id_isValid && m_images_isValid && m_is_active_isValid && m_specs_isValid && m_weight_isValid && true;
}

} // namespace OpenAPI
