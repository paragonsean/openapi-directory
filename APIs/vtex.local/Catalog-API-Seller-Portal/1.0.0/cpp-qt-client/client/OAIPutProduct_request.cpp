/**
 * Catalog API - Seller Portal
 *   With the Catalog API for Seller Portal, you will be able to create, edit and consult products and their variations, brands, and categories.    > This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).    ## Index    ### Product    `GET` [Get Product by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-)  `PUT` [Update Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-)  `GET` [Get Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-/description)  `PUT` [Update Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-/description)  `GET` [Get Product by external ID, SKU ID, SKU external ID or slug](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-param-)  `POST` [Create Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/products)    ### SKU    `GET` [Search for SKU](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/_search)  `GET` [Get List of SKUs](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/ids)    ### Brand    `GET` [Get List of Brands](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands)  `POST` [Create a Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/brands)  `GET` [Get Brand by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands/-brandId-)  `PUT` [Update Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/brands/-brandId-)    ### Category    `GET` [Get Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree)  `PUT` [Update Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/category-tree)  `GET` [Get Category by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree/categories/-categoryId-)  `POST` [Create a Category](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/category-tree/categories)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutProduct_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutProduct_request::OAIPutProduct_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutProduct_request::OAIPutProduct_request() {
    this->initializeModel();
}

OAIPutProduct_request::~OAIPutProduct_request() {}

void OAIPutProduct_request::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_brand_id_isSet = false;
    m_brand_id_isValid = false;

    m_category_ids_isSet = false;
    m_category_ids_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_skus_isSet = false;
    m_skus_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_specs_isSet = false;
    m_specs_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tax_code_isSet = false;
    m_tax_code_isValid = false;

    m_transport_modal_isSet = false;
    m_transport_modal_isValid = false;
}

void OAIPutProduct_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutProduct_request::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_brand_id_isValid = ::OpenAPI::fromJsonValue(m_brand_id, json[QString("brandId")]);
    m_brand_id_isSet = !json[QString("brandId")].isNull() && m_brand_id_isValid;

    m_category_ids_isValid = ::OpenAPI::fromJsonValue(m_category_ids, json[QString("categoryIds")]);
    m_category_ids_isSet = !json[QString("categoryIds")].isNull() && m_category_ids_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_skus_isValid = ::OpenAPI::fromJsonValue(m_skus, json[QString("skus")]);
    m_skus_isSet = !json[QString("skus")].isNull() && m_skus_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_specs_isValid = ::OpenAPI::fromJsonValue(m_specs, json[QString("specs")]);
    m_specs_isSet = !json[QString("specs")].isNull() && m_specs_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tax_code_isValid = ::OpenAPI::fromJsonValue(m_tax_code, json[QString("taxCode")]);
    m_tax_code_isSet = !json[QString("taxCode")].isNull() && m_tax_code_isValid;

    m_transport_modal_isValid = ::OpenAPI::fromJsonValue(m_transport_modal, json[QString("transportModal")]);
    m_transport_modal_isSet = !json[QString("transportModal")].isNull() && m_transport_modal_isValid;
}

QString OAIPutProduct_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutProduct_request::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_brand_id_isSet) {
        obj.insert(QString("brandId"), ::OpenAPI::toJsonValue(m_brand_id));
    }
    if (m_category_ids.size() > 0) {
        obj.insert(QString("categoryIds"), ::OpenAPI::toJsonValue(m_category_ids));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_skus.size() > 0) {
        obj.insert(QString("skus"), ::OpenAPI::toJsonValue(m_skus));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_specs.size() > 0) {
        obj.insert(QString("specs"), ::OpenAPI::toJsonValue(m_specs));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tax_code_isSet) {
        obj.insert(QString("taxCode"), ::OpenAPI::toJsonValue(m_tax_code));
    }
    if (m_transport_modal_isSet) {
        obj.insert(QString("transportModal"), ::OpenAPI::toJsonValue(m_transport_modal));
    }
    return obj;
}

QList<OAIAttributes_inner> OAIPutProduct_request::getAttributes() const {
    return m_attributes;
}
void OAIPutProduct_request::setAttributes(const QList<OAIAttributes_inner> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIPutProduct_request::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIPutProduct_request::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIPutProduct_request::getBrandId() const {
    return m_brand_id;
}
void OAIPutProduct_request::setBrandId(const QString &brand_id) {
    m_brand_id = brand_id;
    m_brand_id_isSet = true;
}

bool OAIPutProduct_request::is_brand_id_Set() const{
    return m_brand_id_isSet;
}

bool OAIPutProduct_request::is_brand_id_Valid() const{
    return m_brand_id_isValid;
}

QList<QString> OAIPutProduct_request::getCategoryIds() const {
    return m_category_ids;
}
void OAIPutProduct_request::setCategoryIds(const QList<QString> &category_ids) {
    m_category_ids = category_ids;
    m_category_ids_isSet = true;
}

bool OAIPutProduct_request::is_category_ids_Set() const{
    return m_category_ids_isSet;
}

bool OAIPutProduct_request::is_category_ids_Valid() const{
    return m_category_ids_isValid;
}

QString OAIPutProduct_request::getExternalId() const {
    return m_external_id;
}
void OAIPutProduct_request::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIPutProduct_request::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIPutProduct_request::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIPutProduct_request::getId() const {
    return m_id;
}
void OAIPutProduct_request::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPutProduct_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPutProduct_request::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImages_inner> OAIPutProduct_request::getImages() const {
    return m_images;
}
void OAIPutProduct_request::setImages(const QList<OAIImages_inner> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIPutProduct_request::is_images_Set() const{
    return m_images_isSet;
}

bool OAIPutProduct_request::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIPutProduct_request::getName() const {
    return m_name;
}
void OAIPutProduct_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPutProduct_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPutProduct_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPutProduct_request::getOrigin() const {
    return m_origin;
}
void OAIPutProduct_request::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIPutProduct_request::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIPutProduct_request::is_origin_Valid() const{
    return m_origin_isValid;
}

QList<OAISkus_inner_3> OAIPutProduct_request::getSkus() const {
    return m_skus;
}
void OAIPutProduct_request::setSkus(const QList<OAISkus_inner_3> &skus) {
    m_skus = skus;
    m_skus_isSet = true;
}

bool OAIPutProduct_request::is_skus_Set() const{
    return m_skus_isSet;
}

bool OAIPutProduct_request::is_skus_Valid() const{
    return m_skus_isValid;
}

QString OAIPutProduct_request::getSlug() const {
    return m_slug;
}
void OAIPutProduct_request::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIPutProduct_request::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIPutProduct_request::is_slug_Valid() const{
    return m_slug_isValid;
}

QList<OAISpecs_inner_1> OAIPutProduct_request::getSpecs() const {
    return m_specs;
}
void OAIPutProduct_request::setSpecs(const QList<OAISpecs_inner_1> &specs) {
    m_specs = specs;
    m_specs_isSet = true;
}

bool OAIPutProduct_request::is_specs_Set() const{
    return m_specs_isSet;
}

bool OAIPutProduct_request::is_specs_Valid() const{
    return m_specs_isValid;
}

QString OAIPutProduct_request::getStatus() const {
    return m_status;
}
void OAIPutProduct_request::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPutProduct_request::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPutProduct_request::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPutProduct_request::getTaxCode() const {
    return m_tax_code;
}
void OAIPutProduct_request::setTaxCode(const QString &tax_code) {
    m_tax_code = tax_code;
    m_tax_code_isSet = true;
}

bool OAIPutProduct_request::is_tax_code_Set() const{
    return m_tax_code_isSet;
}

bool OAIPutProduct_request::is_tax_code_Valid() const{
    return m_tax_code_isValid;
}

QString OAIPutProduct_request::getTransportModal() const {
    return m_transport_modal;
}
void OAIPutProduct_request::setTransportModal(const QString &transport_modal) {
    m_transport_modal = transport_modal;
    m_transport_modal_isSet = true;
}

bool OAIPutProduct_request::is_transport_modal_Set() const{
    return m_transport_modal_isSet;
}

bool OAIPutProduct_request::is_transport_modal_Valid() const{
    return m_transport_modal_isValid;
}

bool OAIPutProduct_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skus.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_modal_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutProduct_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attributes_isValid && m_brand_id_isValid && m_category_ids_isValid && m_images_isValid && m_name_isValid && m_origin_isValid && m_skus_isValid && m_slug_isValid && m_specs_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
