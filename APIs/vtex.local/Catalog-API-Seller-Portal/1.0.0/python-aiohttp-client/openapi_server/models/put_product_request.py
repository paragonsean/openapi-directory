# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attributes_inner import AttributesInner
from openapi_server.models.images_inner import ImagesInner
from openapi_server.models.skus_inner3 import SkusInner3
from openapi_server.models.specs_inner1 import SpecsInner1
from openapi_server import util


class PutProductRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: List[AttributesInner]=None, brand_id: str=None, category_ids: List[str]=None, external_id: str=None, id: str=None, images: List[ImagesInner]=None, name: str=None, origin: str=None, skus: List[SkusInner3]=None, slug: str=None, specs: List[SpecsInner1]=None, status: str=None, tax_code: str=None, transport_modal: str=None):
        """PutProductRequest - a model defined in OpenAPI

        :param attributes: The attributes of this PutProductRequest.
        :param brand_id: The brand_id of this PutProductRequest.
        :param category_ids: The category_ids of this PutProductRequest.
        :param external_id: The external_id of this PutProductRequest.
        :param id: The id of this PutProductRequest.
        :param images: The images of this PutProductRequest.
        :param name: The name of this PutProductRequest.
        :param origin: The origin of this PutProductRequest.
        :param skus: The skus of this PutProductRequest.
        :param slug: The slug of this PutProductRequest.
        :param specs: The specs of this PutProductRequest.
        :param status: The status of this PutProductRequest.
        :param tax_code: The tax_code of this PutProductRequest.
        :param transport_modal: The transport_modal of this PutProductRequest.
        """
        self.openapi_types = {
            'attributes': List[AttributesInner],
            'brand_id': str,
            'category_ids': List[str],
            'external_id': str,
            'id': str,
            'images': List[ImagesInner],
            'name': str,
            'origin': str,
            'skus': List[SkusInner3],
            'slug': str,
            'specs': List[SpecsInner1],
            'status': str,
            'tax_code': str,
            'transport_modal': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'brand_id': 'brandId',
            'category_ids': 'categoryIds',
            'external_id': 'externalId',
            'id': 'id',
            'images': 'images',
            'name': 'name',
            'origin': 'origin',
            'skus': 'skus',
            'slug': 'slug',
            'specs': 'specs',
            'status': 'status',
            'tax_code': 'taxCode',
            'transport_modal': 'transportModal'
        }

        self._attributes = attributes
        self._brand_id = brand_id
        self._category_ids = category_ids
        self._external_id = external_id
        self._id = id
        self._images = images
        self._name = name
        self._origin = origin
        self._skus = skus
        self._slug = slug
        self._specs = specs
        self._status = status
        self._tax_code = tax_code
        self._transport_modal = transport_modal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutProductRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutProduct_request of this PutProductRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this PutProductRequest.

        Attributes of the product. Attributes are additional properties used to create site browsing filters.

        :return: The attributes of this PutProductRequest.
        :rtype: List[AttributesInner]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this PutProductRequest.

        Attributes of the product. Attributes are additional properties used to create site browsing filters.

        :param attributes: The attributes of this PutProductRequest.
        :type attributes: List[AttributesInner]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def brand_id(self):
        """Gets the brand_id of this PutProductRequest.

        Product's Brand unique identifier number.

        :return: The brand_id of this PutProductRequest.
        :rtype: str
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this PutProductRequest.

        Product's Brand unique identifier number.

        :param brand_id: The brand_id of this PutProductRequest.
        :type brand_id: str
        """
        if brand_id is None:
            raise ValueError("Invalid value for `brand_id`, must not be `None`")

        self._brand_id = brand_id

    @property
    def category_ids(self):
        """Gets the category_ids of this PutProductRequest.

        Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.

        :return: The category_ids of this PutProductRequest.
        :rtype: List[str]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this PutProductRequest.

        Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.

        :param category_ids: The category_ids of this PutProductRequest.
        :type category_ids: List[str]
        """
        if category_ids is None:
            raise ValueError("Invalid value for `category_ids`, must not be `None`")

        self._category_ids = category_ids

    @property
    def external_id(self):
        """Gets the external_id of this PutProductRequest.

        Product reference unique identifier number in the store.

        :return: The external_id of this PutProductRequest.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this PutProductRequest.

        Product reference unique identifier number in the store.

        :param external_id: The external_id of this PutProductRequest.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this PutProductRequest.

        Product's unique identifier number.

        :return: The id of this PutProductRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PutProductRequest.

        Product's unique identifier number.

        :param id: The id of this PutProductRequest.
        :type id: str
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this PutProductRequest.

        Information of the images of the product.

        :return: The images of this PutProductRequest.
        :rtype: List[ImagesInner]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this PutProductRequest.

        Information of the images of the product.

        :param images: The images of this PutProductRequest.
        :type images: List[ImagesInner]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def name(self):
        """Gets the name of this PutProductRequest.

        Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.

        :return: The name of this PutProductRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PutProductRequest.

        Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.

        :param name: The name of this PutProductRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this PutProductRequest.

        Origin account of the product. It is not possible to alter products where the origin is `marketplace`.

        :return: The origin of this PutProductRequest.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this PutProductRequest.

        Origin account of the product. It is not possible to alter products where the origin is `marketplace`.

        :param origin: The origin of this PutProductRequest.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")

        self._origin = origin

    @property
    def skus(self):
        """Gets the skus of this PutProductRequest.

        SKUs of the product.

        :return: The skus of this PutProductRequest.
        :rtype: List[SkusInner3]
        """
        return self._skus

    @skus.setter
    def skus(self, skus):
        """Sets the skus of this PutProductRequest.

        SKUs of the product.

        :param skus: The skus of this PutProductRequest.
        :type skus: List[SkusInner3]
        """
        if skus is None:
            raise ValueError("Invalid value for `skus`, must not be `None`")

        self._skus = skus

    @property
    def slug(self):
        """Gets the slug of this PutProductRequest.

        Reference of the product in the URL of the store.

        :return: The slug of this PutProductRequest.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this PutProductRequest.

        Reference of the product in the URL of the store.

        :param slug: The slug of this PutProductRequest.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def specs(self):
        """Gets the specs of this PutProductRequest.

        Specifications that will differentiate the possible product SKUs.

        :return: The specs of this PutProductRequest.
        :rtype: List[SpecsInner1]
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this PutProductRequest.

        Specifications that will differentiate the possible product SKUs.

        :param specs: The specs of this PutProductRequest.
        :type specs: List[SpecsInner1]
        """
        if specs is None:
            raise ValueError("Invalid value for `specs`, must not be `None`")

        self._specs = specs

    @property
    def status(self):
        """Gets the status of this PutProductRequest.

        Status of the product. Its values can be `active` or `inactive`.

        :return: The status of this PutProductRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PutProductRequest.

        Status of the product. Its values can be `active` or `inactive`.

        :param status: The status of this PutProductRequest.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tax_code(self):
        """Gets the tax_code of this PutProductRequest.

        Product tax code.

        :return: The tax_code of this PutProductRequest.
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this PutProductRequest.

        Product tax code.

        :param tax_code: The tax_code of this PutProductRequest.
        :type tax_code: str
        """

        self._tax_code = tax_code

    @property
    def transport_modal(self):
        """Gets the transport_modal of this PutProductRequest.

        Transport modal of the product.

        :return: The transport_modal of this PutProductRequest.
        :rtype: str
        """
        return self._transport_modal

    @transport_modal.setter
    def transport_modal(self, transport_modal):
        """Sets the transport_modal of this PutProductRequest.

        Transport modal of the product.

        :param transport_modal: The transport_modal of this PutProductRequest.
        :type transport_modal: str
        """

        self._transport_modal = transport_modal
