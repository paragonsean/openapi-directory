# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.roots_inner import RootsInner
from openapi_server import util


class UpdateCategoryTreeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, roots: List[RootsInner]=None):
        """UpdateCategoryTreeRequest - a model defined in OpenAPI

        :param roots: The roots of this UpdateCategoryTreeRequest.
        """
        self.openapi_types = {
            'roots': List[RootsInner]
        }

        self.attribute_map = {
            'roots': 'roots'
        }

        self._roots = roots

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateCategoryTreeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateCategoryTree_request of this UpdateCategoryTreeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def roots(self):
        """Gets the roots of this UpdateCategoryTreeRequest.

        List of all categories of the store.

        :return: The roots of this UpdateCategoryTreeRequest.
        :rtype: List[RootsInner]
        """
        return self._roots

    @roots.setter
    def roots(self, roots):
        """Sets the roots of this UpdateCategoryTreeRequest.

        List of all categories of the store.

        :param roots: The roots of this UpdateCategoryTreeRequest.
        :type roots: List[RootsInner]
        """
        if roots is None:
            raise ValueError("Invalid value for `roots`, must not be `None`")

        self._roots = roots
