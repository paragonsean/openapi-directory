# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetProductDescription200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, product_id: str=None, updated_at: str=None):
        """GetProductDescription200Response - a model defined in OpenAPI

        :param created_at: The created_at of this GetProductDescription200Response.
        :param product_id: The product_id of this GetProductDescription200Response.
        :param updated_at: The updated_at of this GetProductDescription200Response.
        """
        self.openapi_types = {
            'created_at': str,
            'product_id': str,
            'updated_at': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'product_id': 'productId',
            'updated_at': 'updatedAt'
        }

        self._created_at = created_at
        self._product_id = product_id
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetProductDescription200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetProductDescription_200_response of this GetProductDescription200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this GetProductDescription200Response.

        Date when the brand was created.

        :return: The created_at of this GetProductDescription200Response.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetProductDescription200Response.

        Date when the brand was created.

        :param created_at: The created_at of this GetProductDescription200Response.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def product_id(self):
        """Gets the product_id of this GetProductDescription200Response.

        Product's unique identifier number.

        :return: The product_id of this GetProductDescription200Response.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this GetProductDescription200Response.

        Product's unique identifier number.

        :param product_id: The product_id of this GetProductDescription200Response.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def updated_at(self):
        """Gets the updated_at of this GetProductDescription200Response.

        Last date when the brand was updated.

        :return: The updated_at of this GetProductDescription200Response.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GetProductDescription200Response.

        Last date when the brand was updated.

        :param updated_at: The updated_at of this GetProductDescription200Response.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
