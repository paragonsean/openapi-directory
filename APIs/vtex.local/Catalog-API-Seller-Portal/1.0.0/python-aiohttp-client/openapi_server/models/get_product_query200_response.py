# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attributes_inner import AttributesInner
from openapi_server.models.images_inner import ImagesInner
from openapi_server.models.skus_inner2 import SkusInner2
from openapi_server.models.specs_inner1 import SpecsInner1
from openapi_server import util


class GetProductQuery200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: List[AttributesInner]=None, brand_id: str=None, brand_name: str=None, category_ids: List[str]=None, category_names: List[str]=None, created_at: str=None, external_id: str=None, id: str=None, images: List[ImagesInner]=None, name: str=None, origin: str=None, skus: List[SkusInner2]=None, slug: str=None, specs: List[SpecsInner1]=None, status: str=None, tax_code: str=None, transport_modal: str=None, updated_at: str=None):
        """GetProductQuery200Response - a model defined in OpenAPI

        :param attributes: The attributes of this GetProductQuery200Response.
        :param brand_id: The brand_id of this GetProductQuery200Response.
        :param brand_name: The brand_name of this GetProductQuery200Response.
        :param category_ids: The category_ids of this GetProductQuery200Response.
        :param category_names: The category_names of this GetProductQuery200Response.
        :param created_at: The created_at of this GetProductQuery200Response.
        :param external_id: The external_id of this GetProductQuery200Response.
        :param id: The id of this GetProductQuery200Response.
        :param images: The images of this GetProductQuery200Response.
        :param name: The name of this GetProductQuery200Response.
        :param origin: The origin of this GetProductQuery200Response.
        :param skus: The skus of this GetProductQuery200Response.
        :param slug: The slug of this GetProductQuery200Response.
        :param specs: The specs of this GetProductQuery200Response.
        :param status: The status of this GetProductQuery200Response.
        :param tax_code: The tax_code of this GetProductQuery200Response.
        :param transport_modal: The transport_modal of this GetProductQuery200Response.
        :param updated_at: The updated_at of this GetProductQuery200Response.
        """
        self.openapi_types = {
            'attributes': List[AttributesInner],
            'brand_id': str,
            'brand_name': str,
            'category_ids': List[str],
            'category_names': List[str],
            'created_at': str,
            'external_id': str,
            'id': str,
            'images': List[ImagesInner],
            'name': str,
            'origin': str,
            'skus': List[SkusInner2],
            'slug': str,
            'specs': List[SpecsInner1],
            'status': str,
            'tax_code': str,
            'transport_modal': str,
            'updated_at': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'brand_id': 'brandId',
            'brand_name': 'brandName',
            'category_ids': 'categoryIds',
            'category_names': 'categoryNames',
            'created_at': 'createdAt',
            'external_id': 'externalId',
            'id': 'id',
            'images': 'images',
            'name': 'name',
            'origin': 'origin',
            'skus': 'skus',
            'slug': 'slug',
            'specs': 'specs',
            'status': 'status',
            'tax_code': 'taxCode',
            'transport_modal': 'transportModal',
            'updated_at': 'updatedAt'
        }

        self._attributes = attributes
        self._brand_id = brand_id
        self._brand_name = brand_name
        self._category_ids = category_ids
        self._category_names = category_names
        self._created_at = created_at
        self._external_id = external_id
        self._id = id
        self._images = images
        self._name = name
        self._origin = origin
        self._skus = skus
        self._slug = slug
        self._specs = specs
        self._status = status
        self._tax_code = tax_code
        self._transport_modal = transport_modal
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetProductQuery200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetProductQuery_200_response of this GetProductQuery200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this GetProductQuery200Response.

        Attributes of the product. Attributes are additional properties used to create site browsing filters.

        :return: The attributes of this GetProductQuery200Response.
        :rtype: List[AttributesInner]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this GetProductQuery200Response.

        Attributes of the product. Attributes are additional properties used to create site browsing filters.

        :param attributes: The attributes of this GetProductQuery200Response.
        :type attributes: List[AttributesInner]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def brand_id(self):
        """Gets the brand_id of this GetProductQuery200Response.

        Product's Brand unique identifier number.

        :return: The brand_id of this GetProductQuery200Response.
        :rtype: str
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this GetProductQuery200Response.

        Product's Brand unique identifier number.

        :param brand_id: The brand_id of this GetProductQuery200Response.
        :type brand_id: str
        """
        if brand_id is None:
            raise ValueError("Invalid value for `brand_id`, must not be `None`")

        self._brand_id = brand_id

    @property
    def brand_name(self):
        """Gets the brand_name of this GetProductQuery200Response.

        Name of the Brand associated with the product.

        :return: The brand_name of this GetProductQuery200Response.
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this GetProductQuery200Response.

        Name of the Brand associated with the product.

        :param brand_name: The brand_name of this GetProductQuery200Response.
        :type brand_name: str
        """
        if brand_name is None:
            raise ValueError("Invalid value for `brand_name`, must not be `None`")

        self._brand_name = brand_name

    @property
    def category_ids(self):
        """Gets the category_ids of this GetProductQuery200Response.

        Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.

        :return: The category_ids of this GetProductQuery200Response.
        :rtype: List[str]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this GetProductQuery200Response.

        Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.

        :param category_ids: The category_ids of this GetProductQuery200Response.
        :type category_ids: List[str]
        """
        if category_ids is None:
            raise ValueError("Invalid value for `category_ids`, must not be `None`")

        self._category_ids = category_ids

    @property
    def category_names(self):
        """Gets the category_names of this GetProductQuery200Response.

        Names of the product's categories, displayed in a path format.

        :return: The category_names of this GetProductQuery200Response.
        :rtype: List[str]
        """
        return self._category_names

    @category_names.setter
    def category_names(self, category_names):
        """Sets the category_names of this GetProductQuery200Response.

        Names of the product's categories, displayed in a path format.

        :param category_names: The category_names of this GetProductQuery200Response.
        :type category_names: List[str]
        """
        if category_names is None:
            raise ValueError("Invalid value for `category_names`, must not be `None`")

        self._category_names = category_names

    @property
    def created_at(self):
        """Gets the created_at of this GetProductQuery200Response.

        Date when the product was created.

        :return: The created_at of this GetProductQuery200Response.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetProductQuery200Response.

        Date when the product was created.

        :param created_at: The created_at of this GetProductQuery200Response.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def external_id(self):
        """Gets the external_id of this GetProductQuery200Response.

        Product reference unique identifier number in the store.

        :return: The external_id of this GetProductQuery200Response.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this GetProductQuery200Response.

        Product reference unique identifier number in the store.

        :param external_id: The external_id of this GetProductQuery200Response.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this GetProductQuery200Response.

        Product's unique identifier number.

        :return: The id of this GetProductQuery200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetProductQuery200Response.

        Product's unique identifier number.

        :param id: The id of this GetProductQuery200Response.
        :type id: str
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this GetProductQuery200Response.

        Information of the images of the product.

        :return: The images of this GetProductQuery200Response.
        :rtype: List[ImagesInner]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this GetProductQuery200Response.

        Information of the images of the product.

        :param images: The images of this GetProductQuery200Response.
        :type images: List[ImagesInner]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def name(self):
        """Gets the name of this GetProductQuery200Response.

        Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.

        :return: The name of this GetProductQuery200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetProductQuery200Response.

        Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.

        :param name: The name of this GetProductQuery200Response.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this GetProductQuery200Response.

        Origin account of the product. It is not possible to alter products where the origin is `marketplace`.

        :return: The origin of this GetProductQuery200Response.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this GetProductQuery200Response.

        Origin account of the product. It is not possible to alter products where the origin is `marketplace`.

        :param origin: The origin of this GetProductQuery200Response.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")

        self._origin = origin

    @property
    def skus(self):
        """Gets the skus of this GetProductQuery200Response.

        SKUs of the product.

        :return: The skus of this GetProductQuery200Response.
        :rtype: List[SkusInner2]
        """
        return self._skus

    @skus.setter
    def skus(self, skus):
        """Sets the skus of this GetProductQuery200Response.

        SKUs of the product.

        :param skus: The skus of this GetProductQuery200Response.
        :type skus: List[SkusInner2]
        """
        if skus is None:
            raise ValueError("Invalid value for `skus`, must not be `None`")

        self._skus = skus

    @property
    def slug(self):
        """Gets the slug of this GetProductQuery200Response.

        Reference of the product in the URL of the store.

        :return: The slug of this GetProductQuery200Response.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this GetProductQuery200Response.

        Reference of the product in the URL of the store.

        :param slug: The slug of this GetProductQuery200Response.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def specs(self):
        """Gets the specs of this GetProductQuery200Response.

        Specifications that will differentiate the possible product SKUs.

        :return: The specs of this GetProductQuery200Response.
        :rtype: List[SpecsInner1]
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this GetProductQuery200Response.

        Specifications that will differentiate the possible product SKUs.

        :param specs: The specs of this GetProductQuery200Response.
        :type specs: List[SpecsInner1]
        """
        if specs is None:
            raise ValueError("Invalid value for `specs`, must not be `None`")

        self._specs = specs

    @property
    def status(self):
        """Gets the status of this GetProductQuery200Response.

        Status of the product. Its values can be `active` or `inactive`.

        :return: The status of this GetProductQuery200Response.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetProductQuery200Response.

        Status of the product. Its values can be `active` or `inactive`.

        :param status: The status of this GetProductQuery200Response.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tax_code(self):
        """Gets the tax_code of this GetProductQuery200Response.

        Product tax code.

        :return: The tax_code of this GetProductQuery200Response.
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this GetProductQuery200Response.

        Product tax code.

        :param tax_code: The tax_code of this GetProductQuery200Response.
        :type tax_code: str
        """

        self._tax_code = tax_code

    @property
    def transport_modal(self):
        """Gets the transport_modal of this GetProductQuery200Response.

        Transport modal of the product.

        :return: The transport_modal of this GetProductQuery200Response.
        :rtype: str
        """
        return self._transport_modal

    @transport_modal.setter
    def transport_modal(self, transport_modal):
        """Sets the transport_modal of this GetProductQuery200Response.

        Transport modal of the product.

        :param transport_modal: The transport_modal of this GetProductQuery200Response.
        :type transport_modal: str
        """

        self._transport_modal = transport_modal

    @property
    def updated_at(self):
        """Gets the updated_at of this GetProductQuery200Response.

        Last date when the product was updated.

        :return: The updated_at of this GetProductQuery200Response.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GetProductQuery200Response.

        Last date when the product was updated.

        :param updated_at: The updated_at of this GetProductQuery200Response.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
