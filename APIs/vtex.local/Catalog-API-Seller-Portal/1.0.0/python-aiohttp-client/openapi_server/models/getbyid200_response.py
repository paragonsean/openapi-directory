# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.children_inner1 import ChildrenInner1
from openapi_server.models.value1 import Value1
from openapi_server import util


class Getbyid200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: List[ChildrenInner1]=None, value: Value1=None):
        """Getbyid200Response - a model defined in OpenAPI

        :param children: The children of this Getbyid200Response.
        :param value: The value of this Getbyid200Response.
        """
        self.openapi_types = {
            'children': List[ChildrenInner1],
            'value': Value1
        }

        self.attribute_map = {
            'children': 'children',
            'value': 'value'
        }

        self._children = children
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Getbyid200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Getbyid_200_response of this Getbyid200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this Getbyid200Response.

        List of all children categories of the parent category.

        :return: The children of this Getbyid200Response.
        :rtype: List[ChildrenInner1]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Getbyid200Response.

        List of all children categories of the parent category.

        :param children: The children of this Getbyid200Response.
        :type children: List[ChildrenInner1]
        """
        if children is None:
            raise ValueError("Invalid value for `children`, must not be `None`")

        self._children = children

    @property
    def value(self):
        """Gets the value of this Getbyid200Response.


        :return: The value of this Getbyid200Response.
        :rtype: Value1
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Getbyid200Response.


        :param value: The value of this Getbyid200Response.
        :type value: Value1
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
