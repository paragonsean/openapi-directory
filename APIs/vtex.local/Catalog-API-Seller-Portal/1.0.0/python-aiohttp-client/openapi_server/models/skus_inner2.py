# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimensions import Dimensions
from openapi_server.models.specs_inner import SpecsInner
from openapi_server import util


class SkusInner2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimensions: Dimensions=None, ean: str=None, external_id: str=None, id: str=None, images: List[object]=None, is_active: bool=None, manufacturer_code: str=None, specs: List[SpecsInner]=None, weight: int=None):
        """SkusInner2 - a model defined in OpenAPI

        :param dimensions: The dimensions of this SkusInner2.
        :param ean: The ean of this SkusInner2.
        :param external_id: The external_id of this SkusInner2.
        :param id: The id of this SkusInner2.
        :param images: The images of this SkusInner2.
        :param is_active: The is_active of this SkusInner2.
        :param manufacturer_code: The manufacturer_code of this SkusInner2.
        :param specs: The specs of this SkusInner2.
        :param weight: The weight of this SkusInner2.
        """
        self.openapi_types = {
            'dimensions': Dimensions,
            'ean': str,
            'external_id': str,
            'id': str,
            'images': List[object],
            'is_active': bool,
            'manufacturer_code': str,
            'specs': List[SpecsInner],
            'weight': int
        }

        self.attribute_map = {
            'dimensions': 'dimensions',
            'ean': 'ean',
            'external_id': 'externalId',
            'id': 'id',
            'images': 'images',
            'is_active': 'isActive',
            'manufacturer_code': 'manufacturerCode',
            'specs': 'specs',
            'weight': 'weight'
        }

        self._dimensions = dimensions
        self._ean = ean
        self._external_id = external_id
        self._id = id
        self._images = images
        self._is_active = is_active
        self._manufacturer_code = manufacturer_code
        self._specs = specs
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkusInner2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The skus_inner_2 of this SkusInner2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimensions(self):
        """Gets the dimensions of this SkusInner2.


        :return: The dimensions of this SkusInner2.
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this SkusInner2.


        :param dimensions: The dimensions of this SkusInner2.
        :type dimensions: Dimensions
        """
        if dimensions is None:
            raise ValueError("Invalid value for `dimensions`, must not be `None`")

        self._dimensions = dimensions

    @property
    def ean(self):
        """Gets the ean of this SkusInner2.

        Unique SKU identification code (barcode), composed of up to 13 numeric characters.

        :return: The ean of this SkusInner2.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this SkusInner2.

        Unique SKU identification code (barcode), composed of up to 13 numeric characters.

        :param ean: The ean of this SkusInner2.
        :type ean: str
        """

        self._ean = ean

    @property
    def external_id(self):
        """Gets the external_id of this SkusInner2.

        Unique reference code created to improve the store's organization. This is not a required field.

        :return: The external_id of this SkusInner2.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this SkusInner2.

        Unique reference code created to improve the store's organization. This is not a required field.

        :param external_id: The external_id of this SkusInner2.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def id(self):
        """Gets the id of this SkusInner2.

        SKU unique identifier number.

        :return: The id of this SkusInner2.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SkusInner2.

        SKU unique identifier number.

        :param id: The id of this SkusInner2.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def images(self):
        """Gets the images of this SkusInner2.

        SKU's images IDs.

        :return: The images of this SkusInner2.
        :rtype: List[object]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this SkusInner2.

        SKU's images IDs.

        :param images: The images of this SkusInner2.
        :type images: List[object]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def is_active(self):
        """Gets the is_active of this SkusInner2.

        If the SKU is active (`true`) or inactive (`false`).

        :return: The is_active of this SkusInner2.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this SkusInner2.

        If the SKU is active (`true`) or inactive (`false`).

        :param is_active: The is_active of this SkusInner2.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def manufacturer_code(self):
        """Gets the manufacturer_code of this SkusInner2.

        SKU reference code in the store.

        :return: The manufacturer_code of this SkusInner2.
        :rtype: str
        """
        return self._manufacturer_code

    @manufacturer_code.setter
    def manufacturer_code(self, manufacturer_code):
        """Sets the manufacturer_code of this SkusInner2.

        SKU reference code in the store.

        :param manufacturer_code: The manufacturer_code of this SkusInner2.
        :type manufacturer_code: str
        """

        self._manufacturer_code = manufacturer_code

    @property
    def specs(self):
        """Gets the specs of this SkusInner2.

        SKU specifications. This field is mandatory, but nullable if there is only one SKU.

        :return: The specs of this SkusInner2.
        :rtype: List[SpecsInner]
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this SkusInner2.

        SKU specifications. This field is mandatory, but nullable if there is only one SKU.

        :param specs: The specs of this SkusInner2.
        :type specs: List[SpecsInner]
        """
        if specs is None:
            raise ValueError("Invalid value for `specs`, must not be `None`")

        self._specs = specs

    @property
    def weight(self):
        """Gets the weight of this SkusInner2.

        SKU weight.

        :return: The weight of this SkusInner2.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this SkusInner2.

        SKU weight.

        :param weight: The weight of this SkusInner2.
        :type weight: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")

        self._weight = weight
