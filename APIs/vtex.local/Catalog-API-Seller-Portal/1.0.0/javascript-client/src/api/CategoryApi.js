/**
 * Catalog API - Seller Portal
 *   With the Catalog API for Seller Portal, you will be able to create, edit and consult products and their variations, brands, and categories.    > This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).    ## Index    ### Product    `GET` [Get Product by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-)  `PUT` [Update Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-)  `GET` [Get Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-/description)  `PUT` [Update Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-/description)  `GET` [Get Product by external ID, SKU ID, SKU external ID or slug](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-param-)  `POST` [Create Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/products)    ### SKU    `GET` [Search for SKU](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/_search)  `GET` [Get List of SKUs](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/ids)    ### Brand    `GET` [Get List of Brands](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands)  `POST` [Create a Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/brands)  `GET` [Get Brand by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands/-brandId-)  `PUT` [Update Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/brands/-brandId-)    ### Category    `GET` [Get Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree)  `PUT` [Update Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/category-tree)  `GET` [Get Category by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree/categories/-categoryId-)  `POST` [Create a Category](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/category-tree/categories)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCategoryRequest from '../model/CreateCategoryRequest';
import GetCategoryTree200Response from '../model/GetCategoryTree200Response';
import Getbyid200Response from '../model/Getbyid200Response';
import RootsInner from '../model/RootsInner';
import UpdateCategoryTreeRequest from '../model/UpdateCategoryTreeRequest';

/**
* Category service.
* @module api/CategoryApi
* @version 1.0.0
*/
export default class CategoryApi {

    /**
    * Constructs a new CategoryApi. 
    * @alias module:api/CategoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCategory operation.
     * @callback module:api/CategoryApi~createCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RootsInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Category
     *  >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Creates a new category.    ## Request body example    ```json  {    \"parentId\": \"567\",    \"Name\": \"Beauty\"  }  ```    ## Response body example    ```json  {    \"value\": {      \"id\": \"1\",      \"name\": \"Beauty\",      \"isActive\": false    },    \"children\": [      {        \"value\": {          \"id\": \"2\",          \"name\": \"Perfumes\",          \"isActive\": false        }      }    ]  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {module:model/CreateCategoryRequest} createCategoryRequest 
     * @param {module:api/CategoryApi~createCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RootsInner}
     */
    createCategory(contentType, accept, createCategoryRequest, callback) {
      let postBody = createCategoryRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createCategory");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createCategory");
      }
      // verify the required parameter 'createCategoryRequest' is set
      if (createCategoryRequest === undefined || createCategoryRequest === null) {
        throw new Error("Missing the required parameter 'createCategoryRequest' when calling createCategory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RootsInner;
      return this.apiClient.callApi(
        '/api/catalog-seller-portal/category-tree/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryTree operation.
     * @callback module:api/CategoryApi~getCategoryTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCategoryTree200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Category Tree
     *  >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about the category tree from the store.    ## Response body example    ```json  {      \"roots\": [          {              \"value\": {                  \"id\": \"2\",                  \"name\": \"Departamento Artesanato\",                  \"isActive\": true              },              \"children\": [                  {                      \"value\": {                          \"id\": \"3\",                          \"name\": \"Artesanato de Barro\",                          \"isActive\": false                      },                      \"children\": [                          {                              \"value\": {                                  \"id\": \"4\",                                  \"name\": \"Artesanato de Barro Vermelho\",                                  \"isActive\": false                              },                              \"children\": []                          }                      ]                  }              ]          },          {              \"value\": {                  \"id\": \"5\",                  \"name\": \"Perfumes\",                  \"isActive\": false              },              \"children\": [                  {                      \"value\": {                          \"id\": \"6\",                          \"name\": \"Perfume Feminino\",                          \"isActive\": false                      },                      \"children\": []                  },                  {                      \"value\": {                          \"id\": \"7\",                          \"name\": \"Perfume Masculino\",                          \"isActive\": false,                          \"displayOnMenu\": false,                          \"score\": 0,                          \"filterByBrand\": false,                          \"isClickable\": false                      },                      \"children\": []                  }              ]          }      ],      \"createdAt\": \"2021-08-16T20:57:13.070813Z\",      \"updatedAt\": \"2022-07-07T14:24:56.416337Z\"  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {Number} [depth] Category tree level.
     * @param {module:api/CategoryApi~getCategoryTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCategoryTree200Response}
     */
    getCategoryTree(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getCategoryTree");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getCategoryTree");
      }

      let pathParams = {
      };
      let queryParams = {
        'depth': opts['depth']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCategoryTree200Response;
      return this.apiClient.callApi(
        '/api/catalog-seller-portal/category-tree', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getbyid operation.
     * @callback module:api/CategoryApi~getbyidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Getbyid200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Category by ID
     *  >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about a category by its ID.     ## Response body example    ```json  {    \"value\": {      \"id\": \"1\",      \"name\": \"sandboxintegracao\",      \"isActive\": false    },    \"children\": [      {        \"value\": {          \"id\": \"2\",          \"name\": \"Perfumes\",          \"isActive\": false        }      }    ]  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} categoryId Category unique identifier number.
     * @param {module:api/CategoryApi~getbyidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Getbyid200Response}
     */
    getbyid(contentType, accept, categoryId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getbyid");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getbyid");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getbyid");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Getbyid200Response;
      return this.apiClient.callApi(
        '/api/catalog-seller-portal/category-tree/categories/{categoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCategoryTree operation.
     * @callback module:api/CategoryApi~updateCategoryTreeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Category Tree
     *  >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Updates the existing categories in the category tree.    ## Request body example    ```json  {    \"roots\": [      {        \"value\": {          \"id\": \"2\",          \"name\": \"Departamento Artesanato\",          \"isActive\": true        },        \"children\": [          {            \"value\": {              \"id\": \"3\",              \"name\": \"Artesanato de Barro\",              \"isActive\": false            },            \"children\": [              {                \"value\": {                  \"id\": \"4\",                  \"name\": \"Artesanato de Barro Vermelho\",                  \"isActive\": false                },                \"children\": []              }            ]          }        ]      },      {        \"value\": {          \"id\": \"5\",          \"name\": \"Perfumes\",          \"isActive\": false        },        \"children\": [          {            \"value\": {              \"id\": \"6\",              \"name\": \"Perfume Feminino\",              \"isActive\": false            },            \"children\": []          },          {            \"value\": {              \"id\": \"7\",              \"name\": \"Perfume Masculino\",              \"isActive\": false,              \"displayOnMenu\": false,              \"score\": 0,              \"filterByBrand\": false,              \"isClickable\": false            },            \"children\": []          }        ]      }    ]  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {module:model/UpdateCategoryTreeRequest} updateCategoryTreeRequest OK
     * @param {module:api/CategoryApi~updateCategoryTreeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCategoryTree(contentType, accept, updateCategoryTreeRequest, callback) {
      let postBody = updateCategoryTreeRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateCategoryTree");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updateCategoryTree");
      }
      // verify the required parameter 'updateCategoryTreeRequest' is set
      if (updateCategoryTreeRequest === undefined || updateCategoryTreeRequest === null) {
        throw new Error("Missing the required parameter 'updateCategoryTreeRequest' when calling updateCategoryTree");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/catalog-seller-portal/category-tree', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
