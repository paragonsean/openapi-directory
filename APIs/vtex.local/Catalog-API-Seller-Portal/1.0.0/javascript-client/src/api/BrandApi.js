/**
 * Catalog API - Seller Portal
 *   With the Catalog API for Seller Portal, you will be able to create, edit and consult products and their variations, brands, and categories.    > This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).    ## Index    ### Product    `GET` [Get Product by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-)  `PUT` [Update Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-)  `GET` [Get Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-/description)  `PUT` [Update Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-/description)  `GET` [Get Product by external ID, SKU ID, SKU external ID or slug](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-param-)  `POST` [Create Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/products)    ### SKU    `GET` [Search for SKU](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/_search)  `GET` [Get List of SKUs](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/ids)    ### Brand    `GET` [Get List of Brands](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands)  `POST` [Create a Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/brands)  `GET` [Get Brand by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands/-brandId-)  `PUT` [Update Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/brands/-brandId-)    ### Category    `GET` [Get Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree)  `PUT` [Update Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/category-tree)  `GET` [Get Category by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree/categories/-categoryId-)  `POST` [Create a Category](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/category-tree/categories)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetBrand200Response from '../model/GetBrand200Response';
import ListBrand200Response from '../model/ListBrand200Response';
import PostBrand200Response from '../model/PostBrand200Response';
import PostBrandRequest from '../model/PostBrandRequest';
import PutBrandRequest from '../model/PutBrandRequest';

/**
* Brand service.
* @module api/BrandApi
* @version 1.0.0
*/
export default class BrandApi {

    /**
    * Constructs a new BrandApi. 
    * @alias module:api/BrandApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBrand operation.
     * @callback module:api/BrandApi~getBrandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBrand200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Brand by ID
     *  >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about a brand by its ID.    ## Response body example    ```json  {    \"id\": \"863\",    \"name\": \"Zwilling\",    \"isActive\": false,    \"createdAt\": \"2021-01-18T14:41:45.696488+00:00\",    \"updatedAt\": \"2021-01-18T14:41:45.696488+00:00\"  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} brandId Brand unique identifier number.
     * @param {module:api/BrandApi~getBrandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBrand200Response}
     */
    getBrand(contentType, accept, brandId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getBrand");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getBrand");
      }
      // verify the required parameter 'brandId' is set
      if (brandId === undefined || brandId === null) {
        throw new Error("Missing the required parameter 'brandId' when calling getBrand");
      }

      let pathParams = {
        'brandId': brandId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBrand200Response;
      return this.apiClient.callApi(
        '/api/catalog-seller-portal/brands/{brandId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBrand operation.
     * @callback module:api/BrandApi~listBrandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBrand200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List of Brands
     *  >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about all brands of the store. It is mandatory to use at least one query parameter.     ## Response body example    ```json  {      \"data\": [          {              \"id\": \"7\",              \"name\": \"All For Paws\",              \"isActive\": true,              \"createdAt\": \"2022-01-17T19:43:14.18678Z\",              \"updatedAt\": \"2022-01-17T19:43:14.18678Z\"          },          {              \"id\": \"1\",              \"name\": \"AOC\",              \"isActive\": true,              \"createdAt\": \"2021-08-16T21:13:40.55189Z\",              \"updatedAt\": \"2021-08-16T21:13:40.55189Z\"          }      ],      \"_metadata\": {          \"total\": 18,          \"from\": 1,          \"to\": 2,          \"orderBy\": \"name,asc\"      }  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {String} [q] Search word.
     * @param {String} [from] The first page of the interval of the brand list.
     * @param {String} [to] The last page of the interval of the brand list.
     * @param {String} [orderBy] The order that the list is displayed. You can select `name`, or `updated_at` to select the order criteria. Then you can add `,` , `asc` or `desc` to define the brands order.
     * @param {String} [name] Brand name.
     * @param {module:api/BrandApi~listBrandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBrand200Response}
     */
    listBrand(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listBrand");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling listBrand");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'from': opts['from'],
        'to': opts['to'],
        'orderBy': opts['orderBy'],
        'name': opts['name']
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBrand200Response;
      return this.apiClient.callApi(
        '/api/catalog-seller-portal/brands', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBrand operation.
     * @callback module:api/BrandApi~postBrandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostBrand200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Brand
     *  >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Creates a new brand.    ## Request body example    ```json  {    \"name\": \"Zwilling\",    \"isActive\": true  }  ```    ## Response body example    ```json  {    \"id\": \"20\",    \"name\": \"Zwilling\",    \"isActive\": true,    \"createdAt\": \"2021-05-17T15:20:36.077253+00:00\",    \"updatedAt\": \"2021-01-18T14:41:45.696488+00:00\"  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostBrandRequest} [postBrandRequest] 
     * @param {module:api/BrandApi~postBrandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostBrand200Response}
     */
    postBrand(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = opts['postBrandRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postBrand");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling postBrand");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostBrand200Response;
      return this.apiClient.callApi(
        '/api/catalog-seller-portal/brands', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBrand operation.
     * @callback module:api/BrandApi~putBrandCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Brand
     *  >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Updates an existing brand.     ## Request body example    ```json  {    \"id\": \"20\",    \"name\": \"Zwilling\",    \"isActive\": true  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} brandId Brand unique identifier number.
     * @param {Object} opts Optional parameters
     * @param {module:model/PutBrandRequest} [putBrandRequest] 
     * @param {module:api/BrandApi~putBrandCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putBrand(contentType, accept, brandId, opts, callback) {
      opts = opts || {};
      let postBody = opts['putBrandRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling putBrand");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling putBrand");
      }
      // verify the required parameter 'brandId' is set
      if (brandId === undefined || brandId === null) {
        throw new Error("Missing the required parameter 'brandId' when calling putBrand");
      }

      let pathParams = {
        'brandId': brandId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/catalog-seller-portal/brands/{brandId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
