/**
 * Catalog API - Seller Portal
 *   With the Catalog API for Seller Portal, you will be able to create, edit and consult products and their variations, brands, and categories.    > This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).    ## Index    ### Product    `GET` [Get Product by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-)  `PUT` [Update Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-)  `GET` [Get Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-/description)  `PUT` [Update Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-/description)  `GET` [Get Product by external ID, SKU ID, SKU external ID or slug](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-param-)  `POST` [Create Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/products)    ### SKU    `GET` [Search for SKU](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/_search)  `GET` [Get List of SKUs](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/ids)    ### Brand    `GET` [Get List of Brands](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands)  `POST` [Create a Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/brands)  `GET` [Get Brand by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands/-brandId-)  `PUT` [Update Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/brands/-brandId-)    ### Category    `GET` [Get Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree)  `PUT` [Update Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/category-tree)  `GET` [Get Category by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree/categories/-categoryId-)  `POST` [Create a Category](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/category-tree/categories)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetProduct200Response from '../model/GetProduct200Response';
import GetProductDescription200Response from '../model/GetProductDescription200Response';
import GetProductQuery200Response from '../model/GetProductQuery200Response';
import PostProduct200Response from '../model/PostProduct200Response';
import PostProductRequest from '../model/PostProductRequest';
import PutProductDescriptionRequest from '../model/PutProductDescriptionRequest';
import PutProductRequest from '../model/PutProductRequest';

/**
* Product service.
* @module api/ProductApi
* @version 1.0.0
*/
export default class ProductApi {

    /**
    * Constructs a new ProductApi. 
    * @alias module:api/ProductApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getProduct operation.
     * @callback module:api/ProductApi~getProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProduct200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product by ID
     *  >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about a product by its ID. The response also has information about the product's SKUs.      ## Response body example    ```json  {      \"id\": \"189371\",      \"status\": \"active\",      \"name\": \"VTEX 10 Shirt\",      \"brandId\": \"1\",      \"brandName\": \"AOC\",      \"categoryIds\": [          \"732\"      ],      \"categoryNames\": [          \"/sandboxintegracao/AcessÃ³rios/\"      ],      \"specs\": [          {              \"name\": \"Color\",              \"values\": [                  \"Black\",                  \"White\"              ]          },          {              \"name\": \"Size\",              \"values\": [                  \"S\",                  \"M\",                  \"L\"              ]          }      ],      \"attributes\": [          {              \"name\": \"Fabric\",              \"value\": \"Cotton\"          },          {              \"name\": \"Gender\",              \"value\": \"Feminine\"          }      ],      \"slug\": \"/vtex-shirt\",      \"images\": [          {              \"id\": \"vtex_logo.jpg\",              \"url\": \"https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg\",              \"alt\": \"VTEX\"          }      ],      \"skus\": [          {              \"id\": \"182907\",              \"externalId\": \"1909621862\",              \"manufacturerCode\": \"1234567\",              \"isActive\": true,              \"weight\": 300,              \"dimensions\": {                  \"width\": 1.5,                  \"height\": 2.1,                  \"length\": 1.6              },              \"specs\": [                  {                      \"name\": \"Color\",                      \"value\": \"Black\"                  },                  {                      \"name\": \"Size\",                      \"value\": \"S\"                  }              ],              \"images\": [                  \"vtex_logo.jpg\"              ]          },          {              \"id\": \"182908\",              \"externalId\": \"1909621862\",              \"manufacturerCode\": \"1234568\",              \"isActive\": true,              \"weight\": 300,              \"dimensions\": {                  \"width\": 1.5,                  \"height\": 2.1,                  \"length\": 1.6              },              \"specs\": [                  {                      \"name\": \"Color\",                      \"value\": \"White\"                  },                  {                      \"name\": \"Size\",                      \"value\": \"L\"                  }              ],              \"images\": [                  \"vtex_logo.jpg\"              ]          }      ],      \"transportModal\": \"123\",      \"taxCode\": \"100\",      \"origin\": \"vtxleo7778\",      \"createdAt\": \"2022-10-31T16:28:25.578067Z\",      \"updatedAt\": \"2022-10-31T17:09:12.639088Z\"  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} productId Product unique identifier number.
     * @param {module:api/ProductApi~getProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProduct200Response}
     */
    getProduct(contentType, accept, productId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getProduct");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getProduct");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProduct200Response;
      return this.apiClient.callApi(
        '/api/catalog-seller-portal/products/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductDescription operation.
     * @callback module:api/ProductApi~getProductDescriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProductDescription200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product Description by Product ID
     *  >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves the description of a product given a Product ID.    ## Response body example    ```json  {      \"productId\": \"61\",      \"description\": \"Beautifully handmade laptop case/sleeve made in the Nepal Himalaya. It can be slipped inside your backpack or carried alone with space for all your work bits and pieces!\",      \"createdAt\": \"2022-10-10T19:18:45.612317Z\",      \"updatedAt\": \"2022-10-11T18:12:58.825544Z\"  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} productId Product unique identifier number.
     * @param {module:api/ProductApi~getProductDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProductDescription200Response}
     */
    getProductDescription(contentType, accept, productId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getProductDescription");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getProductDescription");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductDescription");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProductDescription200Response;
      return this.apiClient.callApi(
        '/api/catalog-seller-portal/products/{productId}/description', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductQuery operation.
     * @callback module:api/ProductApi~getProductQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProductQuery200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Product by external ID,  SKU ID, SKU external ID or slug
     *  >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about a product by its external ID, SKU ID, SKU external ID or product slug. The response also has information about the product's SKUs.   ## Response body example    ```json  {      \"id\": \"189371\",      \"status\": \"active\",      \"name\": \"VTEX 10 Shirt\",      \"brandId\": \"1\",      \"brandName\": \"AOC\",      \"categoryIds\": [          \"732\"      ],      \"categoryNames\": [          \"/sandboxintegracao/AcessÃ³rios/\"      ],      \"specs\": [          {              \"name\": \"Color\",              \"values\": [                  \"Black\",                  \"White\"              ]          },          {              \"name\": \"Size\",              \"values\": [                  \"S\",                  \"M\",                  \"L\"              ]          }      ],      \"attributes\": [          {              \"name\": \"Fabric\",              \"value\": \"Cotton\"          },          {              \"name\": \"Gender\",              \"value\": \"Feminine\"          }      ],      \"slug\": \"/vtex-shirt\",      \"images\": [          {              \"id\": \"vtex_logo.jpg\",              \"url\": \"https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg\",              \"alt\": \"VTEX\"          }      ],      \"skus\": [          {              \"id\": \"182907\",              \"name\": \"VTEX Shirt Black Size S\",              \"externalId\": \"1909621862\",              \"manufacturerCode\": \"1234567\",              \"isActive\": true,              \"weight\": 300,              \"dimensions\": {                  \"width\": 1.5,                  \"height\": 2.1,                  \"length\": 1.6              },              \"specs\": [                  {                      \"name\": \"Color\",                      \"value\": \"Black\"                  },                  {                      \"name\": \"Size\",                      \"value\": \"S\"                  }              ],              \"images\": [                  \"vtex_logo.jpg\"              ]          },          {              \"id\": \"182908\",              \"name\": \"VTEX Shirt White Size L\",              \"externalId\": \"1909621862\",              \"manufacturerCode\": \"1234568\",              \"isActive\": true,              \"weight\": 300,              \"dimensions\": {                  \"width\": 1.5,                  \"height\": 2.1,                  \"length\": 1.6              },              \"specs\": [                  {                      \"name\": \"Color\",                      \"value\": \"White\"                  },                  {                      \"name\": \"Size\",                      \"value\": \"L\"                  }              ],              \"images\": [                  \"vtex_logo.jpg\"              ]          }      ],      \"transportModal\": \"123\",      \"taxCode\": \"100\",      \"origin\": \"vtxleo7778\",      \"createdAt\": \"2022-10-31T16:28:25.578067Z\",      \"updatedAt\": \"2022-10-31T16:28:25.578067Z\"  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} param This part of the path must follow this format: `{param}={value}`. Replace `{param}` with the name of the parameter used to fetch a product, which can be one of the following: `external-id` (product reference unique identifier number in the store), `sku-id` (SKU unique identifier number), `sku-external-id` (SKU reference unique identifier number in the store) or `slug` (reference of the product in the URL of the store). Replace `{value}` with the value of the selected param. Make sure there is a `=` between them.
     * @param {module:api/ProductApi~getProductQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProductQuery200Response}
     */
    getProductQuery(contentType, accept, param, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getProductQuery");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getProductQuery");
      }
      // verify the required parameter 'param' is set
      if (param === undefined || param === null) {
        throw new Error("Missing the required parameter 'param' when calling getProductQuery");
      }

      let pathParams = {
        'param': param
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProductQuery200Response;
      return this.apiClient.callApi(
        '/api/catalog-seller-portal/products/{param}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProduct operation.
     * @callback module:api/ProductApi~postProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostProduct200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Product
     *  >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Creates a new product and its SKUs.       ## Request body example    ```json  {      \"status\": \"active\",      \"name\": \"VTEX 10 Shirt\",      \"description\": \"Shirt number 10 by VTEX.\",      \"brandId\": \"1\",      \"categoryIds\": [          \"732\"      ],      \"specs\": [          {              \"name\": \"Color\",              \"values\": [                  \"Black\",                  \"White\"              ]          },          {              \"name\": \"Size\",              \"values\": [                  \"S\",                  \"M\",                  \"L\"              ]          }      ],      \"attributes\": [          {              \"name\": \"Fabric\",              \"value\": \"Cotton\"          },          {              \"name\": \"Gender\",              \"value\": \"Feminine\"          }      ],      \"slug\": \"/vtex-shirt\",      \"images\": [          {              \"id\": \"vtex_logo.jpg\",              \"url\": \"https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg\",              \"alt\": \"VTEX\"          }      ],      \"skus\": [          {              \"name\": \"VTEX Shirt Black Size S\",              \"externalId\": \"1909621862\",              \"manufacturerCode\": \"1234567\",              \"isActive\": true,              \"weight\": 300,              \"dimensions\": {                  \"width\": 1.5,                  \"height\": 2.1,                  \"length\": 1.6              },              \"specs\": [                  {                      \"name\": \"Color\",                      \"value\": \"Black\"                  },                  {                      \"name\": \"Size\",                      \"value\": \"S\"                  }              ],              \"images\": [                  \"vtex_logo.jpg\"              ]          },          {              \"name\": \"VTEX Shirt White Size L\",              \"externalId\": \"1909621862\",              \"manufacturerCode\": \"1234568\",              \"isActive\": true,              \"weight\": 300,              \"dimensions\": {                  \"width\": 1.5,                  \"height\": 2.1,                  \"length\": 1.6              },              \"specs\": [                  {                      \"name\": \"Color\",                      \"value\": \"White\"                  },                  {                      \"name\": \"Size\",                      \"value\": \"L\"                  }              ],              \"images\": [                  \"vtex_logo.jpg\"              ]          }      ],      \"origin\": \"vtxleo7778\",      \"transportModal\": \"110\",      \"taxCode\": \"234\"  }  ```    ## Response body example    ```json  {      \"id\": \"189371\",      \"status\": \"active\",      \"name\": \"VTEX 10 Shirt\",      \"brandId\": \"1\",      \"brandName\": \"AOC\",      \"categoryIds\": [          \"732\"      ],      \"categoryNames\": [          \"/Men/Acessories/\"      ],      \"specs\": [          {              \"name\": \"Color\",              \"values\": [                  \"Black\",                  \"White\"              ]          },          {              \"name\": \"Size\",              \"values\": [                  \"S\",                  \"M\",                  \"L\"              ]          }      ],      \"attributes\": [          {              \"name\": \"Fabric\",              \"value\": \"Cotton\"          },          {              \"name\": \"Gender\",              \"value\": \"Feminine\"          }      ],      \"slug\": \"/vtex-shirt\",      \"images\": [          {              \"id\": \"vtex_logo.jpg\",              \"url\": \"https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg\",              \"alt\": \"VTEX\"          }      ],      \"skus\": [          {              \"id\": \"182907\",              \"name\": \"VTEX Shirt Black Size S\",              \"externalId\": \"1909621862\",              \"manufacturerCode\": \"1234567\",              \"isActive\": true,              \"weight\": 300,              \"dimensions\": {                  \"width\": 1.5,                  \"height\": 2.1,                  \"length\": 1.6              },              \"specs\": [                  {                      \"name\": \"Color\",                      \"value\": \"Black\"                  },                  {                      \"name\": \"Size\",                      \"value\": \"S\"                  }              ],              \"images\": [                  \"vtex_logo.jpg\"              ]          },          {              \"id\": \"182908\",              \"name\": \"VTEX Shirt White Size L\",              \"externalId\": \"1909621862\",              \"manufacturerCode\": \"1234568\",              \"isActive\": true,              \"weight\": 300,              \"dimensions\": {                  \"width\": 1.5,                  \"height\": 2.1,                  \"length\": 1.6              },              \"specs\": [                  {                      \"name\": \"Color\",                      \"value\": \"White\"                  },                  {                      \"name\": \"Size\",                      \"value\": \"L\"                  }              ],              \"images\": [                  \"vtex_logo.jpg\"              ]          }      ],      \"origin\": \"vtxleo7778\",      \"transportModal\": \"110\",      \"taxCode\": \"234\",      \"createdAt\": \"2022-11-01T14:15:54.262702Z\",      \"updatedAt\": \"2022-11-01T14:15:54.262702Z\"  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {module:model/PostProductRequest} [postProductRequest] 
     * @param {module:api/ProductApi~postProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostProduct200Response}
     */
    postProduct(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = opts['postProductRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling postProduct");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling postProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostProduct200Response;
      return this.apiClient.callApi(
        '/api/catalog-seller-portal/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProduct operation.
     * @callback module:api/ProductApi~putProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Product
     *  >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Updates an existing product and its SKUs.     ## Request body example    ```json  {      \"id\": \"189371\",      \"status\": \"active\",      \"name\": \"VTEX 10 Shirt\",      \"description\": \"Shirt number 10 by VTEX.\",      \"brandId\": \"1\",      \"categoryIds\": [          \"732\"      ],      \"specs\": [          {              \"name\": \"Color\",              \"values\": [                  \"Black\",                  \"White\"              ]          },          {              \"name\": \"Size\",              \"values\": [                  \"S\",                  \"M\",                  \"L\"              ]          }      ],      \"attributes\": [          {              \"name\": \"Fabric\",              \"value\": \"Cotton\"          },          {              \"name\": \"Gender\",              \"value\": \"Feminine\"          }      ],      \"slug\": \"/vtex-shirt\",      \"transportModal\": null,      \"taxCode\": null,      \"images\": [          {              \"id\": \"vtex_logo.jpg\",              \"url\": \"https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg\",              \"alt\": \"VTEX\"          }      ],      \"skus\": [          {              \"name\": \"VTEX Shirt Black Size S\",              \"externalId\": \"1909621862\",              \"manufacturerCode\": \"1234567\",              \"isActive\": true,              \"weight\": 300,              \"dimensions\": {                  \"width\": 1.5,                  \"height\": 2.1,                  \"length\": 1.6              },              \"specs\": [                  {                      \"name\": \"Color\",                      \"value\": \"Black\"                  },                  {                      \"name\": \"Size\",                      \"value\": \"S\"                  }              ],              \"images\": [                  \"vtex_logo.jpg\"              ]          },          {              \"name\": \"VTEX Shirt White Size L\",              \"externalId\": \"1909621862\",              \"manufacturerCode\": \"1234568\",              \"isActive\": true,              \"weight\": 300,              \"dimensions\": {                  \"width\": 1.5,                  \"height\": 2.1,                  \"length\": 1.6              },              \"specs\": [                  {                      \"name\": \"Color\",                      \"value\": \"White\"                  },                  {                      \"name\": \"Size\",                      \"value\": \"L\"                  }              ],              \"images\": [                  \"vtex_logo.jpg\"              ]          }      ],      \"origin\": \"vtxleo7778\"  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} productId Product unique identifier number.
     * @param {Object} opts Optional parameters
     * @param {module:model/PutProductRequest} [putProductRequest] 
     * @param {module:api/ProductApi~putProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProduct(contentType, accept, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['putProductRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling putProduct");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling putProduct");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling putProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/catalog-seller-portal/products/{productId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProductDescription operation.
     * @callback module:api/ProductApi~putProductDescriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Product Description by Product ID
     *  >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Updates the description of a product given a Product ID.    ## Request body example    ```json  {      \"productId\": \"71\",      \"description\": \"White shirt.\"  }  ```
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} productId Product unique identifier number.
     * @param {Object} opts Optional parameters
     * @param {module:model/PutProductDescriptionRequest} [putProductDescriptionRequest] 
     * @param {module:api/ProductApi~putProductDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putProductDescription(contentType, accept, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['putProductDescriptionRequest'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling putProductDescription");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling putProductDescription");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling putProductDescription");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/catalog-seller-portal/products/{productId}/description', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
