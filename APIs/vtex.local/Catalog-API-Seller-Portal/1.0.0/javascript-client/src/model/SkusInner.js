/**
 * Catalog API - Seller Portal
 *   With the Catalog API for Seller Portal, you will be able to create, edit and consult products and their variations, brands, and categories.    > This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).    ## Index    ### Product    `GET` [Get Product by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-)  `PUT` [Update Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-)  `GET` [Get Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-/description)  `PUT` [Update Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-/description)  `GET` [Get Product by external ID, SKU ID, SKU external ID or slug](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-param-)  `POST` [Create Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/products)    ### SKU    `GET` [Search for SKU](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/_search)  `GET` [Get List of SKUs](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/ids)    ### Brand    `GET` [Get List of Brands](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands)  `POST` [Create a Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/brands)  `GET` [Get Brand by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands/-brandId-)  `PUT` [Update Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/brands/-brandId-)    ### Category    `GET` [Get Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree)  `PUT` [Update Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/category-tree)  `GET` [Get Category by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree/categories/-categoryId-)  `POST` [Create a Category](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/category-tree/categories)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dimensions from './Dimensions';
import SpecsInner from './SpecsInner';

/**
 * The SkusInner model module.
 * @module model/SkusInner
 * @version 1.0.0
 */
class SkusInner {
    /**
     * Constructs a new <code>SkusInner</code>.
     * @alias module:model/SkusInner
     * @param dimensions {module:model/Dimensions} 
     * @param images {Array.<Object>} SKU's images IDs.
     * @param isActive {Boolean} If the SKU is active (`true`) or inactive (`false`).
     * @param name {String} SKU Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.
     * @param specs {Array.<module:model/SpecsInner>} SKU specifications. This field is mandatory, but nullable if there is only one SKU.
     * @param weight {Number} SKU weight.
     */
    constructor(dimensions, images, isActive, name, specs, weight) { 
        
        SkusInner.initialize(this, dimensions, images, isActive, name, specs, weight);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dimensions, images, isActive, name, specs, weight) { 
        obj['dimensions'] = dimensions;
        obj['images'] = images;
        obj['isActive'] = isActive;
        obj['name'] = name;
        obj['specs'] = specs;
        obj['weight'] = weight;
    }

    /**
     * Constructs a <code>SkusInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SkusInner} obj Optional instance to populate.
     * @return {module:model/SkusInner} The populated <code>SkusInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SkusInner();

            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = Dimensions.constructFromObject(data['dimensions']);
            }
            if (data.hasOwnProperty('ean')) {
                obj['ean'] = ApiClient.convertToType(data['ean'], 'String');
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Object]);
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
            if (data.hasOwnProperty('manufacturerCode')) {
                obj['manufacturerCode'] = ApiClient.convertToType(data['manufacturerCode'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('specs')) {
                obj['specs'] = ApiClient.convertToType(data['specs'], [SpecsInner]);
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SkusInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SkusInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SkusInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `dimensions`
        if (data['dimensions']) { // data not null
          Dimensions.validateJSON(data['dimensions']);
        }
        // ensure the json data is a string
        if (data['ean'] && !(typeof data['ean'] === 'string' || data['ean'] instanceof String)) {
            throw new Error("Expected the field `ean` to be a primitive type in the JSON string but got " + data['ean']);
        }
        // ensure the json data is a string
        if (data['externalId'] && !(typeof data['externalId'] === 'string' || data['externalId'] instanceof String)) {
            throw new Error("Expected the field `externalId` to be a primitive type in the JSON string but got " + data['externalId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['images'])) {
            throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
        }
        // ensure the json data is a string
        if (data['manufacturerCode'] && !(typeof data['manufacturerCode'] === 'string' || data['manufacturerCode'] instanceof String)) {
            throw new Error("Expected the field `manufacturerCode` to be a primitive type in the JSON string but got " + data['manufacturerCode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['specs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['specs'])) {
                throw new Error("Expected the field `specs` to be an array in the JSON data but got " + data['specs']);
            }
            // validate the optional field `specs` (array)
            for (const item of data['specs']) {
                SpecsInner.validateJSON(item);
            };
        }

        return true;
    }


}

SkusInner.RequiredProperties = ["dimensions", "images", "isActive", "name", "specs", "weight"];

/**
 * @member {module:model/Dimensions} dimensions
 */
SkusInner.prototype['dimensions'] = undefined;

/**
 * Unique SKU identification code (barcode), composed of up to 13 numeric characters.
 * @member {String} ean
 */
SkusInner.prototype['ean'] = undefined;

/**
 * Unique reference code created to improve the store's organization. This is not a required field.
 * @member {String} externalId
 */
SkusInner.prototype['externalId'] = undefined;

/**
 * SKU's images IDs.
 * @member {Array.<Object>} images
 */
SkusInner.prototype['images'] = undefined;

/**
 * If the SKU is active (`true`) or inactive (`false`).
 * @member {Boolean} isActive
 */
SkusInner.prototype['isActive'] = undefined;

/**
 * SKU reference code in the store.
 * @member {String} manufacturerCode
 */
SkusInner.prototype['manufacturerCode'] = undefined;

/**
 * SKU Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.
 * @member {String} name
 */
SkusInner.prototype['name'] = undefined;

/**
 * SKU specifications. This field is mandatory, but nullable if there is only one SKU.
 * @member {Array.<module:model/SpecsInner>} specs
 */
SkusInner.prototype['specs'] = undefined;

/**
 * SKU weight.
 * @member {Number} weight
 */
SkusInner.prototype['weight'] = undefined;






export default SkusInner;

