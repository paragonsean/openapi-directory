/**
 * Catalog API - Seller Portal
 *   With the Catalog API for Seller Portal, you will be able to create, edit and consult products and their variations, brands, and categories.    > This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).    ## Index    ### Product    `GET` [Get Product by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-)  `PUT` [Update Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-)  `GET` [Get Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-/description)  `PUT` [Update Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-/description)  `GET` [Get Product by external ID, SKU ID, SKU external ID or slug](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-param-)  `POST` [Create Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/products)    ### SKU    `GET` [Search for SKU](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/_search)  `GET` [Get List of SKUs](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/ids)    ### Brand    `GET` [Get List of Brands](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands)  `POST` [Create a Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/brands)  `GET` [Get Brand by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands/-brandId-)  `PUT` [Update Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/brands/-brandId-)    ### Category    `GET` [Get Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree)  `PUT` [Update Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/category-tree)  `GET` [Get Category by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree/categories/-categoryId-)  `POST` [Create a Category](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/category-tree/categories)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributesInner from './AttributesInner';
import ImagesInner from './ImagesInner';
import SkusInner3 from './SkusInner3';
import SpecsInner1 from './SpecsInner1';

/**
 * The PutProductRequest model module.
 * @module model/PutProductRequest
 * @version 1.0.0
 */
class PutProductRequest {
    /**
     * Constructs a new <code>PutProductRequest</code>.
     * @alias module:model/PutProductRequest
     * @param attributes {Array.<module:model/AttributesInner>} Attributes of the product. Attributes are additional properties used to create site browsing filters.
     * @param brandId {String} Product's Brand unique identifier number.
     * @param categoryIds {Array.<String>} Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.
     * @param images {Array.<module:model/ImagesInner>} Information of the images of the product.
     * @param name {String} Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.
     * @param origin {String} Origin account of the product. It is not possible to alter products where the origin is `marketplace`.
     * @param skus {Array.<module:model/SkusInner3>} SKUs of the product.
     * @param slug {String} Reference of the product in the URL of the store.
     * @param specs {Array.<module:model/SpecsInner1>} Specifications that will differentiate the possible product SKUs.
     * @param status {String} Status of the product. Its values can be `active` or `inactive`.
     */
    constructor(attributes, brandId, categoryIds, images, name, origin, skus, slug, specs, status) { 
        
        PutProductRequest.initialize(this, attributes, brandId, categoryIds, images, name, origin, skus, slug, specs, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributes, brandId, categoryIds, images, name, origin, skus, slug, specs, status) { 
        obj['attributes'] = attributes;
        obj['brandId'] = brandId;
        obj['categoryIds'] = categoryIds;
        obj['images'] = images;
        obj['name'] = name;
        obj['origin'] = origin;
        obj['skus'] = skus;
        obj['slug'] = slug;
        obj['specs'] = specs;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>PutProductRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutProductRequest} obj Optional instance to populate.
     * @return {module:model/PutProductRequest} The populated <code>PutProductRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutProductRequest();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [AttributesInner]);
            }
            if (data.hasOwnProperty('brandId')) {
                obj['brandId'] = ApiClient.convertToType(data['brandId'], 'String');
            }
            if (data.hasOwnProperty('categoryIds')) {
                obj['categoryIds'] = ApiClient.convertToType(data['categoryIds'], ['String']);
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [ImagesInner]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
            if (data.hasOwnProperty('skus')) {
                obj['skus'] = ApiClient.convertToType(data['skus'], [SkusInner3]);
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('specs')) {
                obj['specs'] = ApiClient.convertToType(data['specs'], [SpecsInner1]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('taxCode')) {
                obj['taxCode'] = ApiClient.convertToType(data['taxCode'], 'String');
            }
            if (data.hasOwnProperty('transportModal')) {
                obj['transportModal'] = ApiClient.convertToType(data['transportModal'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutProductRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutProductRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutProductRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                AttributesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['brandId'] && !(typeof data['brandId'] === 'string' || data['brandId'] instanceof String)) {
            throw new Error("Expected the field `brandId` to be a primitive type in the JSON string but got " + data['brandId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categoryIds'])) {
            throw new Error("Expected the field `categoryIds` to be an array in the JSON data but got " + data['categoryIds']);
        }
        // ensure the json data is a string
        if (data['externalId'] && !(typeof data['externalId'] === 'string' || data['externalId'] instanceof String)) {
            throw new Error("Expected the field `externalId` to be a primitive type in the JSON string but got " + data['externalId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                ImagesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }
        if (data['skus']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['skus'])) {
                throw new Error("Expected the field `skus` to be an array in the JSON data but got " + data['skus']);
            }
            // validate the optional field `skus` (array)
            for (const item of data['skus']) {
                SkusInner3.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        if (data['specs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['specs'])) {
                throw new Error("Expected the field `specs` to be an array in the JSON data but got " + data['specs']);
            }
            // validate the optional field `specs` (array)
            for (const item of data['specs']) {
                SpecsInner1.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['taxCode'] && !(typeof data['taxCode'] === 'string' || data['taxCode'] instanceof String)) {
            throw new Error("Expected the field `taxCode` to be a primitive type in the JSON string but got " + data['taxCode']);
        }
        // ensure the json data is a string
        if (data['transportModal'] && !(typeof data['transportModal'] === 'string' || data['transportModal'] instanceof String)) {
            throw new Error("Expected the field `transportModal` to be a primitive type in the JSON string but got " + data['transportModal']);
        }

        return true;
    }


}

PutProductRequest.RequiredProperties = ["attributes", "brandId", "categoryIds", "images", "name", "origin", "skus", "slug", "specs", "status"];

/**
 * Attributes of the product. Attributes are additional properties used to create site browsing filters.
 * @member {Array.<module:model/AttributesInner>} attributes
 */
PutProductRequest.prototype['attributes'] = undefined;

/**
 * Product's Brand unique identifier number.
 * @member {String} brandId
 */
PutProductRequest.prototype['brandId'] = undefined;

/**
 * Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.
 * @member {Array.<String>} categoryIds
 */
PutProductRequest.prototype['categoryIds'] = undefined;

/**
 * Product reference unique identifier number in the store.
 * @member {String} externalId
 */
PutProductRequest.prototype['externalId'] = undefined;

/**
 * Product's unique identifier number.
 * @member {String} id
 */
PutProductRequest.prototype['id'] = undefined;

/**
 * Information of the images of the product.
 * @member {Array.<module:model/ImagesInner>} images
 */
PutProductRequest.prototype['images'] = undefined;

/**
 * Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.
 * @member {String} name
 */
PutProductRequest.prototype['name'] = undefined;

/**
 * Origin account of the product. It is not possible to alter products where the origin is `marketplace`.
 * @member {String} origin
 */
PutProductRequest.prototype['origin'] = undefined;

/**
 * SKUs of the product.
 * @member {Array.<module:model/SkusInner3>} skus
 */
PutProductRequest.prototype['skus'] = undefined;

/**
 * Reference of the product in the URL of the store.
 * @member {String} slug
 */
PutProductRequest.prototype['slug'] = undefined;

/**
 * Specifications that will differentiate the possible product SKUs.
 * @member {Array.<module:model/SpecsInner1>} specs
 */
PutProductRequest.prototype['specs'] = undefined;

/**
 * Status of the product. Its values can be `active` or `inactive`.
 * @member {String} status
 */
PutProductRequest.prototype['status'] = undefined;

/**
 * Product tax code.
 * @member {String} taxCode
 */
PutProductRequest.prototype['taxCode'] = undefined;

/**
 * Transport modal of the product.
 * @member {String} transportModal
 */
PutProductRequest.prototype['transportModal'] = undefined;






export default PutProductRequest;

