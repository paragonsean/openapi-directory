/*
 * Catalog API - Seller Portal
 *   With the Catalog API for Seller Portal, you will be able to create, edit and consult products and their variations, brands, and categories.    > This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).    ## Index    ### Product    `GET` [Get Product by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-)  `PUT` [Update Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-)  `GET` [Get Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-/description)  `PUT` [Update Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-/description)  `GET` [Get Product by external ID, SKU ID, SKU external ID or slug](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-param-)  `POST` [Create Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/products)    ### SKU    `GET` [Search for SKU](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/_search)  `GET` [Get List of SKUs](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/ids)    ### Brand    `GET` [Get List of Brands](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands)  `POST` [Create a Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/brands)  `GET` [Get Brand by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands/-brandId-)  `PUT` [Update Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/brands/-brandId-)    ### Category    `GET` [Get Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree)  `PUT` [Update Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/category-tree)  `GET` [Get Category by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree/categories/-categoryId-)  `POST` [Create a Category](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/category-tree/categories)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateCategoryRequest;
import org.openapitools.client.model.GetCategoryTree200Response;
import org.openapitools.client.model.Getbyid200Response;
import org.openapitools.client.model.RootsInner;
import org.openapitools.client.model.UpdateCategoryTreeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CategoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCategory
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param createCategoryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCategoryCall(String contentType, String accept, CreateCategoryRequest createCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCategoryRequest;

        // create path and map variables
        String localVarPath = "/api/catalog-seller-portal/category-tree/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCategoryValidateBeforeCall(String contentType, String accept, CreateCategoryRequest createCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createCategory(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createCategory(Async)");
        }

        // verify the required parameter 'createCategoryRequest' is set
        if (createCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'createCategoryRequest' when calling createCategory(Async)");
        }

        return createCategoryCall(contentType, accept, createCategoryRequest, _callback);

    }

    /**
     * Create Category
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Creates a new category.    ## Request body example    &#x60;&#x60;&#x60;json  {    \&quot;parentId\&quot;: \&quot;567\&quot;,    \&quot;Name\&quot;: \&quot;Beauty\&quot;  }  &#x60;&#x60;&#x60;    ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;value\&quot;: {      \&quot;id\&quot;: \&quot;1\&quot;,      \&quot;name\&quot;: \&quot;Beauty\&quot;,      \&quot;isActive\&quot;: false    },    \&quot;children\&quot;: [      {        \&quot;value\&quot;: {          \&quot;id\&quot;: \&quot;2\&quot;,          \&quot;name\&quot;: \&quot;Perfumes\&quot;,          \&quot;isActive\&quot;: false        }      }    ]  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param createCategoryRequest  (required)
     * @return RootsInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RootsInner createCategory(String contentType, String accept, CreateCategoryRequest createCategoryRequest) throws ApiException {
        ApiResponse<RootsInner> localVarResp = createCategoryWithHttpInfo(contentType, accept, createCategoryRequest);
        return localVarResp.getData();
    }

    /**
     * Create Category
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Creates a new category.    ## Request body example    &#x60;&#x60;&#x60;json  {    \&quot;parentId\&quot;: \&quot;567\&quot;,    \&quot;Name\&quot;: \&quot;Beauty\&quot;  }  &#x60;&#x60;&#x60;    ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;value\&quot;: {      \&quot;id\&quot;: \&quot;1\&quot;,      \&quot;name\&quot;: \&quot;Beauty\&quot;,      \&quot;isActive\&quot;: false    },    \&quot;children\&quot;: [      {        \&quot;value\&quot;: {          \&quot;id\&quot;: \&quot;2\&quot;,          \&quot;name\&quot;: \&quot;Perfumes\&quot;,          \&quot;isActive\&quot;: false        }      }    ]  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param createCategoryRequest  (required)
     * @return ApiResponse&lt;RootsInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RootsInner> createCategoryWithHttpInfo(String contentType, String accept, CreateCategoryRequest createCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = createCategoryValidateBeforeCall(contentType, accept, createCategoryRequest, null);
        Type localVarReturnType = new TypeToken<RootsInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Category (asynchronously)
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Creates a new category.    ## Request body example    &#x60;&#x60;&#x60;json  {    \&quot;parentId\&quot;: \&quot;567\&quot;,    \&quot;Name\&quot;: \&quot;Beauty\&quot;  }  &#x60;&#x60;&#x60;    ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;value\&quot;: {      \&quot;id\&quot;: \&quot;1\&quot;,      \&quot;name\&quot;: \&quot;Beauty\&quot;,      \&quot;isActive\&quot;: false    },    \&quot;children\&quot;: [      {        \&quot;value\&quot;: {          \&quot;id\&quot;: \&quot;2\&quot;,          \&quot;name\&quot;: \&quot;Perfumes\&quot;,          \&quot;isActive\&quot;: false        }      }    ]  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param createCategoryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCategoryAsync(String contentType, String accept, CreateCategoryRequest createCategoryRequest, final ApiCallback<RootsInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCategoryValidateBeforeCall(contentType, accept, createCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<RootsInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategoryTree
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param depth Category tree level. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryTreeCall(String contentType, String accept, Integer depth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/catalog-seller-portal/category-tree";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryTreeValidateBeforeCall(String contentType, String accept, Integer depth, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getCategoryTree(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getCategoryTree(Async)");
        }

        return getCategoryTreeCall(contentType, accept, depth, _callback);

    }

    /**
     * Get Category Tree
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about the category tree from the store.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;roots\&quot;: [          {              \&quot;value\&quot;: {                  \&quot;id\&quot;: \&quot;2\&quot;,                  \&quot;name\&quot;: \&quot;Departamento Artesanato\&quot;,                  \&quot;isActive\&quot;: true              },              \&quot;children\&quot;: [                  {                      \&quot;value\&quot;: {                          \&quot;id\&quot;: \&quot;3\&quot;,                          \&quot;name\&quot;: \&quot;Artesanato de Barro\&quot;,                          \&quot;isActive\&quot;: false                      },                      \&quot;children\&quot;: [                          {                              \&quot;value\&quot;: {                                  \&quot;id\&quot;: \&quot;4\&quot;,                                  \&quot;name\&quot;: \&quot;Artesanato de Barro Vermelho\&quot;,                                  \&quot;isActive\&quot;: false                              },                              \&quot;children\&quot;: []                          }                      ]                  }              ]          },          {              \&quot;value\&quot;: {                  \&quot;id\&quot;: \&quot;5\&quot;,                  \&quot;name\&quot;: \&quot;Perfumes\&quot;,                  \&quot;isActive\&quot;: false              },              \&quot;children\&quot;: [                  {                      \&quot;value\&quot;: {                          \&quot;id\&quot;: \&quot;6\&quot;,                          \&quot;name\&quot;: \&quot;Perfume Feminino\&quot;,                          \&quot;isActive\&quot;: false                      },                      \&quot;children\&quot;: []                  },                  {                      \&quot;value\&quot;: {                          \&quot;id\&quot;: \&quot;7\&quot;,                          \&quot;name\&quot;: \&quot;Perfume Masculino\&quot;,                          \&quot;isActive\&quot;: false,                          \&quot;displayOnMenu\&quot;: false,                          \&quot;score\&quot;: 0,                          \&quot;filterByBrand\&quot;: false,                          \&quot;isClickable\&quot;: false                      },                      \&quot;children\&quot;: []                  }              ]          }      ],      \&quot;createdAt\&quot;: \&quot;2021-08-16T20:57:13.070813Z\&quot;,      \&quot;updatedAt\&quot;: \&quot;2022-07-07T14:24:56.416337Z\&quot;  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param depth Category tree level. (optional)
     * @return GetCategoryTree200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCategoryTree200Response getCategoryTree(String contentType, String accept, Integer depth) throws ApiException {
        ApiResponse<GetCategoryTree200Response> localVarResp = getCategoryTreeWithHttpInfo(contentType, accept, depth);
        return localVarResp.getData();
    }

    /**
     * Get Category Tree
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about the category tree from the store.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;roots\&quot;: [          {              \&quot;value\&quot;: {                  \&quot;id\&quot;: \&quot;2\&quot;,                  \&quot;name\&quot;: \&quot;Departamento Artesanato\&quot;,                  \&quot;isActive\&quot;: true              },              \&quot;children\&quot;: [                  {                      \&quot;value\&quot;: {                          \&quot;id\&quot;: \&quot;3\&quot;,                          \&quot;name\&quot;: \&quot;Artesanato de Barro\&quot;,                          \&quot;isActive\&quot;: false                      },                      \&quot;children\&quot;: [                          {                              \&quot;value\&quot;: {                                  \&quot;id\&quot;: \&quot;4\&quot;,                                  \&quot;name\&quot;: \&quot;Artesanato de Barro Vermelho\&quot;,                                  \&quot;isActive\&quot;: false                              },                              \&quot;children\&quot;: []                          }                      ]                  }              ]          },          {              \&quot;value\&quot;: {                  \&quot;id\&quot;: \&quot;5\&quot;,                  \&quot;name\&quot;: \&quot;Perfumes\&quot;,                  \&quot;isActive\&quot;: false              },              \&quot;children\&quot;: [                  {                      \&quot;value\&quot;: {                          \&quot;id\&quot;: \&quot;6\&quot;,                          \&quot;name\&quot;: \&quot;Perfume Feminino\&quot;,                          \&quot;isActive\&quot;: false                      },                      \&quot;children\&quot;: []                  },                  {                      \&quot;value\&quot;: {                          \&quot;id\&quot;: \&quot;7\&quot;,                          \&quot;name\&quot;: \&quot;Perfume Masculino\&quot;,                          \&quot;isActive\&quot;: false,                          \&quot;displayOnMenu\&quot;: false,                          \&quot;score\&quot;: 0,                          \&quot;filterByBrand\&quot;: false,                          \&quot;isClickable\&quot;: false                      },                      \&quot;children\&quot;: []                  }              ]          }      ],      \&quot;createdAt\&quot;: \&quot;2021-08-16T20:57:13.070813Z\&quot;,      \&quot;updatedAt\&quot;: \&quot;2022-07-07T14:24:56.416337Z\&quot;  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param depth Category tree level. (optional)
     * @return ApiResponse&lt;GetCategoryTree200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCategoryTree200Response> getCategoryTreeWithHttpInfo(String contentType, String accept, Integer depth) throws ApiException {
        okhttp3.Call localVarCall = getCategoryTreeValidateBeforeCall(contentType, accept, depth, null);
        Type localVarReturnType = new TypeToken<GetCategoryTree200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Category Tree (asynchronously)
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about the category tree from the store.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;roots\&quot;: [          {              \&quot;value\&quot;: {                  \&quot;id\&quot;: \&quot;2\&quot;,                  \&quot;name\&quot;: \&quot;Departamento Artesanato\&quot;,                  \&quot;isActive\&quot;: true              },              \&quot;children\&quot;: [                  {                      \&quot;value\&quot;: {                          \&quot;id\&quot;: \&quot;3\&quot;,                          \&quot;name\&quot;: \&quot;Artesanato de Barro\&quot;,                          \&quot;isActive\&quot;: false                      },                      \&quot;children\&quot;: [                          {                              \&quot;value\&quot;: {                                  \&quot;id\&quot;: \&quot;4\&quot;,                                  \&quot;name\&quot;: \&quot;Artesanato de Barro Vermelho\&quot;,                                  \&quot;isActive\&quot;: false                              },                              \&quot;children\&quot;: []                          }                      ]                  }              ]          },          {              \&quot;value\&quot;: {                  \&quot;id\&quot;: \&quot;5\&quot;,                  \&quot;name\&quot;: \&quot;Perfumes\&quot;,                  \&quot;isActive\&quot;: false              },              \&quot;children\&quot;: [                  {                      \&quot;value\&quot;: {                          \&quot;id\&quot;: \&quot;6\&quot;,                          \&quot;name\&quot;: \&quot;Perfume Feminino\&quot;,                          \&quot;isActive\&quot;: false                      },                      \&quot;children\&quot;: []                  },                  {                      \&quot;value\&quot;: {                          \&quot;id\&quot;: \&quot;7\&quot;,                          \&quot;name\&quot;: \&quot;Perfume Masculino\&quot;,                          \&quot;isActive\&quot;: false,                          \&quot;displayOnMenu\&quot;: false,                          \&quot;score\&quot;: 0,                          \&quot;filterByBrand\&quot;: false,                          \&quot;isClickable\&quot;: false                      },                      \&quot;children\&quot;: []                  }              ]          }      ],      \&quot;createdAt\&quot;: \&quot;2021-08-16T20:57:13.070813Z\&quot;,      \&quot;updatedAt\&quot;: \&quot;2022-07-07T14:24:56.416337Z\&quot;  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param depth Category tree level. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryTreeAsync(String contentType, String accept, Integer depth, final ApiCallback<GetCategoryTree200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryTreeValidateBeforeCall(contentType, accept, depth, _callback);
        Type localVarReturnType = new TypeToken<GetCategoryTree200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getbyid
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param categoryId Category unique identifier number. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getbyidCall(String contentType, String accept, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/catalog-seller-portal/category-tree/categories/{categoryId}"
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getbyidValidateBeforeCall(String contentType, String accept, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getbyid(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getbyid(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getbyid(Async)");
        }

        return getbyidCall(contentType, accept, categoryId, _callback);

    }

    /**
     * Get Category by ID
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about a category by its ID.     ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;value\&quot;: {      \&quot;id\&quot;: \&quot;1\&quot;,      \&quot;name\&quot;: \&quot;sandboxintegracao\&quot;,      \&quot;isActive\&quot;: false    },    \&quot;children\&quot;: [      {        \&quot;value\&quot;: {          \&quot;id\&quot;: \&quot;2\&quot;,          \&quot;name\&quot;: \&quot;Perfumes\&quot;,          \&quot;isActive\&quot;: false        }      }    ]  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param categoryId Category unique identifier number. (required)
     * @return Getbyid200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Getbyid200Response getbyid(String contentType, String accept, String categoryId) throws ApiException {
        ApiResponse<Getbyid200Response> localVarResp = getbyidWithHttpInfo(contentType, accept, categoryId);
        return localVarResp.getData();
    }

    /**
     * Get Category by ID
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about a category by its ID.     ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;value\&quot;: {      \&quot;id\&quot;: \&quot;1\&quot;,      \&quot;name\&quot;: \&quot;sandboxintegracao\&quot;,      \&quot;isActive\&quot;: false    },    \&quot;children\&quot;: [      {        \&quot;value\&quot;: {          \&quot;id\&quot;: \&quot;2\&quot;,          \&quot;name\&quot;: \&quot;Perfumes\&quot;,          \&quot;isActive\&quot;: false        }      }    ]  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param categoryId Category unique identifier number. (required)
     * @return ApiResponse&lt;Getbyid200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Getbyid200Response> getbyidWithHttpInfo(String contentType, String accept, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getbyidValidateBeforeCall(contentType, accept, categoryId, null);
        Type localVarReturnType = new TypeToken<Getbyid200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Category by ID (asynchronously)
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about a category by its ID.     ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;value\&quot;: {      \&quot;id\&quot;: \&quot;1\&quot;,      \&quot;name\&quot;: \&quot;sandboxintegracao\&quot;,      \&quot;isActive\&quot;: false    },    \&quot;children\&quot;: [      {        \&quot;value\&quot;: {          \&quot;id\&quot;: \&quot;2\&quot;,          \&quot;name\&quot;: \&quot;Perfumes\&quot;,          \&quot;isActive\&quot;: false        }      }    ]  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param categoryId Category unique identifier number. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getbyidAsync(String contentType, String accept, String categoryId, final ApiCallback<Getbyid200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getbyidValidateBeforeCall(contentType, accept, categoryId, _callback);
        Type localVarReturnType = new TypeToken<Getbyid200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCategoryTree
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param updateCategoryTreeRequest OK (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoryTreeCall(String contentType, String accept, UpdateCategoryTreeRequest updateCategoryTreeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCategoryTreeRequest;

        // create path and map variables
        String localVarPath = "/api/catalog-seller-portal/category-tree";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoryTreeValidateBeforeCall(String contentType, String accept, UpdateCategoryTreeRequest updateCategoryTreeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling updateCategoryTree(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling updateCategoryTree(Async)");
        }

        // verify the required parameter 'updateCategoryTreeRequest' is set
        if (updateCategoryTreeRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCategoryTreeRequest' when calling updateCategoryTree(Async)");
        }

        return updateCategoryTreeCall(contentType, accept, updateCategoryTreeRequest, _callback);

    }

    /**
     * Update Category Tree
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Updates the existing categories in the category tree.    ## Request body example    &#x60;&#x60;&#x60;json  {    \&quot;roots\&quot;: [      {        \&quot;value\&quot;: {          \&quot;id\&quot;: \&quot;2\&quot;,          \&quot;name\&quot;: \&quot;Departamento Artesanato\&quot;,          \&quot;isActive\&quot;: true        },        \&quot;children\&quot;: [          {            \&quot;value\&quot;: {              \&quot;id\&quot;: \&quot;3\&quot;,              \&quot;name\&quot;: \&quot;Artesanato de Barro\&quot;,              \&quot;isActive\&quot;: false            },            \&quot;children\&quot;: [              {                \&quot;value\&quot;: {                  \&quot;id\&quot;: \&quot;4\&quot;,                  \&quot;name\&quot;: \&quot;Artesanato de Barro Vermelho\&quot;,                  \&quot;isActive\&quot;: false                },                \&quot;children\&quot;: []              }            ]          }        ]      },      {        \&quot;value\&quot;: {          \&quot;id\&quot;: \&quot;5\&quot;,          \&quot;name\&quot;: \&quot;Perfumes\&quot;,          \&quot;isActive\&quot;: false        },        \&quot;children\&quot;: [          {            \&quot;value\&quot;: {              \&quot;id\&quot;: \&quot;6\&quot;,              \&quot;name\&quot;: \&quot;Perfume Feminino\&quot;,              \&quot;isActive\&quot;: false            },            \&quot;children\&quot;: []          },          {            \&quot;value\&quot;: {              \&quot;id\&quot;: \&quot;7\&quot;,              \&quot;name\&quot;: \&quot;Perfume Masculino\&quot;,              \&quot;isActive\&quot;: false,              \&quot;displayOnMenu\&quot;: false,              \&quot;score\&quot;: 0,              \&quot;filterByBrand\&quot;: false,              \&quot;isClickable\&quot;: false            },            \&quot;children\&quot;: []          }        ]      }    ]  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param updateCategoryTreeRequest OK (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void updateCategoryTree(String contentType, String accept, UpdateCategoryTreeRequest updateCategoryTreeRequest) throws ApiException {
        updateCategoryTreeWithHttpInfo(contentType, accept, updateCategoryTreeRequest);
    }

    /**
     * Update Category Tree
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Updates the existing categories in the category tree.    ## Request body example    &#x60;&#x60;&#x60;json  {    \&quot;roots\&quot;: [      {        \&quot;value\&quot;: {          \&quot;id\&quot;: \&quot;2\&quot;,          \&quot;name\&quot;: \&quot;Departamento Artesanato\&quot;,          \&quot;isActive\&quot;: true        },        \&quot;children\&quot;: [          {            \&quot;value\&quot;: {              \&quot;id\&quot;: \&quot;3\&quot;,              \&quot;name\&quot;: \&quot;Artesanato de Barro\&quot;,              \&quot;isActive\&quot;: false            },            \&quot;children\&quot;: [              {                \&quot;value\&quot;: {                  \&quot;id\&quot;: \&quot;4\&quot;,                  \&quot;name\&quot;: \&quot;Artesanato de Barro Vermelho\&quot;,                  \&quot;isActive\&quot;: false                },                \&quot;children\&quot;: []              }            ]          }        ]      },      {        \&quot;value\&quot;: {          \&quot;id\&quot;: \&quot;5\&quot;,          \&quot;name\&quot;: \&quot;Perfumes\&quot;,          \&quot;isActive\&quot;: false        },        \&quot;children\&quot;: [          {            \&quot;value\&quot;: {              \&quot;id\&quot;: \&quot;6\&quot;,              \&quot;name\&quot;: \&quot;Perfume Feminino\&quot;,              \&quot;isActive\&quot;: false            },            \&quot;children\&quot;: []          },          {            \&quot;value\&quot;: {              \&quot;id\&quot;: \&quot;7\&quot;,              \&quot;name\&quot;: \&quot;Perfume Masculino\&quot;,              \&quot;isActive\&quot;: false,              \&quot;displayOnMenu\&quot;: false,              \&quot;score\&quot;: 0,              \&quot;filterByBrand\&quot;: false,              \&quot;isClickable\&quot;: false            },            \&quot;children\&quot;: []          }        ]      }    ]  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param updateCategoryTreeRequest OK (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCategoryTreeWithHttpInfo(String contentType, String accept, UpdateCategoryTreeRequest updateCategoryTreeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCategoryTreeValidateBeforeCall(contentType, accept, updateCategoryTreeRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Category Tree (asynchronously)
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Updates the existing categories in the category tree.    ## Request body example    &#x60;&#x60;&#x60;json  {    \&quot;roots\&quot;: [      {        \&quot;value\&quot;: {          \&quot;id\&quot;: \&quot;2\&quot;,          \&quot;name\&quot;: \&quot;Departamento Artesanato\&quot;,          \&quot;isActive\&quot;: true        },        \&quot;children\&quot;: [          {            \&quot;value\&quot;: {              \&quot;id\&quot;: \&quot;3\&quot;,              \&quot;name\&quot;: \&quot;Artesanato de Barro\&quot;,              \&quot;isActive\&quot;: false            },            \&quot;children\&quot;: [              {                \&quot;value\&quot;: {                  \&quot;id\&quot;: \&quot;4\&quot;,                  \&quot;name\&quot;: \&quot;Artesanato de Barro Vermelho\&quot;,                  \&quot;isActive\&quot;: false                },                \&quot;children\&quot;: []              }            ]          }        ]      },      {        \&quot;value\&quot;: {          \&quot;id\&quot;: \&quot;5\&quot;,          \&quot;name\&quot;: \&quot;Perfumes\&quot;,          \&quot;isActive\&quot;: false        },        \&quot;children\&quot;: [          {            \&quot;value\&quot;: {              \&quot;id\&quot;: \&quot;6\&quot;,              \&quot;name\&quot;: \&quot;Perfume Feminino\&quot;,              \&quot;isActive\&quot;: false            },            \&quot;children\&quot;: []          },          {            \&quot;value\&quot;: {              \&quot;id\&quot;: \&quot;7\&quot;,              \&quot;name\&quot;: \&quot;Perfume Masculino\&quot;,              \&quot;isActive\&quot;: false,              \&quot;displayOnMenu\&quot;: false,              \&quot;score\&quot;: 0,              \&quot;filterByBrand\&quot;: false,              \&quot;isClickable\&quot;: false            },            \&quot;children\&quot;: []          }        ]      }    ]  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param updateCategoryTreeRequest OK (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCategoryTreeAsync(String contentType, String accept, UpdateCategoryTreeRequest updateCategoryTreeRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoryTreeValidateBeforeCall(contentType, accept, updateCategoryTreeRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
