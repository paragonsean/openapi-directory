/*
 * Catalog API - Seller Portal
 *   With the Catalog API for Seller Portal, you will be able to create, edit and consult products and their variations, brands, and categories.    > This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).    ## Index    ### Product    `GET` [Get Product by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-)  `PUT` [Update Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-)  `GET` [Get Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-/description)  `PUT` [Update Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-/description)  `GET` [Get Product by external ID, SKU ID, SKU external ID or slug](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-param-)  `POST` [Create Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/products)    ### SKU    `GET` [Search for SKU](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/_search)  `GET` [Get List of SKUs](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/ids)    ### Brand    `GET` [Get List of Brands](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands)  `POST` [Create a Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/brands)  `GET` [Get Brand by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands/-brandId-)  `PUT` [Update Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/brands/-brandId-)    ### Category    `GET` [Get Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree)  `PUT` [Update Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/category-tree)  `GET` [Get Category by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree/categories/-categoryId-)  `POST` [Create a Category](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/category-tree/categories)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetBrand200Response;
import org.openapitools.client.model.ListBrand200Response;
import org.openapitools.client.model.PostBrand200Response;
import org.openapitools.client.model.PostBrandRequest;
import org.openapitools.client.model.PutBrandRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrandApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BrandApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrandApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBrand
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param brandId Brand unique identifier number. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandCall(String contentType, String accept, String brandId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/catalog-seller-portal/brands/{brandId}"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBrandValidateBeforeCall(String contentType, String accept, String brandId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getBrand(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getBrand(Async)");
        }

        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling getBrand(Async)");
        }

        return getBrandCall(contentType, accept, brandId, _callback);

    }

    /**
     * Get Brand by ID
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about a brand by its ID.    ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;id\&quot;: \&quot;863\&quot;,    \&quot;name\&quot;: \&quot;Zwilling\&quot;,    \&quot;isActive\&quot;: false,    \&quot;createdAt\&quot;: \&quot;2021-01-18T14:41:45.696488+00:00\&quot;,    \&quot;updatedAt\&quot;: \&quot;2021-01-18T14:41:45.696488+00:00\&quot;  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param brandId Brand unique identifier number. (required)
     * @return GetBrand200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetBrand200Response getBrand(String contentType, String accept, String brandId) throws ApiException {
        ApiResponse<GetBrand200Response> localVarResp = getBrandWithHttpInfo(contentType, accept, brandId);
        return localVarResp.getData();
    }

    /**
     * Get Brand by ID
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about a brand by its ID.    ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;id\&quot;: \&quot;863\&quot;,    \&quot;name\&quot;: \&quot;Zwilling\&quot;,    \&quot;isActive\&quot;: false,    \&quot;createdAt\&quot;: \&quot;2021-01-18T14:41:45.696488+00:00\&quot;,    \&quot;updatedAt\&quot;: \&quot;2021-01-18T14:41:45.696488+00:00\&quot;  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param brandId Brand unique identifier number. (required)
     * @return ApiResponse&lt;GetBrand200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBrand200Response> getBrandWithHttpInfo(String contentType, String accept, String brandId) throws ApiException {
        okhttp3.Call localVarCall = getBrandValidateBeforeCall(contentType, accept, brandId, null);
        Type localVarReturnType = new TypeToken<GetBrand200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Brand by ID (asynchronously)
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about a brand by its ID.    ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;id\&quot;: \&quot;863\&quot;,    \&quot;name\&quot;: \&quot;Zwilling\&quot;,    \&quot;isActive\&quot;: false,    \&quot;createdAt\&quot;: \&quot;2021-01-18T14:41:45.696488+00:00\&quot;,    \&quot;updatedAt\&quot;: \&quot;2021-01-18T14:41:45.696488+00:00\&quot;  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param brandId Brand unique identifier number. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBrandAsync(String contentType, String accept, String brandId, final ApiCallback<GetBrand200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBrandValidateBeforeCall(contentType, accept, brandId, _callback);
        Type localVarReturnType = new TypeToken<GetBrand200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBrand
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param q Search word. (optional)
     * @param from The first page of the interval of the brand list. (optional)
     * @param to The last page of the interval of the brand list. (optional)
     * @param orderBy The order that the list is displayed. You can select &#x60;name&#x60;, or &#x60;updated_at&#x60; to select the order criteria. Then you can add &#x60;,&#x60; , &#x60;asc&#x60; or &#x60;desc&#x60; to define the brands order. (optional)
     * @param name Brand name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBrandCall(String contentType, String accept, String q, String from, String to, String orderBy, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/catalog-seller-portal/brands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBrandValidateBeforeCall(String contentType, String accept, String q, String from, String to, String orderBy, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listBrand(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling listBrand(Async)");
        }

        return listBrandCall(contentType, accept, q, from, to, orderBy, name, _callback);

    }

    /**
     * Get List of Brands
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about all brands of the store. It is mandatory to use at least one query parameter.     ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;data\&quot;: [          {              \&quot;id\&quot;: \&quot;7\&quot;,              \&quot;name\&quot;: \&quot;All For Paws\&quot;,              \&quot;isActive\&quot;: true,              \&quot;createdAt\&quot;: \&quot;2022-01-17T19:43:14.18678Z\&quot;,              \&quot;updatedAt\&quot;: \&quot;2022-01-17T19:43:14.18678Z\&quot;          },          {              \&quot;id\&quot;: \&quot;1\&quot;,              \&quot;name\&quot;: \&quot;AOC\&quot;,              \&quot;isActive\&quot;: true,              \&quot;createdAt\&quot;: \&quot;2021-08-16T21:13:40.55189Z\&quot;,              \&quot;updatedAt\&quot;: \&quot;2021-08-16T21:13:40.55189Z\&quot;          }      ],      \&quot;_metadata\&quot;: {          \&quot;total\&quot;: 18,          \&quot;from\&quot;: 1,          \&quot;to\&quot;: 2,          \&quot;orderBy\&quot;: \&quot;name,asc\&quot;      }  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param q Search word. (optional)
     * @param from The first page of the interval of the brand list. (optional)
     * @param to The last page of the interval of the brand list. (optional)
     * @param orderBy The order that the list is displayed. You can select &#x60;name&#x60;, or &#x60;updated_at&#x60; to select the order criteria. Then you can add &#x60;,&#x60; , &#x60;asc&#x60; or &#x60;desc&#x60; to define the brands order. (optional)
     * @param name Brand name. (optional)
     * @return ListBrand200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListBrand200Response listBrand(String contentType, String accept, String q, String from, String to, String orderBy, String name) throws ApiException {
        ApiResponse<ListBrand200Response> localVarResp = listBrandWithHttpInfo(contentType, accept, q, from, to, orderBy, name);
        return localVarResp.getData();
    }

    /**
     * Get List of Brands
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about all brands of the store. It is mandatory to use at least one query parameter.     ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;data\&quot;: [          {              \&quot;id\&quot;: \&quot;7\&quot;,              \&quot;name\&quot;: \&quot;All For Paws\&quot;,              \&quot;isActive\&quot;: true,              \&quot;createdAt\&quot;: \&quot;2022-01-17T19:43:14.18678Z\&quot;,              \&quot;updatedAt\&quot;: \&quot;2022-01-17T19:43:14.18678Z\&quot;          },          {              \&quot;id\&quot;: \&quot;1\&quot;,              \&quot;name\&quot;: \&quot;AOC\&quot;,              \&quot;isActive\&quot;: true,              \&quot;createdAt\&quot;: \&quot;2021-08-16T21:13:40.55189Z\&quot;,              \&quot;updatedAt\&quot;: \&quot;2021-08-16T21:13:40.55189Z\&quot;          }      ],      \&quot;_metadata\&quot;: {          \&quot;total\&quot;: 18,          \&quot;from\&quot;: 1,          \&quot;to\&quot;: 2,          \&quot;orderBy\&quot;: \&quot;name,asc\&quot;      }  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param q Search word. (optional)
     * @param from The first page of the interval of the brand list. (optional)
     * @param to The last page of the interval of the brand list. (optional)
     * @param orderBy The order that the list is displayed. You can select &#x60;name&#x60;, or &#x60;updated_at&#x60; to select the order criteria. Then you can add &#x60;,&#x60; , &#x60;asc&#x60; or &#x60;desc&#x60; to define the brands order. (optional)
     * @param name Brand name. (optional)
     * @return ApiResponse&lt;ListBrand200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBrand200Response> listBrandWithHttpInfo(String contentType, String accept, String q, String from, String to, String orderBy, String name) throws ApiException {
        okhttp3.Call localVarCall = listBrandValidateBeforeCall(contentType, accept, q, from, to, orderBy, name, null);
        Type localVarReturnType = new TypeToken<ListBrand200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get List of Brands (asynchronously)
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about all brands of the store. It is mandatory to use at least one query parameter.     ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;data\&quot;: [          {              \&quot;id\&quot;: \&quot;7\&quot;,              \&quot;name\&quot;: \&quot;All For Paws\&quot;,              \&quot;isActive\&quot;: true,              \&quot;createdAt\&quot;: \&quot;2022-01-17T19:43:14.18678Z\&quot;,              \&quot;updatedAt\&quot;: \&quot;2022-01-17T19:43:14.18678Z\&quot;          },          {              \&quot;id\&quot;: \&quot;1\&quot;,              \&quot;name\&quot;: \&quot;AOC\&quot;,              \&quot;isActive\&quot;: true,              \&quot;createdAt\&quot;: \&quot;2021-08-16T21:13:40.55189Z\&quot;,              \&quot;updatedAt\&quot;: \&quot;2021-08-16T21:13:40.55189Z\&quot;          }      ],      \&quot;_metadata\&quot;: {          \&quot;total\&quot;: 18,          \&quot;from\&quot;: 1,          \&quot;to\&quot;: 2,          \&quot;orderBy\&quot;: \&quot;name,asc\&quot;      }  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param q Search word. (optional)
     * @param from The first page of the interval of the brand list. (optional)
     * @param to The last page of the interval of the brand list. (optional)
     * @param orderBy The order that the list is displayed. You can select &#x60;name&#x60;, or &#x60;updated_at&#x60; to select the order criteria. Then you can add &#x60;,&#x60; , &#x60;asc&#x60; or &#x60;desc&#x60; to define the brands order. (optional)
     * @param name Brand name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBrandAsync(String contentType, String accept, String q, String from, String to, String orderBy, String name, final ApiCallback<ListBrand200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBrandValidateBeforeCall(contentType, accept, q, from, to, orderBy, name, _callback);
        Type localVarReturnType = new TypeToken<ListBrand200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postBrand
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param postBrandRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postBrandCall(String contentType, String accept, PostBrandRequest postBrandRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postBrandRequest;

        // create path and map variables
        String localVarPath = "/api/catalog-seller-portal/brands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postBrandValidateBeforeCall(String contentType, String accept, PostBrandRequest postBrandRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling postBrand(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling postBrand(Async)");
        }

        return postBrandCall(contentType, accept, postBrandRequest, _callback);

    }

    /**
     * Create Brand
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Creates a new brand.    ## Request body example    &#x60;&#x60;&#x60;json  {    \&quot;name\&quot;: \&quot;Zwilling\&quot;,    \&quot;isActive\&quot;: true  }  &#x60;&#x60;&#x60;    ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;id\&quot;: \&quot;20\&quot;,    \&quot;name\&quot;: \&quot;Zwilling\&quot;,    \&quot;isActive\&quot;: true,    \&quot;createdAt\&quot;: \&quot;2021-05-17T15:20:36.077253+00:00\&quot;,    \&quot;updatedAt\&quot;: \&quot;2021-01-18T14:41:45.696488+00:00\&quot;  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param postBrandRequest  (optional)
     * @return PostBrand200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PostBrand200Response postBrand(String contentType, String accept, PostBrandRequest postBrandRequest) throws ApiException {
        ApiResponse<PostBrand200Response> localVarResp = postBrandWithHttpInfo(contentType, accept, postBrandRequest);
        return localVarResp.getData();
    }

    /**
     * Create Brand
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Creates a new brand.    ## Request body example    &#x60;&#x60;&#x60;json  {    \&quot;name\&quot;: \&quot;Zwilling\&quot;,    \&quot;isActive\&quot;: true  }  &#x60;&#x60;&#x60;    ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;id\&quot;: \&quot;20\&quot;,    \&quot;name\&quot;: \&quot;Zwilling\&quot;,    \&quot;isActive\&quot;: true,    \&quot;createdAt\&quot;: \&quot;2021-05-17T15:20:36.077253+00:00\&quot;,    \&quot;updatedAt\&quot;: \&quot;2021-01-18T14:41:45.696488+00:00\&quot;  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param postBrandRequest  (optional)
     * @return ApiResponse&lt;PostBrand200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostBrand200Response> postBrandWithHttpInfo(String contentType, String accept, PostBrandRequest postBrandRequest) throws ApiException {
        okhttp3.Call localVarCall = postBrandValidateBeforeCall(contentType, accept, postBrandRequest, null);
        Type localVarReturnType = new TypeToken<PostBrand200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Brand (asynchronously)
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Creates a new brand.    ## Request body example    &#x60;&#x60;&#x60;json  {    \&quot;name\&quot;: \&quot;Zwilling\&quot;,    \&quot;isActive\&quot;: true  }  &#x60;&#x60;&#x60;    ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;id\&quot;: \&quot;20\&quot;,    \&quot;name\&quot;: \&quot;Zwilling\&quot;,    \&quot;isActive\&quot;: true,    \&quot;createdAt\&quot;: \&quot;2021-05-17T15:20:36.077253+00:00\&quot;,    \&quot;updatedAt\&quot;: \&quot;2021-01-18T14:41:45.696488+00:00\&quot;  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param postBrandRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postBrandAsync(String contentType, String accept, PostBrandRequest postBrandRequest, final ApiCallback<PostBrand200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = postBrandValidateBeforeCall(contentType, accept, postBrandRequest, _callback);
        Type localVarReturnType = new TypeToken<PostBrand200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putBrand
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param brandId Brand unique identifier number. (required)
     * @param putBrandRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putBrandCall(String contentType, String accept, String brandId, PutBrandRequest putBrandRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putBrandRequest;

        // create path and map variables
        String localVarPath = "/api/catalog-seller-portal/brands/{brandId}"
            .replace("{" + "brandId" + "}", localVarApiClient.escapeString(brandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putBrandValidateBeforeCall(String contentType, String accept, String brandId, PutBrandRequest putBrandRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling putBrand(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling putBrand(Async)");
        }

        // verify the required parameter 'brandId' is set
        if (brandId == null) {
            throw new ApiException("Missing the required parameter 'brandId' when calling putBrand(Async)");
        }

        return putBrandCall(contentType, accept, brandId, putBrandRequest, _callback);

    }

    /**
     * Update Brand
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Updates an existing brand.     ## Request body example    &#x60;&#x60;&#x60;json  {    \&quot;id\&quot;: \&quot;20\&quot;,    \&quot;name\&quot;: \&quot;Zwilling\&quot;,    \&quot;isActive\&quot;: true  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param brandId Brand unique identifier number. (required)
     * @param putBrandRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void putBrand(String contentType, String accept, String brandId, PutBrandRequest putBrandRequest) throws ApiException {
        putBrandWithHttpInfo(contentType, accept, brandId, putBrandRequest);
    }

    /**
     * Update Brand
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Updates an existing brand.     ## Request body example    &#x60;&#x60;&#x60;json  {    \&quot;id\&quot;: \&quot;20\&quot;,    \&quot;name\&quot;: \&quot;Zwilling\&quot;,    \&quot;isActive\&quot;: true  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param brandId Brand unique identifier number. (required)
     * @param putBrandRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putBrandWithHttpInfo(String contentType, String accept, String brandId, PutBrandRequest putBrandRequest) throws ApiException {
        okhttp3.Call localVarCall = putBrandValidateBeforeCall(contentType, accept, brandId, putBrandRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Brand (asynchronously)
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Updates an existing brand.     ## Request body example    &#x60;&#x60;&#x60;json  {    \&quot;id\&quot;: \&quot;20\&quot;,    \&quot;name\&quot;: \&quot;Zwilling\&quot;,    \&quot;isActive\&quot;: true  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param brandId Brand unique identifier number. (required)
     * @param putBrandRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putBrandAsync(String contentType, String accept, String brandId, PutBrandRequest putBrandRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putBrandValidateBeforeCall(contentType, accept, brandId, putBrandRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
