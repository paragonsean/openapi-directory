/*
 * Catalog API - Seller Portal
 *   With the Catalog API for Seller Portal, you will be able to create, edit and consult products and their variations, brands, and categories.    > This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).    ## Index    ### Product    `GET` [Get Product by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-)  `PUT` [Update Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-)  `GET` [Get Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-/description)  `PUT` [Update Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-/description)  `GET` [Get Product by external ID, SKU ID, SKU external ID or slug](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-param-)  `POST` [Create Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/products)    ### SKU    `GET` [Search for SKU](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/_search)  `GET` [Get List of SKUs](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/ids)    ### Brand    `GET` [Get List of Brands](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands)  `POST` [Create a Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/brands)  `GET` [Get Brand by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands/-brandId-)  `PUT` [Update Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/brands/-brandId-)    ### Category    `GET` [Get Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree)  `PUT` [Update Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/category-tree)  `GET` [Get Category by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree/categories/-categoryId-)  `POST` [Create a Category](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/category-tree/categories)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributesInner;
import org.openapitools.client.model.ImagesInner;
import org.openapitools.client.model.SkusInner3;
import org.openapitools.client.model.SpecsInner1;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutProductRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:32.194359-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutProductRequest {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<AttributesInner> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BRAND_ID = "brandId";
  @SerializedName(SERIALIZED_NAME_BRAND_ID)
  private String brandId;

  public static final String SERIALIZED_NAME_CATEGORY_IDS = "categoryIds";
  @SerializedName(SERIALIZED_NAME_CATEGORY_IDS)
  private List<String> categoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<ImagesInner> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_SKUS = "skus";
  @SerializedName(SERIALIZED_NAME_SKUS)
  private List<SkusInner3> skus = new ArrayList<>();

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_SPECS = "specs";
  @SerializedName(SERIALIZED_NAME_SPECS)
  private List<SpecsInner1> specs = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TAX_CODE = "taxCode";
  @SerializedName(SERIALIZED_NAME_TAX_CODE)
  private String taxCode;

  public static final String SERIALIZED_NAME_TRANSPORT_MODAL = "transportModal";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_MODAL)
  private String transportModal;

  public PutProductRequest() {
  }

  public PutProductRequest attributes(List<AttributesInner> attributes) {
    this.attributes = attributes;
    return this;
  }

  public PutProductRequest addAttributesItem(AttributesInner attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Attributes of the product. Attributes are additional properties used to create site browsing filters.
   * @return attributes
   */
  @javax.annotation.Nonnull
  public List<AttributesInner> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<AttributesInner> attributes) {
    this.attributes = attributes;
  }


  public PutProductRequest brandId(String brandId) {
    this.brandId = brandId;
    return this;
  }

  /**
   * Product&#39;s Brand unique identifier number.
   * @return brandId
   */
  @javax.annotation.Nonnull
  public String getBrandId() {
    return brandId;
  }

  public void setBrandId(String brandId) {
    this.brandId = brandId;
  }


  public PutProductRequest categoryIds(List<String> categoryIds) {
    this.categoryIds = categoryIds;
    return this;
  }

  public PutProductRequest addCategoryIdsItem(String categoryIdsItem) {
    if (this.categoryIds == null) {
      this.categoryIds = new ArrayList<>();
    }
    this.categoryIds.add(categoryIdsItem);
    return this;
  }

  /**
   * Product&#39;s Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.
   * @return categoryIds
   */
  @javax.annotation.Nonnull
  public List<String> getCategoryIds() {
    return categoryIds;
  }

  public void setCategoryIds(List<String> categoryIds) {
    this.categoryIds = categoryIds;
  }


  public PutProductRequest externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Product reference unique identifier number in the store.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public PutProductRequest id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Product&#39;s unique identifier number.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public PutProductRequest images(List<ImagesInner> images) {
    this.images = images;
    return this;
  }

  public PutProductRequest addImagesItem(ImagesInner imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Information of the images of the product.
   * @return images
   */
  @javax.annotation.Nonnull
  public List<ImagesInner> getImages() {
    return images;
  }

  public void setImages(List<ImagesInner> images) {
    this.images = images;
  }


  public PutProductRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PutProductRequest origin(String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Origin account of the product. It is not possible to alter products where the origin is &#x60;marketplace&#x60;.
   * @return origin
   */
  @javax.annotation.Nonnull
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public PutProductRequest skus(List<SkusInner3> skus) {
    this.skus = skus;
    return this;
  }

  public PutProductRequest addSkusItem(SkusInner3 skusItem) {
    if (this.skus == null) {
      this.skus = new ArrayList<>();
    }
    this.skus.add(skusItem);
    return this;
  }

  /**
   * SKUs of the product.
   * @return skus
   */
  @javax.annotation.Nonnull
  public List<SkusInner3> getSkus() {
    return skus;
  }

  public void setSkus(List<SkusInner3> skus) {
    this.skus = skus;
  }


  public PutProductRequest slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Reference of the product in the URL of the store.
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public PutProductRequest specs(List<SpecsInner1> specs) {
    this.specs = specs;
    return this;
  }

  public PutProductRequest addSpecsItem(SpecsInner1 specsItem) {
    if (this.specs == null) {
      this.specs = new ArrayList<>();
    }
    this.specs.add(specsItem);
    return this;
  }

  /**
   * Specifications that will differentiate the possible product SKUs.
   * @return specs
   */
  @javax.annotation.Nonnull
  public List<SpecsInner1> getSpecs() {
    return specs;
  }

  public void setSpecs(List<SpecsInner1> specs) {
    this.specs = specs;
  }


  public PutProductRequest status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the product. Its values can be &#x60;active&#x60; or &#x60;inactive&#x60;.
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public PutProductRequest taxCode(String taxCode) {
    this.taxCode = taxCode;
    return this;
  }

  /**
   * Product tax code.
   * @return taxCode
   */
  @javax.annotation.Nullable
  public String getTaxCode() {
    return taxCode;
  }

  public void setTaxCode(String taxCode) {
    this.taxCode = taxCode;
  }


  public PutProductRequest transportModal(String transportModal) {
    this.transportModal = transportModal;
    return this;
  }

  /**
   * Transport modal of the product.
   * @return transportModal
   */
  @javax.annotation.Nullable
  public String getTransportModal() {
    return transportModal;
  }

  public void setTransportModal(String transportModal) {
    this.transportModal = transportModal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutProductRequest putProductRequest = (PutProductRequest) o;
    return Objects.equals(this.attributes, putProductRequest.attributes) &&
        Objects.equals(this.brandId, putProductRequest.brandId) &&
        Objects.equals(this.categoryIds, putProductRequest.categoryIds) &&
        Objects.equals(this.externalId, putProductRequest.externalId) &&
        Objects.equals(this.id, putProductRequest.id) &&
        Objects.equals(this.images, putProductRequest.images) &&
        Objects.equals(this.name, putProductRequest.name) &&
        Objects.equals(this.origin, putProductRequest.origin) &&
        Objects.equals(this.skus, putProductRequest.skus) &&
        Objects.equals(this.slug, putProductRequest.slug) &&
        Objects.equals(this.specs, putProductRequest.specs) &&
        Objects.equals(this.status, putProductRequest.status) &&
        Objects.equals(this.taxCode, putProductRequest.taxCode) &&
        Objects.equals(this.transportModal, putProductRequest.transportModal);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, brandId, categoryIds, externalId, id, images, name, origin, skus, slug, specs, status, taxCode, transportModal);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutProductRequest {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    brandId: ").append(toIndentedString(brandId)).append("\n");
    sb.append("    categoryIds: ").append(toIndentedString(categoryIds)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    skus: ").append(toIndentedString(skus)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    specs: ").append(toIndentedString(specs)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taxCode: ").append(toIndentedString(taxCode)).append("\n");
    sb.append("    transportModal: ").append(toIndentedString(transportModal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("brandId");
    openapiFields.add("categoryIds");
    openapiFields.add("externalId");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("name");
    openapiFields.add("origin");
    openapiFields.add("skus");
    openapiFields.add("slug");
    openapiFields.add("specs");
    openapiFields.add("status");
    openapiFields.add("taxCode");
    openapiFields.add("transportModal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attributes");
    openapiRequiredFields.add("brandId");
    openapiRequiredFields.add("categoryIds");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("origin");
    openapiRequiredFields.add("skus");
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("specs");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutProductRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutProductRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutProductRequest is not found in the empty JSON string", PutProductRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutProductRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutProductRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutProductRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }

      JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
      // validate the required field `attributes` (array)
      for (int i = 0; i < jsonArrayattributes.size(); i++) {
        AttributesInner.validateJsonElement(jsonArrayattributes.get(i));
      };
      if (!jsonObj.get("brandId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("categoryIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("categoryIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryIds` to be an array in the JSON string but got `%s`", jsonObj.get("categoryIds").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }

      JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
      // validate the required field `images` (array)
      for (int i = 0; i < jsonArrayimages.size(); i++) {
        ImagesInner.validateJsonElement(jsonArrayimages.get(i));
      };
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("skus").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `skus` to be an array in the JSON string but got `%s`", jsonObj.get("skus").toString()));
      }

      JsonArray jsonArrayskus = jsonObj.getAsJsonArray("skus");
      // validate the required field `skus` (array)
      for (int i = 0; i < jsonArrayskus.size(); i++) {
        SkusInner3.validateJsonElement(jsonArrayskus.get(i));
      };
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("specs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `specs` to be an array in the JSON string but got `%s`", jsonObj.get("specs").toString()));
      }

      JsonArray jsonArrayspecs = jsonObj.getAsJsonArray("specs");
      // validate the required field `specs` (array)
      for (int i = 0; i < jsonArrayspecs.size(); i++) {
        SpecsInner1.validateJsonElement(jsonArrayspecs.get(i));
      };
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("taxCode") != null && !jsonObj.get("taxCode").isJsonNull()) && !jsonObj.get("taxCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxCode").toString()));
      }
      if ((jsonObj.get("transportModal") != null && !jsonObj.get("transportModal").isJsonNull()) && !jsonObj.get("transportModal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transportModal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transportModal").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutProductRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutProductRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutProductRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutProductRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutProductRequest>() {
           @Override
           public void write(JsonWriter out, PutProductRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutProductRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutProductRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutProductRequest
   * @throws IOException if the JSON string is invalid with respect to PutProductRequest
   */
  public static PutProductRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutProductRequest.class);
  }

  /**
   * Convert an instance of PutProductRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

