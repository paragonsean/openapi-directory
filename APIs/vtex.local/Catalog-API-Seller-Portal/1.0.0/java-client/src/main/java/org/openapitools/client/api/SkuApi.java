/*
 * Catalog API - Seller Portal
 *   With the Catalog API for Seller Portal, you will be able to create, edit and consult products and their variations, brands, and categories.    > This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).    ## Index    ### Product    `GET` [Get Product by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-)  `PUT` [Update Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-)  `GET` [Get Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-productId-/description)  `PUT` [Update Product Description by Product ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/products/-productId-/description)  `GET` [Get Product by external ID, SKU ID, SKU external ID or slug](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/products/-param-)  `POST` [Create Product](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/products)    ### SKU    `GET` [Search for SKU](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/_search)  `GET` [Get List of SKUs](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/skus/ids)    ### Brand    `GET` [Get List of Brands](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands)  `POST` [Create a Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/brands)  `GET` [Get Brand by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/brands/-brandId-)  `PUT` [Update Brand](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/brands/-brandId-)    ### Category    `GET` [Get Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree)  `PUT` [Update Category Tree](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#put-/api/catalog-seller-portal/category-tree)  `GET` [Get Category by ID](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#get-/api/catalog-seller-portal/category-tree/categories/-categoryId-)  `POST` [Create a Category](https://developers.vtex.com/docs/api-reference/catalog-api-seller-portal#post-/api/catalog-seller-portal/category-tree/categories)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListSKU200Response;
import org.openapitools.client.model.SearchSKU200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SkuApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SkuApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SkuApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listSKU
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param from The first page of the interval of the product list. (optional)
     * @param to The last page of the interval of the product list. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSKUCall(String contentType, String accept, String from, String to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/catalog-seller-portal/skus/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSKUValidateBeforeCall(String contentType, String accept, String from, String to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling listSKU(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling listSKU(Async)");
        }

        return listSKUCall(contentType, accept, from, to, _callback);

    }

    /**
     * Get List of SKUs
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about all SKUs.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;data\&quot;: [          \&quot;1\&quot;,          \&quot;10\&quot;,          \&quot;11\&quot;,          \&quot;12\&quot;,          \&quot;13\&quot;,          \&quot;14\&quot;,          \&quot;15\&quot;,          \&quot;16\&quot;,          \&quot;19\&quot;,          \&quot;2\&quot;,          \&quot;20\&quot;,          \&quot;21\&quot;,          \&quot;22\&quot;,          \&quot;23\&quot;,          \&quot;24\&quot;      ],      \&quot;_metadata\&quot;: {          \&quot;total\&quot;: 65,          \&quot;from\&quot;: 1,          \&quot;to\&quot;: 15      }  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param from The first page of the interval of the product list. (optional)
     * @param to The last page of the interval of the product list. (optional)
     * @return ListSKU200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSKU200Response listSKU(String contentType, String accept, String from, String to) throws ApiException {
        ApiResponse<ListSKU200Response> localVarResp = listSKUWithHttpInfo(contentType, accept, from, to);
        return localVarResp.getData();
    }

    /**
     * Get List of SKUs
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about all SKUs.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;data\&quot;: [          \&quot;1\&quot;,          \&quot;10\&quot;,          \&quot;11\&quot;,          \&quot;12\&quot;,          \&quot;13\&quot;,          \&quot;14\&quot;,          \&quot;15\&quot;,          \&quot;16\&quot;,          \&quot;19\&quot;,          \&quot;2\&quot;,          \&quot;20\&quot;,          \&quot;21\&quot;,          \&quot;22\&quot;,          \&quot;23\&quot;,          \&quot;24\&quot;      ],      \&quot;_metadata\&quot;: {          \&quot;total\&quot;: 65,          \&quot;from\&quot;: 1,          \&quot;to\&quot;: 15      }  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param from The first page of the interval of the product list. (optional)
     * @param to The last page of the interval of the product list. (optional)
     * @return ApiResponse&lt;ListSKU200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSKU200Response> listSKUWithHttpInfo(String contentType, String accept, String from, String to) throws ApiException {
        okhttp3.Call localVarCall = listSKUValidateBeforeCall(contentType, accept, from, to, null);
        Type localVarReturnType = new TypeToken<ListSKU200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get List of SKUs (asynchronously)
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about all SKUs.    ## Response body example    &#x60;&#x60;&#x60;json  {      \&quot;data\&quot;: [          \&quot;1\&quot;,          \&quot;10\&quot;,          \&quot;11\&quot;,          \&quot;12\&quot;,          \&quot;13\&quot;,          \&quot;14\&quot;,          \&quot;15\&quot;,          \&quot;16\&quot;,          \&quot;19\&quot;,          \&quot;2\&quot;,          \&quot;20\&quot;,          \&quot;21\&quot;,          \&quot;22\&quot;,          \&quot;23\&quot;,          \&quot;24\&quot;      ],      \&quot;_metadata\&quot;: {          \&quot;total\&quot;: 65,          \&quot;from\&quot;: 1,          \&quot;to\&quot;: 15      }  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param from The first page of the interval of the product list. (optional)
     * @param to The last page of the interval of the product list. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSKUAsync(String contentType, String accept, String from, String to, final ApiCallback<ListSKU200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSKUValidateBeforeCall(contentType, accept, from, to, _callback);
        Type localVarReturnType = new TypeToken<ListSKU200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchSKU
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param from The first page of the interval of the product list. (optional)
     * @param to The last page of the interval of the product list. (optional)
     * @param id SKU unique idenfier number. (optional)
     * @param externalid SKU reference unique identifier number in the store. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSKUCall(String contentType, String accept, String from, String to, Integer id, Integer externalid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/catalog-seller-portal/skus/_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (externalid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("externalid", externalid));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchSKUValidateBeforeCall(String contentType, String accept, String from, String to, Integer id, Integer externalid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling searchSKU(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling searchSKU(Async)");
        }

        return searchSKUCall(contentType, accept, from, to, id, externalid, _callback);

    }

    /**
     * Search for SKU
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about an SKU taking into consideration the defined search criteria. It is mandatory to use at least one query parameter.     ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;data\&quot;: [      {        \&quot;id\&quot;: \&quot;2\&quot;,        \&quot;productId\&quot;: \&quot;2\&quot;,        \&quot;externalId\&quot;: \&quot;1909621862\&quot;      }    ],    \&quot;_metadata\&quot;: {      \&quot;total\&quot;: 1,      \&quot;from\&quot;: 1,      \&quot;to\&quot;: 15    }  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param from The first page of the interval of the product list. (optional)
     * @param to The last page of the interval of the product list. (optional)
     * @param id SKU unique idenfier number. (optional)
     * @param externalid SKU reference unique identifier number in the store. (optional)
     * @return SearchSKU200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SearchSKU200Response searchSKU(String contentType, String accept, String from, String to, Integer id, Integer externalid) throws ApiException {
        ApiResponse<SearchSKU200Response> localVarResp = searchSKUWithHttpInfo(contentType, accept, from, to, id, externalid);
        return localVarResp.getData();
    }

    /**
     * Search for SKU
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about an SKU taking into consideration the defined search criteria. It is mandatory to use at least one query parameter.     ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;data\&quot;: [      {        \&quot;id\&quot;: \&quot;2\&quot;,        \&quot;productId\&quot;: \&quot;2\&quot;,        \&quot;externalId\&quot;: \&quot;1909621862\&quot;      }    ],    \&quot;_metadata\&quot;: {      \&quot;total\&quot;: 1,      \&quot;from\&quot;: 1,      \&quot;to\&quot;: 15    }  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param from The first page of the interval of the product list. (optional)
     * @param to The last page of the interval of the product list. (optional)
     * @param id SKU unique idenfier number. (optional)
     * @param externalid SKU reference unique identifier number in the store. (optional)
     * @return ApiResponse&lt;SearchSKU200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchSKU200Response> searchSKUWithHttpInfo(String contentType, String accept, String from, String to, Integer id, Integer externalid) throws ApiException {
        okhttp3.Call localVarCall = searchSKUValidateBeforeCall(contentType, accept, from, to, id, externalid, null);
        Type localVarReturnType = new TypeToken<SearchSKU200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for SKU (asynchronously)
     *  &gt;ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX&#39;s discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).      Retrieves general information about an SKU taking into consideration the defined search criteria. It is mandatory to use at least one query parameter.     ## Response body example    &#x60;&#x60;&#x60;json  {    \&quot;data\&quot;: [      {        \&quot;id\&quot;: \&quot;2\&quot;,        \&quot;productId\&quot;: \&quot;2\&quot;,        \&quot;externalId\&quot;: \&quot;1909621862\&quot;      }    ],    \&quot;_metadata\&quot;: {      \&quot;total\&quot;: 1,      \&quot;from\&quot;: 1,      \&quot;to\&quot;: 15    }  }  &#x60;&#x60;&#x60;
     * @param contentType Type of the content being sent. (required)
     * @param accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
     * @param from The first page of the interval of the product list. (optional)
     * @param to The last page of the interval of the product list. (optional)
     * @param id SKU unique idenfier number. (optional)
     * @param externalid SKU reference unique identifier number in the store. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSKUAsync(String contentType, String accept, String from, String to, Integer id, Integer externalid, final ApiCallback<SearchSKU200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchSKUValidateBeforeCall(contentType, accept, from, to, id, externalid, _callback);
        Type localVarReturnType = new TypeToken<SearchSKU200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
