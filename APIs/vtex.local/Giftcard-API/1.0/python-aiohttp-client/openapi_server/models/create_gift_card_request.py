# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateGiftCardRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caption: str=None, expiring_date: str=None, multiple_credits: bool=None, multiple_redemptions: bool=None, profile_id: str=None, relation_name: str=None, restricted_to_owner: bool=None):
        """CreateGiftCardRequest - a model defined in OpenAPI

        :param caption: The caption of this CreateGiftCardRequest.
        :param expiring_date: The expiring_date of this CreateGiftCardRequest.
        :param multiple_credits: The multiple_credits of this CreateGiftCardRequest.
        :param multiple_redemptions: The multiple_redemptions of this CreateGiftCardRequest.
        :param profile_id: The profile_id of this CreateGiftCardRequest.
        :param relation_name: The relation_name of this CreateGiftCardRequest.
        :param restricted_to_owner: The restricted_to_owner of this CreateGiftCardRequest.
        """
        self.openapi_types = {
            'caption': str,
            'expiring_date': str,
            'multiple_credits': bool,
            'multiple_redemptions': bool,
            'profile_id': str,
            'relation_name': str,
            'restricted_to_owner': bool
        }

        self.attribute_map = {
            'caption': 'caption',
            'expiring_date': 'expiringDate',
            'multiple_credits': 'multipleCredits',
            'multiple_redemptions': 'multipleRedemptions',
            'profile_id': 'profileId',
            'relation_name': 'relationName',
            'restricted_to_owner': 'restrictedToOwner'
        }

        self._caption = caption
        self._expiring_date = expiring_date
        self._multiple_credits = multiple_credits
        self._multiple_redemptions = multiple_redemptions
        self._profile_id = profile_id
        self._relation_name = relation_name
        self._restricted_to_owner = restricted_to_owner

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGiftCardRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGiftCardRequest of this CreateGiftCardRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caption(self):
        """Gets the caption of this CreateGiftCardRequest.

        The caption of the Giftcard.

        :return: The caption of this CreateGiftCardRequest.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this CreateGiftCardRequest.

        The caption of the Giftcard.

        :param caption: The caption of this CreateGiftCardRequest.
        :type caption: str
        """
        if caption is None:
            raise ValueError("Invalid value for `caption`, must not be `None`")

        self._caption = caption

    @property
    def expiring_date(self):
        """Gets the expiring_date of this CreateGiftCardRequest.

        It must be in the format `YYYY-MM-DDThh:mm:ss.fff`.

        :return: The expiring_date of this CreateGiftCardRequest.
        :rtype: str
        """
        return self._expiring_date

    @expiring_date.setter
    def expiring_date(self, expiring_date):
        """Sets the expiring_date of this CreateGiftCardRequest.

        It must be in the format `YYYY-MM-DDThh:mm:ss.fff`.

        :param expiring_date: The expiring_date of this CreateGiftCardRequest.
        :type expiring_date: str
        """
        if expiring_date is None:
            raise ValueError("Invalid value for `expiring_date`, must not be `None`")

        self._expiring_date = expiring_date

    @property
    def multiple_credits(self):
        """Gets the multiple_credits of this CreateGiftCardRequest.

        The Giftcard balance can be changed.

        :return: The multiple_credits of this CreateGiftCardRequest.
        :rtype: bool
        """
        return self._multiple_credits

    @multiple_credits.setter
    def multiple_credits(self, multiple_credits):
        """Sets the multiple_credits of this CreateGiftCardRequest.

        The Giftcard balance can be changed.

        :param multiple_credits: The multiple_credits of this CreateGiftCardRequest.
        :type multiple_credits: bool
        """

        self._multiple_credits = multiple_credits

    @property
    def multiple_redemptions(self):
        """Gets the multiple_redemptions of this CreateGiftCardRequest.

        The Giftcard can be used to make new purchases until its value is completely used.

        :return: The multiple_redemptions of this CreateGiftCardRequest.
        :rtype: bool
        """
        return self._multiple_redemptions

    @multiple_redemptions.setter
    def multiple_redemptions(self, multiple_redemptions):
        """Sets the multiple_redemptions of this CreateGiftCardRequest.

        The Giftcard can be used to make new purchases until its value is completely used.

        :param multiple_redemptions: The multiple_redemptions of this CreateGiftCardRequest.
        :type multiple_redemptions: bool
        """

        self._multiple_redemptions = multiple_redemptions

    @property
    def profile_id(self):
        """Gets the profile_id of this CreateGiftCardRequest.

        The client's ID.

        :return: The profile_id of this CreateGiftCardRequest.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this CreateGiftCardRequest.

        The client's ID.

        :param profile_id: The profile_id of this CreateGiftCardRequest.
        :type profile_id: str
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")

        self._profile_id = profile_id

    @property
    def relation_name(self):
        """Gets the relation_name of this CreateGiftCardRequest.

        Represents the relationship between the client and the store.

        :return: The relation_name of this CreateGiftCardRequest.
        :rtype: str
        """
        return self._relation_name

    @relation_name.setter
    def relation_name(self, relation_name):
        """Sets the relation_name of this CreateGiftCardRequest.

        Represents the relationship between the client and the store.

        :param relation_name: The relation_name of this CreateGiftCardRequest.
        :type relation_name: str
        """
        if relation_name is None:
            raise ValueError("Invalid value for `relation_name`, must not be `None`")

        self._relation_name = relation_name

    @property
    def restricted_to_owner(self):
        """Gets the restricted_to_owner of this CreateGiftCardRequest.

        The Giftcard can only be used for a specified client's ID.

        :return: The restricted_to_owner of this CreateGiftCardRequest.
        :rtype: bool
        """
        return self._restricted_to_owner

    @restricted_to_owner.setter
    def restricted_to_owner(self, restricted_to_owner):
        """Sets the restricted_to_owner of this CreateGiftCardRequest.

        The Giftcard can only be used for a specified client's ID.

        :param restricted_to_owner: The restricted_to_owner of this CreateGiftCardRequest.
        :type restricted_to_owner: bool
        """

        self._restricted_to_owner = restricted_to_owner
