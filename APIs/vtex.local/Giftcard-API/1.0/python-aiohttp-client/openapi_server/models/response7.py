# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Response7(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: str=None, id: str=None, value: float=None):
        """Response7 - a model defined in OpenAPI

        :param _date: The _date of this Response7.
        :param id: The id of this Response7.
        :param value: The value of this Response7.
        """
        self.openapi_types = {
            '_date': str,
            'id': str,
            'value': float
        }

        self.attribute_map = {
            '_date': 'date',
            'id': 'id',
            'value': 'value'
        }

        self.__date = _date
        self._id = id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Response7':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The response7 of this Response7.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this Response7.


        :return: The _date of this Response7.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Response7.


        :param _date: The _date of this Response7.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def id(self):
        """Gets the id of this Response7.


        :return: The id of this Response7.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Response7.


        :param id: The id of this Response7.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def value(self):
        """Gets the value of this Response7.


        :return: The value of this Response7.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Response7.


        :param value: The value of this Response7.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
