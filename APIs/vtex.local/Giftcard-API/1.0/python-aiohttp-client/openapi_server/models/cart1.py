# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item2 import Item2
from openapi_server import util


class Cart1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discounts: float=None, grand_total: int=None, items: List[Item2]=None, items_total: float=None, shipping: float=None, taxes: int=None):
        """Cart1 - a model defined in OpenAPI

        :param discounts: The discounts of this Cart1.
        :param grand_total: The grand_total of this Cart1.
        :param items: The items of this Cart1.
        :param items_total: The items_total of this Cart1.
        :param shipping: The shipping of this Cart1.
        :param taxes: The taxes of this Cart1.
        """
        self.openapi_types = {
            'discounts': float,
            'grand_total': int,
            'items': List[Item2],
            'items_total': float,
            'shipping': float,
            'taxes': int
        }

        self.attribute_map = {
            'discounts': 'discounts',
            'grand_total': 'grandTotal',
            'items': 'items',
            'items_total': 'itemsTotal',
            'shipping': 'shipping',
            'taxes': 'taxes'
        }

        self._discounts = discounts
        self._grand_total = grand_total
        self._items = items
        self._items_total = items_total
        self._shipping = shipping
        self._taxes = taxes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Cart1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cart1 of this Cart1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discounts(self):
        """Gets the discounts of this Cart1.


        :return: The discounts of this Cart1.
        :rtype: float
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this Cart1.


        :param discounts: The discounts of this Cart1.
        :type discounts: float
        """
        if discounts is None:
            raise ValueError("Invalid value for `discounts`, must not be `None`")

        self._discounts = discounts

    @property
    def grand_total(self):
        """Gets the grand_total of this Cart1.


        :return: The grand_total of this Cart1.
        :rtype: int
        """
        return self._grand_total

    @grand_total.setter
    def grand_total(self, grand_total):
        """Sets the grand_total of this Cart1.


        :param grand_total: The grand_total of this Cart1.
        :type grand_total: int
        """
        if grand_total is None:
            raise ValueError("Invalid value for `grand_total`, must not be `None`")

        self._grand_total = grand_total

    @property
    def items(self):
        """Gets the items of this Cart1.

        

        :return: The items of this Cart1.
        :rtype: List[Item2]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Cart1.

        

        :param items: The items of this Cart1.
        :type items: List[Item2]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def items_total(self):
        """Gets the items_total of this Cart1.


        :return: The items_total of this Cart1.
        :rtype: float
        """
        return self._items_total

    @items_total.setter
    def items_total(self, items_total):
        """Sets the items_total of this Cart1.


        :param items_total: The items_total of this Cart1.
        :type items_total: float
        """
        if items_total is None:
            raise ValueError("Invalid value for `items_total`, must not be `None`")

        self._items_total = items_total

    @property
    def shipping(self):
        """Gets the shipping of this Cart1.


        :return: The shipping of this Cart1.
        :rtype: float
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this Cart1.


        :param shipping: The shipping of this Cart1.
        :type shipping: float
        """
        if shipping is None:
            raise ValueError("Invalid value for `shipping`, must not be `None`")

        self._shipping = shipping

    @property
    def taxes(self):
        """Gets the taxes of this Cart1.


        :return: The taxes of this Cart1.
        :rtype: int
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this Cart1.


        :param taxes: The taxes of this Cart1.
        :type taxes: int
        """
        if taxes is None:
            raise ValueError("Invalid value for `taxes`, must not be `None`")

        self._taxes = taxes
