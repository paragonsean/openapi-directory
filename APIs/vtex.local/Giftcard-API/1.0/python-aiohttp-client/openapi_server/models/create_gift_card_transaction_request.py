# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_info import OrderInfo
from openapi_server import util


class CreateGiftCardTransactionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str='insert test here', operation: str='Debit', order_info: OrderInfo=None, redemption_code: str='example code', redemption_token: str='example code', request_id: str='B56CB', value: float=800):
        """CreateGiftCardTransactionRequest - a model defined in OpenAPI

        :param description: The description of this CreateGiftCardTransactionRequest.
        :param operation: The operation of this CreateGiftCardTransactionRequest.
        :param order_info: The order_info of this CreateGiftCardTransactionRequest.
        :param redemption_code: The redemption_code of this CreateGiftCardTransactionRequest.
        :param redemption_token: The redemption_token of this CreateGiftCardTransactionRequest.
        :param request_id: The request_id of this CreateGiftCardTransactionRequest.
        :param value: The value of this CreateGiftCardTransactionRequest.
        """
        self.openapi_types = {
            'description': str,
            'operation': str,
            'order_info': OrderInfo,
            'redemption_code': str,
            'redemption_token': str,
            'request_id': str,
            'value': float
        }

        self.attribute_map = {
            'description': 'description',
            'operation': 'operation',
            'order_info': 'orderInfo',
            'redemption_code': 'redemptionCode',
            'redemption_token': 'redemptionToken',
            'request_id': 'requestId',
            'value': 'value'
        }

        self._description = description
        self._operation = operation
        self._order_info = order_info
        self._redemption_code = redemption_code
        self._redemption_token = redemption_token
        self._request_id = request_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGiftCardTransactionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGiftCardTransactionRequest of this CreateGiftCardTransactionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateGiftCardTransactionRequest.


        :return: The description of this CreateGiftCardTransactionRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateGiftCardTransactionRequest.


        :param description: The description of this CreateGiftCardTransactionRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def operation(self):
        """Gets the operation of this CreateGiftCardTransactionRequest.


        :return: The operation of this CreateGiftCardTransactionRequest.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this CreateGiftCardTransactionRequest.


        :param operation: The operation of this CreateGiftCardTransactionRequest.
        :type operation: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")

        self._operation = operation

    @property
    def order_info(self):
        """Gets the order_info of this CreateGiftCardTransactionRequest.


        :return: The order_info of this CreateGiftCardTransactionRequest.
        :rtype: OrderInfo
        """
        return self._order_info

    @order_info.setter
    def order_info(self, order_info):
        """Sets the order_info of this CreateGiftCardTransactionRequest.


        :param order_info: The order_info of this CreateGiftCardTransactionRequest.
        :type order_info: OrderInfo
        """

        self._order_info = order_info

    @property
    def redemption_code(self):
        """Gets the redemption_code of this CreateGiftCardTransactionRequest.


        :return: The redemption_code of this CreateGiftCardTransactionRequest.
        :rtype: str
        """
        return self._redemption_code

    @redemption_code.setter
    def redemption_code(self, redemption_code):
        """Sets the redemption_code of this CreateGiftCardTransactionRequest.


        :param redemption_code: The redemption_code of this CreateGiftCardTransactionRequest.
        :type redemption_code: str
        """
        if redemption_code is None:
            raise ValueError("Invalid value for `redemption_code`, must not be `None`")

        self._redemption_code = redemption_code

    @property
    def redemption_token(self):
        """Gets the redemption_token of this CreateGiftCardTransactionRequest.


        :return: The redemption_token of this CreateGiftCardTransactionRequest.
        :rtype: str
        """
        return self._redemption_token

    @redemption_token.setter
    def redemption_token(self, redemption_token):
        """Sets the redemption_token of this CreateGiftCardTransactionRequest.


        :param redemption_token: The redemption_token of this CreateGiftCardTransactionRequest.
        :type redemption_token: str
        """
        if redemption_token is None:
            raise ValueError("Invalid value for `redemption_token`, must not be `None`")

        self._redemption_token = redemption_token

    @property
    def request_id(self):
        """Gets the request_id of this CreateGiftCardTransactionRequest.


        :return: The request_id of this CreateGiftCardTransactionRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CreateGiftCardTransactionRequest.


        :param request_id: The request_id of this CreateGiftCardTransactionRequest.
        :type request_id: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def value(self):
        """Gets the value of this CreateGiftCardTransactionRequest.


        :return: The value of this CreateGiftCardTransactionRequest.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CreateGiftCardTransactionRequest.


        :param value: The value of this CreateGiftCardTransactionRequest.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
