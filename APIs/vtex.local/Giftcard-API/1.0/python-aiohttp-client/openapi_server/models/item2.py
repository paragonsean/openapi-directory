# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price_tag import PriceTag
from openapi_server import util


class Item2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discount: float=None, id: str=None, name: str=None, price: float=None, price_tags: List[PriceTag]=None, product_id: str=None, quantity: int=None, ref_id: str=None, shipping_discount: int=None, value: float=None):
        """Item2 - a model defined in OpenAPI

        :param discount: The discount of this Item2.
        :param id: The id of this Item2.
        :param name: The name of this Item2.
        :param price: The price of this Item2.
        :param price_tags: The price_tags of this Item2.
        :param product_id: The product_id of this Item2.
        :param quantity: The quantity of this Item2.
        :param ref_id: The ref_id of this Item2.
        :param shipping_discount: The shipping_discount of this Item2.
        :param value: The value of this Item2.
        """
        self.openapi_types = {
            'discount': float,
            'id': str,
            'name': str,
            'price': float,
            'price_tags': List[PriceTag],
            'product_id': str,
            'quantity': int,
            'ref_id': str,
            'shipping_discount': int,
            'value': float
        }

        self.attribute_map = {
            'discount': 'discount',
            'id': 'id',
            'name': 'name',
            'price': 'price',
            'price_tags': 'priceTags',
            'product_id': 'productId',
            'quantity': 'quantity',
            'ref_id': 'refId',
            'shipping_discount': 'shippingDiscount',
            'value': 'value'
        }

        self._discount = discount
        self._id = id
        self._name = name
        self._price = price
        self._price_tags = price_tags
        self._product_id = product_id
        self._quantity = quantity
        self._ref_id = ref_id
        self._shipping_discount = shipping_discount
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item2 of this Item2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discount(self):
        """Gets the discount of this Item2.


        :return: The discount of this Item2.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this Item2.


        :param discount: The discount of this Item2.
        :type discount: float
        """
        if discount is None:
            raise ValueError("Invalid value for `discount`, must not be `None`")

        self._discount = discount

    @property
    def id(self):
        """Gets the id of this Item2.


        :return: The id of this Item2.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Item2.


        :param id: The id of this Item2.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Item2.


        :return: The name of this Item2.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Item2.


        :param name: The name of this Item2.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def price(self):
        """Gets the price of this Item2.


        :return: The price of this Item2.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Item2.


        :param price: The price of this Item2.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def price_tags(self):
        """Gets the price_tags of this Item2.

        

        :return: The price_tags of this Item2.
        :rtype: List[PriceTag]
        """
        return self._price_tags

    @price_tags.setter
    def price_tags(self, price_tags):
        """Sets the price_tags of this Item2.

        

        :param price_tags: The price_tags of this Item2.
        :type price_tags: List[PriceTag]
        """
        if price_tags is None:
            raise ValueError("Invalid value for `price_tags`, must not be `None`")

        self._price_tags = price_tags

    @property
    def product_id(self):
        """Gets the product_id of this Item2.


        :return: The product_id of this Item2.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Item2.


        :param product_id: The product_id of this Item2.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this Item2.


        :return: The quantity of this Item2.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Item2.


        :param quantity: The quantity of this Item2.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def ref_id(self):
        """Gets the ref_id of this Item2.


        :return: The ref_id of this Item2.
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this Item2.


        :param ref_id: The ref_id of this Item2.
        :type ref_id: str
        """
        if ref_id is None:
            raise ValueError("Invalid value for `ref_id`, must not be `None`")

        self._ref_id = ref_id

    @property
    def shipping_discount(self):
        """Gets the shipping_discount of this Item2.


        :return: The shipping_discount of this Item2.
        :rtype: int
        """
        return self._shipping_discount

    @shipping_discount.setter
    def shipping_discount(self, shipping_discount):
        """Sets the shipping_discount of this Item2.


        :param shipping_discount: The shipping_discount of this Item2.
        :type shipping_discount: int
        """
        if shipping_discount is None:
            raise ValueError("Invalid value for `shipping_discount`, must not be `None`")

        self._shipping_discount = shipping_discount

    @property
    def value(self):
        """Gets the value of this Item2.


        :return: The value of this Item2.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Item2.


        :param value: The value of this Item2.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
