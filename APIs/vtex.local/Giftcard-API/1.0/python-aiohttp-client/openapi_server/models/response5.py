# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Response5(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: str=None, description: str=None, redemption_mode: str=None, value: float=None):
        """Response5 - a model defined in OpenAPI

        :param _date: The _date of this Response5.
        :param description: The description of this Response5.
        :param redemption_mode: The redemption_mode of this Response5.
        :param value: The value of this Response5.
        """
        self.openapi_types = {
            '_date': str,
            'description': str,
            'redemption_mode': str,
            'value': float
        }

        self.attribute_map = {
            '_date': 'date',
            'description': 'description',
            'redemption_mode': 'redemptionMode',
            'value': 'value'
        }

        self.__date = _date
        self._description = description
        self._redemption_mode = redemption_mode
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Response5':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The response5 of this Response5.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this Response5.


        :return: The _date of this Response5.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Response5.


        :param _date: The _date of this Response5.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this Response5.


        :return: The description of this Response5.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Response5.


        :param description: The description of this Response5.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def redemption_mode(self):
        """Gets the redemption_mode of this Response5.


        :return: The redemption_mode of this Response5.
        :rtype: str
        """
        return self._redemption_mode

    @redemption_mode.setter
    def redemption_mode(self, redemption_mode):
        """Sets the redemption_mode of this Response5.


        :param redemption_mode: The redemption_mode of this Response5.
        :type redemption_mode: str
        """
        if redemption_mode is None:
            raise ValueError("Invalid value for `redemption_mode`, must not be `None`")

        self._redemption_mode = redemption_mode

    @property
    def value(self):
        """Gets the value of this Response5.


        :return: The value of this Response5.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Response5.


        :param value: The value of this Response5.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
