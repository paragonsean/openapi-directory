# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transactions import Transactions
from openapi_server import util


class Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: int=None, caption: str=None, emission_date: str=None, expiring_date: str=None, id: str='2', redemption_code: str=None, redemption_token: str=None, relation_name: str=None, transactions: Transactions=None):
        """Response - a model defined in OpenAPI

        :param balance: The balance of this Response.
        :param caption: The caption of this Response.
        :param emission_date: The emission_date of this Response.
        :param expiring_date: The expiring_date of this Response.
        :param id: The id of this Response.
        :param redemption_code: The redemption_code of this Response.
        :param redemption_token: The redemption_token of this Response.
        :param relation_name: The relation_name of this Response.
        :param transactions: The transactions of this Response.
        """
        self.openapi_types = {
            'balance': int,
            'caption': str,
            'emission_date': str,
            'expiring_date': str,
            'id': str,
            'redemption_code': str,
            'redemption_token': str,
            'relation_name': str,
            'transactions': Transactions
        }

        self.attribute_map = {
            'balance': 'balance',
            'caption': 'caption',
            'emission_date': 'emissionDate',
            'expiring_date': 'expiringDate',
            'id': 'id',
            'redemption_code': 'redemptionCode',
            'redemption_token': 'redemptionToken',
            'relation_name': 'relationName',
            'transactions': 'transactions'
        }

        self._balance = balance
        self._caption = caption
        self._emission_date = emission_date
        self._expiring_date = expiring_date
        self._id = id
        self._redemption_code = redemption_code
        self._redemption_token = redemption_token
        self._relation_name = relation_name
        self._transactions = transactions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The response of this Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this Response.


        :return: The balance of this Response.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Response.


        :param balance: The balance of this Response.
        :type balance: int
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")

        self._balance = balance

    @property
    def caption(self):
        """Gets the caption of this Response.


        :return: The caption of this Response.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this Response.


        :param caption: The caption of this Response.
        :type caption: str
        """
        if caption is None:
            raise ValueError("Invalid value for `caption`, must not be `None`")

        self._caption = caption

    @property
    def emission_date(self):
        """Gets the emission_date of this Response.


        :return: The emission_date of this Response.
        :rtype: str
        """
        return self._emission_date

    @emission_date.setter
    def emission_date(self, emission_date):
        """Sets the emission_date of this Response.


        :param emission_date: The emission_date of this Response.
        :type emission_date: str
        """
        if emission_date is None:
            raise ValueError("Invalid value for `emission_date`, must not be `None`")

        self._emission_date = emission_date

    @property
    def expiring_date(self):
        """Gets the expiring_date of this Response.


        :return: The expiring_date of this Response.
        :rtype: str
        """
        return self._expiring_date

    @expiring_date.setter
    def expiring_date(self, expiring_date):
        """Sets the expiring_date of this Response.


        :param expiring_date: The expiring_date of this Response.
        :type expiring_date: str
        """
        if expiring_date is None:
            raise ValueError("Invalid value for `expiring_date`, must not be `None`")

        self._expiring_date = expiring_date

    @property
    def id(self):
        """Gets the id of this Response.


        :return: The id of this Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Response.


        :param id: The id of this Response.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def redemption_code(self):
        """Gets the redemption_code of this Response.


        :return: The redemption_code of this Response.
        :rtype: str
        """
        return self._redemption_code

    @redemption_code.setter
    def redemption_code(self, redemption_code):
        """Sets the redemption_code of this Response.


        :param redemption_code: The redemption_code of this Response.
        :type redemption_code: str
        """
        if redemption_code is None:
            raise ValueError("Invalid value for `redemption_code`, must not be `None`")

        self._redemption_code = redemption_code

    @property
    def redemption_token(self):
        """Gets the redemption_token of this Response.


        :return: The redemption_token of this Response.
        :rtype: str
        """
        return self._redemption_token

    @redemption_token.setter
    def redemption_token(self, redemption_token):
        """Sets the redemption_token of this Response.


        :param redemption_token: The redemption_token of this Response.
        :type redemption_token: str
        """
        if redemption_token is None:
            raise ValueError("Invalid value for `redemption_token`, must not be `None`")

        self._redemption_token = redemption_token

    @property
    def relation_name(self):
        """Gets the relation_name of this Response.


        :return: The relation_name of this Response.
        :rtype: str
        """
        return self._relation_name

    @relation_name.setter
    def relation_name(self, relation_name):
        """Sets the relation_name of this Response.


        :param relation_name: The relation_name of this Response.
        :type relation_name: str
        """
        if relation_name is None:
            raise ValueError("Invalid value for `relation_name`, must not be `None`")

        self._relation_name = relation_name

    @property
    def transactions(self):
        """Gets the transactions of this Response.


        :return: The transactions of this Response.
        :rtype: Transactions
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this Response.


        :param transactions: The transactions of this Response.
        :type transactions: Transactions
        """
        if transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")

        self._transactions = transactions
