/*
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CancelGiftCardTransactionRequest;
import org.openapitools.client.model.CreateGiftCardTransactionRequest;
import org.openapitools.client.model.Response3;
import org.openapitools.client.model.Response5;
import org.openapitools.client.model.Response6;
import org.openapitools.client.model.Response7;
import org.openapitools.client.model.SettleGiftCardTransactionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelGiftCardTransaction
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param cancelGiftCardTransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelGiftCardTransactionCall(String accept, String contentType, String giftCardID, String transactionID, CancelGiftCardTransactionRequest cancelGiftCardTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelGiftCardTransactionRequest;

        // create path and map variables
        String localVarPath = "/giftcards/{giftCardID}/transactions/{transactionID}/cancellations"
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()))
            .replace("{" + "transactionID" + "}", localVarApiClient.escapeString(transactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelGiftCardTransactionValidateBeforeCall(String accept, String contentType, String giftCardID, String transactionID, CancelGiftCardTransactionRequest cancelGiftCardTransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling cancelGiftCardTransaction(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling cancelGiftCardTransaction(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling cancelGiftCardTransaction(Async)");
        }

        // verify the required parameter 'transactionID' is set
        if (transactionID == null) {
            throw new ApiException("Missing the required parameter 'transactionID' when calling cancelGiftCardTransaction(Async)");
        }

        // verify the required parameter 'cancelGiftCardTransactionRequest' is set
        if (cancelGiftCardTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'cancelGiftCardTransactionRequest' when calling cancelGiftCardTransaction(Async)");
        }

        return cancelGiftCardTransactionCall(accept, contentType, giftCardID, transactionID, cancelGiftCardTransactionRequest, _callback);

    }

    /**
     * Cancel GiftCard Transaction
     * Creates a cancellation in the transaction. Cancel a item reservation or create a refund.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param cancelGiftCardTransactionRequest  (required)
     * @return Response6
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Response6 cancelGiftCardTransaction(String accept, String contentType, String giftCardID, String transactionID, CancelGiftCardTransactionRequest cancelGiftCardTransactionRequest) throws ApiException {
        ApiResponse<Response6> localVarResp = cancelGiftCardTransactionWithHttpInfo(accept, contentType, giftCardID, transactionID, cancelGiftCardTransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel GiftCard Transaction
     * Creates a cancellation in the transaction. Cancel a item reservation or create a refund.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param cancelGiftCardTransactionRequest  (required)
     * @return ApiResponse&lt;Response6&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response6> cancelGiftCardTransactionWithHttpInfo(String accept, String contentType, String giftCardID, String transactionID, CancelGiftCardTransactionRequest cancelGiftCardTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = cancelGiftCardTransactionValidateBeforeCall(accept, contentType, giftCardID, transactionID, cancelGiftCardTransactionRequest, null);
        Type localVarReturnType = new TypeToken<Response6>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel GiftCard Transaction (asynchronously)
     * Creates a cancellation in the transaction. Cancel a item reservation or create a refund.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param cancelGiftCardTransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelGiftCardTransactionAsync(String accept, String contentType, String giftCardID, String transactionID, CancelGiftCardTransactionRequest cancelGiftCardTransactionRequest, final ApiCallback<Response6> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelGiftCardTransactionValidateBeforeCall(accept, contentType, giftCardID, transactionID, cancelGiftCardTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<Response6>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGiftCardTransaction
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param createGiftCardTransactionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardTransactionCall(String accept, String contentType, String giftCardID, CreateGiftCardTransactionRequest createGiftCardTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGiftCardTransactionRequest;

        // create path and map variables
        String localVarPath = "/giftcards/{giftCardID}/transactions"
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGiftCardTransactionValidateBeforeCall(String accept, String contentType, String giftCardID, CreateGiftCardTransactionRequest createGiftCardTransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createGiftCardTransaction(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createGiftCardTransaction(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling createGiftCardTransaction(Async)");
        }

        return createGiftCardTransactionCall(accept, contentType, giftCardID, createGiftCardTransactionRequest, _callback);

    }

    /**
     * Create GiftCard Transaction
     * Register a new giftcard transaction and authorize the item reservation.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param createGiftCardTransactionRequest  (optional)
     * @return Response3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Response3 createGiftCardTransaction(String accept, String contentType, String giftCardID, CreateGiftCardTransactionRequest createGiftCardTransactionRequest) throws ApiException {
        ApiResponse<Response3> localVarResp = createGiftCardTransactionWithHttpInfo(accept, contentType, giftCardID, createGiftCardTransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Create GiftCard Transaction
     * Register a new giftcard transaction and authorize the item reservation.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param createGiftCardTransactionRequest  (optional)
     * @return ApiResponse&lt;Response3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response3> createGiftCardTransactionWithHttpInfo(String accept, String contentType, String giftCardID, CreateGiftCardTransactionRequest createGiftCardTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = createGiftCardTransactionValidateBeforeCall(accept, contentType, giftCardID, createGiftCardTransactionRequest, null);
        Type localVarReturnType = new TypeToken<Response3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create GiftCard Transaction (asynchronously)
     * Register a new giftcard transaction and authorize the item reservation.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param createGiftCardTransactionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardTransactionAsync(String accept, String contentType, String giftCardID, CreateGiftCardTransactionRequest createGiftCardTransactionRequest, final ApiCallback<Response3> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGiftCardTransactionValidateBeforeCall(accept, contentType, giftCardID, createGiftCardTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<Response3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGiftCardTransactionbyID
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardTransactionbyIDCall(String accept, String contentType, String giftCardID, String transactionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcards/{giftCardID}/transactions/{transactionID}"
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()))
            .replace("{" + "transactionID" + "}", localVarApiClient.escapeString(transactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGiftCardTransactionbyIDValidateBeforeCall(String accept, String contentType, String giftCardID, String transactionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getGiftCardTransactionbyID(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getGiftCardTransactionbyID(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling getGiftCardTransactionbyID(Async)");
        }

        // verify the required parameter 'transactionID' is set
        if (transactionID == null) {
            throw new ApiException("Missing the required parameter 'transactionID' when calling getGiftCardTransactionbyID(Async)");
        }

        return getGiftCardTransactionbyIDCall(accept, contentType, giftCardID, transactionID, _callback);

    }

    /**
     * Get GiftCard Transaction by ID
     * 
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @return Response5
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Response5 getGiftCardTransactionbyID(String accept, String contentType, String giftCardID, String transactionID) throws ApiException {
        ApiResponse<Response5> localVarResp = getGiftCardTransactionbyIDWithHttpInfo(accept, contentType, giftCardID, transactionID);
        return localVarResp.getData();
    }

    /**
     * Get GiftCard Transaction by ID
     * 
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @return ApiResponse&lt;Response5&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response5> getGiftCardTransactionbyIDWithHttpInfo(String accept, String contentType, String giftCardID, String transactionID) throws ApiException {
        okhttp3.Call localVarCall = getGiftCardTransactionbyIDValidateBeforeCall(accept, contentType, giftCardID, transactionID, null);
        Type localVarReturnType = new TypeToken<Response5>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GiftCard Transaction by ID (asynchronously)
     * 
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardTransactionbyIDAsync(String accept, String contentType, String giftCardID, String transactionID, final ApiCallback<Response5> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGiftCardTransactionbyIDValidateBeforeCall(accept, contentType, giftCardID, transactionID, _callback);
        Type localVarReturnType = new TypeToken<Response5>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGiftCardTransactions
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardTransactionsCall(String accept, String contentType, String giftCardID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcards/{giftCardID}/transactions"
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGiftCardTransactionsValidateBeforeCall(String accept, String contentType, String giftCardID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getGiftCardTransactions(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getGiftCardTransactions(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling getGiftCardTransactions(Async)");
        }

        return getGiftCardTransactionsCall(accept, contentType, giftCardID, _callback);

    }

    /**
     * Get GiftCard Transactions
     * Returns all transaction of a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @return List&lt;Response3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Response3> getGiftCardTransactions(String accept, String contentType, String giftCardID) throws ApiException {
        ApiResponse<List<Response3>> localVarResp = getGiftCardTransactionsWithHttpInfo(accept, contentType, giftCardID);
        return localVarResp.getData();
    }

    /**
     * Get GiftCard Transactions
     * Returns all transaction of a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @return ApiResponse&lt;List&lt;Response3&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Response3>> getGiftCardTransactionsWithHttpInfo(String accept, String contentType, String giftCardID) throws ApiException {
        okhttp3.Call localVarCall = getGiftCardTransactionsValidateBeforeCall(accept, contentType, giftCardID, null);
        Type localVarReturnType = new TypeToken<List<Response3>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GiftCard Transactions (asynchronously)
     * Returns all transaction of a giftcard.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardTransactionsAsync(String accept, String contentType, String giftCardID, final ApiCallback<List<Response3>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGiftCardTransactionsValidateBeforeCall(accept, contentType, giftCardID, _callback);
        Type localVarReturnType = new TypeToken<List<Response3>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionAuthorizations
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionAuthorizationsCall(String accept, String contentType, String giftCardID, String transactionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcards/{giftCardID}/transactions/{transactionID}/authorization"
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()))
            .replace("{" + "transactionID" + "}", localVarApiClient.escapeString(transactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionAuthorizationsValidateBeforeCall(String accept, String contentType, String giftCardID, String transactionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getTransactionAuthorizations(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getTransactionAuthorizations(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling getTransactionAuthorizations(Async)");
        }

        // verify the required parameter 'transactionID' is set
        if (transactionID == null) {
            throw new ApiException("Missing the required parameter 'transactionID' when calling getTransactionAuthorizations(Async)");
        }

        return getTransactionAuthorizationsCall(accept, contentType, giftCardID, transactionID, _callback);

    }

    /**
     * Get Transaction Authorizations
     * Returns the giftcard transaction authorizations.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @return Response6
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Response6 getTransactionAuthorizations(String accept, String contentType, String giftCardID, String transactionID) throws ApiException {
        ApiResponse<Response6> localVarResp = getTransactionAuthorizationsWithHttpInfo(accept, contentType, giftCardID, transactionID);
        return localVarResp.getData();
    }

    /**
     * Get Transaction Authorizations
     * Returns the giftcard transaction authorizations.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @return ApiResponse&lt;Response6&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response6> getTransactionAuthorizationsWithHttpInfo(String accept, String contentType, String giftCardID, String transactionID) throws ApiException {
        okhttp3.Call localVarCall = getTransactionAuthorizationsValidateBeforeCall(accept, contentType, giftCardID, transactionID, null);
        Type localVarReturnType = new TypeToken<Response6>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Authorizations (asynchronously)
     * Returns the giftcard transaction authorizations.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionAuthorizationsAsync(String accept, String contentType, String giftCardID, String transactionID, final ApiCallback<Response6> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionAuthorizationsValidateBeforeCall(accept, contentType, giftCardID, transactionID, _callback);
        Type localVarReturnType = new TypeToken<Response6>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionCancellations
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionCancellationsCall(String accept, String contentType, String giftCardID, String transactionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcards/{giftCardID}/transactions/{transactionID}/cancellations"
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()))
            .replace("{" + "transactionID" + "}", localVarApiClient.escapeString(transactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionCancellationsValidateBeforeCall(String accept, String contentType, String giftCardID, String transactionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getTransactionCancellations(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getTransactionCancellations(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling getTransactionCancellations(Async)");
        }

        // verify the required parameter 'transactionID' is set
        if (transactionID == null) {
            throw new ApiException("Missing the required parameter 'transactionID' when calling getTransactionCancellations(Async)");
        }

        return getTransactionCancellationsCall(accept, contentType, giftCardID, transactionID, _callback);

    }

    /**
     * Get Transaction Cancellations
     * Returns the giftcard transaction cancellations.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @return List&lt;Response7&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Response7> getTransactionCancellations(String accept, String contentType, String giftCardID, String transactionID) throws ApiException {
        ApiResponse<List<Response7>> localVarResp = getTransactionCancellationsWithHttpInfo(accept, contentType, giftCardID, transactionID);
        return localVarResp.getData();
    }

    /**
     * Get Transaction Cancellations
     * Returns the giftcard transaction cancellations.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @return ApiResponse&lt;List&lt;Response7&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Response7>> getTransactionCancellationsWithHttpInfo(String accept, String contentType, String giftCardID, String transactionID) throws ApiException {
        okhttp3.Call localVarCall = getTransactionCancellationsValidateBeforeCall(accept, contentType, giftCardID, transactionID, null);
        Type localVarReturnType = new TypeToken<List<Response7>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Cancellations (asynchronously)
     * Returns the giftcard transaction cancellations.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionCancellationsAsync(String accept, String contentType, String giftCardID, String transactionID, final ApiCallback<List<Response7>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionCancellationsValidateBeforeCall(accept, contentType, giftCardID, transactionID, _callback);
        Type localVarReturnType = new TypeToken<List<Response7>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionSettlements
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionSettlementsCall(String accept, String contentType, String giftCardID, String transactionID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcards/{giftCardID}/transactions/{transactionID}/settlements"
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()))
            .replace("{" + "transactionID" + "}", localVarApiClient.escapeString(transactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionSettlementsValidateBeforeCall(String accept, String contentType, String giftCardID, String transactionID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getTransactionSettlements(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getTransactionSettlements(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling getTransactionSettlements(Async)");
        }

        // verify the required parameter 'transactionID' is set
        if (transactionID == null) {
            throw new ApiException("Missing the required parameter 'transactionID' when calling getTransactionSettlements(Async)");
        }

        return getTransactionSettlementsCall(accept, contentType, giftCardID, transactionID, _callback);

    }

    /**
     * Get Transaction Settlements
     * Returns the giftcard transaction settlements.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @return List&lt;Response6&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Response6> getTransactionSettlements(String accept, String contentType, String giftCardID, String transactionID) throws ApiException {
        ApiResponse<List<Response6>> localVarResp = getTransactionSettlementsWithHttpInfo(accept, contentType, giftCardID, transactionID);
        return localVarResp.getData();
    }

    /**
     * Get Transaction Settlements
     * Returns the giftcard transaction settlements.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @return ApiResponse&lt;List&lt;Response6&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Response6>> getTransactionSettlementsWithHttpInfo(String accept, String contentType, String giftCardID, String transactionID) throws ApiException {
        okhttp3.Call localVarCall = getTransactionSettlementsValidateBeforeCall(accept, contentType, giftCardID, transactionID, null);
        Type localVarReturnType = new TypeToken<List<Response6>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Settlements (asynchronously)
     * Returns the giftcard transaction settlements.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionSettlementsAsync(String accept, String contentType, String giftCardID, String transactionID, final ApiCallback<List<Response6>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionSettlementsValidateBeforeCall(accept, contentType, giftCardID, transactionID, _callback);
        Type localVarReturnType = new TypeToken<List<Response6>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settleGiftCardTransaction
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param settleGiftCardTransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settleGiftCardTransactionCall(String accept, String contentType, String giftCardID, String transactionID, SettleGiftCardTransactionRequest settleGiftCardTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = settleGiftCardTransactionRequest;

        // create path and map variables
        String localVarPath = "/giftcards/{giftCardID}/transactions/{transactionID}/settlements"
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()))
            .replace("{" + "transactionID" + "}", localVarApiClient.escapeString(transactionID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settleGiftCardTransactionValidateBeforeCall(String accept, String contentType, String giftCardID, String transactionID, SettleGiftCardTransactionRequest settleGiftCardTransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling settleGiftCardTransaction(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling settleGiftCardTransaction(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling settleGiftCardTransaction(Async)");
        }

        // verify the required parameter 'transactionID' is set
        if (transactionID == null) {
            throw new ApiException("Missing the required parameter 'transactionID' when calling settleGiftCardTransaction(Async)");
        }

        // verify the required parameter 'settleGiftCardTransactionRequest' is set
        if (settleGiftCardTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'settleGiftCardTransactionRequest' when calling settleGiftCardTransaction(Async)");
        }

        return settleGiftCardTransactionCall(accept, contentType, giftCardID, transactionID, settleGiftCardTransactionRequest, _callback);

    }

    /**
     * Settle GiftCard Transaction
     * Creates a giftcard transaction settlement.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param settleGiftCardTransactionRequest  (required)
     * @return Response6
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Response6 settleGiftCardTransaction(String accept, String contentType, String giftCardID, String transactionID, SettleGiftCardTransactionRequest settleGiftCardTransactionRequest) throws ApiException {
        ApiResponse<Response6> localVarResp = settleGiftCardTransactionWithHttpInfo(accept, contentType, giftCardID, transactionID, settleGiftCardTransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Settle GiftCard Transaction
     * Creates a giftcard transaction settlement.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param settleGiftCardTransactionRequest  (required)
     * @return ApiResponse&lt;Response6&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response6> settleGiftCardTransactionWithHttpInfo(String accept, String contentType, String giftCardID, String transactionID, SettleGiftCardTransactionRequest settleGiftCardTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = settleGiftCardTransactionValidateBeforeCall(accept, contentType, giftCardID, transactionID, settleGiftCardTransactionRequest, null);
        Type localVarReturnType = new TypeToken<Response6>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Settle GiftCard Transaction (asynchronously)
     * Creates a giftcard transaction settlement.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param transactionID  (required)
     * @param settleGiftCardTransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settleGiftCardTransactionAsync(String accept, String contentType, String giftCardID, String transactionID, SettleGiftCardTransactionRequest settleGiftCardTransactionRequest, final ApiCallback<Response6> _callback) throws ApiException {

        okhttp3.Call localVarCall = settleGiftCardTransactionValidateBeforeCall(accept, contentType, giftCardID, transactionID, settleGiftCardTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<Response6>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
