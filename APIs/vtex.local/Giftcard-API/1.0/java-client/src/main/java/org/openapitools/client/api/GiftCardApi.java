/*
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateGiftCardRequest;
import org.openapitools.client.model.GetGiftCardusingJSONRequest;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.Response2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GiftCardApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GiftCardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GiftCardApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createGiftCard
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey The AppKey configured by the merchant (required)
     * @param xVTEXAPIAppToken The AppToken configured by the merchant (required)
     * @param createGiftCardRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardCall(String contentType, String accept, String xVTEXAPIAppKey, String xVTEXAPIAppToken, CreateGiftCardRequest createGiftCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGiftCardRequest;

        // create path and map variables
        String localVarPath = "/giftcards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (xVTEXAPIAppKey != null) {
            localVarHeaderParams.put("X-VTEX-API-AppKey", localVarApiClient.parameterToString(xVTEXAPIAppKey));
        }

        if (xVTEXAPIAppToken != null) {
            localVarHeaderParams.put("X-VTEX-API-AppToken", localVarApiClient.parameterToString(xVTEXAPIAppToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.vtex.giftcard.v1+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGiftCardValidateBeforeCall(String contentType, String accept, String xVTEXAPIAppKey, String xVTEXAPIAppToken, CreateGiftCardRequest createGiftCardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling createGiftCard(Async)");
        }

        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling createGiftCard(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppKey' is set
        if (xVTEXAPIAppKey == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppKey' when calling createGiftCard(Async)");
        }

        // verify the required parameter 'xVTEXAPIAppToken' is set
        if (xVTEXAPIAppToken == null) {
            throw new ApiException("Missing the required parameter 'xVTEXAPIAppToken' when calling createGiftCard(Async)");
        }

        // verify the required parameter 'createGiftCardRequest' is set
        if (createGiftCardRequest == null) {
            throw new ApiException("Missing the required parameter 'createGiftCardRequest' when calling createGiftCard(Async)");
        }

        return createGiftCardCall(contentType, accept, xVTEXAPIAppKey, xVTEXAPIAppToken, createGiftCardRequest, _callback);

    }

    /**
     * Create GiftCard
     * Creates a GiftCard for a specific user
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey The AppKey configured by the merchant (required)
     * @param xVTEXAPIAppToken The AppToken configured by the merchant (required)
     * @param createGiftCardRequest  (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Response createGiftCard(String contentType, String accept, String xVTEXAPIAppKey, String xVTEXAPIAppToken, CreateGiftCardRequest createGiftCardRequest) throws ApiException {
        ApiResponse<Response> localVarResp = createGiftCardWithHttpInfo(contentType, accept, xVTEXAPIAppKey, xVTEXAPIAppToken, createGiftCardRequest);
        return localVarResp.getData();
    }

    /**
     * Create GiftCard
     * Creates a GiftCard for a specific user
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey The AppKey configured by the merchant (required)
     * @param xVTEXAPIAppToken The AppToken configured by the merchant (required)
     * @param createGiftCardRequest  (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> createGiftCardWithHttpInfo(String contentType, String accept, String xVTEXAPIAppKey, String xVTEXAPIAppToken, CreateGiftCardRequest createGiftCardRequest) throws ApiException {
        okhttp3.Call localVarCall = createGiftCardValidateBeforeCall(contentType, accept, xVTEXAPIAppKey, xVTEXAPIAppToken, createGiftCardRequest, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create GiftCard (asynchronously)
     * Creates a GiftCard for a specific user
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param xVTEXAPIAppKey The AppKey configured by the merchant (required)
     * @param xVTEXAPIAppToken The AppToken configured by the merchant (required)
     * @param createGiftCardRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGiftCardAsync(String contentType, String accept, String xVTEXAPIAppKey, String xVTEXAPIAppToken, CreateGiftCardRequest createGiftCardRequest, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGiftCardValidateBeforeCall(contentType, accept, xVTEXAPIAppKey, xVTEXAPIAppToken, createGiftCardRequest, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGiftCardbyID
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardbyIDCall(String accept, String contentType, String giftCardID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/giftcards/{giftCardID}"
            .replace("{" + "giftCardID" + "}", localVarApiClient.escapeString(giftCardID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGiftCardbyIDValidateBeforeCall(String accept, String contentType, String giftCardID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getGiftCardbyID(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getGiftCardbyID(Async)");
        }

        // verify the required parameter 'giftCardID' is set
        if (giftCardID == null) {
            throw new ApiException("Missing the required parameter 'giftCardID' when calling getGiftCardbyID(Async)");
        }

        return getGiftCardbyIDCall(accept, contentType, giftCardID, _callback);

    }

    /**
     * Get GiftCard by ID
     * Returns associated data for a specified giftcardId.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Response getGiftCardbyID(String accept, String contentType, String giftCardID) throws ApiException {
        ApiResponse<Response> localVarResp = getGiftCardbyIDWithHttpInfo(accept, contentType, giftCardID);
        return localVarResp.getData();
    }

    /**
     * Get GiftCard by ID
     * Returns associated data for a specified giftcardId.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> getGiftCardbyIDWithHttpInfo(String accept, String contentType, String giftCardID) throws ApiException {
        okhttp3.Call localVarCall = getGiftCardbyIDValidateBeforeCall(accept, contentType, giftCardID, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GiftCard by ID (asynchronously)
     * Returns associated data for a specified giftcardId.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param giftCardID  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardbyIDAsync(String accept, String contentType, String giftCardID, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGiftCardbyIDValidateBeforeCall(accept, contentType, giftCardID, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGiftCardusingJSON
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param getGiftCardusingJSONRequest  (required)
     * @param reSTRange PaginationB control.B ThisB queryB variableB mustB followB theB formatB _resources&#x3D;{from}-{to}_. (optional, default to giftcard&#x3D;0-49)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardusingJSONCall(String accept, String contentType, GetGiftCardusingJSONRequest getGiftCardusingJSONRequest, String reSTRange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getGiftCardusingJSONRequest;

        // create path and map variables
        String localVarPath = "/giftcards/_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (reSTRange != null) {
            localVarHeaderParams.put("REST-Range", localVarApiClient.parameterToString(reSTRange));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "appToken", "appKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGiftCardusingJSONValidateBeforeCall(String accept, String contentType, GetGiftCardusingJSONRequest getGiftCardusingJSONRequest, String reSTRange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling getGiftCardusingJSON(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getGiftCardusingJSON(Async)");
        }

        // verify the required parameter 'getGiftCardusingJSONRequest' is set
        if (getGiftCardusingJSONRequest == null) {
            throw new ApiException("Missing the required parameter 'getGiftCardusingJSONRequest' when calling getGiftCardusingJSON(Async)");
        }

        return getGiftCardusingJSONCall(accept, contentType, getGiftCardusingJSONRequest, reSTRange, _callback);

    }

    /**
     * Get GiftCard using JSON
     * Returns the giftcards based on the cart data.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param getGiftCardusingJSONRequest  (required)
     * @param reSTRange PaginationB control.B ThisB queryB variableB mustB followB theB formatB _resources&#x3D;{from}-{to}_. (optional, default to giftcard&#x3D;0-49)
     * @return Response2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Response2 getGiftCardusingJSON(String accept, String contentType, GetGiftCardusingJSONRequest getGiftCardusingJSONRequest, String reSTRange) throws ApiException {
        ApiResponse<Response2> localVarResp = getGiftCardusingJSONWithHttpInfo(accept, contentType, getGiftCardusingJSONRequest, reSTRange);
        return localVarResp.getData();
    }

    /**
     * Get GiftCard using JSON
     * Returns the giftcards based on the cart data.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param getGiftCardusingJSONRequest  (required)
     * @param reSTRange PaginationB control.B ThisB queryB variableB mustB followB theB formatB _resources&#x3D;{from}-{to}_. (optional, default to giftcard&#x3D;0-49)
     * @return ApiResponse&lt;Response2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response2> getGiftCardusingJSONWithHttpInfo(String accept, String contentType, GetGiftCardusingJSONRequest getGiftCardusingJSONRequest, String reSTRange) throws ApiException {
        okhttp3.Call localVarCall = getGiftCardusingJSONValidateBeforeCall(accept, contentType, getGiftCardusingJSONRequest, reSTRange, null);
        Type localVarReturnType = new TypeToken<Response2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get GiftCard using JSON (asynchronously)
     * Returns the giftcards based on the cart data.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json (required)
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json (required)
     * @param getGiftCardusingJSONRequest  (required)
     * @param reSTRange PaginationB control.B ThisB queryB variableB mustB followB theB formatB _resources&#x3D;{from}-{to}_. (optional, default to giftcard&#x3D;0-49)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGiftCardusingJSONAsync(String accept, String contentType, GetGiftCardusingJSONRequest getGiftCardusingJSONRequest, String reSTRange, final ApiCallback<Response2> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGiftCardusingJSONValidateBeforeCall(accept, contentType, getGiftCardusingJSONRequest, reSTRange, _callback);
        Type localVarReturnType = new TypeToken<Response2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
