/*
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Transactions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:55.417532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Response {
  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Integer balance;

  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_EMISSION_DATE = "emissionDate";
  @SerializedName(SERIALIZED_NAME_EMISSION_DATE)
  private String emissionDate;

  public static final String SERIALIZED_NAME_EXPIRING_DATE = "expiringDate";
  @SerializedName(SERIALIZED_NAME_EXPIRING_DATE)
  private String expiringDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id = "2";

  public static final String SERIALIZED_NAME_REDEMPTION_CODE = "redemptionCode";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_CODE)
  private String redemptionCode;

  public static final String SERIALIZED_NAME_REDEMPTION_TOKEN = "redemptionToken";
  @SerializedName(SERIALIZED_NAME_REDEMPTION_TOKEN)
  private String redemptionToken;

  public static final String SERIALIZED_NAME_RELATION_NAME = "relationName";
  @SerializedName(SERIALIZED_NAME_RELATION_NAME)
  private String relationName;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private Transactions transactions;

  public Response() {
  }

  public Response balance(Integer balance) {
    this.balance = balance;
    return this;
  }

  /**
   * Get balance
   * @return balance
   */
  @javax.annotation.Nonnull
  public Integer getBalance() {
    return balance;
  }

  public void setBalance(Integer balance) {
    this.balance = balance;
  }


  public Response caption(String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * Get caption
   * @return caption
   */
  @javax.annotation.Nonnull
  public String getCaption() {
    return caption;
  }

  public void setCaption(String caption) {
    this.caption = caption;
  }


  public Response emissionDate(String emissionDate) {
    this.emissionDate = emissionDate;
    return this;
  }

  /**
   * Get emissionDate
   * @return emissionDate
   */
  @javax.annotation.Nonnull
  public String getEmissionDate() {
    return emissionDate;
  }

  public void setEmissionDate(String emissionDate) {
    this.emissionDate = emissionDate;
  }


  public Response expiringDate(String expiringDate) {
    this.expiringDate = expiringDate;
    return this;
  }

  /**
   * Get expiringDate
   * @return expiringDate
   */
  @javax.annotation.Nonnull
  public String getExpiringDate() {
    return expiringDate;
  }

  public void setExpiringDate(String expiringDate) {
    this.expiringDate = expiringDate;
  }


  public Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Response redemptionCode(String redemptionCode) {
    this.redemptionCode = redemptionCode;
    return this;
  }

  /**
   * Get redemptionCode
   * @return redemptionCode
   */
  @javax.annotation.Nonnull
  public String getRedemptionCode() {
    return redemptionCode;
  }

  public void setRedemptionCode(String redemptionCode) {
    this.redemptionCode = redemptionCode;
  }


  public Response redemptionToken(String redemptionToken) {
    this.redemptionToken = redemptionToken;
    return this;
  }

  /**
   * Get redemptionToken
   * @return redemptionToken
   */
  @javax.annotation.Nonnull
  public String getRedemptionToken() {
    return redemptionToken;
  }

  public void setRedemptionToken(String redemptionToken) {
    this.redemptionToken = redemptionToken;
  }


  public Response relationName(String relationName) {
    this.relationName = relationName;
    return this;
  }

  /**
   * Get relationName
   * @return relationName
   */
  @javax.annotation.Nonnull
  public String getRelationName() {
    return relationName;
  }

  public void setRelationName(String relationName) {
    this.relationName = relationName;
  }


  public Response transactions(Transactions transactions) {
    this.transactions = transactions;
    return this;
  }

  /**
   * Get transactions
   * @return transactions
   */
  @javax.annotation.Nonnull
  public Transactions getTransactions() {
    return transactions;
  }

  public void setTransactions(Transactions transactions) {
    this.transactions = transactions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Response response = (Response) o;
    return Objects.equals(this.balance, response.balance) &&
        Objects.equals(this.caption, response.caption) &&
        Objects.equals(this.emissionDate, response.emissionDate) &&
        Objects.equals(this.expiringDate, response.expiringDate) &&
        Objects.equals(this.id, response.id) &&
        Objects.equals(this.redemptionCode, response.redemptionCode) &&
        Objects.equals(this.redemptionToken, response.redemptionToken) &&
        Objects.equals(this.relationName, response.relationName) &&
        Objects.equals(this.transactions, response.transactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balance, caption, emissionDate, expiringDate, id, redemptionCode, redemptionToken, relationName, transactions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Response {\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    emissionDate: ").append(toIndentedString(emissionDate)).append("\n");
    sb.append("    expiringDate: ").append(toIndentedString(expiringDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    redemptionCode: ").append(toIndentedString(redemptionCode)).append("\n");
    sb.append("    redemptionToken: ").append(toIndentedString(redemptionToken)).append("\n");
    sb.append("    relationName: ").append(toIndentedString(relationName)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balance");
    openapiFields.add("caption");
    openapiFields.add("emissionDate");
    openapiFields.add("expiringDate");
    openapiFields.add("id");
    openapiFields.add("redemptionCode");
    openapiFields.add("redemptionToken");
    openapiFields.add("relationName");
    openapiFields.add("transactions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("caption");
    openapiRequiredFields.add("emissionDate");
    openapiRequiredFields.add("expiringDate");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("redemptionCode");
    openapiRequiredFields.add("redemptionToken");
    openapiRequiredFields.add("relationName");
    openapiRequiredFields.add("transactions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Response is not found in the empty JSON string", Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caption").toString()));
      }
      if (!jsonObj.get("emissionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emissionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emissionDate").toString()));
      }
      if (!jsonObj.get("expiringDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiringDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiringDate").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("redemptionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redemptionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redemptionCode").toString()));
      }
      if (!jsonObj.get("redemptionToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redemptionToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redemptionToken").toString()));
      }
      if (!jsonObj.get("relationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationName").toString()));
      }
      // validate the required field `transactions`
      Transactions.validateJsonElement(jsonObj.get("transactions"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Response.class));

       return (TypeAdapter<T>) new TypeAdapter<Response>() {
           @Override
           public void write(JsonWriter out, Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Response
   * @throws IOException if the JSON string is invalid with respect to Response
   */
  public static Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Response.class);
  }

  /**
   * Convert an instance of Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

