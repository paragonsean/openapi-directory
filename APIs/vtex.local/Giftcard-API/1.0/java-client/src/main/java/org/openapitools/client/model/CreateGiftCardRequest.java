/*
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateGiftCardRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:55:55.417532-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateGiftCardRequest {
  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_EXPIRING_DATE = "expiringDate";
  @SerializedName(SERIALIZED_NAME_EXPIRING_DATE)
  private String expiringDate;

  public static final String SERIALIZED_NAME_MULTIPLE_CREDITS = "multipleCredits";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_CREDITS)
  private Boolean multipleCredits;

  public static final String SERIALIZED_NAME_MULTIPLE_REDEMPTIONS = "multipleRedemptions";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_REDEMPTIONS)
  private Boolean multipleRedemptions;

  public static final String SERIALIZED_NAME_PROFILE_ID = "profileId";
  @SerializedName(SERIALIZED_NAME_PROFILE_ID)
  private String profileId;

  public static final String SERIALIZED_NAME_RELATION_NAME = "relationName";
  @SerializedName(SERIALIZED_NAME_RELATION_NAME)
  private String relationName;

  public static final String SERIALIZED_NAME_RESTRICTED_TO_OWNER = "restrictedToOwner";
  @SerializedName(SERIALIZED_NAME_RESTRICTED_TO_OWNER)
  private Boolean restrictedToOwner;

  public CreateGiftCardRequest() {
  }

  public CreateGiftCardRequest caption(String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * The caption of the Giftcard.
   * @return caption
   */
  @javax.annotation.Nonnull
  public String getCaption() {
    return caption;
  }

  public void setCaption(String caption) {
    this.caption = caption;
  }


  public CreateGiftCardRequest expiringDate(String expiringDate) {
    this.expiringDate = expiringDate;
    return this;
  }

  /**
   * It must be in the format &#x60;YYYY-MM-DDThh:mm:ss.fff&#x60;.
   * @return expiringDate
   */
  @javax.annotation.Nonnull
  public String getExpiringDate() {
    return expiringDate;
  }

  public void setExpiringDate(String expiringDate) {
    this.expiringDate = expiringDate;
  }


  public CreateGiftCardRequest multipleCredits(Boolean multipleCredits) {
    this.multipleCredits = multipleCredits;
    return this;
  }

  /**
   * The Giftcard balance can be changed.
   * @return multipleCredits
   */
  @javax.annotation.Nullable
  public Boolean getMultipleCredits() {
    return multipleCredits;
  }

  public void setMultipleCredits(Boolean multipleCredits) {
    this.multipleCredits = multipleCredits;
  }


  public CreateGiftCardRequest multipleRedemptions(Boolean multipleRedemptions) {
    this.multipleRedemptions = multipleRedemptions;
    return this;
  }

  /**
   * The Giftcard can be used to make new purchases until its value is completely used.
   * @return multipleRedemptions
   */
  @javax.annotation.Nullable
  public Boolean getMultipleRedemptions() {
    return multipleRedemptions;
  }

  public void setMultipleRedemptions(Boolean multipleRedemptions) {
    this.multipleRedemptions = multipleRedemptions;
  }


  public CreateGiftCardRequest profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

  /**
   * The client&#39;s ID.
   * @return profileId
   */
  @javax.annotation.Nonnull
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }


  public CreateGiftCardRequest relationName(String relationName) {
    this.relationName = relationName;
    return this;
  }

  /**
   * Represents the relationship between the client and the store.
   * @return relationName
   */
  @javax.annotation.Nonnull
  public String getRelationName() {
    return relationName;
  }

  public void setRelationName(String relationName) {
    this.relationName = relationName;
  }


  public CreateGiftCardRequest restrictedToOwner(Boolean restrictedToOwner) {
    this.restrictedToOwner = restrictedToOwner;
    return this;
  }

  /**
   * The Giftcard can only be used for a specified client&#39;s ID.
   * @return restrictedToOwner
   */
  @javax.annotation.Nullable
  public Boolean getRestrictedToOwner() {
    return restrictedToOwner;
  }

  public void setRestrictedToOwner(Boolean restrictedToOwner) {
    this.restrictedToOwner = restrictedToOwner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateGiftCardRequest createGiftCardRequest = (CreateGiftCardRequest) o;
    return Objects.equals(this.caption, createGiftCardRequest.caption) &&
        Objects.equals(this.expiringDate, createGiftCardRequest.expiringDate) &&
        Objects.equals(this.multipleCredits, createGiftCardRequest.multipleCredits) &&
        Objects.equals(this.multipleRedemptions, createGiftCardRequest.multipleRedemptions) &&
        Objects.equals(this.profileId, createGiftCardRequest.profileId) &&
        Objects.equals(this.relationName, createGiftCardRequest.relationName) &&
        Objects.equals(this.restrictedToOwner, createGiftCardRequest.restrictedToOwner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caption, expiringDate, multipleCredits, multipleRedemptions, profileId, relationName, restrictedToOwner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateGiftCardRequest {\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    expiringDate: ").append(toIndentedString(expiringDate)).append("\n");
    sb.append("    multipleCredits: ").append(toIndentedString(multipleCredits)).append("\n");
    sb.append("    multipleRedemptions: ").append(toIndentedString(multipleRedemptions)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    relationName: ").append(toIndentedString(relationName)).append("\n");
    sb.append("    restrictedToOwner: ").append(toIndentedString(restrictedToOwner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caption");
    openapiFields.add("expiringDate");
    openapiFields.add("multipleCredits");
    openapiFields.add("multipleRedemptions");
    openapiFields.add("profileId");
    openapiFields.add("relationName");
    openapiFields.add("restrictedToOwner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("caption");
    openapiRequiredFields.add("expiringDate");
    openapiRequiredFields.add("profileId");
    openapiRequiredFields.add("relationName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateGiftCardRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateGiftCardRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateGiftCardRequest is not found in the empty JSON string", CreateGiftCardRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateGiftCardRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateGiftCardRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateGiftCardRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caption").toString()));
      }
      if (!jsonObj.get("expiringDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiringDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiringDate").toString()));
      }
      if (!jsonObj.get("profileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileId").toString()));
      }
      if (!jsonObj.get("relationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateGiftCardRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateGiftCardRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateGiftCardRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateGiftCardRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateGiftCardRequest>() {
           @Override
           public void write(JsonWriter out, CreateGiftCardRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateGiftCardRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateGiftCardRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateGiftCardRequest
   * @throws IOException if the JSON string is invalid with respect to CreateGiftCardRequest
   */
  public static CreateGiftCardRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateGiftCardRequest.class);
  }

  /**
   * Convert an instance of CreateGiftCardRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

