/**
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateGiftCardRequest from '../model/CreateGiftCardRequest';
import GetGiftCardusingJSONRequest from '../model/GetGiftCardusingJSONRequest';
import Response from '../model/Response';
import Response2 from '../model/Response2';

/**
* GiftCard service.
* @module api/GiftCardApi
* @version 1.0
*/
export default class GiftCardApi {

    /**
    * Constructs a new GiftCardApi. 
    * @alias module:api/GiftCardApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGiftCard operation.
     * @callback module:api/GiftCardApi~createGiftCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create GiftCard
     * Creates a GiftCard for a specific user
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} xVTEXAPIAppKey The AppKey configured by the merchant
     * @param {String} xVTEXAPIAppToken The AppToken configured by the merchant
     * @param {module:model/CreateGiftCardRequest} createGiftCardRequest 
     * @param {module:api/GiftCardApi~createGiftCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    createGiftCard(contentType, accept, xVTEXAPIAppKey, xVTEXAPIAppToken, createGiftCardRequest, callback) {
      let postBody = createGiftCardRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createGiftCard");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createGiftCard");
      }
      // verify the required parameter 'xVTEXAPIAppKey' is set
      if (xVTEXAPIAppKey === undefined || xVTEXAPIAppKey === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppKey' when calling createGiftCard");
      }
      // verify the required parameter 'xVTEXAPIAppToken' is set
      if (xVTEXAPIAppToken === undefined || xVTEXAPIAppToken === null) {
        throw new Error("Missing the required parameter 'xVTEXAPIAppToken' when calling createGiftCard");
      }
      // verify the required parameter 'createGiftCardRequest' is set
      if (createGiftCardRequest === undefined || createGiftCardRequest === null) {
        throw new Error("Missing the required parameter 'createGiftCardRequest' when calling createGiftCard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept,
        'X-VTEX-API-AppKey': xVTEXAPIAppKey,
        'X-VTEX-API-AppToken': xVTEXAPIAppToken
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/vnd.vtex.giftcard.v1+json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/giftcards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGiftCardbyID operation.
     * @callback module:api/GiftCardApi~getGiftCardbyIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GiftCard by ID
     * Returns associated data for a specified giftcardId.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} giftCardID 
     * @param {module:api/GiftCardApi~getGiftCardbyIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    getGiftCardbyID(accept, contentType, giftCardID, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getGiftCardbyID");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getGiftCardbyID");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling getGiftCardbyID");
      }

      let pathParams = {
        'giftCardID': giftCardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/giftcards/{giftCardID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGiftCardusingJSON operation.
     * @callback module:api/GiftCardApi~getGiftCardusingJSONCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GiftCard using JSON
     * Returns the giftcards based on the cart data.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {module:model/GetGiftCardusingJSONRequest} getGiftCardusingJSONRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [rESTRange = 'giftcard=0-49')] PaginationB control.B ThisB queryB variableB mustB followB theB formatB _resources={from}-{to}_.
     * @param {module:api/GiftCardApi~getGiftCardusingJSONCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response2}
     */
    getGiftCardusingJSON(accept, contentType, getGiftCardusingJSONRequest, opts, callback) {
      opts = opts || {};
      let postBody = getGiftCardusingJSONRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getGiftCardusingJSON");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getGiftCardusingJSON");
      }
      // verify the required parameter 'getGiftCardusingJSONRequest' is set
      if (getGiftCardusingJSONRequest === undefined || getGiftCardusingJSONRequest === null) {
        throw new Error("Missing the required parameter 'getGiftCardusingJSONRequest' when calling getGiftCardusingJSON");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType,
        'REST-Range': opts['rESTRange']
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response2;
      return this.apiClient.callApi(
        '/giftcards/_search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
