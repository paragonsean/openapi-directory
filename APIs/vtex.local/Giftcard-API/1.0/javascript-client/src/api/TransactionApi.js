/**
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelGiftCardTransactionRequest from '../model/CancelGiftCardTransactionRequest';
import CreateGiftCardTransactionRequest from '../model/CreateGiftCardTransactionRequest';
import Response3 from '../model/Response3';
import Response5 from '../model/Response5';
import Response6 from '../model/Response6';
import Response7 from '../model/Response7';
import SettleGiftCardTransactionRequest from '../model/SettleGiftCardTransactionRequest';

/**
* Transaction service.
* @module api/TransactionApi
* @version 1.0
*/
export default class TransactionApi {

    /**
    * Constructs a new TransactionApi. 
    * @alias module:api/TransactionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelGiftCardTransaction operation.
     * @callback module:api/TransactionApi~cancelGiftCardTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response6} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel GiftCard Transaction
     * Creates a cancellation in the transaction. Cancel a item reservation or create a refund.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} giftCardID 
     * @param {String} transactionID 
     * @param {module:model/CancelGiftCardTransactionRequest} cancelGiftCardTransactionRequest 
     * @param {module:api/TransactionApi~cancelGiftCardTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response6}
     */
    cancelGiftCardTransaction(accept, contentType, giftCardID, transactionID, cancelGiftCardTransactionRequest, callback) {
      let postBody = cancelGiftCardTransactionRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling cancelGiftCardTransaction");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling cancelGiftCardTransaction");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling cancelGiftCardTransaction");
      }
      // verify the required parameter 'transactionID' is set
      if (transactionID === undefined || transactionID === null) {
        throw new Error("Missing the required parameter 'transactionID' when calling cancelGiftCardTransaction");
      }
      // verify the required parameter 'cancelGiftCardTransactionRequest' is set
      if (cancelGiftCardTransactionRequest === undefined || cancelGiftCardTransactionRequest === null) {
        throw new Error("Missing the required parameter 'cancelGiftCardTransactionRequest' when calling cancelGiftCardTransaction");
      }

      let pathParams = {
        'giftCardID': giftCardID,
        'transactionID': transactionID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response6;
      return this.apiClient.callApi(
        '/giftcards/{giftCardID}/transactions/{transactionID}/cancellations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGiftCardTransaction operation.
     * @callback module:api/TransactionApi~createGiftCardTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create GiftCard Transaction
     * Register a new giftcard transaction and authorize the item reservation.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} giftCardID 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateGiftCardTransactionRequest} [createGiftCardTransactionRequest] 
     * @param {module:api/TransactionApi~createGiftCardTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response3}
     */
    createGiftCardTransaction(accept, contentType, giftCardID, opts, callback) {
      opts = opts || {};
      let postBody = opts['createGiftCardTransactionRequest'];
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createGiftCardTransaction");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createGiftCardTransaction");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling createGiftCardTransaction");
      }

      let pathParams = {
        'giftCardID': giftCardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response3;
      return this.apiClient.callApi(
        '/giftcards/{giftCardID}/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGiftCardTransactionbyID operation.
     * @callback module:api/TransactionApi~getGiftCardTransactionbyIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response5} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GiftCard Transaction by ID
     * 
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} giftCardID 
     * @param {String} transactionID 
     * @param {module:api/TransactionApi~getGiftCardTransactionbyIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response5}
     */
    getGiftCardTransactionbyID(accept, contentType, giftCardID, transactionID, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getGiftCardTransactionbyID");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getGiftCardTransactionbyID");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling getGiftCardTransactionbyID");
      }
      // verify the required parameter 'transactionID' is set
      if (transactionID === undefined || transactionID === null) {
        throw new Error("Missing the required parameter 'transactionID' when calling getGiftCardTransactionbyID");
      }

      let pathParams = {
        'giftCardID': giftCardID,
        'transactionID': transactionID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response5;
      return this.apiClient.callApi(
        '/giftcards/{giftCardID}/transactions/{transactionID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGiftCardTransactions operation.
     * @callback module:api/TransactionApi~getGiftCardTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Response3>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get GiftCard Transactions
     * Returns all transaction of a giftcard.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} giftCardID 
     * @param {module:api/TransactionApi~getGiftCardTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Response3>}
     */
    getGiftCardTransactions(accept, contentType, giftCardID, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getGiftCardTransactions");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getGiftCardTransactions");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling getGiftCardTransactions");
      }

      let pathParams = {
        'giftCardID': giftCardID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Response3];
      return this.apiClient.callApi(
        '/giftcards/{giftCardID}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionAuthorizations operation.
     * @callback module:api/TransactionApi~getTransactionAuthorizationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response6} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transaction Authorizations
     * Returns the giftcard transaction authorizations.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} giftCardID 
     * @param {String} transactionID 
     * @param {module:api/TransactionApi~getTransactionAuthorizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response6}
     */
    getTransactionAuthorizations(accept, contentType, giftCardID, transactionID, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getTransactionAuthorizations");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getTransactionAuthorizations");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling getTransactionAuthorizations");
      }
      // verify the required parameter 'transactionID' is set
      if (transactionID === undefined || transactionID === null) {
        throw new Error("Missing the required parameter 'transactionID' when calling getTransactionAuthorizations");
      }

      let pathParams = {
        'giftCardID': giftCardID,
        'transactionID': transactionID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response6;
      return this.apiClient.callApi(
        '/giftcards/{giftCardID}/transactions/{transactionID}/authorization', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionCancellations operation.
     * @callback module:api/TransactionApi~getTransactionCancellationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Response7>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transaction Cancellations
     * Returns the giftcard transaction cancellations.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} giftCardID 
     * @param {String} transactionID 
     * @param {module:api/TransactionApi~getTransactionCancellationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Response7>}
     */
    getTransactionCancellations(accept, contentType, giftCardID, transactionID, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getTransactionCancellations");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getTransactionCancellations");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling getTransactionCancellations");
      }
      // verify the required parameter 'transactionID' is set
      if (transactionID === undefined || transactionID === null) {
        throw new Error("Missing the required parameter 'transactionID' when calling getTransactionCancellations");
      }

      let pathParams = {
        'giftCardID': giftCardID,
        'transactionID': transactionID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Response7];
      return this.apiClient.callApi(
        '/giftcards/{giftCardID}/transactions/{transactionID}/cancellations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionSettlements operation.
     * @callback module:api/TransactionApi~getTransactionSettlementsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Response6>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Transaction Settlements
     * Returns the giftcard transaction settlements.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} giftCardID 
     * @param {String} transactionID 
     * @param {module:api/TransactionApi~getTransactionSettlementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Response6>}
     */
    getTransactionSettlements(accept, contentType, giftCardID, transactionID, callback) {
      let postBody = null;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getTransactionSettlements");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getTransactionSettlements");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling getTransactionSettlements");
      }
      // verify the required parameter 'transactionID' is set
      if (transactionID === undefined || transactionID === null) {
        throw new Error("Missing the required parameter 'transactionID' when calling getTransactionSettlements");
      }

      let pathParams = {
        'giftCardID': giftCardID,
        'transactionID': transactionID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Response6];
      return this.apiClient.callApi(
        '/giftcards/{giftCardID}/transactions/{transactionID}/settlements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the settleGiftCardTransaction operation.
     * @callback module:api/TransactionApi~settleGiftCardTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response6} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Settle GiftCard Transaction
     * Creates a giftcard transaction settlement.
     * @param {String} accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param {String} contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param {String} giftCardID 
     * @param {String} transactionID 
     * @param {module:model/SettleGiftCardTransactionRequest} settleGiftCardTransactionRequest 
     * @param {module:api/TransactionApi~settleGiftCardTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response6}
     */
    settleGiftCardTransaction(accept, contentType, giftCardID, transactionID, settleGiftCardTransactionRequest, callback) {
      let postBody = settleGiftCardTransactionRequest;
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling settleGiftCardTransaction");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling settleGiftCardTransaction");
      }
      // verify the required parameter 'giftCardID' is set
      if (giftCardID === undefined || giftCardID === null) {
        throw new Error("Missing the required parameter 'giftCardID' when calling settleGiftCardTransaction");
      }
      // verify the required parameter 'transactionID' is set
      if (transactionID === undefined || transactionID === null) {
        throw new Error("Missing the required parameter 'transactionID' when calling settleGiftCardTransaction");
      }
      // verify the required parameter 'settleGiftCardTransactionRequest' is set
      if (settleGiftCardTransactionRequest === undefined || settleGiftCardTransactionRequest === null) {
        throw new Error("Missing the required parameter 'settleGiftCardTransactionRequest' when calling settleGiftCardTransaction");
      }

      let pathParams = {
        'giftCardID': giftCardID,
        'transactionID': transactionID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': accept,
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response6;
      return this.apiClient.callApi(
        '/giftcards/{giftCardID}/transactions/{transactionID}/settlements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
