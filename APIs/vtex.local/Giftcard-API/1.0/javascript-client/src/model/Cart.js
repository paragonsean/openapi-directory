/**
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Item from './Item';

/**
 * The Cart model module.
 * @module model/Cart
 * @version 1.0
 */
class Cart {
    /**
     * Constructs a new <code>Cart</code>.
     * @alias module:model/Cart
     * @param discounts {Number} 
     * @param grandTotal {Number} 
     * @param items {Array.<module:model/Item>} 
     * @param itemsTotal {Number} 
     * @param redemptionCode {String} 
     * @param relationName {String} 
     * @param shipping {Number} 
     * @param taxes {Number} 
     */
    constructor(discounts, grandTotal, items, itemsTotal, redemptionCode, relationName, shipping, taxes) { 
        
        Cart.initialize(this, discounts, grandTotal, items, itemsTotal, redemptionCode, relationName, shipping, taxes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, discounts, grandTotal, items, itemsTotal, redemptionCode, relationName, shipping, taxes) { 
        obj['discounts'] = discounts || 0;
        obj['grandTotal'] = grandTotal || 122;
        obj['items'] = items;
        obj['itemsTotal'] = itemsTotal || 100;
        obj['redemptionCode'] = redemptionCode || 'example code';
        obj['relationName'] = relationName || 'insert name here';
        obj['shipping'] = shipping || 0;
        obj['taxes'] = taxes || 12;
    }

    /**
     * Constructs a <code>Cart</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cart} obj Optional instance to populate.
     * @return {module:model/Cart} The populated <code>Cart</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cart();

            if (data.hasOwnProperty('discounts')) {
                obj['discounts'] = ApiClient.convertToType(data['discounts'], 'Number');
            }
            if (data.hasOwnProperty('grandTotal')) {
                obj['grandTotal'] = ApiClient.convertToType(data['grandTotal'], 'Number');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Item]);
            }
            if (data.hasOwnProperty('itemsTotal')) {
                obj['itemsTotal'] = ApiClient.convertToType(data['itemsTotal'], 'Number');
            }
            if (data.hasOwnProperty('redemptionCode')) {
                obj['redemptionCode'] = ApiClient.convertToType(data['redemptionCode'], 'String');
            }
            if (data.hasOwnProperty('relationName')) {
                obj['relationName'] = ApiClient.convertToType(data['relationName'], 'String');
            }
            if (data.hasOwnProperty('shipping')) {
                obj['shipping'] = ApiClient.convertToType(data['shipping'], 'Number');
            }
            if (data.hasOwnProperty('taxes')) {
                obj['taxes'] = ApiClient.convertToType(data['taxes'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cart</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cart</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Cart.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Item.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['redemptionCode'] && !(typeof data['redemptionCode'] === 'string' || data['redemptionCode'] instanceof String)) {
            throw new Error("Expected the field `redemptionCode` to be a primitive type in the JSON string but got " + data['redemptionCode']);
        }
        // ensure the json data is a string
        if (data['relationName'] && !(typeof data['relationName'] === 'string' || data['relationName'] instanceof String)) {
            throw new Error("Expected the field `relationName` to be a primitive type in the JSON string but got " + data['relationName']);
        }

        return true;
    }


}

Cart.RequiredProperties = ["discounts", "grandTotal", "items", "itemsTotal", "redemptionCode", "relationName", "shipping", "taxes"];

/**
 * @member {Number} discounts
 * @default 0
 */
Cart.prototype['discounts'] = 0;

/**
 * @member {Number} grandTotal
 * @default 122
 */
Cart.prototype['grandTotal'] = 122;

/**
 * 
 * @member {Array.<module:model/Item>} items
 */
Cart.prototype['items'] = undefined;

/**
 * @member {Number} itemsTotal
 * @default 100
 */
Cart.prototype['itemsTotal'] = 100;

/**
 * @member {String} redemptionCode
 * @default 'example code'
 */
Cart.prototype['redemptionCode'] = 'example code';

/**
 * @member {String} relationName
 * @default 'insert name here'
 */
Cart.prototype['relationName'] = 'insert name here';

/**
 * @member {Number} shipping
 * @default 0
 */
Cart.prototype['shipping'] = 0;

/**
 * @member {Number} taxes
 * @default 12
 */
Cart.prototype['taxes'] = 12;






export default Cart;

