/**
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateGiftCardRequest model module.
 * @module model/CreateGiftCardRequest
 * @version 1.0
 */
class CreateGiftCardRequest {
    /**
     * Constructs a new <code>CreateGiftCardRequest</code>.
     * @alias module:model/CreateGiftCardRequest
     * @param caption {String} The caption of the Giftcard.
     * @param expiringDate {String} It must be in the format `YYYY-MM-DDThh:mm:ss.fff`.
     * @param profileId {String} The client's ID.
     * @param relationName {String} Represents the relationship between the client and the store.
     */
    constructor(caption, expiringDate, profileId, relationName) { 
        
        CreateGiftCardRequest.initialize(this, caption, expiringDate, profileId, relationName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, caption, expiringDate, profileId, relationName) { 
        obj['caption'] = caption;
        obj['expiringDate'] = expiringDate;
        obj['profileId'] = profileId;
        obj['relationName'] = relationName;
    }

    /**
     * Constructs a <code>CreateGiftCardRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateGiftCardRequest} obj Optional instance to populate.
     * @return {module:model/CreateGiftCardRequest} The populated <code>CreateGiftCardRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateGiftCardRequest();

            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('expiringDate')) {
                obj['expiringDate'] = ApiClient.convertToType(data['expiringDate'], 'String');
            }
            if (data.hasOwnProperty('multipleCredits')) {
                obj['multipleCredits'] = ApiClient.convertToType(data['multipleCredits'], 'Boolean');
            }
            if (data.hasOwnProperty('multipleRedemptions')) {
                obj['multipleRedemptions'] = ApiClient.convertToType(data['multipleRedemptions'], 'Boolean');
            }
            if (data.hasOwnProperty('profileId')) {
                obj['profileId'] = ApiClient.convertToType(data['profileId'], 'String');
            }
            if (data.hasOwnProperty('relationName')) {
                obj['relationName'] = ApiClient.convertToType(data['relationName'], 'String');
            }
            if (data.hasOwnProperty('restrictedToOwner')) {
                obj['restrictedToOwner'] = ApiClient.convertToType(data['restrictedToOwner'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateGiftCardRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateGiftCardRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateGiftCardRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['caption'] && !(typeof data['caption'] === 'string' || data['caption'] instanceof String)) {
            throw new Error("Expected the field `caption` to be a primitive type in the JSON string but got " + data['caption']);
        }
        // ensure the json data is a string
        if (data['expiringDate'] && !(typeof data['expiringDate'] === 'string' || data['expiringDate'] instanceof String)) {
            throw new Error("Expected the field `expiringDate` to be a primitive type in the JSON string but got " + data['expiringDate']);
        }
        // ensure the json data is a string
        if (data['profileId'] && !(typeof data['profileId'] === 'string' || data['profileId'] instanceof String)) {
            throw new Error("Expected the field `profileId` to be a primitive type in the JSON string but got " + data['profileId']);
        }
        // ensure the json data is a string
        if (data['relationName'] && !(typeof data['relationName'] === 'string' || data['relationName'] instanceof String)) {
            throw new Error("Expected the field `relationName` to be a primitive type in the JSON string but got " + data['relationName']);
        }

        return true;
    }


}

CreateGiftCardRequest.RequiredProperties = ["caption", "expiringDate", "profileId", "relationName"];

/**
 * The caption of the Giftcard.
 * @member {String} caption
 */
CreateGiftCardRequest.prototype['caption'] = undefined;

/**
 * It must be in the format `YYYY-MM-DDThh:mm:ss.fff`.
 * @member {String} expiringDate
 */
CreateGiftCardRequest.prototype['expiringDate'] = undefined;

/**
 * The Giftcard balance can be changed.
 * @member {Boolean} multipleCredits
 */
CreateGiftCardRequest.prototype['multipleCredits'] = undefined;

/**
 * The Giftcard can be used to make new purchases until its value is completely used.
 * @member {Boolean} multipleRedemptions
 */
CreateGiftCardRequest.prototype['multipleRedemptions'] = undefined;

/**
 * The client's ID.
 * @member {String} profileId
 */
CreateGiftCardRequest.prototype['profileId'] = undefined;

/**
 * Represents the relationship between the client and the store.
 * @member {String} relationName
 */
CreateGiftCardRequest.prototype['relationName'] = undefined;

/**
 * The Giftcard can only be used for a specified client's ID.
 * @member {Boolean} restrictedToOwner
 */
CreateGiftCardRequest.prototype['restrictedToOwner'] = undefined;






export default CreateGiftCardRequest;

