/**
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cart1 from './Cart1';
import ClientProfile from './ClientProfile';
import Shipping from './Shipping';

/**
 * The OrderInfo model module.
 * @module model/OrderInfo
 * @version 1.0
 */
class OrderInfo {
    /**
     * Constructs a new <code>OrderInfo</code>.
     * @alias module:model/OrderInfo
     */
    constructor() { 
        
        OrderInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['orderId'] = 'v5006';
        obj['sequence'] = 5006128;
    }

    /**
     * Constructs a <code>OrderInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderInfo} obj Optional instance to populate.
     * @return {module:model/OrderInfo} The populated <code>OrderInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderInfo();

            if (data.hasOwnProperty('cart')) {
                obj['cart'] = Cart1.constructFromObject(data['cart']);
            }
            if (data.hasOwnProperty('clientProfile')) {
                obj['clientProfile'] = ClientProfile.constructFromObject(data['clientProfile']);
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'Number');
            }
            if (data.hasOwnProperty('shipping')) {
                obj['shipping'] = Shipping.constructFromObject(data['shipping']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cart`
        if (data['cart']) { // data not null
          Cart1.validateJSON(data['cart']);
        }
        // validate the optional field `clientProfile`
        if (data['clientProfile']) { // data not null
          ClientProfile.validateJSON(data['clientProfile']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // validate the optional field `shipping`
        if (data['shipping']) { // data not null
          Shipping.validateJSON(data['shipping']);
        }

        return true;
    }


}



/**
 * @member {module:model/Cart1} cart
 */
OrderInfo.prototype['cart'] = undefined;

/**
 * @member {module:model/ClientProfile} clientProfile
 */
OrderInfo.prototype['clientProfile'] = undefined;

/**
 * @member {String} orderId
 * @default 'v5006'
 */
OrderInfo.prototype['orderId'] = 'v5006';

/**
 * @member {Number} sequence
 * @default 5006128
 */
OrderInfo.prototype['sequence'] = 5006128;

/**
 * @member {module:model/Shipping} shipping
 */
OrderInfo.prototype['shipping'] = undefined;






export default OrderInfo;

