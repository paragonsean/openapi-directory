/**
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransactionApi_H
#define OAI_OAITransactionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancelGiftCardTransactionRequest.h"
#include "OAICreateGiftCardTransactionRequest.h"
#include "OAIResponse3.h"
#include "OAIResponse5.h"
#include "OAIResponse6.h"
#include "OAIResponse7.h"
#include "OAISettleGiftCardTransactionRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransactionApi : public QObject {
    Q_OBJECT

public:
    OAITransactionApi(const int timeOut = 0);
    ~OAITransactionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  gift_card_id QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  oai_cancel_gift_card_transaction_request OAICancelGiftCardTransactionRequest [required]
    */
    virtual void cancelGiftCardTransaction(const QString &accept, const QString &content_type, const QString &gift_card_id, const QString &transaction_id, const OAICancelGiftCardTransactionRequest &oai_cancel_gift_card_transaction_request);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  gift_card_id QString [required]
    * @param[in]  oai_create_gift_card_transaction_request OAICreateGiftCardTransactionRequest [optional]
    */
    virtual void createGiftCardTransaction(const QString &accept, const QString &content_type, const QString &gift_card_id, const ::OpenAPI::OptionalParam<OAICreateGiftCardTransactionRequest> &oai_create_gift_card_transaction_request = ::OpenAPI::OptionalParam<OAICreateGiftCardTransactionRequest>());

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  gift_card_id QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void getGiftCardTransactionbyID(const QString &accept, const QString &content_type, const QString &gift_card_id, const QString &transaction_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  gift_card_id QString [required]
    */
    virtual void getGiftCardTransactions(const QString &accept, const QString &content_type, const QString &gift_card_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  gift_card_id QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void getTransactionAuthorizations(const QString &accept, const QString &content_type, const QString &gift_card_id, const QString &transaction_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  gift_card_id QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void getTransactionCancellations(const QString &accept, const QString &content_type, const QString &gift_card_id, const QString &transaction_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  gift_card_id QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void getTransactionSettlements(const QString &accept, const QString &content_type, const QString &gift_card_id, const QString &transaction_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  gift_card_id QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  oai_settle_gift_card_transaction_request OAISettleGiftCardTransactionRequest [required]
    */
    virtual void settleGiftCardTransaction(const QString &accept, const QString &content_type, const QString &gift_card_id, const QString &transaction_id, const OAISettleGiftCardTransactionRequest &oai_settle_gift_card_transaction_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelGiftCardTransactionCallback(OAIHttpRequestWorker *worker);
    void createGiftCardTransactionCallback(OAIHttpRequestWorker *worker);
    void getGiftCardTransactionbyIDCallback(OAIHttpRequestWorker *worker);
    void getGiftCardTransactionsCallback(OAIHttpRequestWorker *worker);
    void getTransactionAuthorizationsCallback(OAIHttpRequestWorker *worker);
    void getTransactionCancellationsCallback(OAIHttpRequestWorker *worker);
    void getTransactionSettlementsCallback(OAIHttpRequestWorker *worker);
    void settleGiftCardTransactionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelGiftCardTransactionSignal(OAIResponse6 summary);
    void createGiftCardTransactionSignal(OAIResponse3 summary);
    void getGiftCardTransactionbyIDSignal(OAIResponse5 summary);
    void getGiftCardTransactionsSignal(QList<OAIResponse3> summary);
    void getTransactionAuthorizationsSignal(OAIResponse6 summary);
    void getTransactionCancellationsSignal(QList<OAIResponse7> summary);
    void getTransactionSettlementsSignal(QList<OAIResponse6> summary);
    void settleGiftCardTransactionSignal(OAIResponse6 summary);


    void cancelGiftCardTransactionSignalFull(OAIHttpRequestWorker *worker, OAIResponse6 summary);
    void createGiftCardTransactionSignalFull(OAIHttpRequestWorker *worker, OAIResponse3 summary);
    void getGiftCardTransactionbyIDSignalFull(OAIHttpRequestWorker *worker, OAIResponse5 summary);
    void getGiftCardTransactionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIResponse3> summary);
    void getTransactionAuthorizationsSignalFull(OAIHttpRequestWorker *worker, OAIResponse6 summary);
    void getTransactionCancellationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIResponse7> summary);
    void getTransactionSettlementsSignalFull(OAIHttpRequestWorker *worker, QList<OAIResponse6> summary);
    void settleGiftCardTransactionSignalFull(OAIHttpRequestWorker *worker, OAIResponse6 summary);

    Q_DECL_DEPRECATED_X("Use cancelGiftCardTransactionSignalError() instead")
    void cancelGiftCardTransactionSignalE(OAIResponse6 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelGiftCardTransactionSignalError(OAIResponse6 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGiftCardTransactionSignalError() instead")
    void createGiftCardTransactionSignalE(OAIResponse3 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGiftCardTransactionSignalError(OAIResponse3 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGiftCardTransactionbyIDSignalError() instead")
    void getGiftCardTransactionbyIDSignalE(OAIResponse5 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGiftCardTransactionbyIDSignalError(OAIResponse5 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGiftCardTransactionsSignalError() instead")
    void getGiftCardTransactionsSignalE(QList<OAIResponse3> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGiftCardTransactionsSignalError(QList<OAIResponse3> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionAuthorizationsSignalError() instead")
    void getTransactionAuthorizationsSignalE(OAIResponse6 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionAuthorizationsSignalError(OAIResponse6 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionCancellationsSignalError() instead")
    void getTransactionCancellationsSignalE(QList<OAIResponse7> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionCancellationsSignalError(QList<OAIResponse7> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionSettlementsSignalError() instead")
    void getTransactionSettlementsSignalE(QList<OAIResponse6> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionSettlementsSignalError(QList<OAIResponse6> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settleGiftCardTransactionSignalError() instead")
    void settleGiftCardTransactionSignalE(OAIResponse6 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void settleGiftCardTransactionSignalError(OAIResponse6 summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelGiftCardTransactionSignalErrorFull() instead")
    void cancelGiftCardTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelGiftCardTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGiftCardTransactionSignalErrorFull() instead")
    void createGiftCardTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGiftCardTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGiftCardTransactionbyIDSignalErrorFull() instead")
    void getGiftCardTransactionbyIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGiftCardTransactionbyIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGiftCardTransactionsSignalErrorFull() instead")
    void getGiftCardTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGiftCardTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionAuthorizationsSignalErrorFull() instead")
    void getTransactionAuthorizationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionAuthorizationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionCancellationsSignalErrorFull() instead")
    void getTransactionCancellationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionCancellationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionSettlementsSignalErrorFull() instead")
    void getTransactionSettlementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionSettlementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use settleGiftCardTransactionSignalErrorFull() instead")
    void settleGiftCardTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void settleGiftCardTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
