/**
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetGiftCardusingJSONRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetGiftCardusingJSONRequest::OAIGetGiftCardusingJSONRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetGiftCardusingJSONRequest::OAIGetGiftCardusingJSONRequest() {
    this->initializeModel();
}

OAIGetGiftCardusingJSONRequest::~OAIGetGiftCardusingJSONRequest() {}

void OAIGetGiftCardusingJSONRequest::initializeModel() {

    m_cart_isSet = false;
    m_cart_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;
}

void OAIGetGiftCardusingJSONRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetGiftCardusingJSONRequest::fromJsonObject(QJsonObject json) {

    m_cart_isValid = ::OpenAPI::fromJsonValue(m_cart, json[QString("cart")]);
    m_cart_isSet = !json[QString("cart")].isNull() && m_cart_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;
}

QString OAIGetGiftCardusingJSONRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetGiftCardusingJSONRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cart.isSet()) {
        obj.insert(QString("cart"), ::OpenAPI::toJsonValue(m_cart));
    }
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    return obj;
}

OAICart OAIGetGiftCardusingJSONRequest::getCart() const {
    return m_cart;
}
void OAIGetGiftCardusingJSONRequest::setCart(const OAICart &cart) {
    m_cart = cart;
    m_cart_isSet = true;
}

bool OAIGetGiftCardusingJSONRequest::is_cart_Set() const{
    return m_cart_isSet;
}

bool OAIGetGiftCardusingJSONRequest::is_cart_Valid() const{
    return m_cart_isValid;
}

OAIClient OAIGetGiftCardusingJSONRequest::getClient() const {
    return m_client;
}
void OAIGetGiftCardusingJSONRequest::setClient(const OAIClient &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIGetGiftCardusingJSONRequest::is_client_Set() const{
    return m_client_isSet;
}

bool OAIGetGiftCardusingJSONRequest::is_client_Valid() const{
    return m_client_isValid;
}

bool OAIGetGiftCardusingJSONRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetGiftCardusingJSONRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cart_isValid && m_client_isValid && true;
}

} // namespace OpenAPI
