/**
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGiftCardApi_H
#define OAI_OAIGiftCardApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateGiftCardRequest.h"
#include "OAIGetGiftCardusingJSONRequest.h"
#include "OAIResponse.h"
#include "OAIResponse2.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGiftCardApi : public QObject {
    Q_OBJECT

public:
    OAIGiftCardApi(const int timeOut = 0);
    ~OAIGiftCardApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  x_vtex_api_app_key QString [required]
    * @param[in]  x_vtex_api_app_token QString [required]
    * @param[in]  oai_create_gift_card_request OAICreateGiftCardRequest [required]
    */
    virtual void createGiftCard(const QString &content_type, const QString &accept, const QString &x_vtex_api_app_key, const QString &x_vtex_api_app_token, const OAICreateGiftCardRequest &oai_create_gift_card_request);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  gift_card_id QString [required]
    */
    virtual void getGiftCardbyID(const QString &accept, const QString &content_type, const QString &gift_card_id);

    /**
    * @param[in]  accept QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  oai_get_gift_cardusing_json_request OAIGetGiftCardusingJSONRequest [required]
    * @param[in]  rest_range QString [optional]
    */
    virtual void getGiftCardusingJSON(const QString &accept, const QString &content_type, const OAIGetGiftCardusingJSONRequest &oai_get_gift_cardusing_json_request, const ::OpenAPI::OptionalParam<QString> &rest_range = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createGiftCardCallback(OAIHttpRequestWorker *worker);
    void getGiftCardbyIDCallback(OAIHttpRequestWorker *worker);
    void getGiftCardusingJSONCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createGiftCardSignal(OAIResponse summary);
    void getGiftCardbyIDSignal(OAIResponse summary);
    void getGiftCardusingJSONSignal(OAIResponse2 summary);


    void createGiftCardSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void getGiftCardbyIDSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void getGiftCardusingJSONSignalFull(OAIHttpRequestWorker *worker, OAIResponse2 summary);

    Q_DECL_DEPRECATED_X("Use createGiftCardSignalError() instead")
    void createGiftCardSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGiftCardSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGiftCardbyIDSignalError() instead")
    void getGiftCardbyIDSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGiftCardbyIDSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGiftCardusingJSONSignalError() instead")
    void getGiftCardusingJSONSignalE(OAIResponse2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGiftCardusingJSONSignalError(OAIResponse2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createGiftCardSignalErrorFull() instead")
    void createGiftCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGiftCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGiftCardbyIDSignalErrorFull() instead")
    void getGiftCardbyIDSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGiftCardbyIDSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGiftCardusingJSONSignalErrorFull() instead")
    void getGiftCardusingJSONSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGiftCardusingJSONSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
