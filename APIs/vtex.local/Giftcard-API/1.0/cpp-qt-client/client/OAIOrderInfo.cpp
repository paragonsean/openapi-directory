/**
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderInfo::OAIOrderInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderInfo::OAIOrderInfo() {
    this->initializeModel();
}

OAIOrderInfo::~OAIOrderInfo() {}

void OAIOrderInfo::initializeModel() {

    m_cart_isSet = false;
    m_cart_isValid = false;

    m_client_profile_isSet = false;
    m_client_profile_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;
}

void OAIOrderInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderInfo::fromJsonObject(QJsonObject json) {

    m_cart_isValid = ::OpenAPI::fromJsonValue(m_cart, json[QString("cart")]);
    m_cart_isSet = !json[QString("cart")].isNull() && m_cart_isValid;

    m_client_profile_isValid = ::OpenAPI::fromJsonValue(m_client_profile, json[QString("clientProfile")]);
    m_client_profile_isSet = !json[QString("clientProfile")].isNull() && m_client_profile_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;
}

QString OAIOrderInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_cart.isSet()) {
        obj.insert(QString("cart"), ::OpenAPI::toJsonValue(m_cart));
    }
    if (m_client_profile.isSet()) {
        obj.insert(QString("clientProfile"), ::OpenAPI::toJsonValue(m_client_profile));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_shipping.isSet()) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    return obj;
}

OAICart1 OAIOrderInfo::getCart() const {
    return m_cart;
}
void OAIOrderInfo::setCart(const OAICart1 &cart) {
    m_cart = cart;
    m_cart_isSet = true;
}

bool OAIOrderInfo::is_cart_Set() const{
    return m_cart_isSet;
}

bool OAIOrderInfo::is_cart_Valid() const{
    return m_cart_isValid;
}

OAIClientProfile OAIOrderInfo::getClientProfile() const {
    return m_client_profile;
}
void OAIOrderInfo::setClientProfile(const OAIClientProfile &client_profile) {
    m_client_profile = client_profile;
    m_client_profile_isSet = true;
}

bool OAIOrderInfo::is_client_profile_Set() const{
    return m_client_profile_isSet;
}

bool OAIOrderInfo::is_client_profile_Valid() const{
    return m_client_profile_isValid;
}

QString OAIOrderInfo::getOrderId() const {
    return m_order_id;
}
void OAIOrderInfo::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIOrderInfo::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIOrderInfo::is_order_id_Valid() const{
    return m_order_id_isValid;
}

qint32 OAIOrderInfo::getSequence() const {
    return m_sequence;
}
void OAIOrderInfo::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIOrderInfo::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIOrderInfo::is_sequence_Valid() const{
    return m_sequence_isValid;
}

OAIShipping OAIOrderInfo::getShipping() const {
    return m_shipping;
}
void OAIOrderInfo::setShipping(const OAIShipping &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAIOrderInfo::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAIOrderInfo::is_shipping_Valid() const{
    return m_shipping_isValid;
}

bool OAIOrderInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cart.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
