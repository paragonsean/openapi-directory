/**
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse::OAIResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse::OAIResponse() {
    this->initializeModel();
}

OAIResponse::~OAIResponse() {}

void OAIResponse::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_emission_date_isSet = false;
    m_emission_date_isValid = false;

    m_expiring_date_isSet = false;
    m_expiring_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_redemption_code_isSet = false;
    m_redemption_code_isValid = false;

    m_redemption_token_isSet = false;
    m_redemption_token_isValid = false;

    m_relation_name_isSet = false;
    m_relation_name_isValid = false;

    m_transactions_isSet = false;
    m_transactions_isValid = false;
}

void OAIResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_emission_date_isValid = ::OpenAPI::fromJsonValue(m_emission_date, json[QString("emissionDate")]);
    m_emission_date_isSet = !json[QString("emissionDate")].isNull() && m_emission_date_isValid;

    m_expiring_date_isValid = ::OpenAPI::fromJsonValue(m_expiring_date, json[QString("expiringDate")]);
    m_expiring_date_isSet = !json[QString("expiringDate")].isNull() && m_expiring_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_redemption_code_isValid = ::OpenAPI::fromJsonValue(m_redemption_code, json[QString("redemptionCode")]);
    m_redemption_code_isSet = !json[QString("redemptionCode")].isNull() && m_redemption_code_isValid;

    m_redemption_token_isValid = ::OpenAPI::fromJsonValue(m_redemption_token, json[QString("redemptionToken")]);
    m_redemption_token_isSet = !json[QString("redemptionToken")].isNull() && m_redemption_token_isValid;

    m_relation_name_isValid = ::OpenAPI::fromJsonValue(m_relation_name, json[QString("relationName")]);
    m_relation_name_isSet = !json[QString("relationName")].isNull() && m_relation_name_isValid;

    m_transactions_isValid = ::OpenAPI::fromJsonValue(m_transactions, json[QString("transactions")]);
    m_transactions_isSet = !json[QString("transactions")].isNull() && m_transactions_isValid;
}

QString OAIResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_emission_date_isSet) {
        obj.insert(QString("emissionDate"), ::OpenAPI::toJsonValue(m_emission_date));
    }
    if (m_expiring_date_isSet) {
        obj.insert(QString("expiringDate"), ::OpenAPI::toJsonValue(m_expiring_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_redemption_code_isSet) {
        obj.insert(QString("redemptionCode"), ::OpenAPI::toJsonValue(m_redemption_code));
    }
    if (m_redemption_token_isSet) {
        obj.insert(QString("redemptionToken"), ::OpenAPI::toJsonValue(m_redemption_token));
    }
    if (m_relation_name_isSet) {
        obj.insert(QString("relationName"), ::OpenAPI::toJsonValue(m_relation_name));
    }
    if (m_transactions.isSet()) {
        obj.insert(QString("transactions"), ::OpenAPI::toJsonValue(m_transactions));
    }
    return obj;
}

qint32 OAIResponse::getBalance() const {
    return m_balance;
}
void OAIResponse::setBalance(const qint32 &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIResponse::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIResponse::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAIResponse::getCaption() const {
    return m_caption;
}
void OAIResponse::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIResponse::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIResponse::is_caption_Valid() const{
    return m_caption_isValid;
}

QString OAIResponse::getEmissionDate() const {
    return m_emission_date;
}
void OAIResponse::setEmissionDate(const QString &emission_date) {
    m_emission_date = emission_date;
    m_emission_date_isSet = true;
}

bool OAIResponse::is_emission_date_Set() const{
    return m_emission_date_isSet;
}

bool OAIResponse::is_emission_date_Valid() const{
    return m_emission_date_isValid;
}

QString OAIResponse::getExpiringDate() const {
    return m_expiring_date;
}
void OAIResponse::setExpiringDate(const QString &expiring_date) {
    m_expiring_date = expiring_date;
    m_expiring_date_isSet = true;
}

bool OAIResponse::is_expiring_date_Set() const{
    return m_expiring_date_isSet;
}

bool OAIResponse::is_expiring_date_Valid() const{
    return m_expiring_date_isValid;
}

QString OAIResponse::getId() const {
    return m_id;
}
void OAIResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIResponse::getRedemptionCode() const {
    return m_redemption_code;
}
void OAIResponse::setRedemptionCode(const QString &redemption_code) {
    m_redemption_code = redemption_code;
    m_redemption_code_isSet = true;
}

bool OAIResponse::is_redemption_code_Set() const{
    return m_redemption_code_isSet;
}

bool OAIResponse::is_redemption_code_Valid() const{
    return m_redemption_code_isValid;
}

QString OAIResponse::getRedemptionToken() const {
    return m_redemption_token;
}
void OAIResponse::setRedemptionToken(const QString &redemption_token) {
    m_redemption_token = redemption_token;
    m_redemption_token_isSet = true;
}

bool OAIResponse::is_redemption_token_Set() const{
    return m_redemption_token_isSet;
}

bool OAIResponse::is_redemption_token_Valid() const{
    return m_redemption_token_isValid;
}

QString OAIResponse::getRelationName() const {
    return m_relation_name;
}
void OAIResponse::setRelationName(const QString &relation_name) {
    m_relation_name = relation_name;
    m_relation_name_isSet = true;
}

bool OAIResponse::is_relation_name_Set() const{
    return m_relation_name_isSet;
}

bool OAIResponse::is_relation_name_Valid() const{
    return m_relation_name_isValid;
}

OAITransactions OAIResponse::getTransactions() const {
    return m_transactions;
}
void OAIResponse::setTransactions(const OAITransactions &transactions) {
    m_transactions = transactions;
    m_transactions_isSet = true;
}

bool OAIResponse::is_transactions_Set() const{
    return m_transactions_isSet;
}

bool OAIResponse::is_transactions_Valid() const{
    return m_transactions_isValid;
}

bool OAIResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_emission_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiring_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_balance_isValid && m_caption_isValid && m_emission_date_isValid && m_expiring_date_isValid && m_id_isValid && m_redemption_code_isValid && m_redemption_token_isValid && m_relation_name_isValid && m_transactions_isValid && true;
}

} // namespace OpenAPI
