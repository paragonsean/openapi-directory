/**
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICart::OAICart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICart::OAICart() {
    this->initializeModel();
}

OAICart::~OAICart() {}

void OAICart::initializeModel() {

    m_discounts_isSet = false;
    m_discounts_isValid = false;

    m_grand_total_isSet = false;
    m_grand_total_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_items_total_isSet = false;
    m_items_total_isValid = false;

    m_redemption_code_isSet = false;
    m_redemption_code_isValid = false;

    m_relation_name_isSet = false;
    m_relation_name_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_taxes_isSet = false;
    m_taxes_isValid = false;
}

void OAICart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICart::fromJsonObject(QJsonObject json) {

    m_discounts_isValid = ::OpenAPI::fromJsonValue(m_discounts, json[QString("discounts")]);
    m_discounts_isSet = !json[QString("discounts")].isNull() && m_discounts_isValid;

    m_grand_total_isValid = ::OpenAPI::fromJsonValue(m_grand_total, json[QString("grandTotal")]);
    m_grand_total_isSet = !json[QString("grandTotal")].isNull() && m_grand_total_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_items_total_isValid = ::OpenAPI::fromJsonValue(m_items_total, json[QString("itemsTotal")]);
    m_items_total_isSet = !json[QString("itemsTotal")].isNull() && m_items_total_isValid;

    m_redemption_code_isValid = ::OpenAPI::fromJsonValue(m_redemption_code, json[QString("redemptionCode")]);
    m_redemption_code_isSet = !json[QString("redemptionCode")].isNull() && m_redemption_code_isValid;

    m_relation_name_isValid = ::OpenAPI::fromJsonValue(m_relation_name, json[QString("relationName")]);
    m_relation_name_isSet = !json[QString("relationName")].isNull() && m_relation_name_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_taxes_isValid = ::OpenAPI::fromJsonValue(m_taxes, json[QString("taxes")]);
    m_taxes_isSet = !json[QString("taxes")].isNull() && m_taxes_isValid;
}

QString OAICart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICart::asJsonObject() const {
    QJsonObject obj;
    if (m_discounts_isSet) {
        obj.insert(QString("discounts"), ::OpenAPI::toJsonValue(m_discounts));
    }
    if (m_grand_total_isSet) {
        obj.insert(QString("grandTotal"), ::OpenAPI::toJsonValue(m_grand_total));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_items_total_isSet) {
        obj.insert(QString("itemsTotal"), ::OpenAPI::toJsonValue(m_items_total));
    }
    if (m_redemption_code_isSet) {
        obj.insert(QString("redemptionCode"), ::OpenAPI::toJsonValue(m_redemption_code));
    }
    if (m_relation_name_isSet) {
        obj.insert(QString("relationName"), ::OpenAPI::toJsonValue(m_relation_name));
    }
    if (m_shipping_isSet) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_taxes_isSet) {
        obj.insert(QString("taxes"), ::OpenAPI::toJsonValue(m_taxes));
    }
    return obj;
}

qint32 OAICart::getDiscounts() const {
    return m_discounts;
}
void OAICart::setDiscounts(const qint32 &discounts) {
    m_discounts = discounts;
    m_discounts_isSet = true;
}

bool OAICart::is_discounts_Set() const{
    return m_discounts_isSet;
}

bool OAICart::is_discounts_Valid() const{
    return m_discounts_isValid;
}

double OAICart::getGrandTotal() const {
    return m_grand_total;
}
void OAICart::setGrandTotal(const double &grand_total) {
    m_grand_total = grand_total;
    m_grand_total_isSet = true;
}

bool OAICart::is_grand_total_Set() const{
    return m_grand_total_isSet;
}

bool OAICart::is_grand_total_Valid() const{
    return m_grand_total_isValid;
}

QList<OAIItem> OAICart::getItems() const {
    return m_items;
}
void OAICart::setItems(const QList<OAIItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAICart::is_items_Set() const{
    return m_items_isSet;
}

bool OAICart::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAICart::getItemsTotal() const {
    return m_items_total;
}
void OAICart::setItemsTotal(const qint32 &items_total) {
    m_items_total = items_total;
    m_items_total_isSet = true;
}

bool OAICart::is_items_total_Set() const{
    return m_items_total_isSet;
}

bool OAICart::is_items_total_Valid() const{
    return m_items_total_isValid;
}

QString OAICart::getRedemptionCode() const {
    return m_redemption_code;
}
void OAICart::setRedemptionCode(const QString &redemption_code) {
    m_redemption_code = redemption_code;
    m_redemption_code_isSet = true;
}

bool OAICart::is_redemption_code_Set() const{
    return m_redemption_code_isSet;
}

bool OAICart::is_redemption_code_Valid() const{
    return m_redemption_code_isValid;
}

QString OAICart::getRelationName() const {
    return m_relation_name;
}
void OAICart::setRelationName(const QString &relation_name) {
    m_relation_name = relation_name;
    m_relation_name_isSet = true;
}

bool OAICart::is_relation_name_Set() const{
    return m_relation_name_isSet;
}

bool OAICart::is_relation_name_Valid() const{
    return m_relation_name_isValid;
}

qint32 OAICart::getShipping() const {
    return m_shipping;
}
void OAICart::setShipping(const qint32 &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAICart::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAICart::is_shipping_Valid() const{
    return m_shipping_isValid;
}

qint32 OAICart::getTaxes() const {
    return m_taxes;
}
void OAICart::setTaxes(const qint32 &taxes) {
    m_taxes = taxes;
    m_taxes_isSet = true;
}

bool OAICart::is_taxes_Set() const{
    return m_taxes_isSet;
}

bool OAICart::is_taxes_Valid() const{
    return m_taxes_isValid;
}

bool OAICart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grand_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICart::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_discounts_isValid && m_grand_total_isValid && m_items_isValid && m_items_total_isValid && m_redemption_code_isValid && m_relation_name_isValid && m_shipping_isValid && m_taxes_isValid && true;
}

} // namespace OpenAPI
