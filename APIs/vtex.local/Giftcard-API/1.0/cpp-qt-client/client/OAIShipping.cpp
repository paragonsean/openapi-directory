/**
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShipping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShipping::OAIShipping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShipping::OAIShipping() {
    this->initializeModel();
}

OAIShipping::~OAIShipping() {}

void OAIShipping::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_complement_isSet = false;
    m_complement_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_neighborhood_isSet = false;
    m_neighborhood_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_receiver_name_isSet = false;
    m_receiver_name_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;
}

void OAIShipping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShipping::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_complement_isValid = ::OpenAPI::fromJsonValue(m_complement, json[QString("complement")]);
    m_complement_isSet = !json[QString("complement")].isNull() && m_complement_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_neighborhood_isValid = ::OpenAPI::fromJsonValue(m_neighborhood, json[QString("neighborhood")]);
    m_neighborhood_isSet = !json[QString("neighborhood")].isNull() && m_neighborhood_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_receiver_name_isValid = ::OpenAPI::fromJsonValue(m_receiver_name, json[QString("receiverName")]);
    m_receiver_name_isSet = !json[QString("receiverName")].isNull() && m_receiver_name_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;
}

QString OAIShipping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShipping::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_complement_isSet) {
        obj.insert(QString("complement"), ::OpenAPI::toJsonValue(m_complement));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_neighborhood_isSet) {
        obj.insert(QString("neighborhood"), ::OpenAPI::toJsonValue(m_neighborhood));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_receiver_name_isSet) {
        obj.insert(QString("receiverName"), ::OpenAPI::toJsonValue(m_receiver_name));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    return obj;
}

QString OAIShipping::getCity() const {
    return m_city;
}
void OAIShipping::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIShipping::is_city_Set() const{
    return m_city_isSet;
}

bool OAIShipping::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIShipping::getComplement() const {
    return m_complement;
}
void OAIShipping::setComplement(const QString &complement) {
    m_complement = complement;
    m_complement_isSet = true;
}

bool OAIShipping::is_complement_Set() const{
    return m_complement_isSet;
}

bool OAIShipping::is_complement_Valid() const{
    return m_complement_isValid;
}

QString OAIShipping::getCountry() const {
    return m_country;
}
void OAIShipping::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIShipping::is_country_Set() const{
    return m_country_isSet;
}

bool OAIShipping::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIShipping::getNeighborhood() const {
    return m_neighborhood;
}
void OAIShipping::setNeighborhood(const QString &neighborhood) {
    m_neighborhood = neighborhood;
    m_neighborhood_isSet = true;
}

bool OAIShipping::is_neighborhood_Set() const{
    return m_neighborhood_isSet;
}

bool OAIShipping::is_neighborhood_Valid() const{
    return m_neighborhood_isValid;
}

QString OAIShipping::getNumber() const {
    return m_number;
}
void OAIShipping::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIShipping::is_number_Set() const{
    return m_number_isSet;
}

bool OAIShipping::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIShipping::getPostalCode() const {
    return m_postal_code;
}
void OAIShipping::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIShipping::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIShipping::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIShipping::getReceiverName() const {
    return m_receiver_name;
}
void OAIShipping::setReceiverName(const QString &receiver_name) {
    m_receiver_name = receiver_name;
    m_receiver_name_isSet = true;
}

bool OAIShipping::is_receiver_name_Set() const{
    return m_receiver_name_isSet;
}

bool OAIShipping::is_receiver_name_Valid() const{
    return m_receiver_name_isValid;
}

QString OAIShipping::getReference() const {
    return m_reference;
}
void OAIShipping::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIShipping::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIShipping::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIShipping::getState() const {
    return m_state;
}
void OAIShipping::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIShipping::is_state_Set() const{
    return m_state_isSet;
}

bool OAIShipping::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIShipping::getStreet() const {
    return m_street;
}
void OAIShipping::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIShipping::is_street_Set() const{
    return m_street_isSet;
}

bool OAIShipping::is_street_Valid() const{
    return m_street_isValid;
}

bool OAIShipping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighborhood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShipping::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_city_isValid && m_complement_isValid && m_country_isValid && m_neighborhood_isValid && m_number_isValid && m_postal_code_isValid && m_receiver_name_isValid && m_reference_isValid && m_state_isValid && m_street_isValid && true;
}

} // namespace OpenAPI
