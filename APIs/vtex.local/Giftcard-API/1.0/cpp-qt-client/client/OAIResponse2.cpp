/**
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse2::OAIResponse2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse2::OAIResponse2() {
    this->initializeModel();
}

OAIResponse2::~OAIResponse2() {}

void OAIResponse2::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_paging_isSet = false;
    m_paging_isValid = false;
}

void OAIResponse2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse2::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_paging_isValid = ::OpenAPI::fromJsonValue(m_paging, json[QString("paging")]);
    m_paging_isSet = !json[QString("paging")].isNull() && m_paging_isValid;
}

QString OAIResponse2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse2::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_paging.isSet()) {
        obj.insert(QString("paging"), ::OpenAPI::toJsonValue(m_paging));
    }
    return obj;
}

QList<OAIItem1> OAIResponse2::getItems() const {
    return m_items;
}
void OAIResponse2::setItems(const QList<OAIItem1> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIResponse2::is_items_Set() const{
    return m_items_isSet;
}

bool OAIResponse2::is_items_Valid() const{
    return m_items_isValid;
}

OAIPaging OAIResponse2::getPaging() const {
    return m_paging;
}
void OAIResponse2::setPaging(const OAIPaging &paging) {
    m_paging = paging;
    m_paging_isSet = true;
}

bool OAIResponse2::is_paging_Set() const{
    return m_paging_isSet;
}

bool OAIResponse2::is_paging_Valid() const{
    return m_paging_isValid;
}

bool OAIResponse2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_paging.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_items_isValid && m_paging_isValid && true;
}

} // namespace OpenAPI
