/**
 * GiftCard API
 * >ℹ️ Onboarding guide  >  > Check the new [Payments onboarding guide](https://developers.vtex.com/docs/guides/payments-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Payments and is organized by focusing on the developer's journey.    The Gift Card is a payment method configured as a cash value associated with a client. It is used to grant a discount on the value of the order at the store.    > ⚠ A Gift Card works as a **payment method**, not a promotion.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGiftCardRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGiftCardRequest::OAICreateGiftCardRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGiftCardRequest::OAICreateGiftCardRequest() {
    this->initializeModel();
}

OAICreateGiftCardRequest::~OAICreateGiftCardRequest() {}

void OAICreateGiftCardRequest::initializeModel() {

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_expiring_date_isSet = false;
    m_expiring_date_isValid = false;

    m_multiple_credits_isSet = false;
    m_multiple_credits_isValid = false;

    m_multiple_redemptions_isSet = false;
    m_multiple_redemptions_isValid = false;

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;

    m_relation_name_isSet = false;
    m_relation_name_isValid = false;

    m_restricted_to_owner_isSet = false;
    m_restricted_to_owner_isValid = false;
}

void OAICreateGiftCardRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGiftCardRequest::fromJsonObject(QJsonObject json) {

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_expiring_date_isValid = ::OpenAPI::fromJsonValue(m_expiring_date, json[QString("expiringDate")]);
    m_expiring_date_isSet = !json[QString("expiringDate")].isNull() && m_expiring_date_isValid;

    m_multiple_credits_isValid = ::OpenAPI::fromJsonValue(m_multiple_credits, json[QString("multipleCredits")]);
    m_multiple_credits_isSet = !json[QString("multipleCredits")].isNull() && m_multiple_credits_isValid;

    m_multiple_redemptions_isValid = ::OpenAPI::fromJsonValue(m_multiple_redemptions, json[QString("multipleRedemptions")]);
    m_multiple_redemptions_isSet = !json[QString("multipleRedemptions")].isNull() && m_multiple_redemptions_isValid;

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("profileId")]);
    m_profile_id_isSet = !json[QString("profileId")].isNull() && m_profile_id_isValid;

    m_relation_name_isValid = ::OpenAPI::fromJsonValue(m_relation_name, json[QString("relationName")]);
    m_relation_name_isSet = !json[QString("relationName")].isNull() && m_relation_name_isValid;

    m_restricted_to_owner_isValid = ::OpenAPI::fromJsonValue(m_restricted_to_owner, json[QString("restrictedToOwner")]);
    m_restricted_to_owner_isSet = !json[QString("restrictedToOwner")].isNull() && m_restricted_to_owner_isValid;
}

QString OAICreateGiftCardRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGiftCardRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_expiring_date_isSet) {
        obj.insert(QString("expiringDate"), ::OpenAPI::toJsonValue(m_expiring_date));
    }
    if (m_multiple_credits_isSet) {
        obj.insert(QString("multipleCredits"), ::OpenAPI::toJsonValue(m_multiple_credits));
    }
    if (m_multiple_redemptions_isSet) {
        obj.insert(QString("multipleRedemptions"), ::OpenAPI::toJsonValue(m_multiple_redemptions));
    }
    if (m_profile_id_isSet) {
        obj.insert(QString("profileId"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    if (m_relation_name_isSet) {
        obj.insert(QString("relationName"), ::OpenAPI::toJsonValue(m_relation_name));
    }
    if (m_restricted_to_owner_isSet) {
        obj.insert(QString("restrictedToOwner"), ::OpenAPI::toJsonValue(m_restricted_to_owner));
    }
    return obj;
}

QString OAICreateGiftCardRequest::getCaption() const {
    return m_caption;
}
void OAICreateGiftCardRequest::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAICreateGiftCardRequest::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAICreateGiftCardRequest::is_caption_Valid() const{
    return m_caption_isValid;
}

QString OAICreateGiftCardRequest::getExpiringDate() const {
    return m_expiring_date;
}
void OAICreateGiftCardRequest::setExpiringDate(const QString &expiring_date) {
    m_expiring_date = expiring_date;
    m_expiring_date_isSet = true;
}

bool OAICreateGiftCardRequest::is_expiring_date_Set() const{
    return m_expiring_date_isSet;
}

bool OAICreateGiftCardRequest::is_expiring_date_Valid() const{
    return m_expiring_date_isValid;
}

bool OAICreateGiftCardRequest::isMultipleCredits() const {
    return m_multiple_credits;
}
void OAICreateGiftCardRequest::setMultipleCredits(const bool &multiple_credits) {
    m_multiple_credits = multiple_credits;
    m_multiple_credits_isSet = true;
}

bool OAICreateGiftCardRequest::is_multiple_credits_Set() const{
    return m_multiple_credits_isSet;
}

bool OAICreateGiftCardRequest::is_multiple_credits_Valid() const{
    return m_multiple_credits_isValid;
}

bool OAICreateGiftCardRequest::isMultipleRedemptions() const {
    return m_multiple_redemptions;
}
void OAICreateGiftCardRequest::setMultipleRedemptions(const bool &multiple_redemptions) {
    m_multiple_redemptions = multiple_redemptions;
    m_multiple_redemptions_isSet = true;
}

bool OAICreateGiftCardRequest::is_multiple_redemptions_Set() const{
    return m_multiple_redemptions_isSet;
}

bool OAICreateGiftCardRequest::is_multiple_redemptions_Valid() const{
    return m_multiple_redemptions_isValid;
}

QString OAICreateGiftCardRequest::getProfileId() const {
    return m_profile_id;
}
void OAICreateGiftCardRequest::setProfileId(const QString &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAICreateGiftCardRequest::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAICreateGiftCardRequest::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

QString OAICreateGiftCardRequest::getRelationName() const {
    return m_relation_name;
}
void OAICreateGiftCardRequest::setRelationName(const QString &relation_name) {
    m_relation_name = relation_name;
    m_relation_name_isSet = true;
}

bool OAICreateGiftCardRequest::is_relation_name_Set() const{
    return m_relation_name_isSet;
}

bool OAICreateGiftCardRequest::is_relation_name_Valid() const{
    return m_relation_name_isValid;
}

bool OAICreateGiftCardRequest::isRestrictedToOwner() const {
    return m_restricted_to_owner;
}
void OAICreateGiftCardRequest::setRestrictedToOwner(const bool &restricted_to_owner) {
    m_restricted_to_owner = restricted_to_owner;
    m_restricted_to_owner_isSet = true;
}

bool OAICreateGiftCardRequest::is_restricted_to_owner_Set() const{
    return m_restricted_to_owner_isSet;
}

bool OAICreateGiftCardRequest::is_restricted_to_owner_Valid() const{
    return m_restricted_to_owner_isValid;
}

bool OAICreateGiftCardRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiring_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_credits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_redemptions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_to_owner_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGiftCardRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_caption_isValid && m_expiring_date_isValid && m_profile_id_isValid && m_relation_name_isValid && true;
}

} // namespace OpenAPI
