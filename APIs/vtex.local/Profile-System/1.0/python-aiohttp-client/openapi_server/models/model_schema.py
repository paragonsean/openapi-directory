# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.schema_properties import SchemaProperties
from openapi_server import util


class ModelSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, document_ttl: int=None, properties: SchemaProperties=None, required: List[str]=None, title: str=None, type: str=None, v_indexed: List[object]=None, v_unique: List[object]=None, version: int=None):
        """ModelSchema - a model defined in OpenAPI

        :param description: The description of this ModelSchema.
        :param document_ttl: The document_ttl of this ModelSchema.
        :param properties: The properties of this ModelSchema.
        :param required: The required of this ModelSchema.
        :param title: The title of this ModelSchema.
        :param type: The type of this ModelSchema.
        :param v_indexed: The v_indexed of this ModelSchema.
        :param v_unique: The v_unique of this ModelSchema.
        :param version: The version of this ModelSchema.
        """
        self.openapi_types = {
            'description': str,
            'document_ttl': int,
            'properties': SchemaProperties,
            'required': List[str],
            'title': str,
            'type': str,
            'v_indexed': List[object],
            'v_unique': List[object],
            'version': int
        }

        self.attribute_map = {
            'description': 'description',
            'document_ttl': 'documentTTL',
            'properties': 'properties',
            'required': 'required',
            'title': 'title',
            'type': 'type',
            'v_indexed': 'v-indexed',
            'v_unique': 'v-unique',
            'version': 'version'
        }

        self._description = description
        self._document_ttl = document_ttl
        self._properties = properties
        self._required = required
        self._title = title
        self._type = type
        self._v_indexed = v_indexed
        self._v_unique = v_unique
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _schema of this ModelSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ModelSchema.

        Schema's human readable description.

        :return: The description of this ModelSchema.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelSchema.

        Schema's human readable description.

        :param description: The description of this ModelSchema.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def document_ttl(self):
        """Gets the document_ttl of this ModelSchema.

        Document time to live, in days. After this many days from its creation or update, any document cerated from this schema will be deleted.

        :return: The document_ttl of this ModelSchema.
        :rtype: int
        """
        return self._document_ttl

    @document_ttl.setter
    def document_ttl(self, document_ttl):
        """Sets the document_ttl of this ModelSchema.

        Document time to live, in days. After this many days from its creation or update, any document cerated from this schema will be deleted.

        :param document_ttl: The document_ttl of this ModelSchema.
        :type document_ttl: int
        """

        self._document_ttl = document_ttl

    @property
    def properties(self):
        """Gets the properties of this ModelSchema.


        :return: The properties of this ModelSchema.
        :rtype: SchemaProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ModelSchema.


        :param properties: The properties of this ModelSchema.
        :type properties: SchemaProperties
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def required(self):
        """Gets the required of this ModelSchema.

        Schema required fields.

        :return: The required of this ModelSchema.
        :rtype: List[str]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ModelSchema.

        Schema required fields.

        :param required: The required of this ModelSchema.
        :type required: List[str]
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def title(self):
        """Gets the title of this ModelSchema.

        Schema title.

        :return: The title of this ModelSchema.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ModelSchema.

        Schema title.

        :param title: The title of this ModelSchema.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this ModelSchema.

        Schema type.

        :return: The type of this ModelSchema.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelSchema.

        Schema type.

        :param type: The type of this ModelSchema.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def v_indexed(self):
        """Gets the v_indexed of this ModelSchema.

        

        :return: The v_indexed of this ModelSchema.
        :rtype: List[object]
        """
        return self._v_indexed

    @v_indexed.setter
    def v_indexed(self, v_indexed):
        """Sets the v_indexed of this ModelSchema.

        

        :param v_indexed: The v_indexed of this ModelSchema.
        :type v_indexed: List[object]
        """

        self._v_indexed = v_indexed

    @property
    def v_unique(self):
        """Gets the v_unique of this ModelSchema.

        

        :return: The v_unique of this ModelSchema.
        :rtype: List[object]
        """
        return self._v_unique

    @v_unique.setter
    def v_unique(self, v_unique):
        """Sets the v_unique of this ModelSchema.

        

        :param v_unique: The v_unique of this ModelSchema.
        :type v_unique: List[object]
        """

        self._v_unique = v_unique

    @property
    def version(self):
        """Gets the version of this ModelSchema.

        Schema version.

        :return: The version of this ModelSchema.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ModelSchema.

        Schema version.

        :param version: The version of this ModelSchema.
        :type version: int
        """

        self._version = version
