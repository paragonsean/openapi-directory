# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SchemaPropertiesFieldName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: object=None, pii: bool=None, sensitive: bool=None, type: str=None):
        """SchemaPropertiesFieldName - a model defined in OpenAPI

        :param items: The items of this SchemaPropertiesFieldName.
        :param pii: The pii of this SchemaPropertiesFieldName.
        :param sensitive: The sensitive of this SchemaPropertiesFieldName.
        :param type: The type of this SchemaPropertiesFieldName.
        """
        self.openapi_types = {
            'items': object,
            'pii': bool,
            'sensitive': bool,
            'type': str
        }

        self.attribute_map = {
            'items': 'items',
            'pii': 'pii',
            'sensitive': 'sensitive',
            'type': 'type'
        }

        self._items = items
        self._pii = pii
        self._sensitive = sensitive
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SchemaPropertiesFieldName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The schema_properties__fieldName_ of this SchemaPropertiesFieldName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this SchemaPropertiesFieldName.

        Object containing the type of the items if the field is an array. Typically, arrays will contain strings and will be used for fields such as `email`.

        :return: The items of this SchemaPropertiesFieldName.
        :rtype: object
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SchemaPropertiesFieldName.

        Object containing the type of the items if the field is an array. Typically, arrays will contain strings and will be used for fields such as `email`.

        :param items: The items of this SchemaPropertiesFieldName.
        :type items: object
        """

        self._items = items

    @property
    def pii(self):
        """Gets the pii of this SchemaPropertiesFieldName.

        Indicates whether property is Personal Identifiable Information.

        :return: The pii of this SchemaPropertiesFieldName.
        :rtype: bool
        """
        return self._pii

    @pii.setter
    def pii(self, pii):
        """Sets the pii of this SchemaPropertiesFieldName.

        Indicates whether property is Personal Identifiable Information.

        :param pii: The pii of this SchemaPropertiesFieldName.
        :type pii: bool
        """
        if pii is None:
            raise ValueError("Invalid value for `pii`, must not be `None`")

        self._pii = pii

    @property
    def sensitive(self):
        """Gets the sensitive of this SchemaPropertiesFieldName.

        Indicates whether property is sensitive data.

        :return: The sensitive of this SchemaPropertiesFieldName.
        :rtype: bool
        """
        return self._sensitive

    @sensitive.setter
    def sensitive(self, sensitive):
        """Sets the sensitive of this SchemaPropertiesFieldName.

        Indicates whether property is sensitive data.

        :param sensitive: The sensitive of this SchemaPropertiesFieldName.
        :type sensitive: bool
        """
        if sensitive is None:
            raise ValueError("Invalid value for `sensitive`, must not be `None`")

        self._sensitive = sensitive

    @property
    def type(self):
        """Gets the type of this SchemaPropertiesFieldName.

        Schema property type.

        :return: The type of this SchemaPropertiesFieldName.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SchemaPropertiesFieldName.

        Schema property type.

        :param type: The type of this SchemaPropertiesFieldName.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
