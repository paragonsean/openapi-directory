/*
 * Profile System
 * Create shopper profiles and manage their information.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SchemaProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Schema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:56:07.583429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Schema {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCUMENT_T_T_L = "documentTTL";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_T_T_L)
  private Integer documentTTL;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private SchemaProperties properties;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private List<String> required = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_V_INDEXED = "v-indexed";
  @SerializedName(SERIALIZED_NAME_V_INDEXED)
  private List<Object> vIndexed = new ArrayList<>();

  public static final String SERIALIZED_NAME_V_UNIQUE = "v-unique";
  @SerializedName(SERIALIZED_NAME_V_UNIQUE)
  private List<Object> vUnique = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public Schema() {
  }

  public Schema description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Schema&#39;s human readable description.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Schema documentTTL(Integer documentTTL) {
    this.documentTTL = documentTTL;
    return this;
  }

  /**
   * Document time to live, in days. After this many days from its creation or update, any document cerated from this schema will be deleted.
   * @return documentTTL
   */
  @javax.annotation.Nullable
  public Integer getDocumentTTL() {
    return documentTTL;
  }

  public void setDocumentTTL(Integer documentTTL) {
    this.documentTTL = documentTTL;
  }


  public Schema properties(SchemaProperties properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nonnull
  public SchemaProperties getProperties() {
    return properties;
  }

  public void setProperties(SchemaProperties properties) {
    this.properties = properties;
  }


  public Schema required(List<String> required) {
    this.required = required;
    return this;
  }

  public Schema addRequiredItem(String requiredItem) {
    if (this.required == null) {
      this.required = new ArrayList<>();
    }
    this.required.add(requiredItem);
    return this;
  }

  /**
   * Schema required fields.
   * @return required
   */
  @javax.annotation.Nonnull
  public List<String> getRequired() {
    return required;
  }

  public void setRequired(List<String> required) {
    this.required = required;
  }


  public Schema title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Schema title.
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Schema type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Schema type.
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Schema vIndexed(List<Object> vIndexed) {
    this.vIndexed = vIndexed;
    return this;
  }

  public Schema addVIndexedItem(Object vIndexedItem) {
    if (this.vIndexed == null) {
      this.vIndexed = new ArrayList<>();
    }
    this.vIndexed.add(vIndexedItem);
    return this;
  }

  /**
   * 
   * @return vIndexed
   */
  @javax.annotation.Nullable
  public List<Object> getvIndexed() {
    return vIndexed;
  }

  public void setvIndexed(List<Object> vIndexed) {
    this.vIndexed = vIndexed;
  }


  public Schema vUnique(List<Object> vUnique) {
    this.vUnique = vUnique;
    return this;
  }

  public Schema addVUniqueItem(Object vUniqueItem) {
    if (this.vUnique == null) {
      this.vUnique = new ArrayList<>();
    }
    this.vUnique.add(vUniqueItem);
    return this;
  }

  /**
   * 
   * @return vUnique
   */
  @javax.annotation.Nullable
  public List<Object> getvUnique() {
    return vUnique;
  }

  public void setvUnique(List<Object> vUnique) {
    this.vUnique = vUnique;
  }


  public Schema version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Schema version.
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schema schema = (Schema) o;
    return Objects.equals(this.description, schema.description) &&
        Objects.equals(this.documentTTL, schema.documentTTL) &&
        Objects.equals(this.properties, schema.properties) &&
        Objects.equals(this.required, schema.required) &&
        Objects.equals(this.title, schema.title) &&
        Objects.equals(this.type, schema.type) &&
        Objects.equals(this.vIndexed, schema.vIndexed) &&
        Objects.equals(this.vUnique, schema.vUnique) &&
        Objects.equals(this.version, schema.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, documentTTL, properties, required, title, type, vIndexed, vUnique, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schema {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentTTL: ").append(toIndentedString(documentTTL)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vIndexed: ").append(toIndentedString(vIndexed)).append("\n");
    sb.append("    vUnique: ").append(toIndentedString(vUnique)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("documentTTL");
    openapiFields.add("properties");
    openapiFields.add("required");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("v-indexed");
    openapiFields.add("v-unique");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("properties");
    openapiRequiredFields.add("required");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Schema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Schema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Schema is not found in the empty JSON string", Schema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Schema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Schema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Schema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `properties`
      SchemaProperties.validateJsonElement(jsonObj.get("properties"));
      // ensure the required json array is present
      if (jsonObj.get("required") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("required").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `required` to be an array in the JSON string but got `%s`", jsonObj.get("required").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("v-indexed") != null && !jsonObj.get("v-indexed").isJsonNull() && !jsonObj.get("v-indexed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `v-indexed` to be an array in the JSON string but got `%s`", jsonObj.get("v-indexed").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("v-unique") != null && !jsonObj.get("v-unique").isJsonNull() && !jsonObj.get("v-unique").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `v-unique` to be an array in the JSON string but got `%s`", jsonObj.get("v-unique").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Schema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Schema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Schema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Schema.class));

       return (TypeAdapter<T>) new TypeAdapter<Schema>() {
           @Override
           public void write(JsonWriter out, Schema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Schema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Schema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Schema
   * @throws IOException if the JSON string is invalid with respect to Schema
   */
  public static Schema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Schema.class);
  }

  /**
   * Convert an instance of Schema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

