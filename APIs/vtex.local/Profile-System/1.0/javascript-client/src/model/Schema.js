/**
 * Profile System
 * Create shopper profiles and manage their information.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SchemaProperties from './SchemaProperties';

/**
 * The Schema model module.
 * @module model/Schema
 * @version 1.0
 */
class Schema {
    /**
     * Constructs a new <code>Schema</code>.
     * @alias module:model/Schema
     * @param description {String} Schema's human readable description.
     * @param properties {module:model/SchemaProperties} 
     * @param required {Array.<String>} Schema required fields.
     * @param title {String} Schema title.
     * @param type {String} Schema type.
     */
    constructor(description, properties, required, title, type) { 
        
        Schema.initialize(this, description, properties, required, title, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, properties, required, title, type) { 
        obj['description'] = description;
        obj['properties'] = properties;
        obj['required'] = required;
        obj['title'] = title;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Schema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Schema} obj Optional instance to populate.
     * @return {module:model/Schema} The populated <code>Schema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Schema();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('documentTTL')) {
                obj['documentTTL'] = ApiClient.convertToType(data['documentTTL'], 'Number');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = SchemaProperties.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], ['String']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('v-indexed')) {
                obj['v-indexed'] = ApiClient.convertToType(data['v-indexed'], [Object]);
            }
            if (data.hasOwnProperty('v-unique')) {
                obj['v-unique'] = ApiClient.convertToType(data['v-unique'], [Object]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Schema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Schema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Schema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          SchemaProperties.validateJSON(data['properties']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['required'])) {
            throw new Error("Expected the field `required` to be an array in the JSON data but got " + data['required']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['v-indexed'])) {
            throw new Error("Expected the field `v-indexed` to be an array in the JSON data but got " + data['v-indexed']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['v-unique'])) {
            throw new Error("Expected the field `v-unique` to be an array in the JSON data but got " + data['v-unique']);
        }

        return true;
    }


}

Schema.RequiredProperties = ["description", "properties", "required", "title", "type"];

/**
 * Schema's human readable description.
 * @member {String} description
 */
Schema.prototype['description'] = undefined;

/**
 * Document time to live, in days. After this many days from its creation or update, any document cerated from this schema will be deleted.
 * @member {Number} documentTTL
 */
Schema.prototype['documentTTL'] = undefined;

/**
 * @member {module:model/SchemaProperties} properties
 */
Schema.prototype['properties'] = undefined;

/**
 * Schema required fields.
 * @member {Array.<String>} required
 */
Schema.prototype['required'] = undefined;

/**
 * Schema title.
 * @member {String} title
 */
Schema.prototype['title'] = undefined;

/**
 * Schema type.
 * @member {String} type
 */
Schema.prototype['type'] = undefined;

/**
 * 
 * @member {Array.<Object>} v-indexed
 */
Schema.prototype['v-indexed'] = undefined;

/**
 * 
 * @member {Array.<Object>} v-unique
 */
Schema.prototype['v-unique'] = undefined;

/**
 * Schema version.
 * @member {Number} version
 */
Schema.prototype['version'] = undefined;






export default Schema;

