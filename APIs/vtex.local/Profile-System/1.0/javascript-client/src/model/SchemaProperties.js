/**
 * Profile System
 * Create shopper profiles and manage their information.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SchemaPropertiesFieldName from './SchemaPropertiesFieldName';

/**
 * The SchemaProperties model module.
 * @module model/SchemaProperties
 * @version 1.0
 */
class SchemaProperties {
    /**
     * Constructs a new <code>SchemaProperties</code>.
     * Object describing each field in your desired schema. In this object, each property is a new object, describing the field according to: &#x60;type&#x60; (string); &#x60;sensitive&#x60; (boolean); &#x60;pii&#x60; (boolean) and; &#x60;items.type&#x60; (if field is array).
     * @alias module:model/SchemaProperties
     */
    constructor() { 
        
        SchemaProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SchemaProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SchemaProperties} obj Optional instance to populate.
     * @return {module:model/SchemaProperties} The populated <code>SchemaProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SchemaProperties();

            if (data.hasOwnProperty('{fieldName}')) {
                obj['{fieldName}'] = SchemaPropertiesFieldName.constructFromObject(data['{fieldName}']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SchemaProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SchemaProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `{fieldName}`
        if (data['{fieldName}']) { // data not null
          SchemaPropertiesFieldName.validateJSON(data['{fieldName}']);
        }

        return true;
    }


}



/**
 * @member {module:model/SchemaPropertiesFieldName} {fieldName}
 */
SchemaProperties.prototype['{fieldName}'] = undefined;






export default SchemaProperties;

