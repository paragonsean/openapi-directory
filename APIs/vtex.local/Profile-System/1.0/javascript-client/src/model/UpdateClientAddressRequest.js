/**
 * Profile System
 * Create shopper profiles and manage their information.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateClientAddressRequest model module.
 * @module model/UpdateClientAddressRequest
 * @version 1.0
 */
class UpdateClientAddressRequest {
    /**
     * Constructs a new <code>UpdateClientAddressRequest</code>.
     * @alias module:model/UpdateClientAddressRequest
     */
    constructor() { 
        
        UpdateClientAddressRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateClientAddressRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateClientAddressRequest} obj Optional instance to populate.
     * @return {module:model/UpdateClientAddressRequest} The populated <code>UpdateClientAddressRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateClientAddressRequest();

            if (data.hasOwnProperty('administrativeAreaLevel1')) {
                obj['administrativeAreaLevel1'] = ApiClient.convertToType(data['administrativeAreaLevel1'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('countryName')) {
                obj['countryName'] = ApiClient.convertToType(data['countryName'], 'String');
            }
            if (data.hasOwnProperty('locality')) {
                obj['locality'] = ApiClient.convertToType(data['locality'], 'String');
            }
            if (data.hasOwnProperty('localityAreaLevel1')) {
                obj['localityAreaLevel1'] = ApiClient.convertToType(data['localityAreaLevel1'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('route')) {
                obj['route'] = ApiClient.convertToType(data['route'], 'String');
            }
            if (data.hasOwnProperty('streetNumber')) {
                obj['streetNumber'] = ApiClient.convertToType(data['streetNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateClientAddressRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateClientAddressRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['administrativeAreaLevel1'] && !(typeof data['administrativeAreaLevel1'] === 'string' || data['administrativeAreaLevel1'] instanceof String)) {
            throw new Error("Expected the field `administrativeAreaLevel1` to be a primitive type in the JSON string but got " + data['administrativeAreaLevel1']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['countryName'] && !(typeof data['countryName'] === 'string' || data['countryName'] instanceof String)) {
            throw new Error("Expected the field `countryName` to be a primitive type in the JSON string but got " + data['countryName']);
        }
        // ensure the json data is a string
        if (data['locality'] && !(typeof data['locality'] === 'string' || data['locality'] instanceof String)) {
            throw new Error("Expected the field `locality` to be a primitive type in the JSON string but got " + data['locality']);
        }
        // ensure the json data is a string
        if (data['localityAreaLevel1'] && !(typeof data['localityAreaLevel1'] === 'string' || data['localityAreaLevel1'] instanceof String)) {
            throw new Error("Expected the field `localityAreaLevel1` to be a primitive type in the JSON string but got " + data['localityAreaLevel1']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['route'] && !(typeof data['route'] === 'string' || data['route'] instanceof String)) {
            throw new Error("Expected the field `route` to be a primitive type in the JSON string but got " + data['route']);
        }
        // ensure the json data is a string
        if (data['streetNumber'] && !(typeof data['streetNumber'] === 'string' || data['streetNumber'] instanceof String)) {
            throw new Error("Expected the field `streetNumber` to be a primitive type in the JSON string but got " + data['streetNumber']);
        }

        return true;
    }


}



/**
 * Name of administrative area, such as the state or province.
 * @member {String} administrativeAreaLevel1
 */
UpdateClientAddressRequest.prototype['administrativeAreaLevel1'] = undefined;

/**
 * Two letter country code.
 * @member {String} countryCode
 */
UpdateClientAddressRequest.prototype['countryCode'] = undefined;

/**
 * Name of the address country.
 * @member {String} countryName
 */
UpdateClientAddressRequest.prototype['countryName'] = undefined;

/**
 * Name of address locality, such as the city.
 * @member {String} locality
 */
UpdateClientAddressRequest.prototype['locality'] = undefined;

/**
 * Name of the address locality area, such as the neighborhood or district.
 * @member {String} localityAreaLevel1
 */
UpdateClientAddressRequest.prototype['localityAreaLevel1'] = undefined;

/**
 * Address postal code.
 * @member {String} postalCode
 */
UpdateClientAddressRequest.prototype['postalCode'] = undefined;

/**
 * Name of the address country.
 * @member {String} route
 */
UpdateClientAddressRequest.prototype['route'] = undefined;

/**
 * Name of the address country.
 * @member {String} streetNumber
 */
UpdateClientAddressRequest.prototype['streetNumber'] = undefined;






export default UpdateClientAddressRequest;

