/**
 * Profile System
 * Create shopper profiles and manage their information.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SchemaPropertiesFieldName model module.
 * @module model/SchemaPropertiesFieldName
 * @version 1.0
 */
class SchemaPropertiesFieldName {
    /**
     * Constructs a new <code>SchemaPropertiesFieldName</code>.
     * Schema of any given field described in the &#x60;properties&#x60; field.
     * @alias module:model/SchemaPropertiesFieldName
     * @param pii {Boolean} Indicates whether property is Personal Identifiable Information.
     * @param sensitive {Boolean} Indicates whether property is sensitive data.
     * @param type {String} Schema property type.
     */
    constructor(pii, sensitive, type) { 
        
        SchemaPropertiesFieldName.initialize(this, pii, sensitive, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pii, sensitive, type) { 
        obj['pii'] = pii;
        obj['sensitive'] = sensitive;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>SchemaPropertiesFieldName</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SchemaPropertiesFieldName} obj Optional instance to populate.
     * @return {module:model/SchemaPropertiesFieldName} The populated <code>SchemaPropertiesFieldName</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SchemaPropertiesFieldName();

            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], Object);
            }
            if (data.hasOwnProperty('pii')) {
                obj['pii'] = ApiClient.convertToType(data['pii'], 'Boolean');
            }
            if (data.hasOwnProperty('sensitive')) {
                obj['sensitive'] = ApiClient.convertToType(data['sensitive'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SchemaPropertiesFieldName</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SchemaPropertiesFieldName</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SchemaPropertiesFieldName.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

SchemaPropertiesFieldName.RequiredProperties = ["pii", "sensitive", "type"];

/**
 * Object containing the type of the items if the field is an array. Typically, arrays will contain strings and will be used for fields such as `email`.
 * @member {Object} items
 */
SchemaPropertiesFieldName.prototype['items'] = undefined;

/**
 * Indicates whether property is Personal Identifiable Information.
 * @member {Boolean} pii
 */
SchemaPropertiesFieldName.prototype['pii'] = undefined;

/**
 * Indicates whether property is sensitive data.
 * @member {Boolean} sensitive
 */
SchemaPropertiesFieldName.prototype['sensitive'] = undefined;

/**
 * Schema property type.
 * @member {String} type
 */
SchemaPropertiesFieldName.prototype['type'] = undefined;






export default SchemaPropertiesFieldName;

