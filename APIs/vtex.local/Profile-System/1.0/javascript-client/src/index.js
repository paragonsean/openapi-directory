/**
 * Profile System
 * Create shopper profiles and manage their information.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Address from './model/Address';
import Profile from './model/Profile';
import Schema from './model/Schema';
import SchemaProperties from './model/SchemaProperties';
import SchemaPropertiesFieldName from './model/SchemaPropertiesFieldName';
import UpdateClientAddressRequest from './model/UpdateClientAddressRequest';
import UpdateClientProfileRequest from './model/UpdateClientProfileRequest';
import AddressesApi from './api/AddressesApi';
import ProfilesApi from './api/ProfilesApi';
import ProspectsApi from './api/ProspectsApi';
import PurchaseInformationApi from './api/PurchaseInformationApi';
import SchemasApi from './api/SchemasApi';


/**
* Create shopper profiles and manage their information..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ProfileSystem = require('index'); // See note below*.
* var xxxSvc = new ProfileSystem.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ProfileSystem.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ProfileSystem.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ProfileSystem.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address,

    /**
     * The Profile model constructor.
     * @property {module:model/Profile}
     */
    Profile,

    /**
     * The Schema model constructor.
     * @property {module:model/Schema}
     */
    Schema,

    /**
     * The SchemaProperties model constructor.
     * @property {module:model/SchemaProperties}
     */
    SchemaProperties,

    /**
     * The SchemaPropertiesFieldName model constructor.
     * @property {module:model/SchemaPropertiesFieldName}
     */
    SchemaPropertiesFieldName,

    /**
     * The UpdateClientAddressRequest model constructor.
     * @property {module:model/UpdateClientAddressRequest}
     */
    UpdateClientAddressRequest,

    /**
     * The UpdateClientProfileRequest model constructor.
     * @property {module:model/UpdateClientProfileRequest}
     */
    UpdateClientProfileRequest,

    /**
    * The AddressesApi service constructor.
    * @property {module:api/AddressesApi}
    */
    AddressesApi,

    /**
    * The ProfilesApi service constructor.
    * @property {module:api/ProfilesApi}
    */
    ProfilesApi,

    /**
    * The ProspectsApi service constructor.
    * @property {module:api/ProspectsApi}
    */
    ProspectsApi,

    /**
    * The PurchaseInformationApi service constructor.
    * @property {module:api/PurchaseInformationApi}
    */
    PurchaseInformationApi,

    /**
    * The SchemasApi service constructor.
    * @property {module:api/SchemasApi}
    */
    SchemasApi
};
