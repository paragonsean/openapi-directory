/**
 * Profile System
 * Create shopper profiles and manage their information.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Prospects service.
* @module api/ProspectsApi
* @version 1.0
*/
export default class ProspectsApi {

    /**
    * Constructs a new ProspectsApi. 
    * @alias module:api/ProspectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createProspect operation.
     * @callback module:api/ProspectsApi~createProspectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create prospect
     * Creates new prospect.    > The `id` field returned by this request is the `prospectId` used to retrieve information on a specific prospect later.    > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/ProspectsApi~createProspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createProspect(contentType, accept, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createProspect");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling createProspect");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/storage/profile-system/prospects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProspect operation.
     * @callback module:api/ProspectsApi~deleteProspectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete prospect
     * Deletes a prospect by `prospectId`.    > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} prospectId ID of the prospect as returned by the Create prospect endpoint's response, in the `id` field.
     * @param {module:api/ProspectsApi~deleteProspectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProspect(contentType, accept, prospectId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling deleteProspect");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling deleteProspect");
      }
      // verify the required parameter 'prospectId' is set
      if (prospectId === undefined || prospectId === null) {
        throw new Error("Missing the required parameter 'prospectId' when calling deleteProspect");
      }

      let pathParams = {
        'prospectId': prospectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/storage/profile-system/prospects/{prospectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProspect operation.
     * @callback module:api/ProspectsApi~getProspectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get prospect
     * Retrieves the information of a specific prospect, by its `prospectId`.    > For security and privacy reasons, this request returns masked prospect data. For unmasked information, see Get unmasked prospect.    > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} prospectId ID of the prospect as returned by the Create prospect endpoint's response, in the `id` field.
     * @param {module:api/ProspectsApi~getProspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getProspect(contentType, accept, prospectId, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getProspect");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getProspect");
      }
      // verify the required parameter 'prospectId' is set
      if (prospectId === undefined || prospectId === null) {
        throw new Error("Missing the required parameter 'prospectId' when calling getProspect");
      }

      let pathParams = {
        'prospectId': prospectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/api/storage/profile-system/prospects/{prospectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUnmaskedProspect operation.
     * @callback module:api/ProspectsApi~getUnmaskedProspectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get unmasked prospect
     * Retrieves unmasked information of a specific prospect, by its `prospectId`.    > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} prospectId ID of the prospect as returned by the Create prospect endpoint's response, in the `id` field.
     * @param {String} reason Reason for requesting unmasked data.
     * @param {module:api/ProspectsApi~getUnmaskedProspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    getUnmaskedProspect(contentType, accept, prospectId, reason, callback) {
      let postBody = null;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling getUnmaskedProspect");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling getUnmaskedProspect");
      }
      // verify the required parameter 'prospectId' is set
      if (prospectId === undefined || prospectId === null) {
        throw new Error("Missing the required parameter 'prospectId' when calling getUnmaskedProspect");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling getUnmaskedProspect");
      }

      let pathParams = {
        'prospectId': prospectId
      };
      let queryParams = {
        'reason': reason
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/api/storage/profile-system/prospects/{prospectId}/unmask', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProspect operation.
     * @callback module:api/ProspectsApi~updateProspectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update prospect
     * Updates one or more fields of an existing prospect.    > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
     * @param {String} contentType Type of the content being sent.
     * @param {String} accept HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.
     * @param {String} prospectId ID of the prospect as returned by the Create prospect endpoint's response, in the `id` field.
     * @param {Object} opts Optional parameters
     * @param {Object} [body] 
     * @param {module:api/ProspectsApi~updateProspectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateProspect(contentType, accept, prospectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling updateProspect");
      }
      // verify the required parameter 'accept' is set
      if (accept === undefined || accept === null) {
        throw new Error("Missing the required parameter 'accept' when calling updateProspect");
      }
      // verify the required parameter 'prospectId' is set
      if (prospectId === undefined || prospectId === null) {
        throw new Error("Missing the required parameter 'prospectId' when calling updateProspect");
      }

      let pathParams = {
        'prospectId': prospectId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'Accept': accept
      };
      let formParams = {
      };

      let authNames = ['appToken', 'appKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/api/storage/profile-system/prospects/{prospectId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
