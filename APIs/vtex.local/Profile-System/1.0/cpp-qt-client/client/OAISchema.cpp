/**
 * Profile System
 * Create shopper profiles and manage their information.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchema::OAISchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchema::OAISchema() {
    this->initializeModel();
}

OAISchema::~OAISchema() {}

void OAISchema::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_document_ttl_isSet = false;
    m_document_ttl_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_v_indexed_isSet = false;
    m_v_indexed_isValid = false;

    m_v_unique_isSet = false;
    m_v_unique_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchema::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_document_ttl_isValid = ::OpenAPI::fromJsonValue(m_document_ttl, json[QString("documentTTL")]);
    m_document_ttl_isSet = !json[QString("documentTTL")].isNull() && m_document_ttl_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_v_indexed_isValid = ::OpenAPI::fromJsonValue(m_v_indexed, json[QString("v-indexed")]);
    m_v_indexed_isSet = !json[QString("v-indexed")].isNull() && m_v_indexed_isValid;

    m_v_unique_isValid = ::OpenAPI::fromJsonValue(m_v_unique, json[QString("v-unique")]);
    m_v_unique_isSet = !json[QString("v-unique")].isNull() && m_v_unique_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchema::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_document_ttl_isSet) {
        obj.insert(QString("documentTTL"), ::OpenAPI::toJsonValue(m_document_ttl));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_required.size() > 0) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_v_indexed.size() > 0) {
        obj.insert(QString("v-indexed"), ::OpenAPI::toJsonValue(m_v_indexed));
    }
    if (m_v_unique.size() > 0) {
        obj.insert(QString("v-unique"), ::OpenAPI::toJsonValue(m_v_unique));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAISchema::getDescription() const {
    return m_description;
}
void OAISchema::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISchema::is_description_Set() const{
    return m_description_isSet;
}

bool OAISchema::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAISchema::getDocumentTtl() const {
    return m_document_ttl;
}
void OAISchema::setDocumentTtl(const qint32 &document_ttl) {
    m_document_ttl = document_ttl;
    m_document_ttl_isSet = true;
}

bool OAISchema::is_document_ttl_Set() const{
    return m_document_ttl_isSet;
}

bool OAISchema::is_document_ttl_Valid() const{
    return m_document_ttl_isValid;
}

OAISchema_properties OAISchema::getProperties() const {
    return m_properties;
}
void OAISchema::setProperties(const OAISchema_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISchema::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISchema::is_properties_Valid() const{
    return m_properties_isValid;
}

QList<QString> OAISchema::getRequired() const {
    return m_required;
}
void OAISchema::setRequired(const QList<QString> &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAISchema::is_required_Set() const{
    return m_required_isSet;
}

bool OAISchema::is_required_Valid() const{
    return m_required_isValid;
}

QString OAISchema::getTitle() const {
    return m_title;
}
void OAISchema::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISchema::is_title_Set() const{
    return m_title_isSet;
}

bool OAISchema::is_title_Valid() const{
    return m_title_isValid;
}

QString OAISchema::getType() const {
    return m_type;
}
void OAISchema::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISchema::is_type_Set() const{
    return m_type_isSet;
}

bool OAISchema::is_type_Valid() const{
    return m_type_isValid;
}

QList<QJsonValue> OAISchema::getVIndexed() const {
    return m_v_indexed;
}
void OAISchema::setVIndexed(const QList<QJsonValue> &v_indexed) {
    m_v_indexed = v_indexed;
    m_v_indexed_isSet = true;
}

bool OAISchema::is_v_indexed_Set() const{
    return m_v_indexed_isSet;
}

bool OAISchema::is_v_indexed_Valid() const{
    return m_v_indexed_isValid;
}

QList<QJsonValue> OAISchema::getVUnique() const {
    return m_v_unique;
}
void OAISchema::setVUnique(const QList<QJsonValue> &v_unique) {
    m_v_unique = v_unique;
    m_v_unique_isSet = true;
}

bool OAISchema::is_v_unique_Set() const{
    return m_v_unique_isSet;
}

bool OAISchema::is_v_unique_Valid() const{
    return m_v_unique_isValid;
}

qint32 OAISchema::getVersion() const {
    return m_version;
}
void OAISchema::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISchema::is_version_Set() const{
    return m_version_isSet;
}

bool OAISchema::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_indexed.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_unique.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_properties_isValid && m_required_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
