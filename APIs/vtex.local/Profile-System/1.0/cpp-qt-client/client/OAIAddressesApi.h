/**
 * Profile System
 * Create shopper profiles and manage their information.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAddressesApi_H
#define OAI_OAIAddressesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddress.h"
#include "OAIObject.h"
#include "OAIUpdateClientAddress_request.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAddressesApi : public QObject {
    Q_OBJECT

public:
    OAIAddressesApi(const int timeOut = 0);
    ~OAIAddressesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  alternative_key QString [optional]
    * @param[in]  oai_address OAIAddress [optional]
    */
    virtual void createClientAddress(const QString &content_type, const QString &accept, const QString &profile_id, const ::OpenAPI::OptionalParam<QString> &alternative_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddress> &oai_address = ::OpenAPI::OptionalParam<OAIAddress>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  address_id QString [required]
    * @param[in]  alternative_key QString [optional]
    */
    virtual void deleteAddress(const QString &content_type, const QString &accept, const QString &profile_id, const QString &address_id, const ::OpenAPI::OptionalParam<QString> &alternative_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  address_id QString [required]
    * @param[in]  alternative_key QString [optional]
    */
    virtual void getAddress(const QString &content_type, const QString &accept, const QString &profile_id, const QString &address_id, const ::OpenAPI::OptionalParam<QString> &alternative_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  address_id QString [required]
    * @param[in]  address_version_id QString [required]
    * @param[in]  reason QString [required]
    * @param[in]  alternative_key QString [optional]
    */
    virtual void getAddressByVersion(const QString &content_type, const QString &accept, const QString &profile_id, const QString &address_id, const QString &address_version_id, const QString &reason, const ::OpenAPI::OptionalParam<QString> &alternative_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  alternative_key QString [optional]
    */
    virtual void getClientAddresses(const QString &content_type, const QString &accept, const QString &profile_id, const ::OpenAPI::OptionalParam<QString> &alternative_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  address_id QString [required]
    * @param[in]  reason QString [required]
    * @param[in]  alternative_key QString [optional]
    */
    virtual void getUnmaskedAddress(const QString &content_type, const QString &accept, const QString &profile_id, const QString &address_id, const QString &reason, const ::OpenAPI::OptionalParam<QString> &alternative_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  address_id QString [required]
    * @param[in]  address_version_id QString [required]
    * @param[in]  reason QString [required]
    * @param[in]  alternative_key QString [optional]
    */
    virtual void getUnmaskedAddressByVersion(const QString &content_type, const QString &accept, const QString &profile_id, const QString &address_id, const QString &address_version_id, const QString &reason, const ::OpenAPI::OptionalParam<QString> &alternative_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  alternative_key QString [optional]
    */
    virtual void getUnmaskedClientAddresses(const QString &content_type, const QString &accept, const QString &profile_id, const ::OpenAPI::OptionalParam<QString> &alternative_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  address_id QString [required]
    * @param[in]  alternative_key QString [optional]
    * @param[in]  oai_update_client_address_request OAIUpdateClientAddress_request [optional]
    */
    virtual void updateClientAddress(const QString &content_type, const QString &accept, const QString &profile_id, const QString &address_id, const ::OpenAPI::OptionalParam<QString> &alternative_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateClientAddress_request> &oai_update_client_address_request = ::OpenAPI::OptionalParam<OAIUpdateClientAddress_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createClientAddressCallback(OAIHttpRequestWorker *worker);
    void deleteAddressCallback(OAIHttpRequestWorker *worker);
    void getAddressCallback(OAIHttpRequestWorker *worker);
    void getAddressByVersionCallback(OAIHttpRequestWorker *worker);
    void getClientAddressesCallback(OAIHttpRequestWorker *worker);
    void getUnmaskedAddressCallback(OAIHttpRequestWorker *worker);
    void getUnmaskedAddressByVersionCallback(OAIHttpRequestWorker *worker);
    void getUnmaskedClientAddressesCallback(OAIHttpRequestWorker *worker);
    void updateClientAddressCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createClientAddressSignal(OAIObject summary);
    void deleteAddressSignal();
    void getAddressSignal(OAIObject summary);
    void getAddressByVersionSignal(OAIObject summary);
    void getClientAddressesSignal(QList<QJsonValue> summary);
    void getUnmaskedAddressSignal(OAIObject summary);
    void getUnmaskedAddressByVersionSignal(OAIObject summary);
    void getUnmaskedClientAddressesSignal(QList<QMap<QString, QJsonValue>> summary);
    void updateClientAddressSignal(OAIObject summary);


    void createClientAddressSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteAddressSignalFull(OAIHttpRequestWorker *worker);
    void getAddressSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getAddressByVersionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getClientAddressesSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void getUnmaskedAddressSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getUnmaskedAddressByVersionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getUnmaskedClientAddressesSignalFull(OAIHttpRequestWorker *worker, QList<QMap<QString, QJsonValue>> summary);
    void updateClientAddressSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createClientAddressSignalError() instead")
    void createClientAddressSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createClientAddressSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAddressSignalError() instead")
    void deleteAddressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAddressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressSignalError() instead")
    void getAddressSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressByVersionSignalError() instead")
    void getAddressByVersionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressByVersionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClientAddressesSignalError() instead")
    void getClientAddressesSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClientAddressesSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUnmaskedAddressSignalError() instead")
    void getUnmaskedAddressSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUnmaskedAddressSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUnmaskedAddressByVersionSignalError() instead")
    void getUnmaskedAddressByVersionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUnmaskedAddressByVersionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUnmaskedClientAddressesSignalError() instead")
    void getUnmaskedClientAddressesSignalE(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUnmaskedClientAddressesSignalError(QList<QMap<QString, QJsonValue>> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientAddressSignalError() instead")
    void updateClientAddressSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientAddressSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createClientAddressSignalErrorFull() instead")
    void createClientAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createClientAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAddressSignalErrorFull() instead")
    void deleteAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressSignalErrorFull() instead")
    void getAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAddressByVersionSignalErrorFull() instead")
    void getAddressByVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAddressByVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClientAddressesSignalErrorFull() instead")
    void getClientAddressesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClientAddressesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUnmaskedAddressSignalErrorFull() instead")
    void getUnmaskedAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUnmaskedAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUnmaskedAddressByVersionSignalErrorFull() instead")
    void getUnmaskedAddressByVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUnmaskedAddressByVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUnmaskedClientAddressesSignalErrorFull() instead")
    void getUnmaskedClientAddressesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUnmaskedClientAddressesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientAddressSignalErrorFull() instead")
    void updateClientAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
