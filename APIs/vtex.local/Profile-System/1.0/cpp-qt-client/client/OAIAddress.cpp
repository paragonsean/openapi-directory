/**
 * Profile System
 * Create shopper profiles and manage their information.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    this->initializeModel();
}

OAIAddress::~OAIAddress() {}

void OAIAddress::initializeModel() {

    m_administrative_area_level1_isSet = false;
    m_administrative_area_level1_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_locality_isSet = false;
    m_locality_isValid = false;

    m_locality_area_level1_isSet = false;
    m_locality_area_level1_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_route_isSet = false;
    m_route_isValid = false;

    m_street_number_isSet = false;
    m_street_number_isValid = false;
}

void OAIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress::fromJsonObject(QJsonObject json) {

    m_administrative_area_level1_isValid = ::OpenAPI::fromJsonValue(m_administrative_area_level1, json[QString("administrativeAreaLevel1")]);
    m_administrative_area_level1_isSet = !json[QString("administrativeAreaLevel1")].isNull() && m_administrative_area_level1_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("countryName")]);
    m_country_name_isSet = !json[QString("countryName")].isNull() && m_country_name_isValid;

    m_locality_isValid = ::OpenAPI::fromJsonValue(m_locality, json[QString("locality")]);
    m_locality_isSet = !json[QString("locality")].isNull() && m_locality_isValid;

    m_locality_area_level1_isValid = ::OpenAPI::fromJsonValue(m_locality_area_level1, json[QString("localityAreaLevel1")]);
    m_locality_area_level1_isSet = !json[QString("localityAreaLevel1")].isNull() && m_locality_area_level1_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_route_isValid = ::OpenAPI::fromJsonValue(m_route, json[QString("route")]);
    m_route_isSet = !json[QString("route")].isNull() && m_route_isValid;

    m_street_number_isValid = ::OpenAPI::fromJsonValue(m_street_number, json[QString("streetNumber")]);
    m_street_number_isSet = !json[QString("streetNumber")].isNull() && m_street_number_isValid;
}

QString OAIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_administrative_area_level1_isSet) {
        obj.insert(QString("administrativeAreaLevel1"), ::OpenAPI::toJsonValue(m_administrative_area_level1));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("countryName"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_locality_isSet) {
        obj.insert(QString("locality"), ::OpenAPI::toJsonValue(m_locality));
    }
    if (m_locality_area_level1_isSet) {
        obj.insert(QString("localityAreaLevel1"), ::OpenAPI::toJsonValue(m_locality_area_level1));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_route_isSet) {
        obj.insert(QString("route"), ::OpenAPI::toJsonValue(m_route));
    }
    if (m_street_number_isSet) {
        obj.insert(QString("streetNumber"), ::OpenAPI::toJsonValue(m_street_number));
    }
    return obj;
}

QString OAIAddress::getAdministrativeAreaLevel1() const {
    return m_administrative_area_level1;
}
void OAIAddress::setAdministrativeAreaLevel1(const QString &administrative_area_level1) {
    m_administrative_area_level1 = administrative_area_level1;
    m_administrative_area_level1_isSet = true;
}

bool OAIAddress::is_administrative_area_level1_Set() const{
    return m_administrative_area_level1_isSet;
}

bool OAIAddress::is_administrative_area_level1_Valid() const{
    return m_administrative_area_level1_isValid;
}

QString OAIAddress::getCountryCode() const {
    return m_country_code;
}
void OAIAddress::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIAddress::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIAddress::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIAddress::getCountryName() const {
    return m_country_name;
}
void OAIAddress::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAIAddress::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAIAddress::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAIAddress::getLocality() const {
    return m_locality;
}
void OAIAddress::setLocality(const QString &locality) {
    m_locality = locality;
    m_locality_isSet = true;
}

bool OAIAddress::is_locality_Set() const{
    return m_locality_isSet;
}

bool OAIAddress::is_locality_Valid() const{
    return m_locality_isValid;
}

QString OAIAddress::getLocalityAreaLevel1() const {
    return m_locality_area_level1;
}
void OAIAddress::setLocalityAreaLevel1(const QString &locality_area_level1) {
    m_locality_area_level1 = locality_area_level1;
    m_locality_area_level1_isSet = true;
}

bool OAIAddress::is_locality_area_level1_Set() const{
    return m_locality_area_level1_isSet;
}

bool OAIAddress::is_locality_area_level1_Valid() const{
    return m_locality_area_level1_isValid;
}

QString OAIAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIAddress::getRoute() const {
    return m_route;
}
void OAIAddress::setRoute(const QString &route) {
    m_route = route;
    m_route_isSet = true;
}

bool OAIAddress::is_route_Set() const{
    return m_route_isSet;
}

bool OAIAddress::is_route_Valid() const{
    return m_route_isValid;
}

QString OAIAddress::getStreetNumber() const {
    return m_street_number;
}
void OAIAddress::setStreetNumber(const QString &street_number) {
    m_street_number = street_number;
    m_street_number_isSet = true;
}

bool OAIAddress::is_street_number_Set() const{
    return m_street_number_isSet;
}

bool OAIAddress::is_street_number_Valid() const{
    return m_street_number_isValid;
}

bool OAIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_administrative_area_level1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locality_area_level1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_administrative_area_level1_isValid && m_country_name_isValid && m_locality_isValid && m_locality_area_level1_isValid && m_postal_code_isValid && m_route_isValid && m_street_number_isValid && true;
}

} // namespace OpenAPI
