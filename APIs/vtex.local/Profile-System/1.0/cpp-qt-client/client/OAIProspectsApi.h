/**
 * Profile System
 * Create shopper profiles and manage their information.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProspectsApi_H
#define OAI_OAIProspectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProspectsApi : public QObject {
    Q_OBJECT

public:
    OAIProspectsApi(const int timeOut = 0);
    ~OAIProspectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void createProspect(const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  prospect_id QString [required]
    */
    virtual void deleteProspect(const QString &content_type, const QString &accept, const QString &prospect_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  prospect_id QString [required]
    */
    virtual void getProspect(const QString &content_type, const QString &accept, const QString &prospect_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  prospect_id QString [required]
    * @param[in]  reason QString [required]
    */
    virtual void getUnmaskedProspect(const QString &content_type, const QString &accept, const QString &prospect_id, const QString &reason);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  prospect_id QString [required]
    * @param[in]  body QJsonValue [optional]
    */
    virtual void updateProspect(const QString &content_type, const QString &accept, const QString &prospect_id, const ::OpenAPI::OptionalParam<QJsonValue> &body = ::OpenAPI::OptionalParam<QJsonValue>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createProspectCallback(OAIHttpRequestWorker *worker);
    void deleteProspectCallback(OAIHttpRequestWorker *worker);
    void getProspectCallback(OAIHttpRequestWorker *worker);
    void getUnmaskedProspectCallback(OAIHttpRequestWorker *worker);
    void updateProspectCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createProspectSignal(OAIObject summary);
    void deleteProspectSignal();
    void getProspectSignal(QList<QJsonValue> summary);
    void getUnmaskedProspectSignal(QList<QJsonValue> summary);
    void updateProspectSignal(OAIObject summary);


    void createProspectSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteProspectSignalFull(OAIHttpRequestWorker *worker);
    void getProspectSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void getUnmaskedProspectSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void updateProspectSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createProspectSignalError() instead")
    void createProspectSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProspectSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProspectSignalError() instead")
    void deleteProspectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProspectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProspectSignalError() instead")
    void getProspectSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProspectSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUnmaskedProspectSignalError() instead")
    void getUnmaskedProspectSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUnmaskedProspectSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProspectSignalError() instead")
    void updateProspectSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProspectSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createProspectSignalErrorFull() instead")
    void createProspectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProspectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProspectSignalErrorFull() instead")
    void deleteProspectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProspectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProspectSignalErrorFull() instead")
    void getProspectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProspectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUnmaskedProspectSignalErrorFull() instead")
    void getUnmaskedProspectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUnmaskedProspectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProspectSignalErrorFull() instead")
    void updateProspectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProspectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
