/**
 * Profile System
 * Create shopper profiles and manage their information.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProfilesApi_H
#define OAI_OAIProfilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAIProfile.h"
#include "OAIUpdateClientProfile_request.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProfilesApi : public QObject {
    Q_OBJECT

public:
    OAIProfilesApi(const int timeOut = 0);
    ~OAIProfilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  ttl qint32 [optional]
    * @param[in]  oai_profile OAIProfile [optional]
    */
    virtual void createClientProfile(const QString &content_type, const QString &accept, const ::OpenAPI::OptionalParam<qint32> &ttl = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIProfile> &oai_profile = ::OpenAPI::OptionalParam<OAIProfile>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    */
    virtual void deleteClientProfile(const QString &content_type, const QString &accept, const QString &profile_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  alternative_key QString [optional]
    */
    virtual void getProfile(const QString &content_type, const QString &accept, const QString &profile_id, const ::OpenAPI::OptionalParam<QString> &alternative_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  profile_version_id QString [required]
    */
    virtual void getProfileByVersion(const QString &content_type, const QString &accept, const QString &profile_id, const QString &profile_version_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  reason QString [required]
    * @param[in]  alternative_key QString [optional]
    */
    virtual void getUnmaskedProfile(const QString &content_type, const QString &accept, const QString &profile_id, const QString &reason, const ::OpenAPI::OptionalParam<QString> &alternative_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  profile_version_id QString [required]
    * @param[in]  reason QString [required]
    */
    virtual void getUnmaskedProfileByVersion(const QString &content_type, const QString &accept, const QString &profile_id, const QString &profile_version_id, const QString &reason);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  profile_id QString [required]
    * @param[in]  alternative_key QString [optional]
    * @param[in]  ttl qint32 [optional]
    * @param[in]  oai_update_client_profile_request OAIUpdateClientProfile_request [optional]
    */
    virtual void updateClientProfile(const QString &content_type, const QString &accept, const QString &profile_id, const ::OpenAPI::OptionalParam<QString> &alternative_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ttl = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIUpdateClientProfile_request> &oai_update_client_profile_request = ::OpenAPI::OptionalParam<OAIUpdateClientProfile_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createClientProfileCallback(OAIHttpRequestWorker *worker);
    void deleteClientProfileCallback(OAIHttpRequestWorker *worker);
    void getProfileCallback(OAIHttpRequestWorker *worker);
    void getProfileByVersionCallback(OAIHttpRequestWorker *worker);
    void getUnmaskedProfileCallback(OAIHttpRequestWorker *worker);
    void getUnmaskedProfileByVersionCallback(OAIHttpRequestWorker *worker);
    void updateClientProfileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createClientProfileSignal(OAIObject summary);
    void deleteClientProfileSignal();
    void getProfileSignal(QList<QJsonValue> summary);
    void getProfileByVersionSignal(QList<QJsonValue> summary);
    void getUnmaskedProfileSignal(QList<QJsonValue> summary);
    void getUnmaskedProfileByVersionSignal(QList<QJsonValue> summary);
    void updateClientProfileSignal(OAIObject summary);


    void createClientProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteClientProfileSignalFull(OAIHttpRequestWorker *worker);
    void getProfileSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void getProfileByVersionSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void getUnmaskedProfileSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void getUnmaskedProfileByVersionSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void updateClientProfileSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use createClientProfileSignalError() instead")
    void createClientProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createClientProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteClientProfileSignalError() instead")
    void deleteClientProfileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteClientProfileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileSignalError() instead")
    void getProfileSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileByVersionSignalError() instead")
    void getProfileByVersionSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileByVersionSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUnmaskedProfileSignalError() instead")
    void getUnmaskedProfileSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUnmaskedProfileSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUnmaskedProfileByVersionSignalError() instead")
    void getUnmaskedProfileByVersionSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUnmaskedProfileByVersionSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientProfileSignalError() instead")
    void updateClientProfileSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientProfileSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createClientProfileSignalErrorFull() instead")
    void createClientProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createClientProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteClientProfileSignalErrorFull() instead")
    void deleteClientProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteClientProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileSignalErrorFull() instead")
    void getProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileByVersionSignalErrorFull() instead")
    void getProfileByVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileByVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUnmaskedProfileSignalErrorFull() instead")
    void getUnmaskedProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUnmaskedProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUnmaskedProfileByVersionSignalErrorFull() instead")
    void getUnmaskedProfileByVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUnmaskedProfileByVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateClientProfileSignalErrorFull() instead")
    void updateClientProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateClientProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
