/**
 * Cambase.io
 * Cambase.io is a project by Evercam.io in order to make it easier for software developers to have a reliable, up to date source of model hardware information available via a public API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecordersApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIRecordersApi::OAIRecordersApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIRecordersApi::~OAIRecordersApi() {
}

void OAIRecordersApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://api.cambase.io/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("apiV1RecordersCreate", defaultConf);
    _serverIndices.insert("apiV1RecordersCreate", 0);
    _serverConfigs.insert("apiV1RecordersIdJsonPatch", defaultConf);
    _serverIndices.insert("apiV1RecordersIdJsonPatch", 0);
    _serverConfigs.insert("apiV1RecordersIdJsonPut", defaultConf);
    _serverIndices.insert("apiV1RecordersIdJsonPut", 0);
    _serverConfigs.insert("apiV1RecordersIndex", defaultConf);
    _serverIndices.insert("apiV1RecordersIndex", 0);
    _serverConfigs.insert("apiV1RecordersSearch", defaultConf);
    _serverIndices.insert("apiV1RecordersSearch", 0);
    _serverConfigs.insert("apiV1RecordersShow", defaultConf);
    _serverIndices.insert("apiV1RecordersShow", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIRecordersApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIRecordersApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIRecordersApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIRecordersApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIRecordersApi::setUsername(const QString &username) {
    _username = username;
}

void OAIRecordersApi::setPassword(const QString &password) {
    _password = password;
}


void OAIRecordersApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIRecordersApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIRecordersApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIRecordersApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIRecordersApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIRecordersApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIRecordersApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIRecordersApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIRecordersApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIRecordersApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIRecordersApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIRecordersApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIRecordersApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIRecordersApi::apiV1RecordersCreate(const QString &vendor_id, const QString &recorder_model, const QString &recorder_name, const QString &recorder_recorder_type, const ::OpenAPI::OptionalParam<QString> &recorder_resolution, const ::OpenAPI::OptionalParam<QString> &recorder_onvif, const ::OpenAPI::OptionalParam<QString> &recorder_psia, const ::OpenAPI::OptionalParam<QString> &recorder_ptz, const ::OpenAPI::OptionalParam<QString> &recorder_discontinued, const ::OpenAPI::OptionalParam<QString> &recorder_support_3rdparty, const ::OpenAPI::OptionalParam<QString> &recorder_sd_card, const ::OpenAPI::OptionalParam<QString> &recorder_upnp, const ::OpenAPI::OptionalParam<QString> &recorder_hot_swap, const ::OpenAPI::OptionalParam<QString> &recorder_hdmi, const ::OpenAPI::OptionalParam<QString> &recorder_digital_io, const ::OpenAPI::OptionalParam<QString> &recorder_audio_in, const ::OpenAPI::OptionalParam<QString> &recorder_audio_out, const ::OpenAPI::OptionalParam<QString> &recorder_input_channels, const ::OpenAPI::OptionalParam<QString> &recorder_playback_channels, const ::OpenAPI::OptionalParam<QString> &recorder_usb, const ::OpenAPI::OptionalParam<QString> &recorder_sdhc, const ::OpenAPI::OptionalParam<QString> &recorder_mobile_access, const ::OpenAPI::OptionalParam<QString> &recorder_alarms, const ::OpenAPI::OptionalParam<QString> &recorder_raid_support, const ::OpenAPI::OptionalParam<QString> &recorder_storage, const ::OpenAPI::OptionalParam<QString> &recorder_additional_information, const ::OpenAPI::OptionalParam<QString> &recorder_default_username, const ::OpenAPI::OptionalParam<QString> &recorder_default_password, const ::OpenAPI::OptionalParam<QString> &recorder_jpeg_url, const ::OpenAPI::OptionalParam<QString> &recorder_h264_url, const ::OpenAPI::OptionalParam<QString> &recorder_mjpeg_url, const ::OpenAPI::OptionalParam<QString> &recorder_official_url) {
    QString fullPath = QString(_serverConfigs["apiV1RecordersCreate"][_serverIndices.value("apiV1RecordersCreate")].URL()+"/api/v1/recorders.json");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("vendor_id", ::OpenAPI::toStringValue(vendor_id));
    }
    
    {
        input.add_var("recorder[model]", ::OpenAPI::toStringValue(recorder_model));
    }
    
    {
        input.add_var("recorder[name]", ::OpenAPI::toStringValue(recorder_name));
    }
    
    {
        input.add_var("recorder[recorder_type]", ::OpenAPI::toStringValue(recorder_recorder_type));
    }
    if (recorder_resolution.hasValue())
    {
        input.add_var("recorder[resolution]", ::OpenAPI::toStringValue(recorder_resolution.value()));
    }
    if (recorder_onvif.hasValue())
    {
        input.add_var("recorder[onvif]", ::OpenAPI::toStringValue(recorder_onvif.value()));
    }
    if (recorder_psia.hasValue())
    {
        input.add_var("recorder[psia]", ::OpenAPI::toStringValue(recorder_psia.value()));
    }
    if (recorder_ptz.hasValue())
    {
        input.add_var("recorder[ptz]", ::OpenAPI::toStringValue(recorder_ptz.value()));
    }
    if (recorder_discontinued.hasValue())
    {
        input.add_var("recorder[discontinued]", ::OpenAPI::toStringValue(recorder_discontinued.value()));
    }
    if (recorder_support_3rdparty.hasValue())
    {
        input.add_var("recorder[support_3rdparty]", ::OpenAPI::toStringValue(recorder_support_3rdparty.value()));
    }
    if (recorder_sd_card.hasValue())
    {
        input.add_var("recorder[sd_card]", ::OpenAPI::toStringValue(recorder_sd_card.value()));
    }
    if (recorder_upnp.hasValue())
    {
        input.add_var("recorder[upnp]", ::OpenAPI::toStringValue(recorder_upnp.value()));
    }
    if (recorder_hot_swap.hasValue())
    {
        input.add_var("recorder[hot_swap]", ::OpenAPI::toStringValue(recorder_hot_swap.value()));
    }
    if (recorder_hdmi.hasValue())
    {
        input.add_var("recorder[hdmi]", ::OpenAPI::toStringValue(recorder_hdmi.value()));
    }
    if (recorder_digital_io.hasValue())
    {
        input.add_var("recorder[digital_io]", ::OpenAPI::toStringValue(recorder_digital_io.value()));
    }
    if (recorder_audio_in.hasValue())
    {
        input.add_var("recorder[audio_in]", ::OpenAPI::toStringValue(recorder_audio_in.value()));
    }
    if (recorder_audio_out.hasValue())
    {
        input.add_var("recorder[audio_out]", ::OpenAPI::toStringValue(recorder_audio_out.value()));
    }
    if (recorder_input_channels.hasValue())
    {
        input.add_var("recorder[input_channels]", ::OpenAPI::toStringValue(recorder_input_channels.value()));
    }
    if (recorder_playback_channels.hasValue())
    {
        input.add_var("recorder[playback_channels]", ::OpenAPI::toStringValue(recorder_playback_channels.value()));
    }
    if (recorder_usb.hasValue())
    {
        input.add_var("recorder[usb]", ::OpenAPI::toStringValue(recorder_usb.value()));
    }
    if (recorder_sdhc.hasValue())
    {
        input.add_var("recorder[sdhc]", ::OpenAPI::toStringValue(recorder_sdhc.value()));
    }
    if (recorder_mobile_access.hasValue())
    {
        input.add_var("recorder[mobile_access]", ::OpenAPI::toStringValue(recorder_mobile_access.value()));
    }
    if (recorder_alarms.hasValue())
    {
        input.add_var("recorder[alarms]", ::OpenAPI::toStringValue(recorder_alarms.value()));
    }
    if (recorder_raid_support.hasValue())
    {
        input.add_var("recorder[raid_support]", ::OpenAPI::toStringValue(recorder_raid_support.value()));
    }
    if (recorder_storage.hasValue())
    {
        input.add_var("recorder[storage]", ::OpenAPI::toStringValue(recorder_storage.value()));
    }
    if (recorder_additional_information.hasValue())
    {
        input.add_var("recorder[additional_information]", ::OpenAPI::toStringValue(recorder_additional_information.value()));
    }
    if (recorder_default_username.hasValue())
    {
        input.add_var("recorder[default_username]", ::OpenAPI::toStringValue(recorder_default_username.value()));
    }
    if (recorder_default_password.hasValue())
    {
        input.add_var("recorder[default_password]", ::OpenAPI::toStringValue(recorder_default_password.value()));
    }
    if (recorder_jpeg_url.hasValue())
    {
        input.add_var("recorder[jpeg_url]", ::OpenAPI::toStringValue(recorder_jpeg_url.value()));
    }
    if (recorder_h264_url.hasValue())
    {
        input.add_var("recorder[h264_url]", ::OpenAPI::toStringValue(recorder_h264_url.value()));
    }
    if (recorder_mjpeg_url.hasValue())
    {
        input.add_var("recorder[mjpeg_url]", ::OpenAPI::toStringValue(recorder_mjpeg_url.value()));
    }
    if (recorder_official_url.hasValue())
    {
        input.add_var("recorder[official_url]", ::OpenAPI::toStringValue(recorder_official_url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRecordersApi::apiV1RecordersCreateCallback);
    connect(this, &OAIRecordersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRecordersApi::apiV1RecordersCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiV1RecordersCreateSignal();
        Q_EMIT apiV1RecordersCreateSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiV1RecordersCreateSignalE(error_type, error_str);
        Q_EMIT apiV1RecordersCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiV1RecordersCreateSignalError(error_type, error_str);
        Q_EMIT apiV1RecordersCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRecordersApi::apiV1RecordersIdJsonPatch(const QString &id, const QString &vendor_id, const QString &recorder_model, const QString &recorder_name, const QString &recorder_recorder_type, const ::OpenAPI::OptionalParam<QString> &recorder_resolution, const ::OpenAPI::OptionalParam<QString> &recorder_onvif, const ::OpenAPI::OptionalParam<QString> &recorder_psia, const ::OpenAPI::OptionalParam<QString> &recorder_ptz, const ::OpenAPI::OptionalParam<QString> &recorder_discontinued, const ::OpenAPI::OptionalParam<QString> &recorder_support_3rdparty, const ::OpenAPI::OptionalParam<QString> &recorder_sd_card, const ::OpenAPI::OptionalParam<QString> &recorder_upnp, const ::OpenAPI::OptionalParam<QString> &recorder_hot_swap, const ::OpenAPI::OptionalParam<QString> &recorder_hdmi, const ::OpenAPI::OptionalParam<QString> &recorder_digital_io, const ::OpenAPI::OptionalParam<QString> &recorder_audio_in, const ::OpenAPI::OptionalParam<QString> &recorder_audio_out, const ::OpenAPI::OptionalParam<QString> &recorder_input_channels, const ::OpenAPI::OptionalParam<QString> &recorder_playback_channels, const ::OpenAPI::OptionalParam<QString> &recorder_usb, const ::OpenAPI::OptionalParam<QString> &recorder_sdhc, const ::OpenAPI::OptionalParam<QString> &recorder_mobile_access, const ::OpenAPI::OptionalParam<QString> &recorder_alarms, const ::OpenAPI::OptionalParam<QString> &recorder_raid_support, const ::OpenAPI::OptionalParam<QString> &recorder_storage, const ::OpenAPI::OptionalParam<QString> &recorder_additional_information, const ::OpenAPI::OptionalParam<QString> &recorder_default_username, const ::OpenAPI::OptionalParam<QString> &recorder_default_password, const ::OpenAPI::OptionalParam<QString> &recorder_jpeg_url, const ::OpenAPI::OptionalParam<QString> &recorder_h264_url, const ::OpenAPI::OptionalParam<QString> &recorder_mjpeg_url, const ::OpenAPI::OptionalParam<QString> &recorder_official_url) {
    QString fullPath = QString(_serverConfigs["apiV1RecordersIdJsonPatch"][_serverIndices.value("apiV1RecordersIdJsonPatch")].URL()+"/api/v1/recorders/{id}.json");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    
    {
        input.add_var("vendor_id", ::OpenAPI::toStringValue(vendor_id));
    }
    
    {
        input.add_var("recorder[model]", ::OpenAPI::toStringValue(recorder_model));
    }
    
    {
        input.add_var("recorder[name]", ::OpenAPI::toStringValue(recorder_name));
    }
    
    {
        input.add_var("recorder[recorder_type]", ::OpenAPI::toStringValue(recorder_recorder_type));
    }
    if (recorder_resolution.hasValue())
    {
        input.add_var("recorder[resolution]", ::OpenAPI::toStringValue(recorder_resolution.value()));
    }
    if (recorder_onvif.hasValue())
    {
        input.add_var("recorder[onvif]", ::OpenAPI::toStringValue(recorder_onvif.value()));
    }
    if (recorder_psia.hasValue())
    {
        input.add_var("recorder[psia]", ::OpenAPI::toStringValue(recorder_psia.value()));
    }
    if (recorder_ptz.hasValue())
    {
        input.add_var("recorder[ptz]", ::OpenAPI::toStringValue(recorder_ptz.value()));
    }
    if (recorder_discontinued.hasValue())
    {
        input.add_var("recorder[discontinued]", ::OpenAPI::toStringValue(recorder_discontinued.value()));
    }
    if (recorder_support_3rdparty.hasValue())
    {
        input.add_var("recorder[support_3rdparty]", ::OpenAPI::toStringValue(recorder_support_3rdparty.value()));
    }
    if (recorder_sd_card.hasValue())
    {
        input.add_var("recorder[sd_card]", ::OpenAPI::toStringValue(recorder_sd_card.value()));
    }
    if (recorder_upnp.hasValue())
    {
        input.add_var("recorder[upnp]", ::OpenAPI::toStringValue(recorder_upnp.value()));
    }
    if (recorder_hot_swap.hasValue())
    {
        input.add_var("recorder[hot_swap]", ::OpenAPI::toStringValue(recorder_hot_swap.value()));
    }
    if (recorder_hdmi.hasValue())
    {
        input.add_var("recorder[hdmi]", ::OpenAPI::toStringValue(recorder_hdmi.value()));
    }
    if (recorder_digital_io.hasValue())
    {
        input.add_var("recorder[digital_io]", ::OpenAPI::toStringValue(recorder_digital_io.value()));
    }
    if (recorder_audio_in.hasValue())
    {
        input.add_var("recorder[audio_in]", ::OpenAPI::toStringValue(recorder_audio_in.value()));
    }
    if (recorder_audio_out.hasValue())
    {
        input.add_var("recorder[audio_out]", ::OpenAPI::toStringValue(recorder_audio_out.value()));
    }
    if (recorder_input_channels.hasValue())
    {
        input.add_var("recorder[input_channels]", ::OpenAPI::toStringValue(recorder_input_channels.value()));
    }
    if (recorder_playback_channels.hasValue())
    {
        input.add_var("recorder[playback_channels]", ::OpenAPI::toStringValue(recorder_playback_channels.value()));
    }
    if (recorder_usb.hasValue())
    {
        input.add_var("recorder[usb]", ::OpenAPI::toStringValue(recorder_usb.value()));
    }
    if (recorder_sdhc.hasValue())
    {
        input.add_var("recorder[sdhc]", ::OpenAPI::toStringValue(recorder_sdhc.value()));
    }
    if (recorder_mobile_access.hasValue())
    {
        input.add_var("recorder[mobile_access]", ::OpenAPI::toStringValue(recorder_mobile_access.value()));
    }
    if (recorder_alarms.hasValue())
    {
        input.add_var("recorder[alarms]", ::OpenAPI::toStringValue(recorder_alarms.value()));
    }
    if (recorder_raid_support.hasValue())
    {
        input.add_var("recorder[raid_support]", ::OpenAPI::toStringValue(recorder_raid_support.value()));
    }
    if (recorder_storage.hasValue())
    {
        input.add_var("recorder[storage]", ::OpenAPI::toStringValue(recorder_storage.value()));
    }
    if (recorder_additional_information.hasValue())
    {
        input.add_var("recorder[additional_information]", ::OpenAPI::toStringValue(recorder_additional_information.value()));
    }
    if (recorder_default_username.hasValue())
    {
        input.add_var("recorder[default_username]", ::OpenAPI::toStringValue(recorder_default_username.value()));
    }
    if (recorder_default_password.hasValue())
    {
        input.add_var("recorder[default_password]", ::OpenAPI::toStringValue(recorder_default_password.value()));
    }
    if (recorder_jpeg_url.hasValue())
    {
        input.add_var("recorder[jpeg_url]", ::OpenAPI::toStringValue(recorder_jpeg_url.value()));
    }
    if (recorder_h264_url.hasValue())
    {
        input.add_var("recorder[h264_url]", ::OpenAPI::toStringValue(recorder_h264_url.value()));
    }
    if (recorder_mjpeg_url.hasValue())
    {
        input.add_var("recorder[mjpeg_url]", ::OpenAPI::toStringValue(recorder_mjpeg_url.value()));
    }
    if (recorder_official_url.hasValue())
    {
        input.add_var("recorder[official_url]", ::OpenAPI::toStringValue(recorder_official_url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRecordersApi::apiV1RecordersIdJsonPatchCallback);
    connect(this, &OAIRecordersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRecordersApi::apiV1RecordersIdJsonPatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiV1RecordersIdJsonPatchSignal();
        Q_EMIT apiV1RecordersIdJsonPatchSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiV1RecordersIdJsonPatchSignalE(error_type, error_str);
        Q_EMIT apiV1RecordersIdJsonPatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiV1RecordersIdJsonPatchSignalError(error_type, error_str);
        Q_EMIT apiV1RecordersIdJsonPatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRecordersApi::apiV1RecordersIdJsonPut(const QString &id, const QString &vendor_id, const QString &recorder_model, const QString &recorder_name, const QString &recorder_recorder_type, const ::OpenAPI::OptionalParam<QString> &recorder_resolution, const ::OpenAPI::OptionalParam<QString> &recorder_onvif, const ::OpenAPI::OptionalParam<QString> &recorder_psia, const ::OpenAPI::OptionalParam<QString> &recorder_ptz, const ::OpenAPI::OptionalParam<QString> &recorder_discontinued, const ::OpenAPI::OptionalParam<QString> &recorder_support_3rdparty, const ::OpenAPI::OptionalParam<QString> &recorder_sd_card, const ::OpenAPI::OptionalParam<QString> &recorder_upnp, const ::OpenAPI::OptionalParam<QString> &recorder_hot_swap, const ::OpenAPI::OptionalParam<QString> &recorder_hdmi, const ::OpenAPI::OptionalParam<QString> &recorder_digital_io, const ::OpenAPI::OptionalParam<QString> &recorder_audio_in, const ::OpenAPI::OptionalParam<QString> &recorder_audio_out, const ::OpenAPI::OptionalParam<QString> &recorder_input_channels, const ::OpenAPI::OptionalParam<QString> &recorder_playback_channels, const ::OpenAPI::OptionalParam<QString> &recorder_usb, const ::OpenAPI::OptionalParam<QString> &recorder_sdhc, const ::OpenAPI::OptionalParam<QString> &recorder_mobile_access, const ::OpenAPI::OptionalParam<QString> &recorder_alarms, const ::OpenAPI::OptionalParam<QString> &recorder_raid_support, const ::OpenAPI::OptionalParam<QString> &recorder_storage, const ::OpenAPI::OptionalParam<QString> &recorder_additional_information, const ::OpenAPI::OptionalParam<QString> &recorder_default_username, const ::OpenAPI::OptionalParam<QString> &recorder_default_password, const ::OpenAPI::OptionalParam<QString> &recorder_jpeg_url, const ::OpenAPI::OptionalParam<QString> &recorder_h264_url, const ::OpenAPI::OptionalParam<QString> &recorder_mjpeg_url, const ::OpenAPI::OptionalParam<QString> &recorder_official_url) {
    QString fullPath = QString(_serverConfigs["apiV1RecordersIdJsonPut"][_serverIndices.value("apiV1RecordersIdJsonPut")].URL()+"/api/v1/recorders/{id}.json");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    
    {
        input.add_var("vendor_id", ::OpenAPI::toStringValue(vendor_id));
    }
    
    {
        input.add_var("recorder[model]", ::OpenAPI::toStringValue(recorder_model));
    }
    
    {
        input.add_var("recorder[name]", ::OpenAPI::toStringValue(recorder_name));
    }
    
    {
        input.add_var("recorder[recorder_type]", ::OpenAPI::toStringValue(recorder_recorder_type));
    }
    if (recorder_resolution.hasValue())
    {
        input.add_var("recorder[resolution]", ::OpenAPI::toStringValue(recorder_resolution.value()));
    }
    if (recorder_onvif.hasValue())
    {
        input.add_var("recorder[onvif]", ::OpenAPI::toStringValue(recorder_onvif.value()));
    }
    if (recorder_psia.hasValue())
    {
        input.add_var("recorder[psia]", ::OpenAPI::toStringValue(recorder_psia.value()));
    }
    if (recorder_ptz.hasValue())
    {
        input.add_var("recorder[ptz]", ::OpenAPI::toStringValue(recorder_ptz.value()));
    }
    if (recorder_discontinued.hasValue())
    {
        input.add_var("recorder[discontinued]", ::OpenAPI::toStringValue(recorder_discontinued.value()));
    }
    if (recorder_support_3rdparty.hasValue())
    {
        input.add_var("recorder[support_3rdparty]", ::OpenAPI::toStringValue(recorder_support_3rdparty.value()));
    }
    if (recorder_sd_card.hasValue())
    {
        input.add_var("recorder[sd_card]", ::OpenAPI::toStringValue(recorder_sd_card.value()));
    }
    if (recorder_upnp.hasValue())
    {
        input.add_var("recorder[upnp]", ::OpenAPI::toStringValue(recorder_upnp.value()));
    }
    if (recorder_hot_swap.hasValue())
    {
        input.add_var("recorder[hot_swap]", ::OpenAPI::toStringValue(recorder_hot_swap.value()));
    }
    if (recorder_hdmi.hasValue())
    {
        input.add_var("recorder[hdmi]", ::OpenAPI::toStringValue(recorder_hdmi.value()));
    }
    if (recorder_digital_io.hasValue())
    {
        input.add_var("recorder[digital_io]", ::OpenAPI::toStringValue(recorder_digital_io.value()));
    }
    if (recorder_audio_in.hasValue())
    {
        input.add_var("recorder[audio_in]", ::OpenAPI::toStringValue(recorder_audio_in.value()));
    }
    if (recorder_audio_out.hasValue())
    {
        input.add_var("recorder[audio_out]", ::OpenAPI::toStringValue(recorder_audio_out.value()));
    }
    if (recorder_input_channels.hasValue())
    {
        input.add_var("recorder[input_channels]", ::OpenAPI::toStringValue(recorder_input_channels.value()));
    }
    if (recorder_playback_channels.hasValue())
    {
        input.add_var("recorder[playback_channels]", ::OpenAPI::toStringValue(recorder_playback_channels.value()));
    }
    if (recorder_usb.hasValue())
    {
        input.add_var("recorder[usb]", ::OpenAPI::toStringValue(recorder_usb.value()));
    }
    if (recorder_sdhc.hasValue())
    {
        input.add_var("recorder[sdhc]", ::OpenAPI::toStringValue(recorder_sdhc.value()));
    }
    if (recorder_mobile_access.hasValue())
    {
        input.add_var("recorder[mobile_access]", ::OpenAPI::toStringValue(recorder_mobile_access.value()));
    }
    if (recorder_alarms.hasValue())
    {
        input.add_var("recorder[alarms]", ::OpenAPI::toStringValue(recorder_alarms.value()));
    }
    if (recorder_raid_support.hasValue())
    {
        input.add_var("recorder[raid_support]", ::OpenAPI::toStringValue(recorder_raid_support.value()));
    }
    if (recorder_storage.hasValue())
    {
        input.add_var("recorder[storage]", ::OpenAPI::toStringValue(recorder_storage.value()));
    }
    if (recorder_additional_information.hasValue())
    {
        input.add_var("recorder[additional_information]", ::OpenAPI::toStringValue(recorder_additional_information.value()));
    }
    if (recorder_default_username.hasValue())
    {
        input.add_var("recorder[default_username]", ::OpenAPI::toStringValue(recorder_default_username.value()));
    }
    if (recorder_default_password.hasValue())
    {
        input.add_var("recorder[default_password]", ::OpenAPI::toStringValue(recorder_default_password.value()));
    }
    if (recorder_jpeg_url.hasValue())
    {
        input.add_var("recorder[jpeg_url]", ::OpenAPI::toStringValue(recorder_jpeg_url.value()));
    }
    if (recorder_h264_url.hasValue())
    {
        input.add_var("recorder[h264_url]", ::OpenAPI::toStringValue(recorder_h264_url.value()));
    }
    if (recorder_mjpeg_url.hasValue())
    {
        input.add_var("recorder[mjpeg_url]", ::OpenAPI::toStringValue(recorder_mjpeg_url.value()));
    }
    if (recorder_official_url.hasValue())
    {
        input.add_var("recorder[official_url]", ::OpenAPI::toStringValue(recorder_official_url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRecordersApi::apiV1RecordersIdJsonPutCallback);
    connect(this, &OAIRecordersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRecordersApi::apiV1RecordersIdJsonPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiV1RecordersIdJsonPutSignal();
        Q_EMIT apiV1RecordersIdJsonPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiV1RecordersIdJsonPutSignalE(error_type, error_str);
        Q_EMIT apiV1RecordersIdJsonPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiV1RecordersIdJsonPutSignalError(error_type, error_str);
        Q_EMIT apiV1RecordersIdJsonPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRecordersApi::apiV1RecordersIndex(const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &order) {
    QString fullPath = QString(_serverConfigs["apiV1RecordersIndex"][_serverIndices.value("apiV1RecordersIndex")].URL()+"/api/v1/recorders.json");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (order.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "order", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("order")).append(querySuffix).append(QUrl::toPercentEncoding(order.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRecordersApi::apiV1RecordersIndexCallback);
    connect(this, &OAIRecordersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRecordersApi::apiV1RecordersIndexCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiV1RecordersIndexSignal();
        Q_EMIT apiV1RecordersIndexSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiV1RecordersIndexSignalE(error_type, error_str);
        Q_EMIT apiV1RecordersIndexSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiV1RecordersIndexSignalError(error_type, error_str);
        Q_EMIT apiV1RecordersIndexSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRecordersApi::apiV1RecordersSearch(const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &q_model_cont, const ::OpenAPI::OptionalParam<QString> &q_vendor_name_cont, const ::OpenAPI::OptionalParam<QString> &q_sdhc_eq, const ::OpenAPI::OptionalParam<QString> &q_type_eq, const ::OpenAPI::OptionalParam<QString> &q_resolution_eq, const ::OpenAPI::OptionalParam<QString> &q_input_channels_eq, const ::OpenAPI::OptionalParam<QString> &q_playback_channels_eq, const ::OpenAPI::OptionalParam<QString> &q_onvif_true, const ::OpenAPI::OptionalParam<QString> &q_psia_true, const ::OpenAPI::OptionalParam<QString> &q_ptz_true, const ::OpenAPI::OptionalParam<QString> &q_sd_card_true, const ::OpenAPI::OptionalParam<QString> &q_upnp_true, const ::OpenAPI::OptionalParam<QString> &q_audio_in_true, const ::OpenAPI::OptionalParam<QString> &q_audio_out_true, const ::OpenAPI::OptionalParam<QString> &q_hdmi_true, const ::OpenAPI::OptionalParam<QString> &q_hot_swap_true, const ::OpenAPI::OptionalParam<QString> &q_support_3rdparty_true, const ::OpenAPI::OptionalParam<QString> &q_digital_io_true) {
    QString fullPath = QString(_serverConfigs["apiV1RecordersSearch"][_serverIndices.value("apiV1RecordersSearch")].URL()+"/api/v1/recorders/search.json");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (q_model_cont.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[model_cont]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[model_cont]")).append(querySuffix).append(QUrl::toPercentEncoding(q_model_cont.stringValue()));
    }
    if (q_vendor_name_cont.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[vendor_name_cont]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[vendor_name_cont]")).append(querySuffix).append(QUrl::toPercentEncoding(q_vendor_name_cont.stringValue()));
    }
    if (q_sdhc_eq.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[sdhc_eq]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[sdhc_eq]")).append(querySuffix).append(QUrl::toPercentEncoding(q_sdhc_eq.stringValue()));
    }
    if (q_type_eq.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[type_eq]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[type_eq]")).append(querySuffix).append(QUrl::toPercentEncoding(q_type_eq.stringValue()));
    }
    if (q_resolution_eq.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[resolution_eq]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[resolution_eq]")).append(querySuffix).append(QUrl::toPercentEncoding(q_resolution_eq.stringValue()));
    }
    if (q_input_channels_eq.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[input_channels_eq]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[input_channels_eq]")).append(querySuffix).append(QUrl::toPercentEncoding(q_input_channels_eq.stringValue()));
    }
    if (q_playback_channels_eq.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[playback_channels_eq]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[playback_channels_eq]")).append(querySuffix).append(QUrl::toPercentEncoding(q_playback_channels_eq.stringValue()));
    }
    if (q_onvif_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[onvif_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[onvif_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_onvif_true.stringValue()));
    }
    if (q_psia_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[psia_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[psia_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_psia_true.stringValue()));
    }
    if (q_ptz_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[ptz_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[ptz_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_ptz_true.stringValue()));
    }
    if (q_sd_card_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[sd_card_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[sd_card_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_sd_card_true.stringValue()));
    }
    if (q_upnp_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[upnp_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[upnp_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_upnp_true.stringValue()));
    }
    if (q_audio_in_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[audio_in_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[audio_in_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_audio_in_true.stringValue()));
    }
    if (q_audio_out_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[audio_out_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[audio_out_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_audio_out_true.stringValue()));
    }
    if (q_hdmi_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[hdmi_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[hdmi_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_hdmi_true.stringValue()));
    }
    if (q_hot_swap_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[hot_swap_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[hot_swap_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_hot_swap_true.stringValue()));
    }
    if (q_support_3rdparty_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[support_3rdparty_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[support_3rdparty_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_support_3rdparty_true.stringValue()));
    }
    if (q_digital_io_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[digital_io_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[digital_io_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_digital_io_true.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRecordersApi::apiV1RecordersSearchCallback);
    connect(this, &OAIRecordersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRecordersApi::apiV1RecordersSearchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiV1RecordersSearchSignal();
        Q_EMIT apiV1RecordersSearchSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiV1RecordersSearchSignalE(error_type, error_str);
        Q_EMIT apiV1RecordersSearchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiV1RecordersSearchSignalError(error_type, error_str);
        Q_EMIT apiV1RecordersSearchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRecordersApi::apiV1RecordersShow(const qint32 &id) {
    QString fullPath = QString(_serverConfigs["apiV1RecordersShow"][_serverIndices.value("apiV1RecordersShow")].URL()+"/api/v1/recorders/{id}.json");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRecordersApi::apiV1RecordersShowCallback);
    connect(this, &OAIRecordersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRecordersApi::apiV1RecordersShowCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiV1RecordersShowSignal();
        Q_EMIT apiV1RecordersShowSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiV1RecordersShowSignalE(error_type, error_str);
        Q_EMIT apiV1RecordersShowSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiV1RecordersShowSignalError(error_type, error_str);
        Q_EMIT apiV1RecordersShowSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRecordersApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
