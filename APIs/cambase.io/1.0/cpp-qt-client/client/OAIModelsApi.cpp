/**
 * Cambase.io
 * Cambase.io is a project by Evercam.io in order to make it easier for software developers to have a reliable, up to date source of model hardware information available via a public API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIModelsApi::OAIModelsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIModelsApi::~OAIModelsApi() {
}

void OAIModelsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://api.cambase.io/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("apiV1ModelsCreate", defaultConf);
    _serverIndices.insert("apiV1ModelsCreate", 0);
    _serverConfigs.insert("apiV1ModelsIdJsonPatch", defaultConf);
    _serverIndices.insert("apiV1ModelsIdJsonPatch", 0);
    _serverConfigs.insert("apiV1ModelsIdJsonPut", defaultConf);
    _serverIndices.insert("apiV1ModelsIdJsonPut", 0);
    _serverConfigs.insert("apiV1ModelsIndex", defaultConf);
    _serverIndices.insert("apiV1ModelsIndex", 0);
    _serverConfigs.insert("apiV1ModelsSearch", defaultConf);
    _serverIndices.insert("apiV1ModelsSearch", 0);
    _serverConfigs.insert("apiV1ModelsShow", defaultConf);
    _serverIndices.insert("apiV1ModelsShow", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIModelsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIModelsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIModelsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIModelsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIModelsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIModelsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIModelsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIModelsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIModelsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIModelsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIModelsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIModelsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIModelsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIModelsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIModelsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIModelsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIModelsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIModelsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIModelsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIModelsApi::apiV1ModelsCreate(const QString &vendor_id, const QString &model_model, const ::OpenAPI::OptionalParam<QString> &model_shape, const ::OpenAPI::OptionalParam<QString> &model_resolution, const ::OpenAPI::OptionalParam<QString> &model_onvif, const ::OpenAPI::OptionalParam<QString> &model_psia, const ::OpenAPI::OptionalParam<QString> &model_ptz, const ::OpenAPI::OptionalParam<QString> &model_infrared, const ::OpenAPI::OptionalParam<QString> &model_varifocal, const ::OpenAPI::OptionalParam<QString> &model_sd_card, const ::OpenAPI::OptionalParam<QString> &model_upnp, const ::OpenAPI::OptionalParam<QString> &model_audio_in, const ::OpenAPI::OptionalParam<QString> &model_audio_out, const ::OpenAPI::OptionalParam<QString> &model_default_username, const ::OpenAPI::OptionalParam<QString> &model_default_password, const ::OpenAPI::OptionalParam<QString> &model_jpeg_url, const ::OpenAPI::OptionalParam<QString> &model_h264_url, const ::OpenAPI::OptionalParam<QString> &model_mjpeg_url) {
    QString fullPath = QString(_serverConfigs["apiV1ModelsCreate"][_serverIndices.value("apiV1ModelsCreate")].URL()+"/api/v1/models.json");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_var("vendor_id", ::OpenAPI::toStringValue(vendor_id));
    }
    
    {
        input.add_var("model[model]", ::OpenAPI::toStringValue(model_model));
    }
    if (model_shape.hasValue())
    {
        input.add_var("model[shape]", ::OpenAPI::toStringValue(model_shape.value()));
    }
    if (model_resolution.hasValue())
    {
        input.add_var("model[resolution]", ::OpenAPI::toStringValue(model_resolution.value()));
    }
    if (model_onvif.hasValue())
    {
        input.add_var("model[onvif]", ::OpenAPI::toStringValue(model_onvif.value()));
    }
    if (model_psia.hasValue())
    {
        input.add_var("model[psia]", ::OpenAPI::toStringValue(model_psia.value()));
    }
    if (model_ptz.hasValue())
    {
        input.add_var("model[ptz]", ::OpenAPI::toStringValue(model_ptz.value()));
    }
    if (model_infrared.hasValue())
    {
        input.add_var("model[infrared]", ::OpenAPI::toStringValue(model_infrared.value()));
    }
    if (model_varifocal.hasValue())
    {
        input.add_var("model[varifocal]", ::OpenAPI::toStringValue(model_varifocal.value()));
    }
    if (model_sd_card.hasValue())
    {
        input.add_var("model[sd_card]", ::OpenAPI::toStringValue(model_sd_card.value()));
    }
    if (model_upnp.hasValue())
    {
        input.add_var("model[upnp]", ::OpenAPI::toStringValue(model_upnp.value()));
    }
    if (model_audio_in.hasValue())
    {
        input.add_var("model[audio_in]", ::OpenAPI::toStringValue(model_audio_in.value()));
    }
    if (model_audio_out.hasValue())
    {
        input.add_var("model[audio_out]", ::OpenAPI::toStringValue(model_audio_out.value()));
    }
    if (model_default_username.hasValue())
    {
        input.add_var("model[default_username]", ::OpenAPI::toStringValue(model_default_username.value()));
    }
    if (model_default_password.hasValue())
    {
        input.add_var("model[default_password]", ::OpenAPI::toStringValue(model_default_password.value()));
    }
    if (model_jpeg_url.hasValue())
    {
        input.add_var("model[jpeg_url]", ::OpenAPI::toStringValue(model_jpeg_url.value()));
    }
    if (model_h264_url.hasValue())
    {
        input.add_var("model[h264_url]", ::OpenAPI::toStringValue(model_h264_url.value()));
    }
    if (model_mjpeg_url.hasValue())
    {
        input.add_var("model[mjpeg_url]", ::OpenAPI::toStringValue(model_mjpeg_url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIModelsApi::apiV1ModelsCreateCallback);
    connect(this, &OAIModelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIModelsApi::apiV1ModelsCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiV1ModelsCreateSignal();
        Q_EMIT apiV1ModelsCreateSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiV1ModelsCreateSignalE(error_type, error_str);
        Q_EMIT apiV1ModelsCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiV1ModelsCreateSignalError(error_type, error_str);
        Q_EMIT apiV1ModelsCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIModelsApi::apiV1ModelsIdJsonPatch(const QString &id, const QString &vendor_id, const ::OpenAPI::OptionalParam<QString> &model_model, const ::OpenAPI::OptionalParam<QString> &model_shape, const ::OpenAPI::OptionalParam<QString> &model_resolution, const ::OpenAPI::OptionalParam<QString> &model_onvif, const ::OpenAPI::OptionalParam<QString> &model_psia, const ::OpenAPI::OptionalParam<QString> &model_ptz, const ::OpenAPI::OptionalParam<QString> &model_infrared, const ::OpenAPI::OptionalParam<QString> &model_varifocal, const ::OpenAPI::OptionalParam<QString> &model_sd_card, const ::OpenAPI::OptionalParam<QString> &model_upnp, const ::OpenAPI::OptionalParam<QString> &model_audio_in, const ::OpenAPI::OptionalParam<QString> &model_audio_out, const ::OpenAPI::OptionalParam<QString> &model_default_username, const ::OpenAPI::OptionalParam<QString> &model_default_password, const ::OpenAPI::OptionalParam<QString> &model_jpeg_url, const ::OpenAPI::OptionalParam<QString> &model_h264_url, const ::OpenAPI::OptionalParam<QString> &model_mjpeg_url) {
    QString fullPath = QString(_serverConfigs["apiV1ModelsIdJsonPatch"][_serverIndices.value("apiV1ModelsIdJsonPatch")].URL()+"/api/v1/models/{id}.json");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    
    {
        input.add_var("vendor_id", ::OpenAPI::toStringValue(vendor_id));
    }
    if (model_model.hasValue())
    {
        input.add_var("model[model]", ::OpenAPI::toStringValue(model_model.value()));
    }
    if (model_shape.hasValue())
    {
        input.add_var("model[shape]", ::OpenAPI::toStringValue(model_shape.value()));
    }
    if (model_resolution.hasValue())
    {
        input.add_var("model[resolution]", ::OpenAPI::toStringValue(model_resolution.value()));
    }
    if (model_onvif.hasValue())
    {
        input.add_var("model[onvif]", ::OpenAPI::toStringValue(model_onvif.value()));
    }
    if (model_psia.hasValue())
    {
        input.add_var("model[psia]", ::OpenAPI::toStringValue(model_psia.value()));
    }
    if (model_ptz.hasValue())
    {
        input.add_var("model[ptz]", ::OpenAPI::toStringValue(model_ptz.value()));
    }
    if (model_infrared.hasValue())
    {
        input.add_var("model[infrared]", ::OpenAPI::toStringValue(model_infrared.value()));
    }
    if (model_varifocal.hasValue())
    {
        input.add_var("model[varifocal]", ::OpenAPI::toStringValue(model_varifocal.value()));
    }
    if (model_sd_card.hasValue())
    {
        input.add_var("model[sd_card]", ::OpenAPI::toStringValue(model_sd_card.value()));
    }
    if (model_upnp.hasValue())
    {
        input.add_var("model[upnp]", ::OpenAPI::toStringValue(model_upnp.value()));
    }
    if (model_audio_in.hasValue())
    {
        input.add_var("model[audio_in]", ::OpenAPI::toStringValue(model_audio_in.value()));
    }
    if (model_audio_out.hasValue())
    {
        input.add_var("model[audio_out]", ::OpenAPI::toStringValue(model_audio_out.value()));
    }
    if (model_default_username.hasValue())
    {
        input.add_var("model[default_username]", ::OpenAPI::toStringValue(model_default_username.value()));
    }
    if (model_default_password.hasValue())
    {
        input.add_var("model[default_password]", ::OpenAPI::toStringValue(model_default_password.value()));
    }
    if (model_jpeg_url.hasValue())
    {
        input.add_var("model[jpeg_url]", ::OpenAPI::toStringValue(model_jpeg_url.value()));
    }
    if (model_h264_url.hasValue())
    {
        input.add_var("model[h264_url]", ::OpenAPI::toStringValue(model_h264_url.value()));
    }
    if (model_mjpeg_url.hasValue())
    {
        input.add_var("model[mjpeg_url]", ::OpenAPI::toStringValue(model_mjpeg_url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIModelsApi::apiV1ModelsIdJsonPatchCallback);
    connect(this, &OAIModelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIModelsApi::apiV1ModelsIdJsonPatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiV1ModelsIdJsonPatchSignal();
        Q_EMIT apiV1ModelsIdJsonPatchSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiV1ModelsIdJsonPatchSignalE(error_type, error_str);
        Q_EMIT apiV1ModelsIdJsonPatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiV1ModelsIdJsonPatchSignalError(error_type, error_str);
        Q_EMIT apiV1ModelsIdJsonPatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIModelsApi::apiV1ModelsIdJsonPut(const QString &id, const QString &vendor_id, const ::OpenAPI::OptionalParam<QString> &model_model, const ::OpenAPI::OptionalParam<QString> &model_shape, const ::OpenAPI::OptionalParam<QString> &model_resolution, const ::OpenAPI::OptionalParam<QString> &model_onvif, const ::OpenAPI::OptionalParam<QString> &model_psia, const ::OpenAPI::OptionalParam<QString> &model_ptz, const ::OpenAPI::OptionalParam<QString> &model_infrared, const ::OpenAPI::OptionalParam<QString> &model_varifocal, const ::OpenAPI::OptionalParam<QString> &model_sd_card, const ::OpenAPI::OptionalParam<QString> &model_upnp, const ::OpenAPI::OptionalParam<QString> &model_audio_in, const ::OpenAPI::OptionalParam<QString> &model_audio_out, const ::OpenAPI::OptionalParam<QString> &model_default_username, const ::OpenAPI::OptionalParam<QString> &model_default_password, const ::OpenAPI::OptionalParam<QString> &model_jpeg_url, const ::OpenAPI::OptionalParam<QString> &model_h264_url, const ::OpenAPI::OptionalParam<QString> &model_mjpeg_url) {
    QString fullPath = QString(_serverConfigs["apiV1ModelsIdJsonPut"][_serverIndices.value("apiV1ModelsIdJsonPut")].URL()+"/api/v1/models/{id}.json");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    
    {
        input.add_var("vendor_id", ::OpenAPI::toStringValue(vendor_id));
    }
    if (model_model.hasValue())
    {
        input.add_var("model[model]", ::OpenAPI::toStringValue(model_model.value()));
    }
    if (model_shape.hasValue())
    {
        input.add_var("model[shape]", ::OpenAPI::toStringValue(model_shape.value()));
    }
    if (model_resolution.hasValue())
    {
        input.add_var("model[resolution]", ::OpenAPI::toStringValue(model_resolution.value()));
    }
    if (model_onvif.hasValue())
    {
        input.add_var("model[onvif]", ::OpenAPI::toStringValue(model_onvif.value()));
    }
    if (model_psia.hasValue())
    {
        input.add_var("model[psia]", ::OpenAPI::toStringValue(model_psia.value()));
    }
    if (model_ptz.hasValue())
    {
        input.add_var("model[ptz]", ::OpenAPI::toStringValue(model_ptz.value()));
    }
    if (model_infrared.hasValue())
    {
        input.add_var("model[infrared]", ::OpenAPI::toStringValue(model_infrared.value()));
    }
    if (model_varifocal.hasValue())
    {
        input.add_var("model[varifocal]", ::OpenAPI::toStringValue(model_varifocal.value()));
    }
    if (model_sd_card.hasValue())
    {
        input.add_var("model[sd_card]", ::OpenAPI::toStringValue(model_sd_card.value()));
    }
    if (model_upnp.hasValue())
    {
        input.add_var("model[upnp]", ::OpenAPI::toStringValue(model_upnp.value()));
    }
    if (model_audio_in.hasValue())
    {
        input.add_var("model[audio_in]", ::OpenAPI::toStringValue(model_audio_in.value()));
    }
    if (model_audio_out.hasValue())
    {
        input.add_var("model[audio_out]", ::OpenAPI::toStringValue(model_audio_out.value()));
    }
    if (model_default_username.hasValue())
    {
        input.add_var("model[default_username]", ::OpenAPI::toStringValue(model_default_username.value()));
    }
    if (model_default_password.hasValue())
    {
        input.add_var("model[default_password]", ::OpenAPI::toStringValue(model_default_password.value()));
    }
    if (model_jpeg_url.hasValue())
    {
        input.add_var("model[jpeg_url]", ::OpenAPI::toStringValue(model_jpeg_url.value()));
    }
    if (model_h264_url.hasValue())
    {
        input.add_var("model[h264_url]", ::OpenAPI::toStringValue(model_h264_url.value()));
    }
    if (model_mjpeg_url.hasValue())
    {
        input.add_var("model[mjpeg_url]", ::OpenAPI::toStringValue(model_mjpeg_url.value()));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIModelsApi::apiV1ModelsIdJsonPutCallback);
    connect(this, &OAIModelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIModelsApi::apiV1ModelsIdJsonPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiV1ModelsIdJsonPutSignal();
        Q_EMIT apiV1ModelsIdJsonPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiV1ModelsIdJsonPutSignalE(error_type, error_str);
        Q_EMIT apiV1ModelsIdJsonPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiV1ModelsIdJsonPutSignalError(error_type, error_str);
        Q_EMIT apiV1ModelsIdJsonPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIModelsApi::apiV1ModelsIndex(const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &order) {
    QString fullPath = QString(_serverConfigs["apiV1ModelsIndex"][_serverIndices.value("apiV1ModelsIndex")].URL()+"/api/v1/models.json");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (order.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "order", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("order")).append(querySuffix).append(QUrl::toPercentEncoding(order.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIModelsApi::apiV1ModelsIndexCallback);
    connect(this, &OAIModelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIModelsApi::apiV1ModelsIndexCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiV1ModelsIndexSignal();
        Q_EMIT apiV1ModelsIndexSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiV1ModelsIndexSignalE(error_type, error_str);
        Q_EMIT apiV1ModelsIndexSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiV1ModelsIndexSignalError(error_type, error_str);
        Q_EMIT apiV1ModelsIndexSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIModelsApi::apiV1ModelsSearch(const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &q_model_cont, const ::OpenAPI::OptionalParam<QString> &q_manufacturer_name_cont, const ::OpenAPI::OptionalParam<QString> &q_shape_eq, const ::OpenAPI::OptionalParam<QString> &q_resolution_eq, const ::OpenAPI::OptionalParam<QString> &q_onvif_true, const ::OpenAPI::OptionalParam<QString> &q_psia_true, const ::OpenAPI::OptionalParam<QString> &q_ptz_true, const ::OpenAPI::OptionalParam<QString> &q_infrared_true, const ::OpenAPI::OptionalParam<QString> &q_varifocal_true, const ::OpenAPI::OptionalParam<QString> &q_sd_card_true, const ::OpenAPI::OptionalParam<QString> &q_upnp_true, const ::OpenAPI::OptionalParam<QString> &q_audio_in_true, const ::OpenAPI::OptionalParam<QString> &q_audio_out_true) {
    QString fullPath = QString(_serverConfigs["apiV1ModelsSearch"][_serverIndices.value("apiV1ModelsSearch")].URL()+"/api/v1/models/search.json");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (q_model_cont.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[model_cont]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[model_cont]")).append(querySuffix).append(QUrl::toPercentEncoding(q_model_cont.stringValue()));
    }
    if (q_manufacturer_name_cont.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[manufacturer_name_cont]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[manufacturer_name_cont]")).append(querySuffix).append(QUrl::toPercentEncoding(q_manufacturer_name_cont.stringValue()));
    }
    if (q_shape_eq.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[shape_eq]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[shape_eq]")).append(querySuffix).append(QUrl::toPercentEncoding(q_shape_eq.stringValue()));
    }
    if (q_resolution_eq.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[resolution_eq]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[resolution_eq]")).append(querySuffix).append(QUrl::toPercentEncoding(q_resolution_eq.stringValue()));
    }
    if (q_onvif_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[onvif_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[onvif_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_onvif_true.stringValue()));
    }
    if (q_psia_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[psia_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[psia_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_psia_true.stringValue()));
    }
    if (q_ptz_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[ptz_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[ptz_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_ptz_true.stringValue()));
    }
    if (q_infrared_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[infrared_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[infrared_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_infrared_true.stringValue()));
    }
    if (q_varifocal_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[varifocal_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[varifocal_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_varifocal_true.stringValue()));
    }
    if (q_sd_card_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[sd_card_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[sd_card_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_sd_card_true.stringValue()));
    }
    if (q_upnp_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[upnp_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[upnp_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_upnp_true.stringValue()));
    }
    if (q_audio_in_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[audio_in_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[audio_in_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_audio_in_true.stringValue()));
    }
    if (q_audio_out_true.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "q[audio_out_true]", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("q[audio_out_true]")).append(querySuffix).append(QUrl::toPercentEncoding(q_audio_out_true.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIModelsApi::apiV1ModelsSearchCallback);
    connect(this, &OAIModelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIModelsApi::apiV1ModelsSearchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiV1ModelsSearchSignal();
        Q_EMIT apiV1ModelsSearchSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiV1ModelsSearchSignalE(error_type, error_str);
        Q_EMIT apiV1ModelsSearchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiV1ModelsSearchSignalError(error_type, error_str);
        Q_EMIT apiV1ModelsSearchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIModelsApi::apiV1ModelsShow(const qint32 &id) {
    QString fullPath = QString(_serverConfigs["apiV1ModelsShow"][_serverIndices.value("apiV1ModelsShow")].URL()+"/api/v1/models/{id}.json");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIModelsApi::apiV1ModelsShowCallback);
    connect(this, &OAIModelsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIModelsApi::apiV1ModelsShowCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiV1ModelsShowSignal();
        Q_EMIT apiV1ModelsShowSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiV1ModelsShowSignalE(error_type, error_str);
        Q_EMIT apiV1ModelsShowSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiV1ModelsShowSignalError(error_type, error_str);
        Q_EMIT apiV1ModelsShowSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIModelsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
