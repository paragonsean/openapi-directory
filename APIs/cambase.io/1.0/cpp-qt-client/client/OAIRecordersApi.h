/**
 * Cambase.io
 * Cambase.io is a project by Evercam.io in order to make it easier for software developers to have a reliable, up to date source of model hardware information available via a public API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRecordersApi_H
#define OAI_OAIRecordersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRecordersApi : public QObject {
    Q_OBJECT

public:
    OAIRecordersApi(const int timeOut = 0);
    ~OAIRecordersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  vendor_id QString [required]
    * @param[in]  recorder_model QString [required]
    * @param[in]  recorder_name QString [required]
    * @param[in]  recorder_recorder_type QString [required]
    * @param[in]  recorder_resolution QString [optional]
    * @param[in]  recorder_onvif QString [optional]
    * @param[in]  recorder_psia QString [optional]
    * @param[in]  recorder_ptz QString [optional]
    * @param[in]  recorder_discontinued QString [optional]
    * @param[in]  recorder_support_3rdparty QString [optional]
    * @param[in]  recorder_sd_card QString [optional]
    * @param[in]  recorder_upnp QString [optional]
    * @param[in]  recorder_hot_swap QString [optional]
    * @param[in]  recorder_hdmi QString [optional]
    * @param[in]  recorder_digital_io QString [optional]
    * @param[in]  recorder_audio_in QString [optional]
    * @param[in]  recorder_audio_out QString [optional]
    * @param[in]  recorder_input_channels QString [optional]
    * @param[in]  recorder_playback_channels QString [optional]
    * @param[in]  recorder_usb QString [optional]
    * @param[in]  recorder_sdhc QString [optional]
    * @param[in]  recorder_mobile_access QString [optional]
    * @param[in]  recorder_alarms QString [optional]
    * @param[in]  recorder_raid_support QString [optional]
    * @param[in]  recorder_storage QString [optional]
    * @param[in]  recorder_additional_information QString [optional]
    * @param[in]  recorder_default_username QString [optional]
    * @param[in]  recorder_default_password QString [optional]
    * @param[in]  recorder_jpeg_url QString [optional]
    * @param[in]  recorder_h264_url QString [optional]
    * @param[in]  recorder_mjpeg_url QString [optional]
    * @param[in]  recorder_official_url QString [optional]
    */
    virtual void apiV1RecordersCreate(const QString &vendor_id, const QString &recorder_model, const QString &recorder_name, const QString &recorder_recorder_type, const ::OpenAPI::OptionalParam<QString> &recorder_resolution = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_onvif = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_psia = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_ptz = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_discontinued = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_support_3rdparty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_sd_card = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_upnp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_hot_swap = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_hdmi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_digital_io = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_audio_in = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_audio_out = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_input_channels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_playback_channels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_usb = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_sdhc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_mobile_access = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_alarms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_raid_support = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_storage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_additional_information = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_default_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_default_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_jpeg_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_h264_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_mjpeg_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_official_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  vendor_id QString [required]
    * @param[in]  recorder_model QString [required]
    * @param[in]  recorder_name QString [required]
    * @param[in]  recorder_recorder_type QString [required]
    * @param[in]  recorder_resolution QString [optional]
    * @param[in]  recorder_onvif QString [optional]
    * @param[in]  recorder_psia QString [optional]
    * @param[in]  recorder_ptz QString [optional]
    * @param[in]  recorder_discontinued QString [optional]
    * @param[in]  recorder_support_3rdparty QString [optional]
    * @param[in]  recorder_sd_card QString [optional]
    * @param[in]  recorder_upnp QString [optional]
    * @param[in]  recorder_hot_swap QString [optional]
    * @param[in]  recorder_hdmi QString [optional]
    * @param[in]  recorder_digital_io QString [optional]
    * @param[in]  recorder_audio_in QString [optional]
    * @param[in]  recorder_audio_out QString [optional]
    * @param[in]  recorder_input_channels QString [optional]
    * @param[in]  recorder_playback_channels QString [optional]
    * @param[in]  recorder_usb QString [optional]
    * @param[in]  recorder_sdhc QString [optional]
    * @param[in]  recorder_mobile_access QString [optional]
    * @param[in]  recorder_alarms QString [optional]
    * @param[in]  recorder_raid_support QString [optional]
    * @param[in]  recorder_storage QString [optional]
    * @param[in]  recorder_additional_information QString [optional]
    * @param[in]  recorder_default_username QString [optional]
    * @param[in]  recorder_default_password QString [optional]
    * @param[in]  recorder_jpeg_url QString [optional]
    * @param[in]  recorder_h264_url QString [optional]
    * @param[in]  recorder_mjpeg_url QString [optional]
    * @param[in]  recorder_official_url QString [optional]
    */
    virtual void apiV1RecordersIdJsonPatch(const QString &id, const QString &vendor_id, const QString &recorder_model, const QString &recorder_name, const QString &recorder_recorder_type, const ::OpenAPI::OptionalParam<QString> &recorder_resolution = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_onvif = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_psia = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_ptz = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_discontinued = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_support_3rdparty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_sd_card = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_upnp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_hot_swap = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_hdmi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_digital_io = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_audio_in = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_audio_out = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_input_channels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_playback_channels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_usb = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_sdhc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_mobile_access = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_alarms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_raid_support = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_storage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_additional_information = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_default_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_default_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_jpeg_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_h264_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_mjpeg_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_official_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  vendor_id QString [required]
    * @param[in]  recorder_model QString [required]
    * @param[in]  recorder_name QString [required]
    * @param[in]  recorder_recorder_type QString [required]
    * @param[in]  recorder_resolution QString [optional]
    * @param[in]  recorder_onvif QString [optional]
    * @param[in]  recorder_psia QString [optional]
    * @param[in]  recorder_ptz QString [optional]
    * @param[in]  recorder_discontinued QString [optional]
    * @param[in]  recorder_support_3rdparty QString [optional]
    * @param[in]  recorder_sd_card QString [optional]
    * @param[in]  recorder_upnp QString [optional]
    * @param[in]  recorder_hot_swap QString [optional]
    * @param[in]  recorder_hdmi QString [optional]
    * @param[in]  recorder_digital_io QString [optional]
    * @param[in]  recorder_audio_in QString [optional]
    * @param[in]  recorder_audio_out QString [optional]
    * @param[in]  recorder_input_channels QString [optional]
    * @param[in]  recorder_playback_channels QString [optional]
    * @param[in]  recorder_usb QString [optional]
    * @param[in]  recorder_sdhc QString [optional]
    * @param[in]  recorder_mobile_access QString [optional]
    * @param[in]  recorder_alarms QString [optional]
    * @param[in]  recorder_raid_support QString [optional]
    * @param[in]  recorder_storage QString [optional]
    * @param[in]  recorder_additional_information QString [optional]
    * @param[in]  recorder_default_username QString [optional]
    * @param[in]  recorder_default_password QString [optional]
    * @param[in]  recorder_jpeg_url QString [optional]
    * @param[in]  recorder_h264_url QString [optional]
    * @param[in]  recorder_mjpeg_url QString [optional]
    * @param[in]  recorder_official_url QString [optional]
    */
    virtual void apiV1RecordersIdJsonPut(const QString &id, const QString &vendor_id, const QString &recorder_model, const QString &recorder_name, const QString &recorder_recorder_type, const ::OpenAPI::OptionalParam<QString> &recorder_resolution = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_onvif = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_psia = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_ptz = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_discontinued = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_support_3rdparty = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_sd_card = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_upnp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_hot_swap = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_hdmi = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_digital_io = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_audio_in = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_audio_out = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_input_channels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_playback_channels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_usb = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_sdhc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_mobile_access = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_alarms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_raid_support = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_storage = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_additional_information = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_default_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_default_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_jpeg_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_h264_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_mjpeg_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recorder_official_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  order QString [optional]
    */
    virtual void apiV1RecordersIndex(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  q_model_cont QString [optional]
    * @param[in]  q_vendor_name_cont QString [optional]
    * @param[in]  q_sdhc_eq QString [optional]
    * @param[in]  q_type_eq QString [optional]
    * @param[in]  q_resolution_eq QString [optional]
    * @param[in]  q_input_channels_eq QString [optional]
    * @param[in]  q_playback_channels_eq QString [optional]
    * @param[in]  q_onvif_true QString [optional]
    * @param[in]  q_psia_true QString [optional]
    * @param[in]  q_ptz_true QString [optional]
    * @param[in]  q_sd_card_true QString [optional]
    * @param[in]  q_upnp_true QString [optional]
    * @param[in]  q_audio_in_true QString [optional]
    * @param[in]  q_audio_out_true QString [optional]
    * @param[in]  q_hdmi_true QString [optional]
    * @param[in]  q_hot_swap_true QString [optional]
    * @param[in]  q_support_3rdparty_true QString [optional]
    * @param[in]  q_digital_io_true QString [optional]
    */
    virtual void apiV1RecordersSearch(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &q_model_cont = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_vendor_name_cont = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_sdhc_eq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_type_eq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_resolution_eq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_input_channels_eq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_playback_channels_eq = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_onvif_true = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_psia_true = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_ptz_true = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_sd_card_true = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_upnp_true = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_audio_in_true = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_audio_out_true = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_hdmi_true = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_hot_swap_true = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_support_3rdparty_true = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q_digital_io_true = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void apiV1RecordersShow(const qint32 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV1RecordersCreateCallback(OAIHttpRequestWorker *worker);
    void apiV1RecordersIdJsonPatchCallback(OAIHttpRequestWorker *worker);
    void apiV1RecordersIdJsonPutCallback(OAIHttpRequestWorker *worker);
    void apiV1RecordersIndexCallback(OAIHttpRequestWorker *worker);
    void apiV1RecordersSearchCallback(OAIHttpRequestWorker *worker);
    void apiV1RecordersShowCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV1RecordersCreateSignal();
    void apiV1RecordersIdJsonPatchSignal();
    void apiV1RecordersIdJsonPutSignal();
    void apiV1RecordersIndexSignal();
    void apiV1RecordersSearchSignal();
    void apiV1RecordersShowSignal();


    void apiV1RecordersCreateSignalFull(OAIHttpRequestWorker *worker);
    void apiV1RecordersIdJsonPatchSignalFull(OAIHttpRequestWorker *worker);
    void apiV1RecordersIdJsonPutSignalFull(OAIHttpRequestWorker *worker);
    void apiV1RecordersIndexSignalFull(OAIHttpRequestWorker *worker);
    void apiV1RecordersSearchSignalFull(OAIHttpRequestWorker *worker);
    void apiV1RecordersShowSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiV1RecordersCreateSignalError() instead")
    void apiV1RecordersCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1RecordersCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1RecordersIdJsonPatchSignalError() instead")
    void apiV1RecordersIdJsonPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1RecordersIdJsonPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1RecordersIdJsonPutSignalError() instead")
    void apiV1RecordersIdJsonPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1RecordersIdJsonPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1RecordersIndexSignalError() instead")
    void apiV1RecordersIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1RecordersIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1RecordersSearchSignalError() instead")
    void apiV1RecordersSearchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1RecordersSearchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1RecordersShowSignalError() instead")
    void apiV1RecordersShowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1RecordersShowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV1RecordersCreateSignalErrorFull() instead")
    void apiV1RecordersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1RecordersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1RecordersIdJsonPatchSignalErrorFull() instead")
    void apiV1RecordersIdJsonPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1RecordersIdJsonPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1RecordersIdJsonPutSignalErrorFull() instead")
    void apiV1RecordersIdJsonPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1RecordersIdJsonPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1RecordersIndexSignalErrorFull() instead")
    void apiV1RecordersIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1RecordersIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1RecordersSearchSignalErrorFull() instead")
    void apiV1RecordersSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1RecordersSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1RecordersShowSignalErrorFull() instead")
    void apiV1RecordersShowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1RecordersShowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
