/*
 * Cambase.io
 * Cambase.io is a project by Evercam.io in order to make it easier for software developers to have a reliable, up to date source of model hardware information available via a public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VendorsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VendorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VendorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV1VendorsCreate
     * @param vendorName Name (required)
     * @param vendorInfo Info. (optional)
     * @param vendorUrl Website (optional)
     * @param vendorMac MAC (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1VendorsCreateCall(String vendorName, String vendorInfo, String vendorUrl, String vendorMac, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vendors.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorName != null) {
            localVarFormParams.put("vendor[name]", vendorName);
        }

        if (vendorInfo != null) {
            localVarFormParams.put("vendor[info]", vendorInfo);
        }

        if (vendorUrl != null) {
            localVarFormParams.put("vendor[url]", vendorUrl);
        }

        if (vendorMac != null) {
            localVarFormParams.put("vendor[mac]", vendorMac);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1VendorsCreateValidateBeforeCall(String vendorName, String vendorInfo, String vendorUrl, String vendorMac, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vendorName' is set
        if (vendorName == null) {
            throw new ApiException("Missing the required parameter 'vendorName' when calling apiV1VendorsCreate(Async)");
        }

        return apiV1VendorsCreateCall(vendorName, vendorInfo, vendorUrl, vendorMac, _callback);

    }

    /**
     * Creates a new Vendor
     * 
     * @param vendorName Name (required)
     * @param vendorInfo Info. (optional)
     * @param vendorUrl Website (optional)
     * @param vendorMac MAC (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1VendorsCreate(String vendorName, String vendorInfo, String vendorUrl, String vendorMac) throws ApiException {
        apiV1VendorsCreateWithHttpInfo(vendorName, vendorInfo, vendorUrl, vendorMac);
    }

    /**
     * Creates a new Vendor
     * 
     * @param vendorName Name (required)
     * @param vendorInfo Info. (optional)
     * @param vendorUrl Website (optional)
     * @param vendorMac MAC (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1VendorsCreateWithHttpInfo(String vendorName, String vendorInfo, String vendorUrl, String vendorMac) throws ApiException {
        okhttp3.Call localVarCall = apiV1VendorsCreateValidateBeforeCall(vendorName, vendorInfo, vendorUrl, vendorMac, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a new Vendor (asynchronously)
     * 
     * @param vendorName Name (required)
     * @param vendorInfo Info. (optional)
     * @param vendorUrl Website (optional)
     * @param vendorMac MAC (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1VendorsCreateAsync(String vendorName, String vendorInfo, String vendorUrl, String vendorMac, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1VendorsCreateValidateBeforeCall(vendorName, vendorInfo, vendorUrl, vendorMac, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1VendorsIdJsonPatch
     * @param id Vendor ID (required)
     * @param vendorName Name (optional)
     * @param vendorInfo Info. (optional)
     * @param vendorUrl Website (optional)
     * @param vendorMac MAC (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1VendorsIdJsonPatchCall(String id, String vendorName, String vendorInfo, String vendorUrl, String vendorMac, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vendors/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorName != null) {
            localVarFormParams.put("vendor[name]", vendorName);
        }

        if (vendorInfo != null) {
            localVarFormParams.put("vendor[info]", vendorInfo);
        }

        if (vendorUrl != null) {
            localVarFormParams.put("vendor[url]", vendorUrl);
        }

        if (vendorMac != null) {
            localVarFormParams.put("vendor[mac]", vendorMac);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1VendorsIdJsonPatchValidateBeforeCall(String id, String vendorName, String vendorInfo, String vendorUrl, String vendorMac, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1VendorsIdJsonPatch(Async)");
        }

        return apiV1VendorsIdJsonPatchCall(id, vendorName, vendorInfo, vendorUrl, vendorMac, _callback);

    }

    /**
     * Updates an existing Vendor
     * 
     * @param id Vendor ID (required)
     * @param vendorName Name (optional)
     * @param vendorInfo Info. (optional)
     * @param vendorUrl Website (optional)
     * @param vendorMac MAC (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1VendorsIdJsonPatch(String id, String vendorName, String vendorInfo, String vendorUrl, String vendorMac) throws ApiException {
        apiV1VendorsIdJsonPatchWithHttpInfo(id, vendorName, vendorInfo, vendorUrl, vendorMac);
    }

    /**
     * Updates an existing Vendor
     * 
     * @param id Vendor ID (required)
     * @param vendorName Name (optional)
     * @param vendorInfo Info. (optional)
     * @param vendorUrl Website (optional)
     * @param vendorMac MAC (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1VendorsIdJsonPatchWithHttpInfo(String id, String vendorName, String vendorInfo, String vendorUrl, String vendorMac) throws ApiException {
        okhttp3.Call localVarCall = apiV1VendorsIdJsonPatchValidateBeforeCall(id, vendorName, vendorInfo, vendorUrl, vendorMac, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates an existing Vendor (asynchronously)
     * 
     * @param id Vendor ID (required)
     * @param vendorName Name (optional)
     * @param vendorInfo Info. (optional)
     * @param vendorUrl Website (optional)
     * @param vendorMac MAC (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1VendorsIdJsonPatchAsync(String id, String vendorName, String vendorInfo, String vendorUrl, String vendorMac, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1VendorsIdJsonPatchValidateBeforeCall(id, vendorName, vendorInfo, vendorUrl, vendorMac, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1VendorsIdJsonPut
     * @param id Vendor ID (required)
     * @param vendorName Name (optional)
     * @param vendorInfo Info. (optional)
     * @param vendorUrl Website (optional)
     * @param vendorMac MAC (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1VendorsIdJsonPutCall(String id, String vendorName, String vendorInfo, String vendorUrl, String vendorMac, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vendors/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorName != null) {
            localVarFormParams.put("vendor[name]", vendorName);
        }

        if (vendorInfo != null) {
            localVarFormParams.put("vendor[info]", vendorInfo);
        }

        if (vendorUrl != null) {
            localVarFormParams.put("vendor[url]", vendorUrl);
        }

        if (vendorMac != null) {
            localVarFormParams.put("vendor[mac]", vendorMac);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1VendorsIdJsonPutValidateBeforeCall(String id, String vendorName, String vendorInfo, String vendorUrl, String vendorMac, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1VendorsIdJsonPut(Async)");
        }

        return apiV1VendorsIdJsonPutCall(id, vendorName, vendorInfo, vendorUrl, vendorMac, _callback);

    }

    /**
     * Updates an existing Vendor
     * 
     * @param id Vendor ID (required)
     * @param vendorName Name (optional)
     * @param vendorInfo Info. (optional)
     * @param vendorUrl Website (optional)
     * @param vendorMac MAC (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1VendorsIdJsonPut(String id, String vendorName, String vendorInfo, String vendorUrl, String vendorMac) throws ApiException {
        apiV1VendorsIdJsonPutWithHttpInfo(id, vendorName, vendorInfo, vendorUrl, vendorMac);
    }

    /**
     * Updates an existing Vendor
     * 
     * @param id Vendor ID (required)
     * @param vendorName Name (optional)
     * @param vendorInfo Info. (optional)
     * @param vendorUrl Website (optional)
     * @param vendorMac MAC (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1VendorsIdJsonPutWithHttpInfo(String id, String vendorName, String vendorInfo, String vendorUrl, String vendorMac) throws ApiException {
        okhttp3.Call localVarCall = apiV1VendorsIdJsonPutValidateBeforeCall(id, vendorName, vendorInfo, vendorUrl, vendorMac, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates an existing Vendor (asynchronously)
     * 
     * @param id Vendor ID (required)
     * @param vendorName Name (optional)
     * @param vendorInfo Info. (optional)
     * @param vendorUrl Website (optional)
     * @param vendorMac MAC (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1VendorsIdJsonPutAsync(String id, String vendorName, String vendorInfo, String vendorUrl, String vendorMac, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1VendorsIdJsonPutValidateBeforeCall(id, vendorName, vendorInfo, vendorUrl, vendorMac, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1VendorsIndex
     * @param page Page number (optional)
     * @param order Sort order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1VendorsIndexCall(Integer page, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vendors.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1VendorsIndexValidateBeforeCall(Integer page, String order, final ApiCallback _callback) throws ApiException {
        return apiV1VendorsIndexCall(page, order, _callback);

    }

    /**
     * Fetches all Vendors
     * 
     * @param page Page number (optional)
     * @param order Sort order (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1VendorsIndex(Integer page, String order) throws ApiException {
        apiV1VendorsIndexWithHttpInfo(page, order);
    }

    /**
     * Fetches all Vendors
     * 
     * @param page Page number (optional)
     * @param order Sort order (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1VendorsIndexWithHttpInfo(Integer page, String order) throws ApiException {
        okhttp3.Call localVarCall = apiV1VendorsIndexValidateBeforeCall(page, order, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fetches all Vendors (asynchronously)
     * 
     * @param page Page number (optional)
     * @param order Sort order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1VendorsIndexAsync(Integer page, String order, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1VendorsIndexValidateBeforeCall(page, order, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1VendorsShow
     * @param id Vendor ID (required)
     * @param order Sort order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1VendorsShowCall(String id, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vendors/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1VendorsShowValidateBeforeCall(String id, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1VendorsShow(Async)");
        }

        return apiV1VendorsShowCall(id, order, _callback);

    }

    /**
     * Fetches a single Vendor
     * 
     * @param id Vendor ID (required)
     * @param order Sort order (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1VendorsShow(String id, String order) throws ApiException {
        apiV1VendorsShowWithHttpInfo(id, order);
    }

    /**
     * Fetches a single Vendor
     * 
     * @param id Vendor ID (required)
     * @param order Sort order (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1VendorsShowWithHttpInfo(String id, String order) throws ApiException {
        okhttp3.Call localVarCall = apiV1VendorsShowValidateBeforeCall(id, order, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fetches a single Vendor (asynchronously)
     * 
     * @param id Vendor ID (required)
     * @param order Sort order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1VendorsShowAsync(String id, String order, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1VendorsShowValidateBeforeCall(id, order, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
