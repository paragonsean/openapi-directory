/*
 * Cambase.io
 * Cambase.io is a project by Evercam.io in order to make it easier for software developers to have a reliable, up to date source of model hardware information available via a public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModelsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModelsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV1ModelsCreate
     * @param vendorId Vendor ID (required)
     * @param modelModel Model (required)
     * @param modelShape Shape (optional)
     * @param modelResolution Resolution (optional)
     * @param modelOnvif ONVIF (optional)
     * @param modelPsia PSIA (optional)
     * @param modelPtz PTZ (optional)
     * @param modelInfrared Infrared (optional)
     * @param modelVarifocal Varifocal (optional)
     * @param modelSdCard SD Card (optional)
     * @param modelUpnp UPnP (optional)
     * @param modelAudioIn UPnP (optional)
     * @param modelAudioOut UPnP (optional)
     * @param modelDefaultUsername Default Username (optional)
     * @param modelDefaultPassword Default Password (optional)
     * @param modelJpegUrl JPEG URL (optional)
     * @param modelH264Url H264 URL (optional)
     * @param modelMjpegUrl MJPEG URL (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ModelsCreateCall(String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/models.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorId != null) {
            localVarFormParams.put("vendor_id", vendorId);
        }

        if (modelModel != null) {
            localVarFormParams.put("model[model]", modelModel);
        }

        if (modelShape != null) {
            localVarFormParams.put("model[shape]", modelShape);
        }

        if (modelResolution != null) {
            localVarFormParams.put("model[resolution]", modelResolution);
        }

        if (modelOnvif != null) {
            localVarFormParams.put("model[onvif]", modelOnvif);
        }

        if (modelPsia != null) {
            localVarFormParams.put("model[psia]", modelPsia);
        }

        if (modelPtz != null) {
            localVarFormParams.put("model[ptz]", modelPtz);
        }

        if (modelInfrared != null) {
            localVarFormParams.put("model[infrared]", modelInfrared);
        }

        if (modelVarifocal != null) {
            localVarFormParams.put("model[varifocal]", modelVarifocal);
        }

        if (modelSdCard != null) {
            localVarFormParams.put("model[sd_card]", modelSdCard);
        }

        if (modelUpnp != null) {
            localVarFormParams.put("model[upnp]", modelUpnp);
        }

        if (modelAudioIn != null) {
            localVarFormParams.put("model[audio_in]", modelAudioIn);
        }

        if (modelAudioOut != null) {
            localVarFormParams.put("model[audio_out]", modelAudioOut);
        }

        if (modelDefaultUsername != null) {
            localVarFormParams.put("model[default_username]", modelDefaultUsername);
        }

        if (modelDefaultPassword != null) {
            localVarFormParams.put("model[default_password]", modelDefaultPassword);
        }

        if (modelJpegUrl != null) {
            localVarFormParams.put("model[jpeg_url]", modelJpegUrl);
        }

        if (modelH264Url != null) {
            localVarFormParams.put("model[h264_url]", modelH264Url);
        }

        if (modelMjpegUrl != null) {
            localVarFormParams.put("model[mjpeg_url]", modelMjpegUrl);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ModelsCreateValidateBeforeCall(String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling apiV1ModelsCreate(Async)");
        }

        // verify the required parameter 'modelModel' is set
        if (modelModel == null) {
            throw new ApiException("Missing the required parameter 'modelModel' when calling apiV1ModelsCreate(Async)");
        }

        return apiV1ModelsCreateCall(vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl, _callback);

    }

    /**
     * Creates a new Model
     * 
     * @param vendorId Vendor ID (required)
     * @param modelModel Model (required)
     * @param modelShape Shape (optional)
     * @param modelResolution Resolution (optional)
     * @param modelOnvif ONVIF (optional)
     * @param modelPsia PSIA (optional)
     * @param modelPtz PTZ (optional)
     * @param modelInfrared Infrared (optional)
     * @param modelVarifocal Varifocal (optional)
     * @param modelSdCard SD Card (optional)
     * @param modelUpnp UPnP (optional)
     * @param modelAudioIn UPnP (optional)
     * @param modelAudioOut UPnP (optional)
     * @param modelDefaultUsername Default Username (optional)
     * @param modelDefaultPassword Default Password (optional)
     * @param modelJpegUrl JPEG URL (optional)
     * @param modelH264Url H264 URL (optional)
     * @param modelMjpegUrl MJPEG URL (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1ModelsCreate(String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl) throws ApiException {
        apiV1ModelsCreateWithHttpInfo(vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl);
    }

    /**
     * Creates a new Model
     * 
     * @param vendorId Vendor ID (required)
     * @param modelModel Model (required)
     * @param modelShape Shape (optional)
     * @param modelResolution Resolution (optional)
     * @param modelOnvif ONVIF (optional)
     * @param modelPsia PSIA (optional)
     * @param modelPtz PTZ (optional)
     * @param modelInfrared Infrared (optional)
     * @param modelVarifocal Varifocal (optional)
     * @param modelSdCard SD Card (optional)
     * @param modelUpnp UPnP (optional)
     * @param modelAudioIn UPnP (optional)
     * @param modelAudioOut UPnP (optional)
     * @param modelDefaultUsername Default Username (optional)
     * @param modelDefaultPassword Default Password (optional)
     * @param modelJpegUrl JPEG URL (optional)
     * @param modelH264Url H264 URL (optional)
     * @param modelMjpegUrl MJPEG URL (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1ModelsCreateWithHttpInfo(String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl) throws ApiException {
        okhttp3.Call localVarCall = apiV1ModelsCreateValidateBeforeCall(vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a new Model (asynchronously)
     * 
     * @param vendorId Vendor ID (required)
     * @param modelModel Model (required)
     * @param modelShape Shape (optional)
     * @param modelResolution Resolution (optional)
     * @param modelOnvif ONVIF (optional)
     * @param modelPsia PSIA (optional)
     * @param modelPtz PTZ (optional)
     * @param modelInfrared Infrared (optional)
     * @param modelVarifocal Varifocal (optional)
     * @param modelSdCard SD Card (optional)
     * @param modelUpnp UPnP (optional)
     * @param modelAudioIn UPnP (optional)
     * @param modelAudioOut UPnP (optional)
     * @param modelDefaultUsername Default Username (optional)
     * @param modelDefaultPassword Default Password (optional)
     * @param modelJpegUrl JPEG URL (optional)
     * @param modelH264Url H264 URL (optional)
     * @param modelMjpegUrl MJPEG URL (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ModelsCreateAsync(String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ModelsCreateValidateBeforeCall(vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ModelsIdJsonPatch
     * @param id Model ID (required)
     * @param vendorId Vendor ID (required)
     * @param modelModel Model (optional)
     * @param modelShape Shape (optional)
     * @param modelResolution Resolution (optional)
     * @param modelOnvif ONVIF (optional)
     * @param modelPsia PSIA (optional)
     * @param modelPtz PTZ (optional)
     * @param modelInfrared Infrared (optional)
     * @param modelVarifocal Varifocal (optional)
     * @param modelSdCard SD Card (optional)
     * @param modelUpnp UPnP (optional)
     * @param modelAudioIn Audio In (optional)
     * @param modelAudioOut Audio Out (optional)
     * @param modelDefaultUsername Default Username (optional)
     * @param modelDefaultPassword Default Password (optional)
     * @param modelJpegUrl JPEG URL (optional)
     * @param modelH264Url H264 URL (optional)
     * @param modelMjpegUrl MJPEG URL (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ModelsIdJsonPatchCall(String id, String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/models/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorId != null) {
            localVarFormParams.put("vendor_id", vendorId);
        }

        if (modelModel != null) {
            localVarFormParams.put("model[model]", modelModel);
        }

        if (modelShape != null) {
            localVarFormParams.put("model[shape]", modelShape);
        }

        if (modelResolution != null) {
            localVarFormParams.put("model[resolution]", modelResolution);
        }

        if (modelOnvif != null) {
            localVarFormParams.put("model[onvif]", modelOnvif);
        }

        if (modelPsia != null) {
            localVarFormParams.put("model[psia]", modelPsia);
        }

        if (modelPtz != null) {
            localVarFormParams.put("model[ptz]", modelPtz);
        }

        if (modelInfrared != null) {
            localVarFormParams.put("model[infrared]", modelInfrared);
        }

        if (modelVarifocal != null) {
            localVarFormParams.put("model[varifocal]", modelVarifocal);
        }

        if (modelSdCard != null) {
            localVarFormParams.put("model[sd_card]", modelSdCard);
        }

        if (modelUpnp != null) {
            localVarFormParams.put("model[upnp]", modelUpnp);
        }

        if (modelAudioIn != null) {
            localVarFormParams.put("model[audio_in]", modelAudioIn);
        }

        if (modelAudioOut != null) {
            localVarFormParams.put("model[audio_out]", modelAudioOut);
        }

        if (modelDefaultUsername != null) {
            localVarFormParams.put("model[default_username]", modelDefaultUsername);
        }

        if (modelDefaultPassword != null) {
            localVarFormParams.put("model[default_password]", modelDefaultPassword);
        }

        if (modelJpegUrl != null) {
            localVarFormParams.put("model[jpeg_url]", modelJpegUrl);
        }

        if (modelH264Url != null) {
            localVarFormParams.put("model[h264_url]", modelH264Url);
        }

        if (modelMjpegUrl != null) {
            localVarFormParams.put("model[mjpeg_url]", modelMjpegUrl);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ModelsIdJsonPatchValidateBeforeCall(String id, String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1ModelsIdJsonPatch(Async)");
        }

        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling apiV1ModelsIdJsonPatch(Async)");
        }

        return apiV1ModelsIdJsonPatchCall(id, vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl, _callback);

    }

    /**
     * Updates an existing Model
     * 
     * @param id Model ID (required)
     * @param vendorId Vendor ID (required)
     * @param modelModel Model (optional)
     * @param modelShape Shape (optional)
     * @param modelResolution Resolution (optional)
     * @param modelOnvif ONVIF (optional)
     * @param modelPsia PSIA (optional)
     * @param modelPtz PTZ (optional)
     * @param modelInfrared Infrared (optional)
     * @param modelVarifocal Varifocal (optional)
     * @param modelSdCard SD Card (optional)
     * @param modelUpnp UPnP (optional)
     * @param modelAudioIn Audio In (optional)
     * @param modelAudioOut Audio Out (optional)
     * @param modelDefaultUsername Default Username (optional)
     * @param modelDefaultPassword Default Password (optional)
     * @param modelJpegUrl JPEG URL (optional)
     * @param modelH264Url H264 URL (optional)
     * @param modelMjpegUrl MJPEG URL (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1ModelsIdJsonPatch(String id, String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl) throws ApiException {
        apiV1ModelsIdJsonPatchWithHttpInfo(id, vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl);
    }

    /**
     * Updates an existing Model
     * 
     * @param id Model ID (required)
     * @param vendorId Vendor ID (required)
     * @param modelModel Model (optional)
     * @param modelShape Shape (optional)
     * @param modelResolution Resolution (optional)
     * @param modelOnvif ONVIF (optional)
     * @param modelPsia PSIA (optional)
     * @param modelPtz PTZ (optional)
     * @param modelInfrared Infrared (optional)
     * @param modelVarifocal Varifocal (optional)
     * @param modelSdCard SD Card (optional)
     * @param modelUpnp UPnP (optional)
     * @param modelAudioIn Audio In (optional)
     * @param modelAudioOut Audio Out (optional)
     * @param modelDefaultUsername Default Username (optional)
     * @param modelDefaultPassword Default Password (optional)
     * @param modelJpegUrl JPEG URL (optional)
     * @param modelH264Url H264 URL (optional)
     * @param modelMjpegUrl MJPEG URL (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1ModelsIdJsonPatchWithHttpInfo(String id, String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl) throws ApiException {
        okhttp3.Call localVarCall = apiV1ModelsIdJsonPatchValidateBeforeCall(id, vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates an existing Model (asynchronously)
     * 
     * @param id Model ID (required)
     * @param vendorId Vendor ID (required)
     * @param modelModel Model (optional)
     * @param modelShape Shape (optional)
     * @param modelResolution Resolution (optional)
     * @param modelOnvif ONVIF (optional)
     * @param modelPsia PSIA (optional)
     * @param modelPtz PTZ (optional)
     * @param modelInfrared Infrared (optional)
     * @param modelVarifocal Varifocal (optional)
     * @param modelSdCard SD Card (optional)
     * @param modelUpnp UPnP (optional)
     * @param modelAudioIn Audio In (optional)
     * @param modelAudioOut Audio Out (optional)
     * @param modelDefaultUsername Default Username (optional)
     * @param modelDefaultPassword Default Password (optional)
     * @param modelJpegUrl JPEG URL (optional)
     * @param modelH264Url H264 URL (optional)
     * @param modelMjpegUrl MJPEG URL (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ModelsIdJsonPatchAsync(String id, String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ModelsIdJsonPatchValidateBeforeCall(id, vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ModelsIdJsonPut
     * @param id Model ID (required)
     * @param vendorId Vendor ID (required)
     * @param modelModel Model (optional)
     * @param modelShape Shape (optional)
     * @param modelResolution Resolution (optional)
     * @param modelOnvif ONVIF (optional)
     * @param modelPsia PSIA (optional)
     * @param modelPtz PTZ (optional)
     * @param modelInfrared Infrared (optional)
     * @param modelVarifocal Varifocal (optional)
     * @param modelSdCard SD Card (optional)
     * @param modelUpnp UPnP (optional)
     * @param modelAudioIn Audio In (optional)
     * @param modelAudioOut Audio Out (optional)
     * @param modelDefaultUsername Default Username (optional)
     * @param modelDefaultPassword Default Password (optional)
     * @param modelJpegUrl JPEG URL (optional)
     * @param modelH264Url H264 URL (optional)
     * @param modelMjpegUrl MJPEG URL (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ModelsIdJsonPutCall(String id, String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/models/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorId != null) {
            localVarFormParams.put("vendor_id", vendorId);
        }

        if (modelModel != null) {
            localVarFormParams.put("model[model]", modelModel);
        }

        if (modelShape != null) {
            localVarFormParams.put("model[shape]", modelShape);
        }

        if (modelResolution != null) {
            localVarFormParams.put("model[resolution]", modelResolution);
        }

        if (modelOnvif != null) {
            localVarFormParams.put("model[onvif]", modelOnvif);
        }

        if (modelPsia != null) {
            localVarFormParams.put("model[psia]", modelPsia);
        }

        if (modelPtz != null) {
            localVarFormParams.put("model[ptz]", modelPtz);
        }

        if (modelInfrared != null) {
            localVarFormParams.put("model[infrared]", modelInfrared);
        }

        if (modelVarifocal != null) {
            localVarFormParams.put("model[varifocal]", modelVarifocal);
        }

        if (modelSdCard != null) {
            localVarFormParams.put("model[sd_card]", modelSdCard);
        }

        if (modelUpnp != null) {
            localVarFormParams.put("model[upnp]", modelUpnp);
        }

        if (modelAudioIn != null) {
            localVarFormParams.put("model[audio_in]", modelAudioIn);
        }

        if (modelAudioOut != null) {
            localVarFormParams.put("model[audio_out]", modelAudioOut);
        }

        if (modelDefaultUsername != null) {
            localVarFormParams.put("model[default_username]", modelDefaultUsername);
        }

        if (modelDefaultPassword != null) {
            localVarFormParams.put("model[default_password]", modelDefaultPassword);
        }

        if (modelJpegUrl != null) {
            localVarFormParams.put("model[jpeg_url]", modelJpegUrl);
        }

        if (modelH264Url != null) {
            localVarFormParams.put("model[h264_url]", modelH264Url);
        }

        if (modelMjpegUrl != null) {
            localVarFormParams.put("model[mjpeg_url]", modelMjpegUrl);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ModelsIdJsonPutValidateBeforeCall(String id, String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1ModelsIdJsonPut(Async)");
        }

        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling apiV1ModelsIdJsonPut(Async)");
        }

        return apiV1ModelsIdJsonPutCall(id, vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl, _callback);

    }

    /**
     * Updates an existing Model
     * 
     * @param id Model ID (required)
     * @param vendorId Vendor ID (required)
     * @param modelModel Model (optional)
     * @param modelShape Shape (optional)
     * @param modelResolution Resolution (optional)
     * @param modelOnvif ONVIF (optional)
     * @param modelPsia PSIA (optional)
     * @param modelPtz PTZ (optional)
     * @param modelInfrared Infrared (optional)
     * @param modelVarifocal Varifocal (optional)
     * @param modelSdCard SD Card (optional)
     * @param modelUpnp UPnP (optional)
     * @param modelAudioIn Audio In (optional)
     * @param modelAudioOut Audio Out (optional)
     * @param modelDefaultUsername Default Username (optional)
     * @param modelDefaultPassword Default Password (optional)
     * @param modelJpegUrl JPEG URL (optional)
     * @param modelH264Url H264 URL (optional)
     * @param modelMjpegUrl MJPEG URL (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1ModelsIdJsonPut(String id, String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl) throws ApiException {
        apiV1ModelsIdJsonPutWithHttpInfo(id, vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl);
    }

    /**
     * Updates an existing Model
     * 
     * @param id Model ID (required)
     * @param vendorId Vendor ID (required)
     * @param modelModel Model (optional)
     * @param modelShape Shape (optional)
     * @param modelResolution Resolution (optional)
     * @param modelOnvif ONVIF (optional)
     * @param modelPsia PSIA (optional)
     * @param modelPtz PTZ (optional)
     * @param modelInfrared Infrared (optional)
     * @param modelVarifocal Varifocal (optional)
     * @param modelSdCard SD Card (optional)
     * @param modelUpnp UPnP (optional)
     * @param modelAudioIn Audio In (optional)
     * @param modelAudioOut Audio Out (optional)
     * @param modelDefaultUsername Default Username (optional)
     * @param modelDefaultPassword Default Password (optional)
     * @param modelJpegUrl JPEG URL (optional)
     * @param modelH264Url H264 URL (optional)
     * @param modelMjpegUrl MJPEG URL (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1ModelsIdJsonPutWithHttpInfo(String id, String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl) throws ApiException {
        okhttp3.Call localVarCall = apiV1ModelsIdJsonPutValidateBeforeCall(id, vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates an existing Model (asynchronously)
     * 
     * @param id Model ID (required)
     * @param vendorId Vendor ID (required)
     * @param modelModel Model (optional)
     * @param modelShape Shape (optional)
     * @param modelResolution Resolution (optional)
     * @param modelOnvif ONVIF (optional)
     * @param modelPsia PSIA (optional)
     * @param modelPtz PTZ (optional)
     * @param modelInfrared Infrared (optional)
     * @param modelVarifocal Varifocal (optional)
     * @param modelSdCard SD Card (optional)
     * @param modelUpnp UPnP (optional)
     * @param modelAudioIn Audio In (optional)
     * @param modelAudioOut Audio Out (optional)
     * @param modelDefaultUsername Default Username (optional)
     * @param modelDefaultPassword Default Password (optional)
     * @param modelJpegUrl JPEG URL (optional)
     * @param modelH264Url H264 URL (optional)
     * @param modelMjpegUrl MJPEG URL (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ModelsIdJsonPutAsync(String id, String vendorId, String modelModel, String modelShape, String modelResolution, String modelOnvif, String modelPsia, String modelPtz, String modelInfrared, String modelVarifocal, String modelSdCard, String modelUpnp, String modelAudioIn, String modelAudioOut, String modelDefaultUsername, String modelDefaultPassword, String modelJpegUrl, String modelH264Url, String modelMjpegUrl, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ModelsIdJsonPutValidateBeforeCall(id, vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ModelsIndex
     * @param page Page number (optional)
     * @param order Sort order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ModelsIndexCall(Integer page, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/models.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ModelsIndexValidateBeforeCall(Integer page, String order, final ApiCallback _callback) throws ApiException {
        return apiV1ModelsIndexCall(page, order, _callback);

    }

    /**
     * Fetches all Models
     * 
     * @param page Page number (optional)
     * @param order Sort order (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1ModelsIndex(Integer page, String order) throws ApiException {
        apiV1ModelsIndexWithHttpInfo(page, order);
    }

    /**
     * Fetches all Models
     * 
     * @param page Page number (optional)
     * @param order Sort order (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1ModelsIndexWithHttpInfo(Integer page, String order) throws ApiException {
        okhttp3.Call localVarCall = apiV1ModelsIndexValidateBeforeCall(page, order, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fetches all Models (asynchronously)
     * 
     * @param page Page number (optional)
     * @param order Sort order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ModelsIndexAsync(Integer page, String order, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ModelsIndexValidateBeforeCall(page, order, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ModelsSearch
     * @param page Page number (optional)
     * @param qModelCont Model (optional)
     * @param qManufacturerNameCont Vendor (optional)
     * @param qShapeEq Shape (optional)
     * @param qResolutionEq Resolution (optional)
     * @param qOnvifTrue ONVIF (optional)
     * @param qPsiaTrue PSIA (optional)
     * @param qPtzTrue PTZ (optional)
     * @param qInfraredTrue Infrared (optional)
     * @param qVarifocalTrue Varifocal (optional)
     * @param qSdCardTrue SD Card (optional)
     * @param qUpnpTrue UPnP (optional)
     * @param qAudioInTrue Audio In (optional)
     * @param qAudioOutTrue Audio Out (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ModelsSearchCall(Integer page, String qModelCont, String qManufacturerNameCont, String qShapeEq, String qResolutionEq, String qOnvifTrue, String qPsiaTrue, String qPtzTrue, String qInfraredTrue, String qVarifocalTrue, String qSdCardTrue, String qUpnpTrue, String qAudioInTrue, String qAudioOutTrue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/models/search.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (qModelCont != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[model_cont]", qModelCont));
        }

        if (qManufacturerNameCont != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[manufacturer_name_cont]", qManufacturerNameCont));
        }

        if (qShapeEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[shape_eq]", qShapeEq));
        }

        if (qResolutionEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[resolution_eq]", qResolutionEq));
        }

        if (qOnvifTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[onvif_true]", qOnvifTrue));
        }

        if (qPsiaTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[psia_true]", qPsiaTrue));
        }

        if (qPtzTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[ptz_true]", qPtzTrue));
        }

        if (qInfraredTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[infrared_true]", qInfraredTrue));
        }

        if (qVarifocalTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[varifocal_true]", qVarifocalTrue));
        }

        if (qSdCardTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[sd_card_true]", qSdCardTrue));
        }

        if (qUpnpTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[upnp_true]", qUpnpTrue));
        }

        if (qAudioInTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[audio_in_true]", qAudioInTrue));
        }

        if (qAudioOutTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[audio_out_true]", qAudioOutTrue));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ModelsSearchValidateBeforeCall(Integer page, String qModelCont, String qManufacturerNameCont, String qShapeEq, String qResolutionEq, String qOnvifTrue, String qPsiaTrue, String qPtzTrue, String qInfraredTrue, String qVarifocalTrue, String qSdCardTrue, String qUpnpTrue, String qAudioInTrue, String qAudioOutTrue, final ApiCallback _callback) throws ApiException {
        return apiV1ModelsSearchCall(page, qModelCont, qManufacturerNameCont, qShapeEq, qResolutionEq, qOnvifTrue, qPsiaTrue, qPtzTrue, qInfraredTrue, qVarifocalTrue, qSdCardTrue, qUpnpTrue, qAudioInTrue, qAudioOutTrue, _callback);

    }

    /**
     * Searches all Models
     * 
     * @param page Page number (optional)
     * @param qModelCont Model (optional)
     * @param qManufacturerNameCont Vendor (optional)
     * @param qShapeEq Shape (optional)
     * @param qResolutionEq Resolution (optional)
     * @param qOnvifTrue ONVIF (optional)
     * @param qPsiaTrue PSIA (optional)
     * @param qPtzTrue PTZ (optional)
     * @param qInfraredTrue Infrared (optional)
     * @param qVarifocalTrue Varifocal (optional)
     * @param qSdCardTrue SD Card (optional)
     * @param qUpnpTrue UPnP (optional)
     * @param qAudioInTrue Audio In (optional)
     * @param qAudioOutTrue Audio Out (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1ModelsSearch(Integer page, String qModelCont, String qManufacturerNameCont, String qShapeEq, String qResolutionEq, String qOnvifTrue, String qPsiaTrue, String qPtzTrue, String qInfraredTrue, String qVarifocalTrue, String qSdCardTrue, String qUpnpTrue, String qAudioInTrue, String qAudioOutTrue) throws ApiException {
        apiV1ModelsSearchWithHttpInfo(page, qModelCont, qManufacturerNameCont, qShapeEq, qResolutionEq, qOnvifTrue, qPsiaTrue, qPtzTrue, qInfraredTrue, qVarifocalTrue, qSdCardTrue, qUpnpTrue, qAudioInTrue, qAudioOutTrue);
    }

    /**
     * Searches all Models
     * 
     * @param page Page number (optional)
     * @param qModelCont Model (optional)
     * @param qManufacturerNameCont Vendor (optional)
     * @param qShapeEq Shape (optional)
     * @param qResolutionEq Resolution (optional)
     * @param qOnvifTrue ONVIF (optional)
     * @param qPsiaTrue PSIA (optional)
     * @param qPtzTrue PTZ (optional)
     * @param qInfraredTrue Infrared (optional)
     * @param qVarifocalTrue Varifocal (optional)
     * @param qSdCardTrue SD Card (optional)
     * @param qUpnpTrue UPnP (optional)
     * @param qAudioInTrue Audio In (optional)
     * @param qAudioOutTrue Audio Out (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1ModelsSearchWithHttpInfo(Integer page, String qModelCont, String qManufacturerNameCont, String qShapeEq, String qResolutionEq, String qOnvifTrue, String qPsiaTrue, String qPtzTrue, String qInfraredTrue, String qVarifocalTrue, String qSdCardTrue, String qUpnpTrue, String qAudioInTrue, String qAudioOutTrue) throws ApiException {
        okhttp3.Call localVarCall = apiV1ModelsSearchValidateBeforeCall(page, qModelCont, qManufacturerNameCont, qShapeEq, qResolutionEq, qOnvifTrue, qPsiaTrue, qPtzTrue, qInfraredTrue, qVarifocalTrue, qSdCardTrue, qUpnpTrue, qAudioInTrue, qAudioOutTrue, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Searches all Models (asynchronously)
     * 
     * @param page Page number (optional)
     * @param qModelCont Model (optional)
     * @param qManufacturerNameCont Vendor (optional)
     * @param qShapeEq Shape (optional)
     * @param qResolutionEq Resolution (optional)
     * @param qOnvifTrue ONVIF (optional)
     * @param qPsiaTrue PSIA (optional)
     * @param qPtzTrue PTZ (optional)
     * @param qInfraredTrue Infrared (optional)
     * @param qVarifocalTrue Varifocal (optional)
     * @param qSdCardTrue SD Card (optional)
     * @param qUpnpTrue UPnP (optional)
     * @param qAudioInTrue Audio In (optional)
     * @param qAudioOutTrue Audio Out (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ModelsSearchAsync(Integer page, String qModelCont, String qManufacturerNameCont, String qShapeEq, String qResolutionEq, String qOnvifTrue, String qPsiaTrue, String qPtzTrue, String qInfraredTrue, String qVarifocalTrue, String qSdCardTrue, String qUpnpTrue, String qAudioInTrue, String qAudioOutTrue, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ModelsSearchValidateBeforeCall(page, qModelCont, qManufacturerNameCont, qShapeEq, qResolutionEq, qOnvifTrue, qPsiaTrue, qPtzTrue, qInfraredTrue, qVarifocalTrue, qSdCardTrue, qUpnpTrue, qAudioInTrue, qAudioOutTrue, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1ModelsShow
     * @param id Model ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ModelsShowCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/models/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1ModelsShowValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1ModelsShow(Async)");
        }

        return apiV1ModelsShowCall(id, _callback);

    }

    /**
     * Fetches a single Model
     * 
     * @param id Model ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1ModelsShow(Integer id) throws ApiException {
        apiV1ModelsShowWithHttpInfo(id);
    }

    /**
     * Fetches a single Model
     * 
     * @param id Model ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1ModelsShowWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiV1ModelsShowValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fetches a single Model (asynchronously)
     * 
     * @param id Model ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1ModelsShowAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1ModelsShowValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
