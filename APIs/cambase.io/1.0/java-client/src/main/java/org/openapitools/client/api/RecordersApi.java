/*
 * Cambase.io
 * Cambase.io is a project by Evercam.io in order to make it easier for software developers to have a reliable, up to date source of model hardware information available via a public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecordersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecordersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecordersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV1RecordersCreate
     * @param vendorId Vendor ID (required)
     * @param recorderModel Model (required)
     * @param recorderName Name (required)
     * @param recorderRecorderType Type (required)
     * @param recorderResolution Resolution (optional)
     * @param recorderOnvif ONVIF (optional)
     * @param recorderPsia PSIA (optional)
     * @param recorderPtz PTZ (optional)
     * @param recorderDiscontinued Discontinued (optional)
     * @param recorderSupport3rdparty 3rd pparty Camera Support (optional)
     * @param recorderSdCard SD Card (optional)
     * @param recorderUpnp UPnP (optional)
     * @param recorderHotSwap Hot Swap (optional)
     * @param recorderHdmi HDMI Support (optional)
     * @param recorderDigitalIo Digital I/O (optional)
     * @param recorderAudioIn Audio In (optional)
     * @param recorderAudioOut Audio Out (optional)
     * @param recorderInputChannels Input Channels (optional)
     * @param recorderPlaybackChannels Playback Channels (optional)
     * @param recorderUsb USB Ports (optional)
     * @param recorderSdhc SD Card (GB) (optional)
     * @param recorderMobileAccess Mobile Access (optional)
     * @param recorderAlarms Alarms (optional)
     * @param recorderRaidSupport Raid Support (optional)
     * @param recorderStorage Internal Storage (optional)
     * @param recorderAdditionalInformation Additional Information (optional)
     * @param recorderDefaultUsername Default Username (optional)
     * @param recorderDefaultPassword Default Password (optional)
     * @param recorderJpegUrl JPEG URL (optional)
     * @param recorderH264Url H264 URL (optional)
     * @param recorderMjpegUrl MJPEG URL (optional)
     * @param recorderOfficialUrl Official URL (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1RecordersCreateCall(String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/recorders.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorId != null) {
            localVarFormParams.put("vendor_id", vendorId);
        }

        if (recorderModel != null) {
            localVarFormParams.put("recorder[model]", recorderModel);
        }

        if (recorderName != null) {
            localVarFormParams.put("recorder[name]", recorderName);
        }

        if (recorderRecorderType != null) {
            localVarFormParams.put("recorder[recorder_type]", recorderRecorderType);
        }

        if (recorderResolution != null) {
            localVarFormParams.put("recorder[resolution]", recorderResolution);
        }

        if (recorderOnvif != null) {
            localVarFormParams.put("recorder[onvif]", recorderOnvif);
        }

        if (recorderPsia != null) {
            localVarFormParams.put("recorder[psia]", recorderPsia);
        }

        if (recorderPtz != null) {
            localVarFormParams.put("recorder[ptz]", recorderPtz);
        }

        if (recorderDiscontinued != null) {
            localVarFormParams.put("recorder[discontinued]", recorderDiscontinued);
        }

        if (recorderSupport3rdparty != null) {
            localVarFormParams.put("recorder[support_3rdparty]", recorderSupport3rdparty);
        }

        if (recorderSdCard != null) {
            localVarFormParams.put("recorder[sd_card]", recorderSdCard);
        }

        if (recorderUpnp != null) {
            localVarFormParams.put("recorder[upnp]", recorderUpnp);
        }

        if (recorderHotSwap != null) {
            localVarFormParams.put("recorder[hot_swap]", recorderHotSwap);
        }

        if (recorderHdmi != null) {
            localVarFormParams.put("recorder[hdmi]", recorderHdmi);
        }

        if (recorderDigitalIo != null) {
            localVarFormParams.put("recorder[digital_io]", recorderDigitalIo);
        }

        if (recorderAudioIn != null) {
            localVarFormParams.put("recorder[audio_in]", recorderAudioIn);
        }

        if (recorderAudioOut != null) {
            localVarFormParams.put("recorder[audio_out]", recorderAudioOut);
        }

        if (recorderInputChannels != null) {
            localVarFormParams.put("recorder[input_channels]", recorderInputChannels);
        }

        if (recorderPlaybackChannels != null) {
            localVarFormParams.put("recorder[playback_channels]", recorderPlaybackChannels);
        }

        if (recorderUsb != null) {
            localVarFormParams.put("recorder[usb]", recorderUsb);
        }

        if (recorderSdhc != null) {
            localVarFormParams.put("recorder[sdhc]", recorderSdhc);
        }

        if (recorderMobileAccess != null) {
            localVarFormParams.put("recorder[mobile_access]", recorderMobileAccess);
        }

        if (recorderAlarms != null) {
            localVarFormParams.put("recorder[alarms]", recorderAlarms);
        }

        if (recorderRaidSupport != null) {
            localVarFormParams.put("recorder[raid_support]", recorderRaidSupport);
        }

        if (recorderStorage != null) {
            localVarFormParams.put("recorder[storage]", recorderStorage);
        }

        if (recorderAdditionalInformation != null) {
            localVarFormParams.put("recorder[additional_information]", recorderAdditionalInformation);
        }

        if (recorderDefaultUsername != null) {
            localVarFormParams.put("recorder[default_username]", recorderDefaultUsername);
        }

        if (recorderDefaultPassword != null) {
            localVarFormParams.put("recorder[default_password]", recorderDefaultPassword);
        }

        if (recorderJpegUrl != null) {
            localVarFormParams.put("recorder[jpeg_url]", recorderJpegUrl);
        }

        if (recorderH264Url != null) {
            localVarFormParams.put("recorder[h264_url]", recorderH264Url);
        }

        if (recorderMjpegUrl != null) {
            localVarFormParams.put("recorder[mjpeg_url]", recorderMjpegUrl);
        }

        if (recorderOfficialUrl != null) {
            localVarFormParams.put("recorder[official_url]", recorderOfficialUrl);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1RecordersCreateValidateBeforeCall(String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling apiV1RecordersCreate(Async)");
        }

        // verify the required parameter 'recorderModel' is set
        if (recorderModel == null) {
            throw new ApiException("Missing the required parameter 'recorderModel' when calling apiV1RecordersCreate(Async)");
        }

        // verify the required parameter 'recorderName' is set
        if (recorderName == null) {
            throw new ApiException("Missing the required parameter 'recorderName' when calling apiV1RecordersCreate(Async)");
        }

        // verify the required parameter 'recorderRecorderType' is set
        if (recorderRecorderType == null) {
            throw new ApiException("Missing the required parameter 'recorderRecorderType' when calling apiV1RecordersCreate(Async)");
        }

        return apiV1RecordersCreateCall(vendorId, recorderModel, recorderName, recorderRecorderType, recorderResolution, recorderOnvif, recorderPsia, recorderPtz, recorderDiscontinued, recorderSupport3rdparty, recorderSdCard, recorderUpnp, recorderHotSwap, recorderHdmi, recorderDigitalIo, recorderAudioIn, recorderAudioOut, recorderInputChannels, recorderPlaybackChannels, recorderUsb, recorderSdhc, recorderMobileAccess, recorderAlarms, recorderRaidSupport, recorderStorage, recorderAdditionalInformation, recorderDefaultUsername, recorderDefaultPassword, recorderJpegUrl, recorderH264Url, recorderMjpegUrl, recorderOfficialUrl, _callback);

    }

    /**
     * Creates a new Recorder
     * 
     * @param vendorId Vendor ID (required)
     * @param recorderModel Model (required)
     * @param recorderName Name (required)
     * @param recorderRecorderType Type (required)
     * @param recorderResolution Resolution (optional)
     * @param recorderOnvif ONVIF (optional)
     * @param recorderPsia PSIA (optional)
     * @param recorderPtz PTZ (optional)
     * @param recorderDiscontinued Discontinued (optional)
     * @param recorderSupport3rdparty 3rd pparty Camera Support (optional)
     * @param recorderSdCard SD Card (optional)
     * @param recorderUpnp UPnP (optional)
     * @param recorderHotSwap Hot Swap (optional)
     * @param recorderHdmi HDMI Support (optional)
     * @param recorderDigitalIo Digital I/O (optional)
     * @param recorderAudioIn Audio In (optional)
     * @param recorderAudioOut Audio Out (optional)
     * @param recorderInputChannels Input Channels (optional)
     * @param recorderPlaybackChannels Playback Channels (optional)
     * @param recorderUsb USB Ports (optional)
     * @param recorderSdhc SD Card (GB) (optional)
     * @param recorderMobileAccess Mobile Access (optional)
     * @param recorderAlarms Alarms (optional)
     * @param recorderRaidSupport Raid Support (optional)
     * @param recorderStorage Internal Storage (optional)
     * @param recorderAdditionalInformation Additional Information (optional)
     * @param recorderDefaultUsername Default Username (optional)
     * @param recorderDefaultPassword Default Password (optional)
     * @param recorderJpegUrl JPEG URL (optional)
     * @param recorderH264Url H264 URL (optional)
     * @param recorderMjpegUrl MJPEG URL (optional)
     * @param recorderOfficialUrl Official URL (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1RecordersCreate(String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl) throws ApiException {
        apiV1RecordersCreateWithHttpInfo(vendorId, recorderModel, recorderName, recorderRecorderType, recorderResolution, recorderOnvif, recorderPsia, recorderPtz, recorderDiscontinued, recorderSupport3rdparty, recorderSdCard, recorderUpnp, recorderHotSwap, recorderHdmi, recorderDigitalIo, recorderAudioIn, recorderAudioOut, recorderInputChannels, recorderPlaybackChannels, recorderUsb, recorderSdhc, recorderMobileAccess, recorderAlarms, recorderRaidSupport, recorderStorage, recorderAdditionalInformation, recorderDefaultUsername, recorderDefaultPassword, recorderJpegUrl, recorderH264Url, recorderMjpegUrl, recorderOfficialUrl);
    }

    /**
     * Creates a new Recorder
     * 
     * @param vendorId Vendor ID (required)
     * @param recorderModel Model (required)
     * @param recorderName Name (required)
     * @param recorderRecorderType Type (required)
     * @param recorderResolution Resolution (optional)
     * @param recorderOnvif ONVIF (optional)
     * @param recorderPsia PSIA (optional)
     * @param recorderPtz PTZ (optional)
     * @param recorderDiscontinued Discontinued (optional)
     * @param recorderSupport3rdparty 3rd pparty Camera Support (optional)
     * @param recorderSdCard SD Card (optional)
     * @param recorderUpnp UPnP (optional)
     * @param recorderHotSwap Hot Swap (optional)
     * @param recorderHdmi HDMI Support (optional)
     * @param recorderDigitalIo Digital I/O (optional)
     * @param recorderAudioIn Audio In (optional)
     * @param recorderAudioOut Audio Out (optional)
     * @param recorderInputChannels Input Channels (optional)
     * @param recorderPlaybackChannels Playback Channels (optional)
     * @param recorderUsb USB Ports (optional)
     * @param recorderSdhc SD Card (GB) (optional)
     * @param recorderMobileAccess Mobile Access (optional)
     * @param recorderAlarms Alarms (optional)
     * @param recorderRaidSupport Raid Support (optional)
     * @param recorderStorage Internal Storage (optional)
     * @param recorderAdditionalInformation Additional Information (optional)
     * @param recorderDefaultUsername Default Username (optional)
     * @param recorderDefaultPassword Default Password (optional)
     * @param recorderJpegUrl JPEG URL (optional)
     * @param recorderH264Url H264 URL (optional)
     * @param recorderMjpegUrl MJPEG URL (optional)
     * @param recorderOfficialUrl Official URL (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1RecordersCreateWithHttpInfo(String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl) throws ApiException {
        okhttp3.Call localVarCall = apiV1RecordersCreateValidateBeforeCall(vendorId, recorderModel, recorderName, recorderRecorderType, recorderResolution, recorderOnvif, recorderPsia, recorderPtz, recorderDiscontinued, recorderSupport3rdparty, recorderSdCard, recorderUpnp, recorderHotSwap, recorderHdmi, recorderDigitalIo, recorderAudioIn, recorderAudioOut, recorderInputChannels, recorderPlaybackChannels, recorderUsb, recorderSdhc, recorderMobileAccess, recorderAlarms, recorderRaidSupport, recorderStorage, recorderAdditionalInformation, recorderDefaultUsername, recorderDefaultPassword, recorderJpegUrl, recorderH264Url, recorderMjpegUrl, recorderOfficialUrl, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates a new Recorder (asynchronously)
     * 
     * @param vendorId Vendor ID (required)
     * @param recorderModel Model (required)
     * @param recorderName Name (required)
     * @param recorderRecorderType Type (required)
     * @param recorderResolution Resolution (optional)
     * @param recorderOnvif ONVIF (optional)
     * @param recorderPsia PSIA (optional)
     * @param recorderPtz PTZ (optional)
     * @param recorderDiscontinued Discontinued (optional)
     * @param recorderSupport3rdparty 3rd pparty Camera Support (optional)
     * @param recorderSdCard SD Card (optional)
     * @param recorderUpnp UPnP (optional)
     * @param recorderHotSwap Hot Swap (optional)
     * @param recorderHdmi HDMI Support (optional)
     * @param recorderDigitalIo Digital I/O (optional)
     * @param recorderAudioIn Audio In (optional)
     * @param recorderAudioOut Audio Out (optional)
     * @param recorderInputChannels Input Channels (optional)
     * @param recorderPlaybackChannels Playback Channels (optional)
     * @param recorderUsb USB Ports (optional)
     * @param recorderSdhc SD Card (GB) (optional)
     * @param recorderMobileAccess Mobile Access (optional)
     * @param recorderAlarms Alarms (optional)
     * @param recorderRaidSupport Raid Support (optional)
     * @param recorderStorage Internal Storage (optional)
     * @param recorderAdditionalInformation Additional Information (optional)
     * @param recorderDefaultUsername Default Username (optional)
     * @param recorderDefaultPassword Default Password (optional)
     * @param recorderJpegUrl JPEG URL (optional)
     * @param recorderH264Url H264 URL (optional)
     * @param recorderMjpegUrl MJPEG URL (optional)
     * @param recorderOfficialUrl Official URL (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1RecordersCreateAsync(String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1RecordersCreateValidateBeforeCall(vendorId, recorderModel, recorderName, recorderRecorderType, recorderResolution, recorderOnvif, recorderPsia, recorderPtz, recorderDiscontinued, recorderSupport3rdparty, recorderSdCard, recorderUpnp, recorderHotSwap, recorderHdmi, recorderDigitalIo, recorderAudioIn, recorderAudioOut, recorderInputChannels, recorderPlaybackChannels, recorderUsb, recorderSdhc, recorderMobileAccess, recorderAlarms, recorderRaidSupport, recorderStorage, recorderAdditionalInformation, recorderDefaultUsername, recorderDefaultPassword, recorderJpegUrl, recorderH264Url, recorderMjpegUrl, recorderOfficialUrl, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1RecordersIdJsonPatch
     * @param id Recorder ID (required)
     * @param vendorId Vendor ID (required)
     * @param recorderModel Model (required)
     * @param recorderName Name (required)
     * @param recorderRecorderType Type (required)
     * @param recorderResolution Resolution (optional)
     * @param recorderOnvif ONVIF (optional)
     * @param recorderPsia PSIA (optional)
     * @param recorderPtz PTZ (optional)
     * @param recorderDiscontinued Discontinued (optional)
     * @param recorderSupport3rdparty 3rd pparty Camera Support (optional)
     * @param recorderSdCard SD Card (optional)
     * @param recorderUpnp UPnP (optional)
     * @param recorderHotSwap Hot Swap (optional)
     * @param recorderHdmi HDMI Support (optional)
     * @param recorderDigitalIo Digital I/O (optional)
     * @param recorderAudioIn Audio In (optional)
     * @param recorderAudioOut Audio Out (optional)
     * @param recorderInputChannels Input Channels (optional)
     * @param recorderPlaybackChannels Playback Channels (optional)
     * @param recorderUsb USB Ports (optional)
     * @param recorderSdhc SD Card (GB) (optional)
     * @param recorderMobileAccess Mobile Access (optional)
     * @param recorderAlarms Alarms (optional)
     * @param recorderRaidSupport Raid Support (optional)
     * @param recorderStorage Internal Storage (optional)
     * @param recorderAdditionalInformation Additional Information (optional)
     * @param recorderDefaultUsername Default Username (optional)
     * @param recorderDefaultPassword Default Password (optional)
     * @param recorderJpegUrl JPEG URL (optional)
     * @param recorderH264Url H264 URL (optional)
     * @param recorderMjpegUrl MJPEG URL (optional)
     * @param recorderOfficialUrl Official URL (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1RecordersIdJsonPatchCall(String id, String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/recorders/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorId != null) {
            localVarFormParams.put("vendor_id", vendorId);
        }

        if (recorderModel != null) {
            localVarFormParams.put("recorder[model]", recorderModel);
        }

        if (recorderName != null) {
            localVarFormParams.put("recorder[name]", recorderName);
        }

        if (recorderRecorderType != null) {
            localVarFormParams.put("recorder[recorder_type]", recorderRecorderType);
        }

        if (recorderResolution != null) {
            localVarFormParams.put("recorder[resolution]", recorderResolution);
        }

        if (recorderOnvif != null) {
            localVarFormParams.put("recorder[onvif]", recorderOnvif);
        }

        if (recorderPsia != null) {
            localVarFormParams.put("recorder[psia]", recorderPsia);
        }

        if (recorderPtz != null) {
            localVarFormParams.put("recorder[ptz]", recorderPtz);
        }

        if (recorderDiscontinued != null) {
            localVarFormParams.put("recorder[discontinued]", recorderDiscontinued);
        }

        if (recorderSupport3rdparty != null) {
            localVarFormParams.put("recorder[support_3rdparty]", recorderSupport3rdparty);
        }

        if (recorderSdCard != null) {
            localVarFormParams.put("recorder[sd_card]", recorderSdCard);
        }

        if (recorderUpnp != null) {
            localVarFormParams.put("recorder[upnp]", recorderUpnp);
        }

        if (recorderHotSwap != null) {
            localVarFormParams.put("recorder[hot_swap]", recorderHotSwap);
        }

        if (recorderHdmi != null) {
            localVarFormParams.put("recorder[hdmi]", recorderHdmi);
        }

        if (recorderDigitalIo != null) {
            localVarFormParams.put("recorder[digital_io]", recorderDigitalIo);
        }

        if (recorderAudioIn != null) {
            localVarFormParams.put("recorder[audio_in]", recorderAudioIn);
        }

        if (recorderAudioOut != null) {
            localVarFormParams.put("recorder[audio_out]", recorderAudioOut);
        }

        if (recorderInputChannels != null) {
            localVarFormParams.put("recorder[input_channels]", recorderInputChannels);
        }

        if (recorderPlaybackChannels != null) {
            localVarFormParams.put("recorder[playback_channels]", recorderPlaybackChannels);
        }

        if (recorderUsb != null) {
            localVarFormParams.put("recorder[usb]", recorderUsb);
        }

        if (recorderSdhc != null) {
            localVarFormParams.put("recorder[sdhc]", recorderSdhc);
        }

        if (recorderMobileAccess != null) {
            localVarFormParams.put("recorder[mobile_access]", recorderMobileAccess);
        }

        if (recorderAlarms != null) {
            localVarFormParams.put("recorder[alarms]", recorderAlarms);
        }

        if (recorderRaidSupport != null) {
            localVarFormParams.put("recorder[raid_support]", recorderRaidSupport);
        }

        if (recorderStorage != null) {
            localVarFormParams.put("recorder[storage]", recorderStorage);
        }

        if (recorderAdditionalInformation != null) {
            localVarFormParams.put("recorder[additional_information]", recorderAdditionalInformation);
        }

        if (recorderDefaultUsername != null) {
            localVarFormParams.put("recorder[default_username]", recorderDefaultUsername);
        }

        if (recorderDefaultPassword != null) {
            localVarFormParams.put("recorder[default_password]", recorderDefaultPassword);
        }

        if (recorderJpegUrl != null) {
            localVarFormParams.put("recorder[jpeg_url]", recorderJpegUrl);
        }

        if (recorderH264Url != null) {
            localVarFormParams.put("recorder[h264_url]", recorderH264Url);
        }

        if (recorderMjpegUrl != null) {
            localVarFormParams.put("recorder[mjpeg_url]", recorderMjpegUrl);
        }

        if (recorderOfficialUrl != null) {
            localVarFormParams.put("recorder[official_url]", recorderOfficialUrl);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1RecordersIdJsonPatchValidateBeforeCall(String id, String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1RecordersIdJsonPatch(Async)");
        }

        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling apiV1RecordersIdJsonPatch(Async)");
        }

        // verify the required parameter 'recorderModel' is set
        if (recorderModel == null) {
            throw new ApiException("Missing the required parameter 'recorderModel' when calling apiV1RecordersIdJsonPatch(Async)");
        }

        // verify the required parameter 'recorderName' is set
        if (recorderName == null) {
            throw new ApiException("Missing the required parameter 'recorderName' when calling apiV1RecordersIdJsonPatch(Async)");
        }

        // verify the required parameter 'recorderRecorderType' is set
        if (recorderRecorderType == null) {
            throw new ApiException("Missing the required parameter 'recorderRecorderType' when calling apiV1RecordersIdJsonPatch(Async)");
        }

        return apiV1RecordersIdJsonPatchCall(id, vendorId, recorderModel, recorderName, recorderRecorderType, recorderResolution, recorderOnvif, recorderPsia, recorderPtz, recorderDiscontinued, recorderSupport3rdparty, recorderSdCard, recorderUpnp, recorderHotSwap, recorderHdmi, recorderDigitalIo, recorderAudioIn, recorderAudioOut, recorderInputChannels, recorderPlaybackChannels, recorderUsb, recorderSdhc, recorderMobileAccess, recorderAlarms, recorderRaidSupport, recorderStorage, recorderAdditionalInformation, recorderDefaultUsername, recorderDefaultPassword, recorderJpegUrl, recorderH264Url, recorderMjpegUrl, recorderOfficialUrl, _callback);

    }

    /**
     * Updates an existing Recorder
     * 
     * @param id Recorder ID (required)
     * @param vendorId Vendor ID (required)
     * @param recorderModel Model (required)
     * @param recorderName Name (required)
     * @param recorderRecorderType Type (required)
     * @param recorderResolution Resolution (optional)
     * @param recorderOnvif ONVIF (optional)
     * @param recorderPsia PSIA (optional)
     * @param recorderPtz PTZ (optional)
     * @param recorderDiscontinued Discontinued (optional)
     * @param recorderSupport3rdparty 3rd pparty Camera Support (optional)
     * @param recorderSdCard SD Card (optional)
     * @param recorderUpnp UPnP (optional)
     * @param recorderHotSwap Hot Swap (optional)
     * @param recorderHdmi HDMI Support (optional)
     * @param recorderDigitalIo Digital I/O (optional)
     * @param recorderAudioIn Audio In (optional)
     * @param recorderAudioOut Audio Out (optional)
     * @param recorderInputChannels Input Channels (optional)
     * @param recorderPlaybackChannels Playback Channels (optional)
     * @param recorderUsb USB Ports (optional)
     * @param recorderSdhc SD Card (GB) (optional)
     * @param recorderMobileAccess Mobile Access (optional)
     * @param recorderAlarms Alarms (optional)
     * @param recorderRaidSupport Raid Support (optional)
     * @param recorderStorage Internal Storage (optional)
     * @param recorderAdditionalInformation Additional Information (optional)
     * @param recorderDefaultUsername Default Username (optional)
     * @param recorderDefaultPassword Default Password (optional)
     * @param recorderJpegUrl JPEG URL (optional)
     * @param recorderH264Url H264 URL (optional)
     * @param recorderMjpegUrl MJPEG URL (optional)
     * @param recorderOfficialUrl Official URL (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1RecordersIdJsonPatch(String id, String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl) throws ApiException {
        apiV1RecordersIdJsonPatchWithHttpInfo(id, vendorId, recorderModel, recorderName, recorderRecorderType, recorderResolution, recorderOnvif, recorderPsia, recorderPtz, recorderDiscontinued, recorderSupport3rdparty, recorderSdCard, recorderUpnp, recorderHotSwap, recorderHdmi, recorderDigitalIo, recorderAudioIn, recorderAudioOut, recorderInputChannels, recorderPlaybackChannels, recorderUsb, recorderSdhc, recorderMobileAccess, recorderAlarms, recorderRaidSupport, recorderStorage, recorderAdditionalInformation, recorderDefaultUsername, recorderDefaultPassword, recorderJpegUrl, recorderH264Url, recorderMjpegUrl, recorderOfficialUrl);
    }

    /**
     * Updates an existing Recorder
     * 
     * @param id Recorder ID (required)
     * @param vendorId Vendor ID (required)
     * @param recorderModel Model (required)
     * @param recorderName Name (required)
     * @param recorderRecorderType Type (required)
     * @param recorderResolution Resolution (optional)
     * @param recorderOnvif ONVIF (optional)
     * @param recorderPsia PSIA (optional)
     * @param recorderPtz PTZ (optional)
     * @param recorderDiscontinued Discontinued (optional)
     * @param recorderSupport3rdparty 3rd pparty Camera Support (optional)
     * @param recorderSdCard SD Card (optional)
     * @param recorderUpnp UPnP (optional)
     * @param recorderHotSwap Hot Swap (optional)
     * @param recorderHdmi HDMI Support (optional)
     * @param recorderDigitalIo Digital I/O (optional)
     * @param recorderAudioIn Audio In (optional)
     * @param recorderAudioOut Audio Out (optional)
     * @param recorderInputChannels Input Channels (optional)
     * @param recorderPlaybackChannels Playback Channels (optional)
     * @param recorderUsb USB Ports (optional)
     * @param recorderSdhc SD Card (GB) (optional)
     * @param recorderMobileAccess Mobile Access (optional)
     * @param recorderAlarms Alarms (optional)
     * @param recorderRaidSupport Raid Support (optional)
     * @param recorderStorage Internal Storage (optional)
     * @param recorderAdditionalInformation Additional Information (optional)
     * @param recorderDefaultUsername Default Username (optional)
     * @param recorderDefaultPassword Default Password (optional)
     * @param recorderJpegUrl JPEG URL (optional)
     * @param recorderH264Url H264 URL (optional)
     * @param recorderMjpegUrl MJPEG URL (optional)
     * @param recorderOfficialUrl Official URL (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1RecordersIdJsonPatchWithHttpInfo(String id, String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl) throws ApiException {
        okhttp3.Call localVarCall = apiV1RecordersIdJsonPatchValidateBeforeCall(id, vendorId, recorderModel, recorderName, recorderRecorderType, recorderResolution, recorderOnvif, recorderPsia, recorderPtz, recorderDiscontinued, recorderSupport3rdparty, recorderSdCard, recorderUpnp, recorderHotSwap, recorderHdmi, recorderDigitalIo, recorderAudioIn, recorderAudioOut, recorderInputChannels, recorderPlaybackChannels, recorderUsb, recorderSdhc, recorderMobileAccess, recorderAlarms, recorderRaidSupport, recorderStorage, recorderAdditionalInformation, recorderDefaultUsername, recorderDefaultPassword, recorderJpegUrl, recorderH264Url, recorderMjpegUrl, recorderOfficialUrl, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates an existing Recorder (asynchronously)
     * 
     * @param id Recorder ID (required)
     * @param vendorId Vendor ID (required)
     * @param recorderModel Model (required)
     * @param recorderName Name (required)
     * @param recorderRecorderType Type (required)
     * @param recorderResolution Resolution (optional)
     * @param recorderOnvif ONVIF (optional)
     * @param recorderPsia PSIA (optional)
     * @param recorderPtz PTZ (optional)
     * @param recorderDiscontinued Discontinued (optional)
     * @param recorderSupport3rdparty 3rd pparty Camera Support (optional)
     * @param recorderSdCard SD Card (optional)
     * @param recorderUpnp UPnP (optional)
     * @param recorderHotSwap Hot Swap (optional)
     * @param recorderHdmi HDMI Support (optional)
     * @param recorderDigitalIo Digital I/O (optional)
     * @param recorderAudioIn Audio In (optional)
     * @param recorderAudioOut Audio Out (optional)
     * @param recorderInputChannels Input Channels (optional)
     * @param recorderPlaybackChannels Playback Channels (optional)
     * @param recorderUsb USB Ports (optional)
     * @param recorderSdhc SD Card (GB) (optional)
     * @param recorderMobileAccess Mobile Access (optional)
     * @param recorderAlarms Alarms (optional)
     * @param recorderRaidSupport Raid Support (optional)
     * @param recorderStorage Internal Storage (optional)
     * @param recorderAdditionalInformation Additional Information (optional)
     * @param recorderDefaultUsername Default Username (optional)
     * @param recorderDefaultPassword Default Password (optional)
     * @param recorderJpegUrl JPEG URL (optional)
     * @param recorderH264Url H264 URL (optional)
     * @param recorderMjpegUrl MJPEG URL (optional)
     * @param recorderOfficialUrl Official URL (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1RecordersIdJsonPatchAsync(String id, String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1RecordersIdJsonPatchValidateBeforeCall(id, vendorId, recorderModel, recorderName, recorderRecorderType, recorderResolution, recorderOnvif, recorderPsia, recorderPtz, recorderDiscontinued, recorderSupport3rdparty, recorderSdCard, recorderUpnp, recorderHotSwap, recorderHdmi, recorderDigitalIo, recorderAudioIn, recorderAudioOut, recorderInputChannels, recorderPlaybackChannels, recorderUsb, recorderSdhc, recorderMobileAccess, recorderAlarms, recorderRaidSupport, recorderStorage, recorderAdditionalInformation, recorderDefaultUsername, recorderDefaultPassword, recorderJpegUrl, recorderH264Url, recorderMjpegUrl, recorderOfficialUrl, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1RecordersIdJsonPut
     * @param id Recorder ID (required)
     * @param vendorId Vendor ID (required)
     * @param recorderModel Model (required)
     * @param recorderName Name (required)
     * @param recorderRecorderType Type (required)
     * @param recorderResolution Resolution (optional)
     * @param recorderOnvif ONVIF (optional)
     * @param recorderPsia PSIA (optional)
     * @param recorderPtz PTZ (optional)
     * @param recorderDiscontinued Discontinued (optional)
     * @param recorderSupport3rdparty 3rd pparty Camera Support (optional)
     * @param recorderSdCard SD Card (optional)
     * @param recorderUpnp UPnP (optional)
     * @param recorderHotSwap Hot Swap (optional)
     * @param recorderHdmi HDMI Support (optional)
     * @param recorderDigitalIo Digital I/O (optional)
     * @param recorderAudioIn Audio In (optional)
     * @param recorderAudioOut Audio Out (optional)
     * @param recorderInputChannels Input Channels (optional)
     * @param recorderPlaybackChannels Playback Channels (optional)
     * @param recorderUsb USB Ports (optional)
     * @param recorderSdhc SD Card (GB) (optional)
     * @param recorderMobileAccess Mobile Access (optional)
     * @param recorderAlarms Alarms (optional)
     * @param recorderRaidSupport Raid Support (optional)
     * @param recorderStorage Internal Storage (optional)
     * @param recorderAdditionalInformation Additional Information (optional)
     * @param recorderDefaultUsername Default Username (optional)
     * @param recorderDefaultPassword Default Password (optional)
     * @param recorderJpegUrl JPEG URL (optional)
     * @param recorderH264Url H264 URL (optional)
     * @param recorderMjpegUrl MJPEG URL (optional)
     * @param recorderOfficialUrl Official URL (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1RecordersIdJsonPutCall(String id, String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/recorders/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorId != null) {
            localVarFormParams.put("vendor_id", vendorId);
        }

        if (recorderModel != null) {
            localVarFormParams.put("recorder[model]", recorderModel);
        }

        if (recorderName != null) {
            localVarFormParams.put("recorder[name]", recorderName);
        }

        if (recorderRecorderType != null) {
            localVarFormParams.put("recorder[recorder_type]", recorderRecorderType);
        }

        if (recorderResolution != null) {
            localVarFormParams.put("recorder[resolution]", recorderResolution);
        }

        if (recorderOnvif != null) {
            localVarFormParams.put("recorder[onvif]", recorderOnvif);
        }

        if (recorderPsia != null) {
            localVarFormParams.put("recorder[psia]", recorderPsia);
        }

        if (recorderPtz != null) {
            localVarFormParams.put("recorder[ptz]", recorderPtz);
        }

        if (recorderDiscontinued != null) {
            localVarFormParams.put("recorder[discontinued]", recorderDiscontinued);
        }

        if (recorderSupport3rdparty != null) {
            localVarFormParams.put("recorder[support_3rdparty]", recorderSupport3rdparty);
        }

        if (recorderSdCard != null) {
            localVarFormParams.put("recorder[sd_card]", recorderSdCard);
        }

        if (recorderUpnp != null) {
            localVarFormParams.put("recorder[upnp]", recorderUpnp);
        }

        if (recorderHotSwap != null) {
            localVarFormParams.put("recorder[hot_swap]", recorderHotSwap);
        }

        if (recorderHdmi != null) {
            localVarFormParams.put("recorder[hdmi]", recorderHdmi);
        }

        if (recorderDigitalIo != null) {
            localVarFormParams.put("recorder[digital_io]", recorderDigitalIo);
        }

        if (recorderAudioIn != null) {
            localVarFormParams.put("recorder[audio_in]", recorderAudioIn);
        }

        if (recorderAudioOut != null) {
            localVarFormParams.put("recorder[audio_out]", recorderAudioOut);
        }

        if (recorderInputChannels != null) {
            localVarFormParams.put("recorder[input_channels]", recorderInputChannels);
        }

        if (recorderPlaybackChannels != null) {
            localVarFormParams.put("recorder[playback_channels]", recorderPlaybackChannels);
        }

        if (recorderUsb != null) {
            localVarFormParams.put("recorder[usb]", recorderUsb);
        }

        if (recorderSdhc != null) {
            localVarFormParams.put("recorder[sdhc]", recorderSdhc);
        }

        if (recorderMobileAccess != null) {
            localVarFormParams.put("recorder[mobile_access]", recorderMobileAccess);
        }

        if (recorderAlarms != null) {
            localVarFormParams.put("recorder[alarms]", recorderAlarms);
        }

        if (recorderRaidSupport != null) {
            localVarFormParams.put("recorder[raid_support]", recorderRaidSupport);
        }

        if (recorderStorage != null) {
            localVarFormParams.put("recorder[storage]", recorderStorage);
        }

        if (recorderAdditionalInformation != null) {
            localVarFormParams.put("recorder[additional_information]", recorderAdditionalInformation);
        }

        if (recorderDefaultUsername != null) {
            localVarFormParams.put("recorder[default_username]", recorderDefaultUsername);
        }

        if (recorderDefaultPassword != null) {
            localVarFormParams.put("recorder[default_password]", recorderDefaultPassword);
        }

        if (recorderJpegUrl != null) {
            localVarFormParams.put("recorder[jpeg_url]", recorderJpegUrl);
        }

        if (recorderH264Url != null) {
            localVarFormParams.put("recorder[h264_url]", recorderH264Url);
        }

        if (recorderMjpegUrl != null) {
            localVarFormParams.put("recorder[mjpeg_url]", recorderMjpegUrl);
        }

        if (recorderOfficialUrl != null) {
            localVarFormParams.put("recorder[official_url]", recorderOfficialUrl);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1RecordersIdJsonPutValidateBeforeCall(String id, String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1RecordersIdJsonPut(Async)");
        }

        // verify the required parameter 'vendorId' is set
        if (vendorId == null) {
            throw new ApiException("Missing the required parameter 'vendorId' when calling apiV1RecordersIdJsonPut(Async)");
        }

        // verify the required parameter 'recorderModel' is set
        if (recorderModel == null) {
            throw new ApiException("Missing the required parameter 'recorderModel' when calling apiV1RecordersIdJsonPut(Async)");
        }

        // verify the required parameter 'recorderName' is set
        if (recorderName == null) {
            throw new ApiException("Missing the required parameter 'recorderName' when calling apiV1RecordersIdJsonPut(Async)");
        }

        // verify the required parameter 'recorderRecorderType' is set
        if (recorderRecorderType == null) {
            throw new ApiException("Missing the required parameter 'recorderRecorderType' when calling apiV1RecordersIdJsonPut(Async)");
        }

        return apiV1RecordersIdJsonPutCall(id, vendorId, recorderModel, recorderName, recorderRecorderType, recorderResolution, recorderOnvif, recorderPsia, recorderPtz, recorderDiscontinued, recorderSupport3rdparty, recorderSdCard, recorderUpnp, recorderHotSwap, recorderHdmi, recorderDigitalIo, recorderAudioIn, recorderAudioOut, recorderInputChannels, recorderPlaybackChannels, recorderUsb, recorderSdhc, recorderMobileAccess, recorderAlarms, recorderRaidSupport, recorderStorage, recorderAdditionalInformation, recorderDefaultUsername, recorderDefaultPassword, recorderJpegUrl, recorderH264Url, recorderMjpegUrl, recorderOfficialUrl, _callback);

    }

    /**
     * Updates an existing Recorder
     * 
     * @param id Recorder ID (required)
     * @param vendorId Vendor ID (required)
     * @param recorderModel Model (required)
     * @param recorderName Name (required)
     * @param recorderRecorderType Type (required)
     * @param recorderResolution Resolution (optional)
     * @param recorderOnvif ONVIF (optional)
     * @param recorderPsia PSIA (optional)
     * @param recorderPtz PTZ (optional)
     * @param recorderDiscontinued Discontinued (optional)
     * @param recorderSupport3rdparty 3rd pparty Camera Support (optional)
     * @param recorderSdCard SD Card (optional)
     * @param recorderUpnp UPnP (optional)
     * @param recorderHotSwap Hot Swap (optional)
     * @param recorderHdmi HDMI Support (optional)
     * @param recorderDigitalIo Digital I/O (optional)
     * @param recorderAudioIn Audio In (optional)
     * @param recorderAudioOut Audio Out (optional)
     * @param recorderInputChannels Input Channels (optional)
     * @param recorderPlaybackChannels Playback Channels (optional)
     * @param recorderUsb USB Ports (optional)
     * @param recorderSdhc SD Card (GB) (optional)
     * @param recorderMobileAccess Mobile Access (optional)
     * @param recorderAlarms Alarms (optional)
     * @param recorderRaidSupport Raid Support (optional)
     * @param recorderStorage Internal Storage (optional)
     * @param recorderAdditionalInformation Additional Information (optional)
     * @param recorderDefaultUsername Default Username (optional)
     * @param recorderDefaultPassword Default Password (optional)
     * @param recorderJpegUrl JPEG URL (optional)
     * @param recorderH264Url H264 URL (optional)
     * @param recorderMjpegUrl MJPEG URL (optional)
     * @param recorderOfficialUrl Official URL (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1RecordersIdJsonPut(String id, String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl) throws ApiException {
        apiV1RecordersIdJsonPutWithHttpInfo(id, vendorId, recorderModel, recorderName, recorderRecorderType, recorderResolution, recorderOnvif, recorderPsia, recorderPtz, recorderDiscontinued, recorderSupport3rdparty, recorderSdCard, recorderUpnp, recorderHotSwap, recorderHdmi, recorderDigitalIo, recorderAudioIn, recorderAudioOut, recorderInputChannels, recorderPlaybackChannels, recorderUsb, recorderSdhc, recorderMobileAccess, recorderAlarms, recorderRaidSupport, recorderStorage, recorderAdditionalInformation, recorderDefaultUsername, recorderDefaultPassword, recorderJpegUrl, recorderH264Url, recorderMjpegUrl, recorderOfficialUrl);
    }

    /**
     * Updates an existing Recorder
     * 
     * @param id Recorder ID (required)
     * @param vendorId Vendor ID (required)
     * @param recorderModel Model (required)
     * @param recorderName Name (required)
     * @param recorderRecorderType Type (required)
     * @param recorderResolution Resolution (optional)
     * @param recorderOnvif ONVIF (optional)
     * @param recorderPsia PSIA (optional)
     * @param recorderPtz PTZ (optional)
     * @param recorderDiscontinued Discontinued (optional)
     * @param recorderSupport3rdparty 3rd pparty Camera Support (optional)
     * @param recorderSdCard SD Card (optional)
     * @param recorderUpnp UPnP (optional)
     * @param recorderHotSwap Hot Swap (optional)
     * @param recorderHdmi HDMI Support (optional)
     * @param recorderDigitalIo Digital I/O (optional)
     * @param recorderAudioIn Audio In (optional)
     * @param recorderAudioOut Audio Out (optional)
     * @param recorderInputChannels Input Channels (optional)
     * @param recorderPlaybackChannels Playback Channels (optional)
     * @param recorderUsb USB Ports (optional)
     * @param recorderSdhc SD Card (GB) (optional)
     * @param recorderMobileAccess Mobile Access (optional)
     * @param recorderAlarms Alarms (optional)
     * @param recorderRaidSupport Raid Support (optional)
     * @param recorderStorage Internal Storage (optional)
     * @param recorderAdditionalInformation Additional Information (optional)
     * @param recorderDefaultUsername Default Username (optional)
     * @param recorderDefaultPassword Default Password (optional)
     * @param recorderJpegUrl JPEG URL (optional)
     * @param recorderH264Url H264 URL (optional)
     * @param recorderMjpegUrl MJPEG URL (optional)
     * @param recorderOfficialUrl Official URL (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1RecordersIdJsonPutWithHttpInfo(String id, String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl) throws ApiException {
        okhttp3.Call localVarCall = apiV1RecordersIdJsonPutValidateBeforeCall(id, vendorId, recorderModel, recorderName, recorderRecorderType, recorderResolution, recorderOnvif, recorderPsia, recorderPtz, recorderDiscontinued, recorderSupport3rdparty, recorderSdCard, recorderUpnp, recorderHotSwap, recorderHdmi, recorderDigitalIo, recorderAudioIn, recorderAudioOut, recorderInputChannels, recorderPlaybackChannels, recorderUsb, recorderSdhc, recorderMobileAccess, recorderAlarms, recorderRaidSupport, recorderStorage, recorderAdditionalInformation, recorderDefaultUsername, recorderDefaultPassword, recorderJpegUrl, recorderH264Url, recorderMjpegUrl, recorderOfficialUrl, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates an existing Recorder (asynchronously)
     * 
     * @param id Recorder ID (required)
     * @param vendorId Vendor ID (required)
     * @param recorderModel Model (required)
     * @param recorderName Name (required)
     * @param recorderRecorderType Type (required)
     * @param recorderResolution Resolution (optional)
     * @param recorderOnvif ONVIF (optional)
     * @param recorderPsia PSIA (optional)
     * @param recorderPtz PTZ (optional)
     * @param recorderDiscontinued Discontinued (optional)
     * @param recorderSupport3rdparty 3rd pparty Camera Support (optional)
     * @param recorderSdCard SD Card (optional)
     * @param recorderUpnp UPnP (optional)
     * @param recorderHotSwap Hot Swap (optional)
     * @param recorderHdmi HDMI Support (optional)
     * @param recorderDigitalIo Digital I/O (optional)
     * @param recorderAudioIn Audio In (optional)
     * @param recorderAudioOut Audio Out (optional)
     * @param recorderInputChannels Input Channels (optional)
     * @param recorderPlaybackChannels Playback Channels (optional)
     * @param recorderUsb USB Ports (optional)
     * @param recorderSdhc SD Card (GB) (optional)
     * @param recorderMobileAccess Mobile Access (optional)
     * @param recorderAlarms Alarms (optional)
     * @param recorderRaidSupport Raid Support (optional)
     * @param recorderStorage Internal Storage (optional)
     * @param recorderAdditionalInformation Additional Information (optional)
     * @param recorderDefaultUsername Default Username (optional)
     * @param recorderDefaultPassword Default Password (optional)
     * @param recorderJpegUrl JPEG URL (optional)
     * @param recorderH264Url H264 URL (optional)
     * @param recorderMjpegUrl MJPEG URL (optional)
     * @param recorderOfficialUrl Official URL (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1RecordersIdJsonPutAsync(String id, String vendorId, String recorderModel, String recorderName, String recorderRecorderType, String recorderResolution, String recorderOnvif, String recorderPsia, String recorderPtz, String recorderDiscontinued, String recorderSupport3rdparty, String recorderSdCard, String recorderUpnp, String recorderHotSwap, String recorderHdmi, String recorderDigitalIo, String recorderAudioIn, String recorderAudioOut, String recorderInputChannels, String recorderPlaybackChannels, String recorderUsb, String recorderSdhc, String recorderMobileAccess, String recorderAlarms, String recorderRaidSupport, String recorderStorage, String recorderAdditionalInformation, String recorderDefaultUsername, String recorderDefaultPassword, String recorderJpegUrl, String recorderH264Url, String recorderMjpegUrl, String recorderOfficialUrl, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1RecordersIdJsonPutValidateBeforeCall(id, vendorId, recorderModel, recorderName, recorderRecorderType, recorderResolution, recorderOnvif, recorderPsia, recorderPtz, recorderDiscontinued, recorderSupport3rdparty, recorderSdCard, recorderUpnp, recorderHotSwap, recorderHdmi, recorderDigitalIo, recorderAudioIn, recorderAudioOut, recorderInputChannels, recorderPlaybackChannels, recorderUsb, recorderSdhc, recorderMobileAccess, recorderAlarms, recorderRaidSupport, recorderStorage, recorderAdditionalInformation, recorderDefaultUsername, recorderDefaultPassword, recorderJpegUrl, recorderH264Url, recorderMjpegUrl, recorderOfficialUrl, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1RecordersIndex
     * @param page Page number (optional)
     * @param order Sort order (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1RecordersIndexCall(Integer page, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/recorders.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1RecordersIndexValidateBeforeCall(Integer page, String order, final ApiCallback _callback) throws ApiException {
        return apiV1RecordersIndexCall(page, order, _callback);

    }

    /**
     * Fetches all Recorders
     * 
     * @param page Page number (optional)
     * @param order Sort order (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1RecordersIndex(Integer page, String order) throws ApiException {
        apiV1RecordersIndexWithHttpInfo(page, order);
    }

    /**
     * Fetches all Recorders
     * 
     * @param page Page number (optional)
     * @param order Sort order (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1RecordersIndexWithHttpInfo(Integer page, String order) throws ApiException {
        okhttp3.Call localVarCall = apiV1RecordersIndexValidateBeforeCall(page, order, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fetches all Recorders (asynchronously)
     * 
     * @param page Page number (optional)
     * @param order Sort order (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1RecordersIndexAsync(Integer page, String order, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1RecordersIndexValidateBeforeCall(page, order, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1RecordersSearch
     * @param page Page number (optional)
     * @param qModelCont Model (optional)
     * @param qVendorNameCont Vendor (optional)
     * @param qSdhcEq SD Card (GB) (optional)
     * @param qTypeEq Type (optional)
     * @param qResolutionEq Resolution (optional)
     * @param qInputChannelsEq Input Channels (optional)
     * @param qPlaybackChannelsEq Playback Channels (optional)
     * @param qOnvifTrue ONVIF (optional)
     * @param qPsiaTrue PSIA (optional)
     * @param qPtzTrue PTZ (optional)
     * @param qSdCardTrue SD Card (optional)
     * @param qUpnpTrue UPnP (optional)
     * @param qAudioInTrue Audio In (optional)
     * @param qAudioOutTrue Audio Out (optional)
     * @param qHdmiTrue HDMI Support (optional)
     * @param qHotSwapTrue Hot Swap (optional)
     * @param qSupport3rdpartyTrue 3rd pparty Camera Support (optional)
     * @param qDigitalIoTrue Digital I/O (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1RecordersSearchCall(Integer page, String qModelCont, String qVendorNameCont, String qSdhcEq, String qTypeEq, String qResolutionEq, String qInputChannelsEq, String qPlaybackChannelsEq, String qOnvifTrue, String qPsiaTrue, String qPtzTrue, String qSdCardTrue, String qUpnpTrue, String qAudioInTrue, String qAudioOutTrue, String qHdmiTrue, String qHotSwapTrue, String qSupport3rdpartyTrue, String qDigitalIoTrue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/recorders/search.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (qModelCont != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[model_cont]", qModelCont));
        }

        if (qVendorNameCont != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[vendor_name_cont]", qVendorNameCont));
        }

        if (qSdhcEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[sdhc_eq]", qSdhcEq));
        }

        if (qTypeEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[type_eq]", qTypeEq));
        }

        if (qResolutionEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[resolution_eq]", qResolutionEq));
        }

        if (qInputChannelsEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[input_channels_eq]", qInputChannelsEq));
        }

        if (qPlaybackChannelsEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[playback_channels_eq]", qPlaybackChannelsEq));
        }

        if (qOnvifTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[onvif_true]", qOnvifTrue));
        }

        if (qPsiaTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[psia_true]", qPsiaTrue));
        }

        if (qPtzTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[ptz_true]", qPtzTrue));
        }

        if (qSdCardTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[sd_card_true]", qSdCardTrue));
        }

        if (qUpnpTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[upnp_true]", qUpnpTrue));
        }

        if (qAudioInTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[audio_in_true]", qAudioInTrue));
        }

        if (qAudioOutTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[audio_out_true]", qAudioOutTrue));
        }

        if (qHdmiTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[hdmi_true]", qHdmiTrue));
        }

        if (qHotSwapTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[hot_swap_true]", qHotSwapTrue));
        }

        if (qSupport3rdpartyTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[support_3rdparty_true]", qSupport3rdpartyTrue));
        }

        if (qDigitalIoTrue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q[digital_io_true]", qDigitalIoTrue));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1RecordersSearchValidateBeforeCall(Integer page, String qModelCont, String qVendorNameCont, String qSdhcEq, String qTypeEq, String qResolutionEq, String qInputChannelsEq, String qPlaybackChannelsEq, String qOnvifTrue, String qPsiaTrue, String qPtzTrue, String qSdCardTrue, String qUpnpTrue, String qAudioInTrue, String qAudioOutTrue, String qHdmiTrue, String qHotSwapTrue, String qSupport3rdpartyTrue, String qDigitalIoTrue, final ApiCallback _callback) throws ApiException {
        return apiV1RecordersSearchCall(page, qModelCont, qVendorNameCont, qSdhcEq, qTypeEq, qResolutionEq, qInputChannelsEq, qPlaybackChannelsEq, qOnvifTrue, qPsiaTrue, qPtzTrue, qSdCardTrue, qUpnpTrue, qAudioInTrue, qAudioOutTrue, qHdmiTrue, qHotSwapTrue, qSupport3rdpartyTrue, qDigitalIoTrue, _callback);

    }

    /**
     * Searches all Recorders
     * 
     * @param page Page number (optional)
     * @param qModelCont Model (optional)
     * @param qVendorNameCont Vendor (optional)
     * @param qSdhcEq SD Card (GB) (optional)
     * @param qTypeEq Type (optional)
     * @param qResolutionEq Resolution (optional)
     * @param qInputChannelsEq Input Channels (optional)
     * @param qPlaybackChannelsEq Playback Channels (optional)
     * @param qOnvifTrue ONVIF (optional)
     * @param qPsiaTrue PSIA (optional)
     * @param qPtzTrue PTZ (optional)
     * @param qSdCardTrue SD Card (optional)
     * @param qUpnpTrue UPnP (optional)
     * @param qAudioInTrue Audio In (optional)
     * @param qAudioOutTrue Audio Out (optional)
     * @param qHdmiTrue HDMI Support (optional)
     * @param qHotSwapTrue Hot Swap (optional)
     * @param qSupport3rdpartyTrue 3rd pparty Camera Support (optional)
     * @param qDigitalIoTrue Digital I/O (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1RecordersSearch(Integer page, String qModelCont, String qVendorNameCont, String qSdhcEq, String qTypeEq, String qResolutionEq, String qInputChannelsEq, String qPlaybackChannelsEq, String qOnvifTrue, String qPsiaTrue, String qPtzTrue, String qSdCardTrue, String qUpnpTrue, String qAudioInTrue, String qAudioOutTrue, String qHdmiTrue, String qHotSwapTrue, String qSupport3rdpartyTrue, String qDigitalIoTrue) throws ApiException {
        apiV1RecordersSearchWithHttpInfo(page, qModelCont, qVendorNameCont, qSdhcEq, qTypeEq, qResolutionEq, qInputChannelsEq, qPlaybackChannelsEq, qOnvifTrue, qPsiaTrue, qPtzTrue, qSdCardTrue, qUpnpTrue, qAudioInTrue, qAudioOutTrue, qHdmiTrue, qHotSwapTrue, qSupport3rdpartyTrue, qDigitalIoTrue);
    }

    /**
     * Searches all Recorders
     * 
     * @param page Page number (optional)
     * @param qModelCont Model (optional)
     * @param qVendorNameCont Vendor (optional)
     * @param qSdhcEq SD Card (GB) (optional)
     * @param qTypeEq Type (optional)
     * @param qResolutionEq Resolution (optional)
     * @param qInputChannelsEq Input Channels (optional)
     * @param qPlaybackChannelsEq Playback Channels (optional)
     * @param qOnvifTrue ONVIF (optional)
     * @param qPsiaTrue PSIA (optional)
     * @param qPtzTrue PTZ (optional)
     * @param qSdCardTrue SD Card (optional)
     * @param qUpnpTrue UPnP (optional)
     * @param qAudioInTrue Audio In (optional)
     * @param qAudioOutTrue Audio Out (optional)
     * @param qHdmiTrue HDMI Support (optional)
     * @param qHotSwapTrue Hot Swap (optional)
     * @param qSupport3rdpartyTrue 3rd pparty Camera Support (optional)
     * @param qDigitalIoTrue Digital I/O (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1RecordersSearchWithHttpInfo(Integer page, String qModelCont, String qVendorNameCont, String qSdhcEq, String qTypeEq, String qResolutionEq, String qInputChannelsEq, String qPlaybackChannelsEq, String qOnvifTrue, String qPsiaTrue, String qPtzTrue, String qSdCardTrue, String qUpnpTrue, String qAudioInTrue, String qAudioOutTrue, String qHdmiTrue, String qHotSwapTrue, String qSupport3rdpartyTrue, String qDigitalIoTrue) throws ApiException {
        okhttp3.Call localVarCall = apiV1RecordersSearchValidateBeforeCall(page, qModelCont, qVendorNameCont, qSdhcEq, qTypeEq, qResolutionEq, qInputChannelsEq, qPlaybackChannelsEq, qOnvifTrue, qPsiaTrue, qPtzTrue, qSdCardTrue, qUpnpTrue, qAudioInTrue, qAudioOutTrue, qHdmiTrue, qHotSwapTrue, qSupport3rdpartyTrue, qDigitalIoTrue, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Searches all Recorders (asynchronously)
     * 
     * @param page Page number (optional)
     * @param qModelCont Model (optional)
     * @param qVendorNameCont Vendor (optional)
     * @param qSdhcEq SD Card (GB) (optional)
     * @param qTypeEq Type (optional)
     * @param qResolutionEq Resolution (optional)
     * @param qInputChannelsEq Input Channels (optional)
     * @param qPlaybackChannelsEq Playback Channels (optional)
     * @param qOnvifTrue ONVIF (optional)
     * @param qPsiaTrue PSIA (optional)
     * @param qPtzTrue PTZ (optional)
     * @param qSdCardTrue SD Card (optional)
     * @param qUpnpTrue UPnP (optional)
     * @param qAudioInTrue Audio In (optional)
     * @param qAudioOutTrue Audio Out (optional)
     * @param qHdmiTrue HDMI Support (optional)
     * @param qHotSwapTrue Hot Swap (optional)
     * @param qSupport3rdpartyTrue 3rd pparty Camera Support (optional)
     * @param qDigitalIoTrue Digital I/O (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> The request you made is not acceptable </td><td>  -  </td></tr>
        <tr><td> 416 </td><td> Requested Range Not Satisfiable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1RecordersSearchAsync(Integer page, String qModelCont, String qVendorNameCont, String qSdhcEq, String qTypeEq, String qResolutionEq, String qInputChannelsEq, String qPlaybackChannelsEq, String qOnvifTrue, String qPsiaTrue, String qPtzTrue, String qSdCardTrue, String qUpnpTrue, String qAudioInTrue, String qAudioOutTrue, String qHdmiTrue, String qHotSwapTrue, String qSupport3rdpartyTrue, String qDigitalIoTrue, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1RecordersSearchValidateBeforeCall(page, qModelCont, qVendorNameCont, qSdhcEq, qTypeEq, qResolutionEq, qInputChannelsEq, qPlaybackChannelsEq, qOnvifTrue, qPsiaTrue, qPtzTrue, qSdCardTrue, qUpnpTrue, qAudioInTrue, qAudioOutTrue, qHdmiTrue, qHotSwapTrue, qSupport3rdpartyTrue, qDigitalIoTrue, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1RecordersShow
     * @param id Recorder ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1RecordersShowCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/recorders/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1RecordersShowValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1RecordersShow(Async)");
        }

        return apiV1RecordersShowCall(id, _callback);

    }

    /**
     * Fetches a single Recorder
     * 
     * @param id Recorder ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1RecordersShow(Integer id) throws ApiException {
        apiV1RecordersShowWithHttpInfo(id);
    }

    /**
     * Fetches a single Recorder
     * 
     * @param id Recorder ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1RecordersShowWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = apiV1RecordersShowValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fetches a single Recorder (asynchronously)
     * 
     * @param id Recorder ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response was specified </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1RecordersShowAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1RecordersShowValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
