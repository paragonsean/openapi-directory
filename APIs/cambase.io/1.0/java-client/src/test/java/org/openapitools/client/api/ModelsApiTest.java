/*
 * Cambase.io
 * Cambase.io is a project by Evercam.io in order to make it easier for software developers to have a reliable, up to date source of model hardware information available via a public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModelsApi
 */
@Disabled
public class ModelsApiTest {

    private final ModelsApi api = new ModelsApi();

    /**
     * Creates a new Model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ModelsCreateTest() throws ApiException {
        String vendorId = null;
        String modelModel = null;
        String modelShape = null;
        String modelResolution = null;
        String modelOnvif = null;
        String modelPsia = null;
        String modelPtz = null;
        String modelInfrared = null;
        String modelVarifocal = null;
        String modelSdCard = null;
        String modelUpnp = null;
        String modelAudioIn = null;
        String modelAudioOut = null;
        String modelDefaultUsername = null;
        String modelDefaultPassword = null;
        String modelJpegUrl = null;
        String modelH264Url = null;
        String modelMjpegUrl = null;
        api.apiV1ModelsCreate(vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl);
        // TODO: test validations
    }

    /**
     * Updates an existing Model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ModelsIdJsonPatchTest() throws ApiException {
        String id = null;
        String vendorId = null;
        String modelModel = null;
        String modelShape = null;
        String modelResolution = null;
        String modelOnvif = null;
        String modelPsia = null;
        String modelPtz = null;
        String modelInfrared = null;
        String modelVarifocal = null;
        String modelSdCard = null;
        String modelUpnp = null;
        String modelAudioIn = null;
        String modelAudioOut = null;
        String modelDefaultUsername = null;
        String modelDefaultPassword = null;
        String modelJpegUrl = null;
        String modelH264Url = null;
        String modelMjpegUrl = null;
        api.apiV1ModelsIdJsonPatch(id, vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl);
        // TODO: test validations
    }

    /**
     * Updates an existing Model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ModelsIdJsonPutTest() throws ApiException {
        String id = null;
        String vendorId = null;
        String modelModel = null;
        String modelShape = null;
        String modelResolution = null;
        String modelOnvif = null;
        String modelPsia = null;
        String modelPtz = null;
        String modelInfrared = null;
        String modelVarifocal = null;
        String modelSdCard = null;
        String modelUpnp = null;
        String modelAudioIn = null;
        String modelAudioOut = null;
        String modelDefaultUsername = null;
        String modelDefaultPassword = null;
        String modelJpegUrl = null;
        String modelH264Url = null;
        String modelMjpegUrl = null;
        api.apiV1ModelsIdJsonPut(id, vendorId, modelModel, modelShape, modelResolution, modelOnvif, modelPsia, modelPtz, modelInfrared, modelVarifocal, modelSdCard, modelUpnp, modelAudioIn, modelAudioOut, modelDefaultUsername, modelDefaultPassword, modelJpegUrl, modelH264Url, modelMjpegUrl);
        // TODO: test validations
    }

    /**
     * Fetches all Models
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ModelsIndexTest() throws ApiException {
        Integer page = null;
        String order = null;
        api.apiV1ModelsIndex(page, order);
        // TODO: test validations
    }

    /**
     * Searches all Models
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ModelsSearchTest() throws ApiException {
        Integer page = null;
        String qModelCont = null;
        String qManufacturerNameCont = null;
        String qShapeEq = null;
        String qResolutionEq = null;
        String qOnvifTrue = null;
        String qPsiaTrue = null;
        String qPtzTrue = null;
        String qInfraredTrue = null;
        String qVarifocalTrue = null;
        String qSdCardTrue = null;
        String qUpnpTrue = null;
        String qAudioInTrue = null;
        String qAudioOutTrue = null;
        api.apiV1ModelsSearch(page, qModelCont, qManufacturerNameCont, qShapeEq, qResolutionEq, qOnvifTrue, qPsiaTrue, qPtzTrue, qInfraredTrue, qVarifocalTrue, qSdCardTrue, qUpnpTrue, qAudioInTrue, qAudioOutTrue);
        // TODO: test validations
    }

    /**
     * Fetches a single Model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiV1ModelsShowTest() throws ApiException {
        Integer id = null;
        api.apiV1ModelsShow(id);
        // TODO: test validations
    }

}
