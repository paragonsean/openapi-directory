/**
 * Cambase.io
 * Cambase.io is a project by Evercam.io in order to make it easier for software developers to have a reliable, up to date source of model hardware information available via a public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Vendors service.
* @module api/VendorsApi
* @version 1.0
*/
export default class VendorsApi {

    /**
    * Constructs a new VendorsApi. 
    * @alias module:api/VendorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1VendorsCreate operation.
     * @callback module:api/VendorsApi~apiV1VendorsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Vendor
     * @param {String} vendorName Name
     * @param {Object} opts Optional parameters
     * @param {String} [vendorInfo] Info.
     * @param {String} [vendorUrl] Website
     * @param {String} [vendorMac] MAC
     * @param {module:api/VendorsApi~apiV1VendorsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1VendorsCreate(vendorName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vendorName' is set
      if (vendorName === undefined || vendorName === null) {
        throw new Error("Missing the required parameter 'vendorName' when calling apiV1VendorsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'vendor[name]': vendorName,
        'vendor[info]': opts['vendorInfo'],
        'vendor[url]': opts['vendorUrl'],
        'vendor[mac]': opts['vendorMac']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/vendors.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1VendorsIdJsonPatch operation.
     * @callback module:api/VendorsApi~apiV1VendorsIdJsonPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Vendor
     * @param {String} id Vendor ID
     * @param {Object} opts Optional parameters
     * @param {String} [vendorName] Name
     * @param {String} [vendorInfo] Info.
     * @param {String} [vendorUrl] Website
     * @param {String} [vendorMac] MAC
     * @param {module:api/VendorsApi~apiV1VendorsIdJsonPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1VendorsIdJsonPatch(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1VendorsIdJsonPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'vendor[name]': opts['vendorName'],
        'vendor[info]': opts['vendorInfo'],
        'vendor[url]': opts['vendorUrl'],
        'vendor[mac]': opts['vendorMac']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/vendors/{id}.json', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1VendorsIdJsonPut operation.
     * @callback module:api/VendorsApi~apiV1VendorsIdJsonPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Vendor
     * @param {String} id Vendor ID
     * @param {Object} opts Optional parameters
     * @param {String} [vendorName] Name
     * @param {String} [vendorInfo] Info.
     * @param {String} [vendorUrl] Website
     * @param {String} [vendorMac] MAC
     * @param {module:api/VendorsApi~apiV1VendorsIdJsonPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1VendorsIdJsonPut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1VendorsIdJsonPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'vendor[name]': opts['vendorName'],
        'vendor[info]': opts['vendorInfo'],
        'vendor[url]': opts['vendorUrl'],
        'vendor[mac]': opts['vendorMac']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/vendors/{id}.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1VendorsIndex operation.
     * @callback module:api/VendorsApi~apiV1VendorsIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches all Vendors
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number
     * @param {String} [order] Sort order
     * @param {module:api/VendorsApi~apiV1VendorsIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1VendorsIndex(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/vendors.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1VendorsShow operation.
     * @callback module:api/VendorsApi~apiV1VendorsShowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches a single Vendor
     * @param {String} id Vendor ID
     * @param {Object} opts Optional parameters
     * @param {String} [order] Sort order
     * @param {module:api/VendorsApi~apiV1VendorsShowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1VendorsShow(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1VendorsShow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/vendors/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
