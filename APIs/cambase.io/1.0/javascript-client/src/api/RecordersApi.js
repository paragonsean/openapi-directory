/**
 * Cambase.io
 * Cambase.io is a project by Evercam.io in order to make it easier for software developers to have a reliable, up to date source of model hardware information available via a public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Recorders service.
* @module api/RecordersApi
* @version 1.0
*/
export default class RecordersApi {

    /**
    * Constructs a new RecordersApi. 
    * @alias module:api/RecordersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1RecordersCreate operation.
     * @callback module:api/RecordersApi~apiV1RecordersCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Recorder
     * @param {String} vendorId Vendor ID
     * @param {String} recorderModel Model
     * @param {String} recorderName Name
     * @param {String} recorderRecorderType Type
     * @param {Object} opts Optional parameters
     * @param {String} [recorderResolution] Resolution
     * @param {String} [recorderOnvif] ONVIF
     * @param {String} [recorderPsia] PSIA
     * @param {String} [recorderPtz] PTZ
     * @param {String} [recorderDiscontinued] Discontinued
     * @param {String} [recorderSupport3rdparty] 3rd pparty Camera Support
     * @param {String} [recorderSdCard] SD Card
     * @param {String} [recorderUpnp] UPnP
     * @param {String} [recorderHotSwap] Hot Swap
     * @param {String} [recorderHdmi] HDMI Support
     * @param {String} [recorderDigitalIo] Digital I/O
     * @param {String} [recorderAudioIn] Audio In
     * @param {String} [recorderAudioOut] Audio Out
     * @param {String} [recorderInputChannels] Input Channels
     * @param {String} [recorderPlaybackChannels] Playback Channels
     * @param {String} [recorderUsb] USB Ports
     * @param {String} [recorderSdhc] SD Card (GB)
     * @param {String} [recorderMobileAccess] Mobile Access
     * @param {String} [recorderAlarms] Alarms
     * @param {String} [recorderRaidSupport] Raid Support
     * @param {String} [recorderStorage] Internal Storage
     * @param {String} [recorderAdditionalInformation] Additional Information
     * @param {String} [recorderDefaultUsername] Default Username
     * @param {String} [recorderDefaultPassword] Default Password
     * @param {String} [recorderJpegUrl] JPEG URL
     * @param {String} [recorderH264Url] H264 URL
     * @param {String} [recorderMjpegUrl] MJPEG URL
     * @param {String} [recorderOfficialUrl] Official URL
     * @param {module:api/RecordersApi~apiV1RecordersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1RecordersCreate(vendorId, recorderModel, recorderName, recorderRecorderType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling apiV1RecordersCreate");
      }
      // verify the required parameter 'recorderModel' is set
      if (recorderModel === undefined || recorderModel === null) {
        throw new Error("Missing the required parameter 'recorderModel' when calling apiV1RecordersCreate");
      }
      // verify the required parameter 'recorderName' is set
      if (recorderName === undefined || recorderName === null) {
        throw new Error("Missing the required parameter 'recorderName' when calling apiV1RecordersCreate");
      }
      // verify the required parameter 'recorderRecorderType' is set
      if (recorderRecorderType === undefined || recorderRecorderType === null) {
        throw new Error("Missing the required parameter 'recorderRecorderType' when calling apiV1RecordersCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'vendor_id': vendorId,
        'recorder[model]': recorderModel,
        'recorder[name]': recorderName,
        'recorder[recorder_type]': recorderRecorderType,
        'recorder[resolution]': opts['recorderResolution'],
        'recorder[onvif]': opts['recorderOnvif'],
        'recorder[psia]': opts['recorderPsia'],
        'recorder[ptz]': opts['recorderPtz'],
        'recorder[discontinued]': opts['recorderDiscontinued'],
        'recorder[support_3rdparty]': opts['recorderSupport3rdparty'],
        'recorder[sd_card]': opts['recorderSdCard'],
        'recorder[upnp]': opts['recorderUpnp'],
        'recorder[hot_swap]': opts['recorderHotSwap'],
        'recorder[hdmi]': opts['recorderHdmi'],
        'recorder[digital_io]': opts['recorderDigitalIo'],
        'recorder[audio_in]': opts['recorderAudioIn'],
        'recorder[audio_out]': opts['recorderAudioOut'],
        'recorder[input_channels]': opts['recorderInputChannels'],
        'recorder[playback_channels]': opts['recorderPlaybackChannels'],
        'recorder[usb]': opts['recorderUsb'],
        'recorder[sdhc]': opts['recorderSdhc'],
        'recorder[mobile_access]': opts['recorderMobileAccess'],
        'recorder[alarms]': opts['recorderAlarms'],
        'recorder[raid_support]': opts['recorderRaidSupport'],
        'recorder[storage]': opts['recorderStorage'],
        'recorder[additional_information]': opts['recorderAdditionalInformation'],
        'recorder[default_username]': opts['recorderDefaultUsername'],
        'recorder[default_password]': opts['recorderDefaultPassword'],
        'recorder[jpeg_url]': opts['recorderJpegUrl'],
        'recorder[h264_url]': opts['recorderH264Url'],
        'recorder[mjpeg_url]': opts['recorderMjpegUrl'],
        'recorder[official_url]': opts['recorderOfficialUrl']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/recorders.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1RecordersIdJsonPatch operation.
     * @callback module:api/RecordersApi~apiV1RecordersIdJsonPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Recorder
     * @param {String} id Recorder ID
     * @param {String} vendorId Vendor ID
     * @param {String} recorderModel Model
     * @param {String} recorderName Name
     * @param {String} recorderRecorderType Type
     * @param {Object} opts Optional parameters
     * @param {String} [recorderResolution] Resolution
     * @param {String} [recorderOnvif] ONVIF
     * @param {String} [recorderPsia] PSIA
     * @param {String} [recorderPtz] PTZ
     * @param {String} [recorderDiscontinued] Discontinued
     * @param {String} [recorderSupport3rdparty] 3rd pparty Camera Support
     * @param {String} [recorderSdCard] SD Card
     * @param {String} [recorderUpnp] UPnP
     * @param {String} [recorderHotSwap] Hot Swap
     * @param {String} [recorderHdmi] HDMI Support
     * @param {String} [recorderDigitalIo] Digital I/O
     * @param {String} [recorderAudioIn] Audio In
     * @param {String} [recorderAudioOut] Audio Out
     * @param {String} [recorderInputChannels] Input Channels
     * @param {String} [recorderPlaybackChannels] Playback Channels
     * @param {String} [recorderUsb] USB Ports
     * @param {String} [recorderSdhc] SD Card (GB)
     * @param {String} [recorderMobileAccess] Mobile Access
     * @param {String} [recorderAlarms] Alarms
     * @param {String} [recorderRaidSupport] Raid Support
     * @param {String} [recorderStorage] Internal Storage
     * @param {String} [recorderAdditionalInformation] Additional Information
     * @param {String} [recorderDefaultUsername] Default Username
     * @param {String} [recorderDefaultPassword] Default Password
     * @param {String} [recorderJpegUrl] JPEG URL
     * @param {String} [recorderH264Url] H264 URL
     * @param {String} [recorderMjpegUrl] MJPEG URL
     * @param {String} [recorderOfficialUrl] Official URL
     * @param {module:api/RecordersApi~apiV1RecordersIdJsonPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1RecordersIdJsonPatch(id, vendorId, recorderModel, recorderName, recorderRecorderType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1RecordersIdJsonPatch");
      }
      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling apiV1RecordersIdJsonPatch");
      }
      // verify the required parameter 'recorderModel' is set
      if (recorderModel === undefined || recorderModel === null) {
        throw new Error("Missing the required parameter 'recorderModel' when calling apiV1RecordersIdJsonPatch");
      }
      // verify the required parameter 'recorderName' is set
      if (recorderName === undefined || recorderName === null) {
        throw new Error("Missing the required parameter 'recorderName' when calling apiV1RecordersIdJsonPatch");
      }
      // verify the required parameter 'recorderRecorderType' is set
      if (recorderRecorderType === undefined || recorderRecorderType === null) {
        throw new Error("Missing the required parameter 'recorderRecorderType' when calling apiV1RecordersIdJsonPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'vendor_id': vendorId,
        'recorder[model]': recorderModel,
        'recorder[name]': recorderName,
        'recorder[recorder_type]': recorderRecorderType,
        'recorder[resolution]': opts['recorderResolution'],
        'recorder[onvif]': opts['recorderOnvif'],
        'recorder[psia]': opts['recorderPsia'],
        'recorder[ptz]': opts['recorderPtz'],
        'recorder[discontinued]': opts['recorderDiscontinued'],
        'recorder[support_3rdparty]': opts['recorderSupport3rdparty'],
        'recorder[sd_card]': opts['recorderSdCard'],
        'recorder[upnp]': opts['recorderUpnp'],
        'recorder[hot_swap]': opts['recorderHotSwap'],
        'recorder[hdmi]': opts['recorderHdmi'],
        'recorder[digital_io]': opts['recorderDigitalIo'],
        'recorder[audio_in]': opts['recorderAudioIn'],
        'recorder[audio_out]': opts['recorderAudioOut'],
        'recorder[input_channels]': opts['recorderInputChannels'],
        'recorder[playback_channels]': opts['recorderPlaybackChannels'],
        'recorder[usb]': opts['recorderUsb'],
        'recorder[sdhc]': opts['recorderSdhc'],
        'recorder[mobile_access]': opts['recorderMobileAccess'],
        'recorder[alarms]': opts['recorderAlarms'],
        'recorder[raid_support]': opts['recorderRaidSupport'],
        'recorder[storage]': opts['recorderStorage'],
        'recorder[additional_information]': opts['recorderAdditionalInformation'],
        'recorder[default_username]': opts['recorderDefaultUsername'],
        'recorder[default_password]': opts['recorderDefaultPassword'],
        'recorder[jpeg_url]': opts['recorderJpegUrl'],
        'recorder[h264_url]': opts['recorderH264Url'],
        'recorder[mjpeg_url]': opts['recorderMjpegUrl'],
        'recorder[official_url]': opts['recorderOfficialUrl']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/recorders/{id}.json', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1RecordersIdJsonPut operation.
     * @callback module:api/RecordersApi~apiV1RecordersIdJsonPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Recorder
     * @param {String} id Recorder ID
     * @param {String} vendorId Vendor ID
     * @param {String} recorderModel Model
     * @param {String} recorderName Name
     * @param {String} recorderRecorderType Type
     * @param {Object} opts Optional parameters
     * @param {String} [recorderResolution] Resolution
     * @param {String} [recorderOnvif] ONVIF
     * @param {String} [recorderPsia] PSIA
     * @param {String} [recorderPtz] PTZ
     * @param {String} [recorderDiscontinued] Discontinued
     * @param {String} [recorderSupport3rdparty] 3rd pparty Camera Support
     * @param {String} [recorderSdCard] SD Card
     * @param {String} [recorderUpnp] UPnP
     * @param {String} [recorderHotSwap] Hot Swap
     * @param {String} [recorderHdmi] HDMI Support
     * @param {String} [recorderDigitalIo] Digital I/O
     * @param {String} [recorderAudioIn] Audio In
     * @param {String} [recorderAudioOut] Audio Out
     * @param {String} [recorderInputChannels] Input Channels
     * @param {String} [recorderPlaybackChannels] Playback Channels
     * @param {String} [recorderUsb] USB Ports
     * @param {String} [recorderSdhc] SD Card (GB)
     * @param {String} [recorderMobileAccess] Mobile Access
     * @param {String} [recorderAlarms] Alarms
     * @param {String} [recorderRaidSupport] Raid Support
     * @param {String} [recorderStorage] Internal Storage
     * @param {String} [recorderAdditionalInformation] Additional Information
     * @param {String} [recorderDefaultUsername] Default Username
     * @param {String} [recorderDefaultPassword] Default Password
     * @param {String} [recorderJpegUrl] JPEG URL
     * @param {String} [recorderH264Url] H264 URL
     * @param {String} [recorderMjpegUrl] MJPEG URL
     * @param {String} [recorderOfficialUrl] Official URL
     * @param {module:api/RecordersApi~apiV1RecordersIdJsonPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1RecordersIdJsonPut(id, vendorId, recorderModel, recorderName, recorderRecorderType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1RecordersIdJsonPut");
      }
      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling apiV1RecordersIdJsonPut");
      }
      // verify the required parameter 'recorderModel' is set
      if (recorderModel === undefined || recorderModel === null) {
        throw new Error("Missing the required parameter 'recorderModel' when calling apiV1RecordersIdJsonPut");
      }
      // verify the required parameter 'recorderName' is set
      if (recorderName === undefined || recorderName === null) {
        throw new Error("Missing the required parameter 'recorderName' when calling apiV1RecordersIdJsonPut");
      }
      // verify the required parameter 'recorderRecorderType' is set
      if (recorderRecorderType === undefined || recorderRecorderType === null) {
        throw new Error("Missing the required parameter 'recorderRecorderType' when calling apiV1RecordersIdJsonPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'vendor_id': vendorId,
        'recorder[model]': recorderModel,
        'recorder[name]': recorderName,
        'recorder[recorder_type]': recorderRecorderType,
        'recorder[resolution]': opts['recorderResolution'],
        'recorder[onvif]': opts['recorderOnvif'],
        'recorder[psia]': opts['recorderPsia'],
        'recorder[ptz]': opts['recorderPtz'],
        'recorder[discontinued]': opts['recorderDiscontinued'],
        'recorder[support_3rdparty]': opts['recorderSupport3rdparty'],
        'recorder[sd_card]': opts['recorderSdCard'],
        'recorder[upnp]': opts['recorderUpnp'],
        'recorder[hot_swap]': opts['recorderHotSwap'],
        'recorder[hdmi]': opts['recorderHdmi'],
        'recorder[digital_io]': opts['recorderDigitalIo'],
        'recorder[audio_in]': opts['recorderAudioIn'],
        'recorder[audio_out]': opts['recorderAudioOut'],
        'recorder[input_channels]': opts['recorderInputChannels'],
        'recorder[playback_channels]': opts['recorderPlaybackChannels'],
        'recorder[usb]': opts['recorderUsb'],
        'recorder[sdhc]': opts['recorderSdhc'],
        'recorder[mobile_access]': opts['recorderMobileAccess'],
        'recorder[alarms]': opts['recorderAlarms'],
        'recorder[raid_support]': opts['recorderRaidSupport'],
        'recorder[storage]': opts['recorderStorage'],
        'recorder[additional_information]': opts['recorderAdditionalInformation'],
        'recorder[default_username]': opts['recorderDefaultUsername'],
        'recorder[default_password]': opts['recorderDefaultPassword'],
        'recorder[jpeg_url]': opts['recorderJpegUrl'],
        'recorder[h264_url]': opts['recorderH264Url'],
        'recorder[mjpeg_url]': opts['recorderMjpegUrl'],
        'recorder[official_url]': opts['recorderOfficialUrl']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/recorders/{id}.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1RecordersIndex operation.
     * @callback module:api/RecordersApi~apiV1RecordersIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches all Recorders
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number
     * @param {String} [order] Sort order
     * @param {module:api/RecordersApi~apiV1RecordersIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1RecordersIndex(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/recorders.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1RecordersSearch operation.
     * @callback module:api/RecordersApi~apiV1RecordersSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches all Recorders
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number
     * @param {String} [qModelCont] Model
     * @param {String} [qVendorNameCont] Vendor
     * @param {String} [qSdhcEq] SD Card (GB)
     * @param {String} [qTypeEq] Type
     * @param {String} [qResolutionEq] Resolution
     * @param {String} [qInputChannelsEq] Input Channels
     * @param {String} [qPlaybackChannelsEq] Playback Channels
     * @param {String} [qOnvifTrue] ONVIF
     * @param {String} [qPsiaTrue] PSIA
     * @param {String} [qPtzTrue] PTZ
     * @param {String} [qSdCardTrue] SD Card
     * @param {String} [qUpnpTrue] UPnP
     * @param {String} [qAudioInTrue] Audio In
     * @param {String} [qAudioOutTrue] Audio Out
     * @param {String} [qHdmiTrue] HDMI Support
     * @param {String} [qHotSwapTrue] Hot Swap
     * @param {String} [qSupport3rdpartyTrue] 3rd pparty Camera Support
     * @param {String} [qDigitalIoTrue] Digital I/O
     * @param {module:api/RecordersApi~apiV1RecordersSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1RecordersSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'q[model_cont]': opts['qModelCont'],
        'q[vendor_name_cont]': opts['qVendorNameCont'],
        'q[sdhc_eq]': opts['qSdhcEq'],
        'q[type_eq]': opts['qTypeEq'],
        'q[resolution_eq]': opts['qResolutionEq'],
        'q[input_channels_eq]': opts['qInputChannelsEq'],
        'q[playback_channels_eq]': opts['qPlaybackChannelsEq'],
        'q[onvif_true]': opts['qOnvifTrue'],
        'q[psia_true]': opts['qPsiaTrue'],
        'q[ptz_true]': opts['qPtzTrue'],
        'q[sd_card_true]': opts['qSdCardTrue'],
        'q[upnp_true]': opts['qUpnpTrue'],
        'q[audio_in_true]': opts['qAudioInTrue'],
        'q[audio_out_true]': opts['qAudioOutTrue'],
        'q[hdmi_true]': opts['qHdmiTrue'],
        'q[hot_swap_true]': opts['qHotSwapTrue'],
        'q[support_3rdparty_true]': opts['qSupport3rdpartyTrue'],
        'q[digital_io_true]': opts['qDigitalIoTrue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/recorders/search.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1RecordersShow operation.
     * @callback module:api/RecordersApi~apiV1RecordersShowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches a single Recorder
     * @param {Number} id Recorder ID
     * @param {module:api/RecordersApi~apiV1RecordersShowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1RecordersShow(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1RecordersShow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/recorders/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
