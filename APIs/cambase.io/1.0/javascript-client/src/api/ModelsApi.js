/**
 * Cambase.io
 * Cambase.io is a project by Evercam.io in order to make it easier for software developers to have a reliable, up to date source of model hardware information available via a public API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Models service.
* @module api/ModelsApi
* @version 1.0
*/
export default class ModelsApi {

    /**
    * Constructs a new ModelsApi. 
    * @alias module:api/ModelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1ModelsCreate operation.
     * @callback module:api/ModelsApi~apiV1ModelsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Model
     * @param {String} vendorId Vendor ID
     * @param {String} modelModel Model
     * @param {Object} opts Optional parameters
     * @param {String} [modelShape] Shape
     * @param {String} [modelResolution] Resolution
     * @param {String} [modelOnvif] ONVIF
     * @param {String} [modelPsia] PSIA
     * @param {String} [modelPtz] PTZ
     * @param {String} [modelInfrared] Infrared
     * @param {String} [modelVarifocal] Varifocal
     * @param {String} [modelSdCard] SD Card
     * @param {String} [modelUpnp] UPnP
     * @param {String} [modelAudioIn] UPnP
     * @param {String} [modelAudioOut] UPnP
     * @param {String} [modelDefaultUsername] Default Username
     * @param {String} [modelDefaultPassword] Default Password
     * @param {String} [modelJpegUrl] JPEG URL
     * @param {String} [modelH264Url] H264 URL
     * @param {String} [modelMjpegUrl] MJPEG URL
     * @param {module:api/ModelsApi~apiV1ModelsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1ModelsCreate(vendorId, modelModel, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling apiV1ModelsCreate");
      }
      // verify the required parameter 'modelModel' is set
      if (modelModel === undefined || modelModel === null) {
        throw new Error("Missing the required parameter 'modelModel' when calling apiV1ModelsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'vendor_id': vendorId,
        'model[model]': modelModel,
        'model[shape]': opts['modelShape'],
        'model[resolution]': opts['modelResolution'],
        'model[onvif]': opts['modelOnvif'],
        'model[psia]': opts['modelPsia'],
        'model[ptz]': opts['modelPtz'],
        'model[infrared]': opts['modelInfrared'],
        'model[varifocal]': opts['modelVarifocal'],
        'model[sd_card]': opts['modelSdCard'],
        'model[upnp]': opts['modelUpnp'],
        'model[audio_in]': opts['modelAudioIn'],
        'model[audio_out]': opts['modelAudioOut'],
        'model[default_username]': opts['modelDefaultUsername'],
        'model[default_password]': opts['modelDefaultPassword'],
        'model[jpeg_url]': opts['modelJpegUrl'],
        'model[h264_url]': opts['modelH264Url'],
        'model[mjpeg_url]': opts['modelMjpegUrl']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/models.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ModelsIdJsonPatch operation.
     * @callback module:api/ModelsApi~apiV1ModelsIdJsonPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Model
     * @param {String} id Model ID
     * @param {String} vendorId Vendor ID
     * @param {Object} opts Optional parameters
     * @param {String} [modelModel] Model
     * @param {String} [modelShape] Shape
     * @param {String} [modelResolution] Resolution
     * @param {String} [modelOnvif] ONVIF
     * @param {String} [modelPsia] PSIA
     * @param {String} [modelPtz] PTZ
     * @param {String} [modelInfrared] Infrared
     * @param {String} [modelVarifocal] Varifocal
     * @param {String} [modelSdCard] SD Card
     * @param {String} [modelUpnp] UPnP
     * @param {String} [modelAudioIn] Audio In
     * @param {String} [modelAudioOut] Audio Out
     * @param {String} [modelDefaultUsername] Default Username
     * @param {String} [modelDefaultPassword] Default Password
     * @param {String} [modelJpegUrl] JPEG URL
     * @param {String} [modelH264Url] H264 URL
     * @param {String} [modelMjpegUrl] MJPEG URL
     * @param {module:api/ModelsApi~apiV1ModelsIdJsonPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1ModelsIdJsonPatch(id, vendorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ModelsIdJsonPatch");
      }
      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling apiV1ModelsIdJsonPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'vendor_id': vendorId,
        'model[model]': opts['modelModel'],
        'model[shape]': opts['modelShape'],
        'model[resolution]': opts['modelResolution'],
        'model[onvif]': opts['modelOnvif'],
        'model[psia]': opts['modelPsia'],
        'model[ptz]': opts['modelPtz'],
        'model[infrared]': opts['modelInfrared'],
        'model[varifocal]': opts['modelVarifocal'],
        'model[sd_card]': opts['modelSdCard'],
        'model[upnp]': opts['modelUpnp'],
        'model[audio_in]': opts['modelAudioIn'],
        'model[audio_out]': opts['modelAudioOut'],
        'model[default_username]': opts['modelDefaultUsername'],
        'model[default_password]': opts['modelDefaultPassword'],
        'model[jpeg_url]': opts['modelJpegUrl'],
        'model[h264_url]': opts['modelH264Url'],
        'model[mjpeg_url]': opts['modelMjpegUrl']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/models/{id}.json', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ModelsIdJsonPut operation.
     * @callback module:api/ModelsApi~apiV1ModelsIdJsonPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Model
     * @param {String} id Model ID
     * @param {String} vendorId Vendor ID
     * @param {Object} opts Optional parameters
     * @param {String} [modelModel] Model
     * @param {String} [modelShape] Shape
     * @param {String} [modelResolution] Resolution
     * @param {String} [modelOnvif] ONVIF
     * @param {String} [modelPsia] PSIA
     * @param {String} [modelPtz] PTZ
     * @param {String} [modelInfrared] Infrared
     * @param {String} [modelVarifocal] Varifocal
     * @param {String} [modelSdCard] SD Card
     * @param {String} [modelUpnp] UPnP
     * @param {String} [modelAudioIn] Audio In
     * @param {String} [modelAudioOut] Audio Out
     * @param {String} [modelDefaultUsername] Default Username
     * @param {String} [modelDefaultPassword] Default Password
     * @param {String} [modelJpegUrl] JPEG URL
     * @param {String} [modelH264Url] H264 URL
     * @param {String} [modelMjpegUrl] MJPEG URL
     * @param {module:api/ModelsApi~apiV1ModelsIdJsonPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1ModelsIdJsonPut(id, vendorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ModelsIdJsonPut");
      }
      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling apiV1ModelsIdJsonPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'vendor_id': vendorId,
        'model[model]': opts['modelModel'],
        'model[shape]': opts['modelShape'],
        'model[resolution]': opts['modelResolution'],
        'model[onvif]': opts['modelOnvif'],
        'model[psia]': opts['modelPsia'],
        'model[ptz]': opts['modelPtz'],
        'model[infrared]': opts['modelInfrared'],
        'model[varifocal]': opts['modelVarifocal'],
        'model[sd_card]': opts['modelSdCard'],
        'model[upnp]': opts['modelUpnp'],
        'model[audio_in]': opts['modelAudioIn'],
        'model[audio_out]': opts['modelAudioOut'],
        'model[default_username]': opts['modelDefaultUsername'],
        'model[default_password]': opts['modelDefaultPassword'],
        'model[jpeg_url]': opts['modelJpegUrl'],
        'model[h264_url]': opts['modelH264Url'],
        'model[mjpeg_url]': opts['modelMjpegUrl']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/models/{id}.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ModelsIndex operation.
     * @callback module:api/ModelsApi~apiV1ModelsIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches all Models
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number
     * @param {String} [order] Sort order
     * @param {module:api/ModelsApi~apiV1ModelsIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1ModelsIndex(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/models.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ModelsSearch operation.
     * @callback module:api/ModelsApi~apiV1ModelsSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches all Models
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Page number
     * @param {String} [qModelCont] Model
     * @param {String} [qManufacturerNameCont] Vendor
     * @param {String} [qShapeEq] Shape
     * @param {String} [qResolutionEq] Resolution
     * @param {String} [qOnvifTrue] ONVIF
     * @param {String} [qPsiaTrue] PSIA
     * @param {String} [qPtzTrue] PTZ
     * @param {String} [qInfraredTrue] Infrared
     * @param {String} [qVarifocalTrue] Varifocal
     * @param {String} [qSdCardTrue] SD Card
     * @param {String} [qUpnpTrue] UPnP
     * @param {String} [qAudioInTrue] Audio In
     * @param {String} [qAudioOutTrue] Audio Out
     * @param {module:api/ModelsApi~apiV1ModelsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1ModelsSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'q[model_cont]': opts['qModelCont'],
        'q[manufacturer_name_cont]': opts['qManufacturerNameCont'],
        'q[shape_eq]': opts['qShapeEq'],
        'q[resolution_eq]': opts['qResolutionEq'],
        'q[onvif_true]': opts['qOnvifTrue'],
        'q[psia_true]': opts['qPsiaTrue'],
        'q[ptz_true]': opts['qPtzTrue'],
        'q[infrared_true]': opts['qInfraredTrue'],
        'q[varifocal_true]': opts['qVarifocalTrue'],
        'q[sd_card_true]': opts['qSdCardTrue'],
        'q[upnp_true]': opts['qUpnpTrue'],
        'q[audio_in_true]': opts['qAudioInTrue'],
        'q[audio_out_true]': opts['qAudioOutTrue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/models/search.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1ModelsShow operation.
     * @callback module:api/ModelsApi~apiV1ModelsShowCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches a single Model
     * @param {Number} id Model ID
     * @param {module:api/ModelsApi~apiV1ModelsShowCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1ModelsShow(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1ModelsShow");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/models/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
