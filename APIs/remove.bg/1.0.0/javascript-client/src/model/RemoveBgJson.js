/**
 * Background Removal API
 * Remove the background of any image
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RemoveBgJson model module.
 * @module model/RemoveBgJson
 * @version 1.0.0
 */
class RemoveBgJson {
    /**
     * Constructs a new <code>RemoveBgJson</code>.
     * @alias module:model/RemoveBgJson
     */
    constructor() { 
        
        RemoveBgJson.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['add_shadow'] = false;
        obj['channels'] = 'rgba';
        obj['crop'] = false;
        obj['crop_margin'] = '0';
        obj['format'] = 'auto';
        obj['position'] = 'original';
        obj['roi'] = '0% 0% 100% 100%';
        obj['scale'] = 'original';
        obj['semitransparency'] = true;
        obj['size'] = 'preview';
        obj['type'] = 'auto';
        obj['type_level'] = '1';
    }

    /**
     * Constructs a <code>RemoveBgJson</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RemoveBgJson} obj Optional instance to populate.
     * @return {module:model/RemoveBgJson} The populated <code>RemoveBgJson</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RemoveBgJson();

            if (data.hasOwnProperty('add_shadow')) {
                obj['add_shadow'] = ApiClient.convertToType(data['add_shadow'], 'Boolean');
            }
            if (data.hasOwnProperty('bg_color')) {
                obj['bg_color'] = ApiClient.convertToType(data['bg_color'], 'String');
            }
            if (data.hasOwnProperty('bg_image_url')) {
                obj['bg_image_url'] = ApiClient.convertToType(data['bg_image_url'], 'String');
            }
            if (data.hasOwnProperty('channels')) {
                obj['channels'] = ApiClient.convertToType(data['channels'], 'String');
            }
            if (data.hasOwnProperty('crop')) {
                obj['crop'] = ApiClient.convertToType(data['crop'], 'Boolean');
            }
            if (data.hasOwnProperty('crop_margin')) {
                obj['crop_margin'] = ApiClient.convertToType(data['crop_margin'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('image_file_b64')) {
                obj['image_file_b64'] = ApiClient.convertToType(data['image_file_b64'], 'String');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('roi')) {
                obj['roi'] = ApiClient.convertToType(data['roi'], 'String');
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = ApiClient.convertToType(data['scale'], 'String');
            }
            if (data.hasOwnProperty('semitransparency')) {
                obj['semitransparency'] = ApiClient.convertToType(data['semitransparency'], 'Boolean');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('type_level')) {
                obj['type_level'] = ApiClient.convertToType(data['type_level'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RemoveBgJson</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RemoveBgJson</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bg_color'] && !(typeof data['bg_color'] === 'string' || data['bg_color'] instanceof String)) {
            throw new Error("Expected the field `bg_color` to be a primitive type in the JSON string but got " + data['bg_color']);
        }
        // ensure the json data is a string
        if (data['bg_image_url'] && !(typeof data['bg_image_url'] === 'string' || data['bg_image_url'] instanceof String)) {
            throw new Error("Expected the field `bg_image_url` to be a primitive type in the JSON string but got " + data['bg_image_url']);
        }
        // ensure the json data is a string
        if (data['channels'] && !(typeof data['channels'] === 'string' || data['channels'] instanceof String)) {
            throw new Error("Expected the field `channels` to be a primitive type in the JSON string but got " + data['channels']);
        }
        // ensure the json data is a string
        if (data['crop_margin'] && !(typeof data['crop_margin'] === 'string' || data['crop_margin'] instanceof String)) {
            throw new Error("Expected the field `crop_margin` to be a primitive type in the JSON string but got " + data['crop_margin']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['image_file_b64'] && !(typeof data['image_file_b64'] === 'string' || data['image_file_b64'] instanceof String)) {
            throw new Error("Expected the field `image_file_b64` to be a primitive type in the JSON string but got " + data['image_file_b64']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }
        // ensure the json data is a string
        if (data['roi'] && !(typeof data['roi'] === 'string' || data['roi'] instanceof String)) {
            throw new Error("Expected the field `roi` to be a primitive type in the JSON string but got " + data['roi']);
        }
        // ensure the json data is a string
        if (data['scale'] && !(typeof data['scale'] === 'string' || data['scale'] instanceof String)) {
            throw new Error("Expected the field `scale` to be a primitive type in the JSON string but got " + data['scale']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['type_level'] && !(typeof data['type_level'] === 'string' || data['type_level'] instanceof String)) {
            throw new Error("Expected the field `type_level` to be a primitive type in the JSON string but got " + data['type_level']);
        }

        return true;
    }


}



/**
 * Whether to add an artificial shadow to the result (default: false). NOTE: Adding shadows is currently only supported for car photos. Other subjects are returned without shadow, even if set to true (this might change in the future). 
 * @member {Boolean} add_shadow
 * @default false
 */
RemoveBgJson.prototype['add_shadow'] = false;

/**
 * Adds a solid color background. Can be a hex color code (e.g. 81d4fa, fff) or a color name (e.g. green). For semi-transparency, 4-/8-digit hex codes are also supported (e.g. 81d4fa77). (If this parameter is present, the other bg_ parameters must be empty.) 
 * @member {String} bg_color
 */
RemoveBgJson.prototype['bg_color'] = undefined;

/**
 * Adds a background image from a URL. The image is centered and resized to fill the canvas while preserving the aspect ratio, unless it already has the exact same dimensions as the foreground image. (If this parameter is present, the other bg_ parameters must be empty.)
 * @member {String} bg_image_url
 */
RemoveBgJson.prototype['bg_image_url'] = undefined;

/**
 * Request either the finalized image (\"rgba\", default) or an alpha mask (\"alpha\"). Note: Since remove.bg also applies RGB color corrections on edges, using only the alpha mask often leads to a lower final image quality. Therefore \"rgba\" is recommended. 
 * @member {module:model/RemoveBgJson.ChannelsEnum} channels
 * @default 'rgba'
 */
RemoveBgJson.prototype['channels'] = 'rgba';

/**
 * Whether to crop off all empty regions (default: false). Note that cropping has no effect on the amount of charged credits. 
 * @member {Boolean} crop
 * @default false
 */
RemoveBgJson.prototype['crop'] = false;

/**
 * Adds a margin around the cropped subject (default: 0). Can be an absolute value (e.g. \"30px\") or relative to the subject size (e.g. \"10%\"). Can be a single value (all sides), two values (top/bottom and left/right) or four values (top, right, bottom, left). This parameter only has an effect when \"crop=true\". The maximum margin that can be added on each side is 50% of the subject dimensions or 500 pixels. 
 * @member {String} crop_margin
 * @default '0'
 */
RemoveBgJson.prototype['crop_margin'] = '0';

/**
 * Result image format: \"auto\" = Use PNG format if transparent regions exist, otherwise use JPG format (default), \"png\" = PNG format with alpha transparency, \"jpg\" = JPG format, no transparency, \"zip\" = ZIP format, contains color image and alpha matte image, supports transparency (recommended). 
 * @member {module:model/RemoveBgJson.FormatEnum} format
 * @default 'auto'
 */
RemoveBgJson.prototype['format'] = 'auto';

/**
 * Source image file (base64-encoded string). (If this parameter is present, the other image source parameters must be empty.)
 * @member {String} image_file_b64
 */
RemoveBgJson.prototype['image_file_b64'] = undefined;

/**
 * Source image URL. (If this parameter is present, the other image source parameters must be empty.)
 * @member {String} image_url
 */
RemoveBgJson.prototype['image_url'] = undefined;

/**
 * Positions the subject within the image canvas. Can be \"original\" (default unless \"scale\" is given), \"center\" (default when \"scale\" is given) or a value from \"0%\" to \"100%\" (both horizontal and vertical) or two values (horizontal, vertical). 
 * @member {String} position
 * @default 'original'
 */
RemoveBgJson.prototype['position'] = 'original';

/**
 * Region of interest: Only contents of this rectangular region can be detected as foreground. Everything outside is considered background and will be removed. The rectangle is defined as two x/y coordinates in the format \"x1 y1 x2 y2\". The coordinates can be in absolute pixels (suffix 'px') or relative to the width/height of the image (suffix '%'). By default, the whole image is the region of interest (\"0% 0% 100% 100%\"). 
 * @member {String} roi
 * @default '0% 0% 100% 100%'
 */
RemoveBgJson.prototype['roi'] = '0% 0% 100% 100%';

/**
 * Scales the subject relative to the total image size. Can be any value from \"10%\" to \"100%\", or \"original\" (default). Scaling the subject implies \"position=center\" (unless specified otherwise). 
 * @member {String} scale
 * @default 'original'
 */
RemoveBgJson.prototype['scale'] = 'original';

/**
 * Whether to have semi-transparent regions in the result (default: true). NOTE: Semitransparency is currently only supported for car windows (this might change in the future). Other objects are returned without semitransparency, even if set to true. 
 * @member {Boolean} semitransparency
 * @default true
 */
RemoveBgJson.prototype['semitransparency'] = true;

/**
 * Maximum output image resolution: \"preview\" (default) = Resize image to 0.25 megapixels (e.g. 625×400 pixels) – 0.25 credits per image, \"full\" = Use original image resolution, up to 25 megapixels (e.g. 6250x4000) with formats ZIP or JPG, or up to 10 megapixels (e.g. 4000x2500) with PNG – 1 credit per image), \"auto\" = Use highest available resolution (based on image size and available credits).  For backwards-compatibility this parameter also accepts the values \"medium\" (up to 1.5 megapixels) and \"hd\" (up to 4 megapixels) for 1 credit per image. The value \"full\" is also available under the name \"4k\" and the value \"preview\" is aliased as \"small\" and \"regular\". 
 * @member {module:model/RemoveBgJson.SizeEnum} size
 * @default 'preview'
 */
RemoveBgJson.prototype['size'] = 'preview';

/**
 * Foreground type: \"auto\" = Automatically detect kind of foreground, \"person\" = Use person(s) as foreground, \"product\" = Use product(s) as foreground. \"car\" = Use car as foreground, 
 * @member {module:model/RemoveBgJson.TypeEnum} type
 * @default 'auto'
 */
RemoveBgJson.prototype['type'] = 'auto';

/**
 * Classification level of the detected foreground type: \"none\" = No classification (X-Type Header won't bet set on the response) \"1\" = Use coarse classification classes: [person, product, animal, car, other] \"2\" = Use more specific classification classes: [person, product, animal, car, car_interior, car_part, transportation, graphics, other] \"latest\" = Always use the latest classification classes available 
 * @member {module:model/RemoveBgJson.TypeLevelEnum} type_level
 * @default '1'
 */
RemoveBgJson.prototype['type_level'] = '1';





/**
 * Allowed values for the <code>channels</code> property.
 * @enum {String}
 * @readonly
 */
RemoveBgJson['ChannelsEnum'] = {

    /**
     * value: "rgba"
     * @const
     */
    "rgba": "rgba",

    /**
     * value: "alpha"
     * @const
     */
    "alpha": "alpha"
};


/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
RemoveBgJson['FormatEnum'] = {

    /**
     * value: "auto"
     * @const
     */
    "auto": "auto",

    /**
     * value: "png"
     * @const
     */
    "png": "png",

    /**
     * value: "jpg"
     * @const
     */
    "jpg": "jpg",

    /**
     * value: "zip"
     * @const
     */
    "zip": "zip"
};


/**
 * Allowed values for the <code>size</code> property.
 * @enum {String}
 * @readonly
 */
RemoveBgJson['SizeEnum'] = {

    /**
     * value: "preview"
     * @const
     */
    "preview": "preview",

    /**
     * value: "full"
     * @const
     */
    "full": "full",

    /**
     * value: "auto"
     * @const
     */
    "auto": "auto"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RemoveBgJson['TypeEnum'] = {

    /**
     * value: "auto"
     * @const
     */
    "auto": "auto",

    /**
     * value: "person"
     * @const
     */
    "person": "person",

    /**
     * value: "product"
     * @const
     */
    "product": "product",

    /**
     * value: "car"
     * @const
     */
    "car": "car"
};


/**
 * Allowed values for the <code>type_level</code> property.
 * @enum {String}
 * @readonly
 */
RemoveBgJson['TypeLevelEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "1"
     * @const
     */
    "1": "1",

    /**
     * value: "2"
     * @const
     */
    "2": "2",

    /**
     * value: "latest"
     * @const
     */
    "latest": "latest"
};



export default RemoveBgJson;

