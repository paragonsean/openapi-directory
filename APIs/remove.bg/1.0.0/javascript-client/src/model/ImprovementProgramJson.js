/**
 * Background Removal API
 * Remove the background of any image
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImprovementProgramJson model module.
 * @module model/ImprovementProgramJson
 * @version 1.0.0
 */
class ImprovementProgramJson {
    /**
     * Constructs a new <code>ImprovementProgramJson</code>.
     * @alias module:model/ImprovementProgramJson
     */
    constructor() { 
        
        ImprovementProgramJson.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImprovementProgramJson</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImprovementProgramJson} obj Optional instance to populate.
     * @return {module:model/ImprovementProgramJson} The populated <code>ImprovementProgramJson</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImprovementProgramJson();

            if (data.hasOwnProperty('image_file_b64')) {
                obj['image_file_b64'] = ApiClient.convertToType(data['image_file_b64'], 'String');
            }
            if (data.hasOwnProperty('image_filename')) {
                obj['image_filename'] = ApiClient.convertToType(data['image_filename'], 'String');
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImprovementProgramJson</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImprovementProgramJson</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['image_file_b64'] && !(typeof data['image_file_b64'] === 'string' || data['image_file_b64'] instanceof String)) {
            throw new Error("Expected the field `image_file_b64` to be a primitive type in the JSON string but got " + data['image_file_b64']);
        }
        // ensure the json data is a string
        if (data['image_filename'] && !(typeof data['image_filename'] === 'string' || data['image_filename'] instanceof String)) {
            throw new Error("Expected the field `image_filename` to be a primitive type in the JSON string but got " + data['image_filename']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }

        return true;
    }


}



/**
 * Source image file (base64-encoded string). (If this parameter is present, the other image source parameters must be empty.)
 * @member {String} image_file_b64
 */
ImprovementProgramJson.prototype['image_file_b64'] = undefined;

/**
 * Filename of the image, if not provided it will be autodetected form the submitted data.
 * @member {String} image_filename
 */
ImprovementProgramJson.prototype['image_filename'] = undefined;

/**
 * Source image URL. (If this parameter is present, the other image source parameters must be empty.)
 * @member {String} image_url
 */
ImprovementProgramJson.prototype['image_url'] = undefined;

/**
 * Images with the same tag are grouped together.
 * @member {String} tag
 */
ImprovementProgramJson.prototype['tag'] = undefined;






export default ImprovementProgramJson;

