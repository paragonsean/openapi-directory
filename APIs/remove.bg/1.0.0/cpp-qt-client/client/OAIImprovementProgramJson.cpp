/**
 * Background Removal API
 * Remove the background of any image
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImprovementProgramJson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImprovementProgramJson::OAIImprovementProgramJson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImprovementProgramJson::OAIImprovementProgramJson() {
    this->initializeModel();
}

OAIImprovementProgramJson::~OAIImprovementProgramJson() {}

void OAIImprovementProgramJson::initializeModel() {

    m_image_file_b64_isSet = false;
    m_image_file_b64_isValid = false;

    m_image_filename_isSet = false;
    m_image_filename_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAIImprovementProgramJson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImprovementProgramJson::fromJsonObject(QJsonObject json) {

    m_image_file_b64_isValid = ::OpenAPI::fromJsonValue(m_image_file_b64, json[QString("image_file_b64")]);
    m_image_file_b64_isSet = !json[QString("image_file_b64")].isNull() && m_image_file_b64_isValid;

    m_image_filename_isValid = ::OpenAPI::fromJsonValue(m_image_filename, json[QString("image_filename")]);
    m_image_filename_isSet = !json[QString("image_filename")].isNull() && m_image_filename_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAIImprovementProgramJson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImprovementProgramJson::asJsonObject() const {
    QJsonObject obj;
    if (m_image_file_b64_isSet) {
        obj.insert(QString("image_file_b64"), ::OpenAPI::toJsonValue(m_image_file_b64));
    }
    if (m_image_filename_isSet) {
        obj.insert(QString("image_filename"), ::OpenAPI::toJsonValue(m_image_filename));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

QString OAIImprovementProgramJson::getImageFileB64() const {
    return m_image_file_b64;
}
void OAIImprovementProgramJson::setImageFileB64(const QString &image_file_b64) {
    m_image_file_b64 = image_file_b64;
    m_image_file_b64_isSet = true;
}

bool OAIImprovementProgramJson::is_image_file_b64_Set() const{
    return m_image_file_b64_isSet;
}

bool OAIImprovementProgramJson::is_image_file_b64_Valid() const{
    return m_image_file_b64_isValid;
}

QString OAIImprovementProgramJson::getImageFilename() const {
    return m_image_filename;
}
void OAIImprovementProgramJson::setImageFilename(const QString &image_filename) {
    m_image_filename = image_filename;
    m_image_filename_isSet = true;
}

bool OAIImprovementProgramJson::is_image_filename_Set() const{
    return m_image_filename_isSet;
}

bool OAIImprovementProgramJson::is_image_filename_Valid() const{
    return m_image_filename_isValid;
}

QString OAIImprovementProgramJson::getImageUrl() const {
    return m_image_url;
}
void OAIImprovementProgramJson::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIImprovementProgramJson::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIImprovementProgramJson::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIImprovementProgramJson::getTag() const {
    return m_tag;
}
void OAIImprovementProgramJson::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIImprovementProgramJson::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIImprovementProgramJson::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAIImprovementProgramJson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_file_b64_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImprovementProgramJson::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
