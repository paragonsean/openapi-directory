/**
 * Background Removal API
 * Remove the background of any image
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoveBgJsonResponse_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoveBgJsonResponse_data::OAIRemoveBgJsonResponse_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoveBgJsonResponse_data::OAIRemoveBgJsonResponse_data() {
    this->initializeModel();
}

OAIRemoveBgJsonResponse_data::~OAIRemoveBgJsonResponse_data() {}

void OAIRemoveBgJsonResponse_data::initializeModel() {

    m_foreground_height_isSet = false;
    m_foreground_height_isValid = false;

    m_foreground_left_isSet = false;
    m_foreground_left_isValid = false;

    m_foreground_top_isSet = false;
    m_foreground_top_isValid = false;

    m_foreground_width_isSet = false;
    m_foreground_width_isValid = false;

    m_result_b64_isSet = false;
    m_result_b64_isValid = false;
}

void OAIRemoveBgJsonResponse_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoveBgJsonResponse_data::fromJsonObject(QJsonObject json) {

    m_foreground_height_isValid = ::OpenAPI::fromJsonValue(m_foreground_height, json[QString("foreground_height")]);
    m_foreground_height_isSet = !json[QString("foreground_height")].isNull() && m_foreground_height_isValid;

    m_foreground_left_isValid = ::OpenAPI::fromJsonValue(m_foreground_left, json[QString("foreground_left")]);
    m_foreground_left_isSet = !json[QString("foreground_left")].isNull() && m_foreground_left_isValid;

    m_foreground_top_isValid = ::OpenAPI::fromJsonValue(m_foreground_top, json[QString("foreground_top")]);
    m_foreground_top_isSet = !json[QString("foreground_top")].isNull() && m_foreground_top_isValid;

    m_foreground_width_isValid = ::OpenAPI::fromJsonValue(m_foreground_width, json[QString("foreground_width")]);
    m_foreground_width_isSet = !json[QString("foreground_width")].isNull() && m_foreground_width_isValid;

    m_result_b64_isValid = ::OpenAPI::fromJsonValue(m_result_b64, json[QString("result_b64")]);
    m_result_b64_isSet = !json[QString("result_b64")].isNull() && m_result_b64_isValid;
}

QString OAIRemoveBgJsonResponse_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoveBgJsonResponse_data::asJsonObject() const {
    QJsonObject obj;
    if (m_foreground_height_isSet) {
        obj.insert(QString("foreground_height"), ::OpenAPI::toJsonValue(m_foreground_height));
    }
    if (m_foreground_left_isSet) {
        obj.insert(QString("foreground_left"), ::OpenAPI::toJsonValue(m_foreground_left));
    }
    if (m_foreground_top_isSet) {
        obj.insert(QString("foreground_top"), ::OpenAPI::toJsonValue(m_foreground_top));
    }
    if (m_foreground_width_isSet) {
        obj.insert(QString("foreground_width"), ::OpenAPI::toJsonValue(m_foreground_width));
    }
    if (m_result_b64_isSet) {
        obj.insert(QString("result_b64"), ::OpenAPI::toJsonValue(m_result_b64));
    }
    return obj;
}

qint32 OAIRemoveBgJsonResponse_data::getForegroundHeight() const {
    return m_foreground_height;
}
void OAIRemoveBgJsonResponse_data::setForegroundHeight(const qint32 &foreground_height) {
    m_foreground_height = foreground_height;
    m_foreground_height_isSet = true;
}

bool OAIRemoveBgJsonResponse_data::is_foreground_height_Set() const{
    return m_foreground_height_isSet;
}

bool OAIRemoveBgJsonResponse_data::is_foreground_height_Valid() const{
    return m_foreground_height_isValid;
}

qint32 OAIRemoveBgJsonResponse_data::getForegroundLeft() const {
    return m_foreground_left;
}
void OAIRemoveBgJsonResponse_data::setForegroundLeft(const qint32 &foreground_left) {
    m_foreground_left = foreground_left;
    m_foreground_left_isSet = true;
}

bool OAIRemoveBgJsonResponse_data::is_foreground_left_Set() const{
    return m_foreground_left_isSet;
}

bool OAIRemoveBgJsonResponse_data::is_foreground_left_Valid() const{
    return m_foreground_left_isValid;
}

qint32 OAIRemoveBgJsonResponse_data::getForegroundTop() const {
    return m_foreground_top;
}
void OAIRemoveBgJsonResponse_data::setForegroundTop(const qint32 &foreground_top) {
    m_foreground_top = foreground_top;
    m_foreground_top_isSet = true;
}

bool OAIRemoveBgJsonResponse_data::is_foreground_top_Set() const{
    return m_foreground_top_isSet;
}

bool OAIRemoveBgJsonResponse_data::is_foreground_top_Valid() const{
    return m_foreground_top_isValid;
}

qint32 OAIRemoveBgJsonResponse_data::getForegroundWidth() const {
    return m_foreground_width;
}
void OAIRemoveBgJsonResponse_data::setForegroundWidth(const qint32 &foreground_width) {
    m_foreground_width = foreground_width;
    m_foreground_width_isSet = true;
}

bool OAIRemoveBgJsonResponse_data::is_foreground_width_Set() const{
    return m_foreground_width_isSet;
}

bool OAIRemoveBgJsonResponse_data::is_foreground_width_Valid() const{
    return m_foreground_width_isValid;
}

QString OAIRemoveBgJsonResponse_data::getResultB64() const {
    return m_result_b64;
}
void OAIRemoveBgJsonResponse_data::setResultB64(const QString &result_b64) {
    m_result_b64 = result_b64;
    m_result_b64_isSet = true;
}

bool OAIRemoveBgJsonResponse_data::is_result_b64_Set() const{
    return m_result_b64_isSet;
}

bool OAIRemoveBgJsonResponse_data::is_result_b64_Valid() const{
    return m_result_b64_isValid;
}

bool OAIRemoveBgJsonResponse_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_foreground_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreground_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreground_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreground_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_b64_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoveBgJsonResponse_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
