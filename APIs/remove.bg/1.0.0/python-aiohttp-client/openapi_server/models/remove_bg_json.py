# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoveBgJson(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_shadow: bool=False, bg_color: str=None, bg_image_url: str=None, channels: str='rgba', crop: bool=False, crop_margin: str='0', format: str='auto', image_file_b64: str=None, image_url: str=None, position: str='original', roi: str='0% 0% 100% 100%', scale: str='original', semitransparency: bool=True, size: str='preview', type: str='auto', type_level: str='1'):
        """RemoveBgJson - a model defined in OpenAPI

        :param add_shadow: The add_shadow of this RemoveBgJson.
        :param bg_color: The bg_color of this RemoveBgJson.
        :param bg_image_url: The bg_image_url of this RemoveBgJson.
        :param channels: The channels of this RemoveBgJson.
        :param crop: The crop of this RemoveBgJson.
        :param crop_margin: The crop_margin of this RemoveBgJson.
        :param format: The format of this RemoveBgJson.
        :param image_file_b64: The image_file_b64 of this RemoveBgJson.
        :param image_url: The image_url of this RemoveBgJson.
        :param position: The position of this RemoveBgJson.
        :param roi: The roi of this RemoveBgJson.
        :param scale: The scale of this RemoveBgJson.
        :param semitransparency: The semitransparency of this RemoveBgJson.
        :param size: The size of this RemoveBgJson.
        :param type: The type of this RemoveBgJson.
        :param type_level: The type_level of this RemoveBgJson.
        """
        self.openapi_types = {
            'add_shadow': bool,
            'bg_color': str,
            'bg_image_url': str,
            'channels': str,
            'crop': bool,
            'crop_margin': str,
            'format': str,
            'image_file_b64': str,
            'image_url': str,
            'position': str,
            'roi': str,
            'scale': str,
            'semitransparency': bool,
            'size': str,
            'type': str,
            'type_level': str
        }

        self.attribute_map = {
            'add_shadow': 'add_shadow',
            'bg_color': 'bg_color',
            'bg_image_url': 'bg_image_url',
            'channels': 'channels',
            'crop': 'crop',
            'crop_margin': 'crop_margin',
            'format': 'format',
            'image_file_b64': 'image_file_b64',
            'image_url': 'image_url',
            'position': 'position',
            'roi': 'roi',
            'scale': 'scale',
            'semitransparency': 'semitransparency',
            'size': 'size',
            'type': 'type',
            'type_level': 'type_level'
        }

        self._add_shadow = add_shadow
        self._bg_color = bg_color
        self._bg_image_url = bg_image_url
        self._channels = channels
        self._crop = crop
        self._crop_margin = crop_margin
        self._format = format
        self._image_file_b64 = image_file_b64
        self._image_url = image_url
        self._position = position
        self._roi = roi
        self._scale = scale
        self._semitransparency = semitransparency
        self._size = size
        self._type = type
        self._type_level = type_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoveBgJson':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoveBgJson of this RemoveBgJson.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_shadow(self):
        """Gets the add_shadow of this RemoveBgJson.

        Whether to add an artificial shadow to the result (default: false). NOTE: Adding shadows is currently only supported for car photos. Other subjects are returned without shadow, even if set to true (this might change in the future). 

        :return: The add_shadow of this RemoveBgJson.
        :rtype: bool
        """
        return self._add_shadow

    @add_shadow.setter
    def add_shadow(self, add_shadow):
        """Sets the add_shadow of this RemoveBgJson.

        Whether to add an artificial shadow to the result (default: false). NOTE: Adding shadows is currently only supported for car photos. Other subjects are returned without shadow, even if set to true (this might change in the future). 

        :param add_shadow: The add_shadow of this RemoveBgJson.
        :type add_shadow: bool
        """

        self._add_shadow = add_shadow

    @property
    def bg_color(self):
        """Gets the bg_color of this RemoveBgJson.

        Adds a solid color background. Can be a hex color code (e.g. 81d4fa, fff) or a color name (e.g. green). For semi-transparency, 4-/8-digit hex codes are also supported (e.g. 81d4fa77). (If this parameter is present, the other bg_ parameters must be empty.) 

        :return: The bg_color of this RemoveBgJson.
        :rtype: str
        """
        return self._bg_color

    @bg_color.setter
    def bg_color(self, bg_color):
        """Sets the bg_color of this RemoveBgJson.

        Adds a solid color background. Can be a hex color code (e.g. 81d4fa, fff) or a color name (e.g. green). For semi-transparency, 4-/8-digit hex codes are also supported (e.g. 81d4fa77). (If this parameter is present, the other bg_ parameters must be empty.) 

        :param bg_color: The bg_color of this RemoveBgJson.
        :type bg_color: str
        """

        self._bg_color = bg_color

    @property
    def bg_image_url(self):
        """Gets the bg_image_url of this RemoveBgJson.

        Adds a background image from a URL. The image is centered and resized to fill the canvas while preserving the aspect ratio, unless it already has the exact same dimensions as the foreground image. (If this parameter is present, the other bg_ parameters must be empty.)

        :return: The bg_image_url of this RemoveBgJson.
        :rtype: str
        """
        return self._bg_image_url

    @bg_image_url.setter
    def bg_image_url(self, bg_image_url):
        """Sets the bg_image_url of this RemoveBgJson.

        Adds a background image from a URL. The image is centered and resized to fill the canvas while preserving the aspect ratio, unless it already has the exact same dimensions as the foreground image. (If this parameter is present, the other bg_ parameters must be empty.)

        :param bg_image_url: The bg_image_url of this RemoveBgJson.
        :type bg_image_url: str
        """

        self._bg_image_url = bg_image_url

    @property
    def channels(self):
        """Gets the channels of this RemoveBgJson.

        Request either the finalized image (\"rgba\", default) or an alpha mask (\"alpha\"). Note: Since remove.bg also applies RGB color corrections on edges, using only the alpha mask often leads to a lower final image quality. Therefore \"rgba\" is recommended. 

        :return: The channels of this RemoveBgJson.
        :rtype: str
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this RemoveBgJson.

        Request either the finalized image (\"rgba\", default) or an alpha mask (\"alpha\"). Note: Since remove.bg also applies RGB color corrections on edges, using only the alpha mask often leads to a lower final image quality. Therefore \"rgba\" is recommended. 

        :param channels: The channels of this RemoveBgJson.
        :type channels: str
        """
        allowed_values = ["rgba", "alpha"]  # noqa: E501
        if channels not in allowed_values:
            raise ValueError(
                "Invalid value for `channels` ({0}), must be one of {1}"
                .format(channels, allowed_values)
            )

        self._channels = channels

    @property
    def crop(self):
        """Gets the crop of this RemoveBgJson.

        Whether to crop off all empty regions (default: false). Note that cropping has no effect on the amount of charged credits. 

        :return: The crop of this RemoveBgJson.
        :rtype: bool
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this RemoveBgJson.

        Whether to crop off all empty regions (default: false). Note that cropping has no effect on the amount of charged credits. 

        :param crop: The crop of this RemoveBgJson.
        :type crop: bool
        """

        self._crop = crop

    @property
    def crop_margin(self):
        """Gets the crop_margin of this RemoveBgJson.

        Adds a margin around the cropped subject (default: 0). Can be an absolute value (e.g. \"30px\") or relative to the subject size (e.g. \"10%\"). Can be a single value (all sides), two values (top/bottom and left/right) or four values (top, right, bottom, left). This parameter only has an effect when \"crop=true\". The maximum margin that can be added on each side is 50% of the subject dimensions or 500 pixels. 

        :return: The crop_margin of this RemoveBgJson.
        :rtype: str
        """
        return self._crop_margin

    @crop_margin.setter
    def crop_margin(self, crop_margin):
        """Sets the crop_margin of this RemoveBgJson.

        Adds a margin around the cropped subject (default: 0). Can be an absolute value (e.g. \"30px\") or relative to the subject size (e.g. \"10%\"). Can be a single value (all sides), two values (top/bottom and left/right) or four values (top, right, bottom, left). This parameter only has an effect when \"crop=true\". The maximum margin that can be added on each side is 50% of the subject dimensions or 500 pixels. 

        :param crop_margin: The crop_margin of this RemoveBgJson.
        :type crop_margin: str
        """

        self._crop_margin = crop_margin

    @property
    def format(self):
        """Gets the format of this RemoveBgJson.

        Result image format: \"auto\" = Use PNG format if transparent regions exist, otherwise use JPG format (default), \"png\" = PNG format with alpha transparency, \"jpg\" = JPG format, no transparency, \"zip\" = ZIP format, contains color image and alpha matte image, supports transparency (recommended). 

        :return: The format of this RemoveBgJson.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this RemoveBgJson.

        Result image format: \"auto\" = Use PNG format if transparent regions exist, otherwise use JPG format (default), \"png\" = PNG format with alpha transparency, \"jpg\" = JPG format, no transparency, \"zip\" = ZIP format, contains color image and alpha matte image, supports transparency (recommended). 

        :param format: The format of this RemoveBgJson.
        :type format: str
        """
        allowed_values = ["auto", "png", "jpg", "zip"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def image_file_b64(self):
        """Gets the image_file_b64 of this RemoveBgJson.

        Source image file (base64-encoded string). (If this parameter is present, the other image source parameters must be empty.)

        :return: The image_file_b64 of this RemoveBgJson.
        :rtype: str
        """
        return self._image_file_b64

    @image_file_b64.setter
    def image_file_b64(self, image_file_b64):
        """Sets the image_file_b64 of this RemoveBgJson.

        Source image file (base64-encoded string). (If this parameter is present, the other image source parameters must be empty.)

        :param image_file_b64: The image_file_b64 of this RemoveBgJson.
        :type image_file_b64: str
        """

        self._image_file_b64 = image_file_b64

    @property
    def image_url(self):
        """Gets the image_url of this RemoveBgJson.

        Source image URL. (If this parameter is present, the other image source parameters must be empty.)

        :return: The image_url of this RemoveBgJson.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this RemoveBgJson.

        Source image URL. (If this parameter is present, the other image source parameters must be empty.)

        :param image_url: The image_url of this RemoveBgJson.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def position(self):
        """Gets the position of this RemoveBgJson.

        Positions the subject within the image canvas. Can be \"original\" (default unless \"scale\" is given), \"center\" (default when \"scale\" is given) or a value from \"0%\" to \"100%\" (both horizontal and vertical) or two values (horizontal, vertical). 

        :return: The position of this RemoveBgJson.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this RemoveBgJson.

        Positions the subject within the image canvas. Can be \"original\" (default unless \"scale\" is given), \"center\" (default when \"scale\" is given) or a value from \"0%\" to \"100%\" (both horizontal and vertical) or two values (horizontal, vertical). 

        :param position: The position of this RemoveBgJson.
        :type position: str
        """

        self._position = position

    @property
    def roi(self):
        """Gets the roi of this RemoveBgJson.

        Region of interest: Only contents of this rectangular region can be detected as foreground. Everything outside is considered background and will be removed. The rectangle is defined as two x/y coordinates in the format \"x1 y1 x2 y2\". The coordinates can be in absolute pixels (suffix 'px') or relative to the width/height of the image (suffix '%'). By default, the whole image is the region of interest (\"0% 0% 100% 100%\"). 

        :return: The roi of this RemoveBgJson.
        :rtype: str
        """
        return self._roi

    @roi.setter
    def roi(self, roi):
        """Sets the roi of this RemoveBgJson.

        Region of interest: Only contents of this rectangular region can be detected as foreground. Everything outside is considered background and will be removed. The rectangle is defined as two x/y coordinates in the format \"x1 y1 x2 y2\". The coordinates can be in absolute pixels (suffix 'px') or relative to the width/height of the image (suffix '%'). By default, the whole image is the region of interest (\"0% 0% 100% 100%\"). 

        :param roi: The roi of this RemoveBgJson.
        :type roi: str
        """

        self._roi = roi

    @property
    def scale(self):
        """Gets the scale of this RemoveBgJson.

        Scales the subject relative to the total image size. Can be any value from \"10%\" to \"100%\", or \"original\" (default). Scaling the subject implies \"position=center\" (unless specified otherwise). 

        :return: The scale of this RemoveBgJson.
        :rtype: str
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this RemoveBgJson.

        Scales the subject relative to the total image size. Can be any value from \"10%\" to \"100%\", or \"original\" (default). Scaling the subject implies \"position=center\" (unless specified otherwise). 

        :param scale: The scale of this RemoveBgJson.
        :type scale: str
        """

        self._scale = scale

    @property
    def semitransparency(self):
        """Gets the semitransparency of this RemoveBgJson.

        Whether to have semi-transparent regions in the result (default: true). NOTE: Semitransparency is currently only supported for car windows (this might change in the future). Other objects are returned without semitransparency, even if set to true. 

        :return: The semitransparency of this RemoveBgJson.
        :rtype: bool
        """
        return self._semitransparency

    @semitransparency.setter
    def semitransparency(self, semitransparency):
        """Sets the semitransparency of this RemoveBgJson.

        Whether to have semi-transparent regions in the result (default: true). NOTE: Semitransparency is currently only supported for car windows (this might change in the future). Other objects are returned without semitransparency, even if set to true. 

        :param semitransparency: The semitransparency of this RemoveBgJson.
        :type semitransparency: bool
        """

        self._semitransparency = semitransparency

    @property
    def size(self):
        """Gets the size of this RemoveBgJson.

        Maximum output image resolution: \"preview\" (default) = Resize image to 0.25 megapixels (e.g. 625×400 pixels) – 0.25 credits per image, \"full\" = Use original image resolution, up to 25 megapixels (e.g. 6250x4000) with formats ZIP or JPG, or up to 10 megapixels (e.g. 4000x2500) with PNG – 1 credit per image), \"auto\" = Use highest available resolution (based on image size and available credits).  For backwards-compatibility this parameter also accepts the values \"medium\" (up to 1.5 megapixels) and \"hd\" (up to 4 megapixels) for 1 credit per image. The value \"full\" is also available under the name \"4k\" and the value \"preview\" is aliased as \"small\" and \"regular\". 

        :return: The size of this RemoveBgJson.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this RemoveBgJson.

        Maximum output image resolution: \"preview\" (default) = Resize image to 0.25 megapixels (e.g. 625×400 pixels) – 0.25 credits per image, \"full\" = Use original image resolution, up to 25 megapixels (e.g. 6250x4000) with formats ZIP or JPG, or up to 10 megapixels (e.g. 4000x2500) with PNG – 1 credit per image), \"auto\" = Use highest available resolution (based on image size and available credits).  For backwards-compatibility this parameter also accepts the values \"medium\" (up to 1.5 megapixels) and \"hd\" (up to 4 megapixels) for 1 credit per image. The value \"full\" is also available under the name \"4k\" and the value \"preview\" is aliased as \"small\" and \"regular\". 

        :param size: The size of this RemoveBgJson.
        :type size: str
        """
        allowed_values = ["preview", "full", "auto"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size

    @property
    def type(self):
        """Gets the type of this RemoveBgJson.

        Foreground type: \"auto\" = Automatically detect kind of foreground, \"person\" = Use person(s) as foreground, \"product\" = Use product(s) as foreground. \"car\" = Use car as foreground, 

        :return: The type of this RemoveBgJson.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RemoveBgJson.

        Foreground type: \"auto\" = Automatically detect kind of foreground, \"person\" = Use person(s) as foreground, \"product\" = Use product(s) as foreground. \"car\" = Use car as foreground, 

        :param type: The type of this RemoveBgJson.
        :type type: str
        """
        allowed_values = ["auto", "person", "product", "car"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def type_level(self):
        """Gets the type_level of this RemoveBgJson.

        Classification level of the detected foreground type: \"none\" = No classification (X-Type Header won't bet set on the response) \"1\" = Use coarse classification classes: [person, product, animal, car, other] \"2\" = Use more specific classification classes: [person, product, animal, car, car_interior, car_part, transportation, graphics, other] \"latest\" = Always use the latest classification classes available 

        :return: The type_level of this RemoveBgJson.
        :rtype: str
        """
        return self._type_level

    @type_level.setter
    def type_level(self, type_level):
        """Sets the type_level of this RemoveBgJson.

        Classification level of the detected foreground type: \"none\" = No classification (X-Type Header won't bet set on the response) \"1\" = Use coarse classification classes: [person, product, animal, car, other] \"2\" = Use more specific classification classes: [person, product, animal, car, car_interior, car_part, transportation, graphics, other] \"latest\" = Always use the latest classification classes available 

        :param type_level: The type_level of this RemoveBgJson.
        :type type_level: str
        """
        allowed_values = ["none", "1", "2", "latest"]  # noqa: E501
        if type_level not in allowed_values:
            raise ValueError(
                "Invalid value for `type_level` ({0}), must be one of {1}"
                .format(type_level, allowed_values)
            )

        self._type_level = type_level
