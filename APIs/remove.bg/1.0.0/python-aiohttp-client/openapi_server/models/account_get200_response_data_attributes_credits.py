# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountGet200ResponseDataAttributesCredits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enterprise: float=None, payg: float=None, subscription: float=None, total: float=None):
        """AccountGet200ResponseDataAttributesCredits - a model defined in OpenAPI

        :param enterprise: The enterprise of this AccountGet200ResponseDataAttributesCredits.
        :param payg: The payg of this AccountGet200ResponseDataAttributesCredits.
        :param subscription: The subscription of this AccountGet200ResponseDataAttributesCredits.
        :param total: The total of this AccountGet200ResponseDataAttributesCredits.
        """
        self.openapi_types = {
            'enterprise': float,
            'payg': float,
            'subscription': float,
            'total': float
        }

        self.attribute_map = {
            'enterprise': 'enterprise',
            'payg': 'payg',
            'subscription': 'subscription',
            'total': 'total'
        }

        self._enterprise = enterprise
        self._payg = payg
        self._subscription = subscription
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountGet200ResponseDataAttributesCredits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _account_get_200_response_data_attributes_credits of this AccountGet200ResponseDataAttributesCredits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enterprise(self):
        """Gets the enterprise of this AccountGet200ResponseDataAttributesCredits.


        :return: The enterprise of this AccountGet200ResponseDataAttributesCredits.
        :rtype: float
        """
        return self._enterprise

    @enterprise.setter
    def enterprise(self, enterprise):
        """Sets the enterprise of this AccountGet200ResponseDataAttributesCredits.


        :param enterprise: The enterprise of this AccountGet200ResponseDataAttributesCredits.
        :type enterprise: float
        """

        self._enterprise = enterprise

    @property
    def payg(self):
        """Gets the payg of this AccountGet200ResponseDataAttributesCredits.


        :return: The payg of this AccountGet200ResponseDataAttributesCredits.
        :rtype: float
        """
        return self._payg

    @payg.setter
    def payg(self, payg):
        """Sets the payg of this AccountGet200ResponseDataAttributesCredits.


        :param payg: The payg of this AccountGet200ResponseDataAttributesCredits.
        :type payg: float
        """

        self._payg = payg

    @property
    def subscription(self):
        """Gets the subscription of this AccountGet200ResponseDataAttributesCredits.


        :return: The subscription of this AccountGet200ResponseDataAttributesCredits.
        :rtype: float
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this AccountGet200ResponseDataAttributesCredits.


        :param subscription: The subscription of this AccountGet200ResponseDataAttributesCredits.
        :type subscription: float
        """

        self._subscription = subscription

    @property
    def total(self):
        """Gets the total of this AccountGet200ResponseDataAttributesCredits.


        :return: The total of this AccountGet200ResponseDataAttributesCredits.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this AccountGet200ResponseDataAttributesCredits.


        :param total: The total of this AccountGet200ResponseDataAttributesCredits.
        :type total: float
        """

        self._total = total
