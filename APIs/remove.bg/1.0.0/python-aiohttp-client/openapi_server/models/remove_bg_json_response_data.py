# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RemoveBgJsonResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, foreground_height: int=None, foreground_left: int=None, foreground_top: int=None, foreground_width: int=None, result_b64: str=None):
        """RemoveBgJsonResponseData - a model defined in OpenAPI

        :param foreground_height: The foreground_height of this RemoveBgJsonResponseData.
        :param foreground_left: The foreground_left of this RemoveBgJsonResponseData.
        :param foreground_top: The foreground_top of this RemoveBgJsonResponseData.
        :param foreground_width: The foreground_width of this RemoveBgJsonResponseData.
        :param result_b64: The result_b64 of this RemoveBgJsonResponseData.
        """
        self.openapi_types = {
            'foreground_height': int,
            'foreground_left': int,
            'foreground_top': int,
            'foreground_width': int,
            'result_b64': str
        }

        self.attribute_map = {
            'foreground_height': 'foreground_height',
            'foreground_left': 'foreground_left',
            'foreground_top': 'foreground_top',
            'foreground_width': 'foreground_width',
            'result_b64': 'result_b64'
        }

        self._foreground_height = foreground_height
        self._foreground_left = foreground_left
        self._foreground_top = foreground_top
        self._foreground_width = foreground_width
        self._result_b64 = result_b64

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoveBgJsonResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoveBgJsonResponse_data of this RemoveBgJsonResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def foreground_height(self):
        """Gets the foreground_height of this RemoveBgJsonResponseData.

        Height of the foreground image. In case the input image resolution is higher than the limit (> 25 megapixels) this value is expressed with respect to the input image resolution.

        :return: The foreground_height of this RemoveBgJsonResponseData.
        :rtype: int
        """
        return self._foreground_height

    @foreground_height.setter
    def foreground_height(self, foreground_height):
        """Sets the foreground_height of this RemoveBgJsonResponseData.

        Height of the foreground image. In case the input image resolution is higher than the limit (> 25 megapixels) this value is expressed with respect to the input image resolution.

        :param foreground_height: The foreground_height of this RemoveBgJsonResponseData.
        :type foreground_height: int
        """

        self._foreground_height = foreground_height

    @property
    def foreground_left(self):
        """Gets the foreground_left of this RemoveBgJsonResponseData.

        Left position of the foreground image along the horizontal axis. In case the input image resolution is higher than the limit (> 25 megapixels) this value is expressed with respect to the input image resolution.

        :return: The foreground_left of this RemoveBgJsonResponseData.
        :rtype: int
        """
        return self._foreground_left

    @foreground_left.setter
    def foreground_left(self, foreground_left):
        """Sets the foreground_left of this RemoveBgJsonResponseData.

        Left position of the foreground image along the horizontal axis. In case the input image resolution is higher than the limit (> 25 megapixels) this value is expressed with respect to the input image resolution.

        :param foreground_left: The foreground_left of this RemoveBgJsonResponseData.
        :type foreground_left: int
        """

        self._foreground_left = foreground_left

    @property
    def foreground_top(self):
        """Gets the foreground_top of this RemoveBgJsonResponseData.

        Top position of the foreground image along the vertical axis. In case the input image resolution is higher than the limit (> 25 megapixels) this value is expressed with respect to the input image resolution.

        :return: The foreground_top of this RemoveBgJsonResponseData.
        :rtype: int
        """
        return self._foreground_top

    @foreground_top.setter
    def foreground_top(self, foreground_top):
        """Sets the foreground_top of this RemoveBgJsonResponseData.

        Top position of the foreground image along the vertical axis. In case the input image resolution is higher than the limit (> 25 megapixels) this value is expressed with respect to the input image resolution.

        :param foreground_top: The foreground_top of this RemoveBgJsonResponseData.
        :type foreground_top: int
        """

        self._foreground_top = foreground_top

    @property
    def foreground_width(self):
        """Gets the foreground_width of this RemoveBgJsonResponseData.

        Width of the foreground image. In case the input image resolution is higher than the limit (> 25 megapixels) this value is expressed with respect to the input image resolution.

        :return: The foreground_width of this RemoveBgJsonResponseData.
        :rtype: int
        """
        return self._foreground_width

    @foreground_width.setter
    def foreground_width(self, foreground_width):
        """Sets the foreground_width of this RemoveBgJsonResponseData.

        Width of the foreground image. In case the input image resolution is higher than the limit (> 25 megapixels) this value is expressed with respect to the input image resolution.

        :param foreground_width: The foreground_width of this RemoveBgJsonResponseData.
        :type foreground_width: int
        """

        self._foreground_width = foreground_width

    @property
    def result_b64(self):
        """Gets the result_b64 of this RemoveBgJsonResponseData.

        Base64 encoded string of result image

        :return: The result_b64 of this RemoveBgJsonResponseData.
        :rtype: str
        """
        return self._result_b64

    @result_b64.setter
    def result_b64(self, result_b64):
        """Sets the result_b64 of this RemoveBgJsonResponseData.

        Base64 encoded string of result image

        :param result_b64: The result_b64 of this RemoveBgJsonResponseData.
        :type result_b64: str
        """

        self._result_b64 = result_b64
