/*
 * Background Removal API
 * Remove the background of any image
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthFailed;
import org.openapitools.client.model.ImprovePost400Response;
import org.openapitools.client.model.ImprovementProgramJson;
import org.openapitools.client.model.ImprovementProgramJsonResponse;
import org.openapitools.client.model.ImprovementProgramMultipart;
import org.openapitools.client.model.RateLimit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImprovementProgramApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImprovementProgramApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImprovementProgramApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for improvePost
     * @param improvementProgramJson  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image submitted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error: Invalid parameters or input file unprocessable </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error: Authentication failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error: Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call improvePostCall(ImprovementProgramJson improvementProgramJson, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = improvementProgramJson;

        // create path and map variables
        String localVarPath = "/improve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call improvePostValidateBeforeCall(ImprovementProgramJson improvementProgramJson, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'improvementProgramJson' is set
        if (improvementProgramJson == null) {
            throw new ApiException("Missing the required parameter 'improvementProgramJson' when calling improvePost(Async)");
        }

        return improvePostCall(improvementProgramJson, _callback);

    }

    /**
     * 
     * Submit an image to the remove.bg Improvement program * Contribute an image that remove.bg is currently not able to remove the background from properly * Help us make remove.bg better * Get better results for similiar images in the future  Notes:   * By submitting images through the API you agree to the &lt;a target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener\&quot; href&#x3D;\&quot;/ipc\&quot;&gt;Improvement Program Conditions&lt;/a&gt;   * File size: up to 12MB   * up to 100 files per day. &lt;br&gt; Higher Rate Limits are available for Enterprise customers &lt;a href&#x3D;\&quot;/support/contact?subject&#x3D;Improvement+Program+Rate+Limit\&quot;&gt;upon request&lt;/a&gt;.  Requires either an API Key to be provided in the &#x60;X-API-Key&#x60; request header or an OAuth 2.0 access token to be provided in the &#x60;Authorization&#x60; request header.  Please note that submissions are used on a best-effort basis and the extent of expected improvement varies depending on many factors, including the number of provided images, their complexity and visual similarity. Improvements usually take several weeks to become effective. 
     * @param improvementProgramJson  (required)
     * @return ImprovementProgramJsonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image submitted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error: Invalid parameters or input file unprocessable </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error: Authentication failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error: Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ImprovementProgramJsonResponse improvePost(ImprovementProgramJson improvementProgramJson) throws ApiException {
        ApiResponse<ImprovementProgramJsonResponse> localVarResp = improvePostWithHttpInfo(improvementProgramJson);
        return localVarResp.getData();
    }

    /**
     * 
     * Submit an image to the remove.bg Improvement program * Contribute an image that remove.bg is currently not able to remove the background from properly * Help us make remove.bg better * Get better results for similiar images in the future  Notes:   * By submitting images through the API you agree to the &lt;a target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener\&quot; href&#x3D;\&quot;/ipc\&quot;&gt;Improvement Program Conditions&lt;/a&gt;   * File size: up to 12MB   * up to 100 files per day. &lt;br&gt; Higher Rate Limits are available for Enterprise customers &lt;a href&#x3D;\&quot;/support/contact?subject&#x3D;Improvement+Program+Rate+Limit\&quot;&gt;upon request&lt;/a&gt;.  Requires either an API Key to be provided in the &#x60;X-API-Key&#x60; request header or an OAuth 2.0 access token to be provided in the &#x60;Authorization&#x60; request header.  Please note that submissions are used on a best-effort basis and the extent of expected improvement varies depending on many factors, including the number of provided images, their complexity and visual similarity. Improvements usually take several weeks to become effective. 
     * @param improvementProgramJson  (required)
     * @return ApiResponse&lt;ImprovementProgramJsonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image submitted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error: Invalid parameters or input file unprocessable </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error: Authentication failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error: Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImprovementProgramJsonResponse> improvePostWithHttpInfo(ImprovementProgramJson improvementProgramJson) throws ApiException {
        okhttp3.Call localVarCall = improvePostValidateBeforeCall(improvementProgramJson, null);
        Type localVarReturnType = new TypeToken<ImprovementProgramJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submit an image to the remove.bg Improvement program * Contribute an image that remove.bg is currently not able to remove the background from properly * Help us make remove.bg better * Get better results for similiar images in the future  Notes:   * By submitting images through the API you agree to the &lt;a target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener\&quot; href&#x3D;\&quot;/ipc\&quot;&gt;Improvement Program Conditions&lt;/a&gt;   * File size: up to 12MB   * up to 100 files per day. &lt;br&gt; Higher Rate Limits are available for Enterprise customers &lt;a href&#x3D;\&quot;/support/contact?subject&#x3D;Improvement+Program+Rate+Limit\&quot;&gt;upon request&lt;/a&gt;.  Requires either an API Key to be provided in the &#x60;X-API-Key&#x60; request header or an OAuth 2.0 access token to be provided in the &#x60;Authorization&#x60; request header.  Please note that submissions are used on a best-effort basis and the extent of expected improvement varies depending on many factors, including the number of provided images, their complexity and visual similarity. Improvements usually take several weeks to become effective. 
     * @param improvementProgramJson  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image submitted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error: Invalid parameters or input file unprocessable </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error: Authentication failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error: Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call improvePostAsync(ImprovementProgramJson improvementProgramJson, final ApiCallback<ImprovementProgramJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = improvePostValidateBeforeCall(improvementProgramJson, _callback);
        Type localVarReturnType = new TypeToken<ImprovementProgramJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
