/*
 * Background Removal API
 * Remove the background of any image
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthFailed;
import java.io.File;
import org.openapitools.client.model.RateLimit;
import org.openapitools.client.model.RemoveBgJson;
import org.openapitools.client.model.RemoveBgJsonResponse;
import org.openapitools.client.model.RemoveBgMultipart;
import org.openapitools.client.model.RemovebgPost400Response;
import org.openapitools.client.model.RemovebgPost402Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BackgroundRemovalApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BackgroundRemovalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BackgroundRemovalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for removebgPost
     * @param removeBgJson  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image background removed </td><td>  * X-Credits-Charged - Amount of credits charged for this call <br>  * X-Foreground-Height - Height of the foreground image. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Foreground-Left - Left position of the foreground image along the horizontal axis. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Foreground-Top - Top position of the foreground image along the vertical axis. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Foreground-Width - Width of the foreground image. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Height - Height of the result image <br>  * X-Type - Detected foreground type (How specific this classification is depends on the type_level parameter sent in the request) <br>  * X-Width - Width of the result image <br>  </td></tr>
        <tr><td> 400 </td><td> Error: Invalid parameters or input file unprocessable (no credits charged) </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Error: Insufficient credits (no credits charged) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error: Authentication failed (no credits charged) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error: Rate limit exceeded (no credits charged) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removebgPostCall(RemoveBgJson removeBgJson, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeBgJson;

        // create path and map variables
        String localVarPath = "/removebg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "image/*",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removebgPostValidateBeforeCall(RemoveBgJson removeBgJson, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'removeBgJson' is set
        if (removeBgJson == null) {
            throw new ApiException("Missing the required parameter 'removeBgJson' when calling removebgPost(Async)");
        }

        return removebgPostCall(removeBgJson, _callback);

    }

    /**
     * Remove the background of an image
     * Removes the background of a JPG/PNG image.  * File size: up to 12 MB * Image source: File upload (binary or as base64 encoded string) or download from URL * Image Content: Any photo with a foreground [(e.g. people, products, animals, cars, etc.)](/supported-images) * Output resolutions available: Preview (up to 0.25 megapixels), Full (up to 25 megapixels)  Requires either an API Key to be provided in the &#x60;X-API-Key&#x60; request header or an OAuth 2.0 access token to be provided in the &#x60;Authorization&#x60; request header. 
     * @param removeBgJson  (required)
     * @return RemoveBgJsonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image background removed </td><td>  * X-Credits-Charged - Amount of credits charged for this call <br>  * X-Foreground-Height - Height of the foreground image. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Foreground-Left - Left position of the foreground image along the horizontal axis. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Foreground-Top - Top position of the foreground image along the vertical axis. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Foreground-Width - Width of the foreground image. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Height - Height of the result image <br>  * X-Type - Detected foreground type (How specific this classification is depends on the type_level parameter sent in the request) <br>  * X-Width - Width of the result image <br>  </td></tr>
        <tr><td> 400 </td><td> Error: Invalid parameters or input file unprocessable (no credits charged) </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Error: Insufficient credits (no credits charged) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error: Authentication failed (no credits charged) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error: Rate limit exceeded (no credits charged) </td><td>  -  </td></tr>
     </table>
     */
    public RemoveBgJsonResponse removebgPost(RemoveBgJson removeBgJson) throws ApiException {
        ApiResponse<RemoveBgJsonResponse> localVarResp = removebgPostWithHttpInfo(removeBgJson);
        return localVarResp.getData();
    }

    /**
     * Remove the background of an image
     * Removes the background of a JPG/PNG image.  * File size: up to 12 MB * Image source: File upload (binary or as base64 encoded string) or download from URL * Image Content: Any photo with a foreground [(e.g. people, products, animals, cars, etc.)](/supported-images) * Output resolutions available: Preview (up to 0.25 megapixels), Full (up to 25 megapixels)  Requires either an API Key to be provided in the &#x60;X-API-Key&#x60; request header or an OAuth 2.0 access token to be provided in the &#x60;Authorization&#x60; request header. 
     * @param removeBgJson  (required)
     * @return ApiResponse&lt;RemoveBgJsonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image background removed </td><td>  * X-Credits-Charged - Amount of credits charged for this call <br>  * X-Foreground-Height - Height of the foreground image. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Foreground-Left - Left position of the foreground image along the horizontal axis. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Foreground-Top - Top position of the foreground image along the vertical axis. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Foreground-Width - Width of the foreground image. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Height - Height of the result image <br>  * X-Type - Detected foreground type (How specific this classification is depends on the type_level parameter sent in the request) <br>  * X-Width - Width of the result image <br>  </td></tr>
        <tr><td> 400 </td><td> Error: Invalid parameters or input file unprocessable (no credits charged) </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Error: Insufficient credits (no credits charged) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error: Authentication failed (no credits charged) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error: Rate limit exceeded (no credits charged) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoveBgJsonResponse> removebgPostWithHttpInfo(RemoveBgJson removeBgJson) throws ApiException {
        okhttp3.Call localVarCall = removebgPostValidateBeforeCall(removeBgJson, null);
        Type localVarReturnType = new TypeToken<RemoveBgJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove the background of an image (asynchronously)
     * Removes the background of a JPG/PNG image.  * File size: up to 12 MB * Image source: File upload (binary or as base64 encoded string) or download from URL * Image Content: Any photo with a foreground [(e.g. people, products, animals, cars, etc.)](/supported-images) * Output resolutions available: Preview (up to 0.25 megapixels), Full (up to 25 megapixels)  Requires either an API Key to be provided in the &#x60;X-API-Key&#x60; request header or an OAuth 2.0 access token to be provided in the &#x60;Authorization&#x60; request header. 
     * @param removeBgJson  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image background removed </td><td>  * X-Credits-Charged - Amount of credits charged for this call <br>  * X-Foreground-Height - Height of the foreground image. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Foreground-Left - Left position of the foreground image along the horizontal axis. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Foreground-Top - Top position of the foreground image along the vertical axis. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Foreground-Width - Width of the foreground image. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution. <br>  * X-Height - Height of the result image <br>  * X-Type - Detected foreground type (How specific this classification is depends on the type_level parameter sent in the request) <br>  * X-Width - Width of the result image <br>  </td></tr>
        <tr><td> 400 </td><td> Error: Invalid parameters or input file unprocessable (no credits charged) </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Error: Insufficient credits (no credits charged) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error: Authentication failed (no credits charged) </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error: Rate limit exceeded (no credits charged) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removebgPostAsync(RemoveBgJson removeBgJson, final ApiCallback<RemoveBgJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removebgPostValidateBeforeCall(removeBgJson, _callback);
        Type localVarReturnType = new TypeToken<RemoveBgJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
