/*
 * Background Removal API
 * Remove the background of any image
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RemoveBgJsonResponseData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:19.553431-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RemoveBgJsonResponseData {
  public static final String SERIALIZED_NAME_FOREGROUND_HEIGHT = "foreground_height";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_HEIGHT)
  private Integer foregroundHeight;

  public static final String SERIALIZED_NAME_FOREGROUND_LEFT = "foreground_left";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_LEFT)
  private Integer foregroundLeft;

  public static final String SERIALIZED_NAME_FOREGROUND_TOP = "foreground_top";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_TOP)
  private Integer foregroundTop;

  public static final String SERIALIZED_NAME_FOREGROUND_WIDTH = "foreground_width";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_WIDTH)
  private Integer foregroundWidth;

  public static final String SERIALIZED_NAME_RESULT_B64 = "result_b64";
  @SerializedName(SERIALIZED_NAME_RESULT_B64)
  private String resultB64;

  public RemoveBgJsonResponseData() {
  }

  public RemoveBgJsonResponseData foregroundHeight(Integer foregroundHeight) {
    this.foregroundHeight = foregroundHeight;
    return this;
  }

  /**
   * Height of the foreground image. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution.
   * @return foregroundHeight
   */
  @javax.annotation.Nullable
  public Integer getForegroundHeight() {
    return foregroundHeight;
  }

  public void setForegroundHeight(Integer foregroundHeight) {
    this.foregroundHeight = foregroundHeight;
  }


  public RemoveBgJsonResponseData foregroundLeft(Integer foregroundLeft) {
    this.foregroundLeft = foregroundLeft;
    return this;
  }

  /**
   * Left position of the foreground image along the horizontal axis. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution.
   * @return foregroundLeft
   */
  @javax.annotation.Nullable
  public Integer getForegroundLeft() {
    return foregroundLeft;
  }

  public void setForegroundLeft(Integer foregroundLeft) {
    this.foregroundLeft = foregroundLeft;
  }


  public RemoveBgJsonResponseData foregroundTop(Integer foregroundTop) {
    this.foregroundTop = foregroundTop;
    return this;
  }

  /**
   * Top position of the foreground image along the vertical axis. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution.
   * @return foregroundTop
   */
  @javax.annotation.Nullable
  public Integer getForegroundTop() {
    return foregroundTop;
  }

  public void setForegroundTop(Integer foregroundTop) {
    this.foregroundTop = foregroundTop;
  }


  public RemoveBgJsonResponseData foregroundWidth(Integer foregroundWidth) {
    this.foregroundWidth = foregroundWidth;
    return this;
  }

  /**
   * Width of the foreground image. In case the input image resolution is higher than the limit (&gt; 25 megapixels) this value is expressed with respect to the input image resolution.
   * @return foregroundWidth
   */
  @javax.annotation.Nullable
  public Integer getForegroundWidth() {
    return foregroundWidth;
  }

  public void setForegroundWidth(Integer foregroundWidth) {
    this.foregroundWidth = foregroundWidth;
  }


  public RemoveBgJsonResponseData resultB64(String resultB64) {
    this.resultB64 = resultB64;
    return this;
  }

  /**
   * Base64 encoded string of result image
   * @return resultB64
   */
  @javax.annotation.Nullable
  public String getResultB64() {
    return resultB64;
  }

  public void setResultB64(String resultB64) {
    this.resultB64 = resultB64;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoveBgJsonResponseData removeBgJsonResponseData = (RemoveBgJsonResponseData) o;
    return Objects.equals(this.foregroundHeight, removeBgJsonResponseData.foregroundHeight) &&
        Objects.equals(this.foregroundLeft, removeBgJsonResponseData.foregroundLeft) &&
        Objects.equals(this.foregroundTop, removeBgJsonResponseData.foregroundTop) &&
        Objects.equals(this.foregroundWidth, removeBgJsonResponseData.foregroundWidth) &&
        Objects.equals(this.resultB64, removeBgJsonResponseData.resultB64);
  }

  @Override
  public int hashCode() {
    return Objects.hash(foregroundHeight, foregroundLeft, foregroundTop, foregroundWidth, resultB64);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoveBgJsonResponseData {\n");
    sb.append("    foregroundHeight: ").append(toIndentedString(foregroundHeight)).append("\n");
    sb.append("    foregroundLeft: ").append(toIndentedString(foregroundLeft)).append("\n");
    sb.append("    foregroundTop: ").append(toIndentedString(foregroundTop)).append("\n");
    sb.append("    foregroundWidth: ").append(toIndentedString(foregroundWidth)).append("\n");
    sb.append("    resultB64: ").append(toIndentedString(resultB64)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("foreground_height");
    openapiFields.add("foreground_left");
    openapiFields.add("foreground_top");
    openapiFields.add("foreground_width");
    openapiFields.add("result_b64");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RemoveBgJsonResponseData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RemoveBgJsonResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RemoveBgJsonResponseData is not found in the empty JSON string", RemoveBgJsonResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RemoveBgJsonResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RemoveBgJsonResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("result_b64") != null && !jsonObj.get("result_b64").isJsonNull()) && !jsonObj.get("result_b64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result_b64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result_b64").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RemoveBgJsonResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RemoveBgJsonResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RemoveBgJsonResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RemoveBgJsonResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<RemoveBgJsonResponseData>() {
           @Override
           public void write(JsonWriter out, RemoveBgJsonResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RemoveBgJsonResponseData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RemoveBgJsonResponseData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RemoveBgJsonResponseData
   * @throws IOException if the JSON string is invalid with respect to RemoveBgJsonResponseData
   */
  public static RemoveBgJsonResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RemoveBgJsonResponseData.class);
  }

  /**
   * Convert an instance of RemoveBgJsonResponseData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

