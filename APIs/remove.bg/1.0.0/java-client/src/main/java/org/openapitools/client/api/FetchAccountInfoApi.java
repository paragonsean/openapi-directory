/*
 * Background Removal API
 * Remove the background of any image
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountGet200Response;
import org.openapitools.client.model.AuthFailed;
import org.openapitools.client.model.RateLimit;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FetchAccountInfoApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FetchAccountInfoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FetchAccountInfoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error: Authentication failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error: Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return accountGetCall(_callback);

    }

    /**
     * Fetch credit balance and free API calls.
     * Get the current credit balance and number of free API calls.  Notes:  * Balance changes may be delayed by several seconds. To locally keep track of your credit balance, you should therefore only call this endpoint initially (or e.g. when the user manually triggers a refresh), then use the &#x60;X-Credits-Charged&#x60; response header returned with each image processing response to adjust the local balance.  * The \&quot;*sizes*\&quot; field is always \&quot;all\&quot;, is deprecated and will soon be removed. 
     * @return AccountGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error: Authentication failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error: Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public AccountGet200Response accountGet() throws ApiException {
        ApiResponse<AccountGet200Response> localVarResp = accountGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Fetch credit balance and free API calls.
     * Get the current credit balance and number of free API calls.  Notes:  * Balance changes may be delayed by several seconds. To locally keep track of your credit balance, you should therefore only call this endpoint initially (or e.g. when the user manually triggers a refresh), then use the &#x60;X-Credits-Charged&#x60; response header returned with each image processing response to adjust the local balance.  * The \&quot;*sizes*\&quot; field is always \&quot;all\&quot;, is deprecated and will soon be removed. 
     * @return ApiResponse&lt;AccountGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error: Authentication failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error: Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountGet200Response> accountGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = accountGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AccountGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch credit balance and free API calls. (asynchronously)
     * Get the current credit balance and number of free API calls.  Notes:  * Balance changes may be delayed by several seconds. To locally keep track of your credit balance, you should therefore only call this endpoint initially (or e.g. when the user manually triggers a refresh), then use the &#x60;X-Credits-Charged&#x60; response header returned with each image processing response to adjust the local balance.  * The \&quot;*sizes*\&quot; field is always \&quot;all\&quot;, is deprecated and will soon be removed. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error: Authentication failed </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error: Rate limit exceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountGetAsync(final ApiCallback<AccountGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AccountGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
