/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GenericError from '../model/GenericError';
import ListRatePlansForHotel200Response from '../model/ListRatePlansForHotel200Response';
import RatePlan from '../model/RatePlan';
import ValidationError from '../model/ValidationError';

/**
* RateCalendar service.
* @module api/RateCalendarApi
* @version 1.003
*/
export default class RateCalendarApi {

    /**
    * Constructs a new RateCalendarApi. 
    * @alias module:api/RateCalendarApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listRatePlanForHotelForRatePlanId operation.
     * @callback module:api/RateCalendarApi~listRatePlanForHotelForRatePlanIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RatePlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a rate plan (rate calendar) for a hotel (Beta endpoint).
     * Returns a single rate plan available for you for a hotel.  Rate plans are products the hotel is offering. They typically consist of a combination of restrictiveness in case of cancellations or changes, the time they're bookable, minimum or maximum length of stay restrictions (e.g. week-long bookings), included components like breakfast or dinner and/or the conditions under which the room can be sold (e.g. private rates that can only be offered and sold to a closed user group behind login).  Examples of rate plans:  * Non-refundable room rate that includes breakfast * Room-only rate with free cancellation up to 14 days before arrival  This endpoint returns a singular available rate plan.
     * @param {String} hotelId The uuid of hotel for which rate plans are being fetched.
     * @param {Number} ratePlanId The id of requested rateplan
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [updatedAt] Returns rate plans changed after the supplied date.
     * @param {Number} [size = 25)] Number of rate plans returned on a given page (pagination).
     * @param {Number} [offset = 0)] Offset from the first rate plan in the result (for pagination).
     * @param {String} [start] Start date of the considered time window for the returned rate plan.
     * @param {String} [end] Start date of the considered time window for the returned rate plan.
     * @param {String} [roomTypeId] The uuid of room for which rate plans are being fetched.
     * @param {module:api/RateCalendarApi~listRatePlanForHotelForRatePlanIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RatePlan}
     */
    listRatePlanForHotelForRatePlanId(hotelId, ratePlanId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling listRatePlanForHotelForRatePlanId");
      }
      // verify the required parameter 'ratePlanId' is set
      if (ratePlanId === undefined || ratePlanId === null) {
        throw new Error("Missing the required parameter 'ratePlanId' when calling listRatePlanForHotelForRatePlanId");
      }

      let pathParams = {
        'hotelId': hotelId,
        'ratePlanId': ratePlanId
      };
      let queryParams = {
        'updatedAt': opts['updatedAt'],
        'size': opts['size'],
        'offset': opts['offset'],
        'start': opts['start'],
        'end': opts['end'],
        'roomTypeId': opts['roomTypeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key_Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RatePlan;
      return this.apiClient.callApi(
        '/hotels/{hotelId}/rate-plans/{ratePlanId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRatePlansForHotel operation.
     * @callback module:api/RateCalendarApi~listRatePlansForHotelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRatePlansForHotel200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all rate plans (rate calendar) for a hotel (Beta endpoint)
     * Returns a list of all rate plans available for you for a hotel.  Rate plans are products the hotel is offering. They typically consist of a combination of restrictiveness in case of cancellations or changes, the time they're bookable, minimum or maximum length of stay restrictions (e.g. week-long bookings), included components like breakfast or dinner and/or the conditions under which the room can be sold (e.g. private rates that can only be offered and sold to a closed user group behind login).  Examples of rate plans:  * Non-refundable room rate that includes breakfast * Room-only rate with free cancellation up to 14 days before arrival  For each such rate plan this endpoint returns the room types it's available for, alongside prices for each date and occupancy that can be sold â€“ or the information that the room isn't available (closed) for a certain date.  For the vast majority of our customers, availability searches using the [List all hotels](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels/get) endpoint are the best choice. It accepts the dates your guest is looking for and provides the rates to display.  This endpoint can help augment this for two additional use cases:  This endpoint allows you to query rate prices for all future dates in one go, making it a great choice to feed availability information and prices into your own system or displaying a rate calender to guide your guests to gain an overview of future availability and prices.
     * @param {String} hotelId The uuid of hotel for which rate plans are being fetched.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [updatedAt] Returns rate plans changed after the supplied date.
     * @param {Number} [size = 25)] Number of rate plans returned on a given page (pagination).
     * @param {Number} [offset = 0)] Offset from the first rate plan in the result (for pagination).
     * @param {String} [start] Start date of the considered time window for the returned rate plan.
     * @param {String} [end] Start date of the considered time window for the returned rate plan.
     * @param {String} [roomId] The UUID of room for which rate plans are being fetched.
     * @param {module:api/RateCalendarApi~listRatePlansForHotelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRatePlansForHotel200Response}
     */
    listRatePlansForHotel(hotelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling listRatePlansForHotel");
      }

      let pathParams = {
        'hotelId': hotelId
      };
      let queryParams = {
        'updatedAt': opts['updatedAt'],
        'size': opts['size'],
        'offset': opts['offset'],
        'start': opts['start'],
        'end': opts['end'],
        'roomId': opts['roomId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key_Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRatePlansForHotel200Response;
      return this.apiClient.callApi(
        '/hotels/{hotelId}/rate-plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
