/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Booking from '../model/Booking';
import BookingRequest from '../model/BookingRequest';
import GenericError from '../model/GenericError';
import ListBookings200Response from '../model/ListBookings200Response';
import UpdateBookingContactRequest from '../model/UpdateBookingContactRequest';
import UpdateBookingRequest from '../model/UpdateBookingRequest';
import ValidationError from '../model/ValidationError';

/**
* Bookings service.
* @module api/BookingsApi
* @version 1.003
*/
export default class BookingsApi {

    /**
    * Constructs a new BookingsApi. 
    * @alias module:api/BookingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelBooking operation.
     * @callback module:api/BookingsApi~cancelBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Booking} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a booking
     * <!-- theme: danger -->  > Cancels the specified booking with immediate effect. This action might result in a cancellation charge being charged.  Submitting this request means we'll notify the hotel of the cancellation and that they won't expect your guest.  You can use `GET /bookings/{bookingId}`to see the cancellation policies that apply to a booking at a given point in time. Please note that cancelling a booking will incur a cancellation fee according to the rules that apply at the time of cancellation. You can find the cancellation fee that has been charged in the response of this call in the `cancellation.fee` object.  If the booking you cancelled allows for a partial or full refund, we'll credit your Impala balance with the amount we charged you as the seller of this booking – meaning we'll deduct the amount the next time we're requesting payment for the sum of all the bookings you made.
     * @param {String} bookingId The unique identifier of the booking you would like to update.
     * @param {module:api/BookingsApi~cancelBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Booking}
     */
    cancelBooking(bookingId, callback) {
      let postBody = null;
      // verify the required parameter 'bookingId' is set
      if (bookingId === undefined || bookingId === null) {
        throw new Error("Missing the required parameter 'bookingId' when calling cancelBooking");
      }

      let pathParams = {
        'bookingId': bookingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key_Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Booking;
      return this.apiClient.callApi(
        '/bookings/{bookingId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBooking operation.
     * @callback module:api/BookingsApi~createBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Booking} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a booking
     * Creates a booking for for the rate and dates you specify in the request body.  You'll need a `roomTypes[].rates[].rateId` that's bookable for those dates, which you can find using the [Retrieve a hotel](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels~1%7BhotelId%7D/get) endpoint.  If you have provided a credit card on the dashboard then **Impala will send the booking to the hotel immediately**. We'll ensure payment is taken care of before your guest arrives at the hotel.  * Your guest needs to be **paying you** the rate specified in `retailRate` (as listed in the [Retrieve a hotel](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels~1%7BhotelId%7D/get) response) before you submit this request. * Once your request is received and the booking is confirmed, **Impala will charge you** as the seller this `retailRate` minus the `sellerCommissionPercentage` (which is the affiliate commission you get to keep). We'll use the business credit card you've added to your account as payment method for this. * The difference between the amount you charge your guest (`retailRate`, e.g. 200 €) and what Impala charges you (`retailRate` minus `sellerCommissionPercentage`, e.g. 200 €) is your commission (in this example: 20 €) to keep.  You can find more information on how money flows between your guest and you, and you and Impala, [in this article](https://impala.stoplight.io/docs/booking-api/branches/v1.003/docs/good-to-know/payments-and-commissions.md)  <!-- theme: warning -->  > **This request might take up to 20 seconds to load.** While we work to return a response to your request within milliseconds in most cases, some bookings require us to re-verify current pricing in real-time and doing so might take up to 20 seconds. Please make sure your app handles this waiting state appropriately.
     * @param {Object} opts Optional parameters
     * @param {module:model/BookingRequest} [bookingRequest] Specifies the room you want to book for your guest.
     * @param {module:api/BookingsApi~createBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Booking}
     */
    createBooking(opts, callback) {
      opts = opts || {};
      let postBody = opts['bookingRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key_Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Booking;
      return this.apiClient.callApi(
        '/bookings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBookings operation.
     * @callback module:api/BookingsApi~listBookingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBookings200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all bookings
     * Returns a list of all the bookings you've made.  You can filter the list based on when bookings were created or last updated, as well as their arrival (`start`) and departure (`end`). These date-based filters allow to narrow down the result with modifiers for less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`).  Example: Adding the query parameters `start[gt]=2021-05-20&updated[lte]=2020-11-20T11:11:00.000Z` would return bookings arriving after May 20th, 2020 that were updated before or on November 20th, 2020 at 11:11 am UTC.  You can specify the **sorting order** in which bookings are returned: * This is done by using the `sortBy` query parameter. * Results can be sorted by `createdAt` and `updatedAt` * The parameter allows for a comma-separated list of arguments with `:asc` (ascending, the default if no sorting is specified) and `:desc` (descending) modifiers.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [start] Allows for filtering based on arrival date of the booking in ISO 8601 format (e.g. `2021-12-01`). Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?start[lte]=2021-12-20&start[gte]=2021-12-10`
     * @param {Object.<String, Object>} [end] Allows for filtering based on departure date of the booking in ISO 8601 format (e.g. `2021-12-01`). Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?end[lte]=2021-12-25&end[gte]=2021-12-15`
     * @param {Object.<String, Object>} [created] Allows for filtering based on creation date and time of the booking in ISO 8601 format (e.g. `2020-11-04T17:37:37Z`) and UTC timezone. Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?created[lte]=2020-11-04T19:37:37Z&created[gte]=2020-11-04T15:56:37.000Z`
     * @param {Object.<String, Object>} [updated] Allows for filtering based on the date and time the booking was last updated, in ISO 8601 format (e.g. `2020-11-04T17:37:37Z`) and UTC timezone. Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?updated[lte]=2020-11-04T19:37:37Z&updated[gte]=2020-11-04T15:56:37.000Z`
     * @param {Number} [size = 100)] Pagination size. Defaults to 100 if omitted.
     * @param {Number} [offset = 0)] Pagination offset. Defaults to 0 if omitted.
     * @param {String} [sortBy = 'createdAt:asc')] Order in which the results should be sorted. Currently allows you to sort by `createdAt` and `updatedAt`. Specify multiple paramaters by separating with commas
     * @param {module:api/BookingsApi~listBookingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBookings200Response}
     */
    listBookings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'end': opts['end'],
        'created': opts['created'],
        'updated': opts['updated'],
        'size': opts['size'],
        'offset': opts['offset'],
        'sortBy': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key_Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBookings200Response;
      return this.apiClient.callApi(
        '/bookings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveBooking operation.
     * @callback module:api/BookingsApi~retrieveBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Booking} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a booking
     * Returns all details for the specified booking.
     * @param {String} bookingId The unique identifier of the booking you would like to update.
     * @param {module:api/BookingsApi~retrieveBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Booking}
     */
    retrieveBooking(bookingId, callback) {
      let postBody = null;
      // verify the required parameter 'bookingId' is set
      if (bookingId === undefined || bookingId === null) {
        throw new Error("Missing the required parameter 'bookingId' when calling retrieveBooking");
      }

      let pathParams = {
        'bookingId': bookingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key_Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Booking;
      return this.apiClient.callApi(
        '/bookings/{bookingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBooking operation.
     * @callback module:api/BookingsApi~updateBookingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Booking} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change a booking
     * <!-- theme: danger -->  > Updates the specified booking with immediate effect. This action might result in a cancellation charge being charged.  > Please note that if you wish to change the contact details associated with a booking, you should use the [Change a Booking's Contact Details](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D~1booking-contact/put) endpoint.  Changes / updates a confirmed booking with the details you provide in the request body.  When your guest needs to change their booking, you can use this endpoint to change any of the details you initially supplied when you [made their booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings/post), e.g. you'll need to query for availability and use the `roomTypes[].rates[].rateId` that are available currently for their new stay dates. Any new rates selected must be for the same hotel as the original booking.  A booking cannot be updated on or after the check in day of the original or new stay.  In addition, we require you do supply a `updateBookingVersionAtTimestamp` field with the `updatedAt` timestamp of the booking. You can find this value by looking up the booking via the [Retrieve a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D/get) endpoint. This is to avoid race conditions where another update might have happened since the last time you have checked for the current details of this booking.  The `status` of this booking will switch back to `PENDING` until we have submitted and confirmed the new details with the hotel.  <!-- theme: warning -->  > **This request might take up to 20 seconds to load.** While we work to return a response to your request within milliseconds in most cases, some bookings require us to re-verify current pricing in real-time and doing so might take up to 20 seconds. Please make sure your app handles this waiting state appropriately.
     * @param {String} bookingId The unique identifier of the booking you would like to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateBookingRequest} [updateBookingRequest] Specifies the room you want to book for your guest.
     * @param {module:api/BookingsApi~updateBookingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Booking}
     */
    updateBooking(bookingId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateBookingRequest'];
      // verify the required parameter 'bookingId' is set
      if (bookingId === undefined || bookingId === null) {
        throw new Error("Missing the required parameter 'bookingId' when calling updateBooking");
      }

      let pathParams = {
        'bookingId': bookingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key_Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Booking;
      return this.apiClient.callApi(
        '/bookings/{bookingId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBookingContact operation.
     * @callback module:api/BookingsApi~updateBookingContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Booking} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change a booking contact
     * Updates a confirmed booking with the booking contact details you provide in the request body.  In addition, we require you to supply a `updateBookingVersionAtTimestamp` field with the `updatedAt` timestamp of the booking. You can find this value by looking up the booking via the [Retrieve a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D/get) endpoint. This is to avoid race conditions where another update might have happened since the last time you have checked for the current details of this booking.
     * @param {String} bookingId The unique identifier of the booking you would like to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateBookingContactRequest} [updateBookingContactRequest] 
     * @param {module:api/BookingsApi~updateBookingContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Booking}
     */
    updateBookingContact(bookingId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateBookingContactRequest'];
      // verify the required parameter 'bookingId' is set
      if (bookingId === undefined || bookingId === null) {
        throw new Error("Missing the required parameter 'bookingId' when calling updateBookingContact");
      }

      let pathParams = {
        'bookingId': bookingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key_Authentication'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Booking;
      return this.apiClient.callApi(
        '/bookings/{bookingId}/booking-contact', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
