/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GenericError from '../model/GenericError';
import HotelFullDetail from '../model/HotelFullDetail';
import ListHotels200Response from '../model/ListHotels200Response';
import ValidationError from '../model/ValidationError';

/**
* Hotels service.
* @module api/HotelsApi
* @version 1.003
*/
export default class HotelsApi {

    /**
    * Constructs a new HotelsApi. 
    * @alias module:api/HotelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listHotels operation.
     * @callback module:api/HotelsApi~listHotelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListHotels200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all hotels
     * Returns a list of all hotels worldwide that can be booked through Impala.  You can **filter** the results:  * Adding `longitude`, `latitude` and a `radius` (in meters) query parameters will filter the results to hotels around this location. * Adding `start` and `end` dates (in ISO 8601 notation, e.g. `2021-12-31`) for the expected arrival and departure dates of your guests will limit the results to hotels that have at least one room bookable for this timeframe. * Adding `starRating`, `name` or `country` allows you to filter to hotels based on these values (e.g. `?starRating[gte]=4&name[like]=palace` for hotels with a rating of 4 or up with a name containing \"palace\") * Adding `hotelIds` allows you to limit the results to include only hotels with the ids listed. Its value should be a comma-separated list of hotel ids (e.g. `?hotelIds[]=hotelIdA,hotelIdB`)  * Adding `contractable` allows you to filter to hotels that you can directly negotiate with through our [deals feature](https://docs.impala.travel/docs/booking-api/ZG9jOjcyNjgzMTA-contracting-with-hotels). (e.g `?contractable=true` or `?contractable=false`)  You can specify the **sorting order** in which hotels are returned: * This is done by using the `sortBy` query parameter. * Results can be sorted by `name` alphabetically, star `rating` and `distance_m` (in meters from the specified latitude/longitude location). * The parameter allows for a comma-separated list of arguments with optional `:asc` (ascending, the default if the modifier is omitted) and `:desc` (descending) modifiers.  If no hotels match your filter criteria, an empty array will be returned.
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [name] Allows for filtering based on the property name. Available modifiers include equal to (`eq`) or case insensitive search (`like`). Usage example: `?name[like]=palace`
     * @param {Object.<String, Object>} [starRating] Allows for filtering based on the starRating of a property. Available modifiers include less than (`lt`), greater than (`gt`), less than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?starRating[gt]=3&starRating[lt]=5`
     * @param {Object.<String, Object>} [country] Allows for filtering based on the country of a property. The only available modifier for this parameter is equal to (`eq`). Usage example: `?country[eq]=GBR`
     * @param {String} [start] The arrival day of the desired stay range in ISO 8601 format (`YYYY-MM-DD`).
     * @param {String} [end] The departure day of the desired stay range in ISO 8601 format (`YYYY-MM-DD`).
     * @param {Number} [latitude] The WGS 84 latitude of the location to search around (e.g. `58.386186`).
     * @param {Number} [longitude] The WGS 84 longitude of the location to search around (e.g. `-9.952549`).
     * @param {Number} [radius] The distance (in meters) to search around the specified location (e.g. `10000` for 10 km).
     * @param {Array.<String>} [hotelIds] A comma-separated list of hotel ids you wish to filter by (e.g. `60a06628-2c71-44bf-9685-efbd2df4179e,60a06628-2c71-44bf-9685-efbd2df4179e`).
     * @param {Object.<String, Object>} [created] Allows for filtering based on the date and time when this hotel was first added to the Impala platform, in ISO 8601 format (e.g. `2020-11-04T17:37:37Z`) and UTC timezone. Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?created[lte]=2020-11-04T19:37:37Z&created[gte]=2020-11-04T15:56:37.000Z`
     * @param {Object.<String, Object>} [updated] Allows for filtering based on the date and time the content of this hotel was last updated, in ISO 8601 format (e.g. `2020-11-04T17:37:37Z`) and UTC timezone. Available modifiers include less than (`lt`), greater than (`gt`), lower than or equal to (`lte`), greater than or equal to (`gte`) and equal to (`eq`). Usage example: `?updated[lte]=2020-11-04T19:37:37Z&updated[gte]=2020-11-04T15:56:37.000Z`
     * @param {Number} [size = 25)] Number of hotels returned on a given page (pagination).
     * @param {Number} [offset = 0)] Offset from the first hotel in the result (for pagination).
     * @param {String} [sortBy = 'createdAt:desc')] Order in which the results should be sorted. Currently allows you to sort by `name` (alphabetical), star `rating`, and `distance_m` in meters from the specified latitude/longitude. Allows for a comma-separated list of of arguments with modifiers for `:asc` (ascending) and `:desc` (descending) ordering.
     * @param {module:api/HotelsApi~listHotelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListHotels200Response}
     */
    listHotels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'starRating': opts['starRating'],
        'country': opts['country'],
        'start': opts['start'],
        'end': opts['end'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'hotelIds': this.apiClient.buildCollectionParam(opts['hotelIds'], 'csv'),
        'created': opts['created'],
        'updated': opts['updated'],
        'size': opts['size'],
        'offset': opts['offset'],
        'sortBy': opts['sortBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key_Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListHotels200Response;
      return this.apiClient.callApi(
        '/hotels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveHotel operation.
     * @callback module:api/HotelsApi~retrieveHotelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HotelFullDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a hotel
     * Returns the full content, room types and rates for the specified hotel.  When querying the hotels API you can query with or without dates. Where querying with dates requires providing valid values for the `start` and `end` parameters. Requests without these values will be considered a query without dates.  **Querying without dates:**  When you query without dates, the search result will include all properties that match your request. Including all content that is associated with those properties. However you will find that the `rates` attribute for each room will always be empty.  **Querying with dates:**  When you query with dates, the search result will include all properties that match your request, including all content that is associated with those properties. Rooms which do not have available prices for the provided dates will appear with an empty `rates` array.  For rooms where there are available prices the `rates` array will include both the public rates of the hotel, along with prices that come from deals in which you are participating. This would include private deals which you have negotiated with a hotel, along with Impala deals which you have been verified for.  Using the `rateId` of any of those rates, you can use the [Create a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings/post) endpoint to make a booking.
     * @param {String} hotelId The unique identifier of this hotel on the Impala platform.
     * @param {Object} opts Optional parameters
     * @param {String} [start] The arrival day of the desired stay range in ISO 8601 format (`YYYY-MM-DD`).
     * @param {String} [end] The departure day of the desired stay range in ISO 8601 format (`YYYY-MM-DD`).
     * @param {module:api/HotelsApi~retrieveHotelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HotelFullDetail}
     */
    retrieveHotel(hotelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hotelId' is set
      if (hotelId === undefined || hotelId === null) {
        throw new Error("Missing the required parameter 'hotelId' when calling retrieveHotel");
      }

      let pathParams = {
        'hotelId': hotelId
      };
      let queryParams = {
        'start': opts['start'],
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key_Authentication'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HotelFullDetail;
      return this.apiClient.callApi(
        '/hotels/{hotelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
