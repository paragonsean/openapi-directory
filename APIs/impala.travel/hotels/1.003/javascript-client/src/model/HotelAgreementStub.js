/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HotelAgreementStubDealsSellable from './HotelAgreementStubDealsSellable';
import HotelAgreementStubDiscount from './HotelAgreementStubDiscount';

/**
 * The HotelAgreementStub model module.
 * @module model/HotelAgreementStub
 * @version 1.003
 */
class HotelAgreementStub {
    /**
     * Constructs a new <code>HotelAgreementStub</code>.
     * Essential information on an agreement with a hotel.
     * @alias module:model/HotelAgreementStub
     * @param dealId {String} The unique identifier for this deal request.
     * @param hotelAgreementId {String} Unique identifier for the hotel agreement.
     * @param specialInstructions {String} These are conditions set by you the seller or the hotel for which the deal can be sold. For example: this deal can only be sold on mobile. Any specialInstructions will override other variables, for example, if an instruction includes: All bookings are non refundable, this will override any pre-existing cancellationPolicy.
     */
    constructor(dealId, hotelAgreementId, specialInstructions) { 
        
        HotelAgreementStub.initialize(this, dealId, hotelAgreementId, specialInstructions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dealId, hotelAgreementId, specialInstructions) { 
        obj['dealId'] = dealId;
        obj['hotelAgreementId'] = hotelAgreementId;
        obj['specialInstructions'] = specialInstructions;
    }

    /**
     * Constructs a <code>HotelAgreementStub</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HotelAgreementStub} obj Optional instance to populate.
     * @return {module:model/HotelAgreementStub} The populated <code>HotelAgreementStub</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HotelAgreementStub();

            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], ['String']);
            }
            if (data.hasOwnProperty('dealId')) {
                obj['dealId'] = ApiClient.convertToType(data['dealId'], 'String');
            }
            if (data.hasOwnProperty('dealsSellable')) {
                obj['dealsSellable'] = HotelAgreementStubDealsSellable.constructFromObject(data['dealsSellable']);
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = HotelAgreementStubDiscount.constructFromObject(data['discount']);
            }
            if (data.hasOwnProperty('hotelAgreementId')) {
                obj['hotelAgreementId'] = ApiClient.convertToType(data['hotelAgreementId'], 'String');
            }
            if (data.hasOwnProperty('href')) {
                obj['href'] = ApiClient.convertToType(data['href'], 'String');
            }
            if (data.hasOwnProperty('specialInstructions')) {
                obj['specialInstructions'] = ApiClient.convertToType(data['specialInstructions'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HotelAgreementStub</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HotelAgreementStub</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HotelAgreementStub.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['conditions'])) {
            throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
        }
        // ensure the json data is a string
        if (data['dealId'] && !(typeof data['dealId'] === 'string' || data['dealId'] instanceof String)) {
            throw new Error("Expected the field `dealId` to be a primitive type in the JSON string but got " + data['dealId']);
        }
        // validate the optional field `dealsSellable`
        if (data['dealsSellable']) { // data not null
          HotelAgreementStubDealsSellable.validateJSON(data['dealsSellable']);
        }
        // validate the optional field `discount`
        if (data['discount']) { // data not null
          HotelAgreementStubDiscount.validateJSON(data['discount']);
        }
        // ensure the json data is a string
        if (data['hotelAgreementId'] && !(typeof data['hotelAgreementId'] === 'string' || data['hotelAgreementId'] instanceof String)) {
            throw new Error("Expected the field `hotelAgreementId` to be a primitive type in the JSON string but got " + data['hotelAgreementId']);
        }
        // ensure the json data is a string
        if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
            throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
        }
        // ensure the json data is a string
        if (data['specialInstructions'] && !(typeof data['specialInstructions'] === 'string' || data['specialInstructions'] instanceof String)) {
            throw new Error("Expected the field `specialInstructions` to be a primitive type in the JSON string but got " + data['specialInstructions']);
        }

        return true;
    }


}

HotelAgreementStub.RequiredProperties = ["dealId", "hotelAgreementId", "specialInstructions"];

/**
 * A deal may have conditions set to it. For example, the deal may only apply for a closed user group (PRIVATE_RATE) or sold along with another component e.g flights (PACKAGED)
 * @member {Array.<String>} conditions
 */
HotelAgreementStub.prototype['conditions'] = undefined;

/**
 * The unique identifier for this deal request.
 * @member {String} dealId
 */
HotelAgreementStub.prototype['dealId'] = undefined;

/**
 * @member {module:model/HotelAgreementStubDealsSellable} dealsSellable
 */
HotelAgreementStub.prototype['dealsSellable'] = undefined;

/**
 * @member {module:model/HotelAgreementStubDiscount} discount
 */
HotelAgreementStub.prototype['discount'] = undefined;

/**
 * Unique identifier for the hotel agreement.
 * @member {String} hotelAgreementId
 */
HotelAgreementStub.prototype['hotelAgreementId'] = undefined;

/**
 * URI that allows access to the full deal information.
 * @member {String} href
 */
HotelAgreementStub.prototype['href'] = undefined;

/**
 * These are conditions set by you the seller or the hotel for which the deal can be sold. For example: this deal can only be sold on mobile. Any specialInstructions will override other variables, for example, if an instruction includes: All bookings are non refundable, this will override any pre-existing cancellationPolicy.
 * @member {String} specialInstructions
 */
HotelAgreementStub.prototype['specialInstructions'] = undefined;






export default HotelAgreementStub;

