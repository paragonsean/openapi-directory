/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BookedRoom from './BookedRoom';
import BookingCancellation from './BookingCancellation';
import BookingContact from './BookingContact';
import BookingNotes from './BookingNotes';
import HotelStub from './HotelStub';

/**
 * The Booking model module.
 * @module model/Booking
 * @version 1.003
 */
class Booking {
    /**
     * Constructs a new <code>Booking</code>.
     * Details of an existing booking.
     * @alias module:model/Booking
     * @param bookedRooms {Array.<module:model/BookedRoom>} List of rooms booked
     * @param bookingId {String} Unique identifier for this booking within the Impala platform.
     * @param contact {module:model/BookingContact} 
     * @param createdAt {Date} Date and time (in UTC and ISO 8601 format) when the booking was created.
     * @param end {Date} The departure date of the booking.
     * @param hotel {module:model/HotelStub} 
     * @param notes {module:model/BookingNotes} 
     * @param start {Date} The arrival date of the booking.
     * @param status {module:model/Booking.StatusEnum} Status of this booking within the Impala platform. When you make a booking, it'll first appear as `PENDING` until we receive the hotel's confirmation details. At this point your booking will move to `ACCEPTED`.
     * @param updatedAt {Date} Date and time (in UTC and ISO 8601 format) when the booking was last updated.
     */
    constructor(bookedRooms, bookingId, contact, createdAt, end, hotel, notes, start, status, updatedAt) { 
        
        Booking.initialize(this, bookedRooms, bookingId, contact, createdAt, end, hotel, notes, start, status, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bookedRooms, bookingId, contact, createdAt, end, hotel, notes, start, status, updatedAt) { 
        obj['bookedRooms'] = bookedRooms;
        obj['bookingId'] = bookingId;
        obj['contact'] = contact;
        obj['createdAt'] = createdAt;
        obj['end'] = end;
        obj['hotel'] = hotel;
        obj['notes'] = notes;
        obj['start'] = start;
        obj['status'] = status;
        obj['updatedAt'] = updatedAt;
    }

    /**
     * Constructs a <code>Booking</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Booking} obj Optional instance to populate.
     * @return {module:model/Booking} The populated <code>Booking</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Booking();

            if (data.hasOwnProperty('bookedRooms')) {
                obj['bookedRooms'] = ApiClient.convertToType(data['bookedRooms'], [BookedRoom]);
            }
            if (data.hasOwnProperty('bookingId')) {
                obj['bookingId'] = ApiClient.convertToType(data['bookingId'], 'String');
            }
            if (data.hasOwnProperty('cancellation')) {
                obj['cancellation'] = BookingCancellation.constructFromObject(data['cancellation']);
            }
            if (data.hasOwnProperty('contact')) {
                obj['contact'] = BookingContact.constructFromObject(data['contact']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Date');
            }
            if (data.hasOwnProperty('hotel')) {
                obj['hotel'] = HotelStub.constructFromObject(data['hotel']);
            }
            if (data.hasOwnProperty('hotelConfirmationCode')) {
                obj['hotelConfirmationCode'] = ApiClient.convertToType(data['hotelConfirmationCode'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = BookingNotes.constructFromObject(data['notes']);
            }
            if (data.hasOwnProperty('paymentBearerToken')) {
                obj['paymentBearerToken'] = ApiClient.convertToType(data['paymentBearerToken'], 'String');
            }
            if (data.hasOwnProperty('paymentClientSecret')) {
                obj['paymentClientSecret'] = ApiClient.convertToType(data['paymentClientSecret'], 'String');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Booking</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Booking</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Booking.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['bookedRooms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bookedRooms'])) {
                throw new Error("Expected the field `bookedRooms` to be an array in the JSON data but got " + data['bookedRooms']);
            }
            // validate the optional field `bookedRooms` (array)
            for (const item of data['bookedRooms']) {
                BookedRoom.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['bookingId'] && !(typeof data['bookingId'] === 'string' || data['bookingId'] instanceof String)) {
            throw new Error("Expected the field `bookingId` to be a primitive type in the JSON string but got " + data['bookingId']);
        }
        // validate the optional field `cancellation`
        if (data['cancellation']) { // data not null
          BookingCancellation.validateJSON(data['cancellation']);
        }
        // validate the optional field `contact`
        if (data['contact']) { // data not null
          BookingContact.validateJSON(data['contact']);
        }
        // validate the optional field `hotel`
        if (data['hotel']) { // data not null
          HotelStub.validateJSON(data['hotel']);
        }
        // ensure the json data is a string
        if (data['hotelConfirmationCode'] && !(typeof data['hotelConfirmationCode'] === 'string' || data['hotelConfirmationCode'] instanceof String)) {
            throw new Error("Expected the field `hotelConfirmationCode` to be a primitive type in the JSON string but got " + data['hotelConfirmationCode']);
        }
        // validate the optional field `notes`
        if (data['notes']) { // data not null
          BookingNotes.validateJSON(data['notes']);
        }
        // ensure the json data is a string
        if (data['paymentBearerToken'] && !(typeof data['paymentBearerToken'] === 'string' || data['paymentBearerToken'] instanceof String)) {
            throw new Error("Expected the field `paymentBearerToken` to be a primitive type in the JSON string but got " + data['paymentBearerToken']);
        }
        // ensure the json data is a string
        if (data['paymentClientSecret'] && !(typeof data['paymentClientSecret'] === 'string' || data['paymentClientSecret'] instanceof String)) {
            throw new Error("Expected the field `paymentClientSecret` to be a primitive type in the JSON string but got " + data['paymentClientSecret']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Booking.RequiredProperties = ["bookedRooms", "bookingId", "contact", "createdAt", "end", "hotel", "notes", "start", "status", "updatedAt"];

/**
 * List of rooms booked
 * @member {Array.<module:model/BookedRoom>} bookedRooms
 */
Booking.prototype['bookedRooms'] = undefined;

/**
 * Unique identifier for this booking within the Impala platform.
 * @member {String} bookingId
 */
Booking.prototype['bookingId'] = undefined;

/**
 * @member {module:model/BookingCancellation} cancellation
 */
Booking.prototype['cancellation'] = undefined;

/**
 * @member {module:model/BookingContact} contact
 */
Booking.prototype['contact'] = undefined;

/**
 * Date and time (in UTC and ISO 8601 format) when the booking was created.
 * @member {Date} createdAt
 */
Booking.prototype['createdAt'] = undefined;

/**
 * The departure date of the booking.
 * @member {Date} end
 */
Booking.prototype['end'] = undefined;

/**
 * @member {module:model/HotelStub} hotel
 */
Booking.prototype['hotel'] = undefined;

/**
 * The hotel's confirmation identifier for this booking.
 * @member {String} hotelConfirmationCode
 */
Booking.prototype['hotelConfirmationCode'] = undefined;

/**
 * @member {module:model/BookingNotes} notes
 */
Booking.prototype['notes'] = undefined;

/**
 * If status is PAYMENT_REQUIRED, then this should be used as the Authorisation header for the POST to the /payments endpoint.
 * @member {String} paymentBearerToken
 */
Booking.prototype['paymentBearerToken'] = undefined;

/**
 * If status is PAYMENT_REQUIRED, then this should be used as the client secret when rendering Impala Payment Elements in the UI.
 * @member {String} paymentClientSecret
 */
Booking.prototype['paymentClientSecret'] = undefined;

/**
 * The arrival date of the booking.
 * @member {Date} start
 */
Booking.prototype['start'] = undefined;

/**
 * Status of this booking within the Impala platform. When you make a booking, it'll first appear as `PENDING` until we receive the hotel's confirmation details. At this point your booking will move to `ACCEPTED`.
 * @member {module:model/Booking.StatusEnum} status
 */
Booking.prototype['status'] = undefined;

/**
 * Date and time (in UTC and ISO 8601 format) when the booking was last updated.
 * @member {Date} updatedAt
 */
Booking.prototype['updatedAt'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Booking['StatusEnum'] = {

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ACCEPTED"
     * @const
     */
    "ACCEPTED": "ACCEPTED",

    /**
     * value: "PAYMENT_REQUIRED"
     * @const
     */
    "PAYMENT_REQUIRED": "PAYMENT_REQUIRED",

    /**
     * value: "PAYMENT_ABANDONED"
     * @const
     */
    "PAYMENT_ABANDONED": "PAYMENT_ABANDONED"
};



export default Booking;

