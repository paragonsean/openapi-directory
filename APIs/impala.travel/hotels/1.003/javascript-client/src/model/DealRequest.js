/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DealRequestBookingWindowRestriction from './DealRequestBookingWindowRestriction';
import DealRequestCancellationPolicy from './DealRequestCancellationPolicy';
import DealRequestCommission from './DealRequestCommission';
import DealRequestDiscount from './DealRequestDiscount';
import DealRequestLengthOfStay from './DealRequestLengthOfStay';
import DealRequestSellableInDateRangesInner from './DealRequestSellableInDateRangesInner';
import DealRequestStayDateRangesInner from './DealRequestStayDateRangesInner';

/**
 * The DealRequest model module.
 * @module model/DealRequest
 * @version 1.003
 */
class DealRequest {
    /**
     * Constructs a new <code>DealRequest</code>.
     * A deal request you&#39;ve sent to hotels on Impala. [Read more about how deal requests work.](deal-requests-and-hotel-agreements.md)
     * @alias module:model/DealRequest
     * @param bookingWindowRestriction {module:model/DealRequestBookingWindowRestriction} 
     * @param cancellationPolicy {module:model/DealRequestCancellationPolicy} 
     * @param commission {module:model/DealRequestCommission} 
     * @param conditions {Array.<module:model/DealRequest.ConditionsEnum>} A deal may have conditions set to it. For example, the deal may only apply for a closed user group (PRIVATE_RATE) or sold along with another component e.g flights (PACKAGED)
     * @param createdAt {Date} Date and time (in UTC and ISO 8601 format) when the deal's static content was created.
     * @param dealRequestId {String} The unique identifier for this deal request
     * @param dealRequestStatus {module:model/DealRequest.DealRequestStatusEnum} The status of the deal request.
     * @param dealType {module:model/DealRequest.DealTypeEnum} The type of the deal request.
     * @param discount {module:model/DealRequestDiscount} 
     * @param lengthOfStay {module:model/DealRequestLengthOfStay} 
     * @param sellableInDateRanges {Array.<module:model/DealRequestSellableInDateRangesInner>} The date ranges within which you can sell rates using this deal.
     * @param specialInstructions {String} These are conditions set by you the seller or the hotel for which the deal can be sold. For example: this deal can only be sold on mobile. Any specialInstructions will override other variables, for example, if an instruction includes: All bookings are non refundable, this will override any pre-existing cancellationPolicy. 
     * @param stayDateRanges {Array.<module:model/DealRequestStayDateRangesInner>} The date ranges within which guests you sell can stay at the hotel with the conditions you agree, given the hotel has rooms available.
     * @param updatedAt {Date} Date and time (in UTC and ISO 8601 format) when the deal's static content was last updated.
     */
    constructor(bookingWindowRestriction, cancellationPolicy, commission, conditions, createdAt, dealRequestId, dealRequestStatus, dealType, discount, lengthOfStay, sellableInDateRanges, specialInstructions, stayDateRanges, updatedAt) { 
        
        DealRequest.initialize(this, bookingWindowRestriction, cancellationPolicy, commission, conditions, createdAt, dealRequestId, dealRequestStatus, dealType, discount, lengthOfStay, sellableInDateRanges, specialInstructions, stayDateRanges, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bookingWindowRestriction, cancellationPolicy, commission, conditions, createdAt, dealRequestId, dealRequestStatus, dealType, discount, lengthOfStay, sellableInDateRanges, specialInstructions, stayDateRanges, updatedAt) { 
        obj['bookingWindowRestriction'] = bookingWindowRestriction;
        obj['cancellationPolicy'] = cancellationPolicy;
        obj['commission'] = commission;
        obj['conditions'] = conditions;
        obj['createdAt'] = createdAt;
        obj['dealRequestId'] = dealRequestId;
        obj['dealRequestStatus'] = dealRequestStatus;
        obj['dealType'] = dealType;
        obj['discount'] = discount;
        obj['lengthOfStay'] = lengthOfStay;
        obj['sellableInDateRanges'] = sellableInDateRanges;
        obj['specialInstructions'] = specialInstructions;
        obj['stayDateRanges'] = stayDateRanges;
        obj['updatedAt'] = updatedAt;
    }

    /**
     * Constructs a <code>DealRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DealRequest} obj Optional instance to populate.
     * @return {module:model/DealRequest} The populated <code>DealRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DealRequest();

            if (data.hasOwnProperty('bookingWindowRestriction')) {
                obj['bookingWindowRestriction'] = DealRequestBookingWindowRestriction.constructFromObject(data['bookingWindowRestriction']);
            }
            if (data.hasOwnProperty('cancellationPolicy')) {
                obj['cancellationPolicy'] = DealRequestCancellationPolicy.constructFromObject(data['cancellationPolicy']);
            }
            if (data.hasOwnProperty('commission')) {
                obj['commission'] = DealRequestCommission.constructFromObject(data['commission']);
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], ['String']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('dealRequestId')) {
                obj['dealRequestId'] = ApiClient.convertToType(data['dealRequestId'], 'String');
            }
            if (data.hasOwnProperty('dealRequestStatus')) {
                obj['dealRequestStatus'] = ApiClient.convertToType(data['dealRequestStatus'], 'String');
            }
            if (data.hasOwnProperty('dealType')) {
                obj['dealType'] = ApiClient.convertToType(data['dealType'], 'String');
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = DealRequestDiscount.constructFromObject(data['discount']);
            }
            if (data.hasOwnProperty('lengthOfStay')) {
                obj['lengthOfStay'] = DealRequestLengthOfStay.constructFromObject(data['lengthOfStay']);
            }
            if (data.hasOwnProperty('sellableInDateRanges')) {
                obj['sellableInDateRanges'] = ApiClient.convertToType(data['sellableInDateRanges'], [DealRequestSellableInDateRangesInner]);
            }
            if (data.hasOwnProperty('specialInstructions')) {
                obj['specialInstructions'] = ApiClient.convertToType(data['specialInstructions'], 'String');
            }
            if (data.hasOwnProperty('stayDateRanges')) {
                obj['stayDateRanges'] = ApiClient.convertToType(data['stayDateRanges'], [DealRequestStayDateRangesInner]);
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DealRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DealRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DealRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `bookingWindowRestriction`
        if (data['bookingWindowRestriction']) { // data not null
          DealRequestBookingWindowRestriction.validateJSON(data['bookingWindowRestriction']);
        }
        // validate the optional field `cancellationPolicy`
        if (data['cancellationPolicy']) { // data not null
          DealRequestCancellationPolicy.validateJSON(data['cancellationPolicy']);
        }
        // validate the optional field `commission`
        if (data['commission']) { // data not null
          DealRequestCommission.validateJSON(data['commission']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['conditions'])) {
            throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
        }
        // ensure the json data is a string
        if (data['dealRequestId'] && !(typeof data['dealRequestId'] === 'string' || data['dealRequestId'] instanceof String)) {
            throw new Error("Expected the field `dealRequestId` to be a primitive type in the JSON string but got " + data['dealRequestId']);
        }
        // ensure the json data is a string
        if (data['dealRequestStatus'] && !(typeof data['dealRequestStatus'] === 'string' || data['dealRequestStatus'] instanceof String)) {
            throw new Error("Expected the field `dealRequestStatus` to be a primitive type in the JSON string but got " + data['dealRequestStatus']);
        }
        // ensure the json data is a string
        if (data['dealType'] && !(typeof data['dealType'] === 'string' || data['dealType'] instanceof String)) {
            throw new Error("Expected the field `dealType` to be a primitive type in the JSON string but got " + data['dealType']);
        }
        // validate the optional field `discount`
        if (data['discount']) { // data not null
          DealRequestDiscount.validateJSON(data['discount']);
        }
        // validate the optional field `lengthOfStay`
        if (data['lengthOfStay']) { // data not null
          DealRequestLengthOfStay.validateJSON(data['lengthOfStay']);
        }
        if (data['sellableInDateRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sellableInDateRanges'])) {
                throw new Error("Expected the field `sellableInDateRanges` to be an array in the JSON data but got " + data['sellableInDateRanges']);
            }
            // validate the optional field `sellableInDateRanges` (array)
            for (const item of data['sellableInDateRanges']) {
                DealRequestSellableInDateRangesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['specialInstructions'] && !(typeof data['specialInstructions'] === 'string' || data['specialInstructions'] instanceof String)) {
            throw new Error("Expected the field `specialInstructions` to be a primitive type in the JSON string but got " + data['specialInstructions']);
        }
        if (data['stayDateRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stayDateRanges'])) {
                throw new Error("Expected the field `stayDateRanges` to be an array in the JSON data but got " + data['stayDateRanges']);
            }
            // validate the optional field `stayDateRanges` (array)
            for (const item of data['stayDateRanges']) {
                DealRequestStayDateRangesInner.validateJSON(item);
            };
        }

        return true;
    }


}

DealRequest.RequiredProperties = ["bookingWindowRestriction", "cancellationPolicy", "commission", "conditions", "createdAt", "dealRequestId", "dealRequestStatus", "dealType", "discount", "lengthOfStay", "sellableInDateRanges", "specialInstructions", "stayDateRanges", "updatedAt"];

/**
 * @member {module:model/DealRequestBookingWindowRestriction} bookingWindowRestriction
 */
DealRequest.prototype['bookingWindowRestriction'] = undefined;

/**
 * @member {module:model/DealRequestCancellationPolicy} cancellationPolicy
 */
DealRequest.prototype['cancellationPolicy'] = undefined;

/**
 * @member {module:model/DealRequestCommission} commission
 */
DealRequest.prototype['commission'] = undefined;

/**
 * A deal may have conditions set to it. For example, the deal may only apply for a closed user group (PRIVATE_RATE) or sold along with another component e.g flights (PACKAGED)
 * @member {Array.<module:model/DealRequest.ConditionsEnum>} conditions
 */
DealRequest.prototype['conditions'] = undefined;

/**
 * Date and time (in UTC and ISO 8601 format) when the deal's static content was created.
 * @member {Date} createdAt
 */
DealRequest.prototype['createdAt'] = undefined;

/**
 * The unique identifier for this deal request
 * @member {String} dealRequestId
 */
DealRequest.prototype['dealRequestId'] = undefined;

/**
 * The status of the deal request.
 * @member {module:model/DealRequest.DealRequestStatusEnum} dealRequestStatus
 */
DealRequest.prototype['dealRequestStatus'] = undefined;

/**
 * The type of the deal request.
 * @member {module:model/DealRequest.DealTypeEnum} dealType
 */
DealRequest.prototype['dealType'] = undefined;

/**
 * @member {module:model/DealRequestDiscount} discount
 */
DealRequest.prototype['discount'] = undefined;

/**
 * @member {module:model/DealRequestLengthOfStay} lengthOfStay
 */
DealRequest.prototype['lengthOfStay'] = undefined;

/**
 * The date ranges within which you can sell rates using this deal.
 * @member {Array.<module:model/DealRequestSellableInDateRangesInner>} sellableInDateRanges
 */
DealRequest.prototype['sellableInDateRanges'] = undefined;

/**
 * These are conditions set by you the seller or the hotel for which the deal can be sold. For example: this deal can only be sold on mobile. Any specialInstructions will override other variables, for example, if an instruction includes: All bookings are non refundable, this will override any pre-existing cancellationPolicy. 
 * @member {String} specialInstructions
 */
DealRequest.prototype['specialInstructions'] = undefined;

/**
 * The date ranges within which guests you sell can stay at the hotel with the conditions you agree, given the hotel has rooms available.
 * @member {Array.<module:model/DealRequestStayDateRangesInner>} stayDateRanges
 */
DealRequest.prototype['stayDateRanges'] = undefined;

/**
 * Date and time (in UTC and ISO 8601 format) when the deal's static content was last updated.
 * @member {Date} updatedAt
 */
DealRequest.prototype['updatedAt'] = undefined;





/**
 * Allowed values for the <code>conditions</code> property.
 * @enum {String}
 * @readonly
 */
DealRequest['ConditionsEnum'] = {

    /**
     * value: "PACKAGED"
     * @const
     */
    "PACKAGED": "PACKAGED",

    /**
     * value: "PRIVATE_RATE"
     * @const
     */
    "PRIVATE_RATE": "PRIVATE_RATE"
};


/**
 * Allowed values for the <code>dealRequestStatus</code> property.
 * @enum {String}
 * @readonly
 */
DealRequest['DealRequestStatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ACCEPTED"
     * @const
     */
    "ACCEPTED": "ACCEPTED",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED"
};


/**
 * Allowed values for the <code>dealType</code> property.
 * @enum {String}
 * @readonly
 */
DealRequest['DealTypeEnum'] = {

    /**
     * value: "SENT_ON_IMPALA"
     * @const
     */
    "SENT_ON_IMPALA": "SENT_ON_IMPALA",

    /**
     * value: "EXTERNAL"
     * @const
     */
    "EXTERNAL": "EXTERNAL",

    /**
     * value: "IMPALA_SHARED"
     * @const
     */
    "IMPALA_SHARED": "IMPALA_SHARED"
};



export default DealRequest;

