/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BookedRateRetailRate from './BookedRateRetailRate';
import CancellationPolicy from './CancellationPolicy';
import HotelAgreementStub from './HotelAgreementStub';
import Money from './Money';
import RateComponent from './RateComponent';

/**
 * The Rate model module.
 * @module model/Rate
 * @version 1.003
 */
class Rate {
    /**
     * Constructs a new <code>Rate</code>.
     * Information on the price of the room, other components of the room (such as breakfast, lunch or a welcome drink) and the cancellation policies that apply.
     * @alias module:model/Rate
     * @param cancellationPolicies {Array.<module:model/CancellationPolicy>} 
     * @param components {Array.<module:model/RateComponent>} 
     * @param end {Date} 
     * @param hotelAgreement {module:model/HotelAgreementStub} 
     * @param maxOccupancy {Number} Maximum number of adults included in the rate.
     * @param rateId {String} 
     * @param retailRate {module:model/BookedRateRetailRate} 
     * @param sellerCommissionPercentage {Number} The commission percentage you as a seller will earn from this booking, based on `retailRate.total`.
     * @param start {Date} 
     */
    constructor(cancellationPolicies, components, end, hotelAgreement, maxOccupancy, rateId, retailRate, sellerCommissionPercentage, start) { 
        
        Rate.initialize(this, cancellationPolicies, components, end, hotelAgreement, maxOccupancy, rateId, retailRate, sellerCommissionPercentage, start);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cancellationPolicies, components, end, hotelAgreement, maxOccupancy, rateId, retailRate, sellerCommissionPercentage, start) { 
        obj['cancellationPolicies'] = cancellationPolicies;
        obj['components'] = components;
        obj['end'] = end;
        obj['hotelAgreement'] = hotelAgreement;
        obj['maxOccupancy'] = maxOccupancy;
        obj['rateId'] = rateId;
        obj['retailRate'] = retailRate;
        obj['sellerCommissionPercentage'] = sellerCommissionPercentage;
        obj['start'] = start;
    }

    /**
     * Constructs a <code>Rate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rate} obj Optional instance to populate.
     * @return {module:model/Rate} The populated <code>Rate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rate();

            if (data.hasOwnProperty('cancellationPolicies')) {
                obj['cancellationPolicies'] = ApiClient.convertToType(data['cancellationPolicies'], [CancellationPolicy]);
            }
            if (data.hasOwnProperty('components')) {
                obj['components'] = ApiClient.convertToType(data['components'], [RateComponent]);
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'Date');
            }
            if (data.hasOwnProperty('hotelAgreement')) {
                obj['hotelAgreement'] = HotelAgreementStub.constructFromObject(data['hotelAgreement']);
            }
            if (data.hasOwnProperty('maxOccupancy')) {
                obj['maxOccupancy'] = ApiClient.convertToType(data['maxOccupancy'], 'Number');
            }
            if (data.hasOwnProperty('rateId')) {
                obj['rateId'] = ApiClient.convertToType(data['rateId'], 'String');
            }
            if (data.hasOwnProperty('ratePlanId')) {
                obj['ratePlanId'] = ApiClient.convertToType(data['ratePlanId'], 'Number');
            }
            if (data.hasOwnProperty('retailRate')) {
                obj['retailRate'] = BookedRateRetailRate.constructFromObject(data['retailRate']);
            }
            if (data.hasOwnProperty('roomsSellable')) {
                obj['roomsSellable'] = ApiClient.convertToType(data['roomsSellable'], 'Number');
            }
            if (data.hasOwnProperty('sellerCommissionPercentage')) {
                obj['sellerCommissionPercentage'] = ApiClient.convertToType(data['sellerCommissionPercentage'], 'Number');
            }
            if (data.hasOwnProperty('sellerToImpalaPayment')) {
                obj['sellerToImpalaPayment'] = ApiClient.convertToType(data['sellerToImpalaPayment'], Money);
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Rate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['cancellationPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cancellationPolicies'])) {
                throw new Error("Expected the field `cancellationPolicies` to be an array in the JSON data but got " + data['cancellationPolicies']);
            }
            // validate the optional field `cancellationPolicies` (array)
            for (const item of data['cancellationPolicies']) {
                CancellationPolicy.validateJSON(item);
            };
        }
        if (data['components']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['components'])) {
                throw new Error("Expected the field `components` to be an array in the JSON data but got " + data['components']);
            }
            // validate the optional field `components` (array)
            for (const item of data['components']) {
                RateComponent.validateJSON(item);
            };
        }
        // validate the optional field `hotelAgreement`
        if (data['hotelAgreement']) { // data not null
          HotelAgreementStub.validateJSON(data['hotelAgreement']);
        }
        // ensure the json data is a string
        if (data['rateId'] && !(typeof data['rateId'] === 'string' || data['rateId'] instanceof String)) {
            throw new Error("Expected the field `rateId` to be a primitive type in the JSON string but got " + data['rateId']);
        }
        // validate the optional field `retailRate`
        if (data['retailRate']) { // data not null
          BookedRateRetailRate.validateJSON(data['retailRate']);
        }
        // validate the optional field `sellerToImpalaPayment`
        if (data['sellerToImpalaPayment']) { // data not null
          Money.validateJSON(data['sellerToImpalaPayment']);
        }

        return true;
    }


}

Rate.RequiredProperties = ["cancellationPolicies", "components", "end", "hotelAgreement", "maxOccupancy", "rateId", "retailRate", "sellerCommissionPercentage", "start"];

/**
 * @member {Array.<module:model/CancellationPolicy>} cancellationPolicies
 */
Rate.prototype['cancellationPolicies'] = undefined;

/**
 * @member {Array.<module:model/RateComponent>} components
 */
Rate.prototype['components'] = undefined;

/**
 * @member {Date} end
 */
Rate.prototype['end'] = undefined;

/**
 * @member {module:model/HotelAgreementStub} hotelAgreement
 */
Rate.prototype['hotelAgreement'] = undefined;

/**
 * Maximum number of adults included in the rate.
 * @member {Number} maxOccupancy
 */
Rate.prototype['maxOccupancy'] = undefined;

/**
 * @member {String} rateId
 */
Rate.prototype['rateId'] = undefined;

/**
 * The rate plan ID that is attached to this rate. Each rate plan ID can specify a unique combination of a cancellation policy and a meal plan.
 * @member {Number} ratePlanId
 */
Rate.prototype['ratePlanId'] = undefined;

/**
 * @member {module:model/BookedRateRetailRate} retailRate
 */
Rate.prototype['retailRate'] = undefined;

/**
 * Amount of rooms which can be sold for this occupancy level and room type at this rate price.
 * @member {Number} roomsSellable
 */
Rate.prototype['roomsSellable'] = undefined;

/**
 * The commission percentage you as a seller will earn from this booking, based on `retailRate.total`.
 * @member {Number} sellerCommissionPercentage
 */
Rate.prototype['sellerCommissionPercentage'] = undefined;

/**
 * This is the amount payable to the hotel, which Impala will collect from you on the hotel's behalf. The Impala fee will be requested in addition to this, and also documented in a VAT invoice.
 * @member {module:model/Money} sellerToImpalaPayment
 */
Rate.prototype['sellerToImpalaPayment'] = undefined;

/**
 * @member {Date} start
 */
Rate.prototype['start'] = undefined;






export default Rate;

