/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Amenity from './Amenity';
import ExternalUrl from './ExternalUrl';
import HotelFullDetailDescription from './HotelFullDetailDescription';
import Image from './Image';
import Location from './Location';
import RoomType from './RoomType';
import TimeRange from './TimeRange';

/**
 * The HotelFullDetail model module.
 * @module model/HotelFullDetail
 * @version 1.003
 */
class HotelFullDetail {
    /**
     * Constructs a new <code>HotelFullDetail</code>.
     * Full details on a hotel, including its room types and available rates
     * @alias module:model/HotelFullDetail
     * @param address {module:model/Address} 
     * @param amenities {Array.<module:model/Amenity>} 
     * @param checkIn {module:model/TimeRange} 
     * @param checkOut {module:model/TimeRange} 
     * @param contractable {Boolean} This determines if you can negotiate directly with the hotel. 
     * @param currency {String} The standard currency code used by the hotel.
     * @param emails {Array.<String>} 
     * @param externalUrls {Array.<module:model/ExternalUrl>} 
     * @param hotelId {String} Unique identifier for this hotel within the Impala platform.
     * @param images {Array.<module:model/Image>} Photos of the hotel, sorted in the recommended display order (e.g. for photo galleries) starting with the recommended hero image.
     * @param location {module:model/Location} 
     * @param name {String} Name of the hotel.
     * @param phoneNumbers {Array.<String>} The hotel's phone number(s)
     * @param roomCount {Number} The number of rooms at the hotel.
     * @param roomTypes {Array.<module:model/RoomType>} List of room types available at this hotel.
     * @param starRating {Number} The star rating (or star-equivalent rating)
     * @param termsAndConditions {String} Rules and terms that apply to this hotel and have to be shown to your guest before the make their booking.
     * @param websiteUrl {String} The URL to the hotel's website.
     */
    constructor(address, amenities, checkIn, checkOut, contractable, currency, emails, externalUrls, hotelId, images, location, name, phoneNumbers, roomCount, roomTypes, starRating, termsAndConditions, websiteUrl) { 
        
        HotelFullDetail.initialize(this, address, amenities, checkIn, checkOut, contractable, currency, emails, externalUrls, hotelId, images, location, name, phoneNumbers, roomCount, roomTypes, starRating, termsAndConditions, websiteUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, amenities, checkIn, checkOut, contractable, currency, emails, externalUrls, hotelId, images, location, name, phoneNumbers, roomCount, roomTypes, starRating, termsAndConditions, websiteUrl) { 
        obj['address'] = address;
        obj['amenities'] = amenities;
        obj['checkIn'] = checkIn;
        obj['checkOut'] = checkOut;
        obj['contractable'] = contractable;
        obj['currency'] = currency;
        obj['emails'] = emails;
        obj['externalUrls'] = externalUrls;
        obj['hotelId'] = hotelId;
        obj['images'] = images;
        obj['location'] = location;
        obj['name'] = name;
        obj['phoneNumbers'] = phoneNumbers;
        obj['roomCount'] = roomCount;
        obj['roomTypes'] = roomTypes;
        obj['starRating'] = starRating;
        obj['termsAndConditions'] = termsAndConditions;
        obj['websiteUrl'] = websiteUrl;
    }

    /**
     * Constructs a <code>HotelFullDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HotelFullDetail} obj Optional instance to populate.
     * @return {module:model/HotelFullDetail} The populated <code>HotelFullDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HotelFullDetail();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('amenities')) {
                obj['amenities'] = ApiClient.convertToType(data['amenities'], [Amenity]);
            }
            if (data.hasOwnProperty('checkIn')) {
                obj['checkIn'] = TimeRange.constructFromObject(data['checkIn']);
            }
            if (data.hasOwnProperty('checkOut')) {
                obj['checkOut'] = TimeRange.constructFromObject(data['checkOut']);
            }
            if (data.hasOwnProperty('contractable')) {
                obj['contractable'] = ApiClient.convertToType(data['contractable'], 'Boolean');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = HotelFullDetailDescription.constructFromObject(data['description']);
            }
            if (data.hasOwnProperty('emails')) {
                obj['emails'] = ApiClient.convertToType(data['emails'], ['String']);
            }
            if (data.hasOwnProperty('externalUrls')) {
                obj['externalUrls'] = ApiClient.convertToType(data['externalUrls'], [ExternalUrl]);
            }
            if (data.hasOwnProperty('hotelId')) {
                obj['hotelId'] = ApiClient.convertToType(data['hotelId'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [Image]);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('phoneNumbers')) {
                obj['phoneNumbers'] = ApiClient.convertToType(data['phoneNumbers'], ['String']);
            }
            if (data.hasOwnProperty('roomCount')) {
                obj['roomCount'] = ApiClient.convertToType(data['roomCount'], 'Number');
            }
            if (data.hasOwnProperty('roomTypes')) {
                obj['roomTypes'] = ApiClient.convertToType(data['roomTypes'], [RoomType]);
            }
            if (data.hasOwnProperty('starRating')) {
                obj['starRating'] = ApiClient.convertToType(data['starRating'], 'Number');
            }
            if (data.hasOwnProperty('termsAndConditions')) {
                obj['termsAndConditions'] = ApiClient.convertToType(data['termsAndConditions'], 'String');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('websiteUrl')) {
                obj['websiteUrl'] = ApiClient.convertToType(data['websiteUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HotelFullDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HotelFullDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HotelFullDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        if (data['amenities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['amenities'])) {
                throw new Error("Expected the field `amenities` to be an array in the JSON data but got " + data['amenities']);
            }
            // validate the optional field `amenities` (array)
            for (const item of data['amenities']) {
                Amenity.validateJSON(item);
            };
        }
        // validate the optional field `checkIn`
        if (data['checkIn']) { // data not null
          TimeRange.validateJSON(data['checkIn']);
        }
        // validate the optional field `checkOut`
        if (data['checkOut']) { // data not null
          TimeRange.validateJSON(data['checkOut']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          HotelFullDetailDescription.validateJSON(data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['emails'])) {
            throw new Error("Expected the field `emails` to be an array in the JSON data but got " + data['emails']);
        }
        if (data['externalUrls']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['externalUrls'])) {
                throw new Error("Expected the field `externalUrls` to be an array in the JSON data but got " + data['externalUrls']);
            }
            // validate the optional field `externalUrls` (array)
            for (const item of data['externalUrls']) {
                ExternalUrl.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['hotelId'] && !(typeof data['hotelId'] === 'string' || data['hotelId'] instanceof String)) {
            throw new Error("Expected the field `hotelId` to be a primitive type in the JSON string but got " + data['hotelId']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                Image.validateJSON(item);
            };
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['phoneNumbers'])) {
            throw new Error("Expected the field `phoneNumbers` to be an array in the JSON data but got " + data['phoneNumbers']);
        }
        if (data['roomTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['roomTypes'])) {
                throw new Error("Expected the field `roomTypes` to be an array in the JSON data but got " + data['roomTypes']);
            }
            // validate the optional field `roomTypes` (array)
            for (const item of data['roomTypes']) {
                RoomType.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['termsAndConditions'] && !(typeof data['termsAndConditions'] === 'string' || data['termsAndConditions'] instanceof String)) {
            throw new Error("Expected the field `termsAndConditions` to be a primitive type in the JSON string but got " + data['termsAndConditions']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['websiteUrl'] && !(typeof data['websiteUrl'] === 'string' || data['websiteUrl'] instanceof String)) {
            throw new Error("Expected the field `websiteUrl` to be a primitive type in the JSON string but got " + data['websiteUrl']);
        }

        return true;
    }


}

HotelFullDetail.RequiredProperties = ["address", "amenities", "checkIn", "checkOut", "contractable", "currency", "emails", "externalUrls", "hotelId", "images", "location", "name", "phoneNumbers", "roomCount", "roomTypes", "starRating", "termsAndConditions", "websiteUrl"];

/**
 * @member {module:model/Address} address
 */
HotelFullDetail.prototype['address'] = undefined;

/**
 * @member {Array.<module:model/Amenity>} amenities
 */
HotelFullDetail.prototype['amenities'] = undefined;

/**
 * @member {module:model/TimeRange} checkIn
 */
HotelFullDetail.prototype['checkIn'] = undefined;

/**
 * @member {module:model/TimeRange} checkOut
 */
HotelFullDetail.prototype['checkOut'] = undefined;

/**
 * This determines if you can negotiate directly with the hotel. 
 * @member {Boolean} contractable
 */
HotelFullDetail.prototype['contractable'] = undefined;

/**
 * Date and time (in UTC and ISO 8601 format) when the hotel's stable content (i.e. all the details of the hotel excluding its rates) was created.
 * @member {Date} createdAt
 */
HotelFullDetail.prototype['createdAt'] = undefined;

/**
 * The standard currency code used by the hotel.
 * @member {String} currency
 */
HotelFullDetail.prototype['currency'] = undefined;

/**
 * @member {module:model/HotelFullDetailDescription} description
 */
HotelFullDetail.prototype['description'] = undefined;

/**
 * @member {Array.<String>} emails
 */
HotelFullDetail.prototype['emails'] = undefined;

/**
 * @member {Array.<module:model/ExternalUrl>} externalUrls
 */
HotelFullDetail.prototype['externalUrls'] = undefined;

/**
 * Unique identifier for this hotel within the Impala platform.
 * @member {String} hotelId
 */
HotelFullDetail.prototype['hotelId'] = undefined;

/**
 * Photos of the hotel, sorted in the recommended display order (e.g. for photo galleries) starting with the recommended hero image.
 * @member {Array.<module:model/Image>} images
 */
HotelFullDetail.prototype['images'] = undefined;

/**
 * @member {module:model/Location} location
 */
HotelFullDetail.prototype['location'] = undefined;

/**
 * Name of the hotel.
 * @member {String} name
 */
HotelFullDetail.prototype['name'] = undefined;

/**
 * The hotel's phone number(s)
 * @member {Array.<String>} phoneNumbers
 */
HotelFullDetail.prototype['phoneNumbers'] = undefined;

/**
 * The number of rooms at the hotel.
 * @member {Number} roomCount
 */
HotelFullDetail.prototype['roomCount'] = undefined;

/**
 * List of room types available at this hotel.
 * @member {Array.<module:model/RoomType>} roomTypes
 */
HotelFullDetail.prototype['roomTypes'] = undefined;

/**
 * The star rating (or star-equivalent rating)
 * @member {Number} starRating
 */
HotelFullDetail.prototype['starRating'] = undefined;

/**
 * Rules and terms that apply to this hotel and have to be shown to your guest before the make their booking.
 * @member {String} termsAndConditions
 */
HotelFullDetail.prototype['termsAndConditions'] = undefined;

/**
 * The timezone the hotel is in - e.g AST
 * @member {String} timezone
 */
HotelFullDetail.prototype['timezone'] = undefined;

/**
 * Date and time (in UTC and ISO 8601 format) when the hotel's stable content (i.e. all the details of the hotel excluding its rates)  was last updated.
 * @member {Date} updatedAt
 */
HotelFullDetail.prototype['updatedAt'] = undefined;

/**
 * The URL to the hotel's website.
 * @member {String} websiteUrl
 */
HotelFullDetail.prototype['websiteUrl'] = undefined;






export default HotelFullDetail;

