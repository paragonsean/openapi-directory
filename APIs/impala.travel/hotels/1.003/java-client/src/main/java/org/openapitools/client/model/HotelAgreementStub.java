/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HotelAgreementStubDealsSellable;
import org.openapitools.client.model.HotelAgreementStubDiscount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Essential information on an agreement with a hotel.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:34.305979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HotelAgreementStub {
  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<String> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEAL_ID = "dealId";
  @SerializedName(SERIALIZED_NAME_DEAL_ID)
  private String dealId;

  public static final String SERIALIZED_NAME_DEALS_SELLABLE = "dealsSellable";
  @SerializedName(SERIALIZED_NAME_DEALS_SELLABLE)
  private HotelAgreementStubDealsSellable dealsSellable;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private HotelAgreementStubDiscount discount;

  public static final String SERIALIZED_NAME_HOTEL_AGREEMENT_ID = "hotelAgreementId";
  @SerializedName(SERIALIZED_NAME_HOTEL_AGREEMENT_ID)
  private String hotelAgreementId;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_SPECIAL_INSTRUCTIONS = "specialInstructions";
  @SerializedName(SERIALIZED_NAME_SPECIAL_INSTRUCTIONS)
  private String specialInstructions;

  public HotelAgreementStub() {
  }

  public HotelAgreementStub conditions(List<String> conditions) {
    this.conditions = conditions;
    return this;
  }

  public HotelAgreementStub addConditionsItem(String conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * A deal may have conditions set to it. For example, the deal may only apply for a closed user group (PRIVATE_RATE) or sold along with another component e.g flights (PACKAGED)
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<String> getConditions() {
    return conditions;
  }

  public void setConditions(List<String> conditions) {
    this.conditions = conditions;
  }


  public HotelAgreementStub dealId(String dealId) {
    this.dealId = dealId;
    return this;
  }

  /**
   * The unique identifier for this deal request.
   * @return dealId
   */
  @javax.annotation.Nonnull
  public String getDealId() {
    return dealId;
  }

  public void setDealId(String dealId) {
    this.dealId = dealId;
  }


  public HotelAgreementStub dealsSellable(HotelAgreementStubDealsSellable dealsSellable) {
    this.dealsSellable = dealsSellable;
    return this;
  }

  /**
   * Get dealsSellable
   * @return dealsSellable
   */
  @javax.annotation.Nullable
  public HotelAgreementStubDealsSellable getDealsSellable() {
    return dealsSellable;
  }

  public void setDealsSellable(HotelAgreementStubDealsSellable dealsSellable) {
    this.dealsSellable = dealsSellable;
  }


  public HotelAgreementStub discount(HotelAgreementStubDiscount discount) {
    this.discount = discount;
    return this;
  }

  /**
   * Get discount
   * @return discount
   */
  @javax.annotation.Nullable
  public HotelAgreementStubDiscount getDiscount() {
    return discount;
  }

  public void setDiscount(HotelAgreementStubDiscount discount) {
    this.discount = discount;
  }


  public HotelAgreementStub hotelAgreementId(String hotelAgreementId) {
    this.hotelAgreementId = hotelAgreementId;
    return this;
  }

  /**
   * Unique identifier for the hotel agreement.
   * @return hotelAgreementId
   */
  @javax.annotation.Nonnull
  public String getHotelAgreementId() {
    return hotelAgreementId;
  }

  public void setHotelAgreementId(String hotelAgreementId) {
    this.hotelAgreementId = hotelAgreementId;
  }


  public HotelAgreementStub href(String href) {
    this.href = href;
    return this;
  }

  /**
   * URI that allows access to the full deal information.
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }


  public HotelAgreementStub specialInstructions(String specialInstructions) {
    this.specialInstructions = specialInstructions;
    return this;
  }

  /**
   * These are conditions set by you the seller or the hotel for which the deal can be sold. For example: this deal can only be sold on mobile. Any specialInstructions will override other variables, for example, if an instruction includes: All bookings are non refundable, this will override any pre-existing cancellationPolicy.
   * @return specialInstructions
   */
  @javax.annotation.Nullable
  public String getSpecialInstructions() {
    return specialInstructions;
  }

  public void setSpecialInstructions(String specialInstructions) {
    this.specialInstructions = specialInstructions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelAgreementStub hotelAgreementStub = (HotelAgreementStub) o;
    return Objects.equals(this.conditions, hotelAgreementStub.conditions) &&
        Objects.equals(this.dealId, hotelAgreementStub.dealId) &&
        Objects.equals(this.dealsSellable, hotelAgreementStub.dealsSellable) &&
        Objects.equals(this.discount, hotelAgreementStub.discount) &&
        Objects.equals(this.hotelAgreementId, hotelAgreementStub.hotelAgreementId) &&
        Objects.equals(this.href, hotelAgreementStub.href) &&
        Objects.equals(this.specialInstructions, hotelAgreementStub.specialInstructions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, dealId, dealsSellable, discount, hotelAgreementId, href, specialInstructions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelAgreementStub {\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    dealId: ").append(toIndentedString(dealId)).append("\n");
    sb.append("    dealsSellable: ").append(toIndentedString(dealsSellable)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    hotelAgreementId: ").append(toIndentedString(hotelAgreementId)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    specialInstructions: ").append(toIndentedString(specialInstructions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conditions");
    openapiFields.add("dealId");
    openapiFields.add("dealsSellable");
    openapiFields.add("discount");
    openapiFields.add("hotelAgreementId");
    openapiFields.add("href");
    openapiFields.add("specialInstructions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dealId");
    openapiRequiredFields.add("hotelAgreementId");
    openapiRequiredFields.add("specialInstructions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HotelAgreementStub
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HotelAgreementStub.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotelAgreementStub is not found in the empty JSON string", HotelAgreementStub.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HotelAgreementStub.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotelAgreementStub` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HotelAgreementStub.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull() && !jsonObj.get("conditions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
      }
      if (!jsonObj.get("dealId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealId").toString()));
      }
      // validate the optional field `dealsSellable`
      if (jsonObj.get("dealsSellable") != null && !jsonObj.get("dealsSellable").isJsonNull()) {
        HotelAgreementStubDealsSellable.validateJsonElement(jsonObj.get("dealsSellable"));
      }
      // validate the optional field `discount`
      if (jsonObj.get("discount") != null && !jsonObj.get("discount").isJsonNull()) {
        HotelAgreementStubDiscount.validateJsonElement(jsonObj.get("discount"));
      }
      if (!jsonObj.get("hotelAgreementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotelAgreementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotelAgreementId").toString()));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("specialInstructions") != null && !jsonObj.get("specialInstructions").isJsonNull()) && !jsonObj.get("specialInstructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specialInstructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specialInstructions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotelAgreementStub.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotelAgreementStub' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotelAgreementStub> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotelAgreementStub.class));

       return (TypeAdapter<T>) new TypeAdapter<HotelAgreementStub>() {
           @Override
           public void write(JsonWriter out, HotelAgreementStub value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotelAgreementStub read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HotelAgreementStub given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HotelAgreementStub
   * @throws IOException if the JSON string is invalid with respect to HotelAgreementStub
   */
  public static HotelAgreementStub fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotelAgreementStub.class);
  }

  /**
   * Convert an instance of HotelAgreementStub to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

