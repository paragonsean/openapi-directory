/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BookingContact;
import org.openapitools.client.model.NotesBooking;
import org.openapitools.client.model.RatePlanRoom;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request body with the explicit rate taken from the rate calendar endpoint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:34.305979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BookingRequestWithRatePlans {
  public static final String SERIALIZED_NAME_BOOKING_CONTACT = "bookingContact";
  @SerializedName(SERIALIZED_NAME_BOOKING_CONTACT)
  private BookingContact bookingContact;

  public static final String SERIALIZED_NAME_DEAL_ID = "dealId";
  @SerializedName(SERIALIZED_NAME_DEAL_ID)
  private String dealId;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private LocalDate end;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private NotesBooking notes;

  /**
   * How will the guest make payment for this booking?
   */
  @JsonAdapter(PaymentTypeEnum.Adapter.class)
  public enum PaymentTypeEnum {
    API("API");

    private String value;

    PaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentTypeEnum fromValue(String value) {
      for (PaymentTypeEnum b : PaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentTypeEnum paymentType;

  public static final String SERIALIZED_NAME_ROOMS = "rooms";
  @SerializedName(SERIALIZED_NAME_ROOMS)
  private List<RatePlanRoom> rooms = new ArrayList<>();

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private LocalDate start;

  public BookingRequestWithRatePlans() {
  }

  public BookingRequestWithRatePlans bookingContact(BookingContact bookingContact) {
    this.bookingContact = bookingContact;
    return this;
  }

  /**
   * Get bookingContact
   * @return bookingContact
   */
  @javax.annotation.Nonnull
  public BookingContact getBookingContact() {
    return bookingContact;
  }

  public void setBookingContact(BookingContact bookingContact) {
    this.bookingContact = bookingContact;
  }


  public BookingRequestWithRatePlans dealId(String dealId) {
    this.dealId = dealId;
    return this;
  }

  /**
   * The id of the deal that contains agreement made between the hotel and company
   * @return dealId
   */
  @javax.annotation.Nullable
  public String getDealId() {
    return dealId;
  }

  public void setDealId(String dealId) {
    this.dealId = dealId;
  }


  public BookingRequestWithRatePlans end(LocalDate end) {
    this.end = end;
    return this;
  }

  /**
   * The last day of the desired stay range in ISO 8601 format YYYY-MM-DD.
   * @return end
   */
  @javax.annotation.Nonnull
  public LocalDate getEnd() {
    return end;
  }

  public void setEnd(LocalDate end) {
    this.end = end;
  }


  public BookingRequestWithRatePlans notes(NotesBooking notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public NotesBooking getNotes() {
    return notes;
  }

  public void setNotes(NotesBooking notes) {
    this.notes = notes;
  }


  public BookingRequestWithRatePlans paymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * How will the guest make payment for this booking?
   * @return paymentType
   */
  @javax.annotation.Nullable
  public PaymentTypeEnum getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
  }


  public BookingRequestWithRatePlans rooms(List<RatePlanRoom> rooms) {
    this.rooms = rooms;
    return this;
  }

  public BookingRequestWithRatePlans addRoomsItem(RatePlanRoom roomsItem) {
    if (this.rooms == null) {
      this.rooms = new ArrayList<>();
    }
    this.rooms.add(roomsItem);
    return this;
  }

  /**
   * Array of rooms booked within this booking
   * @return rooms
   */
  @javax.annotation.Nonnull
  public List<RatePlanRoom> getRooms() {
    return rooms;
  }

  public void setRooms(List<RatePlanRoom> rooms) {
    this.rooms = rooms;
  }


  public BookingRequestWithRatePlans start(LocalDate start) {
    this.start = start;
    return this;
  }

  /**
   * The first day of the desired stay range in ISO 8601 format YYYY-MM-DD.
   * @return start
   */
  @javax.annotation.Nonnull
  public LocalDate getStart() {
    return start;
  }

  public void setStart(LocalDate start) {
    this.start = start;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BookingRequestWithRatePlans bookingRequestWithRatePlans = (BookingRequestWithRatePlans) o;
    return Objects.equals(this.bookingContact, bookingRequestWithRatePlans.bookingContact) &&
        Objects.equals(this.dealId, bookingRequestWithRatePlans.dealId) &&
        Objects.equals(this.end, bookingRequestWithRatePlans.end) &&
        Objects.equals(this.notes, bookingRequestWithRatePlans.notes) &&
        Objects.equals(this.paymentType, bookingRequestWithRatePlans.paymentType) &&
        Objects.equals(this.rooms, bookingRequestWithRatePlans.rooms) &&
        Objects.equals(this.start, bookingRequestWithRatePlans.start);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bookingContact, dealId, end, notes, paymentType, rooms, start);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BookingRequestWithRatePlans {\n");
    sb.append("    bookingContact: ").append(toIndentedString(bookingContact)).append("\n");
    sb.append("    dealId: ").append(toIndentedString(dealId)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    rooms: ").append(toIndentedString(rooms)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bookingContact");
    openapiFields.add("dealId");
    openapiFields.add("end");
    openapiFields.add("notes");
    openapiFields.add("paymentType");
    openapiFields.add("rooms");
    openapiFields.add("start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bookingContact");
    openapiRequiredFields.add("end");
    openapiRequiredFields.add("rooms");
    openapiRequiredFields.add("start");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BookingRequestWithRatePlans
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BookingRequestWithRatePlans.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BookingRequestWithRatePlans is not found in the empty JSON string", BookingRequestWithRatePlans.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BookingRequestWithRatePlans.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BookingRequestWithRatePlans` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BookingRequestWithRatePlans.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `bookingContact`
      BookingContact.validateJsonElement(jsonObj.get("bookingContact"));
      if ((jsonObj.get("dealId") != null && !jsonObj.get("dealId").isJsonNull()) && !jsonObj.get("dealId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealId").toString()));
      }
      // validate the optional field `notes`
      if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) {
        NotesBooking.validateJsonElement(jsonObj.get("notes"));
      }
      if ((jsonObj.get("paymentType") != null && !jsonObj.get("paymentType").isJsonNull()) && !jsonObj.get("paymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentType").toString()));
      }
      // validate the optional field `paymentType`
      if (jsonObj.get("paymentType") != null && !jsonObj.get("paymentType").isJsonNull()) {
        PaymentTypeEnum.validateJsonElement(jsonObj.get("paymentType"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("rooms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rooms` to be an array in the JSON string but got `%s`", jsonObj.get("rooms").toString()));
      }

      JsonArray jsonArrayrooms = jsonObj.getAsJsonArray("rooms");
      // validate the required field `rooms` (array)
      for (int i = 0; i < jsonArrayrooms.size(); i++) {
        RatePlanRoom.validateJsonElement(jsonArrayrooms.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BookingRequestWithRatePlans.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BookingRequestWithRatePlans' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BookingRequestWithRatePlans> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BookingRequestWithRatePlans.class));

       return (TypeAdapter<T>) new TypeAdapter<BookingRequestWithRatePlans>() {
           @Override
           public void write(JsonWriter out, BookingRequestWithRatePlans value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BookingRequestWithRatePlans read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BookingRequestWithRatePlans given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BookingRequestWithRatePlans
   * @throws IOException if the JSON string is invalid with respect to BookingRequestWithRatePlans
   */
  public static BookingRequestWithRatePlans fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BookingRequestWithRatePlans.class);
  }

  /**
   * Convert an instance of BookingRequestWithRatePlans to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

