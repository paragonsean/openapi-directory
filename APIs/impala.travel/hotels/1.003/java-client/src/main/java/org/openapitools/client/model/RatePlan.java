/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import org.openapitools.client.model.Conditions;
import org.openapitools.client.model.RateAdjustment;
import org.openapitools.client.model.RateComponent;
import org.openapitools.client.model.RatePlanRestrictions;
import org.openapitools.client.model.RatePlanRoomType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Rate plan encapsulates rates given a set of internal conditions like cancellation policy or meal plan.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:34.305979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RatePlan {
  public static final String SERIALIZED_NAME_ADJUSTMENTS = "adjustments";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENTS)
  private Set<RateAdjustment> adjustments = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private List<RateComponent> components = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private Conditions conditions;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HOTEL_ID = "hotelId";
  @SerializedName(SERIALIZED_NAME_HOTEL_ID)
  private UUID hotelId;

  public static final String SERIALIZED_NAME_RATE_PLAN_ID = "ratePlanId";
  @SerializedName(SERIALIZED_NAME_RATE_PLAN_ID)
  private BigDecimal ratePlanId;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private RatePlanRestrictions restrictions;

  public static final String SERIALIZED_NAME_ROOM_TYPES = "roomTypes";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPES)
  private Set<RatePlanRoomType> roomTypes = new LinkedHashSet<>();

  public RatePlan() {
  }

  public RatePlan adjustments(Set<RateAdjustment> adjustments) {
    this.adjustments = adjustments;
    return this;
  }

  public RatePlan addAdjustmentsItem(RateAdjustment adjustmentsItem) {
    if (this.adjustments == null) {
      this.adjustments = new LinkedHashSet<>();
    }
    this.adjustments.add(adjustmentsItem);
    return this;
  }

  /**
   * A list of adjustments that could apply to this rate.
   * @return adjustments
   */
  @javax.annotation.Nullable
  public Set<RateAdjustment> getAdjustments() {
    return adjustments;
  }

  public void setAdjustments(Set<RateAdjustment> adjustments) {
    this.adjustments = adjustments;
  }


  public RatePlan components(List<RateComponent> components) {
    this.components = components;
    return this;
  }

  public RatePlan addComponentsItem(RateComponent componentsItem) {
    if (this.components == null) {
      this.components = new ArrayList<>();
    }
    this.components.add(componentsItem);
    return this;
  }

  /**
   * Get components
   * @return components
   */
  @javax.annotation.Nullable
  public List<RateComponent> getComponents() {
    return components;
  }

  public void setComponents(List<RateComponent> components) {
    this.components = components;
  }


  public RatePlan conditions(Conditions conditions) {
    this.conditions = conditions;
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nonnull
  public Conditions getConditions() {
    return conditions;
  }

  public void setConditions(Conditions conditions) {
    this.conditions = conditions;
  }


  public RatePlan description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Human-readable summary describing this rate plan.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RatePlan hotelId(UUID hotelId) {
    this.hotelId = hotelId;
    return this;
  }

  /**
   * The unique identifier of the hotel this rate plan is available for.
   * @return hotelId
   */
  @javax.annotation.Nonnull
  public UUID getHotelId() {
    return hotelId;
  }

  public void setHotelId(UUID hotelId) {
    this.hotelId = hotelId;
  }


  public RatePlan ratePlanId(BigDecimal ratePlanId) {
    this.ratePlanId = ratePlanId;
    return this;
  }

  /**
   * The integer identifier of this rate plan.
   * @return ratePlanId
   */
  @javax.annotation.Nonnull
  public BigDecimal getRatePlanId() {
    return ratePlanId;
  }

  public void setRatePlanId(BigDecimal ratePlanId) {
    this.ratePlanId = ratePlanId;
  }


  public RatePlan restrictions(RatePlanRestrictions restrictions) {
    this.restrictions = restrictions;
    return this;
  }

  /**
   * Get restrictions
   * @return restrictions
   */
  @javax.annotation.Nonnull
  public RatePlanRestrictions getRestrictions() {
    return restrictions;
  }

  public void setRestrictions(RatePlanRestrictions restrictions) {
    this.restrictions = restrictions;
  }


  public RatePlan roomTypes(Set<RatePlanRoomType> roomTypes) {
    this.roomTypes = roomTypes;
    return this;
  }

  public RatePlan addRoomTypesItem(RatePlanRoomType roomTypesItem) {
    if (this.roomTypes == null) {
      this.roomTypes = new LinkedHashSet<>();
    }
    this.roomTypes.add(roomTypesItem);
    return this;
  }

  /**
   * A list of room types this rate plan is bookable for.
   * @return roomTypes
   */
  @javax.annotation.Nonnull
  public Set<RatePlanRoomType> getRoomTypes() {
    return roomTypes;
  }

  public void setRoomTypes(Set<RatePlanRoomType> roomTypes) {
    this.roomTypes = roomTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatePlan ratePlan = (RatePlan) o;
    return Objects.equals(this.adjustments, ratePlan.adjustments) &&
        Objects.equals(this.components, ratePlan.components) &&
        Objects.equals(this.conditions, ratePlan.conditions) &&
        Objects.equals(this.description, ratePlan.description) &&
        Objects.equals(this.hotelId, ratePlan.hotelId) &&
        Objects.equals(this.ratePlanId, ratePlan.ratePlanId) &&
        Objects.equals(this.restrictions, ratePlan.restrictions) &&
        Objects.equals(this.roomTypes, ratePlan.roomTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustments, components, conditions, description, hotelId, ratePlanId, restrictions, roomTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatePlan {\n");
    sb.append("    adjustments: ").append(toIndentedString(adjustments)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hotelId: ").append(toIndentedString(hotelId)).append("\n");
    sb.append("    ratePlanId: ").append(toIndentedString(ratePlanId)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    roomTypes: ").append(toIndentedString(roomTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adjustments");
    openapiFields.add("components");
    openapiFields.add("conditions");
    openapiFields.add("description");
    openapiFields.add("hotelId");
    openapiFields.add("ratePlanId");
    openapiFields.add("restrictions");
    openapiFields.add("roomTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("conditions");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("hotelId");
    openapiRequiredFields.add("ratePlanId");
    openapiRequiredFields.add("restrictions");
    openapiRequiredFields.add("roomTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RatePlan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RatePlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RatePlan is not found in the empty JSON string", RatePlan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RatePlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RatePlan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RatePlan.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("adjustments") != null && !jsonObj.get("adjustments").isJsonNull()) {
        JsonArray jsonArrayadjustments = jsonObj.getAsJsonArray("adjustments");
        if (jsonArrayadjustments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("adjustments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `adjustments` to be an array in the JSON string but got `%s`", jsonObj.get("adjustments").toString()));
          }

          // validate the optional field `adjustments` (array)
          for (int i = 0; i < jsonArrayadjustments.size(); i++) {
            RateAdjustment.validateJsonElement(jsonArrayadjustments.get(i));
          };
        }
      }
      if (jsonObj.get("components") != null && !jsonObj.get("components").isJsonNull()) {
        JsonArray jsonArraycomponents = jsonObj.getAsJsonArray("components");
        if (jsonArraycomponents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("components").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `components` to be an array in the JSON string but got `%s`", jsonObj.get("components").toString()));
          }

          // validate the optional field `components` (array)
          for (int i = 0; i < jsonArraycomponents.size(); i++) {
            RateComponent.validateJsonElement(jsonArraycomponents.get(i));
          };
        }
      }
      // validate the required field `conditions`
      Conditions.validateJsonElement(jsonObj.get("conditions"));
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("hotelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotelId").toString()));
      }
      // validate the required field `restrictions`
      RatePlanRestrictions.validateJsonElement(jsonObj.get("restrictions"));
      // ensure the json data is an array
      if (!jsonObj.get("roomTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomTypes` to be an array in the JSON string but got `%s`", jsonObj.get("roomTypes").toString()));
      }

      JsonArray jsonArrayroomTypes = jsonObj.getAsJsonArray("roomTypes");
      // validate the required field `roomTypes` (array)
      for (int i = 0; i < jsonArrayroomTypes.size(); i++) {
        RatePlanRoomType.validateJsonElement(jsonArrayroomTypes.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RatePlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RatePlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RatePlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RatePlan.class));

       return (TypeAdapter<T>) new TypeAdapter<RatePlan>() {
           @Override
           public void write(JsonWriter out, RatePlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RatePlan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RatePlan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RatePlan
   * @throws IOException if the JSON string is invalid with respect to RatePlan
   */
  public static RatePlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RatePlan.class);
  }

  /**
   * Convert an instance of RatePlan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

