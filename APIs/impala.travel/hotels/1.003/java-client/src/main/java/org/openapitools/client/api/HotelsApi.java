/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.HotelFullDetail;
import org.openapitools.client.model.ListHotels200Response;
import java.util.UUID;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HotelsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HotelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HotelsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listHotels
     * @param name Allows for filtering based on the property name. Available modifiers include equal to (&#x60;eq&#x60;) or case insensitive search (&#x60;like&#x60;). Usage example: &#x60;?name[like]&#x3D;palace&#x60; (optional)
     * @param starRating Allows for filtering based on the starRating of a property. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), less than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?starRating[gt]&#x3D;3&amp;starRating[lt]&#x3D;5&#x60; (optional)
     * @param country Allows for filtering based on the country of a property. The only available modifier for this parameter is equal to (&#x60;eq&#x60;). Usage example: &#x60;?country[eq]&#x3D;GBR&#x60; (optional)
     * @param start The arrival day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @param end The departure day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @param latitude The WGS 84 latitude of the location to search around (e.g. &#x60;58.386186&#x60;). (optional)
     * @param longitude The WGS 84 longitude of the location to search around (e.g. &#x60;-9.952549&#x60;). (optional)
     * @param radius The distance (in meters) to search around the specified location (e.g. &#x60;10000&#x60; for 10 km). (optional)
     * @param hotelIds A comma-separated list of hotel ids you wish to filter by (e.g. &#x60;60a06628-2c71-44bf-9685-efbd2df4179e,60a06628-2c71-44bf-9685-efbd2df4179e&#x60;). (optional)
     * @param created Allows for filtering based on the date and time when this hotel was first added to the Impala platform, in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?created[lte]&#x3D;2020-11-04T19:37:37Z&amp;created[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param updated Allows for filtering based on the date and time the content of this hotel was last updated, in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?updated[lte]&#x3D;2020-11-04T19:37:37Z&amp;updated[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param size Number of hotels returned on a given page (pagination). (optional, default to 25)
     * @param offset Offset from the first hotel in the result (for pagination). (optional, default to 0)
     * @param sortBy Order in which the results should be sorted. Currently allows you to sort by &#x60;name&#x60; (alphabetical), star &#x60;rating&#x60;, and &#x60;distance_m&#x60; in meters from the specified latitude/longitude. Allows for a comma-separated list of of arguments with modifiers for &#x60;:asc&#x60; (ascending) and &#x60;:desc&#x60; (descending) ordering. (optional, default to createdAt:desc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of hotels. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHotelsCall(Object name, Object starRating, Object country, String start, String end, Double latitude, Double longitude, Integer radius, List<String> hotelIds, Object created, Object updated, BigDecimal size, BigDecimal offset, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hotels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(name));
        }

        if (starRating != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(starRating));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(country));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (hotelIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "hotelIds", hotelIds));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(created));
        }

        if (updated != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(updated));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key_Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHotelsValidateBeforeCall(Object name, Object starRating, Object country, String start, String end, Double latitude, Double longitude, Integer radius, List<String> hotelIds, Object created, Object updated, BigDecimal size, BigDecimal offset, String sortBy, final ApiCallback _callback) throws ApiException {
        return listHotelsCall(name, starRating, country, start, end, latitude, longitude, radius, hotelIds, created, updated, size, offset, sortBy, _callback);

    }

    /**
     * List all hotels
     * Returns a list of all hotels worldwide that can be booked through Impala.  You can **filter** the results:  * Adding &#x60;longitude&#x60;, &#x60;latitude&#x60; and a &#x60;radius&#x60; (in meters) query parameters will filter the results to hotels around this location. * Adding &#x60;start&#x60; and &#x60;end&#x60; dates (in ISO 8601 notation, e.g. &#x60;2021-12-31&#x60;) for the expected arrival and departure dates of your guests will limit the results to hotels that have at least one room bookable for this timeframe. * Adding &#x60;starRating&#x60;, &#x60;name&#x60; or &#x60;country&#x60; allows you to filter to hotels based on these values (e.g. &#x60;?starRating[gte]&#x3D;4&amp;name[like]&#x3D;palace&#x60; for hotels with a rating of 4 or up with a name containing \&quot;palace\&quot;) * Adding &#x60;hotelIds&#x60; allows you to limit the results to include only hotels with the ids listed. Its value should be a comma-separated list of hotel ids (e.g. &#x60;?hotelIds[]&#x3D;hotelIdA,hotelIdB&#x60;)  * Adding &#x60;contractable&#x60; allows you to filter to hotels that you can directly negotiate with through our [deals feature](https://docs.impala.travel/docs/booking-api/ZG9jOjcyNjgzMTA-contracting-with-hotels). (e.g &#x60;?contractable&#x3D;true&#x60; or &#x60;?contractable&#x3D;false&#x60;)  You can specify the **sorting order** in which hotels are returned: * This is done by using the &#x60;sortBy&#x60; query parameter. * Results can be sorted by &#x60;name&#x60; alphabetically, star &#x60;rating&#x60; and &#x60;distance_m&#x60; (in meters from the specified latitude/longitude location). * The parameter allows for a comma-separated list of arguments with optional &#x60;:asc&#x60; (ascending, the default if the modifier is omitted) and &#x60;:desc&#x60; (descending) modifiers.  If no hotels match your filter criteria, an empty array will be returned.
     * @param name Allows for filtering based on the property name. Available modifiers include equal to (&#x60;eq&#x60;) or case insensitive search (&#x60;like&#x60;). Usage example: &#x60;?name[like]&#x3D;palace&#x60; (optional)
     * @param starRating Allows for filtering based on the starRating of a property. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), less than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?starRating[gt]&#x3D;3&amp;starRating[lt]&#x3D;5&#x60; (optional)
     * @param country Allows for filtering based on the country of a property. The only available modifier for this parameter is equal to (&#x60;eq&#x60;). Usage example: &#x60;?country[eq]&#x3D;GBR&#x60; (optional)
     * @param start The arrival day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @param end The departure day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @param latitude The WGS 84 latitude of the location to search around (e.g. &#x60;58.386186&#x60;). (optional)
     * @param longitude The WGS 84 longitude of the location to search around (e.g. &#x60;-9.952549&#x60;). (optional)
     * @param radius The distance (in meters) to search around the specified location (e.g. &#x60;10000&#x60; for 10 km). (optional)
     * @param hotelIds A comma-separated list of hotel ids you wish to filter by (e.g. &#x60;60a06628-2c71-44bf-9685-efbd2df4179e,60a06628-2c71-44bf-9685-efbd2df4179e&#x60;). (optional)
     * @param created Allows for filtering based on the date and time when this hotel was first added to the Impala platform, in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?created[lte]&#x3D;2020-11-04T19:37:37Z&amp;created[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param updated Allows for filtering based on the date and time the content of this hotel was last updated, in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?updated[lte]&#x3D;2020-11-04T19:37:37Z&amp;updated[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param size Number of hotels returned on a given page (pagination). (optional, default to 25)
     * @param offset Offset from the first hotel in the result (for pagination). (optional, default to 0)
     * @param sortBy Order in which the results should be sorted. Currently allows you to sort by &#x60;name&#x60; (alphabetical), star &#x60;rating&#x60;, and &#x60;distance_m&#x60; in meters from the specified latitude/longitude. Allows for a comma-separated list of of arguments with modifiers for &#x60;:asc&#x60; (ascending) and &#x60;:desc&#x60; (descending) ordering. (optional, default to createdAt:desc)
     * @return ListHotels200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of hotels. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public ListHotels200Response listHotels(Object name, Object starRating, Object country, String start, String end, Double latitude, Double longitude, Integer radius, List<String> hotelIds, Object created, Object updated, BigDecimal size, BigDecimal offset, String sortBy) throws ApiException {
        ApiResponse<ListHotels200Response> localVarResp = listHotelsWithHttpInfo(name, starRating, country, start, end, latitude, longitude, radius, hotelIds, created, updated, size, offset, sortBy);
        return localVarResp.getData();
    }

    /**
     * List all hotels
     * Returns a list of all hotels worldwide that can be booked through Impala.  You can **filter** the results:  * Adding &#x60;longitude&#x60;, &#x60;latitude&#x60; and a &#x60;radius&#x60; (in meters) query parameters will filter the results to hotels around this location. * Adding &#x60;start&#x60; and &#x60;end&#x60; dates (in ISO 8601 notation, e.g. &#x60;2021-12-31&#x60;) for the expected arrival and departure dates of your guests will limit the results to hotels that have at least one room bookable for this timeframe. * Adding &#x60;starRating&#x60;, &#x60;name&#x60; or &#x60;country&#x60; allows you to filter to hotels based on these values (e.g. &#x60;?starRating[gte]&#x3D;4&amp;name[like]&#x3D;palace&#x60; for hotels with a rating of 4 or up with a name containing \&quot;palace\&quot;) * Adding &#x60;hotelIds&#x60; allows you to limit the results to include only hotels with the ids listed. Its value should be a comma-separated list of hotel ids (e.g. &#x60;?hotelIds[]&#x3D;hotelIdA,hotelIdB&#x60;)  * Adding &#x60;contractable&#x60; allows you to filter to hotels that you can directly negotiate with through our [deals feature](https://docs.impala.travel/docs/booking-api/ZG9jOjcyNjgzMTA-contracting-with-hotels). (e.g &#x60;?contractable&#x3D;true&#x60; or &#x60;?contractable&#x3D;false&#x60;)  You can specify the **sorting order** in which hotels are returned: * This is done by using the &#x60;sortBy&#x60; query parameter. * Results can be sorted by &#x60;name&#x60; alphabetically, star &#x60;rating&#x60; and &#x60;distance_m&#x60; (in meters from the specified latitude/longitude location). * The parameter allows for a comma-separated list of arguments with optional &#x60;:asc&#x60; (ascending, the default if the modifier is omitted) and &#x60;:desc&#x60; (descending) modifiers.  If no hotels match your filter criteria, an empty array will be returned.
     * @param name Allows for filtering based on the property name. Available modifiers include equal to (&#x60;eq&#x60;) or case insensitive search (&#x60;like&#x60;). Usage example: &#x60;?name[like]&#x3D;palace&#x60; (optional)
     * @param starRating Allows for filtering based on the starRating of a property. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), less than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?starRating[gt]&#x3D;3&amp;starRating[lt]&#x3D;5&#x60; (optional)
     * @param country Allows for filtering based on the country of a property. The only available modifier for this parameter is equal to (&#x60;eq&#x60;). Usage example: &#x60;?country[eq]&#x3D;GBR&#x60; (optional)
     * @param start The arrival day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @param end The departure day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @param latitude The WGS 84 latitude of the location to search around (e.g. &#x60;58.386186&#x60;). (optional)
     * @param longitude The WGS 84 longitude of the location to search around (e.g. &#x60;-9.952549&#x60;). (optional)
     * @param radius The distance (in meters) to search around the specified location (e.g. &#x60;10000&#x60; for 10 km). (optional)
     * @param hotelIds A comma-separated list of hotel ids you wish to filter by (e.g. &#x60;60a06628-2c71-44bf-9685-efbd2df4179e,60a06628-2c71-44bf-9685-efbd2df4179e&#x60;). (optional)
     * @param created Allows for filtering based on the date and time when this hotel was first added to the Impala platform, in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?created[lte]&#x3D;2020-11-04T19:37:37Z&amp;created[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param updated Allows for filtering based on the date and time the content of this hotel was last updated, in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?updated[lte]&#x3D;2020-11-04T19:37:37Z&amp;updated[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param size Number of hotels returned on a given page (pagination). (optional, default to 25)
     * @param offset Offset from the first hotel in the result (for pagination). (optional, default to 0)
     * @param sortBy Order in which the results should be sorted. Currently allows you to sort by &#x60;name&#x60; (alphabetical), star &#x60;rating&#x60;, and &#x60;distance_m&#x60; in meters from the specified latitude/longitude. Allows for a comma-separated list of of arguments with modifiers for &#x60;:asc&#x60; (ascending) and &#x60;:desc&#x60; (descending) ordering. (optional, default to createdAt:desc)
     * @return ApiResponse&lt;ListHotels200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of hotels. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListHotels200Response> listHotelsWithHttpInfo(Object name, Object starRating, Object country, String start, String end, Double latitude, Double longitude, Integer radius, List<String> hotelIds, Object created, Object updated, BigDecimal size, BigDecimal offset, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = listHotelsValidateBeforeCall(name, starRating, country, start, end, latitude, longitude, radius, hotelIds, created, updated, size, offset, sortBy, null);
        Type localVarReturnType = new TypeToken<ListHotels200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all hotels (asynchronously)
     * Returns a list of all hotels worldwide that can be booked through Impala.  You can **filter** the results:  * Adding &#x60;longitude&#x60;, &#x60;latitude&#x60; and a &#x60;radius&#x60; (in meters) query parameters will filter the results to hotels around this location. * Adding &#x60;start&#x60; and &#x60;end&#x60; dates (in ISO 8601 notation, e.g. &#x60;2021-12-31&#x60;) for the expected arrival and departure dates of your guests will limit the results to hotels that have at least one room bookable for this timeframe. * Adding &#x60;starRating&#x60;, &#x60;name&#x60; or &#x60;country&#x60; allows you to filter to hotels based on these values (e.g. &#x60;?starRating[gte]&#x3D;4&amp;name[like]&#x3D;palace&#x60; for hotels with a rating of 4 or up with a name containing \&quot;palace\&quot;) * Adding &#x60;hotelIds&#x60; allows you to limit the results to include only hotels with the ids listed. Its value should be a comma-separated list of hotel ids (e.g. &#x60;?hotelIds[]&#x3D;hotelIdA,hotelIdB&#x60;)  * Adding &#x60;contractable&#x60; allows you to filter to hotels that you can directly negotiate with through our [deals feature](https://docs.impala.travel/docs/booking-api/ZG9jOjcyNjgzMTA-contracting-with-hotels). (e.g &#x60;?contractable&#x3D;true&#x60; or &#x60;?contractable&#x3D;false&#x60;)  You can specify the **sorting order** in which hotels are returned: * This is done by using the &#x60;sortBy&#x60; query parameter. * Results can be sorted by &#x60;name&#x60; alphabetically, star &#x60;rating&#x60; and &#x60;distance_m&#x60; (in meters from the specified latitude/longitude location). * The parameter allows for a comma-separated list of arguments with optional &#x60;:asc&#x60; (ascending, the default if the modifier is omitted) and &#x60;:desc&#x60; (descending) modifiers.  If no hotels match your filter criteria, an empty array will be returned.
     * @param name Allows for filtering based on the property name. Available modifiers include equal to (&#x60;eq&#x60;) or case insensitive search (&#x60;like&#x60;). Usage example: &#x60;?name[like]&#x3D;palace&#x60; (optional)
     * @param starRating Allows for filtering based on the starRating of a property. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), less than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?starRating[gt]&#x3D;3&amp;starRating[lt]&#x3D;5&#x60; (optional)
     * @param country Allows for filtering based on the country of a property. The only available modifier for this parameter is equal to (&#x60;eq&#x60;). Usage example: &#x60;?country[eq]&#x3D;GBR&#x60; (optional)
     * @param start The arrival day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @param end The departure day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @param latitude The WGS 84 latitude of the location to search around (e.g. &#x60;58.386186&#x60;). (optional)
     * @param longitude The WGS 84 longitude of the location to search around (e.g. &#x60;-9.952549&#x60;). (optional)
     * @param radius The distance (in meters) to search around the specified location (e.g. &#x60;10000&#x60; for 10 km). (optional)
     * @param hotelIds A comma-separated list of hotel ids you wish to filter by (e.g. &#x60;60a06628-2c71-44bf-9685-efbd2df4179e,60a06628-2c71-44bf-9685-efbd2df4179e&#x60;). (optional)
     * @param created Allows for filtering based on the date and time when this hotel was first added to the Impala platform, in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?created[lte]&#x3D;2020-11-04T19:37:37Z&amp;created[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param updated Allows for filtering based on the date and time the content of this hotel was last updated, in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?updated[lte]&#x3D;2020-11-04T19:37:37Z&amp;updated[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param size Number of hotels returned on a given page (pagination). (optional, default to 25)
     * @param offset Offset from the first hotel in the result (for pagination). (optional, default to 0)
     * @param sortBy Order in which the results should be sorted. Currently allows you to sort by &#x60;name&#x60; (alphabetical), star &#x60;rating&#x60;, and &#x60;distance_m&#x60; in meters from the specified latitude/longitude. Allows for a comma-separated list of of arguments with modifiers for &#x60;:asc&#x60; (ascending) and &#x60;:desc&#x60; (descending) ordering. (optional, default to createdAt:desc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of hotels. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHotelsAsync(Object name, Object starRating, Object country, String start, String end, Double latitude, Double longitude, Integer radius, List<String> hotelIds, Object created, Object updated, BigDecimal size, BigDecimal offset, String sortBy, final ApiCallback<ListHotels200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHotelsValidateBeforeCall(name, starRating, country, start, end, latitude, longitude, radius, hotelIds, created, updated, size, offset, sortBy, _callback);
        Type localVarReturnType = new TypeToken<ListHotels200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveHotel
     * @param hotelId The unique identifier of this hotel on the Impala platform. (required)
     * @param start The arrival day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @param end The departure day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested hotel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveHotelCall(UUID hotelId, String start, String end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hotels/{hotelId}"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key_Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveHotelValidateBeforeCall(UUID hotelId, String start, String end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling retrieveHotel(Async)");
        }

        return retrieveHotelCall(hotelId, start, end, _callback);

    }

    /**
     * Retrieve a hotel
     * Returns the full content, room types and rates for the specified hotel.  When querying the hotels API you can query with or without dates. Where querying with dates requires providing valid values for the &#x60;start&#x60; and &#x60;end&#x60; parameters. Requests without these values will be considered a query without dates.  **Querying without dates:**  When you query without dates, the search result will include all properties that match your request. Including all content that is associated with those properties. However you will find that the &#x60;rates&#x60; attribute for each room will always be empty.  **Querying with dates:**  When you query with dates, the search result will include all properties that match your request, including all content that is associated with those properties. Rooms which do not have available prices for the provided dates will appear with an empty &#x60;rates&#x60; array.  For rooms where there are available prices the &#x60;rates&#x60; array will include both the public rates of the hotel, along with prices that come from deals in which you are participating. This would include private deals which you have negotiated with a hotel, along with Impala deals which you have been verified for.  Using the &#x60;rateId&#x60; of any of those rates, you can use the [Create a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings/post) endpoint to make a booking.
     * @param hotelId The unique identifier of this hotel on the Impala platform. (required)
     * @param start The arrival day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @param end The departure day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @return HotelFullDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested hotel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public HotelFullDetail retrieveHotel(UUID hotelId, String start, String end) throws ApiException {
        ApiResponse<HotelFullDetail> localVarResp = retrieveHotelWithHttpInfo(hotelId, start, end);
        return localVarResp.getData();
    }

    /**
     * Retrieve a hotel
     * Returns the full content, room types and rates for the specified hotel.  When querying the hotels API you can query with or without dates. Where querying with dates requires providing valid values for the &#x60;start&#x60; and &#x60;end&#x60; parameters. Requests without these values will be considered a query without dates.  **Querying without dates:**  When you query without dates, the search result will include all properties that match your request. Including all content that is associated with those properties. However you will find that the &#x60;rates&#x60; attribute for each room will always be empty.  **Querying with dates:**  When you query with dates, the search result will include all properties that match your request, including all content that is associated with those properties. Rooms which do not have available prices for the provided dates will appear with an empty &#x60;rates&#x60; array.  For rooms where there are available prices the &#x60;rates&#x60; array will include both the public rates of the hotel, along with prices that come from deals in which you are participating. This would include private deals which you have negotiated with a hotel, along with Impala deals which you have been verified for.  Using the &#x60;rateId&#x60; of any of those rates, you can use the [Create a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings/post) endpoint to make a booking.
     * @param hotelId The unique identifier of this hotel on the Impala platform. (required)
     * @param start The arrival day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @param end The departure day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @return ApiResponse&lt;HotelFullDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested hotel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HotelFullDetail> retrieveHotelWithHttpInfo(UUID hotelId, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = retrieveHotelValidateBeforeCall(hotelId, start, end, null);
        Type localVarReturnType = new TypeToken<HotelFullDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a hotel (asynchronously)
     * Returns the full content, room types and rates for the specified hotel.  When querying the hotels API you can query with or without dates. Where querying with dates requires providing valid values for the &#x60;start&#x60; and &#x60;end&#x60; parameters. Requests without these values will be considered a query without dates.  **Querying without dates:**  When you query without dates, the search result will include all properties that match your request. Including all content that is associated with those properties. However you will find that the &#x60;rates&#x60; attribute for each room will always be empty.  **Querying with dates:**  When you query with dates, the search result will include all properties that match your request, including all content that is associated with those properties. Rooms which do not have available prices for the provided dates will appear with an empty &#x60;rates&#x60; array.  For rooms where there are available prices the &#x60;rates&#x60; array will include both the public rates of the hotel, along with prices that come from deals in which you are participating. This would include private deals which you have negotiated with a hotel, along with Impala deals which you have been verified for.  Using the &#x60;rateId&#x60; of any of those rates, you can use the [Create a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings/post) endpoint to make a booking.
     * @param hotelId The unique identifier of this hotel on the Impala platform. (required)
     * @param start The arrival day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @param end The departure day of the desired stay range in ISO 8601 format (&#x60;YYYY-MM-DD&#x60;). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested hotel. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveHotelAsync(UUID hotelId, String start, String end, final ApiCallback<HotelFullDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveHotelValidateBeforeCall(hotelId, start, end, _callback);
        Type localVarReturnType = new TypeToken<HotelFullDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
