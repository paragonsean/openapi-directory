/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TaxOrFee;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Breakdown of taxes (e.g. VAT, city tax) and fees (e.g. cleaning or resort fees).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:34.305979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BookedRateRetailRateTaxesAndFees {
  public static final String SERIALIZED_NAME_INCLUDED_IN_RATE = "includedInRate";
  @SerializedName(SERIALIZED_NAME_INCLUDED_IN_RATE)
  private List<TaxOrFee> includedInRate = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAY_AT_HOTEL = "payAtHotel";
  @SerializedName(SERIALIZED_NAME_PAY_AT_HOTEL)
  private List<TaxOrFee> payAtHotel = new ArrayList<>();

  public BookedRateRetailRateTaxesAndFees() {
  }

  public BookedRateRetailRateTaxesAndFees includedInRate(List<TaxOrFee> includedInRate) {
    this.includedInRate = includedInRate;
    return this;
  }

  public BookedRateRetailRateTaxesAndFees addIncludedInRateItem(TaxOrFee includedInRateItem) {
    if (this.includedInRate == null) {
      this.includedInRate = new ArrayList<>();
    }
    this.includedInRate.add(includedInRateItem);
    return this;
  }

  /**
   * Taxes and fees that are included in the &#x60;retailRate.total&#x60; price paid at the time of booking.
   * @return includedInRate
   */
  @javax.annotation.Nullable
  public List<TaxOrFee> getIncludedInRate() {
    return includedInRate;
  }

  public void setIncludedInRate(List<TaxOrFee> includedInRate) {
    this.includedInRate = includedInRate;
  }


  public BookedRateRetailRateTaxesAndFees payAtHotel(List<TaxOrFee> payAtHotel) {
    this.payAtHotel = payAtHotel;
    return this;
  }

  public BookedRateRetailRateTaxesAndFees addPayAtHotelItem(TaxOrFee payAtHotelItem) {
    if (this.payAtHotel == null) {
      this.payAtHotel = new ArrayList<>();
    }
    this.payAtHotel.add(payAtHotelItem);
    return this;
  }

  /**
   * Taxes and fees that need to be payed at the hotel (often upon arrival or departure). This frequently happens for fees that only need to be collected based on certain conditions (e.g. a guest coming from abroad or being older than a certain age).
   * @return payAtHotel
   */
  @javax.annotation.Nullable
  public List<TaxOrFee> getPayAtHotel() {
    return payAtHotel;
  }

  public void setPayAtHotel(List<TaxOrFee> payAtHotel) {
    this.payAtHotel = payAtHotel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BookedRateRetailRateTaxesAndFees bookedRateRetailRateTaxesAndFees = (BookedRateRetailRateTaxesAndFees) o;
    return Objects.equals(this.includedInRate, bookedRateRetailRateTaxesAndFees.includedInRate) &&
        Objects.equals(this.payAtHotel, bookedRateRetailRateTaxesAndFees.payAtHotel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includedInRate, payAtHotel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BookedRateRetailRateTaxesAndFees {\n");
    sb.append("    includedInRate: ").append(toIndentedString(includedInRate)).append("\n");
    sb.append("    payAtHotel: ").append(toIndentedString(payAtHotel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("includedInRate");
    openapiFields.add("payAtHotel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BookedRateRetailRateTaxesAndFees
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BookedRateRetailRateTaxesAndFees.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BookedRateRetailRateTaxesAndFees is not found in the empty JSON string", BookedRateRetailRateTaxesAndFees.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BookedRateRetailRateTaxesAndFees.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BookedRateRetailRateTaxesAndFees` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("includedInRate") != null && !jsonObj.get("includedInRate").isJsonNull()) {
        JsonArray jsonArrayincludedInRate = jsonObj.getAsJsonArray("includedInRate");
        if (jsonArrayincludedInRate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("includedInRate").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `includedInRate` to be an array in the JSON string but got `%s`", jsonObj.get("includedInRate").toString()));
          }

          // validate the optional field `includedInRate` (array)
          for (int i = 0; i < jsonArrayincludedInRate.size(); i++) {
            TaxOrFee.validateJsonElement(jsonArrayincludedInRate.get(i));
          };
        }
      }
      if (jsonObj.get("payAtHotel") != null && !jsonObj.get("payAtHotel").isJsonNull()) {
        JsonArray jsonArraypayAtHotel = jsonObj.getAsJsonArray("payAtHotel");
        if (jsonArraypayAtHotel != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payAtHotel").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payAtHotel` to be an array in the JSON string but got `%s`", jsonObj.get("payAtHotel").toString()));
          }

          // validate the optional field `payAtHotel` (array)
          for (int i = 0; i < jsonArraypayAtHotel.size(); i++) {
            TaxOrFee.validateJsonElement(jsonArraypayAtHotel.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BookedRateRetailRateTaxesAndFees.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BookedRateRetailRateTaxesAndFees' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BookedRateRetailRateTaxesAndFees> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BookedRateRetailRateTaxesAndFees.class));

       return (TypeAdapter<T>) new TypeAdapter<BookedRateRetailRateTaxesAndFees>() {
           @Override
           public void write(JsonWriter out, BookedRateRetailRateTaxesAndFees value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BookedRateRetailRateTaxesAndFees read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BookedRateRetailRateTaxesAndFees given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BookedRateRetailRateTaxesAndFees
   * @throws IOException if the JSON string is invalid with respect to BookedRateRetailRateTaxesAndFees
   */
  public static BookedRateRetailRateTaxesAndFees fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BookedRateRetailRateTaxesAndFees.class);
  }

  /**
   * Convert an instance of BookedRateRetailRateTaxesAndFees to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

