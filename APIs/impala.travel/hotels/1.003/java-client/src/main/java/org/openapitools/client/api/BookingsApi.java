/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Booking;
import org.openapitools.client.model.BookingRequest;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.ListBookings200Response;
import org.openapitools.client.model.UpdateBookingContactRequest;
import org.openapitools.client.model.UpdateBookingRequest;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BookingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BookingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BookingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelBooking
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the cancelled booking. This includes the &#x60;cancellation.fee&#x60; object with details on the fee for this cancellation (most frequently this means either a zero fee, so the booking is fully refundable, or the full amount of the stay is due as a fee, meaning the booking was non-refundable). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> This booking can&#39;t be cancelled. This most frequently happens when you&#39;re trying to cancel a booking that has already started. Impala allows you to handle booking management up to a guest&#39;s arrival. Once the guest is staying or due arrival, please contact the hotel directly for questions around their current stay. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelBookingCall(String bookingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bookings/{bookingId}"
            .replace("{" + "bookingId" + "}", localVarApiClient.escapeString(bookingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key_Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelBookingValidateBeforeCall(String bookingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bookingId' is set
        if (bookingId == null) {
            throw new ApiException("Missing the required parameter 'bookingId' when calling cancelBooking(Async)");
        }

        return cancelBookingCall(bookingId, _callback);

    }

    /**
     * Cancel a booking
     * &lt;!-- theme: danger --&gt;  &gt; Cancels the specified booking with immediate effect. This action might result in a cancellation charge being charged.  Submitting this request means we&#39;ll notify the hotel of the cancellation and that they won&#39;t expect your guest.  You can use &#x60;GET /bookings/{bookingId}&#x60;to see the cancellation policies that apply to a booking at a given point in time. Please note that cancelling a booking will incur a cancellation fee according to the rules that apply at the time of cancellation. You can find the cancellation fee that has been charged in the response of this call in the &#x60;cancellation.fee&#x60; object.  If the booking you cancelled allows for a partial or full refund, we&#39;ll credit your Impala balance with the amount we charged you as the seller of this booking â€“ meaning we&#39;ll deduct the amount the next time we&#39;re requesting payment for the sum of all the bookings you made.
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @return Booking
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the cancelled booking. This includes the &#x60;cancellation.fee&#x60; object with details on the fee for this cancellation (most frequently this means either a zero fee, so the booking is fully refundable, or the full amount of the stay is due as a fee, meaning the booking was non-refundable). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> This booking can&#39;t be cancelled. This most frequently happens when you&#39;re trying to cancel a booking that has already started. Impala allows you to handle booking management up to a guest&#39;s arrival. Once the guest is staying or due arrival, please contact the hotel directly for questions around their current stay. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public Booking cancelBooking(String bookingId) throws ApiException {
        ApiResponse<Booking> localVarResp = cancelBookingWithHttpInfo(bookingId);
        return localVarResp.getData();
    }

    /**
     * Cancel a booking
     * &lt;!-- theme: danger --&gt;  &gt; Cancels the specified booking with immediate effect. This action might result in a cancellation charge being charged.  Submitting this request means we&#39;ll notify the hotel of the cancellation and that they won&#39;t expect your guest.  You can use &#x60;GET /bookings/{bookingId}&#x60;to see the cancellation policies that apply to a booking at a given point in time. Please note that cancelling a booking will incur a cancellation fee according to the rules that apply at the time of cancellation. You can find the cancellation fee that has been charged in the response of this call in the &#x60;cancellation.fee&#x60; object.  If the booking you cancelled allows for a partial or full refund, we&#39;ll credit your Impala balance with the amount we charged you as the seller of this booking â€“ meaning we&#39;ll deduct the amount the next time we&#39;re requesting payment for the sum of all the bookings you made.
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @return ApiResponse&lt;Booking&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the cancelled booking. This includes the &#x60;cancellation.fee&#x60; object with details on the fee for this cancellation (most frequently this means either a zero fee, so the booking is fully refundable, or the full amount of the stay is due as a fee, meaning the booking was non-refundable). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> This booking can&#39;t be cancelled. This most frequently happens when you&#39;re trying to cancel a booking that has already started. Impala allows you to handle booking management up to a guest&#39;s arrival. Once the guest is staying or due arrival, please contact the hotel directly for questions around their current stay. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Booking> cancelBookingWithHttpInfo(String bookingId) throws ApiException {
        okhttp3.Call localVarCall = cancelBookingValidateBeforeCall(bookingId, null);
        Type localVarReturnType = new TypeToken<Booking>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a booking (asynchronously)
     * &lt;!-- theme: danger --&gt;  &gt; Cancels the specified booking with immediate effect. This action might result in a cancellation charge being charged.  Submitting this request means we&#39;ll notify the hotel of the cancellation and that they won&#39;t expect your guest.  You can use &#x60;GET /bookings/{bookingId}&#x60;to see the cancellation policies that apply to a booking at a given point in time. Please note that cancelling a booking will incur a cancellation fee according to the rules that apply at the time of cancellation. You can find the cancellation fee that has been charged in the response of this call in the &#x60;cancellation.fee&#x60; object.  If the booking you cancelled allows for a partial or full refund, we&#39;ll credit your Impala balance with the amount we charged you as the seller of this booking â€“ meaning we&#39;ll deduct the amount the next time we&#39;re requesting payment for the sum of all the bookings you made.
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the cancelled booking. This includes the &#x60;cancellation.fee&#x60; object with details on the fee for this cancellation (most frequently this means either a zero fee, so the booking is fully refundable, or the full amount of the stay is due as a fee, meaning the booking was non-refundable). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> This booking can&#39;t be cancelled. This most frequently happens when you&#39;re trying to cancel a booking that has already started. Impala allows you to handle booking management up to a guest&#39;s arrival. Once the guest is staying or due arrival, please contact the hotel directly for questions around their current stay. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelBookingAsync(String bookingId, final ApiCallback<Booking> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelBookingValidateBeforeCall(bookingId, _callback);
        Type localVarReturnType = new TypeToken<Booking>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBooking
     * @param bookingRequest Specifies the room you want to book for your guest. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> We&#39;ve created the booking and are returning some of its details in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to use this service. Please contact support@impala.travel to gain access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBookingCall(BookingRequest bookingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bookingRequest;

        // create path and map variables
        String localVarPath = "/bookings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key_Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBookingValidateBeforeCall(BookingRequest bookingRequest, final ApiCallback _callback) throws ApiException {
        return createBookingCall(bookingRequest, _callback);

    }

    /**
     * Create a booking
     * Creates a booking for for the rate and dates you specify in the request body.  You&#39;ll need a &#x60;roomTypes[].rates[].rateId&#x60; that&#39;s bookable for those dates, which you can find using the [Retrieve a hotel](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels~1%7BhotelId%7D/get) endpoint.  If you have provided a credit card on the dashboard then **Impala will send the booking to the hotel immediately**. We&#39;ll ensure payment is taken care of before your guest arrives at the hotel.  * Your guest needs to be **paying you** the rate specified in &#x60;retailRate&#x60; (as listed in the [Retrieve a hotel](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels~1%7BhotelId%7D/get) response) before you submit this request. * Once your request is received and the booking is confirmed, **Impala will charge you** as the seller this &#x60;retailRate&#x60; minus the &#x60;sellerCommissionPercentage&#x60; (which is the affiliate commission you get to keep). We&#39;ll use the business credit card you&#39;ve added to your account as payment method for this. * The difference between the amount you charge your guest (&#x60;retailRate&#x60;, e.g. 200 â‚¬) and what Impala charges you (&#x60;retailRate&#x60; minus &#x60;sellerCommissionPercentage&#x60;, e.g. 200 â‚¬) is your commission (in this example: 20 â‚¬) to keep.  You can find more information on how money flows between your guest and you, and you and Impala, [in this article](https://impala.stoplight.io/docs/booking-api/branches/v1.003/docs/good-to-know/payments-and-commissions.md)  &lt;!-- theme: warning --&gt;  &gt; **This request might take up to 20 seconds to load.** While we work to return a response to your request within milliseconds in most cases, some bookings require us to re-verify current pricing in real-time and doing so might take up to 20 seconds. Please make sure your app handles this waiting state appropriately.
     * @param bookingRequest Specifies the room you want to book for your guest. (optional)
     * @return Booking
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> We&#39;ve created the booking and are returning some of its details in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to use this service. Please contact support@impala.travel to gain access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public Booking createBooking(BookingRequest bookingRequest) throws ApiException {
        ApiResponse<Booking> localVarResp = createBookingWithHttpInfo(bookingRequest);
        return localVarResp.getData();
    }

    /**
     * Create a booking
     * Creates a booking for for the rate and dates you specify in the request body.  You&#39;ll need a &#x60;roomTypes[].rates[].rateId&#x60; that&#39;s bookable for those dates, which you can find using the [Retrieve a hotel](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels~1%7BhotelId%7D/get) endpoint.  If you have provided a credit card on the dashboard then **Impala will send the booking to the hotel immediately**. We&#39;ll ensure payment is taken care of before your guest arrives at the hotel.  * Your guest needs to be **paying you** the rate specified in &#x60;retailRate&#x60; (as listed in the [Retrieve a hotel](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels~1%7BhotelId%7D/get) response) before you submit this request. * Once your request is received and the booking is confirmed, **Impala will charge you** as the seller this &#x60;retailRate&#x60; minus the &#x60;sellerCommissionPercentage&#x60; (which is the affiliate commission you get to keep). We&#39;ll use the business credit card you&#39;ve added to your account as payment method for this. * The difference between the amount you charge your guest (&#x60;retailRate&#x60;, e.g. 200 â‚¬) and what Impala charges you (&#x60;retailRate&#x60; minus &#x60;sellerCommissionPercentage&#x60;, e.g. 200 â‚¬) is your commission (in this example: 20 â‚¬) to keep.  You can find more information on how money flows between your guest and you, and you and Impala, [in this article](https://impala.stoplight.io/docs/booking-api/branches/v1.003/docs/good-to-know/payments-and-commissions.md)  &lt;!-- theme: warning --&gt;  &gt; **This request might take up to 20 seconds to load.** While we work to return a response to your request within milliseconds in most cases, some bookings require us to re-verify current pricing in real-time and doing so might take up to 20 seconds. Please make sure your app handles this waiting state appropriately.
     * @param bookingRequest Specifies the room you want to book for your guest. (optional)
     * @return ApiResponse&lt;Booking&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> We&#39;ve created the booking and are returning some of its details in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to use this service. Please contact support@impala.travel to gain access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Booking> createBookingWithHttpInfo(BookingRequest bookingRequest) throws ApiException {
        okhttp3.Call localVarCall = createBookingValidateBeforeCall(bookingRequest, null);
        Type localVarReturnType = new TypeToken<Booking>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a booking (asynchronously)
     * Creates a booking for for the rate and dates you specify in the request body.  You&#39;ll need a &#x60;roomTypes[].rates[].rateId&#x60; that&#39;s bookable for those dates, which you can find using the [Retrieve a hotel](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels~1%7BhotelId%7D/get) endpoint.  If you have provided a credit card on the dashboard then **Impala will send the booking to the hotel immediately**. We&#39;ll ensure payment is taken care of before your guest arrives at the hotel.  * Your guest needs to be **paying you** the rate specified in &#x60;retailRate&#x60; (as listed in the [Retrieve a hotel](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels~1%7BhotelId%7D/get) response) before you submit this request. * Once your request is received and the booking is confirmed, **Impala will charge you** as the seller this &#x60;retailRate&#x60; minus the &#x60;sellerCommissionPercentage&#x60; (which is the affiliate commission you get to keep). We&#39;ll use the business credit card you&#39;ve added to your account as payment method for this. * The difference between the amount you charge your guest (&#x60;retailRate&#x60;, e.g. 200 â‚¬) and what Impala charges you (&#x60;retailRate&#x60; minus &#x60;sellerCommissionPercentage&#x60;, e.g. 200 â‚¬) is your commission (in this example: 20 â‚¬) to keep.  You can find more information on how money flows between your guest and you, and you and Impala, [in this article](https://impala.stoplight.io/docs/booking-api/branches/v1.003/docs/good-to-know/payments-and-commissions.md)  &lt;!-- theme: warning --&gt;  &gt; **This request might take up to 20 seconds to load.** While we work to return a response to your request within milliseconds in most cases, some bookings require us to re-verify current pricing in real-time and doing so might take up to 20 seconds. Please make sure your app handles this waiting state appropriately.
     * @param bookingRequest Specifies the room you want to book for your guest. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> We&#39;ve created the booking and are returning some of its details in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You are not authorized to use this service. Please contact support@impala.travel to gain access. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBookingAsync(BookingRequest bookingRequest, final ApiCallback<Booking> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBookingValidateBeforeCall(bookingRequest, _callback);
        Type localVarReturnType = new TypeToken<Booking>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBookings
     * @param start Allows for filtering based on arrival date of the booking in ISO 8601 format (e.g. &#x60;2021-12-01&#x60;). Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?start[lte]&#x3D;2021-12-20&amp;start[gte]&#x3D;2021-12-10&#x60; (optional)
     * @param end Allows for filtering based on departure date of the booking in ISO 8601 format (e.g. &#x60;2021-12-01&#x60;). Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?end[lte]&#x3D;2021-12-25&amp;end[gte]&#x3D;2021-12-15&#x60; (optional)
     * @param created Allows for filtering based on creation date and time of the booking in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?created[lte]&#x3D;2020-11-04T19:37:37Z&amp;created[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param updated Allows for filtering based on the date and time the booking was last updated, in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?updated[lte]&#x3D;2020-11-04T19:37:37Z&amp;updated[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param size Pagination size. Defaults to 100 if omitted. (optional, default to 100)
     * @param offset Pagination offset. Defaults to 0 if omitted. (optional, default to 0)
     * @param sortBy Order in which the results should be sorted. Currently allows you to sort by &#x60;createdAt&#x60; and &#x60;updatedAt&#x60;. Specify multiple paramaters by separating with commas (optional, default to createdAt:asc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of bookings (filtered based on your query parameters). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBookingsCall(Object start, Object end, Object created, Object updated, BigDecimal size, BigDecimal offset, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bookings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(end));
        }

        if (created != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(created));
        }

        if (updated != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(updated));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key_Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBookingsValidateBeforeCall(Object start, Object end, Object created, Object updated, BigDecimal size, BigDecimal offset, String sortBy, final ApiCallback _callback) throws ApiException {
        return listBookingsCall(start, end, created, updated, size, offset, sortBy, _callback);

    }

    /**
     * List all bookings
     * Returns a list of all the bookings you&#39;ve made.  You can filter the list based on when bookings were created or last updated, as well as their arrival (&#x60;start&#x60;) and departure (&#x60;end&#x60;). These date-based filters allow to narrow down the result with modifiers for less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;).  Example: Adding the query parameters &#x60;start[gt]&#x3D;2021-05-20&amp;updated[lte]&#x3D;2020-11-20T11:11:00.000Z&#x60; would return bookings arriving after May 20th, 2020 that were updated before or on November 20th, 2020 at 11:11 am UTC.  You can specify the **sorting order** in which bookings are returned: * This is done by using the &#x60;sortBy&#x60; query parameter. * Results can be sorted by &#x60;createdAt&#x60; and &#x60;updatedAt&#x60; * The parameter allows for a comma-separated list of arguments with &#x60;:asc&#x60; (ascending, the default if no sorting is specified) and &#x60;:desc&#x60; (descending) modifiers.
     * @param start Allows for filtering based on arrival date of the booking in ISO 8601 format (e.g. &#x60;2021-12-01&#x60;). Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?start[lte]&#x3D;2021-12-20&amp;start[gte]&#x3D;2021-12-10&#x60; (optional)
     * @param end Allows for filtering based on departure date of the booking in ISO 8601 format (e.g. &#x60;2021-12-01&#x60;). Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?end[lte]&#x3D;2021-12-25&amp;end[gte]&#x3D;2021-12-15&#x60; (optional)
     * @param created Allows for filtering based on creation date and time of the booking in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?created[lte]&#x3D;2020-11-04T19:37:37Z&amp;created[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param updated Allows for filtering based on the date and time the booking was last updated, in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?updated[lte]&#x3D;2020-11-04T19:37:37Z&amp;updated[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param size Pagination size. Defaults to 100 if omitted. (optional, default to 100)
     * @param offset Pagination offset. Defaults to 0 if omitted. (optional, default to 0)
     * @param sortBy Order in which the results should be sorted. Currently allows you to sort by &#x60;createdAt&#x60; and &#x60;updatedAt&#x60;. Specify multiple paramaters by separating with commas (optional, default to createdAt:asc)
     * @return ListBookings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of bookings (filtered based on your query parameters). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public ListBookings200Response listBookings(Object start, Object end, Object created, Object updated, BigDecimal size, BigDecimal offset, String sortBy) throws ApiException {
        ApiResponse<ListBookings200Response> localVarResp = listBookingsWithHttpInfo(start, end, created, updated, size, offset, sortBy);
        return localVarResp.getData();
    }

    /**
     * List all bookings
     * Returns a list of all the bookings you&#39;ve made.  You can filter the list based on when bookings were created or last updated, as well as their arrival (&#x60;start&#x60;) and departure (&#x60;end&#x60;). These date-based filters allow to narrow down the result with modifiers for less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;).  Example: Adding the query parameters &#x60;start[gt]&#x3D;2021-05-20&amp;updated[lte]&#x3D;2020-11-20T11:11:00.000Z&#x60; would return bookings arriving after May 20th, 2020 that were updated before or on November 20th, 2020 at 11:11 am UTC.  You can specify the **sorting order** in which bookings are returned: * This is done by using the &#x60;sortBy&#x60; query parameter. * Results can be sorted by &#x60;createdAt&#x60; and &#x60;updatedAt&#x60; * The parameter allows for a comma-separated list of arguments with &#x60;:asc&#x60; (ascending, the default if no sorting is specified) and &#x60;:desc&#x60; (descending) modifiers.
     * @param start Allows for filtering based on arrival date of the booking in ISO 8601 format (e.g. &#x60;2021-12-01&#x60;). Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?start[lte]&#x3D;2021-12-20&amp;start[gte]&#x3D;2021-12-10&#x60; (optional)
     * @param end Allows for filtering based on departure date of the booking in ISO 8601 format (e.g. &#x60;2021-12-01&#x60;). Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?end[lte]&#x3D;2021-12-25&amp;end[gte]&#x3D;2021-12-15&#x60; (optional)
     * @param created Allows for filtering based on creation date and time of the booking in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?created[lte]&#x3D;2020-11-04T19:37:37Z&amp;created[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param updated Allows for filtering based on the date and time the booking was last updated, in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?updated[lte]&#x3D;2020-11-04T19:37:37Z&amp;updated[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param size Pagination size. Defaults to 100 if omitted. (optional, default to 100)
     * @param offset Pagination offset. Defaults to 0 if omitted. (optional, default to 0)
     * @param sortBy Order in which the results should be sorted. Currently allows you to sort by &#x60;createdAt&#x60; and &#x60;updatedAt&#x60;. Specify multiple paramaters by separating with commas (optional, default to createdAt:asc)
     * @return ApiResponse&lt;ListBookings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of bookings (filtered based on your query parameters). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBookings200Response> listBookingsWithHttpInfo(Object start, Object end, Object created, Object updated, BigDecimal size, BigDecimal offset, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = listBookingsValidateBeforeCall(start, end, created, updated, size, offset, sortBy, null);
        Type localVarReturnType = new TypeToken<ListBookings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all bookings (asynchronously)
     * Returns a list of all the bookings you&#39;ve made.  You can filter the list based on when bookings were created or last updated, as well as their arrival (&#x60;start&#x60;) and departure (&#x60;end&#x60;). These date-based filters allow to narrow down the result with modifiers for less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;).  Example: Adding the query parameters &#x60;start[gt]&#x3D;2021-05-20&amp;updated[lte]&#x3D;2020-11-20T11:11:00.000Z&#x60; would return bookings arriving after May 20th, 2020 that were updated before or on November 20th, 2020 at 11:11 am UTC.  You can specify the **sorting order** in which bookings are returned: * This is done by using the &#x60;sortBy&#x60; query parameter. * Results can be sorted by &#x60;createdAt&#x60; and &#x60;updatedAt&#x60; * The parameter allows for a comma-separated list of arguments with &#x60;:asc&#x60; (ascending, the default if no sorting is specified) and &#x60;:desc&#x60; (descending) modifiers.
     * @param start Allows for filtering based on arrival date of the booking in ISO 8601 format (e.g. &#x60;2021-12-01&#x60;). Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?start[lte]&#x3D;2021-12-20&amp;start[gte]&#x3D;2021-12-10&#x60; (optional)
     * @param end Allows for filtering based on departure date of the booking in ISO 8601 format (e.g. &#x60;2021-12-01&#x60;). Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?end[lte]&#x3D;2021-12-25&amp;end[gte]&#x3D;2021-12-15&#x60; (optional)
     * @param created Allows for filtering based on creation date and time of the booking in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?created[lte]&#x3D;2020-11-04T19:37:37Z&amp;created[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param updated Allows for filtering based on the date and time the booking was last updated, in ISO 8601 format (e.g. &#x60;2020-11-04T17:37:37Z&#x60;) and UTC timezone. Available modifiers include less than (&#x60;lt&#x60;), greater than (&#x60;gt&#x60;), lower than or equal to (&#x60;lte&#x60;), greater than or equal to (&#x60;gte&#x60;) and equal to (&#x60;eq&#x60;). Usage example: &#x60;?updated[lte]&#x3D;2020-11-04T19:37:37Z&amp;updated[gte]&#x3D;2020-11-04T15:56:37.000Z&#x60; (optional)
     * @param size Pagination size. Defaults to 100 if omitted. (optional, default to 100)
     * @param offset Pagination offset. Defaults to 0 if omitted. (optional, default to 0)
     * @param sortBy Order in which the results should be sorted. Currently allows you to sort by &#x60;createdAt&#x60; and &#x60;updatedAt&#x60;. Specify multiple paramaters by separating with commas (optional, default to createdAt:asc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paginated list of bookings (filtered based on your query parameters). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBookingsAsync(Object start, Object end, Object created, Object updated, BigDecimal size, BigDecimal offset, String sortBy, final ApiCallback<ListBookings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBookingsValidateBeforeCall(start, end, created, updated, size, offset, sortBy, _callback);
        Type localVarReturnType = new TypeToken<ListBookings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveBooking
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested booking. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> You&#39;ve likely requested a booking that doesn&#39;t exist. This might be because of a typo in the booking ID. Impala booking IDs start with &#x60;IM-&#x60; for real-life bookings and &#x60;SANDBOX-&#x60; for all bookings created in our sandbox environment (e.g. &#x60;/bookings/IM-0576-00000601&#x60;). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveBookingCall(String bookingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bookings/{bookingId}"
            .replace("{" + "bookingId" + "}", localVarApiClient.escapeString(bookingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key_Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveBookingValidateBeforeCall(String bookingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bookingId' is set
        if (bookingId == null) {
            throw new ApiException("Missing the required parameter 'bookingId' when calling retrieveBooking(Async)");
        }

        return retrieveBookingCall(bookingId, _callback);

    }

    /**
     * Retrieve a booking
     * Returns all details for the specified booking.
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @return Booking
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested booking. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> You&#39;ve likely requested a booking that doesn&#39;t exist. This might be because of a typo in the booking ID. Impala booking IDs start with &#x60;IM-&#x60; for real-life bookings and &#x60;SANDBOX-&#x60; for all bookings created in our sandbox environment (e.g. &#x60;/bookings/IM-0576-00000601&#x60;). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public Booking retrieveBooking(String bookingId) throws ApiException {
        ApiResponse<Booking> localVarResp = retrieveBookingWithHttpInfo(bookingId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a booking
     * Returns all details for the specified booking.
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @return ApiResponse&lt;Booking&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested booking. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> You&#39;ve likely requested a booking that doesn&#39;t exist. This might be because of a typo in the booking ID. Impala booking IDs start with &#x60;IM-&#x60; for real-life bookings and &#x60;SANDBOX-&#x60; for all bookings created in our sandbox environment (e.g. &#x60;/bookings/IM-0576-00000601&#x60;). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Booking> retrieveBookingWithHttpInfo(String bookingId) throws ApiException {
        okhttp3.Call localVarCall = retrieveBookingValidateBeforeCall(bookingId, null);
        Type localVarReturnType = new TypeToken<Booking>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a booking (asynchronously)
     * Returns all details for the specified booking.
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the requested booking. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> You&#39;ve likely requested a booking that doesn&#39;t exist. This might be because of a typo in the booking ID. Impala booking IDs start with &#x60;IM-&#x60; for real-life bookings and &#x60;SANDBOX-&#x60; for all bookings created in our sandbox environment (e.g. &#x60;/bookings/IM-0576-00000601&#x60;). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveBookingAsync(String bookingId, final ApiCallback<Booking> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveBookingValidateBeforeCall(bookingId, _callback);
        Type localVarReturnType = new TypeToken<Booking>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBooking
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @param updateBookingRequest Specifies the room you want to book for your guest. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> We&#39;ve submitted the change to the hotel and are returning some of its details in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was invalid or wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBookingCall(String bookingId, UpdateBookingRequest updateBookingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateBookingRequest;

        // create path and map variables
        String localVarPath = "/bookings/{bookingId}"
            .replace("{" + "bookingId" + "}", localVarApiClient.escapeString(bookingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key_Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBookingValidateBeforeCall(String bookingId, UpdateBookingRequest updateBookingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bookingId' is set
        if (bookingId == null) {
            throw new ApiException("Missing the required parameter 'bookingId' when calling updateBooking(Async)");
        }

        return updateBookingCall(bookingId, updateBookingRequest, _callback);

    }

    /**
     * Change a booking
     * &lt;!-- theme: danger --&gt;  &gt; Updates the specified booking with immediate effect. This action might result in a cancellation charge being charged.  &gt; Please note that if you wish to change the contact details associated with a booking, you should use the [Change a Booking&#39;s Contact Details](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D~1booking-contact/put) endpoint.  Changes / updates a confirmed booking with the details you provide in the request body.  When your guest needs to change their booking, you can use this endpoint to change any of the details you initially supplied when you [made their booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings/post), e.g. you&#39;ll need to query for availability and use the &#x60;roomTypes[].rates[].rateId&#x60; that are available currently for their new stay dates. Any new rates selected must be for the same hotel as the original booking.  A booking cannot be updated on or after the check in day of the original or new stay.  In addition, we require you do supply a &#x60;updateBookingVersionAtTimestamp&#x60; field with the &#x60;updatedAt&#x60; timestamp of the booking. You can find this value by looking up the booking via the [Retrieve a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D/get) endpoint. This is to avoid race conditions where another update might have happened since the last time you have checked for the current details of this booking.  The &#x60;status&#x60; of this booking will switch back to &#x60;PENDING&#x60; until we have submitted and confirmed the new details with the hotel.  &lt;!-- theme: warning --&gt;  &gt; **This request might take up to 20 seconds to load.** While we work to return a response to your request within milliseconds in most cases, some bookings require us to re-verify current pricing in real-time and doing so might take up to 20 seconds. Please make sure your app handles this waiting state appropriately.
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @param updateBookingRequest Specifies the room you want to book for your guest. (optional)
     * @return Booking
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> We&#39;ve submitted the change to the hotel and are returning some of its details in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was invalid or wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public Booking updateBooking(String bookingId, UpdateBookingRequest updateBookingRequest) throws ApiException {
        ApiResponse<Booking> localVarResp = updateBookingWithHttpInfo(bookingId, updateBookingRequest);
        return localVarResp.getData();
    }

    /**
     * Change a booking
     * &lt;!-- theme: danger --&gt;  &gt; Updates the specified booking with immediate effect. This action might result in a cancellation charge being charged.  &gt; Please note that if you wish to change the contact details associated with a booking, you should use the [Change a Booking&#39;s Contact Details](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D~1booking-contact/put) endpoint.  Changes / updates a confirmed booking with the details you provide in the request body.  When your guest needs to change their booking, you can use this endpoint to change any of the details you initially supplied when you [made their booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings/post), e.g. you&#39;ll need to query for availability and use the &#x60;roomTypes[].rates[].rateId&#x60; that are available currently for their new stay dates. Any new rates selected must be for the same hotel as the original booking.  A booking cannot be updated on or after the check in day of the original or new stay.  In addition, we require you do supply a &#x60;updateBookingVersionAtTimestamp&#x60; field with the &#x60;updatedAt&#x60; timestamp of the booking. You can find this value by looking up the booking via the [Retrieve a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D/get) endpoint. This is to avoid race conditions where another update might have happened since the last time you have checked for the current details of this booking.  The &#x60;status&#x60; of this booking will switch back to &#x60;PENDING&#x60; until we have submitted and confirmed the new details with the hotel.  &lt;!-- theme: warning --&gt;  &gt; **This request might take up to 20 seconds to load.** While we work to return a response to your request within milliseconds in most cases, some bookings require us to re-verify current pricing in real-time and doing so might take up to 20 seconds. Please make sure your app handles this waiting state appropriately.
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @param updateBookingRequest Specifies the room you want to book for your guest. (optional)
     * @return ApiResponse&lt;Booking&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> We&#39;ve submitted the change to the hotel and are returning some of its details in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was invalid or wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Booking> updateBookingWithHttpInfo(String bookingId, UpdateBookingRequest updateBookingRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBookingValidateBeforeCall(bookingId, updateBookingRequest, null);
        Type localVarReturnType = new TypeToken<Booking>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change a booking (asynchronously)
     * &lt;!-- theme: danger --&gt;  &gt; Updates the specified booking with immediate effect. This action might result in a cancellation charge being charged.  &gt; Please note that if you wish to change the contact details associated with a booking, you should use the [Change a Booking&#39;s Contact Details](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D~1booking-contact/put) endpoint.  Changes / updates a confirmed booking with the details you provide in the request body.  When your guest needs to change their booking, you can use this endpoint to change any of the details you initially supplied when you [made their booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings/post), e.g. you&#39;ll need to query for availability and use the &#x60;roomTypes[].rates[].rateId&#x60; that are available currently for their new stay dates. Any new rates selected must be for the same hotel as the original booking.  A booking cannot be updated on or after the check in day of the original or new stay.  In addition, we require you do supply a &#x60;updateBookingVersionAtTimestamp&#x60; field with the &#x60;updatedAt&#x60; timestamp of the booking. You can find this value by looking up the booking via the [Retrieve a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D/get) endpoint. This is to avoid race conditions where another update might have happened since the last time you have checked for the current details of this booking.  The &#x60;status&#x60; of this booking will switch back to &#x60;PENDING&#x60; until we have submitted and confirmed the new details with the hotel.  &lt;!-- theme: warning --&gt;  &gt; **This request might take up to 20 seconds to load.** While we work to return a response to your request within milliseconds in most cases, some bookings require us to re-verify current pricing in real-time and doing so might take up to 20 seconds. Please make sure your app handles this waiting state appropriately.
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @param updateBookingRequest Specifies the room you want to book for your guest. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> We&#39;ve submitted the change to the hotel and are returning some of its details in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was invalid or wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBookingAsync(String bookingId, UpdateBookingRequest updateBookingRequest, final ApiCallback<Booking> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBookingValidateBeforeCall(bookingId, updateBookingRequest, _callback);
        Type localVarReturnType = new TypeToken<Booking>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBookingContact
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @param updateBookingContactRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> We&#39;ve submitted the change to the hotel and are returning the booking details in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was invalid or wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBookingContactCall(String bookingId, UpdateBookingContactRequest updateBookingContactRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateBookingContactRequest;

        // create path and map variables
        String localVarPath = "/bookings/{bookingId}/booking-contact"
            .replace("{" + "bookingId" + "}", localVarApiClient.escapeString(bookingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key_Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBookingContactValidateBeforeCall(String bookingId, UpdateBookingContactRequest updateBookingContactRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bookingId' is set
        if (bookingId == null) {
            throw new ApiException("Missing the required parameter 'bookingId' when calling updateBookingContact(Async)");
        }

        return updateBookingContactCall(bookingId, updateBookingContactRequest, _callback);

    }

    /**
     * Change a booking contact
     * Updates a confirmed booking with the booking contact details you provide in the request body.  In addition, we require you to supply a &#x60;updateBookingVersionAtTimestamp&#x60; field with the &#x60;updatedAt&#x60; timestamp of the booking. You can find this value by looking up the booking via the [Retrieve a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D/get) endpoint. This is to avoid race conditions where another update might have happened since the last time you have checked for the current details of this booking.
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @param updateBookingContactRequest  (optional)
     * @return Booking
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> We&#39;ve submitted the change to the hotel and are returning the booking details in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was invalid or wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public Booking updateBookingContact(String bookingId, UpdateBookingContactRequest updateBookingContactRequest) throws ApiException {
        ApiResponse<Booking> localVarResp = updateBookingContactWithHttpInfo(bookingId, updateBookingContactRequest);
        return localVarResp.getData();
    }

    /**
     * Change a booking contact
     * Updates a confirmed booking with the booking contact details you provide in the request body.  In addition, we require you to supply a &#x60;updateBookingVersionAtTimestamp&#x60; field with the &#x60;updatedAt&#x60; timestamp of the booking. You can find this value by looking up the booking via the [Retrieve a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D/get) endpoint. This is to avoid race conditions where another update might have happened since the last time you have checked for the current details of this booking.
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @param updateBookingContactRequest  (optional)
     * @return ApiResponse&lt;Booking&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> We&#39;ve submitted the change to the hotel and are returning the booking details in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was invalid or wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Booking> updateBookingContactWithHttpInfo(String bookingId, UpdateBookingContactRequest updateBookingContactRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBookingContactValidateBeforeCall(bookingId, updateBookingContactRequest, null);
        Type localVarReturnType = new TypeToken<Booking>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change a booking contact (asynchronously)
     * Updates a confirmed booking with the booking contact details you provide in the request body.  In addition, we require you to supply a &#x60;updateBookingVersionAtTimestamp&#x60; field with the &#x60;updatedAt&#x60; timestamp of the booking. You can find this value by looking up the booking via the [Retrieve a booking](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1bookings~1%7BbookingId%7D/get) endpoint. This is to avoid race conditions where another update might have happened since the last time you have checked for the current details of this booking.
     * @param bookingId The unique identifier of the booking you would like to update. (required)
     * @param updateBookingContactRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> We&#39;ve submitted the change to the hotel and are returning the booking details in the response body. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request was invalid or wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Your request was sent without or with an incorrect API key. This most frequently happens when the &#x60;x-api-key&#x60; header wasn&#39;t added or contains an incorrect value. This might also happen if you&#39;re trying to access the production API endpoints with a sandbox API key or vice versa. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error within the Impala platform has occurred. Our team will investigate the error. We recommend that you contact us at support@impala.travel with the x-correlation-id value contained within the response headers. Sending us this value will allow us to identify the precise error you encountered. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBookingContactAsync(String bookingId, UpdateBookingContactRequest updateBookingContactRequest, final ApiCallback<Booking> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBookingContactValidateBeforeCall(bookingId, updateBookingContactRequest, _callback);
        Type localVarReturnType = new TypeToken<Booking>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
