/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.NotesBookedRoom;
import org.openapitools.client.model.RatePlanRoomPrice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RatePlanRoom
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:34.305979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RatePlanRoom {
  public static final String SERIALIZED_NAME_ADULTS = "adults";
  @SerializedName(SERIALIZED_NAME_ADULTS)
  private BigDecimal adults;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private NotesBookedRoom notes;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private RatePlanRoomPrice price;

  public static final String SERIALIZED_NAME_RATE_PLAN_ID = "ratePlanId";
  @SerializedName(SERIALIZED_NAME_RATE_PLAN_ID)
  private BigDecimal ratePlanId;

  public static final String SERIALIZED_NAME_ROOM_TYPE_ID = "roomTypeId";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPE_ID)
  private UUID roomTypeId;

  public RatePlanRoom() {
  }

  public RatePlanRoom adults(BigDecimal adults) {
    this.adults = adults;
    return this;
  }

  /**
   * number of adult guests
   * @return adults
   */
  @javax.annotation.Nonnull
  public BigDecimal getAdults() {
    return adults;
  }

  public void setAdults(BigDecimal adults) {
    this.adults = adults;
  }


  public RatePlanRoom notes(NotesBookedRoom notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public NotesBookedRoom getNotes() {
    return notes;
  }

  public void setNotes(NotesBookedRoom notes) {
    this.notes = notes;
  }


  public RatePlanRoom price(RatePlanRoomPrice price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nonnull
  public RatePlanRoomPrice getPrice() {
    return price;
  }

  public void setPrice(RatePlanRoomPrice price) {
    this.price = price;
  }


  public RatePlanRoom ratePlanId(BigDecimal ratePlanId) {
    this.ratePlanId = ratePlanId;
    return this;
  }

  /**
   * Get ratePlanId
   * @return ratePlanId
   */
  @javax.annotation.Nonnull
  public BigDecimal getRatePlanId() {
    return ratePlanId;
  }

  public void setRatePlanId(BigDecimal ratePlanId) {
    this.ratePlanId = ratePlanId;
  }


  public RatePlanRoom roomTypeId(UUID roomTypeId) {
    this.roomTypeId = roomTypeId;
    return this;
  }

  /**
   * Get roomTypeId
   * @return roomTypeId
   */
  @javax.annotation.Nonnull
  public UUID getRoomTypeId() {
    return roomTypeId;
  }

  public void setRoomTypeId(UUID roomTypeId) {
    this.roomTypeId = roomTypeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatePlanRoom ratePlanRoom = (RatePlanRoom) o;
    return Objects.equals(this.adults, ratePlanRoom.adults) &&
        Objects.equals(this.notes, ratePlanRoom.notes) &&
        Objects.equals(this.price, ratePlanRoom.price) &&
        Objects.equals(this.ratePlanId, ratePlanRoom.ratePlanId) &&
        Objects.equals(this.roomTypeId, ratePlanRoom.roomTypeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adults, notes, price, ratePlanId, roomTypeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatePlanRoom {\n");
    sb.append("    adults: ").append(toIndentedString(adults)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    ratePlanId: ").append(toIndentedString(ratePlanId)).append("\n");
    sb.append("    roomTypeId: ").append(toIndentedString(roomTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adults");
    openapiFields.add("notes");
    openapiFields.add("price");
    openapiFields.add("ratePlanId");
    openapiFields.add("roomTypeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("adults");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("ratePlanId");
    openapiRequiredFields.add("roomTypeId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RatePlanRoom
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RatePlanRoom.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RatePlanRoom is not found in the empty JSON string", RatePlanRoom.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RatePlanRoom.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RatePlanRoom` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RatePlanRoom.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `notes`
      if (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) {
        NotesBookedRoom.validateJsonElement(jsonObj.get("notes"));
      }
      // validate the required field `price`
      RatePlanRoomPrice.validateJsonElement(jsonObj.get("price"));
      if (!jsonObj.get("roomTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roomTypeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RatePlanRoom.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RatePlanRoom' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RatePlanRoom> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RatePlanRoom.class));

       return (TypeAdapter<T>) new TypeAdapter<RatePlanRoom>() {
           @Override
           public void write(JsonWriter out, RatePlanRoom value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RatePlanRoom read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RatePlanRoom given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RatePlanRoom
   * @throws IOException if the JSON string is invalid with respect to RatePlanRoom
   */
  public static RatePlanRoom fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RatePlanRoom.class);
  }

  /**
   * Convert an instance of RatePlanRoom to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

