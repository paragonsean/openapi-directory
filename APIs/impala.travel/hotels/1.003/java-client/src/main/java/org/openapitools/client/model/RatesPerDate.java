/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.RatePlanRate;
import org.openapitools.client.model.RatesPerDateStaythrough;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RatesPerDate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:34.305979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RatesPerDate {
  public static final String SERIALIZED_NAME_CLOSED = "closed";
  @SerializedName(SERIALIZED_NAME_CLOSED)
  private Boolean closed;

  public static final String SERIALIZED_NAME_CLOSED_TO_ARRIVAL = "closedToArrival";
  @SerializedName(SERIALIZED_NAME_CLOSED_TO_ARRIVAL)
  private Boolean closedToArrival;

  public static final String SERIALIZED_NAME_CLOSED_TO_DEPARTURE = "closedToDeparture";
  @SerializedName(SERIALIZED_NAME_CLOSED_TO_DEPARTURE)
  private Boolean closedToDeparture;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_RATES = "rates";
  @SerializedName(SERIALIZED_NAME_RATES)
  private Set<RatePlanRate> rates = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_STAYTHROUGH = "staythrough";
  @SerializedName(SERIALIZED_NAME_STAYTHROUGH)
  private RatesPerDateStaythrough staythrough;

  public RatesPerDate() {
  }

  public RatesPerDate closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

  /**
   * Determines whether the rate is available for a stay including this date.
   * @return closed
   */
  @javax.annotation.Nonnull
  public Boolean getClosed() {
    return closed;
  }

  public void setClosed(Boolean closed) {
    this.closed = closed;
  }


  public RatesPerDate closedToArrival(Boolean closedToArrival) {
    this.closedToArrival = closedToArrival;
    return this;
  }

  /**
   * Determines whether the rate is available if the arrival falls on this date.
   * @return closedToArrival
   */
  @javax.annotation.Nullable
  public Boolean getClosedToArrival() {
    return closedToArrival;
  }

  public void setClosedToArrival(Boolean closedToArrival) {
    this.closedToArrival = closedToArrival;
  }


  public RatesPerDate closedToDeparture(Boolean closedToDeparture) {
    this.closedToDeparture = closedToDeparture;
    return this;
  }

  /**
   * Determines whether the rate is available if the departure falls on this date.
   * @return closedToDeparture
   */
  @javax.annotation.Nullable
  public Boolean getClosedToDeparture() {
    return closedToDeparture;
  }

  public void setClosedToDeparture(Boolean closedToDeparture) {
    this.closedToDeparture = closedToDeparture;
  }


  public RatesPerDate date(String date) {
    this.date = date;
    return this;
  }

  /**
   * 
   * @return date
   */
  @javax.annotation.Nonnull
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public RatesPerDate rates(Set<RatePlanRate> rates) {
    this.rates = rates;
    return this;
  }

  public RatesPerDate addRatesItem(RatePlanRate ratesItem) {
    if (this.rates == null) {
      this.rates = new LinkedHashSet<>();
    }
    this.rates.add(ratesItem);
    return this;
  }

  /**
   * Rate prices for each occupancy the room can accommodate.
   * @return rates
   */
  @javax.annotation.Nonnull
  public Set<RatePlanRate> getRates() {
    return rates;
  }

  public void setRates(Set<RatePlanRate> rates) {
    this.rates = rates;
  }


  public RatesPerDate staythrough(RatesPerDateStaythrough staythrough) {
    this.staythrough = staythrough;
    return this;
  }

  /**
   * Get staythrough
   * @return staythrough
   */
  @javax.annotation.Nullable
  public RatesPerDateStaythrough getStaythrough() {
    return staythrough;
  }

  public void setStaythrough(RatesPerDateStaythrough staythrough) {
    this.staythrough = staythrough;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatesPerDate ratesPerDate = (RatesPerDate) o;
    return Objects.equals(this.closed, ratesPerDate.closed) &&
        Objects.equals(this.closedToArrival, ratesPerDate.closedToArrival) &&
        Objects.equals(this.closedToDeparture, ratesPerDate.closedToDeparture) &&
        Objects.equals(this.date, ratesPerDate.date) &&
        Objects.equals(this.rates, ratesPerDate.rates) &&
        Objects.equals(this.staythrough, ratesPerDate.staythrough);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closed, closedToArrival, closedToDeparture, date, rates, staythrough);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatesPerDate {\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    closedToArrival: ").append(toIndentedString(closedToArrival)).append("\n");
    sb.append("    closedToDeparture: ").append(toIndentedString(closedToDeparture)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    rates: ").append(toIndentedString(rates)).append("\n");
    sb.append("    staythrough: ").append(toIndentedString(staythrough)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closed");
    openapiFields.add("closedToArrival");
    openapiFields.add("closedToDeparture");
    openapiFields.add("date");
    openapiFields.add("rates");
    openapiFields.add("staythrough");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("closed");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("rates");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RatesPerDate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RatesPerDate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RatesPerDate is not found in the empty JSON string", RatesPerDate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RatesPerDate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RatesPerDate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RatesPerDate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("rates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rates` to be an array in the JSON string but got `%s`", jsonObj.get("rates").toString()));
      }

      JsonArray jsonArrayrates = jsonObj.getAsJsonArray("rates");
      // validate the required field `rates` (array)
      for (int i = 0; i < jsonArrayrates.size(); i++) {
        RatePlanRate.validateJsonElement(jsonArrayrates.get(i));
      };
      // validate the optional field `staythrough`
      if (jsonObj.get("staythrough") != null && !jsonObj.get("staythrough").isJsonNull()) {
        RatesPerDateStaythrough.validateJsonElement(jsonObj.get("staythrough"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RatesPerDate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RatesPerDate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RatesPerDate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RatesPerDate.class));

       return (TypeAdapter<T>) new TypeAdapter<RatesPerDate>() {
           @Override
           public void write(JsonWriter out, RatesPerDate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RatesPerDate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RatesPerDate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RatesPerDate
   * @throws IOException if the JSON string is invalid with respect to RatesPerDate
   */
  public static RatesPerDate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RatesPerDate.class);
  }

  /**
   * Convert an instance of RatesPerDate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

