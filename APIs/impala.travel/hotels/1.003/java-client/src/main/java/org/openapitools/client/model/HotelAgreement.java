/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.DealRequestStayDateRangesInner;
import org.openapitools.client.model.HotelAgreementCancellationPolicy;
import org.openapitools.client.model.HotelAgreementCommission;
import org.openapitools.client.model.HotelAgreementDealsSellable;
import org.openapitools.client.model.HotelAgreementDiscount;
import org.openapitools.client.model.HotelAgreementLengthOfStay;
import org.openapitools.client.model.HotelAgreementSellableInDateRangesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Hotel agreements detail which hotels have accepted/rejected the conditions of your deal request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:34.305979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HotelAgreement {
  public static final String SERIALIZED_NAME_CANCELLATION_POLICY = "cancellationPolicy";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_POLICY)
  private HotelAgreementCancellationPolicy cancellationPolicy;

  public static final String SERIALIZED_NAME_COMMISSION = "commission";
  @SerializedName(SERIALIZED_NAME_COMMISSION)
  private HotelAgreementCommission commission;

  /**
   * The conditions under which you commit to selling this deal. If no value is returned, you&#39;re able to sell this deal publicly on a website or app where it&#39;s discoverable by search engines and meta search engines. If &#x60;PRIVATE_RATE&#x60; is returned, this deal can only be shown behind a login and can&#39;t be advertised publicly to visitors of your app, website or service. If &#x60;PACKAGED&#x60; is returned, you&#39;ve committed to selling this deal with opaque pricing as part of a package with other services like flights, tours.
   */
  @JsonAdapter(ConditionsEnum.Adapter.class)
  public enum ConditionsEnum {
    PACKAGED("PACKAGED"),
    
    PRIVATE_RATE("PRIVATE_RATE");

    private String value;

    ConditionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConditionsEnum fromValue(String value) {
      for (ConditionsEnum b : ConditionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConditionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConditionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConditionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConditionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConditionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<ConditionsEnum> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DEALS_SELLABLE = "dealsSellable";
  @SerializedName(SERIALIZED_NAME_DEALS_SELLABLE)
  private HotelAgreementDealsSellable dealsSellable;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private HotelAgreementDiscount discount;

  public static final String SERIALIZED_NAME_HOTEL_AGREEMENT_ID = "hotelAgreementId";
  @SerializedName(SERIALIZED_NAME_HOTEL_AGREEMENT_ID)
  private String hotelAgreementId;

  /**
   * Gets or Sets hotelAgreementStatus
   */
  @JsonAdapter(HotelAgreementStatusEnum.Adapter.class)
  public enum HotelAgreementStatusEnum {
    ACCEPTED("ACCEPTED"),
    
    REJECTED("REJECTED"),
    
    PENDING("PENDING");

    private String value;

    HotelAgreementStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HotelAgreementStatusEnum fromValue(String value) {
      for (HotelAgreementStatusEnum b : HotelAgreementStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HotelAgreementStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HotelAgreementStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HotelAgreementStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HotelAgreementStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HotelAgreementStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOTEL_AGREEMENT_STATUS = "hotelAgreementStatus";
  @SerializedName(SERIALIZED_NAME_HOTEL_AGREEMENT_STATUS)
  private HotelAgreementStatusEnum hotelAgreementStatus;

  public static final String SERIALIZED_NAME_HOTEL_ID = "hotelId";
  @SerializedName(SERIALIZED_NAME_HOTEL_ID)
  private String hotelId;

  public static final String SERIALIZED_NAME_LENGTH_OF_STAY = "lengthOfStay";
  @SerializedName(SERIALIZED_NAME_LENGTH_OF_STAY)
  private HotelAgreementLengthOfStay lengthOfStay;

  public static final String SERIALIZED_NAME_SELLABLE_IN_DATE_RANGES = "sellableInDateRanges";
  @SerializedName(SERIALIZED_NAME_SELLABLE_IN_DATE_RANGES)
  private Set<HotelAgreementSellableInDateRangesInner> sellableInDateRanges;

  public static final String SERIALIZED_NAME_SPECIAL_INSTRUCTIONS = "specialInstructions";
  @SerializedName(SERIALIZED_NAME_SPECIAL_INSTRUCTIONS)
  private String specialInstructions;

  public static final String SERIALIZED_NAME_STAY_DATE_RANGES = "stayDateRanges";
  @SerializedName(SERIALIZED_NAME_STAY_DATE_RANGES)
  private Set<DealRequestStayDateRangesInner> stayDateRanges = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public HotelAgreement() {
  }

  public HotelAgreement cancellationPolicy(HotelAgreementCancellationPolicy cancellationPolicy) {
    this.cancellationPolicy = cancellationPolicy;
    return this;
  }

  /**
   * Get cancellationPolicy
   * @return cancellationPolicy
   */
  @javax.annotation.Nullable
  public HotelAgreementCancellationPolicy getCancellationPolicy() {
    return cancellationPolicy;
  }

  public void setCancellationPolicy(HotelAgreementCancellationPolicy cancellationPolicy) {
    this.cancellationPolicy = cancellationPolicy;
  }


  public HotelAgreement commission(HotelAgreementCommission commission) {
    this.commission = commission;
    return this;
  }

  /**
   * Get commission
   * @return commission
   */
  @javax.annotation.Nullable
  public HotelAgreementCommission getCommission() {
    return commission;
  }

  public void setCommission(HotelAgreementCommission commission) {
    this.commission = commission;
  }


  public HotelAgreement conditions(List<ConditionsEnum> conditions) {
    this.conditions = conditions;
    return this;
  }

  public HotelAgreement addConditionsItem(ConditionsEnum conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * A deal may have conditions set to it. For example, the deal may only apply for a closed user group (PRIVATE_RATE) or sold along with another component e.g flights (PACKAGED)
   * @return conditions
   */
  @javax.annotation.Nonnull
  public List<ConditionsEnum> getConditions() {
    return conditions;
  }

  public void setConditions(List<ConditionsEnum> conditions) {
    this.conditions = conditions;
  }


  public HotelAgreement createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date and time (in UTC and ISO 8601 format) when the hotel&#39;s stable content (i.e. all the details of the hotel excluding its rates) was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public HotelAgreement dealsSellable(HotelAgreementDealsSellable dealsSellable) {
    this.dealsSellable = dealsSellable;
    return this;
  }

  /**
   * Get dealsSellable
   * @return dealsSellable
   */
  @javax.annotation.Nullable
  public HotelAgreementDealsSellable getDealsSellable() {
    return dealsSellable;
  }

  public void setDealsSellable(HotelAgreementDealsSellable dealsSellable) {
    this.dealsSellable = dealsSellable;
  }


  public HotelAgreement discount(HotelAgreementDiscount discount) {
    this.discount = discount;
    return this;
  }

  /**
   * Get discount
   * @return discount
   */
  @javax.annotation.Nonnull
  public HotelAgreementDiscount getDiscount() {
    return discount;
  }

  public void setDiscount(HotelAgreementDiscount discount) {
    this.discount = discount;
  }


  public HotelAgreement hotelAgreementId(String hotelAgreementId) {
    this.hotelAgreementId = hotelAgreementId;
    return this;
  }

  /**
   * The unique identifier for this hotel agreement
   * @return hotelAgreementId
   */
  @javax.annotation.Nonnull
  public String getHotelAgreementId() {
    return hotelAgreementId;
  }

  public void setHotelAgreementId(String hotelAgreementId) {
    this.hotelAgreementId = hotelAgreementId;
  }


  public HotelAgreement hotelAgreementStatus(HotelAgreementStatusEnum hotelAgreementStatus) {
    this.hotelAgreementStatus = hotelAgreementStatus;
    return this;
  }

  /**
   * Get hotelAgreementStatus
   * @return hotelAgreementStatus
   */
  @javax.annotation.Nonnull
  public HotelAgreementStatusEnum getHotelAgreementStatus() {
    return hotelAgreementStatus;
  }

  public void setHotelAgreementStatus(HotelAgreementStatusEnum hotelAgreementStatus) {
    this.hotelAgreementStatus = hotelAgreementStatus;
  }


  public HotelAgreement hotelId(String hotelId) {
    this.hotelId = hotelId;
    return this;
  }

  /**
   * The unique identifier for this deal request
   * @return hotelId
   */
  @javax.annotation.Nonnull
  public String getHotelId() {
    return hotelId;
  }

  public void setHotelId(String hotelId) {
    this.hotelId = hotelId;
  }


  public HotelAgreement lengthOfStay(HotelAgreementLengthOfStay lengthOfStay) {
    this.lengthOfStay = lengthOfStay;
    return this;
  }

  /**
   * Get lengthOfStay
   * @return lengthOfStay
   */
  @javax.annotation.Nonnull
  public HotelAgreementLengthOfStay getLengthOfStay() {
    return lengthOfStay;
  }

  public void setLengthOfStay(HotelAgreementLengthOfStay lengthOfStay) {
    this.lengthOfStay = lengthOfStay;
  }


  public HotelAgreement sellableInDateRanges(Set<HotelAgreementSellableInDateRangesInner> sellableInDateRanges) {
    this.sellableInDateRanges = sellableInDateRanges;
    return this;
  }

  public HotelAgreement addSellableInDateRangesItem(HotelAgreementSellableInDateRangesInner sellableInDateRangesItem) {
    if (this.sellableInDateRanges == null) {
      this.sellableInDateRanges = new LinkedHashSet<>();
    }
    this.sellableInDateRanges.add(sellableInDateRangesItem);
    return this;
  }

  /**
   * The date ranges within which you can sell rates using this deal.
   * @return sellableInDateRanges
   */
  @javax.annotation.Nullable
  public Set<HotelAgreementSellableInDateRangesInner> getSellableInDateRanges() {
    return sellableInDateRanges;
  }

  public void setSellableInDateRanges(Set<HotelAgreementSellableInDateRangesInner> sellableInDateRanges) {
    this.sellableInDateRanges = sellableInDateRanges;
  }


  public HotelAgreement specialInstructions(String specialInstructions) {
    this.specialInstructions = specialInstructions;
    return this;
  }

  /**
   * These are conditions set by you the seller or the hotel for which the deal can be sold. For example: this deal can only be sold on mobile. Any specialInstructions will override other variables, for example, if an instruction includes: All bookings are non refundable, this will override any pre-existing cancellationPolicy.
   * @return specialInstructions
   */
  @javax.annotation.Nullable
  public String getSpecialInstructions() {
    return specialInstructions;
  }

  public void setSpecialInstructions(String specialInstructions) {
    this.specialInstructions = specialInstructions;
  }


  public HotelAgreement stayDateRanges(Set<DealRequestStayDateRangesInner> stayDateRanges) {
    this.stayDateRanges = stayDateRanges;
    return this;
  }

  public HotelAgreement addStayDateRangesItem(DealRequestStayDateRangesInner stayDateRangesItem) {
    if (this.stayDateRanges == null) {
      this.stayDateRanges = new LinkedHashSet<>();
    }
    this.stayDateRanges.add(stayDateRangesItem);
    return this;
  }

  /**
   * The date ranges within which guests you sell can stay at the hotel with the conditions you agree, given the hotel has rooms available.
   * @return stayDateRanges
   */
  @javax.annotation.Nonnull
  public Set<DealRequestStayDateRangesInner> getStayDateRanges() {
    return stayDateRanges;
  }

  public void setStayDateRanges(Set<DealRequestStayDateRangesInner> stayDateRanges) {
    this.stayDateRanges = stayDateRanges;
  }


  public HotelAgreement updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Date and time (in UTC and ISO 8601 format) when the hotel&#39;s stable content (i.e. all the details of the hotel excluding its rates)  was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelAgreement hotelAgreement = (HotelAgreement) o;
    return Objects.equals(this.cancellationPolicy, hotelAgreement.cancellationPolicy) &&
        Objects.equals(this.commission, hotelAgreement.commission) &&
        Objects.equals(this.conditions, hotelAgreement.conditions) &&
        Objects.equals(this.createdAt, hotelAgreement.createdAt) &&
        Objects.equals(this.dealsSellable, hotelAgreement.dealsSellable) &&
        Objects.equals(this.discount, hotelAgreement.discount) &&
        Objects.equals(this.hotelAgreementId, hotelAgreement.hotelAgreementId) &&
        Objects.equals(this.hotelAgreementStatus, hotelAgreement.hotelAgreementStatus) &&
        Objects.equals(this.hotelId, hotelAgreement.hotelId) &&
        Objects.equals(this.lengthOfStay, hotelAgreement.lengthOfStay) &&
        Objects.equals(this.sellableInDateRanges, hotelAgreement.sellableInDateRanges) &&
        Objects.equals(this.specialInstructions, hotelAgreement.specialInstructions) &&
        Objects.equals(this.stayDateRanges, hotelAgreement.stayDateRanges) &&
        Objects.equals(this.updatedAt, hotelAgreement.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancellationPolicy, commission, conditions, createdAt, dealsSellable, discount, hotelAgreementId, hotelAgreementStatus, hotelId, lengthOfStay, sellableInDateRanges, specialInstructions, stayDateRanges, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelAgreement {\n");
    sb.append("    cancellationPolicy: ").append(toIndentedString(cancellationPolicy)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    dealsSellable: ").append(toIndentedString(dealsSellable)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    hotelAgreementId: ").append(toIndentedString(hotelAgreementId)).append("\n");
    sb.append("    hotelAgreementStatus: ").append(toIndentedString(hotelAgreementStatus)).append("\n");
    sb.append("    hotelId: ").append(toIndentedString(hotelId)).append("\n");
    sb.append("    lengthOfStay: ").append(toIndentedString(lengthOfStay)).append("\n");
    sb.append("    sellableInDateRanges: ").append(toIndentedString(sellableInDateRanges)).append("\n");
    sb.append("    specialInstructions: ").append(toIndentedString(specialInstructions)).append("\n");
    sb.append("    stayDateRanges: ").append(toIndentedString(stayDateRanges)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancellationPolicy");
    openapiFields.add("commission");
    openapiFields.add("conditions");
    openapiFields.add("createdAt");
    openapiFields.add("dealsSellable");
    openapiFields.add("discount");
    openapiFields.add("hotelAgreementId");
    openapiFields.add("hotelAgreementStatus");
    openapiFields.add("hotelId");
    openapiFields.add("lengthOfStay");
    openapiFields.add("sellableInDateRanges");
    openapiFields.add("specialInstructions");
    openapiFields.add("stayDateRanges");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cancellationPolicy");
    openapiRequiredFields.add("commission");
    openapiRequiredFields.add("conditions");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("dealsSellable");
    openapiRequiredFields.add("discount");
    openapiRequiredFields.add("hotelAgreementId");
    openapiRequiredFields.add("hotelAgreementStatus");
    openapiRequiredFields.add("hotelId");
    openapiRequiredFields.add("lengthOfStay");
    openapiRequiredFields.add("sellableInDateRanges");
    openapiRequiredFields.add("specialInstructions");
    openapiRequiredFields.add("stayDateRanges");
    openapiRequiredFields.add("updatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HotelAgreement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HotelAgreement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotelAgreement is not found in the empty JSON string", HotelAgreement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HotelAgreement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotelAgreement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HotelAgreement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `cancellationPolicy`
      HotelAgreementCancellationPolicy.validateJsonElement(jsonObj.get("cancellationPolicy"));
      // validate the required field `commission`
      HotelAgreementCommission.validateJsonElement(jsonObj.get("commission"));
      // ensure the required json array is present
      if (jsonObj.get("conditions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("conditions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
      }
      // validate the required field `dealsSellable`
      HotelAgreementDealsSellable.validateJsonElement(jsonObj.get("dealsSellable"));
      // validate the required field `discount`
      HotelAgreementDiscount.validateJsonElement(jsonObj.get("discount"));
      if (!jsonObj.get("hotelAgreementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotelAgreementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotelAgreementId").toString()));
      }
      if (!jsonObj.get("hotelAgreementStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotelAgreementStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotelAgreementStatus").toString()));
      }
      // validate the required field `hotelAgreementStatus`
      HotelAgreementStatusEnum.validateJsonElement(jsonObj.get("hotelAgreementStatus"));
      if (!jsonObj.get("hotelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotelId").toString()));
      }
      // validate the required field `lengthOfStay`
      HotelAgreementLengthOfStay.validateJsonElement(jsonObj.get("lengthOfStay"));
      // ensure the json data is an array
      if (!jsonObj.get("sellableInDateRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sellableInDateRanges` to be an array in the JSON string but got `%s`", jsonObj.get("sellableInDateRanges").toString()));
      }

      JsonArray jsonArraysellableInDateRanges = jsonObj.getAsJsonArray("sellableInDateRanges");
      // validate the required field `sellableInDateRanges` (array)
      for (int i = 0; i < jsonArraysellableInDateRanges.size(); i++) {
        HotelAgreementSellableInDateRangesInner.validateJsonElement(jsonArraysellableInDateRanges.get(i));
      };
      if ((jsonObj.get("specialInstructions") != null && !jsonObj.get("specialInstructions").isJsonNull()) && !jsonObj.get("specialInstructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specialInstructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specialInstructions").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("stayDateRanges").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stayDateRanges` to be an array in the JSON string but got `%s`", jsonObj.get("stayDateRanges").toString()));
      }

      JsonArray jsonArraystayDateRanges = jsonObj.getAsJsonArray("stayDateRanges");
      // validate the required field `stayDateRanges` (array)
      for (int i = 0; i < jsonArraystayDateRanges.size(); i++) {
        DealRequestStayDateRangesInner.validateJsonElement(jsonArraystayDateRanges.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotelAgreement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotelAgreement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotelAgreement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotelAgreement.class));

       return (TypeAdapter<T>) new TypeAdapter<HotelAgreement>() {
           @Override
           public void write(JsonWriter out, HotelAgreement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotelAgreement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HotelAgreement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HotelAgreement
   * @throws IOException if the JSON string is invalid with respect to HotelAgreement
   */
  public static HotelAgreement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotelAgreement.class);
  }

  /**
   * Convert an instance of HotelAgreement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

