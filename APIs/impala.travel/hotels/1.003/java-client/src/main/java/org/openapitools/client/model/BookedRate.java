/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.BookedRateRetailRate;
import org.openapitools.client.model.CancellationPolicy;
import org.openapitools.client.model.HotelAgreementStub;
import org.openapitools.client.model.RateComponent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information on the price of the booked room, other components of the room (such as breakfast, lunch or a welcome drink) and the cancellation policies that apply.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:34.305979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BookedRate {
  public static final String SERIALIZED_NAME_CANCELLATION_POLICIES = "cancellationPolicies";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_POLICIES)
  private Set<CancellationPolicy> cancellationPolicies = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_COMPONENTS = "components";
  @SerializedName(SERIALIZED_NAME_COMPONENTS)
  private Set<RateComponent> components = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private LocalDate end;

  public static final String SERIALIZED_NAME_HOTEL_AGREEMENT = "hotelAgreement";
  @SerializedName(SERIALIZED_NAME_HOTEL_AGREEMENT)
  private HotelAgreementStub hotelAgreement;

  public static final String SERIALIZED_NAME_MAX_OCCUPANCY = "maxOccupancy";
  @SerializedName(SERIALIZED_NAME_MAX_OCCUPANCY)
  private BigDecimal maxOccupancy;

  public static final String SERIALIZED_NAME_RETAIL_RATE = "retailRate";
  @SerializedName(SERIALIZED_NAME_RETAIL_RATE)
  private BookedRateRetailRate retailRate;

  public static final String SERIALIZED_NAME_SELLER_COMMISSION_PERCENTAGE = "sellerCommissionPercentage";
  @SerializedName(SERIALIZED_NAME_SELLER_COMMISSION_PERCENTAGE)
  private Float sellerCommissionPercentage;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private LocalDate start;

  public BookedRate() {
  }

  public BookedRate cancellationPolicies(Set<CancellationPolicy> cancellationPolicies) {
    this.cancellationPolicies = cancellationPolicies;
    return this;
  }

  public BookedRate addCancellationPoliciesItem(CancellationPolicy cancellationPoliciesItem) {
    if (this.cancellationPolicies == null) {
      this.cancellationPolicies = new LinkedHashSet<>();
    }
    this.cancellationPolicies.add(cancellationPoliciesItem);
    return this;
  }

  /**
   * Get cancellationPolicies
   * @return cancellationPolicies
   */
  @javax.annotation.Nonnull
  public Set<CancellationPolicy> getCancellationPolicies() {
    return cancellationPolicies;
  }

  public void setCancellationPolicies(Set<CancellationPolicy> cancellationPolicies) {
    this.cancellationPolicies = cancellationPolicies;
  }


  public BookedRate components(Set<RateComponent> components) {
    this.components = components;
    return this;
  }

  public BookedRate addComponentsItem(RateComponent componentsItem) {
    if (this.components == null) {
      this.components = new LinkedHashSet<>();
    }
    this.components.add(componentsItem);
    return this;
  }

  /**
   * Get components
   * @return components
   */
  @javax.annotation.Nonnull
  public Set<RateComponent> getComponents() {
    return components;
  }

  public void setComponents(Set<RateComponent> components) {
    this.components = components;
  }


  public BookedRate end(LocalDate end) {
    this.end = end;
    return this;
  }

  /**
   * Get end
   * @return end
   */
  @javax.annotation.Nonnull
  public LocalDate getEnd() {
    return end;
  }

  public void setEnd(LocalDate end) {
    this.end = end;
  }


  public BookedRate hotelAgreement(HotelAgreementStub hotelAgreement) {
    this.hotelAgreement = hotelAgreement;
    return this;
  }

  /**
   * Get hotelAgreement
   * @return hotelAgreement
   */
  @javax.annotation.Nullable
  public HotelAgreementStub getHotelAgreement() {
    return hotelAgreement;
  }

  public void setHotelAgreement(HotelAgreementStub hotelAgreement) {
    this.hotelAgreement = hotelAgreement;
  }


  public BookedRate maxOccupancy(BigDecimal maxOccupancy) {
    this.maxOccupancy = maxOccupancy;
    return this;
  }

  /**
   * Get maxOccupancy
   * @return maxOccupancy
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxOccupancy() {
    return maxOccupancy;
  }

  public void setMaxOccupancy(BigDecimal maxOccupancy) {
    this.maxOccupancy = maxOccupancy;
  }


  public BookedRate retailRate(BookedRateRetailRate retailRate) {
    this.retailRate = retailRate;
    return this;
  }

  /**
   * Get retailRate
   * @return retailRate
   */
  @javax.annotation.Nonnull
  public BookedRateRetailRate getRetailRate() {
    return retailRate;
  }

  public void setRetailRate(BookedRateRetailRate retailRate) {
    this.retailRate = retailRate;
  }


  public BookedRate sellerCommissionPercentage(Float sellerCommissionPercentage) {
    this.sellerCommissionPercentage = sellerCommissionPercentage;
    return this;
  }

  /**
   * The commission percentage you as a seller will earn from this booking, based on &#x60;retailRate.total&#x60;.
   * @return sellerCommissionPercentage
   */
  @javax.annotation.Nonnull
  public Float getSellerCommissionPercentage() {
    return sellerCommissionPercentage;
  }

  public void setSellerCommissionPercentage(Float sellerCommissionPercentage) {
    this.sellerCommissionPercentage = sellerCommissionPercentage;
  }


  public BookedRate start(LocalDate start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nonnull
  public LocalDate getStart() {
    return start;
  }

  public void setStart(LocalDate start) {
    this.start = start;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BookedRate bookedRate = (BookedRate) o;
    return Objects.equals(this.cancellationPolicies, bookedRate.cancellationPolicies) &&
        Objects.equals(this.components, bookedRate.components) &&
        Objects.equals(this.end, bookedRate.end) &&
        Objects.equals(this.hotelAgreement, bookedRate.hotelAgreement) &&
        Objects.equals(this.maxOccupancy, bookedRate.maxOccupancy) &&
        Objects.equals(this.retailRate, bookedRate.retailRate) &&
        Objects.equals(this.sellerCommissionPercentage, bookedRate.sellerCommissionPercentage) &&
        Objects.equals(this.start, bookedRate.start);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cancellationPolicies, components, end, hotelAgreement, maxOccupancy, retailRate, sellerCommissionPercentage, start);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BookedRate {\n");
    sb.append("    cancellationPolicies: ").append(toIndentedString(cancellationPolicies)).append("\n");
    sb.append("    components: ").append(toIndentedString(components)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    hotelAgreement: ").append(toIndentedString(hotelAgreement)).append("\n");
    sb.append("    maxOccupancy: ").append(toIndentedString(maxOccupancy)).append("\n");
    sb.append("    retailRate: ").append(toIndentedString(retailRate)).append("\n");
    sb.append("    sellerCommissionPercentage: ").append(toIndentedString(sellerCommissionPercentage)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cancellationPolicies");
    openapiFields.add("components");
    openapiFields.add("end");
    openapiFields.add("hotelAgreement");
    openapiFields.add("maxOccupancy");
    openapiFields.add("retailRate");
    openapiFields.add("sellerCommissionPercentage");
    openapiFields.add("start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cancellationPolicies");
    openapiRequiredFields.add("components");
    openapiRequiredFields.add("end");
    openapiRequiredFields.add("hotelAgreement");
    openapiRequiredFields.add("retailRate");
    openapiRequiredFields.add("sellerCommissionPercentage");
    openapiRequiredFields.add("start");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BookedRate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BookedRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BookedRate is not found in the empty JSON string", BookedRate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BookedRate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BookedRate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BookedRate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("cancellationPolicies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancellationPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("cancellationPolicies").toString()));
      }

      JsonArray jsonArraycancellationPolicies = jsonObj.getAsJsonArray("cancellationPolicies");
      // validate the required field `cancellationPolicies` (array)
      for (int i = 0; i < jsonArraycancellationPolicies.size(); i++) {
        CancellationPolicy.validateJsonElement(jsonArraycancellationPolicies.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("components").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `components` to be an array in the JSON string but got `%s`", jsonObj.get("components").toString()));
      }

      JsonArray jsonArraycomponents = jsonObj.getAsJsonArray("components");
      // validate the required field `components` (array)
      for (int i = 0; i < jsonArraycomponents.size(); i++) {
        RateComponent.validateJsonElement(jsonArraycomponents.get(i));
      };
      // validate the required field `hotelAgreement`
      HotelAgreementStub.validateJsonElement(jsonObj.get("hotelAgreement"));
      // validate the required field `retailRate`
      BookedRateRetailRate.validateJsonElement(jsonObj.get("retailRate"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BookedRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BookedRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BookedRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BookedRate.class));

       return (TypeAdapter<T>) new TypeAdapter<BookedRate>() {
           @Override
           public void write(JsonWriter out, BookedRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BookedRate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BookedRate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BookedRate
   * @throws IOException if the JSON string is invalid with respect to BookedRate
   */
  public static BookedRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BookedRate.class);
  }

  /**
   * Convert an instance of BookedRate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

