/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RatePlanRate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:34.305979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RatePlanRate {
  public static final String SERIALIZED_NAME_ADULTS = "adults";
  @SerializedName(SERIALIZED_NAME_ADULTS)
  private BigDecimal adults;

  public static final String SERIALIZED_NAME_RETAIL_RATE = "retailRate";
  @SerializedName(SERIALIZED_NAME_RETAIL_RATE)
  private Money retailRate;

  public static final String SERIALIZED_NAME_ROOMS_SELLABLE = "roomsSellable";
  @SerializedName(SERIALIZED_NAME_ROOMS_SELLABLE)
  private BigDecimal roomsSellable;

  public RatePlanRate() {
  }

  public RatePlanRate adults(BigDecimal adults) {
    this.adults = adults;
    return this;
  }

  /**
   * The number of adults in the room for which this price applies.
   * minimum: 1
   * @return adults
   */
  @javax.annotation.Nonnull
  public BigDecimal getAdults() {
    return adults;
  }

  public void setAdults(BigDecimal adults) {
    this.adults = adults;
  }


  public RatePlanRate retailRate(Money retailRate) {
    this.retailRate = retailRate;
    return this;
  }

  /**
   * Get retailRate
   * @return retailRate
   */
  @javax.annotation.Nonnull
  public Money getRetailRate() {
    return retailRate;
  }

  public void setRetailRate(Money retailRate) {
    this.retailRate = retailRate;
  }


  public RatePlanRate roomsSellable(BigDecimal roomsSellable) {
    this.roomsSellable = roomsSellable;
    return this;
  }

  /**
   * Amount of room which can be sold for this occupancy level and room type at this rate price.
   * @return roomsSellable
   */
  @javax.annotation.Nonnull
  public BigDecimal getRoomsSellable() {
    return roomsSellable;
  }

  public void setRoomsSellable(BigDecimal roomsSellable) {
    this.roomsSellable = roomsSellable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatePlanRate ratePlanRate = (RatePlanRate) o;
    return Objects.equals(this.adults, ratePlanRate.adults) &&
        Objects.equals(this.retailRate, ratePlanRate.retailRate) &&
        Objects.equals(this.roomsSellable, ratePlanRate.roomsSellable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adults, retailRate, roomsSellable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatePlanRate {\n");
    sb.append("    adults: ").append(toIndentedString(adults)).append("\n");
    sb.append("    retailRate: ").append(toIndentedString(retailRate)).append("\n");
    sb.append("    roomsSellable: ").append(toIndentedString(roomsSellable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adults");
    openapiFields.add("retailRate");
    openapiFields.add("roomsSellable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("adults");
    openapiRequiredFields.add("retailRate");
    openapiRequiredFields.add("roomsSellable");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RatePlanRate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RatePlanRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RatePlanRate is not found in the empty JSON string", RatePlanRate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RatePlanRate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RatePlanRate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RatePlanRate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `retailRate`
      Money.validateJsonElement(jsonObj.get("retailRate"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RatePlanRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RatePlanRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RatePlanRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RatePlanRate.class));

       return (TypeAdapter<T>) new TypeAdapter<RatePlanRate>() {
           @Override
           public void write(JsonWriter out, RatePlanRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RatePlanRate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RatePlanRate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RatePlanRate
   * @throws IOException if the JSON string is invalid with respect to RatePlanRate
   */
  public static RatePlanRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RatePlanRate.class);
  }

  /**
   * Convert an instance of RatePlanRate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

