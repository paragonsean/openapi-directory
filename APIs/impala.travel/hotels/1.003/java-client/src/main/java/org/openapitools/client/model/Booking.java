/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BookedRoom;
import org.openapitools.client.model.BookingCancellation;
import org.openapitools.client.model.BookingContact;
import org.openapitools.client.model.BookingNotes;
import org.openapitools.client.model.HotelStub;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of an existing booking.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:34.305979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Booking {
  public static final String SERIALIZED_NAME_BOOKED_ROOMS = "bookedRooms";
  @SerializedName(SERIALIZED_NAME_BOOKED_ROOMS)
  private List<BookedRoom> bookedRooms = new ArrayList<>();

  public static final String SERIALIZED_NAME_BOOKING_ID = "bookingId";
  @SerializedName(SERIALIZED_NAME_BOOKING_ID)
  private String bookingId;

  public static final String SERIALIZED_NAME_CANCELLATION = "cancellation";
  @SerializedName(SERIALIZED_NAME_CANCELLATION)
  private BookingCancellation cancellation;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private BookingContact contact;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private LocalDate end;

  public static final String SERIALIZED_NAME_HOTEL = "hotel";
  @SerializedName(SERIALIZED_NAME_HOTEL)
  private HotelStub hotel;

  public static final String SERIALIZED_NAME_HOTEL_CONFIRMATION_CODE = "hotelConfirmationCode";
  @SerializedName(SERIALIZED_NAME_HOTEL_CONFIRMATION_CODE)
  private String hotelConfirmationCode;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private BookingNotes notes;

  public static final String SERIALIZED_NAME_PAYMENT_BEARER_TOKEN = "paymentBearerToken";
  @SerializedName(SERIALIZED_NAME_PAYMENT_BEARER_TOKEN)
  private String paymentBearerToken;

  public static final String SERIALIZED_NAME_PAYMENT_CLIENT_SECRET = "paymentClientSecret";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CLIENT_SECRET)
  private String paymentClientSecret;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private LocalDate start;

  /**
   * Status of this booking within the Impala platform. When you make a booking, it&#39;ll first appear as &#x60;PENDING&#x60; until we receive the hotel&#39;s confirmation details. At this point your booking will move to &#x60;ACCEPTED&#x60;.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CANCELLED("CANCELLED"),
    
    PENDING("PENDING"),
    
    ACCEPTED("ACCEPTED"),
    
    PAYMENT_REQUIRED("PAYMENT_REQUIRED"),
    
    PAYMENT_ABANDONED("PAYMENT_ABANDONED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Booking() {
  }

  public Booking bookedRooms(List<BookedRoom> bookedRooms) {
    this.bookedRooms = bookedRooms;
    return this;
  }

  public Booking addBookedRoomsItem(BookedRoom bookedRoomsItem) {
    if (this.bookedRooms == null) {
      this.bookedRooms = new ArrayList<>();
    }
    this.bookedRooms.add(bookedRoomsItem);
    return this;
  }

  /**
   * List of rooms booked
   * @return bookedRooms
   */
  @javax.annotation.Nonnull
  public List<BookedRoom> getBookedRooms() {
    return bookedRooms;
  }

  public void setBookedRooms(List<BookedRoom> bookedRooms) {
    this.bookedRooms = bookedRooms;
  }


  public Booking bookingId(String bookingId) {
    this.bookingId = bookingId;
    return this;
  }

  /**
   * Unique identifier for this booking within the Impala platform.
   * @return bookingId
   */
  @javax.annotation.Nonnull
  public String getBookingId() {
    return bookingId;
  }

  public void setBookingId(String bookingId) {
    this.bookingId = bookingId;
  }


  public Booking cancellation(BookingCancellation cancellation) {
    this.cancellation = cancellation;
    return this;
  }

  /**
   * Get cancellation
   * @return cancellation
   */
  @javax.annotation.Nullable
  public BookingCancellation getCancellation() {
    return cancellation;
  }

  public void setCancellation(BookingCancellation cancellation) {
    this.cancellation = cancellation;
  }


  public Booking contact(BookingContact contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nonnull
  public BookingContact getContact() {
    return contact;
  }

  public void setContact(BookingContact contact) {
    this.contact = contact;
  }


  public Booking createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date and time (in UTC and ISO 8601 format) when the booking was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Booking end(LocalDate end) {
    this.end = end;
    return this;
  }

  /**
   * The departure date of the booking.
   * @return end
   */
  @javax.annotation.Nonnull
  public LocalDate getEnd() {
    return end;
  }

  public void setEnd(LocalDate end) {
    this.end = end;
  }


  public Booking hotel(HotelStub hotel) {
    this.hotel = hotel;
    return this;
  }

  /**
   * Get hotel
   * @return hotel
   */
  @javax.annotation.Nonnull
  public HotelStub getHotel() {
    return hotel;
  }

  public void setHotel(HotelStub hotel) {
    this.hotel = hotel;
  }


  public Booking hotelConfirmationCode(String hotelConfirmationCode) {
    this.hotelConfirmationCode = hotelConfirmationCode;
    return this;
  }

  /**
   * The hotel&#39;s confirmation identifier for this booking.
   * @return hotelConfirmationCode
   */
  @javax.annotation.Nullable
  public String getHotelConfirmationCode() {
    return hotelConfirmationCode;
  }

  public void setHotelConfirmationCode(String hotelConfirmationCode) {
    this.hotelConfirmationCode = hotelConfirmationCode;
  }


  public Booking notes(BookingNotes notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nonnull
  public BookingNotes getNotes() {
    return notes;
  }

  public void setNotes(BookingNotes notes) {
    this.notes = notes;
  }


  public Booking paymentBearerToken(String paymentBearerToken) {
    this.paymentBearerToken = paymentBearerToken;
    return this;
  }

  /**
   * If status is PAYMENT_REQUIRED, then this should be used as the Authorisation header for the POST to the /payments endpoint.
   * @return paymentBearerToken
   */
  @javax.annotation.Nullable
  public String getPaymentBearerToken() {
    return paymentBearerToken;
  }

  public void setPaymentBearerToken(String paymentBearerToken) {
    this.paymentBearerToken = paymentBearerToken;
  }


  public Booking paymentClientSecret(String paymentClientSecret) {
    this.paymentClientSecret = paymentClientSecret;
    return this;
  }

  /**
   * If status is PAYMENT_REQUIRED, then this should be used as the client secret when rendering Impala Payment Elements in the UI.
   * @return paymentClientSecret
   */
  @javax.annotation.Nullable
  public String getPaymentClientSecret() {
    return paymentClientSecret;
  }

  public void setPaymentClientSecret(String paymentClientSecret) {
    this.paymentClientSecret = paymentClientSecret;
  }


  public Booking start(LocalDate start) {
    this.start = start;
    return this;
  }

  /**
   * The arrival date of the booking.
   * @return start
   */
  @javax.annotation.Nonnull
  public LocalDate getStart() {
    return start;
  }

  public void setStart(LocalDate start) {
    this.start = start;
  }


  public Booking status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of this booking within the Impala platform. When you make a booking, it&#39;ll first appear as &#x60;PENDING&#x60; until we receive the hotel&#39;s confirmation details. At this point your booking will move to &#x60;ACCEPTED&#x60;.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Booking updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Date and time (in UTC and ISO 8601 format) when the booking was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Booking booking = (Booking) o;
    return Objects.equals(this.bookedRooms, booking.bookedRooms) &&
        Objects.equals(this.bookingId, booking.bookingId) &&
        Objects.equals(this.cancellation, booking.cancellation) &&
        Objects.equals(this.contact, booking.contact) &&
        Objects.equals(this.createdAt, booking.createdAt) &&
        Objects.equals(this.end, booking.end) &&
        Objects.equals(this.hotel, booking.hotel) &&
        Objects.equals(this.hotelConfirmationCode, booking.hotelConfirmationCode) &&
        Objects.equals(this.notes, booking.notes) &&
        Objects.equals(this.paymentBearerToken, booking.paymentBearerToken) &&
        Objects.equals(this.paymentClientSecret, booking.paymentClientSecret) &&
        Objects.equals(this.start, booking.start) &&
        Objects.equals(this.status, booking.status) &&
        Objects.equals(this.updatedAt, booking.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bookedRooms, bookingId, cancellation, contact, createdAt, end, hotel, hotelConfirmationCode, notes, paymentBearerToken, paymentClientSecret, start, status, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Booking {\n");
    sb.append("    bookedRooms: ").append(toIndentedString(bookedRooms)).append("\n");
    sb.append("    bookingId: ").append(toIndentedString(bookingId)).append("\n");
    sb.append("    cancellation: ").append(toIndentedString(cancellation)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    hotel: ").append(toIndentedString(hotel)).append("\n");
    sb.append("    hotelConfirmationCode: ").append(toIndentedString(hotelConfirmationCode)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    paymentBearerToken: ").append(toIndentedString(paymentBearerToken)).append("\n");
    sb.append("    paymentClientSecret: ").append(toIndentedString(paymentClientSecret)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bookedRooms");
    openapiFields.add("bookingId");
    openapiFields.add("cancellation");
    openapiFields.add("contact");
    openapiFields.add("createdAt");
    openapiFields.add("end");
    openapiFields.add("hotel");
    openapiFields.add("hotelConfirmationCode");
    openapiFields.add("notes");
    openapiFields.add("paymentBearerToken");
    openapiFields.add("paymentClientSecret");
    openapiFields.add("start");
    openapiFields.add("status");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("bookedRooms");
    openapiRequiredFields.add("bookingId");
    openapiRequiredFields.add("contact");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("end");
    openapiRequiredFields.add("hotel");
    openapiRequiredFields.add("notes");
    openapiRequiredFields.add("start");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("updatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Booking
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Booking.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Booking is not found in the empty JSON string", Booking.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Booking.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Booking` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Booking.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("bookedRooms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookedRooms` to be an array in the JSON string but got `%s`", jsonObj.get("bookedRooms").toString()));
      }

      JsonArray jsonArraybookedRooms = jsonObj.getAsJsonArray("bookedRooms");
      // validate the required field `bookedRooms` (array)
      for (int i = 0; i < jsonArraybookedRooms.size(); i++) {
        BookedRoom.validateJsonElement(jsonArraybookedRooms.get(i));
      };
      if (!jsonObj.get("bookingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bookingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bookingId").toString()));
      }
      // validate the optional field `cancellation`
      if (jsonObj.get("cancellation") != null && !jsonObj.get("cancellation").isJsonNull()) {
        BookingCancellation.validateJsonElement(jsonObj.get("cancellation"));
      }
      // validate the required field `contact`
      BookingContact.validateJsonElement(jsonObj.get("contact"));
      // validate the required field `hotel`
      HotelStub.validateJsonElement(jsonObj.get("hotel"));
      if ((jsonObj.get("hotelConfirmationCode") != null && !jsonObj.get("hotelConfirmationCode").isJsonNull()) && !jsonObj.get("hotelConfirmationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotelConfirmationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotelConfirmationCode").toString()));
      }
      // validate the required field `notes`
      BookingNotes.validateJsonElement(jsonObj.get("notes"));
      if ((jsonObj.get("paymentBearerToken") != null && !jsonObj.get("paymentBearerToken").isJsonNull()) && !jsonObj.get("paymentBearerToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentBearerToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentBearerToken").toString()));
      }
      if ((jsonObj.get("paymentClientSecret") != null && !jsonObj.get("paymentClientSecret").isJsonNull()) && !jsonObj.get("paymentClientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentClientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentClientSecret").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Booking.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Booking' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Booking> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Booking.class));

       return (TypeAdapter<T>) new TypeAdapter<Booking>() {
           @Override
           public void write(JsonWriter out, Booking value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Booking read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Booking given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Booking
   * @throws IOException if the JSON string is invalid with respect to Booking
   */
  public static Booking fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Booking.class);
  }

  /**
   * Convert an instance of Booking to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

