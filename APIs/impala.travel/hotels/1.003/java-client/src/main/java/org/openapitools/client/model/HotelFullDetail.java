/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Amenity;
import org.openapitools.client.model.ExternalUrl;
import org.openapitools.client.model.HotelFullDetailDescription;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.RoomType;
import org.openapitools.client.model.TimeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Full details on a hotel, including its room types and available rates
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:34.305979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HotelFullDetail {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_AMENITIES = "amenities";
  @SerializedName(SERIALIZED_NAME_AMENITIES)
  private List<Amenity> amenities = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECK_IN = "checkIn";
  @SerializedName(SERIALIZED_NAME_CHECK_IN)
  private TimeRange checkIn;

  public static final String SERIALIZED_NAME_CHECK_OUT = "checkOut";
  @SerializedName(SERIALIZED_NAME_CHECK_OUT)
  private TimeRange checkOut;

  public static final String SERIALIZED_NAME_CONTRACTABLE = "contractable";
  @SerializedName(SERIALIZED_NAME_CONTRACTABLE)
  private Boolean contractable;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private HotelFullDetailDescription description;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<String> emails = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTERNAL_URLS = "externalUrls";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URLS)
  private List<ExternalUrl> externalUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOTEL_ID = "hotelId";
  @SerializedName(SERIALIZED_NAME_HOTEL_ID)
  private UUID hotelId;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<Image> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHONE_NUMBERS = "phoneNumbers";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBERS)
  private List<String> phoneNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOM_COUNT = "roomCount";
  @SerializedName(SERIALIZED_NAME_ROOM_COUNT)
  private BigDecimal roomCount;

  public static final String SERIALIZED_NAME_ROOM_TYPES = "roomTypes";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPES)
  private List<RoomType> roomTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_STAR_RATING = "starRating";
  @SerializedName(SERIALIZED_NAME_STAR_RATING)
  private Double starRating;

  public static final String SERIALIZED_NAME_TERMS_AND_CONDITIONS = "termsAndConditions";
  @SerializedName(SERIALIZED_NAME_TERMS_AND_CONDITIONS)
  private String termsAndConditions;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "websiteUrl";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  public HotelFullDetail() {
  }

  public HotelFullDetail address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nonnull
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public HotelFullDetail amenities(List<Amenity> amenities) {
    this.amenities = amenities;
    return this;
  }

  public HotelFullDetail addAmenitiesItem(Amenity amenitiesItem) {
    if (this.amenities == null) {
      this.amenities = new ArrayList<>();
    }
    this.amenities.add(amenitiesItem);
    return this;
  }

  /**
   * Get amenities
   * @return amenities
   */
  @javax.annotation.Nonnull
  public List<Amenity> getAmenities() {
    return amenities;
  }

  public void setAmenities(List<Amenity> amenities) {
    this.amenities = amenities;
  }


  public HotelFullDetail checkIn(TimeRange checkIn) {
    this.checkIn = checkIn;
    return this;
  }

  /**
   * Get checkIn
   * @return checkIn
   */
  @javax.annotation.Nonnull
  public TimeRange getCheckIn() {
    return checkIn;
  }

  public void setCheckIn(TimeRange checkIn) {
    this.checkIn = checkIn;
  }


  public HotelFullDetail checkOut(TimeRange checkOut) {
    this.checkOut = checkOut;
    return this;
  }

  /**
   * Get checkOut
   * @return checkOut
   */
  @javax.annotation.Nonnull
  public TimeRange getCheckOut() {
    return checkOut;
  }

  public void setCheckOut(TimeRange checkOut) {
    this.checkOut = checkOut;
  }


  public HotelFullDetail contractable(Boolean contractable) {
    this.contractable = contractable;
    return this;
  }

  /**
   * This determines if you can negotiate directly with the hotel. 
   * @return contractable
   */
  @javax.annotation.Nonnull
  public Boolean getContractable() {
    return contractable;
  }

  public void setContractable(Boolean contractable) {
    this.contractable = contractable;
  }


  public HotelFullDetail createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date and time (in UTC and ISO 8601 format) when the hotel&#39;s stable content (i.e. all the details of the hotel excluding its rates) was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public HotelFullDetail currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * The standard currency code used by the hotel.
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public HotelFullDetail description(HotelFullDetailDescription description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public HotelFullDetailDescription getDescription() {
    return description;
  }

  public void setDescription(HotelFullDetailDescription description) {
    this.description = description;
  }


  public HotelFullDetail emails(List<String> emails) {
    this.emails = emails;
    return this;
  }

  public HotelFullDetail addEmailsItem(String emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

  /**
   * Get emails
   * @return emails
   */
  @javax.annotation.Nonnull
  public List<String> getEmails() {
    return emails;
  }

  public void setEmails(List<String> emails) {
    this.emails = emails;
  }


  public HotelFullDetail externalUrls(List<ExternalUrl> externalUrls) {
    this.externalUrls = externalUrls;
    return this;
  }

  public HotelFullDetail addExternalUrlsItem(ExternalUrl externalUrlsItem) {
    if (this.externalUrls == null) {
      this.externalUrls = new ArrayList<>();
    }
    this.externalUrls.add(externalUrlsItem);
    return this;
  }

  /**
   * Get externalUrls
   * @return externalUrls
   */
  @javax.annotation.Nonnull
  public List<ExternalUrl> getExternalUrls() {
    return externalUrls;
  }

  public void setExternalUrls(List<ExternalUrl> externalUrls) {
    this.externalUrls = externalUrls;
  }


  public HotelFullDetail hotelId(UUID hotelId) {
    this.hotelId = hotelId;
    return this;
  }

  /**
   * Unique identifier for this hotel within the Impala platform.
   * @return hotelId
   */
  @javax.annotation.Nonnull
  public UUID getHotelId() {
    return hotelId;
  }

  public void setHotelId(UUID hotelId) {
    this.hotelId = hotelId;
  }


  public HotelFullDetail images(List<Image> images) {
    this.images = images;
    return this;
  }

  public HotelFullDetail addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Photos of the hotel, sorted in the recommended display order (e.g. for photo galleries) starting with the recommended hero image.
   * @return images
   */
  @javax.annotation.Nonnull
  public List<Image> getImages() {
    return images;
  }

  public void setImages(List<Image> images) {
    this.images = images;
  }


  public HotelFullDetail location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nonnull
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public HotelFullDetail name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the hotel.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public HotelFullDetail phoneNumbers(List<String> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
    return this;
  }

  public HotelFullDetail addPhoneNumbersItem(String phoneNumbersItem) {
    if (this.phoneNumbers == null) {
      this.phoneNumbers = new ArrayList<>();
    }
    this.phoneNumbers.add(phoneNumbersItem);
    return this;
  }

  /**
   * The hotel&#39;s phone number(s)
   * @return phoneNumbers
   */
  @javax.annotation.Nonnull
  public List<String> getPhoneNumbers() {
    return phoneNumbers;
  }

  public void setPhoneNumbers(List<String> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
  }


  public HotelFullDetail roomCount(BigDecimal roomCount) {
    this.roomCount = roomCount;
    return this;
  }

  /**
   * The number of rooms at the hotel.
   * @return roomCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getRoomCount() {
    return roomCount;
  }

  public void setRoomCount(BigDecimal roomCount) {
    this.roomCount = roomCount;
  }


  public HotelFullDetail roomTypes(List<RoomType> roomTypes) {
    this.roomTypes = roomTypes;
    return this;
  }

  public HotelFullDetail addRoomTypesItem(RoomType roomTypesItem) {
    if (this.roomTypes == null) {
      this.roomTypes = new ArrayList<>();
    }
    this.roomTypes.add(roomTypesItem);
    return this;
  }

  /**
   * List of room types available at this hotel.
   * @return roomTypes
   */
  @javax.annotation.Nonnull
  public List<RoomType> getRoomTypes() {
    return roomTypes;
  }

  public void setRoomTypes(List<RoomType> roomTypes) {
    this.roomTypes = roomTypes;
  }


  public HotelFullDetail starRating(Double starRating) {
    this.starRating = starRating;
    return this;
  }

  /**
   * The star rating (or star-equivalent rating)
   * @return starRating
   */
  @javax.annotation.Nullable
  public Double getStarRating() {
    return starRating;
  }

  public void setStarRating(Double starRating) {
    this.starRating = starRating;
  }


  public HotelFullDetail termsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
    return this;
  }

  /**
   * Rules and terms that apply to this hotel and have to be shown to your guest before the make their booking.
   * @return termsAndConditions
   */
  @javax.annotation.Nonnull
  public String getTermsAndConditions() {
    return termsAndConditions;
  }

  public void setTermsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
  }


  public HotelFullDetail timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * The timezone the hotel is in - e.g AST
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public HotelFullDetail updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Date and time (in UTC and ISO 8601 format) when the hotel&#39;s stable content (i.e. all the details of the hotel excluding its rates)  was last updated.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public HotelFullDetail websiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

  /**
   * The URL to the hotel&#39;s website.
   * @return websiteUrl
   */
  @javax.annotation.Nullable
  public String getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelFullDetail hotelFullDetail = (HotelFullDetail) o;
    return Objects.equals(this.address, hotelFullDetail.address) &&
        Objects.equals(this.amenities, hotelFullDetail.amenities) &&
        Objects.equals(this.checkIn, hotelFullDetail.checkIn) &&
        Objects.equals(this.checkOut, hotelFullDetail.checkOut) &&
        Objects.equals(this.contractable, hotelFullDetail.contractable) &&
        Objects.equals(this.createdAt, hotelFullDetail.createdAt) &&
        Objects.equals(this.currency, hotelFullDetail.currency) &&
        Objects.equals(this.description, hotelFullDetail.description) &&
        Objects.equals(this.emails, hotelFullDetail.emails) &&
        Objects.equals(this.externalUrls, hotelFullDetail.externalUrls) &&
        Objects.equals(this.hotelId, hotelFullDetail.hotelId) &&
        Objects.equals(this.images, hotelFullDetail.images) &&
        Objects.equals(this.location, hotelFullDetail.location) &&
        Objects.equals(this.name, hotelFullDetail.name) &&
        Objects.equals(this.phoneNumbers, hotelFullDetail.phoneNumbers) &&
        Objects.equals(this.roomCount, hotelFullDetail.roomCount) &&
        Objects.equals(this.roomTypes, hotelFullDetail.roomTypes) &&
        Objects.equals(this.starRating, hotelFullDetail.starRating) &&
        Objects.equals(this.termsAndConditions, hotelFullDetail.termsAndConditions) &&
        Objects.equals(this.timezone, hotelFullDetail.timezone) &&
        Objects.equals(this.updatedAt, hotelFullDetail.updatedAt) &&
        Objects.equals(this.websiteUrl, hotelFullDetail.websiteUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, amenities, checkIn, checkOut, contractable, createdAt, currency, description, emails, externalUrls, hotelId, images, location, name, phoneNumbers, roomCount, roomTypes, starRating, termsAndConditions, timezone, updatedAt, websiteUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelFullDetail {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    amenities: ").append(toIndentedString(amenities)).append("\n");
    sb.append("    checkIn: ").append(toIndentedString(checkIn)).append("\n");
    sb.append("    checkOut: ").append(toIndentedString(checkOut)).append("\n");
    sb.append("    contractable: ").append(toIndentedString(contractable)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    externalUrls: ").append(toIndentedString(externalUrls)).append("\n");
    sb.append("    hotelId: ").append(toIndentedString(hotelId)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phoneNumbers: ").append(toIndentedString(phoneNumbers)).append("\n");
    sb.append("    roomCount: ").append(toIndentedString(roomCount)).append("\n");
    sb.append("    roomTypes: ").append(toIndentedString(roomTypes)).append("\n");
    sb.append("    starRating: ").append(toIndentedString(starRating)).append("\n");
    sb.append("    termsAndConditions: ").append(toIndentedString(termsAndConditions)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("amenities");
    openapiFields.add("checkIn");
    openapiFields.add("checkOut");
    openapiFields.add("contractable");
    openapiFields.add("createdAt");
    openapiFields.add("currency");
    openapiFields.add("description");
    openapiFields.add("emails");
    openapiFields.add("externalUrls");
    openapiFields.add("hotelId");
    openapiFields.add("images");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("phoneNumbers");
    openapiFields.add("roomCount");
    openapiFields.add("roomTypes");
    openapiFields.add("starRating");
    openapiFields.add("termsAndConditions");
    openapiFields.add("timezone");
    openapiFields.add("updatedAt");
    openapiFields.add("websiteUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("amenities");
    openapiRequiredFields.add("checkIn");
    openapiRequiredFields.add("checkOut");
    openapiRequiredFields.add("contractable");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("emails");
    openapiRequiredFields.add("externalUrls");
    openapiRequiredFields.add("hotelId");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("phoneNumbers");
    openapiRequiredFields.add("roomCount");
    openapiRequiredFields.add("roomTypes");
    openapiRequiredFields.add("starRating");
    openapiRequiredFields.add("termsAndConditions");
    openapiRequiredFields.add("websiteUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HotelFullDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HotelFullDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotelFullDetail is not found in the empty JSON string", HotelFullDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HotelFullDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotelFullDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HotelFullDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `address`
      Address.validateJsonElement(jsonObj.get("address"));
      // ensure the json data is an array
      if (!jsonObj.get("amenities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `amenities` to be an array in the JSON string but got `%s`", jsonObj.get("amenities").toString()));
      }

      JsonArray jsonArrayamenities = jsonObj.getAsJsonArray("amenities");
      // validate the required field `amenities` (array)
      for (int i = 0; i < jsonArrayamenities.size(); i++) {
        Amenity.validateJsonElement(jsonArrayamenities.get(i));
      };
      // validate the required field `checkIn`
      TimeRange.validateJsonElement(jsonObj.get("checkIn"));
      // validate the required field `checkOut`
      TimeRange.validateJsonElement(jsonObj.get("checkOut"));
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        HotelFullDetailDescription.validateJsonElement(jsonObj.get("description"));
      }
      // ensure the required json array is present
      if (jsonObj.get("emails") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("externalUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalUrls` to be an array in the JSON string but got `%s`", jsonObj.get("externalUrls").toString()));
      }

      JsonArray jsonArrayexternalUrls = jsonObj.getAsJsonArray("externalUrls");
      // validate the required field `externalUrls` (array)
      for (int i = 0; i < jsonArrayexternalUrls.size(); i++) {
        ExternalUrl.validateJsonElement(jsonArrayexternalUrls.get(i));
      };
      if (!jsonObj.get("hotelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hotelId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }

      JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
      // validate the required field `images` (array)
      for (int i = 0; i < jsonArrayimages.size(); i++) {
        Image.validateJsonElement(jsonArrayimages.get(i));
      };
      // validate the required field `location`
      Location.validateJsonElement(jsonObj.get("location"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("phoneNumbers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("phoneNumbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("phoneNumbers").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("roomTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomTypes` to be an array in the JSON string but got `%s`", jsonObj.get("roomTypes").toString()));
      }

      JsonArray jsonArrayroomTypes = jsonObj.getAsJsonArray("roomTypes");
      // validate the required field `roomTypes` (array)
      for (int i = 0; i < jsonArrayroomTypes.size(); i++) {
        RoomType.validateJsonElement(jsonArrayroomTypes.get(i));
      };
      if (!jsonObj.get("termsAndConditions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termsAndConditions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termsAndConditions").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("websiteUrl") != null && !jsonObj.get("websiteUrl").isJsonNull()) && !jsonObj.get("websiteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `websiteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("websiteUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotelFullDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotelFullDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotelFullDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotelFullDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<HotelFullDetail>() {
           @Override
           public void write(JsonWriter out, HotelFullDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotelFullDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HotelFullDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HotelFullDetail
   * @throws IOException if the JSON string is invalid with respect to HotelFullDetail
   */
  public static HotelFullDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotelFullDetail.class);
  }

  /**
   * Convert an instance of HotelFullDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

