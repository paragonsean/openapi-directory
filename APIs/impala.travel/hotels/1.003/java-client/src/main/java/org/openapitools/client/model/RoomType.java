/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Amenity;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.Rate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Bookable category of bookable rooms within a hotel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:34.305979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoomType {
  public static final String SERIALIZED_NAME_AMENITIES = "amenities";
  @SerializedName(SERIALIZED_NAME_AMENITIES)
  private List<Amenity> amenities = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<Image> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_OCCUPANCY = "maxOccupancy";
  @SerializedName(SERIALIZED_NAME_MAX_OCCUPANCY)
  private Integer maxOccupancy;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RATES = "rates";
  @SerializedName(SERIALIZED_NAME_RATES)
  private List<Rate> rates = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROOM_TYPE_ID = "roomTypeId";
  @SerializedName(SERIALIZED_NAME_ROOM_TYPE_ID)
  private UUID roomTypeId;

  public RoomType() {
  }

  public RoomType amenities(List<Amenity> amenities) {
    this.amenities = amenities;
    return this;
  }

  public RoomType addAmenitiesItem(Amenity amenitiesItem) {
    if (this.amenities == null) {
      this.amenities = new ArrayList<>();
    }
    this.amenities.add(amenitiesItem);
    return this;
  }

  /**
   * Get amenities
   * @return amenities
   */
  @javax.annotation.Nonnull
  public List<Amenity> getAmenities() {
    return amenities;
  }

  public void setAmenities(List<Amenity> amenities) {
    this.amenities = amenities;
  }


  public RoomType description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RoomType images(List<Image> images) {
    this.images = images;
    return this;
  }

  public RoomType addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Lists photos of this room type
   * @return images
   */
  @javax.annotation.Nonnull
  public List<Image> getImages() {
    return images;
  }

  public void setImages(List<Image> images) {
    this.images = images;
  }


  public RoomType maxOccupancy(Integer maxOccupancy) {
    this.maxOccupancy = maxOccupancy;
    return this;
  }

  /**
   * Maximum number of adults that can occupy the room.
   * @return maxOccupancy
   */
  @javax.annotation.Nonnull
  public Integer getMaxOccupancy() {
    return maxOccupancy;
  }

  public void setMaxOccupancy(Integer maxOccupancy) {
    this.maxOccupancy = maxOccupancy;
  }


  public RoomType name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RoomType rates(List<Rate> rates) {
    this.rates = rates;
    return this;
  }

  public RoomType addRatesItem(Rate ratesItem) {
    if (this.rates == null) {
      this.rates = new ArrayList<>();
    }
    this.rates.add(ratesItem);
    return this;
  }

  /**
   * Bookable rates for this room type and the start and end dates of your availability search.
   * @return rates
   */
  @javax.annotation.Nullable
  public List<Rate> getRates() {
    return rates;
  }

  public void setRates(List<Rate> rates) {
    this.rates = rates;
  }


  public RoomType roomTypeId(UUID roomTypeId) {
    this.roomTypeId = roomTypeId;
    return this;
  }

  /**
   * Unique identifier of the room type within the Impala platform.
   * @return roomTypeId
   */
  @javax.annotation.Nonnull
  public UUID getRoomTypeId() {
    return roomTypeId;
  }

  public void setRoomTypeId(UUID roomTypeId) {
    this.roomTypeId = roomTypeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoomType roomType = (RoomType) o;
    return Objects.equals(this.amenities, roomType.amenities) &&
        Objects.equals(this.description, roomType.description) &&
        Objects.equals(this.images, roomType.images) &&
        Objects.equals(this.maxOccupancy, roomType.maxOccupancy) &&
        Objects.equals(this.name, roomType.name) &&
        Objects.equals(this.rates, roomType.rates) &&
        Objects.equals(this.roomTypeId, roomType.roomTypeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amenities, description, images, maxOccupancy, name, rates, roomTypeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoomType {\n");
    sb.append("    amenities: ").append(toIndentedString(amenities)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    maxOccupancy: ").append(toIndentedString(maxOccupancy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rates: ").append(toIndentedString(rates)).append("\n");
    sb.append("    roomTypeId: ").append(toIndentedString(roomTypeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amenities");
    openapiFields.add("description");
    openapiFields.add("images");
    openapiFields.add("maxOccupancy");
    openapiFields.add("name");
    openapiFields.add("rates");
    openapiFields.add("roomTypeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amenities");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("images");
    openapiRequiredFields.add("maxOccupancy");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("roomTypeId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoomType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoomType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoomType is not found in the empty JSON string", RoomType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoomType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoomType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RoomType.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("amenities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `amenities` to be an array in the JSON string but got `%s`", jsonObj.get("amenities").toString()));
      }

      JsonArray jsonArrayamenities = jsonObj.getAsJsonArray("amenities");
      // validate the required field `amenities` (array)
      for (int i = 0; i < jsonArrayamenities.size(); i++) {
        Amenity.validateJsonElement(jsonArrayamenities.get(i));
      };
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }

      JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
      // validate the required field `images` (array)
      for (int i = 0; i < jsonArrayimages.size(); i++) {
        Image.validateJsonElement(jsonArrayimages.get(i));
      };
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("rates") != null && !jsonObj.get("rates").isJsonNull()) {
        JsonArray jsonArrayrates = jsonObj.getAsJsonArray("rates");
        if (jsonArrayrates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rates` to be an array in the JSON string but got `%s`", jsonObj.get("rates").toString()));
          }

          // validate the optional field `rates` (array)
          for (int i = 0; i < jsonArrayrates.size(); i++) {
            Rate.validateJsonElement(jsonArrayrates.get(i));
          };
        }
      }
      if (!jsonObj.get("roomTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roomTypeId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoomType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoomType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoomType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoomType.class));

       return (TypeAdapter<T>) new TypeAdapter<RoomType>() {
           @Override
           public void write(JsonWriter out, RoomType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoomType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoomType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoomType
   * @throws IOException if the JSON string is invalid with respect to RoomType
   */
  public static RoomType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoomType.class);
  }

  /**
   * Convert an instance of RoomType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

