/*
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.GenericError;
import org.openapitools.client.model.ListRatePlansForHotel200Response;
import org.openapitools.client.model.RatePlan;
import java.util.UUID;
import org.openapitools.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RateCalendarApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RateCalendarApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RateCalendarApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listRatePlanForHotelForRatePlanId
     * @param hotelId The uuid of hotel for which rate plans are being fetched. (required)
     * @param ratePlanId The id of requested rateplan (required)
     * @param updatedAt Returns rate plans changed after the supplied date. (optional)
     * @param size Number of rate plans returned on a given page (pagination). (optional, default to 25)
     * @param offset Offset from the first rate plan in the result (for pagination). (optional, default to 0)
     * @param start Start date of the considered time window for the returned rate plan. (optional)
     * @param end Start date of the considered time window for the returned rate plan. (optional)
     * @param roomTypeId The uuid of room for which rate plans are being fetched. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRatePlanForHotelForRatePlanIdCall(UUID hotelId, Integer ratePlanId, Object updatedAt, BigDecimal size, BigDecimal offset, String start, String end, UUID roomTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hotels/{hotelId}/rate-plans/{ratePlanId}"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()))
            .replace("{" + "ratePlanId" + "}", localVarApiClient.escapeString(ratePlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(updatedAt));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (roomTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roomTypeId", roomTypeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key_Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRatePlanForHotelForRatePlanIdValidateBeforeCall(UUID hotelId, Integer ratePlanId, Object updatedAt, BigDecimal size, BigDecimal offset, String start, String end, UUID roomTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling listRatePlanForHotelForRatePlanId(Async)");
        }

        // verify the required parameter 'ratePlanId' is set
        if (ratePlanId == null) {
            throw new ApiException("Missing the required parameter 'ratePlanId' when calling listRatePlanForHotelForRatePlanId(Async)");
        }

        return listRatePlanForHotelForRatePlanIdCall(hotelId, ratePlanId, updatedAt, size, offset, start, end, roomTypeId, _callback);

    }

    /**
     * List a rate plan (rate calendar) for a hotel (Beta endpoint).
     * Returns a single rate plan available for you for a hotel.  Rate plans are products the hotel is offering. They typically consist of a combination of restrictiveness in case of cancellations or changes, the time they&#39;re bookable, minimum or maximum length of stay restrictions (e.g. week-long bookings), included components like breakfast or dinner and/or the conditions under which the room can be sold (e.g. private rates that can only be offered and sold to a closed user group behind login).  Examples of rate plans:  * Non-refundable room rate that includes breakfast * Room-only rate with free cancellation up to 14 days before arrival  This endpoint returns a singular available rate plan.
     * @param hotelId The uuid of hotel for which rate plans are being fetched. (required)
     * @param ratePlanId The id of requested rateplan (required)
     * @param updatedAt Returns rate plans changed after the supplied date. (optional)
     * @param size Number of rate plans returned on a given page (pagination). (optional, default to 25)
     * @param offset Offset from the first rate plan in the result (for pagination). (optional, default to 0)
     * @param start Start date of the considered time window for the returned rate plan. (optional)
     * @param end Start date of the considered time window for the returned rate plan. (optional)
     * @param roomTypeId The uuid of room for which rate plans are being fetched. (optional)
     * @return RatePlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public RatePlan listRatePlanForHotelForRatePlanId(UUID hotelId, Integer ratePlanId, Object updatedAt, BigDecimal size, BigDecimal offset, String start, String end, UUID roomTypeId) throws ApiException {
        ApiResponse<RatePlan> localVarResp = listRatePlanForHotelForRatePlanIdWithHttpInfo(hotelId, ratePlanId, updatedAt, size, offset, start, end, roomTypeId);
        return localVarResp.getData();
    }

    /**
     * List a rate plan (rate calendar) for a hotel (Beta endpoint).
     * Returns a single rate plan available for you for a hotel.  Rate plans are products the hotel is offering. They typically consist of a combination of restrictiveness in case of cancellations or changes, the time they&#39;re bookable, minimum or maximum length of stay restrictions (e.g. week-long bookings), included components like breakfast or dinner and/or the conditions under which the room can be sold (e.g. private rates that can only be offered and sold to a closed user group behind login).  Examples of rate plans:  * Non-refundable room rate that includes breakfast * Room-only rate with free cancellation up to 14 days before arrival  This endpoint returns a singular available rate plan.
     * @param hotelId The uuid of hotel for which rate plans are being fetched. (required)
     * @param ratePlanId The id of requested rateplan (required)
     * @param updatedAt Returns rate plans changed after the supplied date. (optional)
     * @param size Number of rate plans returned on a given page (pagination). (optional, default to 25)
     * @param offset Offset from the first rate plan in the result (for pagination). (optional, default to 0)
     * @param start Start date of the considered time window for the returned rate plan. (optional)
     * @param end Start date of the considered time window for the returned rate plan. (optional)
     * @param roomTypeId The uuid of room for which rate plans are being fetched. (optional)
     * @return ApiResponse&lt;RatePlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RatePlan> listRatePlanForHotelForRatePlanIdWithHttpInfo(UUID hotelId, Integer ratePlanId, Object updatedAt, BigDecimal size, BigDecimal offset, String start, String end, UUID roomTypeId) throws ApiException {
        okhttp3.Call localVarCall = listRatePlanForHotelForRatePlanIdValidateBeforeCall(hotelId, ratePlanId, updatedAt, size, offset, start, end, roomTypeId, null);
        Type localVarReturnType = new TypeToken<RatePlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a rate plan (rate calendar) for a hotel (Beta endpoint). (asynchronously)
     * Returns a single rate plan available for you for a hotel.  Rate plans are products the hotel is offering. They typically consist of a combination of restrictiveness in case of cancellations or changes, the time they&#39;re bookable, minimum or maximum length of stay restrictions (e.g. week-long bookings), included components like breakfast or dinner and/or the conditions under which the room can be sold (e.g. private rates that can only be offered and sold to a closed user group behind login).  Examples of rate plans:  * Non-refundable room rate that includes breakfast * Room-only rate with free cancellation up to 14 days before arrival  This endpoint returns a singular available rate plan.
     * @param hotelId The uuid of hotel for which rate plans are being fetched. (required)
     * @param ratePlanId The id of requested rateplan (required)
     * @param updatedAt Returns rate plans changed after the supplied date. (optional)
     * @param size Number of rate plans returned on a given page (pagination). (optional, default to 25)
     * @param offset Offset from the first rate plan in the result (for pagination). (optional, default to 0)
     * @param start Start date of the considered time window for the returned rate plan. (optional)
     * @param end Start date of the considered time window for the returned rate plan. (optional)
     * @param roomTypeId The uuid of room for which rate plans are being fetched. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRatePlanForHotelForRatePlanIdAsync(UUID hotelId, Integer ratePlanId, Object updatedAt, BigDecimal size, BigDecimal offset, String start, String end, UUID roomTypeId, final ApiCallback<RatePlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRatePlanForHotelForRatePlanIdValidateBeforeCall(hotelId, ratePlanId, updatedAt, size, offset, start, end, roomTypeId, _callback);
        Type localVarReturnType = new TypeToken<RatePlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRatePlansForHotel
     * @param hotelId The uuid of hotel for which rate plans are being fetched. (required)
     * @param updatedAt Returns rate plans changed after the supplied date. (optional)
     * @param size Number of rate plans returned on a given page (pagination). (optional, default to 25)
     * @param offset Offset from the first rate plan in the result (for pagination). (optional, default to 0)
     * @param start Start date of the considered time window for the returned rate plan. (optional)
     * @param end Start date of the considered time window for the returned rate plan. (optional)
     * @param roomId The UUID of room for which rate plans are being fetched. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRatePlansForHotelCall(UUID hotelId, Object updatedAt, BigDecimal size, BigDecimal offset, String start, String end, UUID roomId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/hotels/{hotelId}/rate-plans"
            .replace("{" + "hotelId" + "}", localVarApiClient.escapeString(hotelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (updatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.freeFormParameterToPairs(updatedAt));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (roomId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roomId", roomId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key_Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRatePlansForHotelValidateBeforeCall(UUID hotelId, Object updatedAt, BigDecimal size, BigDecimal offset, String start, String end, UUID roomId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hotelId' is set
        if (hotelId == null) {
            throw new ApiException("Missing the required parameter 'hotelId' when calling listRatePlansForHotel(Async)");
        }

        return listRatePlansForHotelCall(hotelId, updatedAt, size, offset, start, end, roomId, _callback);

    }

    /**
     * List all rate plans (rate calendar) for a hotel (Beta endpoint)
     * Returns a list of all rate plans available for you for a hotel.  Rate plans are products the hotel is offering. They typically consist of a combination of restrictiveness in case of cancellations or changes, the time they&#39;re bookable, minimum or maximum length of stay restrictions (e.g. week-long bookings), included components like breakfast or dinner and/or the conditions under which the room can be sold (e.g. private rates that can only be offered and sold to a closed user group behind login).  Examples of rate plans:  * Non-refundable room rate that includes breakfast * Room-only rate with free cancellation up to 14 days before arrival  For each such rate plan this endpoint returns the room types it&#39;s available for, alongside prices for each date and occupancy that can be sold – or the information that the room isn&#39;t available (closed) for a certain date.  For the vast majority of our customers, availability searches using the [List all hotels](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels/get) endpoint are the best choice. It accepts the dates your guest is looking for and provides the rates to display.  This endpoint can help augment this for two additional use cases:  This endpoint allows you to query rate prices for all future dates in one go, making it a great choice to feed availability information and prices into your own system or displaying a rate calender to guide your guests to gain an overview of future availability and prices.
     * @param hotelId The uuid of hotel for which rate plans are being fetched. (required)
     * @param updatedAt Returns rate plans changed after the supplied date. (optional)
     * @param size Number of rate plans returned on a given page (pagination). (optional, default to 25)
     * @param offset Offset from the first rate plan in the result (for pagination). (optional, default to 0)
     * @param start Start date of the considered time window for the returned rate plan. (optional)
     * @param end Start date of the considered time window for the returned rate plan. (optional)
     * @param roomId The UUID of room for which rate plans are being fetched. (optional)
     * @return ListRatePlansForHotel200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ListRatePlansForHotel200Response listRatePlansForHotel(UUID hotelId, Object updatedAt, BigDecimal size, BigDecimal offset, String start, String end, UUID roomId) throws ApiException {
        ApiResponse<ListRatePlansForHotel200Response> localVarResp = listRatePlansForHotelWithHttpInfo(hotelId, updatedAt, size, offset, start, end, roomId);
        return localVarResp.getData();
    }

    /**
     * List all rate plans (rate calendar) for a hotel (Beta endpoint)
     * Returns a list of all rate plans available for you for a hotel.  Rate plans are products the hotel is offering. They typically consist of a combination of restrictiveness in case of cancellations or changes, the time they&#39;re bookable, minimum or maximum length of stay restrictions (e.g. week-long bookings), included components like breakfast or dinner and/or the conditions under which the room can be sold (e.g. private rates that can only be offered and sold to a closed user group behind login).  Examples of rate plans:  * Non-refundable room rate that includes breakfast * Room-only rate with free cancellation up to 14 days before arrival  For each such rate plan this endpoint returns the room types it&#39;s available for, alongside prices for each date and occupancy that can be sold – or the information that the room isn&#39;t available (closed) for a certain date.  For the vast majority of our customers, availability searches using the [List all hotels](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels/get) endpoint are the best choice. It accepts the dates your guest is looking for and provides the rates to display.  This endpoint can help augment this for two additional use cases:  This endpoint allows you to query rate prices for all future dates in one go, making it a great choice to feed availability information and prices into your own system or displaying a rate calender to guide your guests to gain an overview of future availability and prices.
     * @param hotelId The uuid of hotel for which rate plans are being fetched. (required)
     * @param updatedAt Returns rate plans changed after the supplied date. (optional)
     * @param size Number of rate plans returned on a given page (pagination). (optional, default to 25)
     * @param offset Offset from the first rate plan in the result (for pagination). (optional, default to 0)
     * @param start Start date of the considered time window for the returned rate plan. (optional)
     * @param end Start date of the considered time window for the returned rate plan. (optional)
     * @param roomId The UUID of room for which rate plans are being fetched. (optional)
     * @return ApiResponse&lt;ListRatePlansForHotel200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRatePlansForHotel200Response> listRatePlansForHotelWithHttpInfo(UUID hotelId, Object updatedAt, BigDecimal size, BigDecimal offset, String start, String end, UUID roomId) throws ApiException {
        okhttp3.Call localVarCall = listRatePlansForHotelValidateBeforeCall(hotelId, updatedAt, size, offset, start, end, roomId, null);
        Type localVarReturnType = new TypeToken<ListRatePlansForHotel200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all rate plans (rate calendar) for a hotel (Beta endpoint) (asynchronously)
     * Returns a list of all rate plans available for you for a hotel.  Rate plans are products the hotel is offering. They typically consist of a combination of restrictiveness in case of cancellations or changes, the time they&#39;re bookable, minimum or maximum length of stay restrictions (e.g. week-long bookings), included components like breakfast or dinner and/or the conditions under which the room can be sold (e.g. private rates that can only be offered and sold to a closed user group behind login).  Examples of rate plans:  * Non-refundable room rate that includes breakfast * Room-only rate with free cancellation up to 14 days before arrival  For each such rate plan this endpoint returns the room types it&#39;s available for, alongside prices for each date and occupancy that can be sold – or the information that the room isn&#39;t available (closed) for a certain date.  For the vast majority of our customers, availability searches using the [List all hotels](https://docs.impala.travel/docs/booking-api/spec/openapi.seller.yaml/paths/~1hotels/get) endpoint are the best choice. It accepts the dates your guest is looking for and provides the rates to display.  This endpoint can help augment this for two additional use cases:  This endpoint allows you to query rate prices for all future dates in one go, making it a great choice to feed availability information and prices into your own system or displaying a rate calender to guide your guests to gain an overview of future availability and prices.
     * @param hotelId The uuid of hotel for which rate plans are being fetched. (required)
     * @param updatedAt Returns rate plans changed after the supplied date. (optional)
     * @param size Number of rate plans returned on a given page (pagination). (optional, default to 25)
     * @param offset Offset from the first rate plan in the result (for pagination). (optional, default to 0)
     * @param start Start date of the considered time window for the returned rate plan. (optional)
     * @param end Start date of the considered time window for the returned rate plan. (optional)
     * @param roomId The UUID of room for which rate plans are being fetched. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your request wasn&#39;t formatted correctly and therefore couldn&#39;t be processed. This most frequently happens when query parameters or request body values are missing, incorrectly formatted or added where they don&#39;t exist (e.g. due to typos). We&#39;re including a list of &#x60;validations&#x60; to point out where things are going wrong and should be fixed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRatePlansForHotelAsync(UUID hotelId, Object updatedAt, BigDecimal size, BigDecimal offset, String start, String end, UUID roomId, final ApiCallback<ListRatePlansForHotel200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRatePlansForHotelValidateBeforeCall(hotelId, updatedAt, size, offset, start, end, roomId, _callback);
        Type localVarReturnType = new TypeToken<ListRatePlansForHotel200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
