# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Amenity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: float=None, formatted: str=None):
        """Amenity - a model defined in OpenAPI

        :param code: The code of this Amenity.
        :param formatted: The formatted of this Amenity.
        """
        self.openapi_types = {
            'code': float,
            'formatted': str
        }

        self.attribute_map = {
            'code': 'code',
            'formatted': 'formatted'
        }

        self._code = code
        self._formatted = formatted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Amenity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The amenity of this Amenity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Amenity.

        Unique identifier of this amenity according to the Open Travel Alliance HAC (Hotel Amenity Code) standard for hotels and RAC (Room Amenity Code) standard for rooms.

        :return: The code of this Amenity.
        :rtype: float
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Amenity.

        Unique identifier of this amenity according to the Open Travel Alliance HAC (Hotel Amenity Code) standard for hotels and RAC (Room Amenity Code) standard for rooms.

        :param code: The code of this Amenity.
        :type code: float
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def formatted(self):
        """Gets the formatted of this Amenity.

        A human-readable English description of the amenity.

        :return: The formatted of this Amenity.
        :rtype: str
        """
        return self._formatted

    @formatted.setter
    def formatted(self, formatted):
        """Sets the formatted of this Amenity.

        A human-readable English description of the amenity.

        :param formatted: The formatted of this Amenity.
        :type formatted: str
        """
        if formatted is None:
            raise ValueError("Invalid value for `formatted`, must not be `None`")

        self._formatted = formatted
