# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BookingNotes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_guest: str=None, from_seller: str=None):
        """BookingNotes - a model defined in OpenAPI

        :param from_guest: The from_guest of this BookingNotes.
        :param from_seller: The from_seller of this BookingNotes.
        """
        self.openapi_types = {
            'from_guest': str,
            'from_seller': str
        }

        self.attribute_map = {
            'from_guest': 'fromGuest',
            'from_seller': 'fromSeller'
        }

        self._from_guest = from_guest
        self._from_seller = from_seller

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingNotes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The booking_notes of this BookingNotes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_guest(self):
        """Gets the from_guest of this BookingNotes.

        Notes your guest has entered as part of the booking. These allow them to communicate anything to the hotel (e.g. that they're travelling for a special occassion or have a particular room assignment preference).

        :return: The from_guest of this BookingNotes.
        :rtype: str
        """
        return self._from_guest

    @from_guest.setter
    def from_guest(self, from_guest):
        """Sets the from_guest of this BookingNotes.

        Notes your guest has entered as part of the booking. These allow them to communicate anything to the hotel (e.g. that they're travelling for a special occassion or have a particular room assignment preference).

        :param from_guest: The from_guest of this BookingNotes.
        :type from_guest: str
        """
        if from_guest is None:
            raise ValueError("Invalid value for `from_guest`, must not be `None`")

        self._from_guest = from_guest

    @property
    def from_seller(self):
        """Gets the from_seller of this BookingNotes.

        Notes you as a seller want to communicated to the hotel. These might be around operational processes to watch out for. Impala communicates these as coming from you.

        :return: The from_seller of this BookingNotes.
        :rtype: str
        """
        return self._from_seller

    @from_seller.setter
    def from_seller(self, from_seller):
        """Sets the from_seller of this BookingNotes.

        Notes you as a seller want to communicated to the hotel. These might be around operational processes to watch out for. Impala communicates these as coming from you.

        :param from_seller: The from_seller of this BookingNotes.
        :type from_seller: str
        """
        if from_seller is None:
            raise ValueError("Invalid value for `from_seller`, must not be `None`")

        self._from_seller = from_seller
