# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booked_rate_retail_rate import BookedRateRetailRate
from openapi_server.models.cancellation_policy import CancellationPolicy
from openapi_server.models.hotel_agreement_stub import HotelAgreementStub
from openapi_server.models.rate_component import RateComponent
from openapi_server import util


class BookedRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancellation_policies: list[CancellationPolicy]=None, components: list[RateComponent]=None, end: date=None, hotel_agreement: HotelAgreementStub=None, max_occupancy: float=None, retail_rate: BookedRateRetailRate=None, seller_commission_percentage: float=None, start: date=None):
        """BookedRate - a model defined in OpenAPI

        :param cancellation_policies: The cancellation_policies of this BookedRate.
        :param components: The components of this BookedRate.
        :param end: The end of this BookedRate.
        :param hotel_agreement: The hotel_agreement of this BookedRate.
        :param max_occupancy: The max_occupancy of this BookedRate.
        :param retail_rate: The retail_rate of this BookedRate.
        :param seller_commission_percentage: The seller_commission_percentage of this BookedRate.
        :param start: The start of this BookedRate.
        """
        self.openapi_types = {
            'cancellation_policies': list[CancellationPolicy],
            'components': list[RateComponent],
            'end': date,
            'hotel_agreement': HotelAgreementStub,
            'max_occupancy': float,
            'retail_rate': BookedRateRetailRate,
            'seller_commission_percentage': float,
            'start': date
        }

        self.attribute_map = {
            'cancellation_policies': 'cancellationPolicies',
            'components': 'components',
            'end': 'end',
            'hotel_agreement': 'hotelAgreement',
            'max_occupancy': 'maxOccupancy',
            'retail_rate': 'retailRate',
            'seller_commission_percentage': 'sellerCommissionPercentage',
            'start': 'start'
        }

        self._cancellation_policies = cancellation_policies
        self._components = components
        self._end = end
        self._hotel_agreement = hotel_agreement
        self._max_occupancy = max_occupancy
        self._retail_rate = retail_rate
        self._seller_commission_percentage = seller_commission_percentage
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookedRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookedRate of this BookedRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancellation_policies(self):
        """Gets the cancellation_policies of this BookedRate.


        :return: The cancellation_policies of this BookedRate.
        :rtype: list[CancellationPolicy]
        """
        return self._cancellation_policies

    @cancellation_policies.setter
    def cancellation_policies(self, cancellation_policies):
        """Sets the cancellation_policies of this BookedRate.


        :param cancellation_policies: The cancellation_policies of this BookedRate.
        :type cancellation_policies: list[CancellationPolicy]
        """
        if cancellation_policies is None:
            raise ValueError("Invalid value for `cancellation_policies`, must not be `None`")
        if cancellation_policies is not None and len(cancellation_policies) < 1:
            raise ValueError("Invalid value for `cancellation_policies`, number of items must be greater than or equal to `1`")

        self._cancellation_policies = cancellation_policies

    @property
    def components(self):
        """Gets the components of this BookedRate.


        :return: The components of this BookedRate.
        :rtype: list[RateComponent]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this BookedRate.


        :param components: The components of this BookedRate.
        :type components: list[RateComponent]
        """
        if components is None:
            raise ValueError("Invalid value for `components`, must not be `None`")
        if components is not None and len(components) < 0:
            raise ValueError("Invalid value for `components`, number of items must be greater than or equal to `0`")

        self._components = components

    @property
    def end(self):
        """Gets the end of this BookedRate.


        :return: The end of this BookedRate.
        :rtype: date
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this BookedRate.


        :param end: The end of this BookedRate.
        :type end: date
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")
        if end is not None and len(end) < 1:
            raise ValueError("Invalid value for `end`, length must be greater than or equal to `1`")

        self._end = end

    @property
    def hotel_agreement(self):
        """Gets the hotel_agreement of this BookedRate.


        :return: The hotel_agreement of this BookedRate.
        :rtype: HotelAgreementStub
        """
        return self._hotel_agreement

    @hotel_agreement.setter
    def hotel_agreement(self, hotel_agreement):
        """Sets the hotel_agreement of this BookedRate.


        :param hotel_agreement: The hotel_agreement of this BookedRate.
        :type hotel_agreement: HotelAgreementStub
        """
        if hotel_agreement is None:
            raise ValueError("Invalid value for `hotel_agreement`, must not be `None`")

        self._hotel_agreement = hotel_agreement

    @property
    def max_occupancy(self):
        """Gets the max_occupancy of this BookedRate.


        :return: The max_occupancy of this BookedRate.
        :rtype: float
        """
        return self._max_occupancy

    @max_occupancy.setter
    def max_occupancy(self, max_occupancy):
        """Sets the max_occupancy of this BookedRate.


        :param max_occupancy: The max_occupancy of this BookedRate.
        :type max_occupancy: float
        """

        self._max_occupancy = max_occupancy

    @property
    def retail_rate(self):
        """Gets the retail_rate of this BookedRate.


        :return: The retail_rate of this BookedRate.
        :rtype: BookedRateRetailRate
        """
        return self._retail_rate

    @retail_rate.setter
    def retail_rate(self, retail_rate):
        """Sets the retail_rate of this BookedRate.


        :param retail_rate: The retail_rate of this BookedRate.
        :type retail_rate: BookedRateRetailRate
        """
        if retail_rate is None:
            raise ValueError("Invalid value for `retail_rate`, must not be `None`")

        self._retail_rate = retail_rate

    @property
    def seller_commission_percentage(self):
        """Gets the seller_commission_percentage of this BookedRate.

        The commission percentage you as a seller will earn from this booking, based on `retailRate.total`.

        :return: The seller_commission_percentage of this BookedRate.
        :rtype: float
        """
        return self._seller_commission_percentage

    @seller_commission_percentage.setter
    def seller_commission_percentage(self, seller_commission_percentage):
        """Sets the seller_commission_percentage of this BookedRate.

        The commission percentage you as a seller will earn from this booking, based on `retailRate.total`.

        :param seller_commission_percentage: The seller_commission_percentage of this BookedRate.
        :type seller_commission_percentage: float
        """
        if seller_commission_percentage is None:
            raise ValueError("Invalid value for `seller_commission_percentage`, must not be `None`")

        self._seller_commission_percentage = seller_commission_percentage

    @property
    def start(self):
        """Gets the start of this BookedRate.


        :return: The start of this BookedRate.
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this BookedRate.


        :param start: The start of this BookedRate.
        :type start: date
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")
        if start is not None and len(start) < 1:
            raise ValueError("Invalid value for `start`, length must be greater than or equal to `1`")

        self._start = start
