# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class CancellationFee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: float=None, price: Money=None, type: str=None):
        """CancellationFee - a model defined in OpenAPI

        :param count: The count of this CancellationFee.
        :param price: The price of this CancellationFee.
        :param type: The type of this CancellationFee.
        """
        self.openapi_types = {
            'count': float,
            'price': Money,
            'type': str
        }

        self.attribute_map = {
            'count': 'count',
            'price': 'price',
            'type': 'type'
        }

        self._count = count
        self._price = price
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancellationFee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cancellationFee of this CancellationFee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this CancellationFee.

        The value that is used in calculation of the cost. This could be 50 in case of a 50% fee being charged for a type \"PERCENTAGE\" or 2 in case of the initial two nights of the stay being charged in full as a fee if the type is \"NIGHTS\".

        :return: The count of this CancellationFee.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this CancellationFee.

        The value that is used in calculation of the cost. This could be 50 in case of a 50% fee being charged for a type \"PERCENTAGE\" or 2 in case of the initial two nights of the stay being charged in full as a fee if the type is \"NIGHTS\".

        :param count: The count of this CancellationFee.
        :type count: float
        """

        self._count = count

    @property
    def price(self):
        """Gets the price of this CancellationFee.


        :return: The price of this CancellationFee.
        :rtype: Money
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CancellationFee.


        :param price: The price of this CancellationFee.
        :type price: Money
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def type(self):
        """Gets the type of this CancellationFee.

        The way in which the cancellation fee is calculated. This can be \"NONE\" in case a full refund is paid out, \"NON_REFUNDABLE\" if no refund is paid out and the full amount is due, \"PERCENTAGE\" if a percentage of the total price for the stay is charged as cancellation fee, \"NIGHTS\" if a defined number of initial nights of the stay are charged in full as cancellation fee or \"FLAT\" in case a flat cancellation fee is charged.

        :return: The type of this CancellationFee.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CancellationFee.

        The way in which the cancellation fee is calculated. This can be \"NONE\" in case a full refund is paid out, \"NON_REFUNDABLE\" if no refund is paid out and the full amount is due, \"PERCENTAGE\" if a percentage of the total price for the stay is charged as cancellation fee, \"NIGHTS\" if a defined number of initial nights of the stay are charged in full as cancellation fee or \"FLAT\" in case a flat cancellation fee is charged.

        :param type: The type of this CancellationFee.
        :type type: str
        """
        allowed_values = ["NON_REFUNDABLE", "PERCENTAGE", "NONE", "NIGHTS", "FLAT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
