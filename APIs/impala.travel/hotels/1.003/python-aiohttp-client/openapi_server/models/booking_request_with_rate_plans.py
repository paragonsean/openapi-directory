# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booking_contact import BookingContact
from openapi_server.models.notes_booking import NotesBooking
from openapi_server.models.rate_plan_room import RatePlanRoom
from openapi_server import util


class BookingRequestWithRatePlans(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, booking_contact: BookingContact=None, deal_id: str=None, end: date=None, notes: NotesBooking=None, payment_type: str=None, rooms: List[RatePlanRoom]=None, start: date=None):
        """BookingRequestWithRatePlans - a model defined in OpenAPI

        :param booking_contact: The booking_contact of this BookingRequestWithRatePlans.
        :param deal_id: The deal_id of this BookingRequestWithRatePlans.
        :param end: The end of this BookingRequestWithRatePlans.
        :param notes: The notes of this BookingRequestWithRatePlans.
        :param payment_type: The payment_type of this BookingRequestWithRatePlans.
        :param rooms: The rooms of this BookingRequestWithRatePlans.
        :param start: The start of this BookingRequestWithRatePlans.
        """
        self.openapi_types = {
            'booking_contact': BookingContact,
            'deal_id': str,
            'end': date,
            'notes': NotesBooking,
            'payment_type': str,
            'rooms': List[RatePlanRoom],
            'start': date
        }

        self.attribute_map = {
            'booking_contact': 'bookingContact',
            'deal_id': 'dealId',
            'end': 'end',
            'notes': 'notes',
            'payment_type': 'paymentType',
            'rooms': 'rooms',
            'start': 'start'
        }

        self._booking_contact = booking_contact
        self._deal_id = deal_id
        self._end = end
        self._notes = notes
        self._payment_type = payment_type
        self._rooms = rooms
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingRequestWithRatePlans':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookingRequestWithRatePlans of this BookingRequestWithRatePlans.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booking_contact(self):
        """Gets the booking_contact of this BookingRequestWithRatePlans.


        :return: The booking_contact of this BookingRequestWithRatePlans.
        :rtype: BookingContact
        """
        return self._booking_contact

    @booking_contact.setter
    def booking_contact(self, booking_contact):
        """Sets the booking_contact of this BookingRequestWithRatePlans.


        :param booking_contact: The booking_contact of this BookingRequestWithRatePlans.
        :type booking_contact: BookingContact
        """
        if booking_contact is None:
            raise ValueError("Invalid value for `booking_contact`, must not be `None`")

        self._booking_contact = booking_contact

    @property
    def deal_id(self):
        """Gets the deal_id of this BookingRequestWithRatePlans.

        The id of the deal that contains agreement made between the hotel and company

        :return: The deal_id of this BookingRequestWithRatePlans.
        :rtype: str
        """
        return self._deal_id

    @deal_id.setter
    def deal_id(self, deal_id):
        """Sets the deal_id of this BookingRequestWithRatePlans.

        The id of the deal that contains agreement made between the hotel and company

        :param deal_id: The deal_id of this BookingRequestWithRatePlans.
        :type deal_id: str
        """

        self._deal_id = deal_id

    @property
    def end(self):
        """Gets the end of this BookingRequestWithRatePlans.

        The last day of the desired stay range in ISO 8601 format YYYY-MM-DD.

        :return: The end of this BookingRequestWithRatePlans.
        :rtype: date
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this BookingRequestWithRatePlans.

        The last day of the desired stay range in ISO 8601 format YYYY-MM-DD.

        :param end: The end of this BookingRequestWithRatePlans.
        :type end: date
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")

        self._end = end

    @property
    def notes(self):
        """Gets the notes of this BookingRequestWithRatePlans.


        :return: The notes of this BookingRequestWithRatePlans.
        :rtype: NotesBooking
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this BookingRequestWithRatePlans.


        :param notes: The notes of this BookingRequestWithRatePlans.
        :type notes: NotesBooking
        """

        self._notes = notes

    @property
    def payment_type(self):
        """Gets the payment_type of this BookingRequestWithRatePlans.

        How will the guest make payment for this booking?

        :return: The payment_type of this BookingRequestWithRatePlans.
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this BookingRequestWithRatePlans.

        How will the guest make payment for this booking?

        :param payment_type: The payment_type of this BookingRequestWithRatePlans.
        :type payment_type: str
        """
        allowed_values = ["API"]  # noqa: E501
        if payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_type` ({0}), must be one of {1}"
                .format(payment_type, allowed_values)
            )

        self._payment_type = payment_type

    @property
    def rooms(self):
        """Gets the rooms of this BookingRequestWithRatePlans.

        Array of rooms booked within this booking

        :return: The rooms of this BookingRequestWithRatePlans.
        :rtype: List[RatePlanRoom]
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """Sets the rooms of this BookingRequestWithRatePlans.

        Array of rooms booked within this booking

        :param rooms: The rooms of this BookingRequestWithRatePlans.
        :type rooms: List[RatePlanRoom]
        """
        if rooms is None:
            raise ValueError("Invalid value for `rooms`, must not be `None`")

        self._rooms = rooms

    @property
    def start(self):
        """Gets the start of this BookingRequestWithRatePlans.

        The first day of the desired stay range in ISO 8601 format YYYY-MM-DD.

        :return: The start of this BookingRequestWithRatePlans.
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this BookingRequestWithRatePlans.

        The first day of the desired stay range in ISO 8601 format YYYY-MM-DD.

        :param start: The start of this BookingRequestWithRatePlans.
        :type start: date
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start
