# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notes_booked_room import NotesBookedRoom
from openapi_server import util


class BookingRequestRoomsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adults: float=None, notes: NotesBookedRoom=None, rate_id: str=None):
        """BookingRequestRoomsInner - a model defined in OpenAPI

        :param adults: The adults of this BookingRequestRoomsInner.
        :param notes: The notes of this BookingRequestRoomsInner.
        :param rate_id: The rate_id of this BookingRequestRoomsInner.
        """
        self.openapi_types = {
            'adults': float,
            'notes': NotesBookedRoom,
            'rate_id': str
        }

        self.attribute_map = {
            'adults': 'adults',
            'notes': 'notes',
            'rate_id': 'rateId'
        }

        self._adults = adults
        self._notes = notes
        self._rate_id = rate_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingRequestRoomsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookingRequest_rooms_inner of this BookingRequestRoomsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adults(self):
        """Gets the adults of this BookingRequestRoomsInner.

        The number of adult guests staying in the room.

        :return: The adults of this BookingRequestRoomsInner.
        :rtype: float
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this BookingRequestRoomsInner.

        The number of adult guests staying in the room.

        :param adults: The adults of this BookingRequestRoomsInner.
        :type adults: float
        """
        if adults is None:
            raise ValueError("Invalid value for `adults`, must not be `None`")

        self._adults = adults

    @property
    def notes(self):
        """Gets the notes of this BookingRequestRoomsInner.


        :return: The notes of this BookingRequestRoomsInner.
        :rtype: NotesBookedRoom
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this BookingRequestRoomsInner.


        :param notes: The notes of this BookingRequestRoomsInner.
        :type notes: NotesBookedRoom
        """

        self._notes = notes

    @property
    def rate_id(self):
        """Gets the rate_id of this BookingRequestRoomsInner.

        The unique identifier of this rate within Impala. Every rate returned in the `roomTypes[].rates[]` array when retrieving hotel availability includes this id.

        :return: The rate_id of this BookingRequestRoomsInner.
        :rtype: str
        """
        return self._rate_id

    @rate_id.setter
    def rate_id(self, rate_id):
        """Sets the rate_id of this BookingRequestRoomsInner.

        The unique identifier of this rate within Impala. Every rate returned in the `roomTypes[].rates[]` array when retrieving hotel availability includes this id.

        :param rate_id: The rate_id of this BookingRequestRoomsInner.
        :type rate_id: str
        """
        if rate_id is None:
            raise ValueError("Invalid value for `rate_id`, must not be `None`")

        self._rate_id = rate_id
