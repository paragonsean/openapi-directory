# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booked_rate import BookedRate
from openapi_server.models.booked_room_room_type import BookedRoomRoomType
from openapi_server.models.money import Money
from openapi_server.models.notes_booked_room import NotesBookedRoom
from openapi_server import util


class BookedRoom(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adults: float=None, notes: NotesBookedRoom=None, rate: BookedRate=None, room_type: BookedRoomRoomType=None, seller_to_impala_payment: Money=None):
        """BookedRoom - a model defined in OpenAPI

        :param adults: The adults of this BookedRoom.
        :param notes: The notes of this BookedRoom.
        :param rate: The rate of this BookedRoom.
        :param room_type: The room_type of this BookedRoom.
        :param seller_to_impala_payment: The seller_to_impala_payment of this BookedRoom.
        """
        self.openapi_types = {
            'adults': float,
            'notes': NotesBookedRoom,
            'rate': BookedRate,
            'room_type': BookedRoomRoomType,
            'seller_to_impala_payment': Money
        }

        self.attribute_map = {
            'adults': 'adults',
            'notes': 'notes',
            'rate': 'rate',
            'room_type': 'roomType',
            'seller_to_impala_payment': 'sellerToImpalaPayment'
        }

        self._adults = adults
        self._notes = notes
        self._rate = rate
        self._room_type = room_type
        self._seller_to_impala_payment = seller_to_impala_payment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookedRoom':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookedRoom of this BookedRoom.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adults(self):
        """Gets the adults of this BookedRoom.

        Number of adult guests booked for this room type.

        :return: The adults of this BookedRoom.
        :rtype: float
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this BookedRoom.

        Number of adult guests booked for this room type.

        :param adults: The adults of this BookedRoom.
        :type adults: float
        """
        if adults is not None and adults < 1:
            raise ValueError("Invalid value for `adults`, must be a value greater than or equal to `1`")

        self._adults = adults

    @property
    def notes(self):
        """Gets the notes of this BookedRoom.


        :return: The notes of this BookedRoom.
        :rtype: NotesBookedRoom
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this BookedRoom.


        :param notes: The notes of this BookedRoom.
        :type notes: NotesBookedRoom
        """
        if notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")

        self._notes = notes

    @property
    def rate(self):
        """Gets the rate of this BookedRoom.


        :return: The rate of this BookedRoom.
        :rtype: BookedRate
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this BookedRoom.


        :param rate: The rate of this BookedRoom.
        :type rate: BookedRate
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")

        self._rate = rate

    @property
    def room_type(self):
        """Gets the room_type of this BookedRoom.


        :return: The room_type of this BookedRoom.
        :rtype: BookedRoomRoomType
        """
        return self._room_type

    @room_type.setter
    def room_type(self, room_type):
        """Sets the room_type of this BookedRoom.


        :param room_type: The room_type of this BookedRoom.
        :type room_type: BookedRoomRoomType
        """
        if room_type is None:
            raise ValueError("Invalid value for `room_type`, must not be `None`")

        self._room_type = room_type

    @property
    def seller_to_impala_payment(self):
        """Gets the seller_to_impala_payment of this BookedRoom.


        :return: The seller_to_impala_payment of this BookedRoom.
        :rtype: Money
        """
        return self._seller_to_impala_payment

    @seller_to_impala_payment.setter
    def seller_to_impala_payment(self, seller_to_impala_payment):
        """Sets the seller_to_impala_payment of this BookedRoom.


        :param seller_to_impala_payment: The seller_to_impala_payment of this BookedRoom.
        :type seller_to_impala_payment: Money
        """

        self._seller_to_impala_payment = seller_to_impala_payment
