# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.adjustment_condition_length_of_stay_rule_rules import AdjustmentConditionLengthOfStayRuleRules
from openapi_server import util


class AdjustmentConditionLengthOfStayRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rules: AdjustmentConditionLengthOfStayRuleRules=None, type: str=None):
        """AdjustmentConditionLengthOfStayRule - a model defined in OpenAPI

        :param rules: The rules of this AdjustmentConditionLengthOfStayRule.
        :param type: The type of this AdjustmentConditionLengthOfStayRule.
        """
        self.openapi_types = {
            'rules': AdjustmentConditionLengthOfStayRuleRules,
            'type': str
        }

        self.attribute_map = {
            'rules': 'rules',
            'type': 'type'
        }

        self._rules = rules
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdjustmentConditionLengthOfStayRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The adjustmentConditionLengthOfStayRule of this AdjustmentConditionLengthOfStayRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rules(self):
        """Gets the rules of this AdjustmentConditionLengthOfStayRule.


        :return: The rules of this AdjustmentConditionLengthOfStayRule.
        :rtype: AdjustmentConditionLengthOfStayRuleRules
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this AdjustmentConditionLengthOfStayRule.


        :param rules: The rules of this AdjustmentConditionLengthOfStayRule.
        :type rules: AdjustmentConditionLengthOfStayRuleRules
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")

        self._rules = rules

    @property
    def type(self):
        """Gets the type of this AdjustmentConditionLengthOfStayRule.

        The type of the condition. Currently we only support conditions based on length of stay.

        :return: The type of this AdjustmentConditionLengthOfStayRule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AdjustmentConditionLengthOfStayRule.

        The type of the condition. Currently we only support conditions based on length of stay.

        :param type: The type of this AdjustmentConditionLengthOfStayRule.
        :type type: str
        """
        allowed_values = ["LENGTH_OF_STAY"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
