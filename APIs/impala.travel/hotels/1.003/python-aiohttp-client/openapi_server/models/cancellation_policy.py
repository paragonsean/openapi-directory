# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cancellation_fee import CancellationFee
from openapi_server import util


class CancellationPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end: str=None, fee: CancellationFee=None, formatted: str=None, start: str=None):
        """CancellationPolicy - a model defined in OpenAPI

        :param end: The end of this CancellationPolicy.
        :param fee: The fee of this CancellationPolicy.
        :param formatted: The formatted of this CancellationPolicy.
        :param start: The start of this CancellationPolicy.
        """
        self.openapi_types = {
            'end': str,
            'fee': CancellationFee,
            'formatted': str,
            'start': str
        }

        self.attribute_map = {
            'end': 'end',
            'fee': 'fee',
            'formatted': 'formatted',
            'start': 'start'
        }

        self._end = end
        self._fee = fee
        self._formatted = formatted
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancellationPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cancellationPolicy of this CancellationPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end(self):
        """Gets the end of this CancellationPolicy.

        The time (in the hotel's local timezone) at which the policy takes effect, in ISO 8601 format. If omitted, the policy applies open-ended until the guests' stay.

        :return: The end of this CancellationPolicy.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this CancellationPolicy.

        The time (in the hotel's local timezone) at which the policy takes effect, in ISO 8601 format. If omitted, the policy applies open-ended until the guests' stay.

        :param end: The end of this CancellationPolicy.
        :type end: str
        """

        self._end = end

    @property
    def fee(self):
        """Gets the fee of this CancellationPolicy.


        :return: The fee of this CancellationPolicy.
        :rtype: CancellationFee
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this CancellationPolicy.


        :param fee: The fee of this CancellationPolicy.
        :type fee: CancellationFee
        """
        if fee is None:
            raise ValueError("Invalid value for `fee`, must not be `None`")

        self._fee = fee

    @property
    def formatted(self):
        """Gets the formatted of this CancellationPolicy.

        Human-readable plain English cancellation policy information, ready to be shown to your guests.

        :return: The formatted of this CancellationPolicy.
        :rtype: str
        """
        return self._formatted

    @formatted.setter
    def formatted(self, formatted):
        """Sets the formatted of this CancellationPolicy.

        Human-readable plain English cancellation policy information, ready to be shown to your guests.

        :param formatted: The formatted of this CancellationPolicy.
        :type formatted: str
        """
        if formatted is None:
            raise ValueError("Invalid value for `formatted`, must not be `None`")

        self._formatted = formatted

    @property
    def start(self):
        """Gets the start of this CancellationPolicy.

        The time (in the hotel's local timezone) at which the policy takes effect, in ISO 8601 format. If omitted, the policy is already in effect.

        :return: The start of this CancellationPolicy.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this CancellationPolicy.

        The time (in the hotel's local timezone) at which the policy takes effect, in ISO 8601 format. If omitted, the policy is already in effect.

        :param start: The start of this CancellationPolicy.
        :type start: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start
