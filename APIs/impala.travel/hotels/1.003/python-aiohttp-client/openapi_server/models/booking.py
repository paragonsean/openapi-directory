# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booked_room import BookedRoom
from openapi_server.models.booking_cancellation import BookingCancellation
from openapi_server.models.booking_contact import BookingContact
from openapi_server.models.booking_notes import BookingNotes
from openapi_server.models.hotel_stub import HotelStub
from openapi_server import util


class Booking(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, booked_rooms: List[BookedRoom]=None, booking_id: str=None, cancellation: BookingCancellation=None, contact: BookingContact=None, created_at: datetime=None, end: date=None, hotel: HotelStub=None, hotel_confirmation_code: str=None, notes: BookingNotes=None, payment_bearer_token: str=None, payment_client_secret: str=None, start: date=None, status: str=None, updated_at: datetime=None):
        """Booking - a model defined in OpenAPI

        :param booked_rooms: The booked_rooms of this Booking.
        :param booking_id: The booking_id of this Booking.
        :param cancellation: The cancellation of this Booking.
        :param contact: The contact of this Booking.
        :param created_at: The created_at of this Booking.
        :param end: The end of this Booking.
        :param hotel: The hotel of this Booking.
        :param hotel_confirmation_code: The hotel_confirmation_code of this Booking.
        :param notes: The notes of this Booking.
        :param payment_bearer_token: The payment_bearer_token of this Booking.
        :param payment_client_secret: The payment_client_secret of this Booking.
        :param start: The start of this Booking.
        :param status: The status of this Booking.
        :param updated_at: The updated_at of this Booking.
        """
        self.openapi_types = {
            'booked_rooms': List[BookedRoom],
            'booking_id': str,
            'cancellation': BookingCancellation,
            'contact': BookingContact,
            'created_at': datetime,
            'end': date,
            'hotel': HotelStub,
            'hotel_confirmation_code': str,
            'notes': BookingNotes,
            'payment_bearer_token': str,
            'payment_client_secret': str,
            'start': date,
            'status': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'booked_rooms': 'bookedRooms',
            'booking_id': 'bookingId',
            'cancellation': 'cancellation',
            'contact': 'contact',
            'created_at': 'createdAt',
            'end': 'end',
            'hotel': 'hotel',
            'hotel_confirmation_code': 'hotelConfirmationCode',
            'notes': 'notes',
            'payment_bearer_token': 'paymentBearerToken',
            'payment_client_secret': 'paymentClientSecret',
            'start': 'start',
            'status': 'status',
            'updated_at': 'updatedAt'
        }

        self._booked_rooms = booked_rooms
        self._booking_id = booking_id
        self._cancellation = cancellation
        self._contact = contact
        self._created_at = created_at
        self._end = end
        self._hotel = hotel
        self._hotel_confirmation_code = hotel_confirmation_code
        self._notes = notes
        self._payment_bearer_token = payment_bearer_token
        self._payment_client_secret = payment_client_secret
        self._start = start
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Booking':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The booking of this Booking.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def booked_rooms(self):
        """Gets the booked_rooms of this Booking.

        List of rooms booked

        :return: The booked_rooms of this Booking.
        :rtype: List[BookedRoom]
        """
        return self._booked_rooms

    @booked_rooms.setter
    def booked_rooms(self, booked_rooms):
        """Sets the booked_rooms of this Booking.

        List of rooms booked

        :param booked_rooms: The booked_rooms of this Booking.
        :type booked_rooms: List[BookedRoom]
        """
        if booked_rooms is None:
            raise ValueError("Invalid value for `booked_rooms`, must not be `None`")

        self._booked_rooms = booked_rooms

    @property
    def booking_id(self):
        """Gets the booking_id of this Booking.

        Unique identifier for this booking within the Impala platform.

        :return: The booking_id of this Booking.
        :rtype: str
        """
        return self._booking_id

    @booking_id.setter
    def booking_id(self, booking_id):
        """Sets the booking_id of this Booking.

        Unique identifier for this booking within the Impala platform.

        :param booking_id: The booking_id of this Booking.
        :type booking_id: str
        """
        if booking_id is None:
            raise ValueError("Invalid value for `booking_id`, must not be `None`")

        self._booking_id = booking_id

    @property
    def cancellation(self):
        """Gets the cancellation of this Booking.


        :return: The cancellation of this Booking.
        :rtype: BookingCancellation
        """
        return self._cancellation

    @cancellation.setter
    def cancellation(self, cancellation):
        """Sets the cancellation of this Booking.


        :param cancellation: The cancellation of this Booking.
        :type cancellation: BookingCancellation
        """

        self._cancellation = cancellation

    @property
    def contact(self):
        """Gets the contact of this Booking.


        :return: The contact of this Booking.
        :rtype: BookingContact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Booking.


        :param contact: The contact of this Booking.
        :type contact: BookingContact
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")

        self._contact = contact

    @property
    def created_at(self):
        """Gets the created_at of this Booking.

        Date and time (in UTC and ISO 8601 format) when the booking was created.

        :return: The created_at of this Booking.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Booking.

        Date and time (in UTC and ISO 8601 format) when the booking was created.

        :param created_at: The created_at of this Booking.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def end(self):
        """Gets the end of this Booking.

        The departure date of the booking.

        :return: The end of this Booking.
        :rtype: date
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Booking.

        The departure date of the booking.

        :param end: The end of this Booking.
        :type end: date
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")

        self._end = end

    @property
    def hotel(self):
        """Gets the hotel of this Booking.


        :return: The hotel of this Booking.
        :rtype: HotelStub
        """
        return self._hotel

    @hotel.setter
    def hotel(self, hotel):
        """Sets the hotel of this Booking.


        :param hotel: The hotel of this Booking.
        :type hotel: HotelStub
        """
        if hotel is None:
            raise ValueError("Invalid value for `hotel`, must not be `None`")

        self._hotel = hotel

    @property
    def hotel_confirmation_code(self):
        """Gets the hotel_confirmation_code of this Booking.

        The hotel's confirmation identifier for this booking.

        :return: The hotel_confirmation_code of this Booking.
        :rtype: str
        """
        return self._hotel_confirmation_code

    @hotel_confirmation_code.setter
    def hotel_confirmation_code(self, hotel_confirmation_code):
        """Sets the hotel_confirmation_code of this Booking.

        The hotel's confirmation identifier for this booking.

        :param hotel_confirmation_code: The hotel_confirmation_code of this Booking.
        :type hotel_confirmation_code: str
        """

        self._hotel_confirmation_code = hotel_confirmation_code

    @property
    def notes(self):
        """Gets the notes of this Booking.


        :return: The notes of this Booking.
        :rtype: BookingNotes
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Booking.


        :param notes: The notes of this Booking.
        :type notes: BookingNotes
        """
        if notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")

        self._notes = notes

    @property
    def payment_bearer_token(self):
        """Gets the payment_bearer_token of this Booking.

        If status is PAYMENT_REQUIRED, then this should be used as the Authorisation header for the POST to the /payments endpoint.

        :return: The payment_bearer_token of this Booking.
        :rtype: str
        """
        return self._payment_bearer_token

    @payment_bearer_token.setter
    def payment_bearer_token(self, payment_bearer_token):
        """Sets the payment_bearer_token of this Booking.

        If status is PAYMENT_REQUIRED, then this should be used as the Authorisation header for the POST to the /payments endpoint.

        :param payment_bearer_token: The payment_bearer_token of this Booking.
        :type payment_bearer_token: str
        """

        self._payment_bearer_token = payment_bearer_token

    @property
    def payment_client_secret(self):
        """Gets the payment_client_secret of this Booking.

        If status is PAYMENT_REQUIRED, then this should be used as the client secret when rendering Impala Payment Elements in the UI.

        :return: The payment_client_secret of this Booking.
        :rtype: str
        """
        return self._payment_client_secret

    @payment_client_secret.setter
    def payment_client_secret(self, payment_client_secret):
        """Sets the payment_client_secret of this Booking.

        If status is PAYMENT_REQUIRED, then this should be used as the client secret when rendering Impala Payment Elements in the UI.

        :param payment_client_secret: The payment_client_secret of this Booking.
        :type payment_client_secret: str
        """

        self._payment_client_secret = payment_client_secret

    @property
    def start(self):
        """Gets the start of this Booking.

        The arrival date of the booking.

        :return: The start of this Booking.
        :rtype: date
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Booking.

        The arrival date of the booking.

        :param start: The start of this Booking.
        :type start: date
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start

    @property
    def status(self):
        """Gets the status of this Booking.

        Status of this booking within the Impala platform. When you make a booking, it'll first appear as `PENDING` until we receive the hotel's confirmation details. At this point your booking will move to `ACCEPTED`.

        :return: The status of this Booking.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Booking.

        Status of this booking within the Impala platform. When you make a booking, it'll first appear as `PENDING` until we receive the hotel's confirmation details. At this point your booking will move to `ACCEPTED`.

        :param status: The status of this Booking.
        :type status: str
        """
        allowed_values = ["CANCELLED", "PENDING", "ACCEPTED", "PAYMENT_REQUIRED", "PAYMENT_ABANDONED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this Booking.

        Date and time (in UTC and ISO 8601 format) when the booking was last updated.

        :return: The updated_at of this Booking.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Booking.

        Date and time (in UTC and ISO 8601 format) when the booking was last updated.

        :param updated_at: The updated_at of this Booking.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
