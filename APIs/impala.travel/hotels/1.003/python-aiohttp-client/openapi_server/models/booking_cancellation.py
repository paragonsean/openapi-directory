# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cancellation_fee import CancellationFee
from openapi_server import util


class BookingCancellation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fee: CancellationFee=None):
        """BookingCancellation - a model defined in OpenAPI

        :param fee: The fee of this BookingCancellation.
        """
        self.openapi_types = {
            'fee': CancellationFee
        }

        self.attribute_map = {
            'fee': 'fee'
        }

        self._fee = fee

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookingCancellation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The booking_cancellation of this BookingCancellation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fee(self):
        """Gets the fee of this BookingCancellation.


        :return: The fee of this BookingCancellation.
        :rtype: CancellationFee
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this BookingCancellation.


        :param fee: The fee of this BookingCancellation.
        :type fee: CancellationFee
        """
        if fee is None:
            raise ValueError("Invalid value for `fee`, must not be `None`")

        self._fee = fee
