# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tax_or_fee import TaxOrFee
from openapi_server import util


class BookedRateRetailRateTaxesAndFees(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, included_in_rate: List[TaxOrFee]=None, pay_at_hotel: List[TaxOrFee]=None):
        """BookedRateRetailRateTaxesAndFees - a model defined in OpenAPI

        :param included_in_rate: The included_in_rate of this BookedRateRetailRateTaxesAndFees.
        :param pay_at_hotel: The pay_at_hotel of this BookedRateRetailRateTaxesAndFees.
        """
        self.openapi_types = {
            'included_in_rate': List[TaxOrFee],
            'pay_at_hotel': List[TaxOrFee]
        }

        self.attribute_map = {
            'included_in_rate': 'includedInRate',
            'pay_at_hotel': 'payAtHotel'
        }

        self._included_in_rate = included_in_rate
        self._pay_at_hotel = pay_at_hotel

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookedRateRetailRateTaxesAndFees':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookedRate_retailRate_taxesAndFees of this BookedRateRetailRateTaxesAndFees.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def included_in_rate(self):
        """Gets the included_in_rate of this BookedRateRetailRateTaxesAndFees.

        Taxes and fees that are included in the `retailRate.total` price paid at the time of booking.

        :return: The included_in_rate of this BookedRateRetailRateTaxesAndFees.
        :rtype: List[TaxOrFee]
        """
        return self._included_in_rate

    @included_in_rate.setter
    def included_in_rate(self, included_in_rate):
        """Sets the included_in_rate of this BookedRateRetailRateTaxesAndFees.

        Taxes and fees that are included in the `retailRate.total` price paid at the time of booking.

        :param included_in_rate: The included_in_rate of this BookedRateRetailRateTaxesAndFees.
        :type included_in_rate: List[TaxOrFee]
        """
        if included_in_rate is not None and len(included_in_rate) < 0:
            raise ValueError("Invalid value for `included_in_rate`, number of items must be greater than or equal to `0`")

        self._included_in_rate = included_in_rate

    @property
    def pay_at_hotel(self):
        """Gets the pay_at_hotel of this BookedRateRetailRateTaxesAndFees.

        Taxes and fees that need to be payed at the hotel (often upon arrival or departure). This frequently happens for fees that only need to be collected based on certain conditions (e.g. a guest coming from abroad or being older than a certain age).

        :return: The pay_at_hotel of this BookedRateRetailRateTaxesAndFees.
        :rtype: List[TaxOrFee]
        """
        return self._pay_at_hotel

    @pay_at_hotel.setter
    def pay_at_hotel(self, pay_at_hotel):
        """Sets the pay_at_hotel of this BookedRateRetailRateTaxesAndFees.

        Taxes and fees that need to be payed at the hotel (often upon arrival or departure). This frequently happens for fees that only need to be collected based on certain conditions (e.g. a guest coming from abroad or being older than a certain age).

        :param pay_at_hotel: The pay_at_hotel of this BookedRateRetailRateTaxesAndFees.
        :type pay_at_hotel: List[TaxOrFee]
        """
        if pay_at_hotel is not None and len(pay_at_hotel) < 0:
            raise ValueError("Invalid value for `pay_at_hotel`, number of items must be greater than or equal to `0`")

        self._pay_at_hotel = pay_at_hotel
