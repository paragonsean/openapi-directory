# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.booked_rate_retail_rate_taxes_and_fees import BookedRateRetailRateTaxesAndFees
from openapi_server.models.money import Money
from openapi_server import util


class BookedRateRetailRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, taxes_and_fees: BookedRateRetailRateTaxesAndFees=None, total: Money=None):
        """BookedRateRetailRate - a model defined in OpenAPI

        :param taxes_and_fees: The taxes_and_fees of this BookedRateRetailRate.
        :param total: The total of this BookedRateRetailRate.
        """
        self.openapi_types = {
            'taxes_and_fees': BookedRateRetailRateTaxesAndFees,
            'total': Money
        }

        self.attribute_map = {
            'taxes_and_fees': 'taxesAndFees',
            'total': 'total'
        }

        self._taxes_and_fees = taxes_and_fees
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BookedRateRetailRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The bookedRate_retailRate of this BookedRateRetailRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def taxes_and_fees(self):
        """Gets the taxes_and_fees of this BookedRateRetailRate.


        :return: The taxes_and_fees of this BookedRateRetailRate.
        :rtype: BookedRateRetailRateTaxesAndFees
        """
        return self._taxes_and_fees

    @taxes_and_fees.setter
    def taxes_and_fees(self, taxes_and_fees):
        """Sets the taxes_and_fees of this BookedRateRetailRate.


        :param taxes_and_fees: The taxes_and_fees of this BookedRateRetailRate.
        :type taxes_and_fees: BookedRateRetailRateTaxesAndFees
        """
        if taxes_and_fees is None:
            raise ValueError("Invalid value for `taxes_and_fees`, must not be `None`")

        self._taxes_and_fees = taxes_and_fees

    @property
    def total(self):
        """Gets the total of this BookedRateRetailRate.


        :return: The total of this BookedRateRetailRate.
        :rtype: Money
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this BookedRateRetailRate.


        :param total: The total of this BookedRateRetailRate.
        :type total: Money
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
