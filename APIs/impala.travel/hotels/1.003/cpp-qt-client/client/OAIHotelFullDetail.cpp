/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelFullDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelFullDetail::OAIHotelFullDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelFullDetail::OAIHotelFullDetail() {
    this->initializeModel();
}

OAIHotelFullDetail::~OAIHotelFullDetail() {}

void OAIHotelFullDetail::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_amenities_isSet = false;
    m_amenities_isValid = false;

    m_check_in_isSet = false;
    m_check_in_isValid = false;

    m_check_out_isSet = false;
    m_check_out_isValid = false;

    m_contractable_isSet = false;
    m_contractable_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_external_urls_isSet = false;
    m_external_urls_isValid = false;

    m_hotel_id_isSet = false;
    m_hotel_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_numbers_isSet = false;
    m_phone_numbers_isValid = false;

    m_room_count_isSet = false;
    m_room_count_isValid = false;

    m_room_types_isSet = false;
    m_room_types_isValid = false;

    m_star_rating_isSet = false;
    m_star_rating_isValid = false;

    m_terms_and_conditions_isSet = false;
    m_terms_and_conditions_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAIHotelFullDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelFullDetail::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_amenities_isValid = ::OpenAPI::fromJsonValue(m_amenities, json[QString("amenities")]);
    m_amenities_isSet = !json[QString("amenities")].isNull() && m_amenities_isValid;

    m_check_in_isValid = ::OpenAPI::fromJsonValue(m_check_in, json[QString("checkIn")]);
    m_check_in_isSet = !json[QString("checkIn")].isNull() && m_check_in_isValid;

    m_check_out_isValid = ::OpenAPI::fromJsonValue(m_check_out, json[QString("checkOut")]);
    m_check_out_isSet = !json[QString("checkOut")].isNull() && m_check_out_isValid;

    m_contractable_isValid = ::OpenAPI::fromJsonValue(m_contractable, json[QString("contractable")]);
    m_contractable_isSet = !json[QString("contractable")].isNull() && m_contractable_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_external_urls_isValid = ::OpenAPI::fromJsonValue(m_external_urls, json[QString("externalUrls")]);
    m_external_urls_isSet = !json[QString("externalUrls")].isNull() && m_external_urls_isValid;

    m_hotel_id_isValid = ::OpenAPI::fromJsonValue(m_hotel_id, json[QString("hotelId")]);
    m_hotel_id_isSet = !json[QString("hotelId")].isNull() && m_hotel_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_phone_numbers, json[QString("phoneNumbers")]);
    m_phone_numbers_isSet = !json[QString("phoneNumbers")].isNull() && m_phone_numbers_isValid;

    m_room_count_isValid = ::OpenAPI::fromJsonValue(m_room_count, json[QString("roomCount")]);
    m_room_count_isSet = !json[QString("roomCount")].isNull() && m_room_count_isValid;

    m_room_types_isValid = ::OpenAPI::fromJsonValue(m_room_types, json[QString("roomTypes")]);
    m_room_types_isSet = !json[QString("roomTypes")].isNull() && m_room_types_isValid;

    m_star_rating_isValid = ::OpenAPI::fromJsonValue(m_star_rating, json[QString("starRating")]);
    m_star_rating_isSet = !json[QString("starRating")].isNull() && m_star_rating_isValid;

    m_terms_and_conditions_isValid = ::OpenAPI::fromJsonValue(m_terms_and_conditions, json[QString("termsAndConditions")]);
    m_terms_and_conditions_isSet = !json[QString("termsAndConditions")].isNull() && m_terms_and_conditions_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("websiteUrl")]);
    m_website_url_isSet = !json[QString("websiteUrl")].isNull() && m_website_url_isValid;
}

QString OAIHotelFullDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelFullDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_amenities.size() > 0) {
        obj.insert(QString("amenities"), ::OpenAPI::toJsonValue(m_amenities));
    }
    if (m_check_in.isSet()) {
        obj.insert(QString("checkIn"), ::OpenAPI::toJsonValue(m_check_in));
    }
    if (m_check_out.isSet()) {
        obj.insert(QString("checkOut"), ::OpenAPI::toJsonValue(m_check_out));
    }
    if (m_contractable_isSet) {
        obj.insert(QString("contractable"), ::OpenAPI::toJsonValue(m_contractable));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_external_urls.size() > 0) {
        obj.insert(QString("externalUrls"), ::OpenAPI::toJsonValue(m_external_urls));
    }
    if (m_hotel_id_isSet) {
        obj.insert(QString("hotelId"), ::OpenAPI::toJsonValue(m_hotel_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_numbers.size() > 0) {
        obj.insert(QString("phoneNumbers"), ::OpenAPI::toJsonValue(m_phone_numbers));
    }
    if (m_room_count_isSet) {
        obj.insert(QString("roomCount"), ::OpenAPI::toJsonValue(m_room_count));
    }
    if (m_room_types.size() > 0) {
        obj.insert(QString("roomTypes"), ::OpenAPI::toJsonValue(m_room_types));
    }
    if (m_star_rating_isSet) {
        obj.insert(QString("starRating"), ::OpenAPI::toJsonValue(m_star_rating));
    }
    if (m_terms_and_conditions_isSet) {
        obj.insert(QString("termsAndConditions"), ::OpenAPI::toJsonValue(m_terms_and_conditions));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("websiteUrl"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

OAIAddress OAIHotelFullDetail::getAddress() const {
    return m_address;
}
void OAIHotelFullDetail::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIHotelFullDetail::is_address_Set() const{
    return m_address_isSet;
}

bool OAIHotelFullDetail::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAIAmenity> OAIHotelFullDetail::getAmenities() const {
    return m_amenities;
}
void OAIHotelFullDetail::setAmenities(const QList<OAIAmenity> &amenities) {
    m_amenities = amenities;
    m_amenities_isSet = true;
}

bool OAIHotelFullDetail::is_amenities_Set() const{
    return m_amenities_isSet;
}

bool OAIHotelFullDetail::is_amenities_Valid() const{
    return m_amenities_isValid;
}

OAITimeRange OAIHotelFullDetail::getCheckIn() const {
    return m_check_in;
}
void OAIHotelFullDetail::setCheckIn(const OAITimeRange &check_in) {
    m_check_in = check_in;
    m_check_in_isSet = true;
}

bool OAIHotelFullDetail::is_check_in_Set() const{
    return m_check_in_isSet;
}

bool OAIHotelFullDetail::is_check_in_Valid() const{
    return m_check_in_isValid;
}

OAITimeRange OAIHotelFullDetail::getCheckOut() const {
    return m_check_out;
}
void OAIHotelFullDetail::setCheckOut(const OAITimeRange &check_out) {
    m_check_out = check_out;
    m_check_out_isSet = true;
}

bool OAIHotelFullDetail::is_check_out_Set() const{
    return m_check_out_isSet;
}

bool OAIHotelFullDetail::is_check_out_Valid() const{
    return m_check_out_isValid;
}

bool OAIHotelFullDetail::isContractable() const {
    return m_contractable;
}
void OAIHotelFullDetail::setContractable(const bool &contractable) {
    m_contractable = contractable;
    m_contractable_isSet = true;
}

bool OAIHotelFullDetail::is_contractable_Set() const{
    return m_contractable_isSet;
}

bool OAIHotelFullDetail::is_contractable_Valid() const{
    return m_contractable_isValid;
}

QDateTime OAIHotelFullDetail::getCreatedAt() const {
    return m_created_at;
}
void OAIHotelFullDetail::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIHotelFullDetail::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIHotelFullDetail::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIHotelFullDetail::getCurrency() const {
    return m_currency;
}
void OAIHotelFullDetail::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIHotelFullDetail::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIHotelFullDetail::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIHotelFullDetail_description OAIHotelFullDetail::getDescription() const {
    return m_description;
}
void OAIHotelFullDetail::setDescription(const OAIHotelFullDetail_description &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIHotelFullDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIHotelFullDetail::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIHotelFullDetail::getEmails() const {
    return m_emails;
}
void OAIHotelFullDetail::setEmails(const QList<QString> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIHotelFullDetail::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIHotelFullDetail::is_emails_Valid() const{
    return m_emails_isValid;
}

QList<OAIExternalUrl> OAIHotelFullDetail::getExternalUrls() const {
    return m_external_urls;
}
void OAIHotelFullDetail::setExternalUrls(const QList<OAIExternalUrl> &external_urls) {
    m_external_urls = external_urls;
    m_external_urls_isSet = true;
}

bool OAIHotelFullDetail::is_external_urls_Set() const{
    return m_external_urls_isSet;
}

bool OAIHotelFullDetail::is_external_urls_Valid() const{
    return m_external_urls_isValid;
}

QString OAIHotelFullDetail::getHotelId() const {
    return m_hotel_id;
}
void OAIHotelFullDetail::setHotelId(const QString &hotel_id) {
    m_hotel_id = hotel_id;
    m_hotel_id_isSet = true;
}

bool OAIHotelFullDetail::is_hotel_id_Set() const{
    return m_hotel_id_isSet;
}

bool OAIHotelFullDetail::is_hotel_id_Valid() const{
    return m_hotel_id_isValid;
}

QList<OAIImage> OAIHotelFullDetail::getImages() const {
    return m_images;
}
void OAIHotelFullDetail::setImages(const QList<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIHotelFullDetail::is_images_Set() const{
    return m_images_isSet;
}

bool OAIHotelFullDetail::is_images_Valid() const{
    return m_images_isValid;
}

OAILocation OAIHotelFullDetail::getLocation() const {
    return m_location;
}
void OAIHotelFullDetail::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIHotelFullDetail::is_location_Set() const{
    return m_location_isSet;
}

bool OAIHotelFullDetail::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIHotelFullDetail::getName() const {
    return m_name;
}
void OAIHotelFullDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHotelFullDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHotelFullDetail::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIHotelFullDetail::getPhoneNumbers() const {
    return m_phone_numbers;
}
void OAIHotelFullDetail::setPhoneNumbers(const QList<QString> &phone_numbers) {
    m_phone_numbers = phone_numbers;
    m_phone_numbers_isSet = true;
}

bool OAIHotelFullDetail::is_phone_numbers_Set() const{
    return m_phone_numbers_isSet;
}

bool OAIHotelFullDetail::is_phone_numbers_Valid() const{
    return m_phone_numbers_isValid;
}

double OAIHotelFullDetail::getRoomCount() const {
    return m_room_count;
}
void OAIHotelFullDetail::setRoomCount(const double &room_count) {
    m_room_count = room_count;
    m_room_count_isSet = true;
}

bool OAIHotelFullDetail::is_room_count_Set() const{
    return m_room_count_isSet;
}

bool OAIHotelFullDetail::is_room_count_Valid() const{
    return m_room_count_isValid;
}

QList<OAIRoomType> OAIHotelFullDetail::getRoomTypes() const {
    return m_room_types;
}
void OAIHotelFullDetail::setRoomTypes(const QList<OAIRoomType> &room_types) {
    m_room_types = room_types;
    m_room_types_isSet = true;
}

bool OAIHotelFullDetail::is_room_types_Set() const{
    return m_room_types_isSet;
}

bool OAIHotelFullDetail::is_room_types_Valid() const{
    return m_room_types_isValid;
}

double OAIHotelFullDetail::getStarRating() const {
    return m_star_rating;
}
void OAIHotelFullDetail::setStarRating(const double &star_rating) {
    m_star_rating = star_rating;
    m_star_rating_isSet = true;
}

bool OAIHotelFullDetail::is_star_rating_Set() const{
    return m_star_rating_isSet;
}

bool OAIHotelFullDetail::is_star_rating_Valid() const{
    return m_star_rating_isValid;
}

QString OAIHotelFullDetail::getTermsAndConditions() const {
    return m_terms_and_conditions;
}
void OAIHotelFullDetail::setTermsAndConditions(const QString &terms_and_conditions) {
    m_terms_and_conditions = terms_and_conditions;
    m_terms_and_conditions_isSet = true;
}

bool OAIHotelFullDetail::is_terms_and_conditions_Set() const{
    return m_terms_and_conditions_isSet;
}

bool OAIHotelFullDetail::is_terms_and_conditions_Valid() const{
    return m_terms_and_conditions_isValid;
}

QString OAIHotelFullDetail::getTimezone() const {
    return m_timezone;
}
void OAIHotelFullDetail::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIHotelFullDetail::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIHotelFullDetail::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QDateTime OAIHotelFullDetail::getUpdatedAt() const {
    return m_updated_at;
}
void OAIHotelFullDetail::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIHotelFullDetail::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIHotelFullDetail::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIHotelFullDetail::getWebsiteUrl() const {
    return m_website_url;
}
void OAIHotelFullDetail::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAIHotelFullDetail::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAIHotelFullDetail::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAIHotelFullDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amenities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_in.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_out.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contractable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_star_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_and_conditions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelFullDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_amenities_isValid && m_check_in_isValid && m_check_out_isValid && m_contractable_isValid && m_currency_isValid && m_emails_isValid && m_external_urls_isValid && m_hotel_id_isValid && m_images_isValid && m_location_isValid && m_name_isValid && m_phone_numbers_isValid && m_room_count_isValid && m_room_types_isValid && m_star_rating_isValid && m_terms_and_conditions_isValid && m_website_url_isValid && true;
}

} // namespace OpenAPI
