/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelAgreementStub.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelAgreementStub::OAIHotelAgreementStub(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelAgreementStub::OAIHotelAgreementStub() {
    this->initializeModel();
}

OAIHotelAgreementStub::~OAIHotelAgreementStub() {}

void OAIHotelAgreementStub::initializeModel() {

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_deal_id_isSet = false;
    m_deal_id_isValid = false;

    m_deals_sellable_isSet = false;
    m_deals_sellable_isValid = false;

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_hotel_agreement_id_isSet = false;
    m_hotel_agreement_id_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_special_instructions_isSet = false;
    m_special_instructions_isValid = false;
}

void OAIHotelAgreementStub::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelAgreementStub::fromJsonObject(QJsonObject json) {

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_deal_id_isValid = ::OpenAPI::fromJsonValue(m_deal_id, json[QString("dealId")]);
    m_deal_id_isSet = !json[QString("dealId")].isNull() && m_deal_id_isValid;

    m_deals_sellable_isValid = ::OpenAPI::fromJsonValue(m_deals_sellable, json[QString("dealsSellable")]);
    m_deals_sellable_isSet = !json[QString("dealsSellable")].isNull() && m_deals_sellable_isValid;

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_hotel_agreement_id_isValid = ::OpenAPI::fromJsonValue(m_hotel_agreement_id, json[QString("hotelAgreementId")]);
    m_hotel_agreement_id_isSet = !json[QString("hotelAgreementId")].isNull() && m_hotel_agreement_id_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_special_instructions_isValid = ::OpenAPI::fromJsonValue(m_special_instructions, json[QString("specialInstructions")]);
    m_special_instructions_isSet = !json[QString("specialInstructions")].isNull() && m_special_instructions_isValid;
}

QString OAIHotelAgreementStub::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelAgreementStub::asJsonObject() const {
    QJsonObject obj;
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_deal_id_isSet) {
        obj.insert(QString("dealId"), ::OpenAPI::toJsonValue(m_deal_id));
    }
    if (m_deals_sellable.isSet()) {
        obj.insert(QString("dealsSellable"), ::OpenAPI::toJsonValue(m_deals_sellable));
    }
    if (m_discount.isSet()) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_hotel_agreement_id_isSet) {
        obj.insert(QString("hotelAgreementId"), ::OpenAPI::toJsonValue(m_hotel_agreement_id));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_special_instructions_isSet) {
        obj.insert(QString("specialInstructions"), ::OpenAPI::toJsonValue(m_special_instructions));
    }
    return obj;
}

QList<QString> OAIHotelAgreementStub::getConditions() const {
    return m_conditions;
}
void OAIHotelAgreementStub::setConditions(const QList<QString> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIHotelAgreementStub::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIHotelAgreementStub::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAIHotelAgreementStub::getDealId() const {
    return m_deal_id;
}
void OAIHotelAgreementStub::setDealId(const QString &deal_id) {
    m_deal_id = deal_id;
    m_deal_id_isSet = true;
}

bool OAIHotelAgreementStub::is_deal_id_Set() const{
    return m_deal_id_isSet;
}

bool OAIHotelAgreementStub::is_deal_id_Valid() const{
    return m_deal_id_isValid;
}

OAIHotelAgreementStub_dealsSellable OAIHotelAgreementStub::getDealsSellable() const {
    return m_deals_sellable;
}
void OAIHotelAgreementStub::setDealsSellable(const OAIHotelAgreementStub_dealsSellable &deals_sellable) {
    m_deals_sellable = deals_sellable;
    m_deals_sellable_isSet = true;
}

bool OAIHotelAgreementStub::is_deals_sellable_Set() const{
    return m_deals_sellable_isSet;
}

bool OAIHotelAgreementStub::is_deals_sellable_Valid() const{
    return m_deals_sellable_isValid;
}

OAIHotelAgreementStub_discount OAIHotelAgreementStub::getDiscount() const {
    return m_discount;
}
void OAIHotelAgreementStub::setDiscount(const OAIHotelAgreementStub_discount &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAIHotelAgreementStub::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAIHotelAgreementStub::is_discount_Valid() const{
    return m_discount_isValid;
}

QString OAIHotelAgreementStub::getHotelAgreementId() const {
    return m_hotel_agreement_id;
}
void OAIHotelAgreementStub::setHotelAgreementId(const QString &hotel_agreement_id) {
    m_hotel_agreement_id = hotel_agreement_id;
    m_hotel_agreement_id_isSet = true;
}

bool OAIHotelAgreementStub::is_hotel_agreement_id_Set() const{
    return m_hotel_agreement_id_isSet;
}

bool OAIHotelAgreementStub::is_hotel_agreement_id_Valid() const{
    return m_hotel_agreement_id_isValid;
}

QString OAIHotelAgreementStub::getHref() const {
    return m_href;
}
void OAIHotelAgreementStub::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIHotelAgreementStub::is_href_Set() const{
    return m_href_isSet;
}

bool OAIHotelAgreementStub::is_href_Valid() const{
    return m_href_isValid;
}

QString OAIHotelAgreementStub::getSpecialInstructions() const {
    return m_special_instructions;
}
void OAIHotelAgreementStub::setSpecialInstructions(const QString &special_instructions) {
    m_special_instructions = special_instructions;
    m_special_instructions_isSet = true;
}

bool OAIHotelAgreementStub::is_special_instructions_Set() const{
    return m_special_instructions_isSet;
}

bool OAIHotelAgreementStub::is_special_instructions_Valid() const{
    return m_special_instructions_isValid;
}

bool OAIHotelAgreementStub::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deals_sellable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_agreement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelAgreementStub::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deal_id_isValid && m_hotel_agreement_id_isValid && m_special_instructions_isValid && true;
}

} // namespace OpenAPI
