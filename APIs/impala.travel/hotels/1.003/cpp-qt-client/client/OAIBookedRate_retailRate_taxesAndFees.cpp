/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBookedRate_retailRate_taxesAndFees.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBookedRate_retailRate_taxesAndFees::OAIBookedRate_retailRate_taxesAndFees(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBookedRate_retailRate_taxesAndFees::OAIBookedRate_retailRate_taxesAndFees() {
    this->initializeModel();
}

OAIBookedRate_retailRate_taxesAndFees::~OAIBookedRate_retailRate_taxesAndFees() {}

void OAIBookedRate_retailRate_taxesAndFees::initializeModel() {

    m_included_in_rate_isSet = false;
    m_included_in_rate_isValid = false;

    m_pay_at_hotel_isSet = false;
    m_pay_at_hotel_isValid = false;
}

void OAIBookedRate_retailRate_taxesAndFees::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBookedRate_retailRate_taxesAndFees::fromJsonObject(QJsonObject json) {

    m_included_in_rate_isValid = ::OpenAPI::fromJsonValue(m_included_in_rate, json[QString("includedInRate")]);
    m_included_in_rate_isSet = !json[QString("includedInRate")].isNull() && m_included_in_rate_isValid;

    m_pay_at_hotel_isValid = ::OpenAPI::fromJsonValue(m_pay_at_hotel, json[QString("payAtHotel")]);
    m_pay_at_hotel_isSet = !json[QString("payAtHotel")].isNull() && m_pay_at_hotel_isValid;
}

QString OAIBookedRate_retailRate_taxesAndFees::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBookedRate_retailRate_taxesAndFees::asJsonObject() const {
    QJsonObject obj;
    if (m_included_in_rate.size() > 0) {
        obj.insert(QString("includedInRate"), ::OpenAPI::toJsonValue(m_included_in_rate));
    }
    if (m_pay_at_hotel.size() > 0) {
        obj.insert(QString("payAtHotel"), ::OpenAPI::toJsonValue(m_pay_at_hotel));
    }
    return obj;
}

QList<OAITaxOrFee> OAIBookedRate_retailRate_taxesAndFees::getIncludedInRate() const {
    return m_included_in_rate;
}
void OAIBookedRate_retailRate_taxesAndFees::setIncludedInRate(const QList<OAITaxOrFee> &included_in_rate) {
    m_included_in_rate = included_in_rate;
    m_included_in_rate_isSet = true;
}

bool OAIBookedRate_retailRate_taxesAndFees::is_included_in_rate_Set() const{
    return m_included_in_rate_isSet;
}

bool OAIBookedRate_retailRate_taxesAndFees::is_included_in_rate_Valid() const{
    return m_included_in_rate_isValid;
}

QList<OAITaxOrFee> OAIBookedRate_retailRate_taxesAndFees::getPayAtHotel() const {
    return m_pay_at_hotel;
}
void OAIBookedRate_retailRate_taxesAndFees::setPayAtHotel(const QList<OAITaxOrFee> &pay_at_hotel) {
    m_pay_at_hotel = pay_at_hotel;
    m_pay_at_hotel_isSet = true;
}

bool OAIBookedRate_retailRate_taxesAndFees::is_pay_at_hotel_Set() const{
    return m_pay_at_hotel_isSet;
}

bool OAIBookedRate_retailRate_taxesAndFees::is_pay_at_hotel_Valid() const{
    return m_pay_at_hotel_isValid;
}

bool OAIBookedRate_retailRate_taxesAndFees::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_included_in_rate.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_at_hotel.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBookedRate_retailRate_taxesAndFees::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
