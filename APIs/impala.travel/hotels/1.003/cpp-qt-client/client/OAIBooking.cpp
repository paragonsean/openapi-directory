/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBooking.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBooking::OAIBooking(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBooking::OAIBooking() {
    this->initializeModel();
}

OAIBooking::~OAIBooking() {}

void OAIBooking::initializeModel() {

    m_booked_rooms_isSet = false;
    m_booked_rooms_isValid = false;

    m_booking_id_isSet = false;
    m_booking_id_isValid = false;

    m_cancellation_isSet = false;
    m_cancellation_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_hotel_isSet = false;
    m_hotel_isValid = false;

    m_hotel_confirmation_code_isSet = false;
    m_hotel_confirmation_code_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_payment_bearer_token_isSet = false;
    m_payment_bearer_token_isValid = false;

    m_payment_client_secret_isSet = false;
    m_payment_client_secret_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIBooking::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBooking::fromJsonObject(QJsonObject json) {

    m_booked_rooms_isValid = ::OpenAPI::fromJsonValue(m_booked_rooms, json[QString("bookedRooms")]);
    m_booked_rooms_isSet = !json[QString("bookedRooms")].isNull() && m_booked_rooms_isValid;

    m_booking_id_isValid = ::OpenAPI::fromJsonValue(m_booking_id, json[QString("bookingId")]);
    m_booking_id_isSet = !json[QString("bookingId")].isNull() && m_booking_id_isValid;

    m_cancellation_isValid = ::OpenAPI::fromJsonValue(m_cancellation, json[QString("cancellation")]);
    m_cancellation_isSet = !json[QString("cancellation")].isNull() && m_cancellation_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_hotel_isValid = ::OpenAPI::fromJsonValue(m_hotel, json[QString("hotel")]);
    m_hotel_isSet = !json[QString("hotel")].isNull() && m_hotel_isValid;

    m_hotel_confirmation_code_isValid = ::OpenAPI::fromJsonValue(m_hotel_confirmation_code, json[QString("hotelConfirmationCode")]);
    m_hotel_confirmation_code_isSet = !json[QString("hotelConfirmationCode")].isNull() && m_hotel_confirmation_code_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_payment_bearer_token_isValid = ::OpenAPI::fromJsonValue(m_payment_bearer_token, json[QString("paymentBearerToken")]);
    m_payment_bearer_token_isSet = !json[QString("paymentBearerToken")].isNull() && m_payment_bearer_token_isValid;

    m_payment_client_secret_isValid = ::OpenAPI::fromJsonValue(m_payment_client_secret, json[QString("paymentClientSecret")]);
    m_payment_client_secret_isSet = !json[QString("paymentClientSecret")].isNull() && m_payment_client_secret_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIBooking::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBooking::asJsonObject() const {
    QJsonObject obj;
    if (m_booked_rooms.size() > 0) {
        obj.insert(QString("bookedRooms"), ::OpenAPI::toJsonValue(m_booked_rooms));
    }
    if (m_booking_id_isSet) {
        obj.insert(QString("bookingId"), ::OpenAPI::toJsonValue(m_booking_id));
    }
    if (m_cancellation.isSet()) {
        obj.insert(QString("cancellation"), ::OpenAPI::toJsonValue(m_cancellation));
    }
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_hotel.isSet()) {
        obj.insert(QString("hotel"), ::OpenAPI::toJsonValue(m_hotel));
    }
    if (m_hotel_confirmation_code_isSet) {
        obj.insert(QString("hotelConfirmationCode"), ::OpenAPI::toJsonValue(m_hotel_confirmation_code));
    }
    if (m_notes.isSet()) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_payment_bearer_token_isSet) {
        obj.insert(QString("paymentBearerToken"), ::OpenAPI::toJsonValue(m_payment_bearer_token));
    }
    if (m_payment_client_secret_isSet) {
        obj.insert(QString("paymentClientSecret"), ::OpenAPI::toJsonValue(m_payment_client_secret));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QList<OAIBookedRoom> OAIBooking::getBookedRooms() const {
    return m_booked_rooms;
}
void OAIBooking::setBookedRooms(const QList<OAIBookedRoom> &booked_rooms) {
    m_booked_rooms = booked_rooms;
    m_booked_rooms_isSet = true;
}

bool OAIBooking::is_booked_rooms_Set() const{
    return m_booked_rooms_isSet;
}

bool OAIBooking::is_booked_rooms_Valid() const{
    return m_booked_rooms_isValid;
}

QString OAIBooking::getBookingId() const {
    return m_booking_id;
}
void OAIBooking::setBookingId(const QString &booking_id) {
    m_booking_id = booking_id;
    m_booking_id_isSet = true;
}

bool OAIBooking::is_booking_id_Set() const{
    return m_booking_id_isSet;
}

bool OAIBooking::is_booking_id_Valid() const{
    return m_booking_id_isValid;
}

OAIBooking_cancellation OAIBooking::getCancellation() const {
    return m_cancellation;
}
void OAIBooking::setCancellation(const OAIBooking_cancellation &cancellation) {
    m_cancellation = cancellation;
    m_cancellation_isSet = true;
}

bool OAIBooking::is_cancellation_Set() const{
    return m_cancellation_isSet;
}

bool OAIBooking::is_cancellation_Valid() const{
    return m_cancellation_isValid;
}

OAIBooking_contact OAIBooking::getContact() const {
    return m_contact;
}
void OAIBooking::setContact(const OAIBooking_contact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIBooking::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIBooking::is_contact_Valid() const{
    return m_contact_isValid;
}

QDateTime OAIBooking::getCreatedAt() const {
    return m_created_at;
}
void OAIBooking::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBooking::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBooking::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDate OAIBooking::getEnd() const {
    return m_end;
}
void OAIBooking::setEnd(const QDate &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIBooking::is_end_Set() const{
    return m_end_isSet;
}

bool OAIBooking::is_end_Valid() const{
    return m_end_isValid;
}

OAIHotelStub OAIBooking::getHotel() const {
    return m_hotel;
}
void OAIBooking::setHotel(const OAIHotelStub &hotel) {
    m_hotel = hotel;
    m_hotel_isSet = true;
}

bool OAIBooking::is_hotel_Set() const{
    return m_hotel_isSet;
}

bool OAIBooking::is_hotel_Valid() const{
    return m_hotel_isValid;
}

QString OAIBooking::getHotelConfirmationCode() const {
    return m_hotel_confirmation_code;
}
void OAIBooking::setHotelConfirmationCode(const QString &hotel_confirmation_code) {
    m_hotel_confirmation_code = hotel_confirmation_code;
    m_hotel_confirmation_code_isSet = true;
}

bool OAIBooking::is_hotel_confirmation_code_Set() const{
    return m_hotel_confirmation_code_isSet;
}

bool OAIBooking::is_hotel_confirmation_code_Valid() const{
    return m_hotel_confirmation_code_isValid;
}

OAIBooking_notes OAIBooking::getNotes() const {
    return m_notes;
}
void OAIBooking::setNotes(const OAIBooking_notes &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIBooking::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIBooking::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIBooking::getPaymentBearerToken() const {
    return m_payment_bearer_token;
}
void OAIBooking::setPaymentBearerToken(const QString &payment_bearer_token) {
    m_payment_bearer_token = payment_bearer_token;
    m_payment_bearer_token_isSet = true;
}

bool OAIBooking::is_payment_bearer_token_Set() const{
    return m_payment_bearer_token_isSet;
}

bool OAIBooking::is_payment_bearer_token_Valid() const{
    return m_payment_bearer_token_isValid;
}

QString OAIBooking::getPaymentClientSecret() const {
    return m_payment_client_secret;
}
void OAIBooking::setPaymentClientSecret(const QString &payment_client_secret) {
    m_payment_client_secret = payment_client_secret;
    m_payment_client_secret_isSet = true;
}

bool OAIBooking::is_payment_client_secret_Set() const{
    return m_payment_client_secret_isSet;
}

bool OAIBooking::is_payment_client_secret_Valid() const{
    return m_payment_client_secret_isValid;
}

QDate OAIBooking::getStart() const {
    return m_start;
}
void OAIBooking::setStart(const QDate &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIBooking::is_start_Set() const{
    return m_start_isSet;
}

bool OAIBooking::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIBooking::getStatus() const {
    return m_status;
}
void OAIBooking::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBooking::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBooking::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIBooking::getUpdatedAt() const {
    return m_updated_at;
}
void OAIBooking::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIBooking::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIBooking::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIBooking::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_booked_rooms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_confirmation_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_bearer_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBooking::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_booked_rooms_isValid && m_booking_id_isValid && m_contact_isValid && m_created_at_isValid && m_end_isValid && m_hotel_isValid && m_notes_isValid && m_start_isValid && m_status_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
