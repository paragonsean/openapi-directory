/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRatePlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRatePlan::OAIRatePlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRatePlan::OAIRatePlan() {
    this->initializeModel();
}

OAIRatePlan::~OAIRatePlan() {}

void OAIRatePlan::initializeModel() {

    m_adjustments_isSet = false;
    m_adjustments_isValid = false;

    m_components_isSet = false;
    m_components_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_hotel_id_isSet = false;
    m_hotel_id_isValid = false;

    m_rate_plan_id_isSet = false;
    m_rate_plan_id_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_room_types_isSet = false;
    m_room_types_isValid = false;
}

void OAIRatePlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRatePlan::fromJsonObject(QJsonObject json) {

    m_adjustments_isValid = ::OpenAPI::fromJsonValue(m_adjustments, json[QString("adjustments")]);
    m_adjustments_isSet = !json[QString("adjustments")].isNull() && m_adjustments_isValid;

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("components")]);
    m_components_isSet = !json[QString("components")].isNull() && m_components_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_hotel_id_isValid = ::OpenAPI::fromJsonValue(m_hotel_id, json[QString("hotelId")]);
    m_hotel_id_isSet = !json[QString("hotelId")].isNull() && m_hotel_id_isValid;

    m_rate_plan_id_isValid = ::OpenAPI::fromJsonValue(m_rate_plan_id, json[QString("ratePlanId")]);
    m_rate_plan_id_isSet = !json[QString("ratePlanId")].isNull() && m_rate_plan_id_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;

    m_room_types_isValid = ::OpenAPI::fromJsonValue(m_room_types, json[QString("roomTypes")]);
    m_room_types_isSet = !json[QString("roomTypes")].isNull() && m_room_types_isValid;
}

QString OAIRatePlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRatePlan::asJsonObject() const {
    QJsonObject obj;
    if (m_adjustments.size() > 0) {
        obj.insert(QString("adjustments"), ::OpenAPI::toJsonValue(m_adjustments));
    }
    if (m_components.size() > 0) {
        obj.insert(QString("components"), ::OpenAPI::toJsonValue(m_components));
    }
    if (m_conditions.isSet()) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_hotel_id_isSet) {
        obj.insert(QString("hotelId"), ::OpenAPI::toJsonValue(m_hotel_id));
    }
    if (m_rate_plan_id_isSet) {
        obj.insert(QString("ratePlanId"), ::OpenAPI::toJsonValue(m_rate_plan_id));
    }
    if (m_restrictions.isSet()) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_room_types.size() > 0) {
        obj.insert(QString("roomTypes"), ::OpenAPI::toJsonValue(m_room_types));
    }
    return obj;
}

QSet<OAIRateAdjustment> OAIRatePlan::getAdjustments() const {
    return m_adjustments;
}
void OAIRatePlan::setAdjustments(const QSet<OAIRateAdjustment> &adjustments) {
    m_adjustments = adjustments;
    m_adjustments_isSet = true;
}

bool OAIRatePlan::is_adjustments_Set() const{
    return m_adjustments_isSet;
}

bool OAIRatePlan::is_adjustments_Valid() const{
    return m_adjustments_isValid;
}

QList<OAIRateComponent> OAIRatePlan::getComponents() const {
    return m_components;
}
void OAIRatePlan::setComponents(const QList<OAIRateComponent> &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAIRatePlan::is_components_Set() const{
    return m_components_isSet;
}

bool OAIRatePlan::is_components_Valid() const{
    return m_components_isValid;
}

OAIConditions OAIRatePlan::getConditions() const {
    return m_conditions;
}
void OAIRatePlan::setConditions(const OAIConditions &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIRatePlan::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIRatePlan::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAIRatePlan::getDescription() const {
    return m_description;
}
void OAIRatePlan::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRatePlan::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRatePlan::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRatePlan::getHotelId() const {
    return m_hotel_id;
}
void OAIRatePlan::setHotelId(const QString &hotel_id) {
    m_hotel_id = hotel_id;
    m_hotel_id_isSet = true;
}

bool OAIRatePlan::is_hotel_id_Set() const{
    return m_hotel_id_isSet;
}

bool OAIRatePlan::is_hotel_id_Valid() const{
    return m_hotel_id_isValid;
}

double OAIRatePlan::getRatePlanId() const {
    return m_rate_plan_id;
}
void OAIRatePlan::setRatePlanId(const double &rate_plan_id) {
    m_rate_plan_id = rate_plan_id;
    m_rate_plan_id_isSet = true;
}

bool OAIRatePlan::is_rate_plan_id_Set() const{
    return m_rate_plan_id_isSet;
}

bool OAIRatePlan::is_rate_plan_id_Valid() const{
    return m_rate_plan_id_isValid;
}

OAIRatePlanRestrictions OAIRatePlan::getRestrictions() const {
    return m_restrictions;
}
void OAIRatePlan::setRestrictions(const OAIRatePlanRestrictions &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAIRatePlan::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAIRatePlan::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

QSet<OAIRatePlanRoomType> OAIRatePlan::getRoomTypes() const {
    return m_room_types;
}
void OAIRatePlan::setRoomTypes(const QSet<OAIRatePlanRoomType> &room_types) {
    m_room_types = room_types;
    m_room_types_isSet = true;
}

bool OAIRatePlan::is_room_types_Set() const{
    return m_room_types_isSet;
}

bool OAIRatePlan::is_room_types_Valid() const{
    return m_room_types_isValid;
}

bool OAIRatePlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjustments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRatePlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_conditions_isValid && m_description_isValid && m_hotel_id_isValid && m_rate_plan_id_isValid && m_restrictions_isValid && m_room_types_isValid && true;
}

} // namespace OpenAPI
