/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBookedRate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBookedRate::OAIBookedRate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBookedRate::OAIBookedRate() {
    this->initializeModel();
}

OAIBookedRate::~OAIBookedRate() {}

void OAIBookedRate::initializeModel() {

    m_cancellation_policies_isSet = false;
    m_cancellation_policies_isValid = false;

    m_components_isSet = false;
    m_components_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_hotel_agreement_isSet = false;
    m_hotel_agreement_isValid = false;

    m_max_occupancy_isSet = false;
    m_max_occupancy_isValid = false;

    m_retail_rate_isSet = false;
    m_retail_rate_isValid = false;

    m_seller_commission_percentage_isSet = false;
    m_seller_commission_percentage_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIBookedRate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBookedRate::fromJsonObject(QJsonObject json) {

    m_cancellation_policies_isValid = ::OpenAPI::fromJsonValue(m_cancellation_policies, json[QString("cancellationPolicies")]);
    m_cancellation_policies_isSet = !json[QString("cancellationPolicies")].isNull() && m_cancellation_policies_isValid;

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("components")]);
    m_components_isSet = !json[QString("components")].isNull() && m_components_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_hotel_agreement_isValid = ::OpenAPI::fromJsonValue(m_hotel_agreement, json[QString("hotelAgreement")]);
    m_hotel_agreement_isSet = !json[QString("hotelAgreement")].isNull() && m_hotel_agreement_isValid;

    m_max_occupancy_isValid = ::OpenAPI::fromJsonValue(m_max_occupancy, json[QString("maxOccupancy")]);
    m_max_occupancy_isSet = !json[QString("maxOccupancy")].isNull() && m_max_occupancy_isValid;

    m_retail_rate_isValid = ::OpenAPI::fromJsonValue(m_retail_rate, json[QString("retailRate")]);
    m_retail_rate_isSet = !json[QString("retailRate")].isNull() && m_retail_rate_isValid;

    m_seller_commission_percentage_isValid = ::OpenAPI::fromJsonValue(m_seller_commission_percentage, json[QString("sellerCommissionPercentage")]);
    m_seller_commission_percentage_isSet = !json[QString("sellerCommissionPercentage")].isNull() && m_seller_commission_percentage_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIBookedRate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBookedRate::asJsonObject() const {
    QJsonObject obj;
    if (m_cancellation_policies.size() > 0) {
        obj.insert(QString("cancellationPolicies"), ::OpenAPI::toJsonValue(m_cancellation_policies));
    }
    if (m_components.size() > 0) {
        obj.insert(QString("components"), ::OpenAPI::toJsonValue(m_components));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_hotel_agreement.isSet()) {
        obj.insert(QString("hotelAgreement"), ::OpenAPI::toJsonValue(m_hotel_agreement));
    }
    if (m_max_occupancy_isSet) {
        obj.insert(QString("maxOccupancy"), ::OpenAPI::toJsonValue(m_max_occupancy));
    }
    if (m_retail_rate.isSet()) {
        obj.insert(QString("retailRate"), ::OpenAPI::toJsonValue(m_retail_rate));
    }
    if (m_seller_commission_percentage_isSet) {
        obj.insert(QString("sellerCommissionPercentage"), ::OpenAPI::toJsonValue(m_seller_commission_percentage));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

QSet<OAICancellationPolicy> OAIBookedRate::getCancellationPolicies() const {
    return m_cancellation_policies;
}
void OAIBookedRate::setCancellationPolicies(const QSet<OAICancellationPolicy> &cancellation_policies) {
    m_cancellation_policies = cancellation_policies;
    m_cancellation_policies_isSet = true;
}

bool OAIBookedRate::is_cancellation_policies_Set() const{
    return m_cancellation_policies_isSet;
}

bool OAIBookedRate::is_cancellation_policies_Valid() const{
    return m_cancellation_policies_isValid;
}

QSet<OAIRateComponent> OAIBookedRate::getComponents() const {
    return m_components;
}
void OAIBookedRate::setComponents(const QSet<OAIRateComponent> &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAIBookedRate::is_components_Set() const{
    return m_components_isSet;
}

bool OAIBookedRate::is_components_Valid() const{
    return m_components_isValid;
}

QDate OAIBookedRate::getEnd() const {
    return m_end;
}
void OAIBookedRate::setEnd(const QDate &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIBookedRate::is_end_Set() const{
    return m_end_isSet;
}

bool OAIBookedRate::is_end_Valid() const{
    return m_end_isValid;
}

OAIHotelAgreementStub OAIBookedRate::getHotelAgreement() const {
    return m_hotel_agreement;
}
void OAIBookedRate::setHotelAgreement(const OAIHotelAgreementStub &hotel_agreement) {
    m_hotel_agreement = hotel_agreement;
    m_hotel_agreement_isSet = true;
}

bool OAIBookedRate::is_hotel_agreement_Set() const{
    return m_hotel_agreement_isSet;
}

bool OAIBookedRate::is_hotel_agreement_Valid() const{
    return m_hotel_agreement_isValid;
}

double OAIBookedRate::getMaxOccupancy() const {
    return m_max_occupancy;
}
void OAIBookedRate::setMaxOccupancy(const double &max_occupancy) {
    m_max_occupancy = max_occupancy;
    m_max_occupancy_isSet = true;
}

bool OAIBookedRate::is_max_occupancy_Set() const{
    return m_max_occupancy_isSet;
}

bool OAIBookedRate::is_max_occupancy_Valid() const{
    return m_max_occupancy_isValid;
}

OAIBookedRate_retailRate OAIBookedRate::getRetailRate() const {
    return m_retail_rate;
}
void OAIBookedRate::setRetailRate(const OAIBookedRate_retailRate &retail_rate) {
    m_retail_rate = retail_rate;
    m_retail_rate_isSet = true;
}

bool OAIBookedRate::is_retail_rate_Set() const{
    return m_retail_rate_isSet;
}

bool OAIBookedRate::is_retail_rate_Valid() const{
    return m_retail_rate_isValid;
}

float OAIBookedRate::getSellerCommissionPercentage() const {
    return m_seller_commission_percentage;
}
void OAIBookedRate::setSellerCommissionPercentage(const float &seller_commission_percentage) {
    m_seller_commission_percentage = seller_commission_percentage;
    m_seller_commission_percentage_isSet = true;
}

bool OAIBookedRate::is_seller_commission_percentage_Set() const{
    return m_seller_commission_percentage_isSet;
}

bool OAIBookedRate::is_seller_commission_percentage_Valid() const{
    return m_seller_commission_percentage_isValid;
}

QDate OAIBookedRate::getStart() const {
    return m_start;
}
void OAIBookedRate::setStart(const QDate &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIBookedRate::is_start_Set() const{
    return m_start_isSet;
}

bool OAIBookedRate::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIBookedRate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancellation_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_agreement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_occupancy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retail_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_commission_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBookedRate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cancellation_policies_isValid && m_components_isValid && m_end_isValid && m_hotel_agreement_isValid && m_retail_rate_isValid && m_seller_commission_percentage_isValid && m_start_isValid && true;
}

} // namespace OpenAPI
