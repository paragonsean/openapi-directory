/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoomType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoomType::OAIRoomType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoomType::OAIRoomType() {
    this->initializeModel();
}

OAIRoomType::~OAIRoomType() {}

void OAIRoomType::initializeModel() {

    m_amenities_isSet = false;
    m_amenities_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_max_occupancy_isSet = false;
    m_max_occupancy_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rates_isSet = false;
    m_rates_isValid = false;

    m_room_type_id_isSet = false;
    m_room_type_id_isValid = false;
}

void OAIRoomType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoomType::fromJsonObject(QJsonObject json) {

    m_amenities_isValid = ::OpenAPI::fromJsonValue(m_amenities, json[QString("amenities")]);
    m_amenities_isSet = !json[QString("amenities")].isNull() && m_amenities_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_max_occupancy_isValid = ::OpenAPI::fromJsonValue(m_max_occupancy, json[QString("maxOccupancy")]);
    m_max_occupancy_isSet = !json[QString("maxOccupancy")].isNull() && m_max_occupancy_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rates_isValid = ::OpenAPI::fromJsonValue(m_rates, json[QString("rates")]);
    m_rates_isSet = !json[QString("rates")].isNull() && m_rates_isValid;

    m_room_type_id_isValid = ::OpenAPI::fromJsonValue(m_room_type_id, json[QString("roomTypeId")]);
    m_room_type_id_isSet = !json[QString("roomTypeId")].isNull() && m_room_type_id_isValid;
}

QString OAIRoomType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoomType::asJsonObject() const {
    QJsonObject obj;
    if (m_amenities.size() > 0) {
        obj.insert(QString("amenities"), ::OpenAPI::toJsonValue(m_amenities));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_max_occupancy_isSet) {
        obj.insert(QString("maxOccupancy"), ::OpenAPI::toJsonValue(m_max_occupancy));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rates.size() > 0) {
        obj.insert(QString("rates"), ::OpenAPI::toJsonValue(m_rates));
    }
    if (m_room_type_id_isSet) {
        obj.insert(QString("roomTypeId"), ::OpenAPI::toJsonValue(m_room_type_id));
    }
    return obj;
}

QList<OAIAmenity> OAIRoomType::getAmenities() const {
    return m_amenities;
}
void OAIRoomType::setAmenities(const QList<OAIAmenity> &amenities) {
    m_amenities = amenities;
    m_amenities_isSet = true;
}

bool OAIRoomType::is_amenities_Set() const{
    return m_amenities_isSet;
}

bool OAIRoomType::is_amenities_Valid() const{
    return m_amenities_isValid;
}

QString OAIRoomType::getDescription() const {
    return m_description;
}
void OAIRoomType::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRoomType::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRoomType::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIImage> OAIRoomType::getImages() const {
    return m_images;
}
void OAIRoomType::setImages(const QList<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIRoomType::is_images_Set() const{
    return m_images_isSet;
}

bool OAIRoomType::is_images_Valid() const{
    return m_images_isValid;
}

qint32 OAIRoomType::getMaxOccupancy() const {
    return m_max_occupancy;
}
void OAIRoomType::setMaxOccupancy(const qint32 &max_occupancy) {
    m_max_occupancy = max_occupancy;
    m_max_occupancy_isSet = true;
}

bool OAIRoomType::is_max_occupancy_Set() const{
    return m_max_occupancy_isSet;
}

bool OAIRoomType::is_max_occupancy_Valid() const{
    return m_max_occupancy_isValid;
}

QString OAIRoomType::getName() const {
    return m_name;
}
void OAIRoomType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoomType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoomType::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIRate> OAIRoomType::getRates() const {
    return m_rates;
}
void OAIRoomType::setRates(const QList<OAIRate> &rates) {
    m_rates = rates;
    m_rates_isSet = true;
}

bool OAIRoomType::is_rates_Set() const{
    return m_rates_isSet;
}

bool OAIRoomType::is_rates_Valid() const{
    return m_rates_isValid;
}

QString OAIRoomType::getRoomTypeId() const {
    return m_room_type_id;
}
void OAIRoomType::setRoomTypeId(const QString &room_type_id) {
    m_room_type_id = room_type_id;
    m_room_type_id_isSet = true;
}

bool OAIRoomType::is_room_type_id_Set() const{
    return m_room_type_id_isSet;
}

bool OAIRoomType::is_room_type_id_Valid() const{
    return m_room_type_id_isValid;
}

bool OAIRoomType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amenities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_occupancy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoomType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amenities_isValid && m_description_isValid && m_images_isValid && m_max_occupancy_isValid && m_name_isValid && m_room_type_id_isValid && true;
}

} // namespace OpenAPI
