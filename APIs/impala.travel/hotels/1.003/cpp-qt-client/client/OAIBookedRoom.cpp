/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBookedRoom.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBookedRoom::OAIBookedRoom(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBookedRoom::OAIBookedRoom() {
    this->initializeModel();
}

OAIBookedRoom::~OAIBookedRoom() {}

void OAIBookedRoom::initializeModel() {

    m_adults_isSet = false;
    m_adults_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_room_type_isSet = false;
    m_room_type_isValid = false;

    m_seller_to_impala_payment_isSet = false;
    m_seller_to_impala_payment_isValid = false;
}

void OAIBookedRoom::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBookedRoom::fromJsonObject(QJsonObject json) {

    m_adults_isValid = ::OpenAPI::fromJsonValue(m_adults, json[QString("adults")]);
    m_adults_isSet = !json[QString("adults")].isNull() && m_adults_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_room_type_isValid = ::OpenAPI::fromJsonValue(m_room_type, json[QString("roomType")]);
    m_room_type_isSet = !json[QString("roomType")].isNull() && m_room_type_isValid;

    m_seller_to_impala_payment_isValid = ::OpenAPI::fromJsonValue(m_seller_to_impala_payment, json[QString("sellerToImpalaPayment")]);
    m_seller_to_impala_payment_isSet = !json[QString("sellerToImpalaPayment")].isNull() && m_seller_to_impala_payment_isValid;
}

QString OAIBookedRoom::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBookedRoom::asJsonObject() const {
    QJsonObject obj;
    if (m_adults_isSet) {
        obj.insert(QString("adults"), ::OpenAPI::toJsonValue(m_adults));
    }
    if (m_notes.isSet()) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_rate.isSet()) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_room_type.isSet()) {
        obj.insert(QString("roomType"), ::OpenAPI::toJsonValue(m_room_type));
    }
    if (m_seller_to_impala_payment.isSet()) {
        obj.insert(QString("sellerToImpalaPayment"), ::OpenAPI::toJsonValue(m_seller_to_impala_payment));
    }
    return obj;
}

double OAIBookedRoom::getAdults() const {
    return m_adults;
}
void OAIBookedRoom::setAdults(const double &adults) {
    m_adults = adults;
    m_adults_isSet = true;
}

bool OAIBookedRoom::is_adults_Set() const{
    return m_adults_isSet;
}

bool OAIBookedRoom::is_adults_Valid() const{
    return m_adults_isValid;
}

OAINotesBookedRoom OAIBookedRoom::getNotes() const {
    return m_notes;
}
void OAIBookedRoom::setNotes(const OAINotesBookedRoom &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIBookedRoom::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIBookedRoom::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIBookedRate OAIBookedRoom::getRate() const {
    return m_rate;
}
void OAIBookedRoom::setRate(const OAIBookedRate &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAIBookedRoom::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAIBookedRoom::is_rate_Valid() const{
    return m_rate_isValid;
}

OAIBookedRoom_roomType OAIBookedRoom::getRoomType() const {
    return m_room_type;
}
void OAIBookedRoom::setRoomType(const OAIBookedRoom_roomType &room_type) {
    m_room_type = room_type;
    m_room_type_isSet = true;
}

bool OAIBookedRoom::is_room_type_Set() const{
    return m_room_type_isSet;
}

bool OAIBookedRoom::is_room_type_Valid() const{
    return m_room_type_isValid;
}

OAIMoney OAIBookedRoom::getSellerToImpalaPayment() const {
    return m_seller_to_impala_payment;
}
void OAIBookedRoom::setSellerToImpalaPayment(const OAIMoney &seller_to_impala_payment) {
    m_seller_to_impala_payment = seller_to_impala_payment;
    m_seller_to_impala_payment_isSet = true;
}

bool OAIBookedRoom::is_seller_to_impala_payment_Set() const{
    return m_seller_to_impala_payment_isSet;
}

bool OAIBookedRoom::is_seller_to_impala_payment_Valid() const{
    return m_seller_to_impala_payment_isValid;
}

bool OAIBookedRoom::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adults_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_to_impala_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBookedRoom::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_notes_isValid && m_rate_isValid && m_room_type_isValid && true;
}

} // namespace OpenAPI
