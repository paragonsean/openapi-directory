/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRateCalendarApi_H
#define OAI_OAIRateCalendarApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGenericError.h"
#include "OAIListRatePlansForHotel_200_response.h"
#include "OAIRatePlan.h"
#include "OAIValidationError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRateCalendarApi : public QObject {
    Q_OBJECT

public:
    OAIRateCalendarApi(const int timeOut = 0);
    ~OAIRateCalendarApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  hotel_id QString [required]
    * @param[in]  rate_plan_id qint32 [required]
    * @param[in]  updated_at OAIObject [optional]
    * @param[in]  size double [optional]
    * @param[in]  offset double [optional]
    * @param[in]  start QString [optional]
    * @param[in]  end QString [optional]
    * @param[in]  room_type_id QString [optional]
    */
    virtual void listRatePlanForHotelForRatePlanId(const QString &hotel_id, const qint32 &rate_plan_id, const ::OpenAPI::OptionalParam<OAIObject> &updated_at = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &offset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &room_type_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  hotel_id QString [required]
    * @param[in]  updated_at OAIObject [optional]
    * @param[in]  size double [optional]
    * @param[in]  offset double [optional]
    * @param[in]  start QString [optional]
    * @param[in]  end QString [optional]
    * @param[in]  room_id QString [optional]
    */
    virtual void listRatePlansForHotel(const QString &hotel_id, const ::OpenAPI::OptionalParam<OAIObject> &updated_at = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &offset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &room_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void listRatePlanForHotelForRatePlanIdCallback(OAIHttpRequestWorker *worker);
    void listRatePlansForHotelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void listRatePlanForHotelForRatePlanIdSignal(OAIRatePlan summary);
    void listRatePlansForHotelSignal(OAIListRatePlansForHotel_200_response summary);


    void listRatePlanForHotelForRatePlanIdSignalFull(OAIHttpRequestWorker *worker, OAIRatePlan summary);
    void listRatePlansForHotelSignalFull(OAIHttpRequestWorker *worker, OAIListRatePlansForHotel_200_response summary);

    Q_DECL_DEPRECATED_X("Use listRatePlanForHotelForRatePlanIdSignalError() instead")
    void listRatePlanForHotelForRatePlanIdSignalE(OAIRatePlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRatePlanForHotelForRatePlanIdSignalError(OAIRatePlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRatePlansForHotelSignalError() instead")
    void listRatePlansForHotelSignalE(OAIListRatePlansForHotel_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRatePlansForHotelSignalError(OAIListRatePlansForHotel_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use listRatePlanForHotelForRatePlanIdSignalErrorFull() instead")
    void listRatePlanForHotelForRatePlanIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRatePlanForHotelForRatePlanIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRatePlansForHotelSignalErrorFull() instead")
    void listRatePlansForHotelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRatePlansForHotelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
