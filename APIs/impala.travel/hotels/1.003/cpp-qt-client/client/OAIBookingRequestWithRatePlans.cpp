/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBookingRequestWithRatePlans.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBookingRequestWithRatePlans::OAIBookingRequestWithRatePlans(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBookingRequestWithRatePlans::OAIBookingRequestWithRatePlans() {
    this->initializeModel();
}

OAIBookingRequestWithRatePlans::~OAIBookingRequestWithRatePlans() {}

void OAIBookingRequestWithRatePlans::initializeModel() {

    m_booking_contact_isSet = false;
    m_booking_contact_isValid = false;

    m_deal_id_isSet = false;
    m_deal_id_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_rooms_isSet = false;
    m_rooms_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIBookingRequestWithRatePlans::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBookingRequestWithRatePlans::fromJsonObject(QJsonObject json) {

    m_booking_contact_isValid = ::OpenAPI::fromJsonValue(m_booking_contact, json[QString("bookingContact")]);
    m_booking_contact_isSet = !json[QString("bookingContact")].isNull() && m_booking_contact_isValid;

    m_deal_id_isValid = ::OpenAPI::fromJsonValue(m_deal_id, json[QString("dealId")]);
    m_deal_id_isSet = !json[QString("dealId")].isNull() && m_deal_id_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("paymentType")]);
    m_payment_type_isSet = !json[QString("paymentType")].isNull() && m_payment_type_isValid;

    m_rooms_isValid = ::OpenAPI::fromJsonValue(m_rooms, json[QString("rooms")]);
    m_rooms_isSet = !json[QString("rooms")].isNull() && m_rooms_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIBookingRequestWithRatePlans::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBookingRequestWithRatePlans::asJsonObject() const {
    QJsonObject obj;
    if (m_booking_contact.isSet()) {
        obj.insert(QString("bookingContact"), ::OpenAPI::toJsonValue(m_booking_contact));
    }
    if (m_deal_id_isSet) {
        obj.insert(QString("dealId"), ::OpenAPI::toJsonValue(m_deal_id));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_notes.isSet()) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_payment_type_isSet) {
        obj.insert(QString("paymentType"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_rooms.size() > 0) {
        obj.insert(QString("rooms"), ::OpenAPI::toJsonValue(m_rooms));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

OAIBookingContact OAIBookingRequestWithRatePlans::getBookingContact() const {
    return m_booking_contact;
}
void OAIBookingRequestWithRatePlans::setBookingContact(const OAIBookingContact &booking_contact) {
    m_booking_contact = booking_contact;
    m_booking_contact_isSet = true;
}

bool OAIBookingRequestWithRatePlans::is_booking_contact_Set() const{
    return m_booking_contact_isSet;
}

bool OAIBookingRequestWithRatePlans::is_booking_contact_Valid() const{
    return m_booking_contact_isValid;
}

QString OAIBookingRequestWithRatePlans::getDealId() const {
    return m_deal_id;
}
void OAIBookingRequestWithRatePlans::setDealId(const QString &deal_id) {
    m_deal_id = deal_id;
    m_deal_id_isSet = true;
}

bool OAIBookingRequestWithRatePlans::is_deal_id_Set() const{
    return m_deal_id_isSet;
}

bool OAIBookingRequestWithRatePlans::is_deal_id_Valid() const{
    return m_deal_id_isValid;
}

QDate OAIBookingRequestWithRatePlans::getEnd() const {
    return m_end;
}
void OAIBookingRequestWithRatePlans::setEnd(const QDate &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIBookingRequestWithRatePlans::is_end_Set() const{
    return m_end_isSet;
}

bool OAIBookingRequestWithRatePlans::is_end_Valid() const{
    return m_end_isValid;
}

OAINotesBooking OAIBookingRequestWithRatePlans::getNotes() const {
    return m_notes;
}
void OAIBookingRequestWithRatePlans::setNotes(const OAINotesBooking &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIBookingRequestWithRatePlans::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIBookingRequestWithRatePlans::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIBookingRequestWithRatePlans::getPaymentType() const {
    return m_payment_type;
}
void OAIBookingRequestWithRatePlans::setPaymentType(const QString &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIBookingRequestWithRatePlans::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIBookingRequestWithRatePlans::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

QList<OAIRatePlanRoom> OAIBookingRequestWithRatePlans::getRooms() const {
    return m_rooms;
}
void OAIBookingRequestWithRatePlans::setRooms(const QList<OAIRatePlanRoom> &rooms) {
    m_rooms = rooms;
    m_rooms_isSet = true;
}

bool OAIBookingRequestWithRatePlans::is_rooms_Set() const{
    return m_rooms_isSet;
}

bool OAIBookingRequestWithRatePlans::is_rooms_Valid() const{
    return m_rooms_isValid;
}

QDate OAIBookingRequestWithRatePlans::getStart() const {
    return m_start;
}
void OAIBookingRequestWithRatePlans::setStart(const QDate &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIBookingRequestWithRatePlans::is_start_Set() const{
    return m_start_isSet;
}

bool OAIBookingRequestWithRatePlans::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIBookingRequestWithRatePlans::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_booking_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rooms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBookingRequestWithRatePlans::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_booking_contact_isValid && m_end_isValid && m_rooms_isValid && m_start_isValid && true;
}

} // namespace OpenAPI
