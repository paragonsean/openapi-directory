/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRatesPerDate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRatesPerDate::OAIRatesPerDate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRatesPerDate::OAIRatesPerDate() {
    this->initializeModel();
}

OAIRatesPerDate::~OAIRatesPerDate() {}

void OAIRatesPerDate::initializeModel() {

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_closed_to_arrival_isSet = false;
    m_closed_to_arrival_isValid = false;

    m_closed_to_departure_isSet = false;
    m_closed_to_departure_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_rates_isSet = false;
    m_rates_isValid = false;

    m_staythrough_isSet = false;
    m_staythrough_isValid = false;
}

void OAIRatesPerDate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRatesPerDate::fromJsonObject(QJsonObject json) {

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_closed_to_arrival_isValid = ::OpenAPI::fromJsonValue(m_closed_to_arrival, json[QString("closedToArrival")]);
    m_closed_to_arrival_isSet = !json[QString("closedToArrival")].isNull() && m_closed_to_arrival_isValid;

    m_closed_to_departure_isValid = ::OpenAPI::fromJsonValue(m_closed_to_departure, json[QString("closedToDeparture")]);
    m_closed_to_departure_isSet = !json[QString("closedToDeparture")].isNull() && m_closed_to_departure_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_rates_isValid = ::OpenAPI::fromJsonValue(m_rates, json[QString("rates")]);
    m_rates_isSet = !json[QString("rates")].isNull() && m_rates_isValid;

    m_staythrough_isValid = ::OpenAPI::fromJsonValue(m_staythrough, json[QString("staythrough")]);
    m_staythrough_isSet = !json[QString("staythrough")].isNull() && m_staythrough_isValid;
}

QString OAIRatesPerDate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRatesPerDate::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_closed_to_arrival_isSet) {
        obj.insert(QString("closedToArrival"), ::OpenAPI::toJsonValue(m_closed_to_arrival));
    }
    if (m_closed_to_departure_isSet) {
        obj.insert(QString("closedToDeparture"), ::OpenAPI::toJsonValue(m_closed_to_departure));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_rates.size() > 0) {
        obj.insert(QString("rates"), ::OpenAPI::toJsonValue(m_rates));
    }
    if (m_staythrough.isSet()) {
        obj.insert(QString("staythrough"), ::OpenAPI::toJsonValue(m_staythrough));
    }
    return obj;
}

bool OAIRatesPerDate::isClosed() const {
    return m_closed;
}
void OAIRatesPerDate::setClosed(const bool &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIRatesPerDate::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIRatesPerDate::is_closed_Valid() const{
    return m_closed_isValid;
}

bool OAIRatesPerDate::isClosedToArrival() const {
    return m_closed_to_arrival;
}
void OAIRatesPerDate::setClosedToArrival(const bool &closed_to_arrival) {
    m_closed_to_arrival = closed_to_arrival;
    m_closed_to_arrival_isSet = true;
}

bool OAIRatesPerDate::is_closed_to_arrival_Set() const{
    return m_closed_to_arrival_isSet;
}

bool OAIRatesPerDate::is_closed_to_arrival_Valid() const{
    return m_closed_to_arrival_isValid;
}

bool OAIRatesPerDate::isClosedToDeparture() const {
    return m_closed_to_departure;
}
void OAIRatesPerDate::setClosedToDeparture(const bool &closed_to_departure) {
    m_closed_to_departure = closed_to_departure;
    m_closed_to_departure_isSet = true;
}

bool OAIRatesPerDate::is_closed_to_departure_Set() const{
    return m_closed_to_departure_isSet;
}

bool OAIRatesPerDate::is_closed_to_departure_Valid() const{
    return m_closed_to_departure_isValid;
}

QString OAIRatesPerDate::getDate() const {
    return m_date;
}
void OAIRatesPerDate::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIRatesPerDate::is_date_Set() const{
    return m_date_isSet;
}

bool OAIRatesPerDate::is_date_Valid() const{
    return m_date_isValid;
}

QSet<OAIRatePlanRate> OAIRatesPerDate::getRates() const {
    return m_rates;
}
void OAIRatesPerDate::setRates(const QSet<OAIRatePlanRate> &rates) {
    m_rates = rates;
    m_rates_isSet = true;
}

bool OAIRatesPerDate::is_rates_Set() const{
    return m_rates_isSet;
}

bool OAIRatesPerDate::is_rates_Valid() const{
    return m_rates_isValid;
}

OAIRatesPerDate_staythrough OAIRatesPerDate::getStaythrough() const {
    return m_staythrough;
}
void OAIRatesPerDate::setStaythrough(const OAIRatesPerDate_staythrough &staythrough) {
    m_staythrough = staythrough;
    m_staythrough_isSet = true;
}

bool OAIRatesPerDate::is_staythrough_Set() const{
    return m_staythrough_isSet;
}

bool OAIRatesPerDate::is_staythrough_Valid() const{
    return m_staythrough_isValid;
}

bool OAIRatesPerDate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_to_arrival_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_to_departure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_staythrough.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRatesPerDate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_closed_isValid && m_date_isValid && m_rates_isValid && true;
}

} // namespace OpenAPI
