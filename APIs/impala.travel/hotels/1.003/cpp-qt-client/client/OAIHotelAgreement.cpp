/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelAgreement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelAgreement::OAIHotelAgreement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelAgreement::OAIHotelAgreement() {
    this->initializeModel();
}

OAIHotelAgreement::~OAIHotelAgreement() {}

void OAIHotelAgreement::initializeModel() {

    m_cancellation_policy_isSet = false;
    m_cancellation_policy_isValid = false;

    m_commission_isSet = false;
    m_commission_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deals_sellable_isSet = false;
    m_deals_sellable_isValid = false;

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_hotel_agreement_id_isSet = false;
    m_hotel_agreement_id_isValid = false;

    m_hotel_agreement_status_isSet = false;
    m_hotel_agreement_status_isValid = false;

    m_hotel_id_isSet = false;
    m_hotel_id_isValid = false;

    m_length_of_stay_isSet = false;
    m_length_of_stay_isValid = false;

    m_sellable_in_date_ranges_isSet = false;
    m_sellable_in_date_ranges_isValid = false;

    m_special_instructions_isSet = false;
    m_special_instructions_isValid = false;

    m_stay_date_ranges_isSet = false;
    m_stay_date_ranges_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIHotelAgreement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelAgreement::fromJsonObject(QJsonObject json) {

    m_cancellation_policy_isValid = ::OpenAPI::fromJsonValue(m_cancellation_policy, json[QString("cancellationPolicy")]);
    m_cancellation_policy_isSet = !json[QString("cancellationPolicy")].isNull() && m_cancellation_policy_isValid;

    m_commission_isValid = ::OpenAPI::fromJsonValue(m_commission, json[QString("commission")]);
    m_commission_isSet = !json[QString("commission")].isNull() && m_commission_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_deals_sellable_isValid = ::OpenAPI::fromJsonValue(m_deals_sellable, json[QString("dealsSellable")]);
    m_deals_sellable_isSet = !json[QString("dealsSellable")].isNull() && m_deals_sellable_isValid;

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_hotel_agreement_id_isValid = ::OpenAPI::fromJsonValue(m_hotel_agreement_id, json[QString("hotelAgreementId")]);
    m_hotel_agreement_id_isSet = !json[QString("hotelAgreementId")].isNull() && m_hotel_agreement_id_isValid;

    m_hotel_agreement_status_isValid = ::OpenAPI::fromJsonValue(m_hotel_agreement_status, json[QString("hotelAgreementStatus")]);
    m_hotel_agreement_status_isSet = !json[QString("hotelAgreementStatus")].isNull() && m_hotel_agreement_status_isValid;

    m_hotel_id_isValid = ::OpenAPI::fromJsonValue(m_hotel_id, json[QString("hotelId")]);
    m_hotel_id_isSet = !json[QString("hotelId")].isNull() && m_hotel_id_isValid;

    m_length_of_stay_isValid = ::OpenAPI::fromJsonValue(m_length_of_stay, json[QString("lengthOfStay")]);
    m_length_of_stay_isSet = !json[QString("lengthOfStay")].isNull() && m_length_of_stay_isValid;

    m_sellable_in_date_ranges_isValid = ::OpenAPI::fromJsonValue(m_sellable_in_date_ranges, json[QString("sellableInDateRanges")]);
    m_sellable_in_date_ranges_isSet = !json[QString("sellableInDateRanges")].isNull() && m_sellable_in_date_ranges_isValid;

    m_special_instructions_isValid = ::OpenAPI::fromJsonValue(m_special_instructions, json[QString("specialInstructions")]);
    m_special_instructions_isSet = !json[QString("specialInstructions")].isNull() && m_special_instructions_isValid;

    m_stay_date_ranges_isValid = ::OpenAPI::fromJsonValue(m_stay_date_ranges, json[QString("stayDateRanges")]);
    m_stay_date_ranges_isSet = !json[QString("stayDateRanges")].isNull() && m_stay_date_ranges_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIHotelAgreement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelAgreement::asJsonObject() const {
    QJsonObject obj;
    if (m_cancellation_policy.isSet()) {
        obj.insert(QString("cancellationPolicy"), ::OpenAPI::toJsonValue(m_cancellation_policy));
    }
    if (m_commission.isSet()) {
        obj.insert(QString("commission"), ::OpenAPI::toJsonValue(m_commission));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deals_sellable.isSet()) {
        obj.insert(QString("dealsSellable"), ::OpenAPI::toJsonValue(m_deals_sellable));
    }
    if (m_discount.isSet()) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_hotel_agreement_id_isSet) {
        obj.insert(QString("hotelAgreementId"), ::OpenAPI::toJsonValue(m_hotel_agreement_id));
    }
    if (m_hotel_agreement_status_isSet) {
        obj.insert(QString("hotelAgreementStatus"), ::OpenAPI::toJsonValue(m_hotel_agreement_status));
    }
    if (m_hotel_id_isSet) {
        obj.insert(QString("hotelId"), ::OpenAPI::toJsonValue(m_hotel_id));
    }
    if (m_length_of_stay.isSet()) {
        obj.insert(QString("lengthOfStay"), ::OpenAPI::toJsonValue(m_length_of_stay));
    }
    if (m_sellable_in_date_ranges.size() > 0) {
        obj.insert(QString("sellableInDateRanges"), ::OpenAPI::toJsonValue(m_sellable_in_date_ranges));
    }
    if (m_special_instructions_isSet) {
        obj.insert(QString("specialInstructions"), ::OpenAPI::toJsonValue(m_special_instructions));
    }
    if (m_stay_date_ranges.size() > 0) {
        obj.insert(QString("stayDateRanges"), ::OpenAPI::toJsonValue(m_stay_date_ranges));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIHotelAgreement_cancellationPolicy OAIHotelAgreement::getCancellationPolicy() const {
    return m_cancellation_policy;
}
void OAIHotelAgreement::setCancellationPolicy(const OAIHotelAgreement_cancellationPolicy &cancellation_policy) {
    m_cancellation_policy = cancellation_policy;
    m_cancellation_policy_isSet = true;
}

bool OAIHotelAgreement::is_cancellation_policy_Set() const{
    return m_cancellation_policy_isSet;
}

bool OAIHotelAgreement::is_cancellation_policy_Valid() const{
    return m_cancellation_policy_isValid;
}

OAIHotelAgreement_commission OAIHotelAgreement::getCommission() const {
    return m_commission;
}
void OAIHotelAgreement::setCommission(const OAIHotelAgreement_commission &commission) {
    m_commission = commission;
    m_commission_isSet = true;
}

bool OAIHotelAgreement::is_commission_Set() const{
    return m_commission_isSet;
}

bool OAIHotelAgreement::is_commission_Valid() const{
    return m_commission_isValid;
}

QList<QString> OAIHotelAgreement::getConditions() const {
    return m_conditions;
}
void OAIHotelAgreement::setConditions(const QList<QString> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIHotelAgreement::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIHotelAgreement::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QDateTime OAIHotelAgreement::getCreatedAt() const {
    return m_created_at;
}
void OAIHotelAgreement::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIHotelAgreement::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIHotelAgreement::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIHotelAgreement_dealsSellable OAIHotelAgreement::getDealsSellable() const {
    return m_deals_sellable;
}
void OAIHotelAgreement::setDealsSellable(const OAIHotelAgreement_dealsSellable &deals_sellable) {
    m_deals_sellable = deals_sellable;
    m_deals_sellable_isSet = true;
}

bool OAIHotelAgreement::is_deals_sellable_Set() const{
    return m_deals_sellable_isSet;
}

bool OAIHotelAgreement::is_deals_sellable_Valid() const{
    return m_deals_sellable_isValid;
}

OAIHotelAgreement_discount OAIHotelAgreement::getDiscount() const {
    return m_discount;
}
void OAIHotelAgreement::setDiscount(const OAIHotelAgreement_discount &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAIHotelAgreement::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAIHotelAgreement::is_discount_Valid() const{
    return m_discount_isValid;
}

QString OAIHotelAgreement::getHotelAgreementId() const {
    return m_hotel_agreement_id;
}
void OAIHotelAgreement::setHotelAgreementId(const QString &hotel_agreement_id) {
    m_hotel_agreement_id = hotel_agreement_id;
    m_hotel_agreement_id_isSet = true;
}

bool OAIHotelAgreement::is_hotel_agreement_id_Set() const{
    return m_hotel_agreement_id_isSet;
}

bool OAIHotelAgreement::is_hotel_agreement_id_Valid() const{
    return m_hotel_agreement_id_isValid;
}

QString OAIHotelAgreement::getHotelAgreementStatus() const {
    return m_hotel_agreement_status;
}
void OAIHotelAgreement::setHotelAgreementStatus(const QString &hotel_agreement_status) {
    m_hotel_agreement_status = hotel_agreement_status;
    m_hotel_agreement_status_isSet = true;
}

bool OAIHotelAgreement::is_hotel_agreement_status_Set() const{
    return m_hotel_agreement_status_isSet;
}

bool OAIHotelAgreement::is_hotel_agreement_status_Valid() const{
    return m_hotel_agreement_status_isValid;
}

QString OAIHotelAgreement::getHotelId() const {
    return m_hotel_id;
}
void OAIHotelAgreement::setHotelId(const QString &hotel_id) {
    m_hotel_id = hotel_id;
    m_hotel_id_isSet = true;
}

bool OAIHotelAgreement::is_hotel_id_Set() const{
    return m_hotel_id_isSet;
}

bool OAIHotelAgreement::is_hotel_id_Valid() const{
    return m_hotel_id_isValid;
}

OAIHotelAgreement_lengthOfStay OAIHotelAgreement::getLengthOfStay() const {
    return m_length_of_stay;
}
void OAIHotelAgreement::setLengthOfStay(const OAIHotelAgreement_lengthOfStay &length_of_stay) {
    m_length_of_stay = length_of_stay;
    m_length_of_stay_isSet = true;
}

bool OAIHotelAgreement::is_length_of_stay_Set() const{
    return m_length_of_stay_isSet;
}

bool OAIHotelAgreement::is_length_of_stay_Valid() const{
    return m_length_of_stay_isValid;
}

QSet<OAIHotelAgreement_sellableInDateRanges_inner> OAIHotelAgreement::getSellableInDateRanges() const {
    return m_sellable_in_date_ranges;
}
void OAIHotelAgreement::setSellableInDateRanges(const QSet<OAIHotelAgreement_sellableInDateRanges_inner> &sellable_in_date_ranges) {
    m_sellable_in_date_ranges = sellable_in_date_ranges;
    m_sellable_in_date_ranges_isSet = true;
}

bool OAIHotelAgreement::is_sellable_in_date_ranges_Set() const{
    return m_sellable_in_date_ranges_isSet;
}

bool OAIHotelAgreement::is_sellable_in_date_ranges_Valid() const{
    return m_sellable_in_date_ranges_isValid;
}

QString OAIHotelAgreement::getSpecialInstructions() const {
    return m_special_instructions;
}
void OAIHotelAgreement::setSpecialInstructions(const QString &special_instructions) {
    m_special_instructions = special_instructions;
    m_special_instructions_isSet = true;
}

bool OAIHotelAgreement::is_special_instructions_Set() const{
    return m_special_instructions_isSet;
}

bool OAIHotelAgreement::is_special_instructions_Valid() const{
    return m_special_instructions_isValid;
}

QSet<OAIDealRequest_stayDateRanges_inner> OAIHotelAgreement::getStayDateRanges() const {
    return m_stay_date_ranges;
}
void OAIHotelAgreement::setStayDateRanges(const QSet<OAIDealRequest_stayDateRanges_inner> &stay_date_ranges) {
    m_stay_date_ranges = stay_date_ranges;
    m_stay_date_ranges_isSet = true;
}

bool OAIHotelAgreement::is_stay_date_ranges_Set() const{
    return m_stay_date_ranges_isSet;
}

bool OAIHotelAgreement::is_stay_date_ranges_Valid() const{
    return m_stay_date_ranges_isValid;
}

QDateTime OAIHotelAgreement::getUpdatedAt() const {
    return m_updated_at;
}
void OAIHotelAgreement::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIHotelAgreement::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIHotelAgreement::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIHotelAgreement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancellation_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deals_sellable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_agreement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_agreement_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_of_stay.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sellable_in_date_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stay_date_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelAgreement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cancellation_policy_isValid && m_commission_isValid && m_conditions_isValid && m_created_at_isValid && m_deals_sellable_isValid && m_discount_isValid && m_hotel_agreement_id_isValid && m_hotel_agreement_status_isValid && m_hotel_id_isValid && m_length_of_stay_isValid && m_sellable_in_date_ranges_isValid && m_special_instructions_isValid && m_stay_date_ranges_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
