/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRateAdjustment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRateAdjustment::OAIRateAdjustment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRateAdjustment::OAIRateAdjustment() {
    this->initializeModel();
}

OAIRateAdjustment::~OAIRateAdjustment() {}

void OAIRateAdjustment::initializeModel() {

    m_adjustment_id_isSet = false;
    m_adjustment_id_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRateAdjustment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRateAdjustment::fromJsonObject(QJsonObject json) {

    m_adjustment_id_isValid = ::OpenAPI::fromJsonValue(m_adjustment_id, json[QString("adjustmentId")]);
    m_adjustment_id_isSet = !json[QString("adjustmentId")].isNull() && m_adjustment_id_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRateAdjustment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRateAdjustment::asJsonObject() const {
    QJsonObject obj;
    if (m_adjustment_id_isSet) {
        obj.insert(QString("adjustmentId"), ::OpenAPI::toJsonValue(m_adjustment_id));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRateAdjustment::getAdjustmentId() const {
    return m_adjustment_id;
}
void OAIRateAdjustment::setAdjustmentId(const QString &adjustment_id) {
    m_adjustment_id = adjustment_id;
    m_adjustment_id_isSet = true;
}

bool OAIRateAdjustment::is_adjustment_id_Set() const{
    return m_adjustment_id_isSet;
}

bool OAIRateAdjustment::is_adjustment_id_Valid() const{
    return m_adjustment_id_isValid;
}

double OAIRateAdjustment::getAmount() const {
    return m_amount;
}
void OAIRateAdjustment::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIRateAdjustment::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIRateAdjustment::is_amount_Valid() const{
    return m_amount_isValid;
}

QSet<OAIAdjustmentConditionLengthOfStayRule> OAIRateAdjustment::getConditions() const {
    return m_conditions;
}
void OAIRateAdjustment::setConditions(const QSet<OAIAdjustmentConditionLengthOfStayRule> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIRateAdjustment::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIRateAdjustment::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QString OAIRateAdjustment::getType() const {
    return m_type;
}
void OAIRateAdjustment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRateAdjustment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRateAdjustment::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRateAdjustment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjustment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRateAdjustment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_conditions_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
