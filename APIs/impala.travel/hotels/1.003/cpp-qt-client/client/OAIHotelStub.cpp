/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotelStub.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotelStub::OAIHotelStub(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotelStub::OAIHotelStub() {
    this->initializeModel();
}

OAIHotelStub::~OAIHotelStub() {}

void OAIHotelStub::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_check_in_isSet = false;
    m_check_in_isValid = false;

    m_check_out_isSet = false;
    m_check_out_isValid = false;

    m_emails_isSet = false;
    m_emails_isValid = false;

    m_hotel_id_isSet = false;
    m_hotel_id_isValid = false;

    m_href_isSet = false;
    m_href_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_numbers_isSet = false;
    m_phone_numbers_isValid = false;

    m_star_rating_isSet = false;
    m_star_rating_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAIHotelStub::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotelStub::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_check_in_isValid = ::OpenAPI::fromJsonValue(m_check_in, json[QString("checkIn")]);
    m_check_in_isSet = !json[QString("checkIn")].isNull() && m_check_in_isValid;

    m_check_out_isValid = ::OpenAPI::fromJsonValue(m_check_out, json[QString("checkOut")]);
    m_check_out_isSet = !json[QString("checkOut")].isNull() && m_check_out_isValid;

    m_emails_isValid = ::OpenAPI::fromJsonValue(m_emails, json[QString("emails")]);
    m_emails_isSet = !json[QString("emails")].isNull() && m_emails_isValid;

    m_hotel_id_isValid = ::OpenAPI::fromJsonValue(m_hotel_id, json[QString("hotelId")]);
    m_hotel_id_isSet = !json[QString("hotelId")].isNull() && m_hotel_id_isValid;

    m_href_isValid = ::OpenAPI::fromJsonValue(m_href, json[QString("href")]);
    m_href_isSet = !json[QString("href")].isNull() && m_href_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_phone_numbers, json[QString("phoneNumbers")]);
    m_phone_numbers_isSet = !json[QString("phoneNumbers")].isNull() && m_phone_numbers_isValid;

    m_star_rating_isValid = ::OpenAPI::fromJsonValue(m_star_rating, json[QString("starRating")]);
    m_star_rating_isSet = !json[QString("starRating")].isNull() && m_star_rating_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAIHotelStub::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotelStub::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_check_in.isSet()) {
        obj.insert(QString("checkIn"), ::OpenAPI::toJsonValue(m_check_in));
    }
    if (m_check_out.isSet()) {
        obj.insert(QString("checkOut"), ::OpenAPI::toJsonValue(m_check_out));
    }
    if (m_emails.size() > 0) {
        obj.insert(QString("emails"), ::OpenAPI::toJsonValue(m_emails));
    }
    if (m_hotel_id_isSet) {
        obj.insert(QString("hotelId"), ::OpenAPI::toJsonValue(m_hotel_id));
    }
    if (m_href_isSet) {
        obj.insert(QString("href"), ::OpenAPI::toJsonValue(m_href));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_numbers.size() > 0) {
        obj.insert(QString("phoneNumbers"), ::OpenAPI::toJsonValue(m_phone_numbers));
    }
    if (m_star_rating_isSet) {
        obj.insert(QString("starRating"), ::OpenAPI::toJsonValue(m_star_rating));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

OAIAddress OAIHotelStub::getAddress() const {
    return m_address;
}
void OAIHotelStub::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIHotelStub::is_address_Set() const{
    return m_address_isSet;
}

bool OAIHotelStub::is_address_Valid() const{
    return m_address_isValid;
}

OAITimeRange OAIHotelStub::getCheckIn() const {
    return m_check_in;
}
void OAIHotelStub::setCheckIn(const OAITimeRange &check_in) {
    m_check_in = check_in;
    m_check_in_isSet = true;
}

bool OAIHotelStub::is_check_in_Set() const{
    return m_check_in_isSet;
}

bool OAIHotelStub::is_check_in_Valid() const{
    return m_check_in_isValid;
}

OAITimeRange OAIHotelStub::getCheckOut() const {
    return m_check_out;
}
void OAIHotelStub::setCheckOut(const OAITimeRange &check_out) {
    m_check_out = check_out;
    m_check_out_isSet = true;
}

bool OAIHotelStub::is_check_out_Set() const{
    return m_check_out_isSet;
}

bool OAIHotelStub::is_check_out_Valid() const{
    return m_check_out_isValid;
}

QList<QString> OAIHotelStub::getEmails() const {
    return m_emails;
}
void OAIHotelStub::setEmails(const QList<QString> &emails) {
    m_emails = emails;
    m_emails_isSet = true;
}

bool OAIHotelStub::is_emails_Set() const{
    return m_emails_isSet;
}

bool OAIHotelStub::is_emails_Valid() const{
    return m_emails_isValid;
}

QString OAIHotelStub::getHotelId() const {
    return m_hotel_id;
}
void OAIHotelStub::setHotelId(const QString &hotel_id) {
    m_hotel_id = hotel_id;
    m_hotel_id_isSet = true;
}

bool OAIHotelStub::is_hotel_id_Set() const{
    return m_hotel_id_isSet;
}

bool OAIHotelStub::is_hotel_id_Valid() const{
    return m_hotel_id_isValid;
}

QString OAIHotelStub::getHref() const {
    return m_href;
}
void OAIHotelStub::setHref(const QString &href) {
    m_href = href;
    m_href_isSet = true;
}

bool OAIHotelStub::is_href_Set() const{
    return m_href_isSet;
}

bool OAIHotelStub::is_href_Valid() const{
    return m_href_isValid;
}

QList<OAIImage> OAIHotelStub::getImages() const {
    return m_images;
}
void OAIHotelStub::setImages(const QList<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIHotelStub::is_images_Set() const{
    return m_images_isSet;
}

bool OAIHotelStub::is_images_Valid() const{
    return m_images_isValid;
}

OAILocation OAIHotelStub::getLocation() const {
    return m_location;
}
void OAIHotelStub::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIHotelStub::is_location_Set() const{
    return m_location_isSet;
}

bool OAIHotelStub::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIHotelStub::getName() const {
    return m_name;
}
void OAIHotelStub::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHotelStub::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHotelStub::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIHotelStub::getPhoneNumbers() const {
    return m_phone_numbers;
}
void OAIHotelStub::setPhoneNumbers(const QList<QString> &phone_numbers) {
    m_phone_numbers = phone_numbers;
    m_phone_numbers_isSet = true;
}

bool OAIHotelStub::is_phone_numbers_Set() const{
    return m_phone_numbers_isSet;
}

bool OAIHotelStub::is_phone_numbers_Valid() const{
    return m_phone_numbers_isValid;
}

double OAIHotelStub::getStarRating() const {
    return m_star_rating;
}
void OAIHotelStub::setStarRating(const double &star_rating) {
    m_star_rating = star_rating;
    m_star_rating_isSet = true;
}

bool OAIHotelStub::is_star_rating_Set() const{
    return m_star_rating_isSet;
}

bool OAIHotelStub::is_star_rating_Valid() const{
    return m_star_rating_isValid;
}

QString OAIHotelStub::getTimezone() const {
    return m_timezone;
}
void OAIHotelStub::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIHotelStub::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIHotelStub::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAIHotelStub::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_in.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_out.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_href_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_star_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotelStub::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_hotel_id_isValid && m_images_isValid && m_location_isValid && m_name_isValid && m_star_rating_isValid && true;
}

} // namespace OpenAPI
