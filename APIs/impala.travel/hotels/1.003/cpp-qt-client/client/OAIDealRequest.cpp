/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDealRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDealRequest::OAIDealRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDealRequest::OAIDealRequest() {
    this->initializeModel();
}

OAIDealRequest::~OAIDealRequest() {}

void OAIDealRequest::initializeModel() {

    m_booking_window_restriction_isSet = false;
    m_booking_window_restriction_isValid = false;

    m_cancellation_policy_isSet = false;
    m_cancellation_policy_isValid = false;

    m_commission_isSet = false;
    m_commission_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deal_request_id_isSet = false;
    m_deal_request_id_isValid = false;

    m_deal_request_status_isSet = false;
    m_deal_request_status_isValid = false;

    m_deal_type_isSet = false;
    m_deal_type_isValid = false;

    m_discount_isSet = false;
    m_discount_isValid = false;

    m_length_of_stay_isSet = false;
    m_length_of_stay_isValid = false;

    m_sellable_in_date_ranges_isSet = false;
    m_sellable_in_date_ranges_isValid = false;

    m_special_instructions_isSet = false;
    m_special_instructions_isValid = false;

    m_stay_date_ranges_isSet = false;
    m_stay_date_ranges_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIDealRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDealRequest::fromJsonObject(QJsonObject json) {

    m_booking_window_restriction_isValid = ::OpenAPI::fromJsonValue(m_booking_window_restriction, json[QString("bookingWindowRestriction")]);
    m_booking_window_restriction_isSet = !json[QString("bookingWindowRestriction")].isNull() && m_booking_window_restriction_isValid;

    m_cancellation_policy_isValid = ::OpenAPI::fromJsonValue(m_cancellation_policy, json[QString("cancellationPolicy")]);
    m_cancellation_policy_isSet = !json[QString("cancellationPolicy")].isNull() && m_cancellation_policy_isValid;

    m_commission_isValid = ::OpenAPI::fromJsonValue(m_commission, json[QString("commission")]);
    m_commission_isSet = !json[QString("commission")].isNull() && m_commission_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_deal_request_id_isValid = ::OpenAPI::fromJsonValue(m_deal_request_id, json[QString("dealRequestId")]);
    m_deal_request_id_isSet = !json[QString("dealRequestId")].isNull() && m_deal_request_id_isValid;

    m_deal_request_status_isValid = ::OpenAPI::fromJsonValue(m_deal_request_status, json[QString("dealRequestStatus")]);
    m_deal_request_status_isSet = !json[QString("dealRequestStatus")].isNull() && m_deal_request_status_isValid;

    m_deal_type_isValid = ::OpenAPI::fromJsonValue(m_deal_type, json[QString("dealType")]);
    m_deal_type_isSet = !json[QString("dealType")].isNull() && m_deal_type_isValid;

    m_discount_isValid = ::OpenAPI::fromJsonValue(m_discount, json[QString("discount")]);
    m_discount_isSet = !json[QString("discount")].isNull() && m_discount_isValid;

    m_length_of_stay_isValid = ::OpenAPI::fromJsonValue(m_length_of_stay, json[QString("lengthOfStay")]);
    m_length_of_stay_isSet = !json[QString("lengthOfStay")].isNull() && m_length_of_stay_isValid;

    m_sellable_in_date_ranges_isValid = ::OpenAPI::fromJsonValue(m_sellable_in_date_ranges, json[QString("sellableInDateRanges")]);
    m_sellable_in_date_ranges_isSet = !json[QString("sellableInDateRanges")].isNull() && m_sellable_in_date_ranges_isValid;

    m_special_instructions_isValid = ::OpenAPI::fromJsonValue(m_special_instructions, json[QString("specialInstructions")]);
    m_special_instructions_isSet = !json[QString("specialInstructions")].isNull() && m_special_instructions_isValid;

    m_stay_date_ranges_isValid = ::OpenAPI::fromJsonValue(m_stay_date_ranges, json[QString("stayDateRanges")]);
    m_stay_date_ranges_isSet = !json[QString("stayDateRanges")].isNull() && m_stay_date_ranges_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIDealRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDealRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_booking_window_restriction.isSet()) {
        obj.insert(QString("bookingWindowRestriction"), ::OpenAPI::toJsonValue(m_booking_window_restriction));
    }
    if (m_cancellation_policy.isSet()) {
        obj.insert(QString("cancellationPolicy"), ::OpenAPI::toJsonValue(m_cancellation_policy));
    }
    if (m_commission.isSet()) {
        obj.insert(QString("commission"), ::OpenAPI::toJsonValue(m_commission));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deal_request_id_isSet) {
        obj.insert(QString("dealRequestId"), ::OpenAPI::toJsonValue(m_deal_request_id));
    }
    if (m_deal_request_status_isSet) {
        obj.insert(QString("dealRequestStatus"), ::OpenAPI::toJsonValue(m_deal_request_status));
    }
    if (m_deal_type_isSet) {
        obj.insert(QString("dealType"), ::OpenAPI::toJsonValue(m_deal_type));
    }
    if (m_discount.isSet()) {
        obj.insert(QString("discount"), ::OpenAPI::toJsonValue(m_discount));
    }
    if (m_length_of_stay.isSet()) {
        obj.insert(QString("lengthOfStay"), ::OpenAPI::toJsonValue(m_length_of_stay));
    }
    if (m_sellable_in_date_ranges.size() > 0) {
        obj.insert(QString("sellableInDateRanges"), ::OpenAPI::toJsonValue(m_sellable_in_date_ranges));
    }
    if (m_special_instructions_isSet) {
        obj.insert(QString("specialInstructions"), ::OpenAPI::toJsonValue(m_special_instructions));
    }
    if (m_stay_date_ranges.size() > 0) {
        obj.insert(QString("stayDateRanges"), ::OpenAPI::toJsonValue(m_stay_date_ranges));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

OAIDealRequest_bookingWindowRestriction OAIDealRequest::getBookingWindowRestriction() const {
    return m_booking_window_restriction;
}
void OAIDealRequest::setBookingWindowRestriction(const OAIDealRequest_bookingWindowRestriction &booking_window_restriction) {
    m_booking_window_restriction = booking_window_restriction;
    m_booking_window_restriction_isSet = true;
}

bool OAIDealRequest::is_booking_window_restriction_Set() const{
    return m_booking_window_restriction_isSet;
}

bool OAIDealRequest::is_booking_window_restriction_Valid() const{
    return m_booking_window_restriction_isValid;
}

OAIDealRequest_cancellationPolicy OAIDealRequest::getCancellationPolicy() const {
    return m_cancellation_policy;
}
void OAIDealRequest::setCancellationPolicy(const OAIDealRequest_cancellationPolicy &cancellation_policy) {
    m_cancellation_policy = cancellation_policy;
    m_cancellation_policy_isSet = true;
}

bool OAIDealRequest::is_cancellation_policy_Set() const{
    return m_cancellation_policy_isSet;
}

bool OAIDealRequest::is_cancellation_policy_Valid() const{
    return m_cancellation_policy_isValid;
}

OAIDealRequest_commission OAIDealRequest::getCommission() const {
    return m_commission;
}
void OAIDealRequest::setCommission(const OAIDealRequest_commission &commission) {
    m_commission = commission;
    m_commission_isSet = true;
}

bool OAIDealRequest::is_commission_Set() const{
    return m_commission_isSet;
}

bool OAIDealRequest::is_commission_Valid() const{
    return m_commission_isValid;
}

QList<QString> OAIDealRequest::getConditions() const {
    return m_conditions;
}
void OAIDealRequest::setConditions(const QList<QString> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIDealRequest::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIDealRequest::is_conditions_Valid() const{
    return m_conditions_isValid;
}

QDateTime OAIDealRequest::getCreatedAt() const {
    return m_created_at;
}
void OAIDealRequest::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDealRequest::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDealRequest::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDealRequest::getDealRequestId() const {
    return m_deal_request_id;
}
void OAIDealRequest::setDealRequestId(const QString &deal_request_id) {
    m_deal_request_id = deal_request_id;
    m_deal_request_id_isSet = true;
}

bool OAIDealRequest::is_deal_request_id_Set() const{
    return m_deal_request_id_isSet;
}

bool OAIDealRequest::is_deal_request_id_Valid() const{
    return m_deal_request_id_isValid;
}

QString OAIDealRequest::getDealRequestStatus() const {
    return m_deal_request_status;
}
void OAIDealRequest::setDealRequestStatus(const QString &deal_request_status) {
    m_deal_request_status = deal_request_status;
    m_deal_request_status_isSet = true;
}

bool OAIDealRequest::is_deal_request_status_Set() const{
    return m_deal_request_status_isSet;
}

bool OAIDealRequest::is_deal_request_status_Valid() const{
    return m_deal_request_status_isValid;
}

QString OAIDealRequest::getDealType() const {
    return m_deal_type;
}
void OAIDealRequest::setDealType(const QString &deal_type) {
    m_deal_type = deal_type;
    m_deal_type_isSet = true;
}

bool OAIDealRequest::is_deal_type_Set() const{
    return m_deal_type_isSet;
}

bool OAIDealRequest::is_deal_type_Valid() const{
    return m_deal_type_isValid;
}

OAIDealRequest_discount OAIDealRequest::getDiscount() const {
    return m_discount;
}
void OAIDealRequest::setDiscount(const OAIDealRequest_discount &discount) {
    m_discount = discount;
    m_discount_isSet = true;
}

bool OAIDealRequest::is_discount_Set() const{
    return m_discount_isSet;
}

bool OAIDealRequest::is_discount_Valid() const{
    return m_discount_isValid;
}

OAIDealRequest_lengthOfStay OAIDealRequest::getLengthOfStay() const {
    return m_length_of_stay;
}
void OAIDealRequest::setLengthOfStay(const OAIDealRequest_lengthOfStay &length_of_stay) {
    m_length_of_stay = length_of_stay;
    m_length_of_stay_isSet = true;
}

bool OAIDealRequest::is_length_of_stay_Set() const{
    return m_length_of_stay_isSet;
}

bool OAIDealRequest::is_length_of_stay_Valid() const{
    return m_length_of_stay_isValid;
}

QSet<OAIDealRequest_sellableInDateRanges_inner> OAIDealRequest::getSellableInDateRanges() const {
    return m_sellable_in_date_ranges;
}
void OAIDealRequest::setSellableInDateRanges(const QSet<OAIDealRequest_sellableInDateRanges_inner> &sellable_in_date_ranges) {
    m_sellable_in_date_ranges = sellable_in_date_ranges;
    m_sellable_in_date_ranges_isSet = true;
}

bool OAIDealRequest::is_sellable_in_date_ranges_Set() const{
    return m_sellable_in_date_ranges_isSet;
}

bool OAIDealRequest::is_sellable_in_date_ranges_Valid() const{
    return m_sellable_in_date_ranges_isValid;
}

QString OAIDealRequest::getSpecialInstructions() const {
    return m_special_instructions;
}
void OAIDealRequest::setSpecialInstructions(const QString &special_instructions) {
    m_special_instructions = special_instructions;
    m_special_instructions_isSet = true;
}

bool OAIDealRequest::is_special_instructions_Set() const{
    return m_special_instructions_isSet;
}

bool OAIDealRequest::is_special_instructions_Valid() const{
    return m_special_instructions_isValid;
}

QSet<OAIDealRequest_stayDateRanges_inner> OAIDealRequest::getStayDateRanges() const {
    return m_stay_date_ranges;
}
void OAIDealRequest::setStayDateRanges(const QSet<OAIDealRequest_stayDateRanges_inner> &stay_date_ranges) {
    m_stay_date_ranges = stay_date_ranges;
    m_stay_date_ranges_isSet = true;
}

bool OAIDealRequest::is_stay_date_ranges_Set() const{
    return m_stay_date_ranges_isSet;
}

bool OAIDealRequest::is_stay_date_ranges_Valid() const{
    return m_stay_date_ranges_isValid;
}

QDateTime OAIDealRequest::getUpdatedAt() const {
    return m_updated_at;
}
void OAIDealRequest::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIDealRequest::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIDealRequest::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIDealRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_booking_window_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellation_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_request_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_of_stay.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sellable_in_date_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stay_date_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDealRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_booking_window_restriction_isValid && m_cancellation_policy_isValid && m_commission_isValid && m_conditions_isValid && m_created_at_isValid && m_deal_request_id_isValid && m_deal_request_status_isValid && m_deal_type_isValid && m_discount_isValid && m_length_of_stay_isValid && m_sellable_in_date_ranges_isValid && m_special_instructions_isValid && m_stay_date_ranges_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
