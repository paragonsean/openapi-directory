/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateBookingContactRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateBookingContactRequest::OAIUpdateBookingContactRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateBookingContactRequest::OAIUpdateBookingContactRequest() {
    this->initializeModel();
}

OAIUpdateBookingContactRequest::~OAIUpdateBookingContactRequest() {}

void OAIUpdateBookingContactRequest::initializeModel() {

    m_booking_contact_isSet = false;
    m_booking_contact_isValid = false;

    m_update_booking_version_at_timestamp_isSet = false;
    m_update_booking_version_at_timestamp_isValid = false;
}

void OAIUpdateBookingContactRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateBookingContactRequest::fromJsonObject(QJsonObject json) {

    m_booking_contact_isValid = ::OpenAPI::fromJsonValue(m_booking_contact, json[QString("bookingContact")]);
    m_booking_contact_isSet = !json[QString("bookingContact")].isNull() && m_booking_contact_isValid;

    m_update_booking_version_at_timestamp_isValid = ::OpenAPI::fromJsonValue(m_update_booking_version_at_timestamp, json[QString("updateBookingVersionAtTimestamp")]);
    m_update_booking_version_at_timestamp_isSet = !json[QString("updateBookingVersionAtTimestamp")].isNull() && m_update_booking_version_at_timestamp_isValid;
}

QString OAIUpdateBookingContactRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateBookingContactRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_booking_contact.isSet()) {
        obj.insert(QString("bookingContact"), ::OpenAPI::toJsonValue(m_booking_contact));
    }
    if (m_update_booking_version_at_timestamp_isSet) {
        obj.insert(QString("updateBookingVersionAtTimestamp"), ::OpenAPI::toJsonValue(m_update_booking_version_at_timestamp));
    }
    return obj;
}

OAIPersonInfo OAIUpdateBookingContactRequest::getBookingContact() const {
    return m_booking_contact;
}
void OAIUpdateBookingContactRequest::setBookingContact(const OAIPersonInfo &booking_contact) {
    m_booking_contact = booking_contact;
    m_booking_contact_isSet = true;
}

bool OAIUpdateBookingContactRequest::is_booking_contact_Set() const{
    return m_booking_contact_isSet;
}

bool OAIUpdateBookingContactRequest::is_booking_contact_Valid() const{
    return m_booking_contact_isValid;
}

QDateTime OAIUpdateBookingContactRequest::getUpdateBookingVersionAtTimestamp() const {
    return m_update_booking_version_at_timestamp;
}
void OAIUpdateBookingContactRequest::setUpdateBookingVersionAtTimestamp(const QDateTime &update_booking_version_at_timestamp) {
    m_update_booking_version_at_timestamp = update_booking_version_at_timestamp;
    m_update_booking_version_at_timestamp_isSet = true;
}

bool OAIUpdateBookingContactRequest::is_update_booking_version_at_timestamp_Set() const{
    return m_update_booking_version_at_timestamp_isSet;
}

bool OAIUpdateBookingContactRequest::is_update_booking_version_at_timestamp_Valid() const{
    return m_update_booking_version_at_timestamp_isValid;
}

bool OAIUpdateBookingContactRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_booking_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_booking_version_at_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateBookingContactRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_booking_contact_isValid && m_update_booking_version_at_timestamp_isValid && true;
}

} // namespace OpenAPI
