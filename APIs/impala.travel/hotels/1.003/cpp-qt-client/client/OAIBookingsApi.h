/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBookingsApi_H
#define OAI_OAIBookingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBooking.h"
#include "OAIBookingRequest.h"
#include "OAIGenericError.h"
#include "OAIListBookings_200_response.h"
#include "OAIUpdateBookingContactRequest.h"
#include "OAIUpdateBookingRequest.h"
#include "OAIValidationError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBookingsApi : public QObject {
    Q_OBJECT

public:
    OAIBookingsApi(const int timeOut = 0);
    ~OAIBookingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  booking_id QString [required]
    */
    virtual void cancelBooking(const QString &booking_id);

    /**
    * @param[in]  oai_booking_request OAIBookingRequest [optional]
    */
    virtual void createBooking(const ::OpenAPI::OptionalParam<OAIBookingRequest> &oai_booking_request = ::OpenAPI::OptionalParam<OAIBookingRequest>());

    /**
    * @param[in]  start OAIObject [optional]
    * @param[in]  end OAIObject [optional]
    * @param[in]  created OAIObject [optional]
    * @param[in]  updated OAIObject [optional]
    * @param[in]  size double [optional]
    * @param[in]  offset double [optional]
    * @param[in]  sort_by QString [optional]
    */
    virtual void listBookings(const ::OpenAPI::OptionalParam<OAIObject> &start = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &end = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &created = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<OAIObject> &updated = ::OpenAPI::OptionalParam<OAIObject>(), const ::OpenAPI::OptionalParam<double> &size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &offset = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  booking_id QString [required]
    */
    virtual void retrieveBooking(const QString &booking_id);

    /**
    * @param[in]  booking_id QString [required]
    * @param[in]  oai_update_booking_request OAIUpdateBookingRequest [optional]
    */
    virtual void updateBooking(const QString &booking_id, const ::OpenAPI::OptionalParam<OAIUpdateBookingRequest> &oai_update_booking_request = ::OpenAPI::OptionalParam<OAIUpdateBookingRequest>());

    /**
    * @param[in]  booking_id QString [required]
    * @param[in]  oai_update_booking_contact_request OAIUpdateBookingContactRequest [optional]
    */
    virtual void updateBookingContact(const QString &booking_id, const ::OpenAPI::OptionalParam<OAIUpdateBookingContactRequest> &oai_update_booking_contact_request = ::OpenAPI::OptionalParam<OAIUpdateBookingContactRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelBookingCallback(OAIHttpRequestWorker *worker);
    void createBookingCallback(OAIHttpRequestWorker *worker);
    void listBookingsCallback(OAIHttpRequestWorker *worker);
    void retrieveBookingCallback(OAIHttpRequestWorker *worker);
    void updateBookingCallback(OAIHttpRequestWorker *worker);
    void updateBookingContactCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelBookingSignal(OAIBooking summary);
    void createBookingSignal(OAIBooking summary);
    void listBookingsSignal(OAIListBookings_200_response summary);
    void retrieveBookingSignal(OAIBooking summary);
    void updateBookingSignal(OAIBooking summary);
    void updateBookingContactSignal(OAIBooking summary);


    void cancelBookingSignalFull(OAIHttpRequestWorker *worker, OAIBooking summary);
    void createBookingSignalFull(OAIHttpRequestWorker *worker, OAIBooking summary);
    void listBookingsSignalFull(OAIHttpRequestWorker *worker, OAIListBookings_200_response summary);
    void retrieveBookingSignalFull(OAIHttpRequestWorker *worker, OAIBooking summary);
    void updateBookingSignalFull(OAIHttpRequestWorker *worker, OAIBooking summary);
    void updateBookingContactSignalFull(OAIHttpRequestWorker *worker, OAIBooking summary);

    Q_DECL_DEPRECATED_X("Use cancelBookingSignalError() instead")
    void cancelBookingSignalE(OAIBooking summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelBookingSignalError(OAIBooking summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBookingSignalError() instead")
    void createBookingSignalE(OAIBooking summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBookingSignalError(OAIBooking summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBookingsSignalError() instead")
    void listBookingsSignalE(OAIListBookings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBookingsSignalError(OAIListBookings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveBookingSignalError() instead")
    void retrieveBookingSignalE(OAIBooking summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveBookingSignalError(OAIBooking summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBookingSignalError() instead")
    void updateBookingSignalE(OAIBooking summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBookingSignalError(OAIBooking summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBookingContactSignalError() instead")
    void updateBookingContactSignalE(OAIBooking summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBookingContactSignalError(OAIBooking summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelBookingSignalErrorFull() instead")
    void cancelBookingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelBookingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBookingSignalErrorFull() instead")
    void createBookingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBookingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBookingsSignalErrorFull() instead")
    void listBookingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBookingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveBookingSignalErrorFull() instead")
    void retrieveBookingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveBookingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBookingSignalErrorFull() instead")
    void updateBookingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBookingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBookingContactSignalErrorFull() instead")
    void updateBookingContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBookingContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
