/**
 * Impala Hotel Booking API
 * Add room selling to your app with ease, or expand your existing hotel portfolio. Access all the marketing material you need to sell a room, from hotel amenities to images. Constantly updated, ever expanding and always correct. Impala allows you to start selling hotel rooms and earn a commission with every booking in hours.  Getting started is easy:  > **1. Sign-up within seconds**: Head to the [Impala website](https://impala.travel), enter your details and receive your sandbox API key immediately (no credit card needed).  > **2. Start building within minutes**: Build against a sandbox API with realistic test data. Use a [step-by-step walkthrough](https://impala.travel) to see what's possible. Check for available hotels and their rates. Make and manage fake bookings without any risk. Add room booking to your existing website or app, or start an online travel agency from scratch. [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/11303451-9b241872-9961-424d-9ef4-9d949534567d?action=collection%2Ffork&collection-url=entityId%3D11303451-9b241872-9961-424d-9ef4-9d949534567d%26entityType%3Dcollection%26workspaceId%3D5ae55f12-332c-4e7d-8acc-3e75df3b2ee2)  > **3. Go live within hours**: Once your app or integration is ready for prime time, move to production within your Impala dashboard and start making real hotel bookings for your customers right away.  Want to see how it all works? Watch [a 5-minute walkthrough](https://www.youtube.com/watch?v=7B3evCL3nrY) of the two API requests you need to make a booking, and a demo of one of our customer's apps.
 *
 * The version of the OpenAPI document: 1.003
 * Contact: support@impala.travel
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRate::OAIRate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRate::OAIRate() {
    this->initializeModel();
}

OAIRate::~OAIRate() {}

void OAIRate::initializeModel() {

    m_cancellation_policies_isSet = false;
    m_cancellation_policies_isValid = false;

    m_components_isSet = false;
    m_components_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_hotel_agreement_isSet = false;
    m_hotel_agreement_isValid = false;

    m_max_occupancy_isSet = false;
    m_max_occupancy_isValid = false;

    m_rate_id_isSet = false;
    m_rate_id_isValid = false;

    m_rate_plan_id_isSet = false;
    m_rate_plan_id_isValid = false;

    m_retail_rate_isSet = false;
    m_retail_rate_isValid = false;

    m_rooms_sellable_isSet = false;
    m_rooms_sellable_isValid = false;

    m_seller_commission_percentage_isSet = false;
    m_seller_commission_percentage_isValid = false;

    m_seller_to_impala_payment_isSet = false;
    m_seller_to_impala_payment_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIRate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRate::fromJsonObject(QJsonObject json) {

    m_cancellation_policies_isValid = ::OpenAPI::fromJsonValue(m_cancellation_policies, json[QString("cancellationPolicies")]);
    m_cancellation_policies_isSet = !json[QString("cancellationPolicies")].isNull() && m_cancellation_policies_isValid;

    m_components_isValid = ::OpenAPI::fromJsonValue(m_components, json[QString("components")]);
    m_components_isSet = !json[QString("components")].isNull() && m_components_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_hotel_agreement_isValid = ::OpenAPI::fromJsonValue(m_hotel_agreement, json[QString("hotelAgreement")]);
    m_hotel_agreement_isSet = !json[QString("hotelAgreement")].isNull() && m_hotel_agreement_isValid;

    m_max_occupancy_isValid = ::OpenAPI::fromJsonValue(m_max_occupancy, json[QString("maxOccupancy")]);
    m_max_occupancy_isSet = !json[QString("maxOccupancy")].isNull() && m_max_occupancy_isValid;

    m_rate_id_isValid = ::OpenAPI::fromJsonValue(m_rate_id, json[QString("rateId")]);
    m_rate_id_isSet = !json[QString("rateId")].isNull() && m_rate_id_isValid;

    m_rate_plan_id_isValid = ::OpenAPI::fromJsonValue(m_rate_plan_id, json[QString("ratePlanId")]);
    m_rate_plan_id_isSet = !json[QString("ratePlanId")].isNull() && m_rate_plan_id_isValid;

    m_retail_rate_isValid = ::OpenAPI::fromJsonValue(m_retail_rate, json[QString("retailRate")]);
    m_retail_rate_isSet = !json[QString("retailRate")].isNull() && m_retail_rate_isValid;

    m_rooms_sellable_isValid = ::OpenAPI::fromJsonValue(m_rooms_sellable, json[QString("roomsSellable")]);
    m_rooms_sellable_isSet = !json[QString("roomsSellable")].isNull() && m_rooms_sellable_isValid;

    m_seller_commission_percentage_isValid = ::OpenAPI::fromJsonValue(m_seller_commission_percentage, json[QString("sellerCommissionPercentage")]);
    m_seller_commission_percentage_isSet = !json[QString("sellerCommissionPercentage")].isNull() && m_seller_commission_percentage_isValid;

    m_seller_to_impala_payment_isValid = ::OpenAPI::fromJsonValue(m_seller_to_impala_payment, json[QString("sellerToImpalaPayment")]);
    m_seller_to_impala_payment_isSet = !json[QString("sellerToImpalaPayment")].isNull() && m_seller_to_impala_payment_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;
}

QString OAIRate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRate::asJsonObject() const {
    QJsonObject obj;
    if (m_cancellation_policies.size() > 0) {
        obj.insert(QString("cancellationPolicies"), ::OpenAPI::toJsonValue(m_cancellation_policies));
    }
    if (m_components.size() > 0) {
        obj.insert(QString("components"), ::OpenAPI::toJsonValue(m_components));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_hotel_agreement.isSet()) {
        obj.insert(QString("hotelAgreement"), ::OpenAPI::toJsonValue(m_hotel_agreement));
    }
    if (m_max_occupancy_isSet) {
        obj.insert(QString("maxOccupancy"), ::OpenAPI::toJsonValue(m_max_occupancy));
    }
    if (m_rate_id_isSet) {
        obj.insert(QString("rateId"), ::OpenAPI::toJsonValue(m_rate_id));
    }
    if (m_rate_plan_id_isSet) {
        obj.insert(QString("ratePlanId"), ::OpenAPI::toJsonValue(m_rate_plan_id));
    }
    if (m_retail_rate.isSet()) {
        obj.insert(QString("retailRate"), ::OpenAPI::toJsonValue(m_retail_rate));
    }
    if (m_rooms_sellable_isSet) {
        obj.insert(QString("roomsSellable"), ::OpenAPI::toJsonValue(m_rooms_sellable));
    }
    if (m_seller_commission_percentage_isSet) {
        obj.insert(QString("sellerCommissionPercentage"), ::OpenAPI::toJsonValue(m_seller_commission_percentage));
    }
    if (m_seller_to_impala_payment.isSet()) {
        obj.insert(QString("sellerToImpalaPayment"), ::OpenAPI::toJsonValue(m_seller_to_impala_payment));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

QSet<OAICancellationPolicy> OAIRate::getCancellationPolicies() const {
    return m_cancellation_policies;
}
void OAIRate::setCancellationPolicies(const QSet<OAICancellationPolicy> &cancellation_policies) {
    m_cancellation_policies = cancellation_policies;
    m_cancellation_policies_isSet = true;
}

bool OAIRate::is_cancellation_policies_Set() const{
    return m_cancellation_policies_isSet;
}

bool OAIRate::is_cancellation_policies_Valid() const{
    return m_cancellation_policies_isValid;
}

QSet<OAIRateComponent> OAIRate::getComponents() const {
    return m_components;
}
void OAIRate::setComponents(const QSet<OAIRateComponent> &components) {
    m_components = components;
    m_components_isSet = true;
}

bool OAIRate::is_components_Set() const{
    return m_components_isSet;
}

bool OAIRate::is_components_Valid() const{
    return m_components_isValid;
}

QDate OAIRate::getEnd() const {
    return m_end;
}
void OAIRate::setEnd(const QDate &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIRate::is_end_Set() const{
    return m_end_isSet;
}

bool OAIRate::is_end_Valid() const{
    return m_end_isValid;
}

OAIHotelAgreementStub OAIRate::getHotelAgreement() const {
    return m_hotel_agreement;
}
void OAIRate::setHotelAgreement(const OAIHotelAgreementStub &hotel_agreement) {
    m_hotel_agreement = hotel_agreement;
    m_hotel_agreement_isSet = true;
}

bool OAIRate::is_hotel_agreement_Set() const{
    return m_hotel_agreement_isSet;
}

bool OAIRate::is_hotel_agreement_Valid() const{
    return m_hotel_agreement_isValid;
}

qint32 OAIRate::getMaxOccupancy() const {
    return m_max_occupancy;
}
void OAIRate::setMaxOccupancy(const qint32 &max_occupancy) {
    m_max_occupancy = max_occupancy;
    m_max_occupancy_isSet = true;
}

bool OAIRate::is_max_occupancy_Set() const{
    return m_max_occupancy_isSet;
}

bool OAIRate::is_max_occupancy_Valid() const{
    return m_max_occupancy_isValid;
}

QString OAIRate::getRateId() const {
    return m_rate_id;
}
void OAIRate::setRateId(const QString &rate_id) {
    m_rate_id = rate_id;
    m_rate_id_isSet = true;
}

bool OAIRate::is_rate_id_Set() const{
    return m_rate_id_isSet;
}

bool OAIRate::is_rate_id_Valid() const{
    return m_rate_id_isValid;
}

qint32 OAIRate::getRatePlanId() const {
    return m_rate_plan_id;
}
void OAIRate::setRatePlanId(const qint32 &rate_plan_id) {
    m_rate_plan_id = rate_plan_id;
    m_rate_plan_id_isSet = true;
}

bool OAIRate::is_rate_plan_id_Set() const{
    return m_rate_plan_id_isSet;
}

bool OAIRate::is_rate_plan_id_Valid() const{
    return m_rate_plan_id_isValid;
}

OAIBookedRate_retailRate OAIRate::getRetailRate() const {
    return m_retail_rate;
}
void OAIRate::setRetailRate(const OAIBookedRate_retailRate &retail_rate) {
    m_retail_rate = retail_rate;
    m_retail_rate_isSet = true;
}

bool OAIRate::is_retail_rate_Set() const{
    return m_retail_rate_isSet;
}

bool OAIRate::is_retail_rate_Valid() const{
    return m_retail_rate_isValid;
}

double OAIRate::getRoomsSellable() const {
    return m_rooms_sellable;
}
void OAIRate::setRoomsSellable(const double &rooms_sellable) {
    m_rooms_sellable = rooms_sellable;
    m_rooms_sellable_isSet = true;
}

bool OAIRate::is_rooms_sellable_Set() const{
    return m_rooms_sellable_isSet;
}

bool OAIRate::is_rooms_sellable_Valid() const{
    return m_rooms_sellable_isValid;
}

float OAIRate::getSellerCommissionPercentage() const {
    return m_seller_commission_percentage;
}
void OAIRate::setSellerCommissionPercentage(const float &seller_commission_percentage) {
    m_seller_commission_percentage = seller_commission_percentage;
    m_seller_commission_percentage_isSet = true;
}

bool OAIRate::is_seller_commission_percentage_Set() const{
    return m_seller_commission_percentage_isSet;
}

bool OAIRate::is_seller_commission_percentage_Valid() const{
    return m_seller_commission_percentage_isValid;
}

OAIMoney OAIRate::getSellerToImpalaPayment() const {
    return m_seller_to_impala_payment;
}
void OAIRate::setSellerToImpalaPayment(const OAIMoney &seller_to_impala_payment) {
    m_seller_to_impala_payment = seller_to_impala_payment;
    m_seller_to_impala_payment_isSet = true;
}

bool OAIRate::is_seller_to_impala_payment_Set() const{
    return m_seller_to_impala_payment_isSet;
}

bool OAIRate::is_seller_to_impala_payment_Valid() const{
    return m_seller_to_impala_payment_isValid;
}

QDate OAIRate::getStart() const {
    return m_start;
}
void OAIRate::setStart(const QDate &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIRate::is_start_Set() const{
    return m_start_isSet;
}

bool OAIRate::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIRate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancellation_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_components.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hotel_agreement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_occupancy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retail_rate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rooms_sellable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_commission_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seller_to_impala_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cancellation_policies_isValid && m_components_isValid && m_end_isValid && m_hotel_agreement_isValid && m_max_occupancy_isValid && m_rate_id_isValid && m_retail_rate_isValid && m_seller_commission_percentage_isValid && m_start_isValid && true;
}

} // namespace OpenAPI
