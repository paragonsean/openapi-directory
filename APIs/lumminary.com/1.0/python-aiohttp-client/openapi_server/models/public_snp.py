# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicSNP(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternative_alleles: List[str]=None, chromosome: str=None, chromosome_accession: str=None, dbsnp_version: int=None, location: int=None, reference_allele: str=None, reference_genome: str=None, snp_id: str=None):
        """PublicSNP - a model defined in OpenAPI

        :param alternative_alleles: The alternative_alleles of this PublicSNP.
        :param chromosome: The chromosome of this PublicSNP.
        :param chromosome_accession: The chromosome_accession of this PublicSNP.
        :param dbsnp_version: The dbsnp_version of this PublicSNP.
        :param location: The location of this PublicSNP.
        :param reference_allele: The reference_allele of this PublicSNP.
        :param reference_genome: The reference_genome of this PublicSNP.
        :param snp_id: The snp_id of this PublicSNP.
        """
        self.openapi_types = {
            'alternative_alleles': List[str],
            'chromosome': str,
            'chromosome_accession': str,
            'dbsnp_version': int,
            'location': int,
            'reference_allele': str,
            'reference_genome': str,
            'snp_id': str
        }

        self.attribute_map = {
            'alternative_alleles': 'alternative_alleles',
            'chromosome': 'chromosome',
            'chromosome_accession': 'chromosome_accession',
            'dbsnp_version': 'dbsnp_version',
            'location': 'location',
            'reference_allele': 'reference_allele',
            'reference_genome': 'reference_genome',
            'snp_id': 'snp_id'
        }

        self._alternative_alleles = alternative_alleles
        self._chromosome = chromosome
        self._chromosome_accession = chromosome_accession
        self._dbsnp_version = dbsnp_version
        self._location = location
        self._reference_allele = reference_allele
        self._reference_genome = reference_genome
        self._snp_id = snp_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicSNP':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicSNP of this PublicSNP.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternative_alleles(self):
        """Gets the alternative_alleles of this PublicSNP.


        :return: The alternative_alleles of this PublicSNP.
        :rtype: List[str]
        """
        return self._alternative_alleles

    @alternative_alleles.setter
    def alternative_alleles(self, alternative_alleles):
        """Sets the alternative_alleles of this PublicSNP.


        :param alternative_alleles: The alternative_alleles of this PublicSNP.
        :type alternative_alleles: List[str]
        """

        self._alternative_alleles = alternative_alleles

    @property
    def chromosome(self):
        """Gets the chromosome of this PublicSNP.

        The cromosome on which the SNP is placed

        :return: The chromosome of this PublicSNP.
        :rtype: str
        """
        return self._chromosome

    @chromosome.setter
    def chromosome(self, chromosome):
        """Sets the chromosome of this PublicSNP.

        The cromosome on which the SNP is placed

        :param chromosome: The chromosome of this PublicSNP.
        :type chromosome: str
        """
        if chromosome is None:
            raise ValueError("Invalid value for `chromosome`, must not be `None`")
        if chromosome is not None and len(chromosome) < 1:
            raise ValueError("Invalid value for `chromosome`, length must be greater than or equal to `1`")

        self._chromosome = chromosome

    @property
    def chromosome_accession(self):
        """Gets the chromosome_accession of this PublicSNP.

        The accession of the chromosome on which the SNP is placed

        :return: The chromosome_accession of this PublicSNP.
        :rtype: str
        """
        return self._chromosome_accession

    @chromosome_accession.setter
    def chromosome_accession(self, chromosome_accession):
        """Sets the chromosome_accession of this PublicSNP.

        The accession of the chromosome on which the SNP is placed

        :param chromosome_accession: The chromosome_accession of this PublicSNP.
        :type chromosome_accession: str
        """
        if chromosome_accession is None:
            raise ValueError("Invalid value for `chromosome_accession`, must not be `None`")
        if chromosome_accession is not None and len(chromosome_accession) < 1:
            raise ValueError("Invalid value for `chromosome_accession`, length must be greater than or equal to `1`")

        self._chromosome_accession = chromosome_accession

    @property
    def dbsnp_version(self):
        """Gets the dbsnp_version of this PublicSNP.

        The dbSNP build to which snip attributes like location and chromosome accession refer.

        :return: The dbsnp_version of this PublicSNP.
        :rtype: int
        """
        return self._dbsnp_version

    @dbsnp_version.setter
    def dbsnp_version(self, dbsnp_version):
        """Sets the dbsnp_version of this PublicSNP.

        The dbSNP build to which snip attributes like location and chromosome accession refer.

        :param dbsnp_version: The dbsnp_version of this PublicSNP.
        :type dbsnp_version: int
        """
        if dbsnp_version is None:
            raise ValueError("Invalid value for `dbsnp_version`, must not be `None`")

        self._dbsnp_version = dbsnp_version

    @property
    def location(self):
        """Gets the location of this PublicSNP.

        The SNP's position on the chromosome

        :return: The location of this PublicSNP.
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PublicSNP.

        The SNP's position on the chromosome

        :param location: The location of this PublicSNP.
        :type location: int
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")
        if location is not None and location < 0:
            raise ValueError("Invalid value for `location`, must be a value greater than or equal to `0`")

        self._location = location

    @property
    def reference_allele(self):
        """Gets the reference_allele of this PublicSNP.

        One of the possible alleles

        :return: The reference_allele of this PublicSNP.
        :rtype: str
        """
        return self._reference_allele

    @reference_allele.setter
    def reference_allele(self, reference_allele):
        """Sets the reference_allele of this PublicSNP.

        One of the possible alleles

        :param reference_allele: The reference_allele of this PublicSNP.
        :type reference_allele: str
        """
        if reference_allele is None:
            raise ValueError("Invalid value for `reference_allele`, must not be `None`")
        if reference_allele is not None and len(reference_allele) < 1:
            raise ValueError("Invalid value for `reference_allele`, length must be greater than or equal to `1`")

        self._reference_allele = reference_allele

    @property
    def reference_genome(self):
        """Gets the reference_genome of this PublicSNP.

        The ID and build number of the genome against which the SNP was built and placed

        :return: The reference_genome of this PublicSNP.
        :rtype: str
        """
        return self._reference_genome

    @reference_genome.setter
    def reference_genome(self, reference_genome):
        """Sets the reference_genome of this PublicSNP.

        The ID and build number of the genome against which the SNP was built and placed

        :param reference_genome: The reference_genome of this PublicSNP.
        :type reference_genome: str
        """
        if reference_genome is None:
            raise ValueError("Invalid value for `reference_genome`, must not be `None`")
        if reference_genome is not None and len(reference_genome) < 1:
            raise ValueError("Invalid value for `reference_genome`, length must be greater than or equal to `1`")

        self._reference_genome = reference_genome

    @property
    def snp_id(self):
        """Gets the snp_id of this PublicSNP.

        The ID of the SNP

        :return: The snp_id of this PublicSNP.
        :rtype: str
        """
        return self._snp_id

    @snp_id.setter
    def snp_id(self, snp_id):
        """Sets the snp_id of this PublicSNP.

        The ID of the SNP

        :param snp_id: The snp_id of this PublicSNP.
        :type snp_id: str
        """
        if snp_id is None:
            raise ValueError("Invalid value for `snp_id`, must not be `None`")
        if snp_id is not None and len(snp_id) < 1:
            raise ValueError("Invalid value for `snp_id`, length must be greater than or equal to `1`")

        self._snp_id = snp_id
