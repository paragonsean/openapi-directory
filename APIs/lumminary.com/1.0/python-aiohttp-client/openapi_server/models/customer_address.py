# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address1: str=None, address2: str=None, city: str=None, country: str=None, phone: str=None, state: str=None, zipcode: str=None):
        """CustomerAddress - a model defined in OpenAPI

        :param address1: The address1 of this CustomerAddress.
        :param address2: The address2 of this CustomerAddress.
        :param city: The city of this CustomerAddress.
        :param country: The country of this CustomerAddress.
        :param phone: The phone of this CustomerAddress.
        :param state: The state of this CustomerAddress.
        :param zipcode: The zipcode of this CustomerAddress.
        """
        self.openapi_types = {
            'address1': str,
            'address2': str,
            'city': str,
            'country': str,
            'phone': str,
            'state': str,
            'zipcode': str
        }

        self.attribute_map = {
            'address1': 'address1',
            'address2': 'address2',
            'city': 'city',
            'country': 'country',
            'phone': 'phone',
            'state': 'state',
            'zipcode': 'zipcode'
        }

        self._address1 = address1
        self._address2 = address2
        self._city = city
        self._country = country
        self._phone = phone
        self._state = state
        self._zipcode = zipcode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerAddress of this CustomerAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address1(self):
        """Gets the address1 of this CustomerAddress.

        

        :return: The address1 of this CustomerAddress.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this CustomerAddress.

        

        :param address1: The address1 of this CustomerAddress.
        :type address1: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this CustomerAddress.

        

        :return: The address2 of this CustomerAddress.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this CustomerAddress.

        

        :param address2: The address2 of this CustomerAddress.
        :type address2: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this CustomerAddress.

        

        :return: The city of this CustomerAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CustomerAddress.

        

        :param city: The city of this CustomerAddress.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this CustomerAddress.

        

        :return: The country of this CustomerAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CustomerAddress.

        

        :param country: The country of this CustomerAddress.
        :type country: str
        """

        self._country = country

    @property
    def phone(self):
        """Gets the phone of this CustomerAddress.

        

        :return: The phone of this CustomerAddress.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CustomerAddress.

        

        :param phone: The phone of this CustomerAddress.
        :type phone: str
        """

        self._phone = phone

    @property
    def state(self):
        """Gets the state of this CustomerAddress.

        

        :return: The state of this CustomerAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CustomerAddress.

        

        :param state: The state of this CustomerAddress.
        :type state: str
        """

        self._state = state

    @property
    def zipcode(self):
        """Gets the zipcode of this CustomerAddress.

        

        :return: The zipcode of this CustomerAddress.
        :rtype: str
        """
        return self._zipcode

    @zipcode.setter
    def zipcode(self, zipcode):
        """Sets the zipcode of this CustomerAddress.

        

        :param zipcode: The zipcode of this CustomerAddress.
        :type zipcode: str
        """

        self._zipcode = zipcode
