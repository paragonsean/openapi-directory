# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_address import CustomerAddress
from openapi_server.models.customer_name import CustomerName
from openapi_server import util


class AccessScope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: CustomerAddress=None, dataset: str=None, email: str=None, login: str=None, name: CustomerName=None, sex: str=None):
        """AccessScope - a model defined in OpenAPI

        :param address: The address of this AccessScope.
        :param dataset: The dataset of this AccessScope.
        :param email: The email of this AccessScope.
        :param login: The login of this AccessScope.
        :param name: The name of this AccessScope.
        :param sex: The sex of this AccessScope.
        """
        self.openapi_types = {
            'address': CustomerAddress,
            'dataset': str,
            'email': str,
            'login': str,
            'name': CustomerName,
            'sex': str
        }

        self.attribute_map = {
            'address': 'address',
            'dataset': 'dataset',
            'email': 'email',
            'login': 'login',
            'name': 'name',
            'sex': 'sex'
        }

        self._address = address
        self._dataset = dataset
        self._email = email
        self._login = login
        self._name = name
        self._sex = sex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessScope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessScope of this AccessScope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this AccessScope.


        :return: The address of this AccessScope.
        :rtype: CustomerAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AccessScope.


        :param address: The address of this AccessScope.
        :type address: CustomerAddress
        """

        self._address = address

    @property
    def dataset(self):
        """Gets the dataset of this AccessScope.

        Access to one of the customer's datasets

        :return: The dataset of this AccessScope.
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this AccessScope.

        Access to one of the customer's datasets

        :param dataset: The dataset of this AccessScope.
        :type dataset: str
        """

        self._dataset = dataset

    @property
    def email(self):
        """Gets the email of this AccessScope.

        Access to customer email

        :return: The email of this AccessScope.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccessScope.

        Access to customer email

        :param email: The email of this AccessScope.
        :type email: str
        """

        self._email = email

    @property
    def login(self):
        """Gets the login of this AccessScope.

        Access to no customer information, just the customer UUID

        :return: The login of this AccessScope.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this AccessScope.

        Access to no customer information, just the customer UUID

        :param login: The login of this AccessScope.
        :type login: str
        """

        self._login = login

    @property
    def name(self):
        """Gets the name of this AccessScope.


        :return: The name of this AccessScope.
        :rtype: CustomerName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccessScope.


        :param name: The name of this AccessScope.
        :type name: CustomerName
        """

        self._name = name

    @property
    def sex(self):
        """Gets the sex of this AccessScope.

        The sex of the customer. One of : F, M, null

        :return: The sex of this AccessScope.
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this AccessScope.

        The sex of the customer. One of : F, M, null

        :param sex: The sex of this AccessScope.
        :type sex: str
        """

        self._sex = sex
