# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_uuid: str=None, client_password: str=None, client_username: str=None, create_timestamp: int=None, report_credentials_uuid: str=None, report_url: str=None):
        """ReportCredentials - a model defined in OpenAPI

        :param authorization_uuid: The authorization_uuid of this ReportCredentials.
        :param client_password: The client_password of this ReportCredentials.
        :param client_username: The client_username of this ReportCredentials.
        :param create_timestamp: The create_timestamp of this ReportCredentials.
        :param report_credentials_uuid: The report_credentials_uuid of this ReportCredentials.
        :param report_url: The report_url of this ReportCredentials.
        """
        self.openapi_types = {
            'authorization_uuid': str,
            'client_password': str,
            'client_username': str,
            'create_timestamp': int,
            'report_credentials_uuid': str,
            'report_url': str
        }

        self.attribute_map = {
            'authorization_uuid': 'authorization_uuid',
            'client_password': 'client_password',
            'client_username': 'client_username',
            'create_timestamp': 'create_timestamp',
            'report_credentials_uuid': 'report_credentials_uuid',
            'report_url': 'report_url'
        }

        self._authorization_uuid = authorization_uuid
        self._client_password = client_password
        self._client_username = client_username
        self._create_timestamp = create_timestamp
        self._report_credentials_uuid = report_credentials_uuid
        self._report_url = report_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportCredentials of this ReportCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_uuid(self):
        """Gets the authorization_uuid of this ReportCredentials.

        The uuid of the authorization that generated this report

        :return: The authorization_uuid of this ReportCredentials.
        :rtype: str
        """
        return self._authorization_uuid

    @authorization_uuid.setter
    def authorization_uuid(self, authorization_uuid):
        """Sets the authorization_uuid of this ReportCredentials.

        The uuid of the authorization that generated this report

        :param authorization_uuid: The authorization_uuid of this ReportCredentials.
        :type authorization_uuid: str
        """
        if authorization_uuid is None:
            raise ValueError("Invalid value for `authorization_uuid`, must not be `None`")

        self._authorization_uuid = authorization_uuid

    @property
    def client_password(self):
        """Gets the client_password of this ReportCredentials.

        The password generated password, on the partner product website

        :return: The client_password of this ReportCredentials.
        :rtype: str
        """
        return self._client_password

    @client_password.setter
    def client_password(self, client_password):
        """Sets the client_password of this ReportCredentials.

        The password generated password, on the partner product website

        :param client_password: The client_password of this ReportCredentials.
        :type client_password: str
        """

        self._client_password = client_password

    @property
    def client_username(self):
        """Gets the client_username of this ReportCredentials.

        The generated username, on the partner product website

        :return: The client_username of this ReportCredentials.
        :rtype: str
        """
        return self._client_username

    @client_username.setter
    def client_username(self, client_username):
        """Sets the client_username of this ReportCredentials.

        The generated username, on the partner product website

        :param client_username: The client_username of this ReportCredentials.
        :type client_username: str
        """

        self._client_username = client_username

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this ReportCredentials.

        Creation timestamp for Report

        :return: The create_timestamp of this ReportCredentials.
        :rtype: int
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this ReportCredentials.

        Creation timestamp for Report

        :param create_timestamp: The create_timestamp of this ReportCredentials.
        :type create_timestamp: int
        """
        if create_timestamp is None:
            raise ValueError("Invalid value for `create_timestamp`, must not be `None`")

        self._create_timestamp = create_timestamp

    @property
    def report_credentials_uuid(self):
        """Gets the report_credentials_uuid of this ReportCredentials.

        The uuid of the report

        :return: The report_credentials_uuid of this ReportCredentials.
        :rtype: str
        """
        return self._report_credentials_uuid

    @report_credentials_uuid.setter
    def report_credentials_uuid(self, report_credentials_uuid):
        """Sets the report_credentials_uuid of this ReportCredentials.

        The uuid of the report

        :param report_credentials_uuid: The report_credentials_uuid of this ReportCredentials.
        :type report_credentials_uuid: str
        """
        if report_credentials_uuid is None:
            raise ValueError("Invalid value for `report_credentials_uuid`, must not be `None`")

        self._report_credentials_uuid = report_credentials_uuid

    @property
    def report_url(self):
        """Gets the report_url of this ReportCredentials.

        URL to the report location

        :return: The report_url of this ReportCredentials.
        :rtype: str
        """
        return self._report_url

    @report_url.setter
    def report_url(self, report_url):
        """Sets the report_url of this ReportCredentials.

        URL to the report location

        :param report_url: The report_url of this ReportCredentials.
        :type report_url: str
        """

        self._report_url = report_url
