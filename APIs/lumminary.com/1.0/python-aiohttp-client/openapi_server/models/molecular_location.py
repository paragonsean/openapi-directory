# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MolecularLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chromosome_accession: str=None, start: int=None, stop: int=None):
        """MolecularLocation - a model defined in OpenAPI

        :param chromosome_accession: The chromosome_accession of this MolecularLocation.
        :param start: The start of this MolecularLocation.
        :param stop: The stop of this MolecularLocation.
        """
        self.openapi_types = {
            'chromosome_accession': str,
            'start': int,
            'stop': int
        }

        self.attribute_map = {
            'chromosome_accession': 'chromosome_accession',
            'start': 'start',
            'stop': 'stop'
        }

        self._chromosome_accession = chromosome_accession
        self._start = start
        self._stop = stop

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MolecularLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MolecularLocation of this MolecularLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chromosome_accession(self):
        """Gets the chromosome_accession of this MolecularLocation.

        The cromosome on which the gene is placed

        :return: The chromosome_accession of this MolecularLocation.
        :rtype: str
        """
        return self._chromosome_accession

    @chromosome_accession.setter
    def chromosome_accession(self, chromosome_accession):
        """Sets the chromosome_accession of this MolecularLocation.

        The cromosome on which the gene is placed

        :param chromosome_accession: The chromosome_accession of this MolecularLocation.
        :type chromosome_accession: str
        """
        if chromosome_accession is None:
            raise ValueError("Invalid value for `chromosome_accession`, must not be `None`")
        if chromosome_accession is not None and len(chromosome_accession) < 1:
            raise ValueError("Invalid value for `chromosome_accession`, length must be greater than or equal to `1`")

        self._chromosome_accession = chromosome_accession

    @property
    def start(self):
        """Gets the start of this MolecularLocation.

        The gene's start position on the scaffold

        :return: The start of this MolecularLocation.
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this MolecularLocation.

        The gene's start position on the scaffold

        :param start: The start of this MolecularLocation.
        :type start: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")
        if start is not None and start < 0:
            raise ValueError("Invalid value for `start`, must be a value greater than or equal to `0`")

        self._start = start

    @property
    def stop(self):
        """Gets the stop of this MolecularLocation.

        The gene's stop position on the scaffold

        :return: The stop of this MolecularLocation.
        :rtype: int
        """
        return self._stop

    @stop.setter
    def stop(self, stop):
        """Sets the stop of this MolecularLocation.

        The gene's stop position on the scaffold

        :param stop: The stop of this MolecularLocation.
        :type stop: int
        """
        if stop is None:
            raise ValueError("Invalid value for `stop`, must not be `None`")
        if stop is not None and stop < 0:
            raise ValueError("Invalid value for `stop`, must be a value greater than or equal to `0`")

        self._stop = stop
