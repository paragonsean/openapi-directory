# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.access_scope import AccessScope
from openapi_server.models.report_credentials import ReportCredentials
from openapi_server.models.report_file import ReportFile
from openapi_server import util


class Authorization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_uuid: str=None, client_uuid: str=None, create_timestamp: int=None, is_active: bool=None, order: str=None, product_uuid: str=None, report_credentials: List[ReportCredentials]=None, report_files: List[ReportFile]=None, scopes: AccessScope=None, sequence_number: int=None, state: str=None):
        """Authorization - a model defined in OpenAPI

        :param authorization_uuid: The authorization_uuid of this Authorization.
        :param client_uuid: The client_uuid of this Authorization.
        :param create_timestamp: The create_timestamp of this Authorization.
        :param is_active: The is_active of this Authorization.
        :param order: The order of this Authorization.
        :param product_uuid: The product_uuid of this Authorization.
        :param report_credentials: The report_credentials of this Authorization.
        :param report_files: The report_files of this Authorization.
        :param scopes: The scopes of this Authorization.
        :param sequence_number: The sequence_number of this Authorization.
        :param state: The state of this Authorization.
        """
        self.openapi_types = {
            'authorization_uuid': str,
            'client_uuid': str,
            'create_timestamp': int,
            'is_active': bool,
            'order': str,
            'product_uuid': str,
            'report_credentials': List[ReportCredentials],
            'report_files': List[ReportFile],
            'scopes': AccessScope,
            'sequence_number': int,
            'state': str
        }

        self.attribute_map = {
            'authorization_uuid': 'authorization_uuid',
            'client_uuid': 'client_uuid',
            'create_timestamp': 'create_timestamp',
            'is_active': 'is_active',
            'order': 'order',
            'product_uuid': 'product_uuid',
            'report_credentials': 'report_credentials',
            'report_files': 'report_files',
            'scopes': 'scopes',
            'sequence_number': 'sequence_number',
            'state': 'state'
        }

        self._authorization_uuid = authorization_uuid
        self._client_uuid = client_uuid
        self._create_timestamp = create_timestamp
        self._is_active = is_active
        self._order = order
        self._product_uuid = product_uuid
        self._report_credentials = report_credentials
        self._report_files = report_files
        self._scopes = scopes
        self._sequence_number = sequence_number
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Authorization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Authorization of this Authorization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_uuid(self):
        """Gets the authorization_uuid of this Authorization.

        Identifier of the Authorization

        :return: The authorization_uuid of this Authorization.
        :rtype: str
        """
        return self._authorization_uuid

    @authorization_uuid.setter
    def authorization_uuid(self, authorization_uuid):
        """Sets the authorization_uuid of this Authorization.

        Identifier of the Authorization

        :param authorization_uuid: The authorization_uuid of this Authorization.
        :type authorization_uuid: str
        """
        if authorization_uuid is None:
            raise ValueError("Invalid value for `authorization_uuid`, must not be `None`")

        self._authorization_uuid = authorization_uuid

    @property
    def client_uuid(self):
        """Gets the client_uuid of this Authorization.

        The UUID of the client owning the Dataset to which the product is authorized

        :return: The client_uuid of this Authorization.
        :rtype: str
        """
        return self._client_uuid

    @client_uuid.setter
    def client_uuid(self, client_uuid):
        """Sets the client_uuid of this Authorization.

        The UUID of the client owning the Dataset to which the product is authorized

        :param client_uuid: The client_uuid of this Authorization.
        :type client_uuid: str
        """
        if client_uuid is None:
            raise ValueError("Invalid value for `client_uuid`, must not be `None`")

        self._client_uuid = client_uuid

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this Authorization.

        Creation timestamp for the Authorization

        :return: The create_timestamp of this Authorization.
        :rtype: int
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this Authorization.

        Creation timestamp for the Authorization

        :param create_timestamp: The create_timestamp of this Authorization.
        :type create_timestamp: int
        """
        if create_timestamp is None:
            raise ValueError("Invalid value for `create_timestamp`, must not be `None`")

        self._create_timestamp = create_timestamp

    @property
    def is_active(self):
        """Gets the is_active of this Authorization.

        If false, the the authorization is revoked and data access authorizations fail

        :return: The is_active of this Authorization.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Authorization.

        If false, the the authorization is revoked and data access authorizations fail

        :param is_active: The is_active of this Authorization.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def order(self):
        """Gets the order of this Authorization.

        Optional UUID of the Order that created the Authorization

        :return: The order of this Authorization.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Authorization.

        Optional UUID of the Order that created the Authorization

        :param order: The order of this Authorization.
        :type order: str
        """

        self._order = order

    @property
    def product_uuid(self):
        """Gets the product_uuid of this Authorization.

        Identifier of the Product to be authorized

        :return: The product_uuid of this Authorization.
        :rtype: str
        """
        return self._product_uuid

    @product_uuid.setter
    def product_uuid(self, product_uuid):
        """Sets the product_uuid of this Authorization.

        Identifier of the Product to be authorized

        :param product_uuid: The product_uuid of this Authorization.
        :type product_uuid: str
        """
        if product_uuid is None:
            raise ValueError("Invalid value for `product_uuid`, must not be `None`")

        self._product_uuid = product_uuid

    @property
    def report_credentials(self):
        """Gets the report_credentials of this Authorization.


        :return: The report_credentials of this Authorization.
        :rtype: List[ReportCredentials]
        """
        return self._report_credentials

    @report_credentials.setter
    def report_credentials(self, report_credentials):
        """Sets the report_credentials of this Authorization.


        :param report_credentials: The report_credentials of this Authorization.
        :type report_credentials: List[ReportCredentials]
        """

        self._report_credentials = report_credentials

    @property
    def report_files(self):
        """Gets the report_files of this Authorization.


        :return: The report_files of this Authorization.
        :rtype: List[ReportFile]
        """
        return self._report_files

    @report_files.setter
    def report_files(self, report_files):
        """Sets the report_files of this Authorization.


        :param report_files: The report_files of this Authorization.
        :type report_files: List[ReportFile]
        """

        self._report_files = report_files

    @property
    def scopes(self):
        """Gets the scopes of this Authorization.


        :return: The scopes of this Authorization.
        :rtype: AccessScope
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this Authorization.


        :param scopes: The scopes of this Authorization.
        :type scopes: AccessScope
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")

        self._scopes = scopes

    @property
    def sequence_number(self):
        """Gets the sequence_number of this Authorization.

        The sequence number of the Authorization. Used as a filter when fetching new Authorizations

        :return: The sequence_number of this Authorization.
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this Authorization.

        The sequence number of the Authorization. Used as a filter when fetching new Authorizations

        :param sequence_number: The sequence_number of this Authorization.
        :type sequence_number: int
        """

        self._sequence_number = sequence_number

    @property
    def state(self):
        """Gets the state of this Authorization.

        The authorization state. One of : ['authorization_state_pending_dataset', 'authorization_state_fulfillable', 'authorization_state_result_available', 'authorization_state_not_fulfillable']

        :return: The state of this Authorization.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Authorization.

        The authorization state. One of : ['authorization_state_pending_dataset', 'authorization_state_fulfillable', 'authorization_state_result_available', 'authorization_state_not_fulfillable']

        :param state: The state of this Authorization.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
