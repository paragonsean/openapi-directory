# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.client_snp import ClientSNP
from openapi_server.models.molecular_location import MolecularLocation
from openapi_server import util


class ClientGene(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, molecular_location: MolecularLocation=None, snps: List[ClientSNP]=None, symbol: str=None):
        """ClientGene - a model defined in OpenAPI

        :param molecular_location: The molecular_location of this ClientGene.
        :param snps: The snps of this ClientGene.
        :param symbol: The symbol of this ClientGene.
        """
        self.openapi_types = {
            'molecular_location': MolecularLocation,
            'snps': List[ClientSNP],
            'symbol': str
        }

        self.attribute_map = {
            'molecular_location': 'molecular_location',
            'snps': 'snps',
            'symbol': 'symbol'
        }

        self._molecular_location = molecular_location
        self._snps = snps
        self._symbol = symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientGene':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientGene of this ClientGene.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def molecular_location(self):
        """Gets the molecular_location of this ClientGene.


        :return: The molecular_location of this ClientGene.
        :rtype: MolecularLocation
        """
        return self._molecular_location

    @molecular_location.setter
    def molecular_location(self, molecular_location):
        """Sets the molecular_location of this ClientGene.


        :param molecular_location: The molecular_location of this ClientGene.
        :type molecular_location: MolecularLocation
        """
        if molecular_location is None:
            raise ValueError("Invalid value for `molecular_location`, must not be `None`")

        self._molecular_location = molecular_location

    @property
    def snps(self):
        """Gets the snps of this ClientGene.


        :return: The snps of this ClientGene.
        :rtype: List[ClientSNP]
        """
        return self._snps

    @snps.setter
    def snps(self, snps):
        """Sets the snps of this ClientGene.


        :param snps: The snps of this ClientGene.
        :type snps: List[ClientSNP]
        """

        self._snps = snps

    @property
    def symbol(self):
        """Gets the symbol of this ClientGene.

        The gene accession string

        :return: The symbol of this ClientGene.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this ClientGene.

        The gene accession string

        :param symbol: The symbol of this ClientGene.
        :type symbol: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")
        if symbol is not None and len(symbol) < 1:
            raise ValueError("Invalid value for `symbol`, length must be greater than or equal to `1`")

        self._symbol = symbol
