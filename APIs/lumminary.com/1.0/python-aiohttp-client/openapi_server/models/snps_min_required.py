# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SnpsMinRequired(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min_pct: int=None, snps: List[str]=None):
        """SnpsMinRequired - a model defined in OpenAPI

        :param min_pct: The min_pct of this SnpsMinRequired.
        :param snps: The snps of this SnpsMinRequired.
        """
        self.openapi_types = {
            'min_pct': int,
            'snps': List[str]
        }

        self.attribute_map = {
            'min_pct': 'min_pct',
            'snps': 'snps'
        }

        self._min_pct = min_pct
        self._snps = snps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SnpsMinRequired':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SnpsMinRequired of this SnpsMinRequired.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_pct(self):
        """Gets the min_pct of this SnpsMinRequired.

        Minimum required percentage of snps that should be present in the Dataset for compatibility

        :return: The min_pct of this SnpsMinRequired.
        :rtype: int
        """
        return self._min_pct

    @min_pct.setter
    def min_pct(self, min_pct):
        """Sets the min_pct of this SnpsMinRequired.

        Minimum required percentage of snps that should be present in the Dataset for compatibility

        :param min_pct: The min_pct of this SnpsMinRequired.
        :type min_pct: int
        """
        if min_pct is None:
            raise ValueError("Invalid value for `min_pct`, must not be `None`")
        if min_pct is not None and min_pct < 0:
            raise ValueError("Invalid value for `min_pct`, must be a value greater than or equal to `0`")

        self._min_pct = min_pct

    @property
    def snps(self):
        """Gets the snps of this SnpsMinRequired.

        List of snps that are (possibly partially) required for the Product to be compatible with a Dataset

        :return: The snps of this SnpsMinRequired.
        :rtype: List[str]
        """
        return self._snps

    @snps.setter
    def snps(self, snps):
        """Sets the snps of this SnpsMinRequired.

        List of snps that are (possibly partially) required for the Product to be compatible with a Dataset

        :param snps: The snps of this SnpsMinRequired.
        :type snps: List[str]
        """
        if snps is None:
            raise ValueError("Invalid value for `snps`, must not be `None`")

        self._snps = snps
