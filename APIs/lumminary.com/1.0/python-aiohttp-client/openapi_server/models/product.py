# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.snps_min_required import SnpsMinRequired
from openapi_server import util


class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorized_scopes: List[str]=None, email: str=None, product_uuid: str=None, redirect_uri: str=None, snps_authorized: List[str]=None, snps_authorized_any: bool=None, snps_min_required: SnpsMinRequired=None, snps_min_required_any: bool=None):
        """Product - a model defined in OpenAPI

        :param authorized_scopes: The authorized_scopes of this Product.
        :param email: The email of this Product.
        :param product_uuid: The product_uuid of this Product.
        :param redirect_uri: The redirect_uri of this Product.
        :param snps_authorized: The snps_authorized of this Product.
        :param snps_authorized_any: The snps_authorized_any of this Product.
        :param snps_min_required: The snps_min_required of this Product.
        :param snps_min_required_any: The snps_min_required_any of this Product.
        """
        self.openapi_types = {
            'authorized_scopes': List[str],
            'email': str,
            'product_uuid': str,
            'redirect_uri': str,
            'snps_authorized': List[str],
            'snps_authorized_any': bool,
            'snps_min_required': SnpsMinRequired,
            'snps_min_required_any': bool
        }

        self.attribute_map = {
            'authorized_scopes': 'authorized_scopes',
            'email': 'email',
            'product_uuid': 'product_uuid',
            'redirect_uri': 'redirect_uri',
            'snps_authorized': 'snps_authorized',
            'snps_authorized_any': 'snps_authorized_any',
            'snps_min_required': 'snps_min_required',
            'snps_min_required_any': 'snps_min_required_any'
        }

        self._authorized_scopes = authorized_scopes
        self._email = email
        self._product_uuid = product_uuid
        self._redirect_uri = redirect_uri
        self._snps_authorized = snps_authorized
        self._snps_authorized_any = snps_authorized_any
        self._snps_min_required = snps_min_required
        self._snps_min_required_any = snps_min_required_any

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product of this Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorized_scopes(self):
        """Gets the authorized_scopes of this Product.

        A list of scopes that the product can require from clients

        :return: The authorized_scopes of this Product.
        :rtype: List[str]
        """
        return self._authorized_scopes

    @authorized_scopes.setter
    def authorized_scopes(self, authorized_scopes):
        """Sets the authorized_scopes of this Product.

        A list of scopes that the product can require from clients

        :param authorized_scopes: The authorized_scopes of this Product.
        :type authorized_scopes: List[str]
        """
        if authorized_scopes is None:
            raise ValueError("Invalid value for `authorized_scopes`, must not be `None`")

        self._authorized_scopes = authorized_scopes

    @property
    def email(self):
        """Gets the email of this Product.

        The contact email for the product

        :return: The email of this Product.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Product.

        The contact email for the product

        :param email: The email of this Product.
        :type email: str
        """

        self._email = email

    @property
    def product_uuid(self):
        """Gets the product_uuid of this Product.

        The product identifier

        :return: The product_uuid of this Product.
        :rtype: str
        """
        return self._product_uuid

    @product_uuid.setter
    def product_uuid(self, product_uuid):
        """Sets the product_uuid of this Product.

        The product identifier

        :param product_uuid: The product_uuid of this Product.
        :type product_uuid: str
        """
        if product_uuid is None:
            raise ValueError("Invalid value for `product_uuid`, must not be `None`")

        self._product_uuid = product_uuid

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this Product.

        A redirect url registered as a callback for the Connect with Lumminary authorization flow

        :return: The redirect_uri of this Product.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this Product.

        A redirect url registered as a callback for the Connect with Lumminary authorization flow

        :param redirect_uri: The redirect_uri of this Product.
        :type redirect_uri: str
        """

        self._redirect_uri = redirect_uri

    @property
    def snps_authorized(self):
        """Gets the snps_authorized of this Product.

        A superset of snps_min_required, containing all SNPs to which an Product has access (includes optional SNPs)

        :return: The snps_authorized of this Product.
        :rtype: List[str]
        """
        return self._snps_authorized

    @snps_authorized.setter
    def snps_authorized(self, snps_authorized):
        """Sets the snps_authorized of this Product.

        A superset of snps_min_required, containing all SNPs to which an Product has access (includes optional SNPs)

        :param snps_authorized: The snps_authorized of this Product.
        :type snps_authorized: List[str]
        """
        if snps_authorized is None:
            raise ValueError("Invalid value for `snps_authorized`, must not be `None`")

        self._snps_authorized = snps_authorized

    @property
    def snps_authorized_any(self):
        """Gets the snps_authorized_any of this Product.

        A boolean value specifying if SNP set is not strict

        :return: The snps_authorized_any of this Product.
        :rtype: bool
        """
        return self._snps_authorized_any

    @snps_authorized_any.setter
    def snps_authorized_any(self, snps_authorized_any):
        """Sets the snps_authorized_any of this Product.

        A boolean value specifying if SNP set is not strict

        :param snps_authorized_any: The snps_authorized_any of this Product.
        :type snps_authorized_any: bool
        """
        if snps_authorized_any is None:
            raise ValueError("Invalid value for `snps_authorized_any`, must not be `None`")

        self._snps_authorized_any = snps_authorized_any

    @property
    def snps_min_required(self):
        """Gets the snps_min_required of this Product.


        :return: The snps_min_required of this Product.
        :rtype: SnpsMinRequired
        """
        return self._snps_min_required

    @snps_min_required.setter
    def snps_min_required(self, snps_min_required):
        """Sets the snps_min_required of this Product.


        :param snps_min_required: The snps_min_required of this Product.
        :type snps_min_required: SnpsMinRequired
        """
        if snps_min_required is None:
            raise ValueError("Invalid value for `snps_min_required`, must not be `None`")

        self._snps_min_required = snps_min_required

    @property
    def snps_min_required_any(self):
        """Gets the snps_min_required_any of this Product.

        A boolean value specifying if SNP set is not strict

        :return: The snps_min_required_any of this Product.
        :rtype: bool
        """
        return self._snps_min_required_any

    @snps_min_required_any.setter
    def snps_min_required_any(self, snps_min_required_any):
        """Sets the snps_min_required_any of this Product.

        A boolean value specifying if SNP set is not strict

        :param snps_min_required_any: The snps_min_required_any of this Product.
        :type snps_min_required_any: bool
        """
        if snps_min_required_any is None:
            raise ValueError("Invalid value for `snps_min_required_any`, must not be `None`")

        self._snps_min_required_any = snps_min_required_any
