# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_location import FileLocation
from openapi_server import util


class ReportFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_uuid: str=None, create_timestamp: int=None, file_location: FileLocation=None, report_file_uuid: str=None):
        """ReportFile - a model defined in OpenAPI

        :param authorization_uuid: The authorization_uuid of this ReportFile.
        :param create_timestamp: The create_timestamp of this ReportFile.
        :param file_location: The file_location of this ReportFile.
        :param report_file_uuid: The report_file_uuid of this ReportFile.
        """
        self.openapi_types = {
            'authorization_uuid': str,
            'create_timestamp': int,
            'file_location': FileLocation,
            'report_file_uuid': str
        }

        self.attribute_map = {
            'authorization_uuid': 'authorization_uuid',
            'create_timestamp': 'create_timestamp',
            'file_location': 'file_location',
            'report_file_uuid': 'report_file_uuid'
        }

        self._authorization_uuid = authorization_uuid
        self._create_timestamp = create_timestamp
        self._file_location = file_location
        self._report_file_uuid = report_file_uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportFile of this ReportFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_uuid(self):
        """Gets the authorization_uuid of this ReportFile.

        The uuid of the authorization that generated this report

        :return: The authorization_uuid of this ReportFile.
        :rtype: str
        """
        return self._authorization_uuid

    @authorization_uuid.setter
    def authorization_uuid(self, authorization_uuid):
        """Sets the authorization_uuid of this ReportFile.

        The uuid of the authorization that generated this report

        :param authorization_uuid: The authorization_uuid of this ReportFile.
        :type authorization_uuid: str
        """
        if authorization_uuid is None:
            raise ValueError("Invalid value for `authorization_uuid`, must not be `None`")

        self._authorization_uuid = authorization_uuid

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this ReportFile.

        Creation timestamp for Report

        :return: The create_timestamp of this ReportFile.
        :rtype: int
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this ReportFile.

        Creation timestamp for Report

        :param create_timestamp: The create_timestamp of this ReportFile.
        :type create_timestamp: int
        """
        if create_timestamp is None:
            raise ValueError("Invalid value for `create_timestamp`, must not be `None`")

        self._create_timestamp = create_timestamp

    @property
    def file_location(self):
        """Gets the file_location of this ReportFile.


        :return: The file_location of this ReportFile.
        :rtype: FileLocation
        """
        return self._file_location

    @file_location.setter
    def file_location(self, file_location):
        """Sets the file_location of this ReportFile.


        :param file_location: The file_location of this ReportFile.
        :type file_location: FileLocation
        """
        if file_location is None:
            raise ValueError("Invalid value for `file_location`, must not be `None`")

        self._file_location = file_location

    @property
    def report_file_uuid(self):
        """Gets the report_file_uuid of this ReportFile.

        The uuid of the report

        :return: The report_file_uuid of this ReportFile.
        :rtype: str
        """
        return self._report_file_uuid

    @report_file_uuid.setter
    def report_file_uuid(self, report_file_uuid):
        """Sets the report_file_uuid of this ReportFile.

        The uuid of the report

        :param report_file_uuid: The report_file_uuid of this ReportFile.
        :type report_file_uuid: str
        """
        if report_file_uuid is None:
            raise ValueError("Invalid value for `report_file_uuid`, must not be `None`")

        self._report_file_uuid = report_file_uuid
