# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicGene(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chromosome: str=None, molecular_end_position: int=None, molecular_start_position: int=None, parent_accession: str=None, snp_ids: List[str]=None, symbol: str=None):
        """PublicGene - a model defined in OpenAPI

        :param chromosome: The chromosome of this PublicGene.
        :param molecular_end_position: The molecular_end_position of this PublicGene.
        :param molecular_start_position: The molecular_start_position of this PublicGene.
        :param parent_accession: The parent_accession of this PublicGene.
        :param snp_ids: The snp_ids of this PublicGene.
        :param symbol: The symbol of this PublicGene.
        """
        self.openapi_types = {
            'chromosome': str,
            'molecular_end_position': int,
            'molecular_start_position': int,
            'parent_accession': str,
            'snp_ids': List[str],
            'symbol': str
        }

        self.attribute_map = {
            'chromosome': 'chromosome',
            'molecular_end_position': 'molecular_end_position',
            'molecular_start_position': 'molecular_start_position',
            'parent_accession': 'parent_accession',
            'snp_ids': 'snp_ids',
            'symbol': 'symbol'
        }

        self._chromosome = chromosome
        self._molecular_end_position = molecular_end_position
        self._molecular_start_position = molecular_start_position
        self._parent_accession = parent_accession
        self._snp_ids = snp_ids
        self._symbol = symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicGene':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicGene of this PublicGene.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chromosome(self):
        """Gets the chromosome of this PublicGene.

        The cromosome on which the gene is placed

        :return: The chromosome of this PublicGene.
        :rtype: str
        """
        return self._chromosome

    @chromosome.setter
    def chromosome(self, chromosome):
        """Sets the chromosome of this PublicGene.

        The cromosome on which the gene is placed

        :param chromosome: The chromosome of this PublicGene.
        :type chromosome: str
        """
        if chromosome is None:
            raise ValueError("Invalid value for `chromosome`, must not be `None`")
        if chromosome is not None and len(chromosome) < 1:
            raise ValueError("Invalid value for `chromosome`, length must be greater than or equal to `1`")

        self._chromosome = chromosome

    @property
    def molecular_end_position(self):
        """Gets the molecular_end_position of this PublicGene.

        The gene's end position on the scaffold

        :return: The molecular_end_position of this PublicGene.
        :rtype: int
        """
        return self._molecular_end_position

    @molecular_end_position.setter
    def molecular_end_position(self, molecular_end_position):
        """Sets the molecular_end_position of this PublicGene.

        The gene's end position on the scaffold

        :param molecular_end_position: The molecular_end_position of this PublicGene.
        :type molecular_end_position: int
        """
        if molecular_end_position is None:
            raise ValueError("Invalid value for `molecular_end_position`, must not be `None`")
        if molecular_end_position is not None and molecular_end_position < 0:
            raise ValueError("Invalid value for `molecular_end_position`, must be a value greater than or equal to `0`")

        self._molecular_end_position = molecular_end_position

    @property
    def molecular_start_position(self):
        """Gets the molecular_start_position of this PublicGene.

        The gene's start position on the scaffold

        :return: The molecular_start_position of this PublicGene.
        :rtype: int
        """
        return self._molecular_start_position

    @molecular_start_position.setter
    def molecular_start_position(self, molecular_start_position):
        """Sets the molecular_start_position of this PublicGene.

        The gene's start position on the scaffold

        :param molecular_start_position: The molecular_start_position of this PublicGene.
        :type molecular_start_position: int
        """
        if molecular_start_position is None:
            raise ValueError("Invalid value for `molecular_start_position`, must not be `None`")
        if molecular_start_position is not None and molecular_start_position < 0:
            raise ValueError("Invalid value for `molecular_start_position`, must be a value greater than or equal to `0`")

        self._molecular_start_position = molecular_start_position

    @property
    def parent_accession(self):
        """Gets the parent_accession of this PublicGene.

        The scaffold on which the gene is placed

        :return: The parent_accession of this PublicGene.
        :rtype: str
        """
        return self._parent_accession

    @parent_accession.setter
    def parent_accession(self, parent_accession):
        """Sets the parent_accession of this PublicGene.

        The scaffold on which the gene is placed

        :param parent_accession: The parent_accession of this PublicGene.
        :type parent_accession: str
        """
        if parent_accession is None:
            raise ValueError("Invalid value for `parent_accession`, must not be `None`")
        if parent_accession is not None and len(parent_accession) < 1:
            raise ValueError("Invalid value for `parent_accession`, length must be greater than or equal to `1`")

        self._parent_accession = parent_accession

    @property
    def snp_ids(self):
        """Gets the snp_ids of this PublicGene.

        The SNPs contained in the gene

        :return: The snp_ids of this PublicGene.
        :rtype: List[str]
        """
        return self._snp_ids

    @snp_ids.setter
    def snp_ids(self, snp_ids):
        """Sets the snp_ids of this PublicGene.

        The SNPs contained in the gene

        :param snp_ids: The snp_ids of this PublicGene.
        :type snp_ids: List[str]
        """
        if snp_ids is None:
            raise ValueError("Invalid value for `snp_ids`, must not be `None`")

        self._snp_ids = snp_ids

    @property
    def symbol(self):
        """Gets the symbol of this PublicGene.

        The gene accession string

        :return: The symbol of this PublicGene.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this PublicGene.

        The gene accession string

        :param symbol: The symbol of this PublicGene.
        :type symbol: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")
        if symbol is not None and len(symbol) < 1:
            raise ValueError("Invalid value for `symbol`, length must be greater than or equal to `1`")

        self._symbol = symbol
