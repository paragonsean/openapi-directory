# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReferenceSequence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sequence: str=None):
        """ReferenceSequence - a model defined in OpenAPI

        :param sequence: The sequence of this ReferenceSequence.
        """
        self.openapi_types = {
            'sequence': str
        }

        self.attribute_map = {
            'sequence': 'sequence'
        }

        self._sequence = sequence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReferenceSequence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReferenceSequence of this ReferenceSequence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sequence(self):
        """Gets the sequence of this ReferenceSequence.

        The nucleotide sequence

        :return: The sequence of this ReferenceSequence.
        :rtype: str
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this ReferenceSequence.

        The nucleotide sequence

        :param sequence: The sequence of this ReferenceSequence.
        :type sequence: str
        """
        if sequence is None:
            raise ValueError("Invalid value for `sequence`, must not be `None`")
        if sequence is not None and len(sequence) < 1:
            raise ValueError("Invalid value for `sequence`, length must be greater than or equal to `1`")

        self._sequence = sequence
