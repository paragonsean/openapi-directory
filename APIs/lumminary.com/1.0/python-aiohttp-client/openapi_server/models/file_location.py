# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filename_original: str=None, host: str=None, path: str=None):
        """FileLocation - a model defined in OpenAPI

        :param filename_original: The filename_original of this FileLocation.
        :param host: The host of this FileLocation.
        :param path: The path of this FileLocation.
        """
        self.openapi_types = {
            'filename_original': str,
            'host': str,
            'path': str
        }

        self.attribute_map = {
            'filename_original': 'filename_original',
            'host': 'host',
            'path': 'path'
        }

        self._filename_original = filename_original
        self._host = host
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileLocation of this FileLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filename_original(self):
        """Gets the filename_original of this FileLocation.


        :return: The filename_original of this FileLocation.
        :rtype: str
        """
        return self._filename_original

    @filename_original.setter
    def filename_original(self, filename_original):
        """Sets the filename_original of this FileLocation.


        :param filename_original: The filename_original of this FileLocation.
        :type filename_original: str
        """
        if filename_original is None:
            raise ValueError("Invalid value for `filename_original`, must not be `None`")

        self._filename_original = filename_original

    @property
    def host(self):
        """Gets the host of this FileLocation.


        :return: The host of this FileLocation.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this FileLocation.


        :param host: The host of this FileLocation.
        :type host: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host

    @property
    def path(self):
        """Gets the path of this FileLocation.


        :return: The path of this FileLocation.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FileLocation.


        :param path: The path of this FileLocation.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path
