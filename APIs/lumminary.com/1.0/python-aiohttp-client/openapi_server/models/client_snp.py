# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientSNP(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chromosome_accession: str=None, genotyped_alleles: List[str]=None, location: int=None, phased: bool=None, reference_genome: str=None, snp_id: str=None):
        """ClientSNP - a model defined in OpenAPI

        :param chromosome_accession: The chromosome_accession of this ClientSNP.
        :param genotyped_alleles: The genotyped_alleles of this ClientSNP.
        :param location: The location of this ClientSNP.
        :param phased: The phased of this ClientSNP.
        :param reference_genome: The reference_genome of this ClientSNP.
        :param snp_id: The snp_id of this ClientSNP.
        """
        self.openapi_types = {
            'chromosome_accession': str,
            'genotyped_alleles': List[str],
            'location': int,
            'phased': bool,
            'reference_genome': str,
            'snp_id': str
        }

        self.attribute_map = {
            'chromosome_accession': 'chromosome_accession',
            'genotyped_alleles': 'genotyped_alleles',
            'location': 'location',
            'phased': 'phased',
            'reference_genome': 'reference_genome',
            'snp_id': 'snp_id'
        }

        self._chromosome_accession = chromosome_accession
        self._genotyped_alleles = genotyped_alleles
        self._location = location
        self._phased = phased
        self._reference_genome = reference_genome
        self._snp_id = snp_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientSNP':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientSNP of this ClientSNP.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chromosome_accession(self):
        """Gets the chromosome_accession of this ClientSNP.

        The accession of the chromosome on which the SNP is placed

        :return: The chromosome_accession of this ClientSNP.
        :rtype: str
        """
        return self._chromosome_accession

    @chromosome_accession.setter
    def chromosome_accession(self, chromosome_accession):
        """Sets the chromosome_accession of this ClientSNP.

        The accession of the chromosome on which the SNP is placed

        :param chromosome_accession: The chromosome_accession of this ClientSNP.
        :type chromosome_accession: str
        """
        if chromosome_accession is None:
            raise ValueError("Invalid value for `chromosome_accession`, must not be `None`")
        if chromosome_accession is not None and len(chromosome_accession) < 1:
            raise ValueError("Invalid value for `chromosome_accession`, length must be greater than or equal to `1`")

        self._chromosome_accession = chromosome_accession

    @property
    def genotyped_alleles(self):
        """Gets the genotyped_alleles of this ClientSNP.

        A diploid genoyped allele, if available

        :return: The genotyped_alleles of this ClientSNP.
        :rtype: List[str]
        """
        return self._genotyped_alleles

    @genotyped_alleles.setter
    def genotyped_alleles(self, genotyped_alleles):
        """Sets the genotyped_alleles of this ClientSNP.

        A diploid genoyped allele, if available

        :param genotyped_alleles: The genotyped_alleles of this ClientSNP.
        :type genotyped_alleles: List[str]
        """
        if genotyped_alleles is None:
            raise ValueError("Invalid value for `genotyped_alleles`, must not be `None`")

        self._genotyped_alleles = genotyped_alleles

    @property
    def location(self):
        """Gets the location of this ClientSNP.

        The SNP's position on the chromosome

        :return: The location of this ClientSNP.
        :rtype: int
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ClientSNP.

        The SNP's position on the chromosome

        :param location: The location of this ClientSNP.
        :type location: int
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")
        if location is not None and location < 0:
            raise ValueError("Invalid value for `location`, must be a value greater than or equal to `0`")

        self._location = location

    @property
    def phased(self):
        """Gets the phased of this ClientSNP.

        True if there is phasing information about the snp, false otherwise

        :return: The phased of this ClientSNP.
        :rtype: bool
        """
        return self._phased

    @phased.setter
    def phased(self, phased):
        """Sets the phased of this ClientSNP.

        True if there is phasing information about the snp, false otherwise

        :param phased: The phased of this ClientSNP.
        :type phased: bool
        """
        if phased is None:
            raise ValueError("Invalid value for `phased`, must not be `None`")

        self._phased = phased

    @property
    def reference_genome(self):
        """Gets the reference_genome of this ClientSNP.

        The ID and build number of the genome against which the SNP was built and placed

        :return: The reference_genome of this ClientSNP.
        :rtype: str
        """
        return self._reference_genome

    @reference_genome.setter
    def reference_genome(self, reference_genome):
        """Sets the reference_genome of this ClientSNP.

        The ID and build number of the genome against which the SNP was built and placed

        :param reference_genome: The reference_genome of this ClientSNP.
        :type reference_genome: str
        """
        if reference_genome is None:
            raise ValueError("Invalid value for `reference_genome`, must not be `None`")
        if reference_genome is not None and len(reference_genome) < 1:
            raise ValueError("Invalid value for `reference_genome`, length must be greater than or equal to `1`")

        self._reference_genome = reference_genome

    @property
    def snp_id(self):
        """Gets the snp_id of this ClientSNP.

        The ID of the SNP

        :return: The snp_id of this ClientSNP.
        :rtype: str
        """
        return self._snp_id

    @snp_id.setter
    def snp_id(self, snp_id):
        """Sets the snp_id of this ClientSNP.

        The ID of the SNP

        :param snp_id: The snp_id of this ClientSNP.
        :type snp_id: str
        """
        if snp_id is None:
            raise ValueError("Invalid value for `snp_id`, must not be `None`")
        if snp_id is not None and len(snp_id) < 1:
            raise ValueError("Invalid value for `snp_id`, length must be greater than or equal to `1`")

        self._snp_id = snp_id
