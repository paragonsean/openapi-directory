/**
 * Currencytick API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Healthcheck200Response from '../model/Healthcheck200Response';
import Healthcheck400Response from '../model/Healthcheck400Response';
import HistoricalExchangeRate200Response from '../model/HistoricalExchangeRate200Response';

/**
* Endpoints service.
* @module api/EndpointsApi
* @version 1.0.0
*/
export default class EndpointsApi {

    /**
    * Constructs a new EndpointsApi. 
    * @alias module:api/EndpointsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the healthcheck operation.
     * @callback module:api/EndpointsApi~healthcheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Healthcheck200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Healthcheck
     * Check that the service is up. If everything is okay, you'll get a 200 OK response.  Otherwise, the request will fail with a 400 error, and a response listing the failed services.
     * @param {module:api/EndpointsApi~healthcheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Healthcheck200Response}
     */
    healthcheck(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Healthcheck200Response;
      return this.apiClient.callApi(
        '/healthcheck', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the historicalExchangeRate operation.
     * @callback module:api/EndpointsApi~historicalExchangeRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoricalExchangeRate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Historical Exchange Rate
     * Get the exchange rate on a specific date
     * @param {String} apikey Authentication key.
     * @param {String} base The source currency.
     * @param {String} target The target currency.
     * @param {String} date The date to get the exchange rate.
     * @param {module:api/EndpointsApi~historicalExchangeRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoricalExchangeRate200Response}
     */
    historicalExchangeRate(apikey, base, target, date, callback) {
      let postBody = null;
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling historicalExchangeRate");
      }
      // verify the required parameter 'base' is set
      if (base === undefined || base === null) {
        throw new Error("Missing the required parameter 'base' when calling historicalExchangeRate");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling historicalExchangeRate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling historicalExchangeRate");
      }

      let pathParams = {
      };
      let queryParams = {
        'apikey': apikey,
        'base': base,
        'target': target,
        'date': date
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['default'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoricalExchangeRate200Response;
      return this.apiClient.callApi(
        '/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOfSupportedCurrencies operation.
     * @callback module:api/EndpointsApi~listOfSupportedCurrenciesCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of supported currencies
     * Get the list of supported currencies, currently 220 currencies are supported.
     * @param {String} apikey Authentication key.
     * @param {module:api/EndpointsApi~listOfSupportedCurrenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    listOfSupportedCurrencies(apikey, callback) {
      let postBody = null;
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling listOfSupportedCurrencies");
      }

      let pathParams = {
      };
      let queryParams = {
        'apikey': apikey
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['default'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/supported_currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the liveCurrencyExchangeRate operation.
     * @callback module:api/EndpointsApi~liveCurrencyExchangeRateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HistoricalExchangeRate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Live currency exchange rate
     * Get the exchange rate between two currencies.
     * @param {String} apikey Authentication key.
     * @param {String} base The source currency.
     * @param {String} target The target currency.
     * @param {Object} opts Optional parameters
     * @param {Number} [amount] optional The amount to convert.
     * @param {module:api/EndpointsApi~liveCurrencyExchangeRateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HistoricalExchangeRate200Response}
     */
    liveCurrencyExchangeRate(apikey, base, target, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apikey' is set
      if (apikey === undefined || apikey === null) {
        throw new Error("Missing the required parameter 'apikey' when calling liveCurrencyExchangeRate");
      }
      // verify the required parameter 'base' is set
      if (base === undefined || base === null) {
        throw new Error("Missing the required parameter 'base' when calling liveCurrencyExchangeRate");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling liveCurrencyExchangeRate");
      }

      let pathParams = {
      };
      let queryParams = {
        'apikey': apikey,
        'base': base,
        'target': target,
        'amount': opts['amount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['default'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HistoricalExchangeRate200Response;
      return this.apiClient.callApi(
        '/live', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
