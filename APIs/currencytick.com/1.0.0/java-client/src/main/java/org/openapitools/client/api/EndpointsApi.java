/*
 * Currencytick API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Healthcheck200Response;
import org.openapitools.client.model.Healthcheck400Response;
import org.openapitools.client.model.HistoricalExchangeRate200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EndpointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EndpointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EndpointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for healthcheck
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service is unhealthy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthcheckCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/healthcheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthcheckValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return healthcheckCall(_callback);

    }

    /**
     * Healthcheck
     * Check that the service is up. If everything is okay, you&#39;ll get a 200 OK response.  Otherwise, the request will fail with a 400 error, and a response listing the failed services.
     * @return Healthcheck200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service is unhealthy </td><td>  -  </td></tr>
     </table>
     */
    public Healthcheck200Response healthcheck() throws ApiException {
        ApiResponse<Healthcheck200Response> localVarResp = healthcheckWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Healthcheck
     * Check that the service is up. If everything is okay, you&#39;ll get a 200 OK response.  Otherwise, the request will fail with a 400 error, and a response listing the failed services.
     * @return ApiResponse&lt;Healthcheck200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service is unhealthy </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Healthcheck200Response> healthcheckWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = healthcheckValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Healthcheck200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Healthcheck (asynchronously)
     * Check that the service is up. If everything is okay, you&#39;ll get a 200 OK response.  Otherwise, the request will fail with a 400 error, and a response listing the failed services.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Service is unhealthy </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthcheckAsync(final ApiCallback<Healthcheck200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthcheckValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Healthcheck200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for historicalExchangeRate
     * @param apikey Authentication key. (required)
     * @param base The source currency. (required)
     * @param target The target currency. (required)
     * @param date The date to get the exchange rate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call historicalExchangeRateCall(String apikey, String base, String target, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/historical";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apikey", apikey));
        }

        if (base != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base", base));
        }

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call historicalExchangeRateValidateBeforeCall(String apikey, String base, String target, String date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling historicalExchangeRate(Async)");
        }

        // verify the required parameter 'base' is set
        if (base == null) {
            throw new ApiException("Missing the required parameter 'base' when calling historicalExchangeRate(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling historicalExchangeRate(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling historicalExchangeRate(Async)");
        }

        return historicalExchangeRateCall(apikey, base, target, date, _callback);

    }

    /**
     * Historical Exchange Rate
     * Get the exchange rate on a specific date
     * @param apikey Authentication key. (required)
     * @param base The source currency. (required)
     * @param target The target currency. (required)
     * @param date The date to get the exchange rate. (required)
     * @return HistoricalExchangeRate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HistoricalExchangeRate200Response historicalExchangeRate(String apikey, String base, String target, String date) throws ApiException {
        ApiResponse<HistoricalExchangeRate200Response> localVarResp = historicalExchangeRateWithHttpInfo(apikey, base, target, date);
        return localVarResp.getData();
    }

    /**
     * Historical Exchange Rate
     * Get the exchange rate on a specific date
     * @param apikey Authentication key. (required)
     * @param base The source currency. (required)
     * @param target The target currency. (required)
     * @param date The date to get the exchange rate. (required)
     * @return ApiResponse&lt;HistoricalExchangeRate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoricalExchangeRate200Response> historicalExchangeRateWithHttpInfo(String apikey, String base, String target, String date) throws ApiException {
        okhttp3.Call localVarCall = historicalExchangeRateValidateBeforeCall(apikey, base, target, date, null);
        Type localVarReturnType = new TypeToken<HistoricalExchangeRate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Historical Exchange Rate (asynchronously)
     * Get the exchange rate on a specific date
     * @param apikey Authentication key. (required)
     * @param base The source currency. (required)
     * @param target The target currency. (required)
     * @param date The date to get the exchange rate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call historicalExchangeRateAsync(String apikey, String base, String target, String date, final ApiCallback<HistoricalExchangeRate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = historicalExchangeRateValidateBeforeCall(apikey, base, target, date, _callback);
        Type localVarReturnType = new TypeToken<HistoricalExchangeRate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOfSupportedCurrencies
     * @param apikey Authentication key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOfSupportedCurrenciesCall(String apikey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/supported_currencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apikey", apikey));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOfSupportedCurrenciesValidateBeforeCall(String apikey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling listOfSupportedCurrencies(Async)");
        }

        return listOfSupportedCurrenciesCall(apikey, _callback);

    }

    /**
     * List of supported currencies
     * Get the list of supported currencies, currently 220 currencies are supported.
     * @param apikey Authentication key. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public String listOfSupportedCurrencies(String apikey) throws ApiException {
        ApiResponse<String> localVarResp = listOfSupportedCurrenciesWithHttpInfo(apikey);
        return localVarResp.getData();
    }

    /**
     * List of supported currencies
     * Get the list of supported currencies, currently 220 currencies are supported.
     * @param apikey Authentication key. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> listOfSupportedCurrenciesWithHttpInfo(String apikey) throws ApiException {
        okhttp3.Call localVarCall = listOfSupportedCurrenciesValidateBeforeCall(apikey, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of supported currencies (asynchronously)
     * Get the list of supported currencies, currently 220 currencies are supported.
     * @param apikey Authentication key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOfSupportedCurrenciesAsync(String apikey, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOfSupportedCurrenciesValidateBeforeCall(apikey, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for liveCurrencyExchangeRate
     * @param apikey Authentication key. (required)
     * @param base The source currency. (required)
     * @param target The target currency. (required)
     * @param amount optional The amount to convert. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveCurrencyExchangeRateCall(String apikey, String base, String target, BigDecimal amount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apikey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apikey", apikey));
        }

        if (base != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base", base));
        }

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "default" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call liveCurrencyExchangeRateValidateBeforeCall(String apikey, String base, String target, BigDecimal amount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling liveCurrencyExchangeRate(Async)");
        }

        // verify the required parameter 'base' is set
        if (base == null) {
            throw new ApiException("Missing the required parameter 'base' when calling liveCurrencyExchangeRate(Async)");
        }

        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling liveCurrencyExchangeRate(Async)");
        }

        return liveCurrencyExchangeRateCall(apikey, base, target, amount, _callback);

    }

    /**
     * Live currency exchange rate
     * Get the exchange rate between two currencies.
     * @param apikey Authentication key. (required)
     * @param base The source currency. (required)
     * @param target The target currency. (required)
     * @param amount optional The amount to convert. (optional)
     * @return HistoricalExchangeRate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public HistoricalExchangeRate200Response liveCurrencyExchangeRate(String apikey, String base, String target, BigDecimal amount) throws ApiException {
        ApiResponse<HistoricalExchangeRate200Response> localVarResp = liveCurrencyExchangeRateWithHttpInfo(apikey, base, target, amount);
        return localVarResp.getData();
    }

    /**
     * Live currency exchange rate
     * Get the exchange rate between two currencies.
     * @param apikey Authentication key. (required)
     * @param base The source currency. (required)
     * @param target The target currency. (required)
     * @param amount optional The amount to convert. (optional)
     * @return ApiResponse&lt;HistoricalExchangeRate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HistoricalExchangeRate200Response> liveCurrencyExchangeRateWithHttpInfo(String apikey, String base, String target, BigDecimal amount) throws ApiException {
        okhttp3.Call localVarCall = liveCurrencyExchangeRateValidateBeforeCall(apikey, base, target, amount, null);
        Type localVarReturnType = new TypeToken<HistoricalExchangeRate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Live currency exchange rate (asynchronously)
     * Get the exchange rate between two currencies.
     * @param apikey Authentication key. (required)
     * @param base The source currency. (required)
     * @param target The target currency. (required)
     * @param amount optional The amount to convert. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call liveCurrencyExchangeRateAsync(String apikey, String base, String target, BigDecimal amount, final ApiCallback<HistoricalExchangeRate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = liveCurrencyExchangeRateValidateBeforeCall(apikey, base, target, amount, _callback);
        Type localVarReturnType = new TypeToken<HistoricalExchangeRate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
