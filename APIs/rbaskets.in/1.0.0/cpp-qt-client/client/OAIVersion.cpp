/**
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersion::OAIVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersion::OAIVersion() {
    this->initializeModel();
}

OAIVersion::~OAIVersion() {}

void OAIVersion::initializeModel() {

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_commit_short_isSet = false;
    m_commit_short_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_code_isSet = false;
    m_source_code_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersion::fromJsonObject(QJsonObject json) {

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_commit_short_isValid = ::OpenAPI::fromJsonValue(m_commit_short, json[QString("commit_short")]);
    m_commit_short_isSet = !json[QString("commit_short")].isNull() && m_commit_short_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_code_isValid = ::OpenAPI::fromJsonValue(m_source_code, json[QString("source_code")]);
    m_source_code_isSet = !json[QString("source_code")].isNull() && m_source_code_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_commit_isSet) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_commit_short_isSet) {
        obj.insert(QString("commit_short"), ::OpenAPI::toJsonValue(m_commit_short));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source_code_isSet) {
        obj.insert(QString("source_code"), ::OpenAPI::toJsonValue(m_source_code));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIVersion::getCommit() const {
    return m_commit;
}
void OAIVersion::setCommit(const QString &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAIVersion::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAIVersion::is_commit_Valid() const{
    return m_commit_isValid;
}

QString OAIVersion::getCommitShort() const {
    return m_commit_short;
}
void OAIVersion::setCommitShort(const QString &commit_short) {
    m_commit_short = commit_short;
    m_commit_short_isSet = true;
}

bool OAIVersion::is_commit_short_Set() const{
    return m_commit_short_isSet;
}

bool OAIVersion::is_commit_short_Valid() const{
    return m_commit_short_isValid;
}

QString OAIVersion::getName() const {
    return m_name;
}
void OAIVersion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVersion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVersion::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVersion::getSourceCode() const {
    return m_source_code;
}
void OAIVersion::setSourceCode(const QString &source_code) {
    m_source_code = source_code;
    m_source_code_isSet = true;
}

bool OAIVersion::is_source_code_Set() const{
    return m_source_code_isSet;
}

bool OAIVersion::is_source_code_Valid() const{
    return m_source_code_isValid;
}

QString OAIVersion::getVersion() const {
    return m_version;
}
void OAIVersion::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIVersion::is_version_Set() const{
    return m_version_isSet;
}

bool OAIVersion::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_short_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
