/**
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBasketsApi_H
#define OAI_OAIBasketsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBaskets.h"
#include "OAIConfig.h"
#include "OAIServiceStats.h"
#include "OAIToken.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBasketsApi : public QObject {
    Q_OBJECT

public:
    OAIBasketsApi(const int timeOut = 0);
    ~OAIBasketsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  max qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  q QString [optional]
    */
    virtual void apiBasketsGet(const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    */
    virtual void apiBasketsNameDelete(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void apiBasketsNameGet(const QString &name);

    /**
    * @param[in]  name QString [required]
    * @param[in]  config OAIConfig [optional]
    */
    virtual void apiBasketsNamePost(const QString &name, const ::OpenAPI::OptionalParam<OAIConfig> &config = ::OpenAPI::OptionalParam<OAIConfig>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  config OAIConfig [required]
    */
    virtual void apiBasketsNamePut(const QString &name, const OAIConfig &config);

    /**
    * @param[in]  max qint32 [optional]
    */
    virtual void apiStatsGet(const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  max qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  q QString [optional]
    */
    Q_DECL_DEPRECATED virtual void basketsGet(const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    */
    Q_DECL_DEPRECATED virtual void basketsNameDelete(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    Q_DECL_DEPRECATED virtual void basketsNameGet(const QString &name);

    /**
    * @param[in]  name QString [required]
    * @param[in]  config OAIConfig [optional]
    */
    Q_DECL_DEPRECATED virtual void basketsNamePost(const QString &name, const ::OpenAPI::OptionalParam<OAIConfig> &config = ::OpenAPI::OptionalParam<OAIConfig>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  config OAIConfig [required]
    */
    Q_DECL_DEPRECATED virtual void basketsNamePut(const QString &name, const OAIConfig &config);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiBasketsGetCallback(OAIHttpRequestWorker *worker);
    void apiBasketsNameDeleteCallback(OAIHttpRequestWorker *worker);
    void apiBasketsNameGetCallback(OAIHttpRequestWorker *worker);
    void apiBasketsNamePostCallback(OAIHttpRequestWorker *worker);
    void apiBasketsNamePutCallback(OAIHttpRequestWorker *worker);
    void apiStatsGetCallback(OAIHttpRequestWorker *worker);
    void basketsGetCallback(OAIHttpRequestWorker *worker);
    void basketsNameDeleteCallback(OAIHttpRequestWorker *worker);
    void basketsNameGetCallback(OAIHttpRequestWorker *worker);
    void basketsNamePostCallback(OAIHttpRequestWorker *worker);
    void basketsNamePutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiBasketsGetSignal(OAIBaskets summary);
    void apiBasketsNameDeleteSignal();
    void apiBasketsNameGetSignal(OAIConfig summary);
    void apiBasketsNamePostSignal(OAIToken summary);
    void apiBasketsNamePutSignal();
    void apiStatsGetSignal(OAIServiceStats summary);
    void basketsGetSignal(OAIBaskets summary);
    void basketsNameDeleteSignal();
    void basketsNameGetSignal(OAIConfig summary);
    void basketsNamePostSignal(OAIToken summary);
    void basketsNamePutSignal();


    void apiBasketsGetSignalFull(OAIHttpRequestWorker *worker, OAIBaskets summary);
    void apiBasketsNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void apiBasketsNameGetSignalFull(OAIHttpRequestWorker *worker, OAIConfig summary);
    void apiBasketsNamePostSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void apiBasketsNamePutSignalFull(OAIHttpRequestWorker *worker);
    void apiStatsGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceStats summary);
    void basketsGetSignalFull(OAIHttpRequestWorker *worker, OAIBaskets summary);
    void basketsNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void basketsNameGetSignalFull(OAIHttpRequestWorker *worker, OAIConfig summary);
    void basketsNamePostSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void basketsNamePutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiBasketsGetSignalError() instead")
    void apiBasketsGetSignalE(OAIBaskets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiBasketsGetSignalError(OAIBaskets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiBasketsNameDeleteSignalError() instead")
    void apiBasketsNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiBasketsNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiBasketsNameGetSignalError() instead")
    void apiBasketsNameGetSignalE(OAIConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiBasketsNameGetSignalError(OAIConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiBasketsNamePostSignalError() instead")
    void apiBasketsNamePostSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiBasketsNamePostSignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiBasketsNamePutSignalError() instead")
    void apiBasketsNamePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiBasketsNamePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiStatsGetSignalError() instead")
    void apiStatsGetSignalE(OAIServiceStats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiStatsGetSignalError(OAIServiceStats summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketsGetSignalError() instead")
    void basketsGetSignalE(OAIBaskets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void basketsGetSignalError(OAIBaskets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketsNameDeleteSignalError() instead")
    void basketsNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void basketsNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketsNameGetSignalError() instead")
    void basketsNameGetSignalE(OAIConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void basketsNameGetSignalError(OAIConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketsNamePostSignalError() instead")
    void basketsNamePostSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void basketsNamePostSignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketsNamePutSignalError() instead")
    void basketsNamePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void basketsNamePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiBasketsGetSignalErrorFull() instead")
    void apiBasketsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiBasketsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiBasketsNameDeleteSignalErrorFull() instead")
    void apiBasketsNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiBasketsNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiBasketsNameGetSignalErrorFull() instead")
    void apiBasketsNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiBasketsNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiBasketsNamePostSignalErrorFull() instead")
    void apiBasketsNamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiBasketsNamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiBasketsNamePutSignalErrorFull() instead")
    void apiBasketsNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiBasketsNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiStatsGetSignalErrorFull() instead")
    void apiStatsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiStatsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketsGetSignalErrorFull() instead")
    void basketsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void basketsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketsNameDeleteSignalErrorFull() instead")
    void basketsNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void basketsNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketsNameGetSignalErrorFull() instead")
    void basketsNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void basketsNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketsNamePostSignalErrorFull() instead")
    void basketsNamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void basketsNamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketsNamePutSignalErrorFull() instead")
    void basketsNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void basketsNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
