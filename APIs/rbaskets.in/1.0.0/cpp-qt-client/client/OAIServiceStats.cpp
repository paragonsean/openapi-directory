/**
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceStats::OAIServiceStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceStats::OAIServiceStats() {
    this->initializeModel();
}

OAIServiceStats::~OAIServiceStats() {}

void OAIServiceStats::initializeModel() {

    m_avg_basket_size_isSet = false;
    m_avg_basket_size_isValid = false;

    m_baskets_count_isSet = false;
    m_baskets_count_isValid = false;

    m_empty_baskets_count_isSet = false;
    m_empty_baskets_count_isValid = false;

    m_max_basket_size_isSet = false;
    m_max_basket_size_isValid = false;

    m_requests_count_isSet = false;
    m_requests_count_isValid = false;

    m_requests_total_count_isSet = false;
    m_requests_total_count_isValid = false;

    m_top_baskets_recent_isSet = false;
    m_top_baskets_recent_isValid = false;

    m_top_baskets_size_isSet = false;
    m_top_baskets_size_isValid = false;
}

void OAIServiceStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceStats::fromJsonObject(QJsonObject json) {

    m_avg_basket_size_isValid = ::OpenAPI::fromJsonValue(m_avg_basket_size, json[QString("avg_basket_size")]);
    m_avg_basket_size_isSet = !json[QString("avg_basket_size")].isNull() && m_avg_basket_size_isValid;

    m_baskets_count_isValid = ::OpenAPI::fromJsonValue(m_baskets_count, json[QString("baskets_count")]);
    m_baskets_count_isSet = !json[QString("baskets_count")].isNull() && m_baskets_count_isValid;

    m_empty_baskets_count_isValid = ::OpenAPI::fromJsonValue(m_empty_baskets_count, json[QString("empty_baskets_count")]);
    m_empty_baskets_count_isSet = !json[QString("empty_baskets_count")].isNull() && m_empty_baskets_count_isValid;

    m_max_basket_size_isValid = ::OpenAPI::fromJsonValue(m_max_basket_size, json[QString("max_basket_size")]);
    m_max_basket_size_isSet = !json[QString("max_basket_size")].isNull() && m_max_basket_size_isValid;

    m_requests_count_isValid = ::OpenAPI::fromJsonValue(m_requests_count, json[QString("requests_count")]);
    m_requests_count_isSet = !json[QString("requests_count")].isNull() && m_requests_count_isValid;

    m_requests_total_count_isValid = ::OpenAPI::fromJsonValue(m_requests_total_count, json[QString("requests_total_count")]);
    m_requests_total_count_isSet = !json[QString("requests_total_count")].isNull() && m_requests_total_count_isValid;

    m_top_baskets_recent_isValid = ::OpenAPI::fromJsonValue(m_top_baskets_recent, json[QString("top_baskets_recent")]);
    m_top_baskets_recent_isSet = !json[QString("top_baskets_recent")].isNull() && m_top_baskets_recent_isValid;

    m_top_baskets_size_isValid = ::OpenAPI::fromJsonValue(m_top_baskets_size, json[QString("top_baskets_size")]);
    m_top_baskets_size_isSet = !json[QString("top_baskets_size")].isNull() && m_top_baskets_size_isValid;
}

QString OAIServiceStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceStats::asJsonObject() const {
    QJsonObject obj;
    if (m_avg_basket_size_isSet) {
        obj.insert(QString("avg_basket_size"), ::OpenAPI::toJsonValue(m_avg_basket_size));
    }
    if (m_baskets_count_isSet) {
        obj.insert(QString("baskets_count"), ::OpenAPI::toJsonValue(m_baskets_count));
    }
    if (m_empty_baskets_count_isSet) {
        obj.insert(QString("empty_baskets_count"), ::OpenAPI::toJsonValue(m_empty_baskets_count));
    }
    if (m_max_basket_size_isSet) {
        obj.insert(QString("max_basket_size"), ::OpenAPI::toJsonValue(m_max_basket_size));
    }
    if (m_requests_count_isSet) {
        obj.insert(QString("requests_count"), ::OpenAPI::toJsonValue(m_requests_count));
    }
    if (m_requests_total_count_isSet) {
        obj.insert(QString("requests_total_count"), ::OpenAPI::toJsonValue(m_requests_total_count));
    }
    if (m_top_baskets_recent.size() > 0) {
        obj.insert(QString("top_baskets_recent"), ::OpenAPI::toJsonValue(m_top_baskets_recent));
    }
    if (m_top_baskets_size.size() > 0) {
        obj.insert(QString("top_baskets_size"), ::OpenAPI::toJsonValue(m_top_baskets_size));
    }
    return obj;
}

qint32 OAIServiceStats::getAvgBasketSize() const {
    return m_avg_basket_size;
}
void OAIServiceStats::setAvgBasketSize(const qint32 &avg_basket_size) {
    m_avg_basket_size = avg_basket_size;
    m_avg_basket_size_isSet = true;
}

bool OAIServiceStats::is_avg_basket_size_Set() const{
    return m_avg_basket_size_isSet;
}

bool OAIServiceStats::is_avg_basket_size_Valid() const{
    return m_avg_basket_size_isValid;
}

qint32 OAIServiceStats::getBasketsCount() const {
    return m_baskets_count;
}
void OAIServiceStats::setBasketsCount(const qint32 &baskets_count) {
    m_baskets_count = baskets_count;
    m_baskets_count_isSet = true;
}

bool OAIServiceStats::is_baskets_count_Set() const{
    return m_baskets_count_isSet;
}

bool OAIServiceStats::is_baskets_count_Valid() const{
    return m_baskets_count_isValid;
}

qint32 OAIServiceStats::getEmptyBasketsCount() const {
    return m_empty_baskets_count;
}
void OAIServiceStats::setEmptyBasketsCount(const qint32 &empty_baskets_count) {
    m_empty_baskets_count = empty_baskets_count;
    m_empty_baskets_count_isSet = true;
}

bool OAIServiceStats::is_empty_baskets_count_Set() const{
    return m_empty_baskets_count_isSet;
}

bool OAIServiceStats::is_empty_baskets_count_Valid() const{
    return m_empty_baskets_count_isValid;
}

qint32 OAIServiceStats::getMaxBasketSize() const {
    return m_max_basket_size;
}
void OAIServiceStats::setMaxBasketSize(const qint32 &max_basket_size) {
    m_max_basket_size = max_basket_size;
    m_max_basket_size_isSet = true;
}

bool OAIServiceStats::is_max_basket_size_Set() const{
    return m_max_basket_size_isSet;
}

bool OAIServiceStats::is_max_basket_size_Valid() const{
    return m_max_basket_size_isValid;
}

qint32 OAIServiceStats::getRequestsCount() const {
    return m_requests_count;
}
void OAIServiceStats::setRequestsCount(const qint32 &requests_count) {
    m_requests_count = requests_count;
    m_requests_count_isSet = true;
}

bool OAIServiceStats::is_requests_count_Set() const{
    return m_requests_count_isSet;
}

bool OAIServiceStats::is_requests_count_Valid() const{
    return m_requests_count_isValid;
}

qint32 OAIServiceStats::getRequestsTotalCount() const {
    return m_requests_total_count;
}
void OAIServiceStats::setRequestsTotalCount(const qint32 &requests_total_count) {
    m_requests_total_count = requests_total_count;
    m_requests_total_count_isSet = true;
}

bool OAIServiceStats::is_requests_total_count_Set() const{
    return m_requests_total_count_isSet;
}

bool OAIServiceStats::is_requests_total_count_Valid() const{
    return m_requests_total_count_isValid;
}

QList<OAIBasketInfo> OAIServiceStats::getTopBasketsRecent() const {
    return m_top_baskets_recent;
}
void OAIServiceStats::setTopBasketsRecent(const QList<OAIBasketInfo> &top_baskets_recent) {
    m_top_baskets_recent = top_baskets_recent;
    m_top_baskets_recent_isSet = true;
}

bool OAIServiceStats::is_top_baskets_recent_Set() const{
    return m_top_baskets_recent_isSet;
}

bool OAIServiceStats::is_top_baskets_recent_Valid() const{
    return m_top_baskets_recent_isValid;
}

QList<OAIBasketInfo> OAIServiceStats::getTopBasketsSize() const {
    return m_top_baskets_size;
}
void OAIServiceStats::setTopBasketsSize(const QList<OAIBasketInfo> &top_baskets_size) {
    m_top_baskets_size = top_baskets_size;
    m_top_baskets_size_isSet = true;
}

bool OAIServiceStats::is_top_baskets_size_Set() const{
    return m_top_baskets_size_isSet;
}

bool OAIServiceStats::is_top_baskets_size_Valid() const{
    return m_top_baskets_size_isValid;
}

bool OAIServiceStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avg_basket_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_baskets_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_empty_baskets_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_basket_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_baskets_recent.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_baskets_size.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
