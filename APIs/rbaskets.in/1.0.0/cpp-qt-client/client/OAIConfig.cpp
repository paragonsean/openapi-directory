/**
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfig::OAIConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfig::OAIConfig() {
    this->initializeModel();
}

OAIConfig::~OAIConfig() {}

void OAIConfig::initializeModel() {

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_expand_path_isSet = false;
    m_expand_path_isValid = false;

    m_forward_url_isSet = false;
    m_forward_url_isValid = false;

    m_insecure_tls_isSet = false;
    m_insecure_tls_isValid = false;

    m_proxy_response_isSet = false;
    m_proxy_response_isValid = false;
}

void OAIConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfig::fromJsonObject(QJsonObject json) {

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_expand_path_isValid = ::OpenAPI::fromJsonValue(m_expand_path, json[QString("expand_path")]);
    m_expand_path_isSet = !json[QString("expand_path")].isNull() && m_expand_path_isValid;

    m_forward_url_isValid = ::OpenAPI::fromJsonValue(m_forward_url, json[QString("forward_url")]);
    m_forward_url_isSet = !json[QString("forward_url")].isNull() && m_forward_url_isValid;

    m_insecure_tls_isValid = ::OpenAPI::fromJsonValue(m_insecure_tls, json[QString("insecure_tls")]);
    m_insecure_tls_isSet = !json[QString("insecure_tls")].isNull() && m_insecure_tls_isValid;

    m_proxy_response_isValid = ::OpenAPI::fromJsonValue(m_proxy_response, json[QString("proxy_response")]);
    m_proxy_response_isSet = !json[QString("proxy_response")].isNull() && m_proxy_response_isValid;
}

QString OAIConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_isSet) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_expand_path_isSet) {
        obj.insert(QString("expand_path"), ::OpenAPI::toJsonValue(m_expand_path));
    }
    if (m_forward_url_isSet) {
        obj.insert(QString("forward_url"), ::OpenAPI::toJsonValue(m_forward_url));
    }
    if (m_insecure_tls_isSet) {
        obj.insert(QString("insecure_tls"), ::OpenAPI::toJsonValue(m_insecure_tls));
    }
    if (m_proxy_response_isSet) {
        obj.insert(QString("proxy_response"), ::OpenAPI::toJsonValue(m_proxy_response));
    }
    return obj;
}

qint32 OAIConfig::getCapacity() const {
    return m_capacity;
}
void OAIConfig::setCapacity(const qint32 &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIConfig::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIConfig::is_capacity_Valid() const{
    return m_capacity_isValid;
}

bool OAIConfig::isExpandPath() const {
    return m_expand_path;
}
void OAIConfig::setExpandPath(const bool &expand_path) {
    m_expand_path = expand_path;
    m_expand_path_isSet = true;
}

bool OAIConfig::is_expand_path_Set() const{
    return m_expand_path_isSet;
}

bool OAIConfig::is_expand_path_Valid() const{
    return m_expand_path_isValid;
}

QString OAIConfig::getForwardUrl() const {
    return m_forward_url;
}
void OAIConfig::setForwardUrl(const QString &forward_url) {
    m_forward_url = forward_url;
    m_forward_url_isSet = true;
}

bool OAIConfig::is_forward_url_Set() const{
    return m_forward_url_isSet;
}

bool OAIConfig::is_forward_url_Valid() const{
    return m_forward_url_isValid;
}

bool OAIConfig::isInsecureTls() const {
    return m_insecure_tls;
}
void OAIConfig::setInsecureTls(const bool &insecure_tls) {
    m_insecure_tls = insecure_tls;
    m_insecure_tls_isSet = true;
}

bool OAIConfig::is_insecure_tls_Set() const{
    return m_insecure_tls_isSet;
}

bool OAIConfig::is_insecure_tls_Valid() const{
    return m_insecure_tls_isValid;
}

bool OAIConfig::isProxyResponse() const {
    return m_proxy_response;
}
void OAIConfig::setProxyResponse(const bool &proxy_response) {
    m_proxy_response = proxy_response;
    m_proxy_response_isSet = true;
}

bool OAIConfig::is_proxy_response_Set() const{
    return m_proxy_response_isSet;
}

bool OAIConfig::is_proxy_response_Valid() const{
    return m_proxy_response_isValid;
}

bool OAIConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expand_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forward_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insecure_tls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_response_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
