/**
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaskets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaskets::OAIBaskets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaskets::OAIBaskets() {
    this->initializeModel();
}

OAIBaskets::~OAIBaskets() {}

void OAIBaskets::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_has_more_isSet = false;
    m_has_more_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;
}

void OAIBaskets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaskets::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_has_more_isValid = ::OpenAPI::fromJsonValue(m_has_more, json[QString("has_more")]);
    m_has_more_isSet = !json[QString("has_more")].isNull() && m_has_more_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;
}

QString OAIBaskets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaskets::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_has_more_isSet) {
        obj.insert(QString("has_more"), ::OpenAPI::toJsonValue(m_has_more));
    }
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    return obj;
}

qint32 OAIBaskets::getCount() const {
    return m_count;
}
void OAIBaskets::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIBaskets::is_count_Set() const{
    return m_count_isSet;
}

bool OAIBaskets::is_count_Valid() const{
    return m_count_isValid;
}

bool OAIBaskets::isHasMore() const {
    return m_has_more;
}
void OAIBaskets::setHasMore(const bool &has_more) {
    m_has_more = has_more;
    m_has_more_isSet = true;
}

bool OAIBaskets::is_has_more_Set() const{
    return m_has_more_isSet;
}

bool OAIBaskets::is_has_more_Valid() const{
    return m_has_more_isValid;
}

QList<QString> OAIBaskets::getNames() const {
    return m_names;
}
void OAIBaskets::setNames(const QList<QString> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIBaskets::is_names_Set() const{
    return m_names_isSet;
}

bool OAIBaskets::is_names_Valid() const{
    return m_names_isValid;
}

bool OAIBaskets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_more_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaskets::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_has_more_isValid && m_names_isValid && true;
}

} // namespace OpenAPI
