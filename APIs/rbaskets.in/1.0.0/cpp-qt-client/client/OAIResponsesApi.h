/**
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResponsesApi_H
#define OAI_OAIResponsesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResponsesApi : public QObject {
    Q_OBJECT

public:
    OAIResponsesApi(const int timeOut = 0);
    ~OAIResponsesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  name QString [required]
    * @param[in]  method QString [required]
    */
    virtual void apiBasketsNameResponsesMethodGet(const QString &name, const QString &method);

    /**
    * @param[in]  name QString [required]
    * @param[in]  method QString [required]
    * @param[in]  response OAIResponse [required]
    */
    virtual void apiBasketsNameResponsesMethodPut(const QString &name, const QString &method, const OAIResponse &response);

    /**
    * @param[in]  name QString [required]
    * @param[in]  method QString [required]
    */
    Q_DECL_DEPRECATED virtual void basketsNameResponsesMethodGet(const QString &name, const QString &method);

    /**
    * @param[in]  name QString [required]
    * @param[in]  method QString [required]
    * @param[in]  response OAIResponse [required]
    */
    Q_DECL_DEPRECATED virtual void basketsNameResponsesMethodPut(const QString &name, const QString &method, const OAIResponse &response);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiBasketsNameResponsesMethodGetCallback(OAIHttpRequestWorker *worker);
    void apiBasketsNameResponsesMethodPutCallback(OAIHttpRequestWorker *worker);
    void basketsNameResponsesMethodGetCallback(OAIHttpRequestWorker *worker);
    void basketsNameResponsesMethodPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiBasketsNameResponsesMethodGetSignal(OAIResponse summary);
    void apiBasketsNameResponsesMethodPutSignal();
    void basketsNameResponsesMethodGetSignal(OAIResponse summary);
    void basketsNameResponsesMethodPutSignal();


    void apiBasketsNameResponsesMethodGetSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void apiBasketsNameResponsesMethodPutSignalFull(OAIHttpRequestWorker *worker);
    void basketsNameResponsesMethodGetSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void basketsNameResponsesMethodPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiBasketsNameResponsesMethodGetSignalError() instead")
    void apiBasketsNameResponsesMethodGetSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiBasketsNameResponsesMethodGetSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiBasketsNameResponsesMethodPutSignalError() instead")
    void apiBasketsNameResponsesMethodPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiBasketsNameResponsesMethodPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketsNameResponsesMethodGetSignalError() instead")
    void basketsNameResponsesMethodGetSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void basketsNameResponsesMethodGetSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketsNameResponsesMethodPutSignalError() instead")
    void basketsNameResponsesMethodPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void basketsNameResponsesMethodPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiBasketsNameResponsesMethodGetSignalErrorFull() instead")
    void apiBasketsNameResponsesMethodGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiBasketsNameResponsesMethodGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiBasketsNameResponsesMethodPutSignalErrorFull() instead")
    void apiBasketsNameResponsesMethodPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiBasketsNameResponsesMethodPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketsNameResponsesMethodGetSignalErrorFull() instead")
    void basketsNameResponsesMethodGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void basketsNameResponsesMethodGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketsNameResponsesMethodPutSignalErrorFull() instead")
    void basketsNameResponsesMethodPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void basketsNameResponsesMethodPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
