/**
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasketInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasketInfo::OAIBasketInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasketInfo::OAIBasketInfo() {
    this->initializeModel();
}

OAIBasketInfo::~OAIBasketInfo() {}

void OAIBasketInfo::initializeModel() {

    m_last_request_date_isSet = false;
    m_last_request_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_requests_count_isSet = false;
    m_requests_count_isValid = false;

    m_requests_total_count_isSet = false;
    m_requests_total_count_isValid = false;
}

void OAIBasketInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasketInfo::fromJsonObject(QJsonObject json) {

    m_last_request_date_isValid = ::OpenAPI::fromJsonValue(m_last_request_date, json[QString("last_request_date")]);
    m_last_request_date_isSet = !json[QString("last_request_date")].isNull() && m_last_request_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_requests_count_isValid = ::OpenAPI::fromJsonValue(m_requests_count, json[QString("requests_count")]);
    m_requests_count_isSet = !json[QString("requests_count")].isNull() && m_requests_count_isValid;

    m_requests_total_count_isValid = ::OpenAPI::fromJsonValue(m_requests_total_count, json[QString("requests_total_count")]);
    m_requests_total_count_isSet = !json[QString("requests_total_count")].isNull() && m_requests_total_count_isValid;
}

QString OAIBasketInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasketInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_last_request_date_isSet) {
        obj.insert(QString("last_request_date"), ::OpenAPI::toJsonValue(m_last_request_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_requests_count_isSet) {
        obj.insert(QString("requests_count"), ::OpenAPI::toJsonValue(m_requests_count));
    }
    if (m_requests_total_count_isSet) {
        obj.insert(QString("requests_total_count"), ::OpenAPI::toJsonValue(m_requests_total_count));
    }
    return obj;
}

qint64 OAIBasketInfo::getLastRequestDate() const {
    return m_last_request_date;
}
void OAIBasketInfo::setLastRequestDate(const qint64 &last_request_date) {
    m_last_request_date = last_request_date;
    m_last_request_date_isSet = true;
}

bool OAIBasketInfo::is_last_request_date_Set() const{
    return m_last_request_date_isSet;
}

bool OAIBasketInfo::is_last_request_date_Valid() const{
    return m_last_request_date_isValid;
}

QString OAIBasketInfo::getName() const {
    return m_name;
}
void OAIBasketInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBasketInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBasketInfo::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIBasketInfo::getRequestsCount() const {
    return m_requests_count;
}
void OAIBasketInfo::setRequestsCount(const qint32 &requests_count) {
    m_requests_count = requests_count;
    m_requests_count_isSet = true;
}

bool OAIBasketInfo::is_requests_count_Set() const{
    return m_requests_count_isSet;
}

bool OAIBasketInfo::is_requests_count_Valid() const{
    return m_requests_count_isValid;
}

qint32 OAIBasketInfo::getRequestsTotalCount() const {
    return m_requests_total_count;
}
void OAIBasketInfo::setRequestsTotalCount(const qint32 &requests_total_count) {
    m_requests_total_count = requests_total_count;
    m_requests_total_count_isSet = true;
}

bool OAIBasketInfo::is_requests_total_count_Set() const{
    return m_requests_total_count_isSet;
}

bool OAIBasketInfo::is_requests_total_count_Valid() const{
    return m_requests_total_count_isValid;
}

bool OAIBasketInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_request_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasketInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
