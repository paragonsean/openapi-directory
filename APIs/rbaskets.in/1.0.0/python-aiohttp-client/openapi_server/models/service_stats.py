# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.basket_info import BasketInfo
from openapi_server import util


class ServiceStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avg_basket_size: int=None, baskets_count: int=None, empty_baskets_count: int=None, max_basket_size: int=None, requests_count: int=None, requests_total_count: int=None, top_baskets_recent: List[BasketInfo]=None, top_baskets_size: List[BasketInfo]=None):
        """ServiceStats - a model defined in OpenAPI

        :param avg_basket_size: The avg_basket_size of this ServiceStats.
        :param baskets_count: The baskets_count of this ServiceStats.
        :param empty_baskets_count: The empty_baskets_count of this ServiceStats.
        :param max_basket_size: The max_basket_size of this ServiceStats.
        :param requests_count: The requests_count of this ServiceStats.
        :param requests_total_count: The requests_total_count of this ServiceStats.
        :param top_baskets_recent: The top_baskets_recent of this ServiceStats.
        :param top_baskets_size: The top_baskets_size of this ServiceStats.
        """
        self.openapi_types = {
            'avg_basket_size': int,
            'baskets_count': int,
            'empty_baskets_count': int,
            'max_basket_size': int,
            'requests_count': int,
            'requests_total_count': int,
            'top_baskets_recent': List[BasketInfo],
            'top_baskets_size': List[BasketInfo]
        }

        self.attribute_map = {
            'avg_basket_size': 'avg_basket_size',
            'baskets_count': 'baskets_count',
            'empty_baskets_count': 'empty_baskets_count',
            'max_basket_size': 'max_basket_size',
            'requests_count': 'requests_count',
            'requests_total_count': 'requests_total_count',
            'top_baskets_recent': 'top_baskets_recent',
            'top_baskets_size': 'top_baskets_size'
        }

        self._avg_basket_size = avg_basket_size
        self._baskets_count = baskets_count
        self._empty_baskets_count = empty_baskets_count
        self._max_basket_size = max_basket_size
        self._requests_count = requests_count
        self._requests_total_count = requests_total_count
        self._top_baskets_recent = top_baskets_recent
        self._top_baskets_size = top_baskets_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceStats of this ServiceStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avg_basket_size(self):
        """Gets the avg_basket_size of this ServiceStats.

        Average size of a basket in the system, empty baskets are not taken into account

        :return: The avg_basket_size of this ServiceStats.
        :rtype: int
        """
        return self._avg_basket_size

    @avg_basket_size.setter
    def avg_basket_size(self, avg_basket_size):
        """Sets the avg_basket_size of this ServiceStats.

        Average size of a basket in the system, empty baskets are not taken into account

        :param avg_basket_size: The avg_basket_size of this ServiceStats.
        :type avg_basket_size: int
        """

        self._avg_basket_size = avg_basket_size

    @property
    def baskets_count(self):
        """Gets the baskets_count of this ServiceStats.

        Total number of baskets managed by service

        :return: The baskets_count of this ServiceStats.
        :rtype: int
        """
        return self._baskets_count

    @baskets_count.setter
    def baskets_count(self, baskets_count):
        """Sets the baskets_count of this ServiceStats.

        Total number of baskets managed by service

        :param baskets_count: The baskets_count of this ServiceStats.
        :type baskets_count: int
        """

        self._baskets_count = baskets_count

    @property
    def empty_baskets_count(self):
        """Gets the empty_baskets_count of this ServiceStats.

        Number of empty baskets

        :return: The empty_baskets_count of this ServiceStats.
        :rtype: int
        """
        return self._empty_baskets_count

    @empty_baskets_count.setter
    def empty_baskets_count(self, empty_baskets_count):
        """Sets the empty_baskets_count of this ServiceStats.

        Number of empty baskets

        :param empty_baskets_count: The empty_baskets_count of this ServiceStats.
        :type empty_baskets_count: int
        """

        self._empty_baskets_count = empty_baskets_count

    @property
    def max_basket_size(self):
        """Gets the max_basket_size of this ServiceStats.

        Size of the biggest basket that processed the top most number of HTTP requests

        :return: The max_basket_size of this ServiceStats.
        :rtype: int
        """
        return self._max_basket_size

    @max_basket_size.setter
    def max_basket_size(self, max_basket_size):
        """Sets the max_basket_size of this ServiceStats.

        Size of the biggest basket that processed the top most number of HTTP requests

        :param max_basket_size: The max_basket_size of this ServiceStats.
        :type max_basket_size: int
        """

        self._max_basket_size = max_basket_size

    @property
    def requests_count(self):
        """Gets the requests_count of this ServiceStats.

        Number of HTTP requests currently stored by service

        :return: The requests_count of this ServiceStats.
        :rtype: int
        """
        return self._requests_count

    @requests_count.setter
    def requests_count(self, requests_count):
        """Sets the requests_count of this ServiceStats.

        Number of HTTP requests currently stored by service

        :param requests_count: The requests_count of this ServiceStats.
        :type requests_count: int
        """

        self._requests_count = requests_count

    @property
    def requests_total_count(self):
        """Gets the requests_total_count of this ServiceStats.

        Total number of HTTP requests processed by service

        :return: The requests_total_count of this ServiceStats.
        :rtype: int
        """
        return self._requests_total_count

    @requests_total_count.setter
    def requests_total_count(self, requests_total_count):
        """Sets the requests_total_count of this ServiceStats.

        Total number of HTTP requests processed by service

        :param requests_total_count: The requests_total_count of this ServiceStats.
        :type requests_total_count: int
        """

        self._requests_total_count = requests_total_count

    @property
    def top_baskets_recent(self):
        """Gets the top_baskets_recent of this ServiceStats.

        Collection of top baskets recently active

        :return: The top_baskets_recent of this ServiceStats.
        :rtype: List[BasketInfo]
        """
        return self._top_baskets_recent

    @top_baskets_recent.setter
    def top_baskets_recent(self, top_baskets_recent):
        """Sets the top_baskets_recent of this ServiceStats.

        Collection of top baskets recently active

        :param top_baskets_recent: The top_baskets_recent of this ServiceStats.
        :type top_baskets_recent: List[BasketInfo]
        """

        self._top_baskets_recent = top_baskets_recent

    @property
    def top_baskets_size(self):
        """Gets the top_baskets_size of this ServiceStats.

        Collection of top basket by size

        :return: The top_baskets_size of this ServiceStats.
        :rtype: List[BasketInfo]
        """
        return self._top_baskets_size

    @top_baskets_size.setter
    def top_baskets_size(self, top_baskets_size):
        """Sets the top_baskets_size of this ServiceStats.

        Collection of top basket by size

        :param top_baskets_size: The top_baskets_size of this ServiceStats.
        :type top_baskets_size: List[BasketInfo]
        """

        self._top_baskets_size = top_baskets_size
