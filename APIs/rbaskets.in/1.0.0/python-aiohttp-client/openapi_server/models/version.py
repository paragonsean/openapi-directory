# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Version(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit: str=None, commit_short: str=None, name: str=None, source_code: str=None, version: str=None):
        """Version - a model defined in OpenAPI

        :param commit: The commit of this Version.
        :param commit_short: The commit_short of this Version.
        :param name: The name of this Version.
        :param source_code: The source_code of this Version.
        :param version: The version of this Version.
        """
        self.openapi_types = {
            'commit': str,
            'commit_short': str,
            'name': str,
            'source_code': str,
            'version': str
        }

        self.attribute_map = {
            'commit': 'commit',
            'commit_short': 'commit_short',
            'name': 'name',
            'source_code': 'source_code',
            'version': 'version'
        }

        self._commit = commit
        self._commit_short = commit_short
        self._name = name
        self._source_code = source_code
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Version':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Version of this Version.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit(self):
        """Gets the commit of this Version.

        Git commit this service is build from

        :return: The commit of this Version.
        :rtype: str
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this Version.

        Git commit this service is build from

        :param commit: The commit of this Version.
        :type commit: str
        """

        self._commit = commit

    @property
    def commit_short(self):
        """Gets the commit_short of this Version.

        Short form of git commit this service is build from

        :return: The commit_short of this Version.
        :rtype: str
        """
        return self._commit_short

    @commit_short.setter
    def commit_short(self, commit_short):
        """Sets the commit_short of this Version.

        Short form of git commit this service is build from

        :param commit_short: The commit_short of this Version.
        :type commit_short: str
        """

        self._commit_short = commit_short

    @property
    def name(self):
        """Gets the name of this Version.

        Service name

        :return: The name of this Version.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Version.

        Service name

        :param name: The name of this Version.
        :type name: str
        """

        self._name = name

    @property
    def source_code(self):
        """Gets the source_code of this Version.

        URL of the source code repository

        :return: The source_code of this Version.
        :rtype: str
        """
        return self._source_code

    @source_code.setter
    def source_code(self, source_code):
        """Sets the source_code of this Version.

        URL of the source code repository

        :param source_code: The source_code of this Version.
        :type source_code: str
        """

        self._source_code = source_code

    @property
    def version(self):
        """Gets the version of this Version.

        Service version

        :return: The version of this Version.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Version.

        Service version

        :param version: The version of this Version.
        :type version: str
        """

        self._version = version
