# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.request import Request
from openapi_server import util


class Requests(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, has_more: bool=None, requests: List[Request]=None, total_count: int=None):
        """Requests - a model defined in OpenAPI

        :param count: The count of this Requests.
        :param has_more: The has_more of this Requests.
        :param requests: The requests of this Requests.
        :param total_count: The total_count of this Requests.
        """
        self.openapi_types = {
            'count': int,
            'has_more': bool,
            'requests': List[Request],
            'total_count': int
        }

        self.attribute_map = {
            'count': 'count',
            'has_more': 'has_more',
            'requests': 'requests',
            'total_count': 'total_count'
        }

        self._count = count
        self._has_more = has_more
        self._requests = requests
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Requests':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Requests of this Requests.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Requests.

        Current number of collected requests hold by basket; not present if query is applied

        :return: The count of this Requests.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Requests.

        Current number of collected requests hold by basket; not present if query is applied

        :param count: The count of this Requests.
        :type count: int
        """

        self._count = count

    @property
    def has_more(self):
        """Gets the has_more of this Requests.

        Indicates if there are more requests collected by basket to fetch

        :return: The has_more of this Requests.
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this Requests.

        Indicates if there are more requests collected by basket to fetch

        :param has_more: The has_more of this Requests.
        :type has_more: bool
        """
        if has_more is None:
            raise ValueError("Invalid value for `has_more`, must not be `None`")

        self._has_more = has_more

    @property
    def requests(self):
        """Gets the requests of this Requests.

        Collection of collected requests

        :return: The requests of this Requests.
        :rtype: List[Request]
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this Requests.

        Collection of collected requests

        :param requests: The requests of this Requests.
        :type requests: List[Request]
        """
        if requests is None:
            raise ValueError("Invalid value for `requests`, must not be `None`")

        self._requests = requests

    @property
    def total_count(self):
        """Gets the total_count of this Requests.

        Total number of all requests passed through this basket; not present if query is applied

        :return: The total_count of this Requests.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this Requests.

        Total number of all requests passed through this basket; not present if query is applied

        :param total_count: The total_count of this Requests.
        :type total_count: int
        """

        self._total_count = total_count
