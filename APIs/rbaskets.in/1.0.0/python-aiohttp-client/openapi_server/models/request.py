# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, content_length: int=None, _date: int=None, headers: Dict[str, List[str]]=None, method: str=None, path: str=None, query: str=None):
        """Request - a model defined in OpenAPI

        :param body: The body of this Request.
        :param content_length: The content_length of this Request.
        :param _date: The _date of this Request.
        :param headers: The headers of this Request.
        :param method: The method of this Request.
        :param path: The path of this Request.
        :param query: The query of this Request.
        """
        self.openapi_types = {
            'body': str,
            'content_length': int,
            '_date': int,
            'headers': Dict[str, List[str]],
            'method': str,
            'path': str,
            'query': str
        }

        self.attribute_map = {
            'body': 'body',
            'content_length': 'content_length',
            '_date': 'date',
            'headers': 'headers',
            'method': 'method',
            'path': 'path',
            'query': 'query'
        }

        self._body = body
        self._content_length = content_length
        self.__date = _date
        self._headers = headers
        self._method = method
        self._path = path
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request of this Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this Request.

        Content of request body

        :return: The body of this Request.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Request.

        Content of request body

        :param body: The body of this Request.
        :type body: str
        """

        self._body = body

    @property
    def content_length(self):
        """Gets the content_length of this Request.

        Content length of request

        :return: The content_length of this Request.
        :rtype: int
        """
        return self._content_length

    @content_length.setter
    def content_length(self, content_length):
        """Sets the content_length of this Request.

        Content length of request

        :param content_length: The content_length of this Request.
        :type content_length: int
        """

        self._content_length = content_length

    @property
    def _date(self):
        """Gets the _date of this Request.

        Date and time of request in Unix time ms. format (number of milliseconds elapsed since January 1, 1970 UTC)

        :return: The _date of this Request.
        :rtype: int
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Request.

        Date and time of request in Unix time ms. format (number of milliseconds elapsed since January 1, 1970 UTC)

        :param _date: The _date of this Request.
        :type _date: int
        """

        self.__date = _date

    @property
    def headers(self):
        """Gets the headers of this Request.

        Map of HTTP headers, key represents name, value is array of values

        :return: The headers of this Request.
        :rtype: Dict[str, List[str]]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Request.

        Map of HTTP headers, key represents name, value is array of values

        :param headers: The headers of this Request.
        :type headers: Dict[str, List[str]]
        """

        self._headers = headers

    @property
    def method(self):
        """Gets the method of this Request.

        HTTP method of request

        :return: The method of this Request.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Request.

        HTTP method of request

        :param method: The method of this Request.
        :type method: str
        """

        self._method = method

    @property
    def path(self):
        """Gets the path of this Request.

        URL path of request

        :return: The path of this Request.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Request.

        URL path of request

        :param path: The path of this Request.
        :type path: str
        """

        self._path = path

    @property
    def query(self):
        """Gets the query of this Request.

        Query parameters of request

        :return: The query of this Request.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this Request.

        Query parameters of request

        :param query: The query of this Request.
        :type query: str
        """

        self._query = query
