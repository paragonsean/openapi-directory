# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity: int=None, expand_path: bool=None, forward_url: str=None, insecure_tls: bool=None, proxy_response: bool=None):
        """Config - a model defined in OpenAPI

        :param capacity: The capacity of this Config.
        :param expand_path: The expand_path of this Config.
        :param forward_url: The forward_url of this Config.
        :param insecure_tls: The insecure_tls of this Config.
        :param proxy_response: The proxy_response of this Config.
        """
        self.openapi_types = {
            'capacity': int,
            'expand_path': bool,
            'forward_url': str,
            'insecure_tls': bool,
            'proxy_response': bool
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'expand_path': 'expand_path',
            'forward_url': 'forward_url',
            'insecure_tls': 'insecure_tls',
            'proxy_response': 'proxy_response'
        }

        self._capacity = capacity
        self._expand_path = expand_path
        self._forward_url = forward_url
        self._insecure_tls = insecure_tls
        self._proxy_response = proxy_response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Config of this Config.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self):
        """Gets the capacity of this Config.

        Baskets capacity, defines maximum number of requests to store

        :return: The capacity of this Config.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Config.

        Baskets capacity, defines maximum number of requests to store

        :param capacity: The capacity of this Config.
        :type capacity: int
        """

        self._capacity = capacity

    @property
    def expand_path(self):
        """Gets the expand_path of this Config.

        If set to `true` the forward URL path will be expanded when original HTTP request contains compound path.

        :return: The expand_path of this Config.
        :rtype: bool
        """
        return self._expand_path

    @expand_path.setter
    def expand_path(self, expand_path):
        """Sets the expand_path of this Config.

        If set to `true` the forward URL path will be expanded when original HTTP request contains compound path.

        :param expand_path: The expand_path of this Config.
        :type expand_path: bool
        """

        self._expand_path = expand_path

    @property
    def forward_url(self):
        """Gets the forward_url of this Config.

        URL to forward all incoming requests of the basket, `empty` value disables forwarding

        :return: The forward_url of this Config.
        :rtype: str
        """
        return self._forward_url

    @forward_url.setter
    def forward_url(self, forward_url):
        """Sets the forward_url of this Config.

        URL to forward all incoming requests of the basket, `empty` value disables forwarding

        :param forward_url: The forward_url of this Config.
        :type forward_url: str
        """

        self._forward_url = forward_url

    @property
    def insecure_tls(self):
        """Gets the insecure_tls of this Config.

        If set to `true` the certificate verification will be disabled if forward URL indicates HTTPS scheme. **Warning:** enabling this feature has known security implications. 

        :return: The insecure_tls of this Config.
        :rtype: bool
        """
        return self._insecure_tls

    @insecure_tls.setter
    def insecure_tls(self, insecure_tls):
        """Sets the insecure_tls of this Config.

        If set to `true` the certificate verification will be disabled if forward URL indicates HTTPS scheme. **Warning:** enabling this feature has known security implications. 

        :param insecure_tls: The insecure_tls of this Config.
        :type insecure_tls: bool
        """

        self._insecure_tls = insecure_tls

    @property
    def proxy_response(self):
        """Gets the proxy_response of this Config.

        If set to `true` this basket behaves as a full proxy: responses from underlying service configured in `forward_url` are passed back to clients of original requests. The configuration of basket responses is ignored in this case. 

        :return: The proxy_response of this Config.
        :rtype: bool
        """
        return self._proxy_response

    @proxy_response.setter
    def proxy_response(self, proxy_response):
        """Sets the proxy_response of this Config.

        If set to `true` this basket behaves as a full proxy: responses from underlying service configured in `forward_url` are passed back to clients of original requests. The configuration of basket responses is ignored in this case. 

        :param proxy_response: The proxy_response of this Config.
        :type proxy_response: bool
        """

        self._proxy_response = proxy_response
