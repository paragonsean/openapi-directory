# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, headers: Dict[str, List[str]]=None, is_template: bool=None, status: int=None):
        """Response - a model defined in OpenAPI

        :param body: The body of this Response.
        :param headers: The headers of this Response.
        :param is_template: The is_template of this Response.
        :param status: The status of this Response.
        """
        self.openapi_types = {
            'body': str,
            'headers': Dict[str, List[str]],
            'is_template': bool,
            'status': int
        }

        self.attribute_map = {
            'body': 'body',
            'headers': 'headers',
            'is_template': 'is_template',
            'status': 'status'
        }

        self._body = body
        self._headers = headers
        self._is_template = is_template
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Response of this Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this Response.

        Content of response body

        :return: The body of this Response.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Response.

        Content of response body

        :param body: The body of this Response.
        :type body: str
        """

        self._body = body

    @property
    def headers(self):
        """Gets the headers of this Response.

        Map of HTTP headers, key represents name, value is array of values

        :return: The headers of this Response.
        :rtype: Dict[str, List[str]]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Response.

        Map of HTTP headers, key represents name, value is array of values

        :param headers: The headers of this Response.
        :type headers: Dict[str, List[str]]
        """

        self._headers = headers

    @property
    def is_template(self):
        """Gets the is_template of this Response.

        If set to `true` the body is treated as [HTML template](https://golang.org/pkg/html/template) that accepts input from request parameters. 

        :return: The is_template of this Response.
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this Response.

        If set to `true` the body is treated as [HTML template](https://golang.org/pkg/html/template) that accepts input from request parameters. 

        :param is_template: The is_template of this Response.
        :type is_template: bool
        """

        self._is_template = is_template

    @property
    def status(self):
        """Gets the status of this Response.

        The HTTP status code to reply with

        :return: The status of this Response.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Response.

        The HTTP status code to reply with

        :param status: The status of this Response.
        :type status: int
        """

        self._status = status
