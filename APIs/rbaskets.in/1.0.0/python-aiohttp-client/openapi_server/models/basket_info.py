# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BasketInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_request_date: int=None, name: str=None, requests_count: int=None, requests_total_count: int=None):
        """BasketInfo - a model defined in OpenAPI

        :param last_request_date: The last_request_date of this BasketInfo.
        :param name: The name of this BasketInfo.
        :param requests_count: The requests_count of this BasketInfo.
        :param requests_total_count: The requests_total_count of this BasketInfo.
        """
        self.openapi_types = {
            'last_request_date': int,
            'name': str,
            'requests_count': int,
            'requests_total_count': int
        }

        self.attribute_map = {
            'last_request_date': 'last_request_date',
            'name': 'name',
            'requests_count': 'requests_count',
            'requests_total_count': 'requests_total_count'
        }

        self._last_request_date = last_request_date
        self._name = name
        self._requests_count = requests_count
        self._requests_total_count = requests_total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasketInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasketInfo of this BasketInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_request_date(self):
        """Gets the last_request_date of this BasketInfo.

        Date and time of last request processed through this basket in Unix time ms. format (number of milliseconds elapsed since January 1, 1970 UTC).  If no requests were collected by this basket `0` is returned. 

        :return: The last_request_date of this BasketInfo.
        :rtype: int
        """
        return self._last_request_date

    @last_request_date.setter
    def last_request_date(self, last_request_date):
        """Sets the last_request_date of this BasketInfo.

        Date and time of last request processed through this basket in Unix time ms. format (number of milliseconds elapsed since January 1, 1970 UTC).  If no requests were collected by this basket `0` is returned. 

        :param last_request_date: The last_request_date of this BasketInfo.
        :type last_request_date: int
        """

        self._last_request_date = last_request_date

    @property
    def name(self):
        """Gets the name of this BasketInfo.

        Basket name

        :return: The name of this BasketInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BasketInfo.

        Basket name

        :param name: The name of this BasketInfo.
        :type name: str
        """

        self._name = name

    @property
    def requests_count(self):
        """Gets the requests_count of this BasketInfo.

        Current number of collected HTTP requests held by basket

        :return: The requests_count of this BasketInfo.
        :rtype: int
        """
        return self._requests_count

    @requests_count.setter
    def requests_count(self, requests_count):
        """Sets the requests_count of this BasketInfo.

        Current number of collected HTTP requests held by basket

        :param requests_count: The requests_count of this BasketInfo.
        :type requests_count: int
        """

        self._requests_count = requests_count

    @property
    def requests_total_count(self):
        """Gets the requests_total_count of this BasketInfo.

        Total number of all HTTP requests passed through this basket

        :return: The requests_total_count of this BasketInfo.
        :rtype: int
        """
        return self._requests_total_count

    @requests_total_count.setter
    def requests_total_count(self, requests_total_count):
        """Sets the requests_total_count of this BasketInfo.

        Total number of all HTTP requests passed through this basket

        :param requests_total_count: The requests_total_count of this BasketInfo.
        :type requests_total_count: int
        """

        self._requests_total_count = requests_total_count
